
HelicopterUnitTests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800200  00001ce6  00001d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800244  00800244  00001dbe  2**0
                  ALLOC
  3 .stab         00000b4c  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000026e  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a8  00000000  00000000  00002b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031fd  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001234  00000000  00000000  00005f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d19  00000000  00000000  00007159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a24  00000000  00000000  00007e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e7  00000000  00000000  00008898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001893  00000000  00000000  00009a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000b312  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ee       	ldi	r30, 0xE6	; 230
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 34       	cpi	r26, 0x44	; 68
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 e4       	ldi	r26, 0x44	; 68
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 34       	cpi	r26, 0x4A	; 74
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 0c 04 	call	0x818	; 0x818 <main>
     122:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_ZN10helicopter6buffer6Record13getRecordDataEv>:
				}
				
				void setRecordData(void *recordData, int sizeOfItem);
				
				
				byte* getRecordData()
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	0f 92       	push	r0
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
				{
					//Should this really return record data, or copy of it?
					return recordData;
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	fc 01       	movw	r30, r24
     140:	80 81       	ld	r24, Z
     142:	91 81       	ldd	r25, Z+1	; 0x01
				}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <_ZN10helicopter6buffer6Record15getSizeOfRecordEv>:
				
				int getSizeOfRecord()
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	0f 92       	push	r0
     154:	0f 92       	push	r0
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	89 83       	std	Y+1, r24	; 0x01
				{
					return sizeOfRecord;
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	fc 01       	movw	r30, r24
     164:	82 81       	ldd	r24, Z+2	; 0x02
     166:	93 81       	ldd	r25, Z+3	; 0x03
				}
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <_ZN10helicopter6buffer6Buffer13getBufferSizeEv>:
			
			public:
				Buffer();
				~Buffer();
				
				int getBufferSize()
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	0f 92       	push	r0
     178:	0f 92       	push	r0
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
				{
					return bufferSize;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	80 81       	ld	r24, Z
     18a:	91 81       	ldd	r25, Z+1	; 0x01
				}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>:
				int getFailedEvaluationId()
				{
					return failedEvaluationId;
				}
				
				void setFailedEvaluationId(int id)
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi+0x6>
     19c:	0f 92       	push	r0
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	9a 83       	std	Y+2, r25	; 0x02
     1a4:	89 83       	std	Y+1, r24	; 0x01
     1a6:	7c 83       	std	Y+4, r23	; 0x04
     1a8:	6b 83       	std	Y+3, r22	; 0x03
				{
					failedEvaluationId = id;
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	2b 81       	ldd	r18, Y+3	; 0x03
     1b0:	3c 81       	ldd	r19, Y+4	; 0x04
     1b2:	fc 01       	movw	r30, r24
     1b4:	31 83       	std	Z+1, r19	; 0x01
     1b6:	20 83       	st	Z, r18
				}
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <_Z19buffercreation_testPN19helicopterunittests4util13testframework8TestCaseE>:
		int someValue2;
		double someValue3;
};

int buffercreation_test(TestCase *test)
{
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	2a 97       	sbiw	r28, 0x0a	; 10
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
     1de:	9a 87       	std	Y+10, r25	; 0x0a
     1e0:	89 87       	std	Y+9, r24	; 0x09
	Buffer buff;
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN10helicopter6buffer6BufferC1Ev>
	AssertTrue(buff.getBufferSize() == 0, 1);
     1ea:	ce 01       	movw	r24, r28
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN10helicopter6buffer6Buffer13getBufferSizeEv>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	09 f4       	brne	.+2      	; 0x1fa <_Z19buffercreation_testPN19helicopterunittests4util13testframework8TestCaseE+0x34>
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	22 23       	and	r18, r18
     1fc:	49 f0       	breq	.+18     	; 0x210 <_Z19buffercreation_testPN19helicopterunittests4util13testframework8TestCaseE+0x4a>
     1fe:	89 85       	ldd	r24, Y+9	; 0x09
     200:	9a 85       	ldd	r25, Y+10	; 0x0a
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     20a:	0f ef       	ldi	r16, 0xFF	; 255
     20c:	1f ef       	ldi	r17, 0xFF	; 255
     20e:	15 c0       	rjmp	.+42     	; 0x23a <_Z19buffercreation_testPN19helicopterunittests4util13testframework8TestCaseE+0x74>
	AssertTrue(buff.dequeue() == NULL, 2);
     210:	ce 01       	movw	r24, r28
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN10helicopter6buffer6Buffer7dequeueEv>
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	00 97       	sbiw	r24, 0x00	; 0
     21c:	09 f4       	brne	.+2      	; 0x220 <_Z19buffercreation_testPN19helicopterunittests4util13testframework8TestCaseE+0x5a>
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	22 23       	and	r18, r18
     222:	49 f0       	breq	.+18     	; 0x236 <_Z19buffercreation_testPN19helicopterunittests4util13testframework8TestCaseE+0x70>
     224:	89 85       	ldd	r24, Y+9	; 0x09
     226:	9a 85       	ldd	r25, Y+10	; 0x0a
     228:	62 e0       	ldi	r22, 0x02	; 2
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     230:	0f ef       	ldi	r16, 0xFF	; 255
     232:	1f ef       	ldi	r17, 0xFF	; 255
     234:	02 c0       	rjmp	.+4      	; 0x23a <_Z19buffercreation_testPN19helicopterunittests4util13testframework8TestCaseE+0x74>
	
	
	return 0;
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	10 e0       	ldi	r17, 0x00	; 0
		double someValue3;
};

int buffercreation_test(TestCase *test)
{
	Buffer buff;
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN10helicopter6buffer6BufferD1Ev>
     242:	c8 01       	movw	r24, r16
	AssertTrue(buff.getBufferSize() == 0, 1);
	AssertTrue(buff.dequeue() == NULL, 2);
	
	
	return 0;
};
     244:	2a 96       	adiw	r28, 0x0a	; 10
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE>:

int addbufferrecord_test(TestCase *test)
{
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	aa 97       	sbiw	r28, 0x2a	; 42
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	9a a7       	lds	r25, 0x7a
     27a:	89 a7       	lds	r24, 0x79

	
	//Need test for thread safety. - but that won't happen.
	
	TestDataClass tc;
	tc.someValue1 = 3;
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	9a 87       	std	Y+10, r25	; 0x0a
     282:	89 87       	std	Y+9, r24	; 0x09
	tc.someValue2 = 44342;
     284:	86 e3       	ldi	r24, 0x36	; 54
     286:	9d ea       	ldi	r25, 0xAD	; 173
     288:	9c 87       	std	Y+12, r25	; 0x0c
     28a:	8b 87       	std	Y+11, r24	; 0x0b
	tc.someValue3 = 44.0221;
     28c:	81 ea       	ldi	r24, 0xA1	; 161
     28e:	96 e1       	ldi	r25, 0x16	; 22
     290:	a0 e3       	ldi	r26, 0x30	; 48
     292:	b2 e4       	ldi	r27, 0x42	; 66
     294:	8d 87       	std	Y+13, r24	; 0x0d
     296:	9e 87       	std	Y+14, r25	; 0x0e
     298:	af 87       	std	Y+15, r26	; 0x0f
     29a:	b8 8b       	std	Y+16, r27	; 0x10
	
	Record r;
     29c:	ce 01       	movw	r24, r28
     29e:	41 96       	adiw	r24, 0x11	; 17
     2a0:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN10helicopter6buffer6RecordC1Ev>
	r.setRecordData((void *) &tc, sizeof(tc));
     2a4:	ce 01       	movw	r24, r28
     2a6:	41 96       	adiw	r24, 0x11	; 17
     2a8:	9e 01       	movw	r18, r28
     2aa:	27 5f       	subi	r18, 0xF7	; 247
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
     2ae:	b9 01       	movw	r22, r18
     2b0:	48 e0       	ldi	r20, 0x08	; 8
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN10helicopter6buffer6Record13setRecordDataEPvi>
	
	Buffer buff;
     2b8:	ce 01       	movw	r24, r28
     2ba:	49 96       	adiw	r24, 0x19	; 25
     2bc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN10helicopter6buffer6BufferC1Ev>
	
	buff.enqueue(&r);
     2c0:	ce 01       	movw	r24, r28
     2c2:	49 96       	adiw	r24, 0x19	; 25
     2c4:	9e 01       	movw	r18, r28
     2c6:	2f 5e       	subi	r18, 0xEF	; 239
     2c8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ca:	b9 01       	movw	r22, r18
     2cc:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE>
	
	AssertTrue(buff.getBufferSize() == 1, 1);
     2d0:	ce 01       	movw	r24, r28
     2d2:	49 96       	adiw	r24, 0x19	; 25
     2d4:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN10helicopter6buffer6Buffer13getBufferSizeEv>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	91 05       	cpc	r25, r1
     2de:	09 f4       	brne	.+2      	; 0x2e2 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x88>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	22 23       	and	r18, r18
     2e4:	49 f0       	breq	.+18     	; 0x2f8 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x9e>
     2e6:	89 a5       	lds	r24, 0x69
     2e8:	9a a5       	lds	r25, 0x6a
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     2f2:	0f ef       	ldi	r16, 0xFF	; 255
     2f4:	1f ef       	ldi	r17, 0xFF	; 255
     2f6:	74 c1       	rjmp	.+744    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	
	Record *newr = (Record *) buff.dequeue();
     2f8:	ce 01       	movw	r24, r28
     2fa:	49 96       	adiw	r24, 0x19	; 25
     2fc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN10helicopter6buffer6Buffer7dequeueEv>
     300:	9a 83       	std	Y+2, r25	; 0x02
     302:	89 83       	std	Y+1, r24	; 0x01
	
	AssertTrue(newr != NULL, 2);
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	49 f4       	brne	.+18     	; 0x31e <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0xc4>
     30c:	89 a5       	lds	r24, 0x69
     30e:	9a a5       	lds	r25, 0x6a
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     318:	0f ef       	ldi	r16, 0xFF	; 255
     31a:	1f ef       	ldi	r17, 0xFF	; 255
     31c:	61 c1       	rjmp	.+706    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	AssertTrue(buff.getBufferSize() == 0, 3);
     31e:	ce 01       	movw	r24, r28
     320:	49 96       	adiw	r24, 0x19	; 25
     322:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN10helicopter6buffer6Buffer13getBufferSizeEv>
     326:	21 e0       	ldi	r18, 0x01	; 1
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	09 f4       	brne	.+2      	; 0x32e <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0xd4>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	22 23       	and	r18, r18
     330:	49 f0       	breq	.+18     	; 0x344 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0xea>
     332:	89 a5       	lds	r24, 0x69
     334:	9a a5       	lds	r25, 0x6a
     336:	63 e0       	ldi	r22, 0x03	; 3
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     33e:	0f ef       	ldi	r16, 0xFF	; 255
     340:	1f ef       	ldi	r17, 0xFF	; 255
     342:	4e c1       	rjmp	.+668    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	AssertTrue(newr != &r, 4);
     344:	ce 01       	movw	r24, r28
     346:	41 96       	adiw	r24, 0x11	; 17
     348:	29 81       	ldd	r18, Y+1	; 0x01
     34a:	3a 81       	ldd	r19, Y+2	; 0x02
     34c:	28 17       	cp	r18, r24
     34e:	39 07       	cpc	r19, r25
     350:	49 f4       	brne	.+18     	; 0x364 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x10a>
     352:	89 a5       	lds	r24, 0x69
     354:	9a a5       	lds	r25, 0x6a
     356:	64 e0       	ldi	r22, 0x04	; 4
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     35e:	0f ef       	ldi	r16, 0xFF	; 255
     360:	1f ef       	ldi	r17, 0xFF	; 255
     362:	3e c1       	rjmp	.+636    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	int jj = memcmp(newr, &r, sizeof(r));
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	9e 01       	movw	r18, r28
     36a:	2f 5e       	subi	r18, 0xEF	; 239
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	b9 01       	movw	r22, r18
     370:	48 e0       	ldi	r20, 0x08	; 8
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <memcmp>
     378:	9c 83       	std	Y+4, r25	; 0x04
     37a:	8b 83       	std	Y+3, r24	; 0x03
	AssertTrue(newr->getSizeOfRecord() == r.getSizeOfRecord(), 5);
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN10helicopter6buffer6Record15getSizeOfRecordEv>
     384:	8c 01       	movw	r16, r24
     386:	ce 01       	movw	r24, r28
     388:	41 96       	adiw	r24, 0x11	; 17
     38a:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN10helicopter6buffer6Record15getSizeOfRecordEv>
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	08 17       	cp	r16, r24
     392:	19 07       	cpc	r17, r25
     394:	09 f4       	brne	.+2      	; 0x398 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x13e>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	22 23       	and	r18, r18
     39a:	49 f0       	breq	.+18     	; 0x3ae <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x154>
     39c:	89 a5       	lds	r24, 0x69
     39e:	9a a5       	lds	r25, 0x6a
     3a0:	65 e0       	ldi	r22, 0x05	; 5
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     3a8:	0f ef       	ldi	r16, 0xFF	; 255
     3aa:	1f ef       	ldi	r17, 0xFF	; 255
     3ac:	19 c1       	rjmp	.+562    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	
	AssertTrue(((TestDataClass *)newr->getRecordData())->someValue1 == ((TestDataClass *)r.getRecordData())->someValue1, 6);
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     3b6:	fc 01       	movw	r30, r24
     3b8:	00 81       	ld	r16, Z
     3ba:	11 81       	ldd	r17, Z+1	; 0x01
     3bc:	ce 01       	movw	r24, r28
     3be:	41 96       	adiw	r24, 0x11	; 17
     3c0:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	08 17       	cp	r16, r24
     3ce:	19 07       	cpc	r17, r25
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x17a>
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	22 23       	and	r18, r18
     3d6:	49 f0       	breq	.+18     	; 0x3ea <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x190>
     3d8:	89 a5       	lds	r24, 0x69
     3da:	9a a5       	lds	r25, 0x6a
     3dc:	66 e0       	ldi	r22, 0x06	; 6
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     3e4:	0f ef       	ldi	r16, 0xFF	; 255
     3e6:	1f ef       	ldi	r17, 0xFF	; 255
     3e8:	fb c0       	rjmp	.+502    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	
	AssertTrue(((TestDataClass *)newr->getRecordData())->someValue2 == ((TestDataClass *)r.getRecordData())->someValue2, 7);
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     3f2:	fc 01       	movw	r30, r24
     3f4:	02 81       	ldd	r16, Z+2	; 0x02
     3f6:	13 81       	ldd	r17, Z+3	; 0x03
     3f8:	ce 01       	movw	r24, r28
     3fa:	41 96       	adiw	r24, 0x11	; 17
     3fc:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     400:	fc 01       	movw	r30, r24
     402:	82 81       	ldd	r24, Z+2	; 0x02
     404:	93 81       	ldd	r25, Z+3	; 0x03
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	08 17       	cp	r16, r24
     40a:	19 07       	cpc	r17, r25
     40c:	09 f4       	brne	.+2      	; 0x410 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x1b6>
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	22 23       	and	r18, r18
     412:	49 f0       	breq	.+18     	; 0x426 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x1cc>
     414:	89 a5       	lds	r24, 0x69
     416:	9a a5       	lds	r25, 0x6a
     418:	67 e0       	ldi	r22, 0x07	; 7
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     420:	0f ef       	ldi	r16, 0xFF	; 255
     422:	1f ef       	ldi	r17, 0xFF	; 255
     424:	dd c0       	rjmp	.+442    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	
	AssertTrue(((TestDataClass *)newr->getRecordData())->someValue3 == ((TestDataClass *)r.getRecordData())->someValue3, 8);
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     42e:	fc 01       	movw	r30, r24
     430:	e4 80       	ldd	r14, Z+4	; 0x04
     432:	f5 80       	ldd	r15, Z+5	; 0x05
     434:	06 81       	ldd	r16, Z+6	; 0x06
     436:	17 81       	ldd	r17, Z+7	; 0x07
     438:	ce 01       	movw	r24, r28
     43a:	41 96       	adiw	r24, 0x11	; 17
     43c:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     440:	fc 01       	movw	r30, r24
     442:	24 81       	ldd	r18, Z+4	; 0x04
     444:	35 81       	ldd	r19, Z+5	; 0x05
     446:	46 81       	ldd	r20, Z+6	; 0x06
     448:	57 81       	ldd	r21, Z+7	; 0x07
     44a:	dd 24       	eor	r13, r13
     44c:	d3 94       	inc	r13
     44e:	c8 01       	movw	r24, r16
     450:	b7 01       	movw	r22, r14
     452:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__cmpsf2>
     456:	88 23       	and	r24, r24
     458:	09 f0       	breq	.+2      	; 0x45c <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x202>
     45a:	dd 24       	eor	r13, r13
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	8d 25       	eor	r24, r13
     460:	88 23       	and	r24, r24
     462:	49 f0       	breq	.+18     	; 0x476 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x21c>
     464:	89 a5       	lds	r24, 0x69
     466:	9a a5       	lds	r25, 0x6a
     468:	68 e0       	ldi	r22, 0x08	; 8
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     470:	0f ef       	ldi	r16, 0xFF	; 255
     472:	1f ef       	ldi	r17, 0xFF	; 255
     474:	b5 c0       	rjmp	.+362    	; 0x5e0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x386>
	
	
	char *saying = "This is a saying";
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	9e 83       	std	Y+6, r25	; 0x06
     47c:	8d 83       	std	Y+5, r24	; 0x05
	
	Record anotherr;
     47e:	ce 01       	movw	r24, r28
     480:	81 96       	adiw	r24, 0x21	; 33
     482:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN10helicopter6buffer6RecordC1Ev>
	anotherr.setRecordData(saying, strlen(saying));
     486:	8d 81       	ldd	r24, Y+5	; 0x05
     488:	9e 81       	ldd	r25, Y+6	; 0x06
     48a:	9c 01       	movw	r18, r24
     48c:	f9 01       	movw	r30, r18
     48e:	01 90       	ld	r0, Z+
     490:	00 20       	and	r0, r0
     492:	e9 f7       	brne	.-6      	; 0x48e <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x234>
     494:	cf 01       	movw	r24, r30
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	82 1b       	sub	r24, r18
     49a:	93 0b       	sbc	r25, r19
     49c:	9c 01       	movw	r18, r24
     49e:	ce 01       	movw	r24, r28
     4a0:	81 96       	adiw	r24, 0x21	; 33
     4a2:	4d 81       	ldd	r20, Y+5	; 0x05
     4a4:	5e 81       	ldd	r21, Y+6	; 0x06
     4a6:	ba 01       	movw	r22, r20
     4a8:	a9 01       	movw	r20, r18
     4aa:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN10helicopter6buffer6Record13setRecordDataEPvi>
	
	buff.enqueue(&anotherr);
     4ae:	ce 01       	movw	r24, r28
     4b0:	49 96       	adiw	r24, 0x19	; 25
     4b2:	9e 01       	movw	r18, r28
     4b4:	2f 5d       	subi	r18, 0xDF	; 223
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	b9 01       	movw	r22, r18
     4ba:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE>
	AssertTrue(buff.getBufferSize() == 1, 9);
     4be:	ce 01       	movw	r24, r28
     4c0:	49 96       	adiw	r24, 0x19	; 25
     4c2:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN10helicopter6buffer6Buffer13getBufferSizeEv>
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	91 05       	cpc	r25, r1
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x276>
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	22 23       	and	r18, r18
     4d2:	49 f0       	breq	.+18     	; 0x4e6 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x28c>
     4d4:	89 a5       	lds	r24, 0x69
     4d6:	9a a5       	lds	r25, 0x6a
     4d8:	69 e0       	ldi	r22, 0x09	; 9
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     4e0:	0f ef       	ldi	r16, 0xFF	; 255
     4e2:	1f ef       	ldi	r17, 0xFF	; 255
     4e4:	79 c0       	rjmp	.+242    	; 0x5d8 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x37e>
	
	//test that memory addresses are different.
	Record *anotherr2 = buff.dequeue();
     4e6:	ce 01       	movw	r24, r28
     4e8:	49 96       	adiw	r24, 0x19	; 25
     4ea:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN10helicopter6buffer6Buffer7dequeueEv>
     4ee:	98 87       	std	Y+8, r25	; 0x08
     4f0:	8f 83       	std	Y+7, r24	; 0x07
	
	AssertTrue((size_t)anotherr2->getSizeOfRecord() == strlen(saying), 10);
     4f2:	8f 81       	ldd	r24, Y+7	; 0x07
     4f4:	98 85       	ldd	r25, Y+8	; 0x08
     4f6:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN10helicopter6buffer6Record15getSizeOfRecordEv>
     4fa:	ac 01       	movw	r20, r24
     4fc:	8d 81       	ldd	r24, Y+5	; 0x05
     4fe:	9e 81       	ldd	r25, Y+6	; 0x06
     500:	9c 01       	movw	r18, r24
     502:	f9 01       	movw	r30, r18
     504:	01 90       	ld	r0, Z+
     506:	00 20       	and	r0, r0
     508:	e9 f7       	brne	.-6      	; 0x504 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x2aa>
     50a:	cf 01       	movw	r24, r30
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	82 1b       	sub	r24, r18
     510:	93 0b       	sbc	r25, r19
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	48 17       	cp	r20, r24
     516:	59 07       	cpc	r21, r25
     518:	09 f4       	brne	.+2      	; 0x51c <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x2c2>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	22 23       	and	r18, r18
     51e:	49 f0       	breq	.+18     	; 0x532 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x2d8>
     520:	89 a5       	lds	r24, 0x69
     522:	9a a5       	lds	r25, 0x6a
     524:	6a e0       	ldi	r22, 0x0A	; 10
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     52c:	0f ef       	ldi	r16, 0xFF	; 255
     52e:	1f ef       	ldi	r17, 0xFF	; 255
     530:	53 c0       	rjmp	.+166    	; 0x5d8 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x37e>
	AssertTrue(strlen(anotherr2->getRecordData()) == strlen(saying), 11);
     532:	8f 81       	ldd	r24, Y+7	; 0x07
     534:	98 85       	ldd	r25, Y+8	; 0x08
     536:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     53a:	9c 01       	movw	r18, r24
     53c:	f9 01       	movw	r30, r18
     53e:	01 90       	ld	r0, Z+
     540:	00 20       	and	r0, r0
     542:	e9 f7       	brne	.-6      	; 0x53e <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x2e4>
     544:	cf 01       	movw	r24, r30
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	ac 01       	movw	r20, r24
     54a:	42 1b       	sub	r20, r18
     54c:	53 0b       	sbc	r21, r19
     54e:	8d 81       	ldd	r24, Y+5	; 0x05
     550:	9e 81       	ldd	r25, Y+6	; 0x06
     552:	9c 01       	movw	r18, r24
     554:	f9 01       	movw	r30, r18
     556:	01 90       	ld	r0, Z+
     558:	00 20       	and	r0, r0
     55a:	e9 f7       	brne	.-6      	; 0x556 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x2fc>
     55c:	cf 01       	movw	r24, r30
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	82 1b       	sub	r24, r18
     562:	93 0b       	sbc	r25, r19
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	48 17       	cp	r20, r24
     568:	59 07       	cpc	r21, r25
     56a:	09 f4       	brne	.+2      	; 0x56e <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x314>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	22 23       	and	r18, r18
     570:	49 f0       	breq	.+18     	; 0x584 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x32a>
     572:	89 a5       	lds	r24, 0x69
     574:	9a a5       	lds	r25, 0x6a
     576:	6b e0       	ldi	r22, 0x0B	; 11
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     57e:	0f ef       	ldi	r16, 0xFF	; 255
     580:	1f ef       	ldi	r17, 0xFF	; 255
     582:	2a c0       	rjmp	.+84     	; 0x5d8 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x37e>
	AssertTrue(strncmp(anotherr2->getRecordData(), saying, strlen(saying)) == 0, 12);
     584:	8f 81       	ldd	r24, Y+7	; 0x07
     586:	98 85       	ldd	r25, Y+8	; 0x08
     588:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
     58c:	bc 01       	movw	r22, r24
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	9e 81       	ldd	r25, Y+6	; 0x06
     592:	9c 01       	movw	r18, r24
     594:	f9 01       	movw	r30, r18
     596:	01 90       	ld	r0, Z+
     598:	00 20       	and	r0, r0
     59a:	e9 f7       	brne	.-6      	; 0x596 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x33c>
     59c:	cf 01       	movw	r24, r30
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	ac 01       	movw	r20, r24
     5a2:	42 1b       	sub	r20, r18
     5a4:	53 0b       	sbc	r21, r19
     5a6:	9a 01       	movw	r18, r20
     5a8:	4d 81       	ldd	r20, Y+5	; 0x05
     5aa:	5e 81       	ldd	r21, Y+6	; 0x06
     5ac:	cb 01       	movw	r24, r22
     5ae:	ba 01       	movw	r22, r20
     5b0:	a9 01       	movw	r20, r18
     5b2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <strncmp>
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	00 97       	sbiw	r24, 0x00	; 0
     5ba:	09 f4       	brne	.+2      	; 0x5be <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x364>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	22 23       	and	r18, r18
     5c0:	49 f0       	breq	.+18     	; 0x5d4 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x37a>
     5c2:	89 a5       	lds	r24, 0x69
     5c4:	9a a5       	lds	r25, 0x6a
     5c6:	6c e0       	ldi	r22, 0x0C	; 12
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     5ce:	0f ef       	ldi	r16, 0xFF	; 255
     5d0:	1f ef       	ldi	r17, 0xFF	; 255
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_Z20addbufferrecord_testPN19helicopterunittests4util13testframework8TestCaseE+0x37e>
	
	return 0;
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	10 e0       	ldi	r17, 0x00	; 0
	AssertTrue(((TestDataClass *)newr->getRecordData())->someValue3 == ((TestDataClass *)r.getRecordData())->someValue3, 8);
	
	
	char *saying = "This is a saying";
	
	Record anotherr;
     5d8:	ce 01       	movw	r24, r28
     5da:	81 96       	adiw	r24, 0x21	; 33
     5dc:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN10helicopter6buffer6RecordD1Ev>
	tc.someValue3 = 44.0221;
	
	Record r;
	r.setRecordData((void *) &tc, sizeof(tc));
	
	Buffer buff;
     5e0:	ce 01       	movw	r24, r28
     5e2:	49 96       	adiw	r24, 0x19	; 25
     5e4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN10helicopter6buffer6BufferD1Ev>
	TestDataClass tc;
	tc.someValue1 = 3;
	tc.someValue2 = 44342;
	tc.someValue3 = 44.0221;
	
	Record r;
     5e8:	ce 01       	movw	r24, r28
     5ea:	41 96       	adiw	r24, 0x11	; 17
     5ec:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN10helicopter6buffer6RecordD1Ev>
     5f0:	c8 01       	movw	r24, r16
	AssertTrue((size_t)anotherr2->getSizeOfRecord() == strlen(saying), 10);
	AssertTrue(strlen(anotherr2->getRecordData()) == strlen(saying), 11);
	AssertTrue(strncmp(anotherr2->getRecordData(), saying, strlen(saying)) == 0, 12);
	
	return 0;
};
     5f2:	aa 96       	adiw	r28, 0x2a	; 42
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	08 95       	ret

0000060e <_ZN19helicopterunittests4util13testframework8TestCaseC1Ev>:
				int testCaseId;
				
				public:
				int (*testCaseFunctionPtr) (TestCase *test);
				
				TestCase ()
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	0f 92       	push	r0
     614:	0f 92       	push	r0
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	9a 83       	std	Y+2, r25	; 0x02
     61c:	89 83       	std	Y+1, r24	; 0x01
				{
					this->testCaseId = 0;
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	fc 01       	movw	r30, r24
     624:	13 82       	std	Z+3, r1	; 0x03
     626:	12 82       	std	Z+2, r1	; 0x02
					failedEvaluationId = 0;
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	9a 81       	ldd	r25, Y+2	; 0x02
     62c:	fc 01       	movw	r30, r24
     62e:	11 82       	std	Z+1, r1	; 0x01
     630:	10 82       	st	Z, r1
					testCaseFunctionPtr = NULL;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	fc 01       	movw	r30, r24
     638:	15 82       	std	Z+5, r1	; 0x05
     63a:	14 82       	std	Z+4, r1	; 0x04
				}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <_ZN19helicopterunittests4util13testframework8TestCaseD1Ev>:
				{
					this->testCaseId = testCaseId;
					failedEvaluationId = 0;
				}
				
				~TestCase ()
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	0f 92       	push	r0
     64c:	0f 92       	push	r0
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
				{
					
					
				}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <_ZN19helicopterunittests4util13testframework8TestCase13getTestCaseIdEv>:
				
				int getTestCaseId()
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	0f 92       	push	r0
     666:	0f 92       	push	r0
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	9a 83       	std	Y+2, r25	; 0x02
     66e:	89 83       	std	Y+1, r24	; 0x01
				{
					return testCaseId;
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	fc 01       	movw	r30, r24
     676:	82 81       	ldd	r24, Z+2	; 0x02
     678:	93 81       	ldd	r25, Z+3	; 0x03
				}
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <_ZN19helicopterunittests4util13testframework8TestCase21getFailedEvaluationIdEv>:
				void setTestCaseId(int id)
				{
					testCaseId = id;
				}
				
				int getFailedEvaluationId()
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	0f 92       	push	r0
     68a:	0f 92       	push	r0
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	9a 83       	std	Y+2, r25	; 0x02
     692:	89 83       	std	Y+1, r24	; 0x01
				{
					return failedEvaluationId;
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	91 81       	ldd	r25, Z+1	; 0x01
				}
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev>:
					TestCase testCases[MAXTESTCASES];
					TestCase failedTestCases[MAXFAILEDTESTCASES];
		
				public: 
				
					TestSuite()
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	0f 92       	push	r0
     6b6:	0f 92       	push	r0
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	9a 83       	std	Y+2, r25	; 0x02
     6be:	89 83       	std	Y+1, r24	; 0x01
					{
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	04 96       	adiw	r24, 0x04	; 4
     6c6:	8c 01       	movw	r16, r24
     6c8:	0f 2e       	mov	r0, r31
     6ca:	f3 e6       	ldi	r31, 0x63	; 99
     6cc:	ef 2e       	mov	r14, r31
     6ce:	ff 24       	eor	r15, r15
     6d0:	f0 2d       	mov	r31, r0
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev+0x3c>
     6d4:	c8 01       	movw	r24, r16
     6d6:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN19helicopterunittests4util13testframework8TestCaseC1Ev>
     6da:	0a 5f       	subi	r16, 0xFA	; 250
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	08 94       	sec
     6e0:	e1 08       	sbc	r14, r1
     6e2:	f1 08       	sbc	r15, r1
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	9f ef       	ldi	r25, 0xFF	; 255
     6e8:	e9 16       	cp	r14, r25
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	f9 06       	cpc	r15, r25
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev+0x4a>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	88 23       	and	r24, r24
     6f4:	79 f7       	brne	.-34     	; 0x6d4 <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev+0x2c>
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
     6fa:	84 5a       	subi	r24, 0xA4	; 164
     6fc:	9d 4f       	sbci	r25, 0xFD	; 253
     6fe:	8c 01       	movw	r16, r24
     700:	0f 2e       	mov	r0, r31
     702:	f3 e6       	ldi	r31, 0x63	; 99
     704:	ef 2e       	mov	r14, r31
     706:	ff 24       	eor	r15, r15
     708:	f0 2d       	mov	r31, r0
     70a:	08 c0       	rjmp	.+16     	; 0x71c <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev+0x74>
     70c:	c8 01       	movw	r24, r16
     70e:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN19helicopterunittests4util13testframework8TestCaseC1Ev>
     712:	0a 5f       	subi	r16, 0xFA	; 250
     714:	1f 4f       	sbci	r17, 0xFF	; 255
     716:	08 94       	sec
     718:	e1 08       	sbc	r14, r1
     71a:	f1 08       	sbc	r15, r1
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	ef ef       	ldi	r30, 0xFF	; 255
     720:	ee 16       	cp	r14, r30
     722:	ef ef       	ldi	r30, 0xFF	; 255
     724:	fe 06       	cpc	r15, r30
     726:	09 f4       	brne	.+2      	; 0x72a <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev+0x82>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	88 23       	and	r24, r24
     72c:	79 f7       	brne	.-34     	; 0x70c <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev+0x64>
						failureCount=0;
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
     732:	fc 01       	movw	r30, r24
     734:	11 82       	std	Z+1, r1	; 0x01
     736:	10 82       	st	Z, r1
						testsCount=0;
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	fc 01       	movw	r30, r24
     73e:	13 82       	std	Z+3, r1	; 0x03
     740:	12 82       	std	Z+2, r1	; 0x02
					}
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	08 95       	ret

00000754 <_ZN19helicopterunittests4util13testframework9TestSuite11getFailuresEv>:
	
					void addTest(int (*testCaseFunctionPtr) (TestCase *), int);
		
					TestCase* getFailures()
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	0f 92       	push	r0
     75a:	0f 92       	push	r0
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	9a 83       	std	Y+2, r25	; 0x02
     762:	89 83       	std	Y+1, r24	; 0x01
					{
						return failedTestCases;
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	84 5a       	subi	r24, 0xA4	; 164
     76a:	9d 4f       	sbci	r25, 0xFD	; 253
					}
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <_ZN19helicopterunittests4util13testframework9TestSuite15getFailureCountEv>:
		
					int getFailureCount()
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	0f 92       	push	r0
     77c:	0f 92       	push	r0
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	9a 83       	std	Y+2, r25	; 0x02
     784:	89 83       	std	Y+1, r24	; 0x01
					{
						return failureCount;
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	fc 01       	movw	r30, r24
     78c:	80 81       	ld	r24, Z
     78e:	91 81       	ldd	r25, Z+1	; 0x01
					}
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev>:
{
	namespace util
	{
		namespace testframework
		{
			class TestSuite
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	0f 92       	push	r0
     7a4:	0f 92       	push	r0
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	9a 83       	std	Y+2, r25	; 0x02
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	84 5a       	subi	r24, 0xA4	; 164
     7b4:	9d 4f       	sbci	r25, 0xFD	; 253
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	91 f0       	breq	.+36     	; 0x7de <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev+0x44>
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	8c 01       	movw	r16, r24
     7c0:	0c 54       	subi	r16, 0x4C	; 76
     7c2:	1b 4f       	sbci	r17, 0xFB	; 251
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	84 5a       	subi	r24, 0xA4	; 164
     7ca:	9d 4f       	sbci	r25, 0xFD	; 253
     7cc:	08 17       	cp	r16, r24
     7ce:	19 07       	cpc	r17, r25
     7d0:	31 f0       	breq	.+12     	; 0x7de <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev+0x44>
     7d2:	06 50       	subi	r16, 0x06	; 6
     7d4:	10 40       	sbci	r17, 0x00	; 0
     7d6:	c8 01       	movw	r24, r16
     7d8:	0e 94 23 03 	call	0x646	; 0x646 <_ZN19helicopterunittests4util13testframework8TestCaseD1Ev>
     7dc:	f3 cf       	rjmp	.-26     	; 0x7c4 <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev+0x2a>
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	04 96       	adiw	r24, 0x04	; 4
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	89 f0       	breq	.+34     	; 0x80a <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev+0x70>
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	8c 01       	movw	r16, r24
     7ee:	04 5a       	subi	r16, 0xA4	; 164
     7f0:	1d 4f       	sbci	r17, 0xFD	; 253
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	9a 81       	ldd	r25, Y+2	; 0x02
     7f6:	04 96       	adiw	r24, 0x04	; 4
     7f8:	08 17       	cp	r16, r24
     7fa:	19 07       	cpc	r17, r25
     7fc:	31 f0       	breq	.+12     	; 0x80a <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev+0x70>
     7fe:	06 50       	subi	r16, 0x06	; 6
     800:	10 40       	sbci	r17, 0x00	; 0
     802:	c8 01       	movw	r24, r16
     804:	0e 94 23 03 	call	0x646	; 0x646 <_ZN19helicopterunittests4util13testframework8TestCaseD1Ev>
     808:	f4 cf       	rjmp	.-24     	; 0x7f2 <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev+0x58>
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <main>:
#include <stdio.h>

using namespace helicopter::buffer;

int main(void)
{	
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	ca 5b       	subi	r28, 0xBA	; 186
     826:	d4 40       	sbci	r29, 0x04	; 4
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	cd bf       	out	0x3d, r28	; 61
	TestSuite helicopterTests;
     832:	ce 01       	movw	r24, r28
     834:	07 96       	adiw	r24, 0x07	; 7
     836:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN19helicopterunittests4util13testframework9TestSuiteC1Ev>
	
	helicopterTests.addTest(buffercreation_test, 1);
     83a:	ce 01       	movw	r24, r28
     83c:	07 96       	adiw	r24, 0x07	; 7
     83e:	23 ee       	ldi	r18, 0xE3	; 227
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	b9 01       	movw	r22, r18
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN19helicopterunittests4util13testframework9TestSuite7addTestEPFiPNS1_8TestCaseEEi>
	helicopterTests.addTest(addbufferrecord_test, 2);
     84c:	ce 01       	movw	r24, r28
     84e:	07 96       	adiw	r24, 0x07	; 7
     850:	2d e2       	ldi	r18, 0x2D	; 45
     852:	31 e0       	ldi	r19, 0x01	; 1
     854:	b9 01       	movw	r22, r18
     856:	42 e0       	ldi	r20, 0x02	; 2
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN19helicopterunittests4util13testframework9TestSuite7addTestEPFiPNS1_8TestCaseEEi>
	helicopterTests.addTest(schedulertask_test, 3);
     85e:	ce 01       	movw	r24, r28
     860:	07 96       	adiw	r24, 0x07	; 7
     862:	25 e0       	ldi	r18, 0x05	; 5
     864:	35 e0       	ldi	r19, 0x05	; 5
     866:	b9 01       	movw	r22, r18
     868:	43 e0       	ldi	r20, 0x03	; 3
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN19helicopterunittests4util13testframework9TestSuite7addTestEPFiPNS1_8TestCaseEEi>
	
	helicopterTests.runTests();
     870:	ce 01       	movw	r24, r28
     872:	07 96       	adiw	r24, 0x07	; 7
     874:	0e 94 78 06 	call	0xcf0	; 0xcf0 <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv>
	
	for (int i = 0; i < helicopterTests.getFailureCount(); i++)
     878:	1a 82       	std	Y+2, r1	; 0x02
     87a:	19 82       	std	Y+1, r1	; 0x01
     87c:	2e c0       	rjmp	.+92     	; 0x8da <main+0xc2>
	{
		int failedMethodId = helicopterTests.getFailures()[i].getTestCaseId();
     87e:	ce 01       	movw	r24, r28
     880:	07 96       	adiw	r24, 0x07	; 7
     882:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN19helicopterunittests4util13testframework9TestSuite11getFailuresEv>
     886:	ac 01       	movw	r20, r24
     888:	29 81       	ldd	r18, Y+1	; 0x01
     88a:	3a 81       	ldd	r19, Y+2	; 0x02
     88c:	c9 01       	movw	r24, r18
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	84 0f       	add	r24, r20
     89c:	95 1f       	adc	r25, r21
     89e:	0e 94 30 03 	call	0x660	; 0x660 <_ZN19helicopterunittests4util13testframework8TestCase13getTestCaseIdEv>
     8a2:	9c 83       	std	Y+4, r25	; 0x04
     8a4:	8b 83       	std	Y+3, r24	; 0x03
		int failedEvaluationId = helicopterTests.getFailures()[i].getFailedEvaluationId();
     8a6:	ce 01       	movw	r24, r28
     8a8:	07 96       	adiw	r24, 0x07	; 7
     8aa:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN19helicopterunittests4util13testframework9TestSuite11getFailuresEv>
     8ae:	ac 01       	movw	r20, r24
     8b0:	29 81       	ldd	r18, Y+1	; 0x01
     8b2:	3a 81       	ldd	r19, Y+2	; 0x02
     8b4:	c9 01       	movw	r24, r18
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	82 0f       	add	r24, r18
     8bc:	93 1f       	adc	r25, r19
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	84 0f       	add	r24, r20
     8c4:	95 1f       	adc	r25, r21
     8c6:	0e 94 42 03 	call	0x684	; 0x684 <_ZN19helicopterunittests4util13testframework8TestCase21getFailedEvaluationIdEv>
     8ca:	9e 83       	std	Y+6, r25	; 0x06
     8cc:	8d 83       	std	Y+5, r24	; 0x05
		__asm__("nop");
     8ce:	00 00       	nop
	helicopterTests.addTest(addbufferrecord_test, 2);
	helicopterTests.addTest(schedulertask_test, 3);
	
	helicopterTests.runTests();
	
	for (int i = 0; i < helicopterTests.getFailureCount(); i++)
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	9a 81       	ldd	r25, Y+2	; 0x02
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	9a 83       	std	Y+2, r25	; 0x02
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	ce 01       	movw	r24, r28
     8dc:	07 96       	adiw	r24, 0x07	; 7
     8de:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN19helicopterunittests4util13testframework9TestSuite15getFailureCountEv>
     8e2:	9c 01       	movw	r18, r24
     8e4:	41 e0       	ldi	r20, 0x01	; 1
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	82 17       	cp	r24, r18
     8ec:	93 07       	cpc	r25, r19
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <main+0xda>
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	44 23       	and	r20, r20
     8f4:	21 f6       	brne	.-120    	; 0x87e <main+0x66>
		__asm__("nop");
		//Investigate printf because this is only for simulator. but have it so that it can easily be
		//removed for testing on hardware.
	}
	
	if (helicopterTests.getFailureCount() != 0)
     8f6:	ce 01       	movw	r24, r28
     8f8:	07 96       	adiw	r24, 0x07	; 7
     8fa:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN19helicopterunittests4util13testframework9TestSuite15getFailureCountEv>
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	00 97       	sbiw	r24, 0x00	; 0
     902:	09 f4       	brne	.+2      	; 0x906 <main+0xee>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	22 23       	and	r18, r18
     908:	19 f0       	breq	.+6      	; 0x910 <main+0xf8>
	{
		return -1;
     90a:	0f ef       	ldi	r16, 0xFF	; 255
     90c:	1f ef       	ldi	r17, 0xFF	; 255
     90e:	02 c0       	rjmp	.+4      	; 0x914 <main+0xfc>
	}
	
	return 0;
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0

using namespace helicopter::buffer;

int main(void)
{	
	TestSuite helicopterTests;
     914:	ce 01       	movw	r24, r28
     916:	07 96       	adiw	r24, 0x07	; 7
     918:	0e 94 cd 03 	call	0x79a	; 0x79a <_ZN19helicopterunittests4util13testframework9TestSuiteD1Ev>
     91c:	c8 01       	movw	r24, r16
	{
		return -1;
	}
	
	return 0;
     91e:	c6 54       	subi	r28, 0x46	; 70
     920:	db 4f       	sbci	r29, 0xFB	; 251
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret
				
				void setFailedEvaluationId(int id)
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	00 d0       	rcall	.+0      	; 0x93c <main+0x124>
     93c:	0f 92       	push	r0
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	9a 83       	std	Y+2, r25	; 0x02
     944:	89 83       	std	Y+1, r24	; 0x01
     946:	7c 83       	std	Y+4, r23	; 0x04
     948:	6b 83       	std	Y+3, r22	; 0x03
				{
					failedEvaluationId = id;
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	9a 81       	ldd	r25, Y+2	; 0x02
     94e:	2b 81       	ldd	r18, Y+3	; 0x03
     950:	3c 81       	ldd	r19, Y+4	; 0x04
     952:	fc 01       	movw	r30, r24
     954:	31 83       	std	Z+1, r19	; 0x01
     956:	20 83       	st	Z, r18
				}
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <_ZN11CounterTaskC1Eii>:
class CounterTask : public Task
{
public:
	int counter;

	CounterTask (int delay, int period) : Task(delay, period)
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	00 d0       	rcall	.+0      	; 0x96c <_ZN11CounterTaskC1Eii+0x6>
     96c:	00 d0       	rcall	.+0      	; 0x96e <_ZN11CounterTaskC1Eii+0x8>
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	7c 83       	std	Y+4, r23	; 0x04
     978:	6b 83       	std	Y+3, r22	; 0x03
     97a:	5e 83       	std	Y+6, r21	; 0x06
     97c:	4d 83       	std	Y+5, r20	; 0x05
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	4b 81       	ldd	r20, Y+3	; 0x03
     984:	5c 81       	ldd	r21, Y+4	; 0x04
     986:	2d 81       	ldd	r18, Y+5	; 0x05
     988:	3e 81       	ldd	r19, Y+6	; 0x06
     98a:	ba 01       	movw	r22, r20
     98c:	a9 01       	movw	r20, r18
     98e:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN10helicopter5tasks4TaskC1Eii>
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	21 e2       	ldi	r18, 0x21	; 33
     998:	32 e0       	ldi	r19, 0x02	; 2
     99a:	fc 01       	movw	r30, r24
     99c:	31 83       	std	Z+1, r19	; 0x01
     99e:	20 83       	st	Z, r18
	{
		counter = 0;
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	fc 01       	movw	r30, r24
     9a6:	10 86       	std	Z+8, r1	; 0x08
     9a8:	17 82       	std	Z+7, r1	; 0x07
	}
     9aa:	26 96       	adiw	r28, 0x06	; 6
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <_ZN11CounterTask4initEv>:
	
	void init()
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	0f 92       	push	r0
     9c2:	0f 92       	push	r0
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
	{

	}
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <_ZN11CounterTask11runTaskImplEv>:
	
	void runTaskImpl() {
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	0f 92       	push	r0
     9dc:	0f 92       	push	r0
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	9a 83       	std	Y+2, r25	; 0x02
     9e4:	89 83       	std	Y+1, r24	; 0x01
		counter++;
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	fc 01       	movw	r30, r24
     9ec:	87 81       	ldd	r24, Z+7	; 0x07
     9ee:	90 85       	ldd	r25, Z+8	; 0x08
     9f0:	9c 01       	movw	r18, r24
     9f2:	2f 5f       	subi	r18, 0xFF	; 255
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	fc 01       	movw	r30, r24
     9fc:	30 87       	std	Z+8, r19	; 0x08
     9fe:	27 83       	std	Z+7, r18	; 0x07
	}
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE>:
};


int schedulertask_test(TestCase *test)
{	
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	2c 97       	sbiw	r28, 0x0c	; 12
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	9c 87       	std	Y+12, r25	; 0x0c
     a24:	8b 87       	std	Y+11, r24	; 0x0b
	CounterTask *counterTask1 = new CounterTask(1, 10);//starting at tick 1, execute every 10 ticks. 
     a26:	89 e0       	ldi	r24, 0x09	; 9
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 49 08 	call	0x1092	; 0x1092 <_Znwj>
     a2e:	8c 01       	movw	r16, r24
     a30:	c8 01       	movw	r24, r16
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	4a e0       	ldi	r20, 0x0A	; 10
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN11CounterTaskC1Eii>
     a3e:	1c 83       	std	Y+4, r17	; 0x04
     a40:	0b 83       	std	Y+3, r16	; 0x03
	Task *counterTask2 = new CounterTask(5, 10);
     a42:	89 e0       	ldi	r24, 0x09	; 9
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 49 08 	call	0x1092	; 0x1092 <_Znwj>
     a4a:	8c 01       	movw	r16, r24
     a4c:	c8 01       	movw	r24, r16
     a4e:	65 e0       	ldi	r22, 0x05	; 5
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	4a e0       	ldi	r20, 0x0A	; 10
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN11CounterTaskC1Eii>
     a5a:	1e 83       	std	Y+6, r17	; 0x06
     a5c:	0d 83       	std	Y+5, r16	; 0x05
	
	
	Scheduler *scheduler = Scheduler::getScheduler();
     a5e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
     a62:	98 87       	std	Y+8, r25	; 0x08
     a64:	8f 83       	std	Y+7, r24	; 0x07
	//Scheduler scheduler(12, 8);
	
	scheduler->addTask(counterTask1);
     a66:	8f 81       	ldd	r24, Y+7	; 0x07
     a68:	98 85       	ldd	r25, Y+8	; 0x08
     a6a:	2b 81       	ldd	r18, Y+3	; 0x03
     a6c:	3c 81       	ldd	r19, Y+4	; 0x04
     a6e:	b9 01       	movw	r22, r18
     a70:	0e 94 0a 0b 	call	0x1614	; 0x1614 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	scheduler->addTask(counterTask2);
     a74:	8f 81       	ldd	r24, Y+7	; 0x07
     a76:	98 85       	ldd	r25, Y+8	; 0x08
     a78:	2d 81       	ldd	r18, Y+5	; 0x05
     a7a:	3e 81       	ldd	r19, Y+6	; 0x06
     a7c:	b9 01       	movw	r22, r18
     a7e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
     a82:	8f 81       	ldd	r24, Y+7	; 0x07
     a84:	98 85       	ldd	r25, Y+8	; 0x08
     a86:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	AssertTrue(counterTask1->counter == 0, 1);
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	fc 01       	movw	r30, r24
     a90:	87 81       	ldd	r24, Z+7	; 0x07
     a92:	90 85       	ldd	r25, Z+8	; 0x08
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	49 f0       	breq	.+18     	; 0xaaa <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE+0xa0>
     a98:	8b 85       	ldd	r24, Y+11	; 0x0b
     a9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	9f ef       	ldi	r25, 0xFF	; 255
     aa8:	30 c0       	rjmp	.+96     	; 0xb0a <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE+0x100>
	
	int previousCounter = 0;
     aaa:	1a 86       	std	Y+10, r1	; 0x0a
     aac:	19 86       	std	Y+9, r1	; 0x09
	
	scheduler->start();
     aae:	8f 81       	ldd	r24, Y+7	; 0x07
     ab0:	98 85       	ldd	r25, Y+8	; 0x08
     ab2:	0e 94 15 0c 	call	0x182a	; 0x182a <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	
	for (int i = 0; i < 10; i++)
     ab6:	1a 82       	std	Y+2, r1	; 0x02
     ab8:	19 82       	std	Y+1, r1	; 0x01
     aba:	09 c0       	rjmp	.+18     	; 0xace <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE+0xc4>
	{
		//_delay_ms(2);
		
		
		//TODO: Implement the dispatcher so that the tasks are actually called
		scheduler->dispatch(); //ensure it includes processor sleeping.
     abc:	8f 81       	ldd	r24, Y+7	; 0x07
     abe:	98 85       	ldd	r25, Y+8	; 0x08
     ac0:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	int previousCounter = 0;
	
	scheduler->start();
	
	
	for (int i = 0; i < 10; i++)
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	8a 30       	cpi	r24, 0x0A	; 10
     ad6:	91 05       	cpc	r25, r1
     ad8:	0c f0       	brlt	.+2      	; 0xadc <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE+0xd2>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	22 23       	and	r18, r18
     ade:	71 f7       	brne	.-36     	; 0xabc <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE+0xb2>
		//are actually being called. 
		
		//TODO: 
		//include a precise timing test to ensure that precise timing is being performed.
	}
	AssertTrue(counterTask1->counter  > previousCounter, 2);
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	fc 01       	movw	r30, r24
     ae6:	27 81       	ldd	r18, Z+7	; 0x07
     ae8:	30 85       	ldd	r19, Z+8	; 0x08
     aea:	89 85       	ldd	r24, Y+9	; 0x09
     aec:	9a 85       	ldd	r25, Y+10	; 0x0a
     aee:	82 17       	cp	r24, r18
     af0:	93 07       	cpc	r25, r19
     af2:	4c f0       	brlt	.+18     	; 0xb06 <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE+0xfc>
     af4:	8b 85       	ldd	r24, Y+11	; 0x0b
     af6:	9c 85       	ldd	r25, Y+12	; 0x0c
     af8:	62 e0       	ldi	r22, 0x02	; 2
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	9f ef       	ldi	r25, 0xFF	; 255
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <_Z18schedulertask_testPN19helicopterunittests4util13testframework8TestCaseE+0x100>
	
	return 0;
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
};
     b0a:	2c 96       	adiw	r28, 0x0c	; 12
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	08 95       	ret

00000b20 <_ZN19helicopterunittests4util13testframework8TestCaseC1Ei>:
					this->testCaseId = 0;
					failedEvaluationId = 0;
					testCaseFunctionPtr = NULL;
				}
				
				TestCase (int testCaseId)
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN19helicopterunittests4util13testframework8TestCaseC1Ei+0x6>
     b26:	0f 92       	push	r0
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	7c 83       	std	Y+4, r23	; 0x04
     b32:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->testCaseId = testCaseId;
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	2b 81       	ldd	r18, Y+3	; 0x03
     b3a:	3c 81       	ldd	r19, Y+4	; 0x04
     b3c:	fc 01       	movw	r30, r24
     b3e:	33 83       	std	Z+3, r19	; 0x03
     b40:	22 83       	std	Z+2, r18	; 0x02
					failedEvaluationId = 0;
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	9a 81       	ldd	r25, Y+2	; 0x02
     b46:	fc 01       	movw	r30, r24
     b48:	11 82       	std	Z+1, r1	; 0x01
     b4a:	10 82       	st	Z, r1
				}
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret
				
				~TestCase ()
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	0f 92       	push	r0
     b60:	0f 92       	push	r0
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
				{
					
					
				}
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret
				
				int getTestCaseId()
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	0f 92       	push	r0
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
				{
					return testCaseId;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	fc 01       	movw	r30, r24
     b8a:	82 81       	ldd	r24, Z+2	; 0x02
     b8c:	93 81       	ldd	r25, Z+3	; 0x03
				}
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <_ZN19helicopterunittests4util13testframework8TestCase13setTestCaseIdEi>:
				
				void setTestCaseId(int id)
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <_ZN19helicopterunittests4util13testframework8TestCase13setTestCaseIdEi+0x6>
     b9e:	0f 92       	push	r0
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	7c 83       	std	Y+4, r23	; 0x04
     baa:	6b 83       	std	Y+3, r22	; 0x03
				{
					testCaseId = id;
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	2b 81       	ldd	r18, Y+3	; 0x03
     bb2:	3c 81       	ldd	r19, Y+4	; 0x04
     bb4:	fc 01       	movw	r30, r24
     bb6:	33 83       	std	Z+3, r19	; 0x03
     bb8:	22 83       	std	Z+2, r18	; 0x02
				}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret
				
				int getFailedEvaluationId()
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	0f 92       	push	r0
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	9a 83       	std	Y+2, r25	; 0x02
     bd6:	89 83       	std	Y+1, r24	; 0x01
				{
					return failedEvaluationId;
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	fc 01       	movw	r30, r24
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
				}
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret
				
				void setFailedEvaluationId(int id)
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <_ZN19helicopterunittests4util13testframework8TestCase13setTestCaseIdEi+0x5a>
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	9a 83       	std	Y+2, r25	; 0x02
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	7c 83       	std	Y+4, r23	; 0x04
     bfe:	6b 83       	std	Y+3, r22	; 0x03
				{
					failedEvaluationId = id;
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	2b 81       	ldd	r18, Y+3	; 0x03
     c06:	3c 81       	ldd	r19, Y+4	; 0x04
     c08:	fc 01       	movw	r30, r24
     c0a:	31 83       	std	Z+1, r19	; 0x01
     c0c:	20 83       	st	Z, r18
				}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <_ZN19helicopterunittests4util13testframework9TestSuite7addTestEPFiPNS1_8TestCaseEEi>:
#include "commonheader.h"

using namespace helicopterunittests::util::testframework;

void TestSuite::addTest(int (*testCaseFunctionPtr) (TestCase *), int testCaseId)
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	2c 97       	sbiw	r28, 0x0c	; 12
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	98 87       	std	Y+8, r25	; 0x08
     c32:	8f 83       	std	Y+7, r24	; 0x07
     c34:	7a 87       	std	Y+10, r23	; 0x0a
     c36:	69 87       	std	Y+9, r22	; 0x09
     c38:	5c 87       	std	Y+12, r21	; 0x0c
     c3a:	4b 87       	std	Y+11, r20	; 0x0b
	if (this->testsCount < MAXFAILEDTESTCASES)
     c3c:	8f 81       	ldd	r24, Y+7	; 0x07
     c3e:	98 85       	ldd	r25, Y+8	; 0x08
     c40:	fc 01       	movw	r30, r24
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	84 36       	cpi	r24, 0x64	; 100
     c48:	91 05       	cpc	r25, r1
     c4a:	0c f0       	brlt	.+2      	; 0xc4e <_ZN19helicopterunittests4util13testframework9TestSuite7addTestEPFiPNS1_8TestCaseEEi+0x32>
     c4c:	48 c0       	rjmp	.+144    	; 0xcde <_ZN19helicopterunittests4util13testframework9TestSuite7addTestEPFiPNS1_8TestCaseEEi+0xc2>
	{
		TestCase tc(testCaseId);
     c4e:	2b 85       	ldd	r18, Y+11	; 0x0b
     c50:	3c 85       	ldd	r19, Y+12	; 0x0c
     c52:	ce 01       	movw	r24, r28
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	b9 01       	movw	r22, r18
     c58:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN19helicopterunittests4util13testframework8TestCaseC1Ei>
			
		//set function pointer
		tc.testCaseFunctionPtr = testCaseFunctionPtr;
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	8d 83       	std	Y+5, r24	; 0x05
			
		//add and resize array.
		this->testCases[this->testsCount].testCaseFunctionPtr = testCaseFunctionPtr;
     c64:	8f 81       	ldd	r24, Y+7	; 0x07
     c66:	98 85       	ldd	r25, Y+8	; 0x08
     c68:	fc 01       	movw	r30, r24
     c6a:	22 81       	ldd	r18, Z+2	; 0x02
     c6c:	33 81       	ldd	r19, Z+3	; 0x03
     c6e:	4f 81       	ldd	r20, Y+7	; 0x07
     c70:	58 85       	ldd	r21, Y+8	; 0x08
     c72:	c9 01       	movw	r24, r18
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	82 0f       	add	r24, r18
     c7a:	93 1f       	adc	r25, r19
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	84 0f       	add	r24, r20
     c82:	95 1f       	adc	r25, r21
     c84:	08 96       	adiw	r24, 0x08	; 8
     c86:	29 85       	ldd	r18, Y+9	; 0x09
     c88:	3a 85       	ldd	r19, Y+10	; 0x0a
     c8a:	fc 01       	movw	r30, r24
     c8c:	31 83       	std	Z+1, r19	; 0x01
     c8e:	20 83       	st	Z, r18
		this->testCases[this->testsCount].setTestCaseId(testCaseId);
     c90:	8f 81       	ldd	r24, Y+7	; 0x07
     c92:	98 85       	ldd	r25, Y+8	; 0x08
     c94:	fc 01       	movw	r30, r24
     c96:	22 81       	ldd	r18, Z+2	; 0x02
     c98:	33 81       	ldd	r19, Z+3	; 0x03
     c9a:	c9 01       	movw	r24, r18
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	82 0f       	add	r24, r18
     ca2:	93 1f       	adc	r25, r19
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	04 96       	adiw	r24, 0x04	; 4
     caa:	2f 81       	ldd	r18, Y+7	; 0x07
     cac:	38 85       	ldd	r19, Y+8	; 0x08
     cae:	82 0f       	add	r24, r18
     cb0:	93 1f       	adc	r25, r19
     cb2:	2b 85       	ldd	r18, Y+11	; 0x0b
     cb4:	3c 85       	ldd	r19, Y+12	; 0x0c
     cb6:	b9 01       	movw	r22, r18
     cb8:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN19helicopterunittests4util13testframework8TestCase13setTestCaseIdEi>
		
		this->testsCount++;
     cbc:	8f 81       	ldd	r24, Y+7	; 0x07
     cbe:	98 85       	ldd	r25, Y+8	; 0x08
     cc0:	fc 01       	movw	r30, r24
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	9c 01       	movw	r18, r24
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	fc 01       	movw	r30, r24
     cd2:	33 83       	std	Z+3, r19	; 0x03
     cd4:	22 83       	std	Z+2, r18	; 0x02

void TestSuite::addTest(int (*testCaseFunctionPtr) (TestCase *), int testCaseId)
{
	if (this->testsCount < MAXFAILEDTESTCASES)
	{
		TestCase tc(testCaseId);
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 23 03 	call	0x646	; 0x646 <_ZN19helicopterunittests4util13testframework8TestCaseD1Ev>
		this->testCases[this->testsCount].setTestCaseId(testCaseId);
		
		this->testsCount++;
	}

}
     cde:	2c 96       	adiw	r28, 0x0c	; 12
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv>:

void TestSuite::runTests()
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0xa>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9c 83       	std	Y+4, r25	; 0x04
     d02:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < this->testsCount; i++)
     d04:	1a 82       	std	Y+2, r1	; 0x02
     d06:	19 82       	std	Y+1, r1	; 0x01
     d08:	b0 c0       	rjmp	.+352    	; 0xe6a <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0x17a>
	{
		if (this->testCases[i].testCaseFunctionPtr(&this->testCases[i]) != 0)
     d0a:	4b 81       	ldd	r20, Y+3	; 0x03
     d0c:	5c 81       	ldd	r21, Y+4	; 0x04
     d0e:	29 81       	ldd	r18, Y+1	; 0x01
     d10:	3a 81       	ldd	r19, Y+2	; 0x02
     d12:	c9 01       	movw	r24, r18
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	84 0f       	add	r24, r20
     d22:	95 1f       	adc	r25, r21
     d24:	08 96       	adiw	r24, 0x08	; 8
     d26:	fc 01       	movw	r30, r24
     d28:	40 81       	ld	r20, Z
     d2a:	51 81       	ldd	r21, Z+1	; 0x01
     d2c:	29 81       	ldd	r18, Y+1	; 0x01
     d2e:	3a 81       	ldd	r19, Y+2	; 0x02
     d30:	c9 01       	movw	r24, r18
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	82 0f       	add	r24, r18
     d38:	93 1f       	adc	r25, r19
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	04 96       	adiw	r24, 0x04	; 4
     d40:	2b 81       	ldd	r18, Y+3	; 0x03
     d42:	3c 81       	ldd	r19, Y+4	; 0x04
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	fa 01       	movw	r30, r20
     d4a:	19 95       	eicall
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0x64>
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	22 23       	and	r18, r18
     d56:	09 f4       	brne	.+2      	; 0xd5a <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0x6a>
     d58:	83 c0       	rjmp	.+262    	; 0xe60 <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0x170>
		{
			this->failedTestCases[this->failureCount].setFailedEvaluationId(this->testCases[i].getFailedEvaluationId());
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	fc 01       	movw	r30, r24
     d60:	20 81       	ld	r18, Z
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	c9 01       	movw	r24, r18
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	82 0f       	add	r24, r18
     d6c:	93 1f       	adc	r25, r19
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	84 5a       	subi	r24, 0xA4	; 164
     d74:	9d 4f       	sbci	r25, 0xFD	; 253
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	3c 81       	ldd	r19, Y+4	; 0x04
     d7a:	89 01       	movw	r16, r18
     d7c:	08 0f       	add	r16, r24
     d7e:	19 1f       	adc	r17, r25
     d80:	29 81       	ldd	r18, Y+1	; 0x01
     d82:	3a 81       	ldd	r19, Y+2	; 0x02
     d84:	c9 01       	movw	r24, r18
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	82 0f       	add	r24, r18
     d8c:	93 1f       	adc	r25, r19
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	04 96       	adiw	r24, 0x04	; 4
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	3c 81       	ldd	r19, Y+4	; 0x04
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	0e 94 42 03 	call	0x684	; 0x684 <_ZN19helicopterunittests4util13testframework8TestCase21getFailedEvaluationIdEv>
     da0:	9c 01       	movw	r18, r24
     da2:	c8 01       	movw	r24, r16
     da4:	b9 01       	movw	r22, r18
     da6:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN19helicopterunittests4util13testframework8TestCase21setFailedEvaluationIdEi>
			this->failedTestCases[this->failureCount].setTestCaseId(this->testCases[i].getTestCaseId());
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	fc 01       	movw	r30, r24
     db0:	20 81       	ld	r18, Z
     db2:	31 81       	ldd	r19, Z+1	; 0x01
     db4:	c9 01       	movw	r24, r18
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	84 5a       	subi	r24, 0xA4	; 164
     dc4:	9d 4f       	sbci	r25, 0xFD	; 253
     dc6:	2b 81       	ldd	r18, Y+3	; 0x03
     dc8:	3c 81       	ldd	r19, Y+4	; 0x04
     dca:	89 01       	movw	r16, r18
     dcc:	08 0f       	add	r16, r24
     dce:	19 1f       	adc	r17, r25
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	3a 81       	ldd	r19, Y+2	; 0x02
     dd4:	c9 01       	movw	r24, r18
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	82 0f       	add	r24, r18
     ddc:	93 1f       	adc	r25, r19
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	04 96       	adiw	r24, 0x04	; 4
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	3c 81       	ldd	r19, Y+4	; 0x04
     de8:	82 0f       	add	r24, r18
     dea:	93 1f       	adc	r25, r19
     dec:	0e 94 30 03 	call	0x660	; 0x660 <_ZN19helicopterunittests4util13testframework8TestCase13getTestCaseIdEv>
     df0:	9c 01       	movw	r18, r24
     df2:	c8 01       	movw	r24, r16
     df4:	b9 01       	movw	r22, r18
     df6:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN19helicopterunittests4util13testframework8TestCase13setTestCaseIdEi>
			this->failedTestCases[this->failureCount].testCaseFunctionPtr = this->testCases[i].testCaseFunctionPtr;
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	fc 01       	movw	r30, r24
     e00:	20 81       	ld	r18, Z
     e02:	31 81       	ldd	r19, Z+1	; 0x01
     e04:	6b 81       	ldd	r22, Y+3	; 0x03
     e06:	7c 81       	ldd	r23, Y+4	; 0x04
     e08:	49 81       	ldd	r20, Y+1	; 0x01
     e0a:	5a 81       	ldd	r21, Y+2	; 0x02
     e0c:	ca 01       	movw	r24, r20
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	84 0f       	add	r24, r20
     e14:	95 1f       	adc	r25, r21
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	86 0f       	add	r24, r22
     e1c:	97 1f       	adc	r25, r23
     e1e:	08 96       	adiw	r24, 0x08	; 8
     e20:	fc 01       	movw	r30, r24
     e22:	40 81       	ld	r20, Z
     e24:	51 81       	ldd	r21, Z+1	; 0x01
     e26:	6b 81       	ldd	r22, Y+3	; 0x03
     e28:	7c 81       	ldd	r23, Y+4	; 0x04
     e2a:	c9 01       	movw	r24, r18
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	86 0f       	add	r24, r22
     e3a:	97 1f       	adc	r25, r23
     e3c:	80 5a       	subi	r24, 0xA0	; 160
     e3e:	9d 4f       	sbci	r25, 0xFD	; 253
     e40:	fc 01       	movw	r30, r24
     e42:	51 83       	std	Z+1, r21	; 0x01
     e44:	40 83       	st	Z, r20
			this->failureCount++;
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	fc 01       	movw	r30, r24
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	9c 01       	movw	r18, r24
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	fc 01       	movw	r30, r24
     e5c:	31 83       	std	Z+1, r19	; 0x01
     e5e:	20 83       	st	Z, r18

}

void TestSuite::runTests()
{
	for (int i = 0; i < this->testsCount; i++)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	fc 01       	movw	r30, r24
     e70:	22 81       	ldd	r18, Z+2	; 0x02
     e72:	33 81       	ldd	r19, Z+3	; 0x03
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	82 17       	cp	r24, r18
     e7c:	93 07       	cpc	r25, r19
     e7e:	0c f0       	brlt	.+2      	; 0xe82 <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0x192>
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	44 23       	and	r20, r20
     e84:	09 f0       	breq	.+2      	; 0xe88 <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0x198>
     e86:	41 cf       	rjmp	.-382    	; 0xd0a <_ZN19helicopterunittests4util13testframework9TestSuite8runTestsEv+0x1a>
			this->failedTestCases[this->failureCount].setTestCaseId(this->testCases[i].getTestCaseId());
			this->failedTestCases[this->failureCount].testCaseFunctionPtr = this->testCases[i].testCaseFunctionPtr;
			this->failureCount++;
		}
	}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	08 95       	ret
				}
				
				void setRecordData(void *recordData, int sizeOfItem);
				
				
				byte* getRecordData()
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	0f 92       	push	r0
     ea0:	0f 92       	push	r0
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
				{
					//Should this really return record data, or copy of it?
					return recordData;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	fc 01       	movw	r30, r24
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
				}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret
				
				int getSizeOfRecord()
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	0f 92       	push	r0
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
				{
					return sizeOfRecord;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	fc 01       	movw	r30, r24
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
				}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <_ZN10helicopter6buffer6RecordC1Ev>:
#include "Record.h"
#include "string.h"

using namespace helicopter::buffer;

Record::Record()
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	0f 92       	push	r0
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
{
	sizeOfRecord = 0;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	fc 01       	movw	r30, r24
     ef8:	13 82       	std	Z+3, r1	; 0x03
     efa:	12 82       	std	Z+2, r1	; 0x02
	previousRecord = NULL;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	fc 01       	movw	r30, r24
     f02:	15 82       	std	Z+5, r1	; 0x05
     f04:	14 82       	std	Z+4, r1	; 0x04
	nextRecord = NULL;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	fc 01       	movw	r30, r24
     f0c:	17 82       	std	Z+7, r1	; 0x07
     f0e:	16 82       	std	Z+6, r1	; 0x06
	recordData = NULL;
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	fc 01       	movw	r30, r24
     f16:	11 82       	std	Z+1, r1	; 0x01
     f18:	10 82       	st	Z, r1
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <_ZN10helicopter6buffer6RecordD1Ev>:

Record::~Record()
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	0f 92       	push	r0
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
{
	delete recordData;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZdlPv>
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <_ZN10helicopter6buffer6RecordC1EPvi>:

Record::Record(void* recordData, int sizeOfItem)
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	00 d0       	rcall	.+0      	; 0xf52 <_ZN10helicopter6buffer6RecordC1EPvi+0x6>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <_ZN10helicopter6buffer6RecordC1EPvi+0x8>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	7c 83       	std	Y+4, r23	; 0x04
     f5e:	6b 83       	std	Y+3, r22	; 0x03
     f60:	5e 83       	std	Y+6, r21	; 0x06
     f62:	4d 83       	std	Y+5, r20	; 0x05
{
	this->recordData = new byte[sizeOfItem];
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	0e 94 6f 08 	call	0x10de	; 0x10de <_Znaj>
     f6c:	9c 01       	movw	r18, r24
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	fc 01       	movw	r30, r24
     f74:	31 83       	std	Z+1, r19	; 0x01
     f76:	20 83       	st	Z, r18
	
	memcpy(this->recordData, recordData, sizeOfItem);
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	fc 01       	movw	r30, r24
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	2d 81       	ldd	r18, Y+5	; 0x05
     f84:	3e 81       	ldd	r19, Y+6	; 0x06
     f86:	4b 81       	ldd	r20, Y+3	; 0x03
     f88:	5c 81       	ldd	r21, Y+4	; 0x04
     f8a:	ba 01       	movw	r22, r20
     f8c:	a9 01       	movw	r20, r18
     f8e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <memcpy>
	
	sizeOfRecord = sizeOfItem;
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	2d 81       	ldd	r18, Y+5	; 0x05
     f98:	3e 81       	ldd	r19, Y+6	; 0x06
     f9a:	fc 01       	movw	r30, r24
     f9c:	33 83       	std	Z+3, r19	; 0x03
     f9e:	22 83       	std	Z+2, r18	; 0x02
	
	previousRecord = NULL;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	fc 01       	movw	r30, r24
     fa6:	15 82       	std	Z+5, r1	; 0x05
     fa8:	14 82       	std	Z+4, r1	; 0x04
	nextRecord = NULL;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	fc 01       	movw	r30, r24
     fb0:	17 82       	std	Z+7, r1	; 0x07
     fb2:	16 82       	std	Z+6, r1	; 0x06
}
     fb4:	26 96       	adiw	r28, 0x06	; 6
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <_ZN10helicopter6buffer6Record13setRecordDataEPvi>:

void Record::setRecordData(void* recordData, int sizeOfItem)
{
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	00 d0       	rcall	.+0      	; 0xfcc <_ZN10helicopter6buffer6Record13setRecordDataEPvi+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <_ZN10helicopter6buffer6Record13setRecordDataEPvi+0x8>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	7c 83       	std	Y+4, r23	; 0x04
     fd8:	6b 83       	std	Y+3, r22	; 0x03
     fda:	5e 83       	std	Y+6, r21	; 0x06
     fdc:	4d 83       	std	Y+5, r20	; 0x05
	this->recordData = new byte[sizeOfItem];
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	0e 94 6f 08 	call	0x10de	; 0x10de <_Znaj>
     fe6:	9c 01       	movw	r18, r24
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	fc 01       	movw	r30, r24
     fee:	31 83       	std	Z+1, r19	; 0x01
     ff0:	20 83       	st	Z, r18
	
	memcpy(this->recordData, recordData, sizeOfItem);
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	fc 01       	movw	r30, r24
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	2d 81       	ldd	r18, Y+5	; 0x05
     ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    1000:	4b 81       	ldd	r20, Y+3	; 0x03
    1002:	5c 81       	ldd	r21, Y+4	; 0x04
    1004:	ba 01       	movw	r22, r20
    1006:	a9 01       	movw	r20, r18
    1008:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <memcpy>
	
	sizeOfRecord = sizeOfItem;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	2d 81       	ldd	r18, Y+5	; 0x05
    1012:	3e 81       	ldd	r19, Y+6	; 0x06
    1014:	fc 01       	movw	r30, r24
    1016:	33 83       	std	Z+3, r19	; 0x03
    1018:	22 83       	std	Z+2, r18	; 0x02
}
    101a:	26 96       	adiw	r28, 0x06	; 6
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <_ZN10helicopter6buffer6Record4CopyEv>:

Record * Record::Copy()
{
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <_ZN10helicopter6buffer6Record4CopyEv+0x12>
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
	Record *record = new Record(this->getRecordData(), this->getSizeOfRecord());
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN10helicopter6buffer6Record13getRecordDataEv>
    1050:	6c 01       	movw	r12, r24
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN10helicopter6buffer6Record15getSizeOfRecordEv>
    105a:	7c 01       	movw	r14, r24
    105c:	88 e0       	ldi	r24, 0x08	; 8
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 49 08 	call	0x1092	; 0x1092 <_Znwj>
    1064:	8c 01       	movw	r16, r24
    1066:	c8 01       	movw	r24, r16
    1068:	b6 01       	movw	r22, r12
    106a:	a7 01       	movw	r20, r14
    106c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN10helicopter6buffer6RecordC1EPvi>
    1070:	1a 83       	std	Y+2, r17	; 0x02
    1072:	09 83       	std	Y+1, r16	; 0x01
	
	//not copying the next and last pointers. 
	
	return record;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	08 95       	ret

00001092 <_Znwj>:
 *  Author: HP User
 */ 
#include <commonheader.h>

void * operator new(size_t size)
{
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	0f 92       	push	r0
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <malloc>
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <_ZdlPv>:

void operator delete(void * ptr)
{
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	0f 92       	push	r0
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
	if (ptr)
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	21 f0       	breq	.+8      	; 0x10d4 <_ZdlPv+0x20>
	{
		free(ptr);
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <free>
	}
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <_Znaj>:

void * operator new[](size_t size)
{
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	0f 92       	push	r0
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <malloc>
}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <_ZdaPv>:

void operator delete[](void * ptr)
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	0f 92       	push	r0
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
	if(ptr)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	21 f0       	breq	.+8      	; 0x1120 <_ZdaPv+0x20>
	{
		free(ptr);
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <free>
	}
	
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <_ZN10helicopter6buffer6Record17getPreviousRecordEv>:
				Record(void* data, int sizeOfItem);
				~Record();
					
				Record *Copy ();
					
				Record *getPreviousRecord()
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	0f 92       	push	r0
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
				{
					return previousRecord;	
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	fc 01       	movw	r30, r24
    1140:	84 81       	ldd	r24, Z+4	; 0x04
    1142:	95 81       	ldd	r25, Z+5	; 0x05
				}					
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <_ZN10helicopter6buffer6Record17setPreviousRecordEPS1_>:
				
				void setPreviousRecord(Record *record)
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 d0       	rcall	.+0      	; 0x1154 <_ZN10helicopter6buffer6Record17setPreviousRecordEPS1_+0x6>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	7c 83       	std	Y+4, r23	; 0x04
    1160:	6b 83       	std	Y+3, r22	; 0x03
				{
					previousRecord = record;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	fc 01       	movw	r30, r24
    116c:	35 83       	std	Z+5, r19	; 0x05
    116e:	24 83       	std	Z+4, r18	; 0x04
				}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <_ZN10helicopter6buffer6Record13setNextRecordEPS1_>:
				Record *getNextRecord()
				{
					return nextRecord;
				}
				
				void setNextRecord(Record *record)
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	00 d0       	rcall	.+0      	; 0x1184 <_ZN10helicopter6buffer6Record13setNextRecordEPS1_+0x6>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	7c 83       	std	Y+4, r23	; 0x04
    1190:	6b 83       	std	Y+3, r22	; 0x03
				{
					nextRecord = record;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	fc 01       	movw	r30, r24
    119c:	37 83       	std	Z+7, r19	; 0x07
    119e:	26 83       	std	Z+6, r18	; 0x06
				}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <_ZN10helicopter6buffer6BufferC1Ev>:
#include "string.h"
#include "commonheader.h"

using namespace helicopter::buffer;

Buffer::Buffer()
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	0f 92       	push	r0
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
{
	bufferSize = 0;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	fc 01       	movw	r30, r24
    11c4:	11 82       	std	Z+1, r1	; 0x01
    11c6:	10 82       	st	Z, r1
	records = NULL;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	fc 01       	movw	r30, r24
    11ce:	13 82       	std	Z+3, r1	; 0x03
    11d0:	12 82       	std	Z+2, r1	; 0x02
	firstRecord = NULL;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	fc 01       	movw	r30, r24
    11d8:	15 82       	std	Z+5, r1	; 0x05
    11da:	14 82       	std	Z+4, r1	; 0x04
	lastRecord = NULL;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	fc 01       	movw	r30, r24
    11e2:	17 82       	std	Z+7, r1	; 0x07
    11e4:	16 82       	std	Z+6, r1	; 0x06
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <_ZN10helicopter6buffer6BufferD1Ev>:

Buffer::~Buffer()
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	0f 92       	push	r0
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
{
	delete this->records;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	fc 01       	movw	r30, r24
    120a:	02 81       	ldd	r16, Z+2	; 0x02
    120c:	13 81       	ldd	r17, Z+3	; 0x03
    120e:	01 15       	cp	r16, r1
    1210:	11 05       	cpc	r17, r1
    1212:	31 f0       	breq	.+12     	; 0x1220 <_ZN10helicopter6buffer6BufferD1Ev+0x30>
    1214:	c8 01       	movw	r24, r16
    1216:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN10helicopter6buffer6RecordD1Ev>
    121a:	c8 01       	movw	r24, r16
    121c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZdlPv>
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE>:

void Buffer::enqueue(Record *record)
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	00 d0       	rcall	.+0      	; 0x1234 <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE+0x8>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	9c 83       	std	Y+4, r25	; 0x04
    123c:	8b 83       	std	Y+3, r24	; 0x03
    123e:	7e 83       	std	Y+6, r23	; 0x06
    1240:	6d 83       	std	Y+5, r22	; 0x05
	if (record != NULL)
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	09 f4       	brne	.+2      	; 0x124c <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE+0x1e>
    124a:	4b c0       	rjmp	.+150    	; 0x12e2 <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE+0xb4>
	{
		//Copy the record
		//danger not deep copy. 
		Record *newRecord = record->Copy();
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	0e 94 16 08 	call	0x102c	; 0x102c <_ZN10helicopter6buffer6Record4CopyEv>
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
		
		//Add the record to the linked list.
		if (this->records == NULL)
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	fc 01       	movw	r30, r24
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	b1 f4       	brne	.+44     	; 0x1292 <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE+0x64>
		{
			records = newRecord;
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	29 81       	ldd	r18, Y+1	; 0x01
    126c:	3a 81       	ldd	r19, Y+2	; 0x02
    126e:	fc 01       	movw	r30, r24
    1270:	33 83       	std	Z+3, r19	; 0x03
    1272:	22 83       	std	Z+2, r18	; 0x02
			firstRecord = newRecord;
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	29 81       	ldd	r18, Y+1	; 0x01
    127a:	3a 81       	ldd	r19, Y+2	; 0x02
    127c:	fc 01       	movw	r30, r24
    127e:	35 83       	std	Z+5, r19	; 0x05
    1280:	24 83       	std	Z+4, r18	; 0x04
			lastRecord = newRecord;
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	29 81       	ldd	r18, Y+1	; 0x01
    1288:	3a 81       	ldd	r19, Y+2	; 0x02
    128a:	fc 01       	movw	r30, r24
    128c:	37 83       	std	Z+7, r19	; 0x07
    128e:	26 83       	std	Z+6, r18	; 0x06
    1290:	1b c0       	rjmp	.+54     	; 0x12c8 <_ZN10helicopter6buffer6Buffer7enqueueEPNS0_6RecordE+0x9a>
		}else
		{
			lastRecord->setNextRecord(newRecord);
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	fc 01       	movw	r30, r24
    1298:	86 81       	ldd	r24, Z+6	; 0x06
    129a:	97 81       	ldd	r25, Z+7	; 0x07
    129c:	29 81       	ldd	r18, Y+1	; 0x01
    129e:	3a 81       	ldd	r19, Y+2	; 0x02
    12a0:	b9 01       	movw	r22, r18
    12a2:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN10helicopter6buffer6Record13setNextRecordEPS1_>
			newRecord->setPreviousRecord(lastRecord);
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	fc 01       	movw	r30, r24
    12ac:	26 81       	ldd	r18, Z+6	; 0x06
    12ae:	37 81       	ldd	r19, Z+7	; 0x07
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	b9 01       	movw	r22, r18
    12b6:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN10helicopter6buffer6Record17setPreviousRecordEPS1_>
			lastRecord = newRecord;
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	29 81       	ldd	r18, Y+1	; 0x01
    12c0:	3a 81       	ldd	r19, Y+2	; 0x02
    12c2:	fc 01       	movw	r30, r24
    12c4:	37 83       	std	Z+7, r19	; 0x07
    12c6:	26 83       	std	Z+6, r18	; 0x06
		}
		
		bufferSize++;
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	fc 01       	movw	r30, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	9c 01       	movw	r18, r24
    12d4:	2f 5f       	subi	r18, 0xFF	; 255
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	fc 01       	movw	r30, r24
    12de:	31 83       	std	Z+1, r19	; 0x01
    12e0:	20 83       	st	Z, r18
	}
}
    12e2:	26 96       	adiw	r28, 0x06	; 6
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret

000012f4 <_ZN10helicopter6buffer6Buffer7dequeueEv>:

//Client has to free the memory.


Record* Buffer::dequeue()
{
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <_ZN10helicopter6buffer6Buffer7dequeueEv+0x6>
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
	Record *returnRecord = NULL;
    1304:	1a 82       	std	Y+2, r1	; 0x02
    1306:	19 82       	std	Y+1, r1	; 0x01
	
	if (bufferSize != 0)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	f1 f0       	breq	.+60     	; 0x1352 <_ZN10helicopter6buffer6Buffer7dequeueEv+0x5e>
	{
		returnRecord = lastRecord;
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	fc 01       	movw	r30, r24
    131c:	86 81       	ldd	r24, Z+6	; 0x06
    131e:	97 81       	ldd	r25, Z+7	; 0x07
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01
		lastRecord = returnRecord->getPreviousRecord();
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN10helicopter6buffer6Record17getPreviousRecordEv>
    132c:	9c 01       	movw	r18, r24
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	fc 01       	movw	r30, r24
    1334:	37 83       	std	Z+7, r19	; 0x07
    1336:	26 83       	std	Z+6, r18	; 0x06
		bufferSize--;
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	fc 01       	movw	r30, r24
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	9c 01       	movw	r18, r24
    1344:	21 50       	subi	r18, 0x01	; 1
    1346:	30 40       	sbci	r19, 0x00	; 0
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	fc 01       	movw	r30, r24
    134e:	31 83       	std	Z+1, r19	; 0x01
    1350:	20 83       	st	Z, r18
	}
	
	return returnRecord;
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				int delay;
				int period;
				bool isReadyToRun;
				
			protected:
				virtual void runTaskImpl(){;}
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	0f 92       	push	r0
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <_ZN10helicopter5tasks4Task4initEv>:
				
			public:
				Task (int delay, int period);
				virtual void init(){;}
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	0f 92       	push	r0
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	00 d0       	rcall	.+0      	; 0x139e <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	7c 83       	std	Y+4, r23	; 0x04
    13aa:	6b 83       	std	Y+3, r22	; 0x03
    13ac:	5e 83       	std	Y+6, r21	; 0x06
    13ae:	4d 83       	std	Y+5, r20	; 0x05
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	27 e3       	ldi	r18, 0x37	; 55
    13b6:	32 e0       	ldi	r19, 0x02	; 2
    13b8:	fc 01       	movw	r30, r24
    13ba:	31 83       	std	Z+1, r19	; 0x01
    13bc:	20 83       	st	Z, r18
{
	this->delay = delay;
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	fc 01       	movw	r30, r24
    13c8:	33 83       	std	Z+3, r19	; 0x03
    13ca:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	2d 81       	ldd	r18, Y+5	; 0x05
    13d2:	3e 81       	ldd	r19, Y+6	; 0x06
    13d4:	fc 01       	movw	r30, r24
    13d6:	35 83       	std	Z+5, r19	; 0x05
    13d8:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	fc 01       	movw	r30, r24
    13e0:	16 82       	std	Z+6, r1	; 0x06
}
    13e2:	26 96       	adiw	r28, 0x06	; 6
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	0f 92       	push	r0
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    1404:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	fc 01       	movw	r30, r24
    1412:	20 81       	ld	r18, Z
    1414:	31 81       	ldd	r19, Z+1	; 0x01
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	f9 01       	movw	r30, r18
    141c:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    141e:	78 94       	sei
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <_ZN10helicopter5tasks4Task8getDelayEv>:
				virtual void runTask();
				
					
				int getDelay()
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	0f 92       	push	r0
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	fc 01       	movw	r30, r24
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
				}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	0f 92       	push	r0
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	fc 01       	movw	r30, r24
    1464:	84 81       	ldd	r24, Z+4	; 0x04
    1466:	95 81       	ldd	r25, Z+5	; 0x05
				}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	7c 83       	std	Y+4, r23	; 0x04
    1484:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	fc 01       	movw	r30, r24
    1490:	33 83       	std	Z+3, r19	; 0x03
    1492:	22 83       	std	Z+2, r18	; 0x02
				}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	0f 92       	push	r0
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	fc 01       	movw	r30, r24
    14b8:	86 81       	ldd	r24, Z+6	; 0x06
				}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	fc 01       	movw	r30, r24
    14dc:	26 83       	std	Z+6, r18	; 0x06
				}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				void reduceDelay()
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	0f 92       	push	r0
    14f0:	0f 92       	push	r0
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	fc 01       	movw	r30, r24
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	93 81       	ldd	r25, Z+3	; 0x03
    1504:	9c 01       	movw	r18, r24
    1506:	21 50       	subi	r18, 0x01	; 1
    1508:	30 40       	sbci	r19, 0x00	; 0
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	fc 01       	movw	r30, r24
    1510:	33 83       	std	Z+3, r19	; 0x03
    1512:	22 83       	std	Z+2, r18	; 0x02
				}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			
				void dispatch();
			
			    /*
				* Starts the timer for task execution.
				*/
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	0f 92       	push	r0
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
				void start();
				
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	fc 01       	movw	r30, r24
    1534:	84 89       	ldd	r24, Z+20	; 0x14
    1536:	95 89       	ldd	r25, Z+21	; 0x15
				int getNumOfTasks()
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				{
					return numOfTasks;
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	0f 92       	push	r0
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
				}
				
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
				Task **getTasks()
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
		numOfTasks++;
		
		return 0;
	}

	return -1;
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
}
    156c:	80 91 44 02 	lds	r24, 0x0244
    1570:	90 91 45 02 	lds	r25, 0x0245
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	81 f4       	brne	.+32     	; 0x1598 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x38>

void Scheduler::init()
    1578:	8a e1       	ldi	r24, 0x1A	; 26
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 49 08 	call	0x1092	; 0x1092 <_Znwj>
    1580:	8c 01       	movw	r16, r24
    1582:	c8 01       	movw	r24, r16
    1584:	6c e7       	ldi	r22, 0x7C	; 124
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	48 e0       	ldi	r20, 0x08	; 8
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN10helicopter9scheduler9SchedulerC1Eii>
    1590:	10 93 45 02 	sts	0x0245, r17
    1594:	00 93 44 02 	sts	0x0244, r16
{
	for (int i = 0; i < numOfTasks; i++)
	{
    1598:	80 91 44 02 	lds	r24, 0x0244
    159c:	90 91 45 02 	lds	r25, 0x0245
		tasks[i]->init();
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <_ZN10helicopter9scheduler9SchedulerC1Eii>:
	}
	
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <_ZN10helicopter9scheduler9SchedulerC1Eii+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <_ZN10helicopter9scheduler9SchedulerC1Eii+0x8>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	7c 83       	std	Y+4, r23	; 0x04
    15bc:	6b 83       	std	Y+3, r22	; 0x03
    15be:	5e 83       	std	Y+6, r21	; 0x06
    15c0:	4d 83       	std	Y+5, r20	; 0x05
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
		
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	fc 01       	movw	r30, r24
    15cc:	37 8b       	std	Z+23, r19	; 0x17
    15ce:	26 8b       	std	Z+22, r18	; 0x16
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
		
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	2d 81       	ldd	r18, Y+5	; 0x05
    15d6:	3e 81       	ldd	r19, Y+6	; 0x06
    15d8:	fc 01       	movw	r30, r24
    15da:	31 8f       	std	Z+25, r19	; 0x19
    15dc:	20 8f       	std	Z+24, r18	; 0x18
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
		
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	fc 01       	movw	r30, r24
    15e4:	15 8a       	std	Z+21, r1	; 0x15
    15e6:	14 8a       	std	Z+20, r1	; 0x14
	sei(); //Enable global interrupts
    15e8:	26 96       	adiw	r28, 0x06	; 6
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	08 95       	ret

000015fa <_ZN10helicopter9scheduler9SchedulerD1Ev>:
}

    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	0f 92       	push	r0
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
void Scheduler::dispatch()
{
	Task *task = NULL;
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
		
	for (int i = 0; i < numOfTasks; i++)
	{
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	00 d0       	rcall	.+0      	; 0x161a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	7c 83       	std	Y+4, r23	; 0x04
    1626:	6b 83       	std	Y+3, r22	; 0x03
		task = scheduler->getTasks()[i];
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	fc 01       	movw	r30, r24
    162e:	84 89       	ldd	r24, Z+20	; 0x14
    1630:	95 89       	ldd	r25, Z+21	; 0x15
    1632:	8a 30       	cpi	r24, 0x0A	; 10
    1634:	91 05       	cpc	r25, r1
    1636:	04 f5       	brge	.+64     	; 0x1678 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
		
		if (task->getIsReadyToRun())
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	fc 01       	movw	r30, r24
    163e:	84 89       	ldd	r24, Z+20	; 0x14
    1640:	95 89       	ldd	r25, Z+21	; 0x15
    1642:	29 81       	ldd	r18, Y+1	; 0x01
    1644:	3a 81       	ldd	r19, Y+2	; 0x02
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	82 0f       	add	r24, r18
    164c:	93 1f       	adc	r25, r19
    164e:	2b 81       	ldd	r18, Y+3	; 0x03
    1650:	3c 81       	ldd	r19, Y+4	; 0x04
    1652:	fc 01       	movw	r30, r24
    1654:	31 83       	std	Z+1, r19	; 0x01
    1656:	20 83       	st	Z, r18
		{
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	fc 01       	movw	r30, r24
    165e:	84 89       	ldd	r24, Z+20	; 0x14
    1660:	95 89       	ldd	r25, Z+21	; 0x15
    1662:	9c 01       	movw	r18, r24
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	fc 01       	movw	r30, r24
    166e:	35 8b       	std	Z+21, r19	; 0x15
    1670:	24 8b       	std	Z+20, r18	; 0x14
			task->setIsReadyToRun(false);
			task->runTask();
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
		}
	}
	
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	9f ef       	ldi	r25, 0xFF	; 255
	//TODO: put the processor to sleep.	
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	08 95       	ret

0000168a <_ZN10helicopter9scheduler9Scheduler4initEv>:
	set_sleep_mode(SLEEP_MODE_IDLE);
	sleep_mode();
}
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	00 d0       	rcall	.+0      	; 0x1690 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    1690:	0f 92       	push	r0
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03

    169a:	1a 82       	std	Y+2, r1	; 0x02
    169c:	19 82       	std	Y+1, r1	; 0x01
    169e:	24 c0       	rjmp	.+72     	; 0x16e8 <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
void Scheduler::start()
{
    16a0:	2b 81       	ldd	r18, Y+3	; 0x03
    16a2:	3c 81       	ldd	r19, Y+4	; 0x04
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	9a 81       	ldd	r25, Y+2	; 0x02
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	82 0f       	add	r24, r18
    16ae:	93 1f       	adc	r25, r19
    16b0:	fc 01       	movw	r30, r24
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	fc 01       	movw	r30, r24
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	02 96       	adiw	r24, 0x02	; 2
    16be:	fc 01       	movw	r30, r24
    16c0:	20 81       	ld	r18, Z
    16c2:	31 81       	ldd	r19, Z+1	; 0x01
    16c4:	4b 81       	ldd	r20, Y+3	; 0x03
    16c6:	5c 81       	ldd	r21, Y+4	; 0x04
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	84 0f       	add	r24, r20
    16d2:	95 1f       	adc	r25, r21
    16d4:	fc 01       	movw	r30, r24
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	f9 01       	movw	r30, r18
    16dc:	19 95       	eicall
	
	//TODO: put the processor to sleep.	
	set_sleep_mode(SLEEP_MODE_IDLE);
	sleep_mode();
}

    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	fc 01       	movw	r30, r24
    16ee:	24 89       	ldd	r18, Z+20	; 0x14
    16f0:	35 89       	ldd	r19, Z+21	; 0x15
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	82 17       	cp	r24, r18
    16fa:	93 07       	cpc	r25, r19
    16fc:	0c f0       	brlt	.+2      	; 0x1700 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	44 23       	and	r20, r20
    1702:	71 f6       	brne	.-100    	; 0x16a0 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
void Scheduler::start()
{
	switch(this->prescaler)
	{
		case 1:
			TCCR1B |= NoPrescaling;
    1704:	88 e8       	ldi	r24, 0x88	; 136
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	2b 81       	ldd	r18, Y+3	; 0x03
    170a:	3c 81       	ldd	r19, Y+4	; 0x04
    170c:	f9 01       	movw	r30, r18
    170e:	26 89       	ldd	r18, Z+22	; 0x16
    1710:	37 89       	ldd	r19, Z+23	; 0x17
    1712:	fc 01       	movw	r30, r24
    1714:	31 83       	std	Z+1, r19	; 0x01
    1716:	20 83       	st	Z, r18
			break;
		case 8:
    1718:	81 e8       	ldi	r24, 0x81	; 129
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	21 e8       	ldi	r18, 0x81	; 129
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	f9 01       	movw	r30, r18
    1722:	20 81       	ld	r18, Z
    1724:	28 60       	ori	r18, 0x08	; 8
    1726:	fc 01       	movw	r30, r24
    1728:	20 83       	st	Z, r18
			TCCR1B |= PrescaleByEight;
			break;
    172a:	8f e6       	ldi	r24, 0x6F	; 111
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	2f e6       	ldi	r18, 0x6F	; 111
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	f9 01       	movw	r30, r18
    1734:	20 81       	ld	r18, Z
    1736:	22 60       	ori	r18, 0x02	; 2
    1738:	fc 01       	movw	r30, r24
    173a:	20 83       	st	Z, r18
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    173c:	78 94       	sei
			break;
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
			break;
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	00 d0       	rcall	.+0      	; 0x1752 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
		case 1024:
    175c:	1c 82       	std	Y+4, r1	; 0x04
    175e:	1b 82       	std	Y+3, r1	; 0x03
			TCCR1B |= PrescaleByTentwentyfour;
			break;
    1760:	1a 82       	std	Y+2, r1	; 0x02
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	2f c0       	rjmp	.+94     	; 0x17c4 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x78>
		default:
			TCCR1B |= NoPrescaling;	
    1766:	80 91 44 02 	lds	r24, 0x0244
    176a:	90 91 45 02 	lds	r25, 0x0245
    176e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1772:	9c 01       	movw	r18, r24
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	fc 01       	movw	r30, r24
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
	}
}
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    1792:	88 23       	and	r24, r24
    1794:	91 f0       	breq	.+36     	; 0x17ba <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>

ISR(TIMER1_COMPA_vect)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
{
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	fc 01       	movw	r30, r24
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	04 96       	adiw	r24, 0x04	; 4
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 81       	ld	r18, Z
    17b0:	31 81       	ldd	r19, Z+1	; 0x01
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	f9 01       	movw	r30, r18
    17b8:	19 95       	eicall
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
			break;
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
			break;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	fc 01       	movw	r30, r24
    17ca:	24 89       	ldd	r18, Z+20	; 0x14
    17cc:	35 89       	ldd	r19, Z+21	; 0x15
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	82 17       	cp	r24, r18
    17d6:	93 07       	cpc	r25, r19
    17d8:	0c f0       	brlt	.+2      	; 0x17dc <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x90>
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	44 23       	and	r20, r20
    17de:	19 f6       	brne	.-122    	; 0x1766 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
{
	Scheduler *scheduler = Scheduler::getScheduler();
	
	Task *task = NULL;
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    17e0:	83 e5       	ldi	r24, 0x53	; 83
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	23 e5       	ldi	r18, 0x53	; 83
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	f9 01       	movw	r30, r18
    17ea:	20 81       	ld	r18, Z
    17ec:	21 7f       	andi	r18, 0xF1	; 241
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
	{
    17f2:	83 e5       	ldi	r24, 0x53	; 83
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	23 e5       	ldi	r18, 0x53	; 83
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	f9 01       	movw	r30, r18
    17fc:	20 81       	ld	r18, Z
    17fe:	21 60       	ori	r18, 0x01	; 1
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
    1804:	88 95       	sleep
    1806:	83 e5       	ldi	r24, 0x53	; 83
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	23 e5       	ldi	r18, 0x53	; 83
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	f9 01       	movw	r30, r18
    1810:	20 81       	ld	r18, Z
    1812:	2e 7f       	andi	r18, 0xFE	; 254
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
		task = scheduler->getTasks()[i];
    1818:	26 96       	adiw	r28, 0x06	; 6
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <_ZN10helicopter9scheduler9Scheduler5startEv>:
		
		if (task->getDelay() == 0)
		{
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	0f 92       	push	r0
    1830:	0f 92       	push	r0
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
			task->setIsReadyToRun(true);
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	fc 01       	movw	r30, r24
    1840:	80 8d       	ldd	r24, Z+24	; 0x18
    1842:	91 8d       	ldd	r25, Z+25	; 0x19
    1844:	80 34       	cpi	r24, 0x40	; 64
    1846:	91 05       	cpc	r25, r1
    1848:	39 f1       	breq	.+78     	; 0x1898 <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    184a:	81 34       	cpi	r24, 0x41	; 65
    184c:	91 05       	cpc	r25, r1
    184e:	3c f4       	brge	.+14     	; 0x185e <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	91 05       	cpc	r25, r1
    1854:	69 f0       	breq	.+26     	; 0x1870 <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    1856:	88 30       	cpi	r24, 0x08	; 8
    1858:	91 05       	cpc	r25, r1
    185a:	a1 f0       	breq	.+40     	; 0x1884 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    185c:	3b c0       	rjmp	.+118    	; 0x18d4 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    185e:	f1 e0       	ldi	r31, 0x01	; 1
    1860:	80 30       	cpi	r24, 0x00	; 0
    1862:	9f 07       	cpc	r25, r31
    1864:	19 f1       	breq	.+70     	; 0x18ac <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    1866:	24 e0       	ldi	r18, 0x04	; 4
    1868:	80 30       	cpi	r24, 0x00	; 0
    186a:	92 07       	cpc	r25, r18
    186c:	49 f1       	breq	.+82     	; 0x18c0 <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    186e:	32 c0       	rjmp	.+100    	; 0x18d4 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
			task->setDelay(task->getPeriod());
		}else
		{
    1870:	81 e8       	ldi	r24, 0x81	; 129
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	21 e8       	ldi	r18, 0x81	; 129
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	f9 01       	movw	r30, r18
    187a:	20 81       	ld	r18, Z
    187c:	21 60       	ori	r18, 0x01	; 1
    187e:	fc 01       	movw	r30, r24
    1880:	20 83       	st	Z, r18
			task->reduceDelay();
    1882:	31 c0       	rjmp	.+98     	; 0x18e6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		}
	}
    1884:	81 e8       	ldi	r24, 0x81	; 129
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	21 e8       	ldi	r18, 0x81	; 129
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	f9 01       	movw	r30, r18
    188e:	20 81       	ld	r18, Z
    1890:	22 60       	ori	r18, 0x02	; 2
    1892:	fc 01       	movw	r30, r24
    1894:	20 83       	st	Z, r18
}
    1896:	27 c0       	rjmp	.+78     	; 0x18e6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
    1898:	81 e8       	ldi	r24, 0x81	; 129
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	21 e8       	ldi	r18, 0x81	; 129
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	f9 01       	movw	r30, r18
    18a2:	20 81       	ld	r18, Z
    18a4:	23 60       	ori	r18, 0x03	; 3
    18a6:	fc 01       	movw	r30, r24
    18a8:	20 83       	st	Z, r18
    18aa:	1d c0       	rjmp	.+58     	; 0x18e6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
    18ac:	81 e8       	ldi	r24, 0x81	; 129
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	21 e8       	ldi	r18, 0x81	; 129
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	f9 01       	movw	r30, r18
    18b6:	20 81       	ld	r18, Z
    18b8:	24 60       	ori	r18, 0x04	; 4
    18ba:	fc 01       	movw	r30, r24
    18bc:	20 83       	st	Z, r18
    18be:	13 c0       	rjmp	.+38     	; 0x18e6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
    18c0:	81 e8       	ldi	r24, 0x81	; 129
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	21 e8       	ldi	r18, 0x81	; 129
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	f9 01       	movw	r30, r18
    18ca:	20 81       	ld	r18, Z
    18cc:	25 60       	ori	r18, 0x05	; 5
    18ce:	fc 01       	movw	r30, r24
    18d0:	20 83       	st	Z, r18
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
    18d4:	81 e8       	ldi	r24, 0x81	; 129
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	21 e8       	ldi	r18, 0x81	; 129
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	f9 01       	movw	r30, r18
    18de:	20 81       	ld	r18, Z
    18e0:	21 60       	ori	r18, 0x01	; 1
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <__vector_17>:
    18f0:	1f 92       	push	r1
    18f2:	0f 92       	push	r0
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	0f 92       	push	r0
    18f8:	00 90 5b 00 	lds	r0, 0x005B
    18fc:	0f 92       	push	r0
    18fe:	11 24       	eor	r1, r1
    1900:	2f 93       	push	r18
    1902:	3f 93       	push	r19
    1904:	4f 93       	push	r20
    1906:	5f 93       	push	r21
    1908:	6f 93       	push	r22
    190a:	7f 93       	push	r23
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	00 d0       	rcall	.+0      	; 0x191e <__vector_17+0x2e>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <__vector_17+0x30>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	1e 82       	std	Y+6, r1	; 0x06
    192e:	1d 82       	std	Y+5, r1	; 0x05
    1930:	1a 82       	std	Y+2, r1	; 0x02
    1932:	19 82       	std	Y+1, r1	; 0x01
    1934:	33 c0       	rjmp	.+102    	; 0x199c <__vector_17+0xac>
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    193e:	9c 01       	movw	r18, r24
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	82 0f       	add	r24, r18
    194a:	93 1f       	adc	r25, r19
    194c:	fc 01       	movw	r30, r24
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	0e 94 15 0a 	call	0x142a	; 0x142a <_ZN10helicopter5tasks4Task8getDelayEv>
    195e:	21 e0       	ldi	r18, 0x01	; 1
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	09 f0       	breq	.+2      	; 0x1966 <__vector_17+0x76>
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	22 23       	and	r18, r18
    1968:	81 f0       	breq	.+32     	; 0x198a <__vector_17+0x9a>
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN10helicopter5tasks4Task9getPeriodEv>
    197c:	9c 01       	movw	r18, r24
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	b9 01       	movw	r22, r18
    1984:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN10helicopter5tasks4Task8setDelayEi>
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <__vector_17+0xa2>
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN10helicopter5tasks4Task11reduceDelayEv>
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    19a4:	9c 01       	movw	r18, r24
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	82 17       	cp	r24, r18
    19ae:	93 07       	cpc	r25, r19
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <__vector_17+0xc4>
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	44 23       	and	r20, r20
    19b6:	09 f0       	breq	.+2      	; 0x19ba <__vector_17+0xca>
    19b8:	be cf       	rjmp	.-132    	; 0x1936 <__vector_17+0x46>
    19ba:	26 96       	adiw	r28, 0x06	; 6
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	ff 91       	pop	r31
    19c6:	ef 91       	pop	r30
    19c8:	bf 91       	pop	r27
    19ca:	af 91       	pop	r26
    19cc:	9f 91       	pop	r25
    19ce:	8f 91       	pop	r24
    19d0:	7f 91       	pop	r23
    19d2:	6f 91       	pop	r22
    19d4:	5f 91       	pop	r21
    19d6:	4f 91       	pop	r20
    19d8:	3f 91       	pop	r19
    19da:	2f 91       	pop	r18
    19dc:	0f 90       	pop	r0
    19de:	00 92 5b 00 	sts	0x005B, r0
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__cmpsf2>:
    19ec:	03 d0       	rcall	.+6      	; 0x19f4 <__fp_cmp>
    19ee:	08 f4       	brcc	.+2      	; 0x19f2 <__cmpsf2+0x6>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	08 95       	ret

000019f4 <__fp_cmp>:
    19f4:	99 0f       	add	r25, r25
    19f6:	00 08       	sbc	r0, r0
    19f8:	55 0f       	add	r21, r21
    19fa:	aa 0b       	sbc	r26, r26
    19fc:	e0 e8       	ldi	r30, 0x80	; 128
    19fe:	fe ef       	ldi	r31, 0xFE	; 254
    1a00:	16 16       	cp	r1, r22
    1a02:	17 06       	cpc	r1, r23
    1a04:	e8 07       	cpc	r30, r24
    1a06:	f9 07       	cpc	r31, r25
    1a08:	c0 f0       	brcs	.+48     	; 0x1a3a <__fp_cmp+0x46>
    1a0a:	12 16       	cp	r1, r18
    1a0c:	13 06       	cpc	r1, r19
    1a0e:	e4 07       	cpc	r30, r20
    1a10:	f5 07       	cpc	r31, r21
    1a12:	98 f0       	brcs	.+38     	; 0x1a3a <__fp_cmp+0x46>
    1a14:	62 1b       	sub	r22, r18
    1a16:	73 0b       	sbc	r23, r19
    1a18:	84 0b       	sbc	r24, r20
    1a1a:	95 0b       	sbc	r25, r21
    1a1c:	39 f4       	brne	.+14     	; 0x1a2c <__fp_cmp+0x38>
    1a1e:	0a 26       	eor	r0, r26
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <__fp_cmp+0x46>
    1a22:	23 2b       	or	r18, r19
    1a24:	24 2b       	or	r18, r20
    1a26:	25 2b       	or	r18, r21
    1a28:	21 f4       	brne	.+8      	; 0x1a32 <__fp_cmp+0x3e>
    1a2a:	08 95       	ret
    1a2c:	0a 26       	eor	r0, r26
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <__fp_cmp+0x3e>
    1a30:	a1 40       	sbci	r26, 0x01	; 1
    1a32:	a6 95       	lsr	r26
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	81 1d       	adc	r24, r1
    1a38:	81 1d       	adc	r24, r1
    1a3a:	08 95       	ret

00001a3c <malloc>:
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ac 01       	movw	r20, r24
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	91 05       	cpc	r25, r1
    1a46:	10 f4       	brcc	.+4      	; 0x1a4c <malloc+0x10>
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	e0 91 48 02 	lds	r30, 0x0248
    1a50:	f0 91 49 02 	lds	r31, 0x0249
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	a0 e0       	ldi	r26, 0x00	; 0
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	24 c0       	rjmp	.+72     	; 0x1aa6 <malloc+0x6a>
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	84 17       	cp	r24, r20
    1a64:	95 07       	cpc	r25, r21
    1a66:	d0 f0       	brcs	.+52     	; 0x1a9c <malloc+0x60>
    1a68:	84 17       	cp	r24, r20
    1a6a:	95 07       	cpc	r25, r21
    1a6c:	71 f4       	brne	.+28     	; 0x1a8a <malloc+0x4e>
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	10 97       	sbiw	r26, 0x00	; 0
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <malloc+0x44>
    1a76:	13 96       	adiw	r26, 0x03	; 3
    1a78:	9c 93       	st	X, r25
    1a7a:	8e 93       	st	-X, r24
    1a7c:	12 97       	sbiw	r26, 0x02	; 2
    1a7e:	2c c0       	rjmp	.+88     	; 0x1ad8 <malloc+0x9c>
    1a80:	90 93 49 02 	sts	0x0249, r25
    1a84:	80 93 48 02 	sts	0x0248, r24
    1a88:	27 c0       	rjmp	.+78     	; 0x1ad8 <malloc+0x9c>
    1a8a:	21 15       	cp	r18, r1
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	19 f0       	breq	.+6      	; 0x1a96 <malloc+0x5a>
    1a90:	82 17       	cp	r24, r18
    1a92:	93 07       	cpc	r25, r19
    1a94:	18 f4       	brcc	.+6      	; 0x1a9c <malloc+0x60>
    1a96:	9c 01       	movw	r18, r24
    1a98:	bd 01       	movw	r22, r26
    1a9a:	ef 01       	movw	r28, r30
    1a9c:	92 81       	ldd	r25, Z+2	; 0x02
    1a9e:	83 81       	ldd	r24, Z+3	; 0x03
    1aa0:	df 01       	movw	r26, r30
    1aa2:	e9 2f       	mov	r30, r25
    1aa4:	f8 2f       	mov	r31, r24
    1aa6:	30 97       	sbiw	r30, 0x00	; 0
    1aa8:	d1 f6       	brne	.-76     	; 0x1a5e <malloc+0x22>
    1aaa:	21 15       	cp	r18, r1
    1aac:	31 05       	cpc	r19, r1
    1aae:	f9 f0       	breq	.+62     	; 0x1aee <malloc+0xb2>
    1ab0:	c9 01       	movw	r24, r18
    1ab2:	84 1b       	sub	r24, r20
    1ab4:	95 0b       	sbc	r25, r21
    1ab6:	84 30       	cpi	r24, 0x04	; 4
    1ab8:	91 05       	cpc	r25, r1
    1aba:	80 f4       	brcc	.+32     	; 0x1adc <malloc+0xa0>
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	61 15       	cp	r22, r1
    1ac2:	71 05       	cpc	r23, r1
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <malloc+0x92>
    1ac6:	fb 01       	movw	r30, r22
    1ac8:	93 83       	std	Z+3, r25	; 0x03
    1aca:	82 83       	std	Z+2, r24	; 0x02
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <malloc+0x9a>
    1ace:	90 93 49 02 	sts	0x0249, r25
    1ad2:	80 93 48 02 	sts	0x0248, r24
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	32 96       	adiw	r30, 0x02	; 2
    1ada:	42 c0       	rjmp	.+132    	; 0x1b60 <malloc+0x124>
    1adc:	fe 01       	movw	r30, r28
    1ade:	e8 0f       	add	r30, r24
    1ae0:	f9 1f       	adc	r31, r25
    1ae2:	41 93       	st	Z+, r20
    1ae4:	51 93       	st	Z+, r21
    1ae6:	02 97       	sbiw	r24, 0x02	; 2
    1ae8:	99 83       	std	Y+1, r25	; 0x01
    1aea:	88 83       	st	Y, r24
    1aec:	39 c0       	rjmp	.+114    	; 0x1b60 <malloc+0x124>
    1aee:	80 91 46 02 	lds	r24, 0x0246
    1af2:	90 91 47 02 	lds	r25, 0x0247
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	41 f4       	brne	.+16     	; 0x1b0a <malloc+0xce>
    1afa:	80 91 3f 02 	lds	r24, 0x023F
    1afe:	90 91 40 02 	lds	r25, 0x0240
    1b02:	90 93 47 02 	sts	0x0247, r25
    1b06:	80 93 46 02 	sts	0x0246, r24
    1b0a:	20 91 3d 02 	lds	r18, 0x023D
    1b0e:	30 91 3e 02 	lds	r19, 0x023E
    1b12:	21 15       	cp	r18, r1
    1b14:	31 05       	cpc	r19, r1
    1b16:	41 f4       	brne	.+16     	; 0x1b28 <malloc+0xec>
    1b18:	2d b7       	in	r18, 0x3d	; 61
    1b1a:	3e b7       	in	r19, 0x3e	; 62
    1b1c:	80 91 41 02 	lds	r24, 0x0241
    1b20:	90 91 42 02 	lds	r25, 0x0242
    1b24:	28 1b       	sub	r18, r24
    1b26:	39 0b       	sbc	r19, r25
    1b28:	e0 91 46 02 	lds	r30, 0x0246
    1b2c:	f0 91 47 02 	lds	r31, 0x0247
    1b30:	e2 17       	cp	r30, r18
    1b32:	f3 07       	cpc	r31, r19
    1b34:	98 f4       	brcc	.+38     	; 0x1b5c <malloc+0x120>
    1b36:	2e 1b       	sub	r18, r30
    1b38:	3f 0b       	sbc	r19, r31
    1b3a:	24 17       	cp	r18, r20
    1b3c:	35 07       	cpc	r19, r21
    1b3e:	70 f0       	brcs	.+28     	; 0x1b5c <malloc+0x120>
    1b40:	ca 01       	movw	r24, r20
    1b42:	02 96       	adiw	r24, 0x02	; 2
    1b44:	28 17       	cp	r18, r24
    1b46:	39 07       	cpc	r19, r25
    1b48:	48 f0       	brcs	.+18     	; 0x1b5c <malloc+0x120>
    1b4a:	8e 0f       	add	r24, r30
    1b4c:	9f 1f       	adc	r25, r31
    1b4e:	90 93 47 02 	sts	0x0247, r25
    1b52:	80 93 46 02 	sts	0x0246, r24
    1b56:	41 93       	st	Z+, r20
    1b58:	51 93       	st	Z+, r21
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <malloc+0x124>
    1b5c:	e0 e0       	ldi	r30, 0x00	; 0
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	cf 01       	movw	r24, r30
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <free>:
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	9c 01       	movw	r18, r24
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <free+0x10>
    1b76:	8c c0       	rjmp	.+280    	; 0x1c90 <free+0x128>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	12 97       	sbiw	r26, 0x02	; 2
    1b7c:	13 96       	adiw	r26, 0x03	; 3
    1b7e:	1c 92       	st	X, r1
    1b80:	1e 92       	st	-X, r1
    1b82:	12 97       	sbiw	r26, 0x02	; 2
    1b84:	60 91 48 02 	lds	r22, 0x0248
    1b88:	70 91 49 02 	lds	r23, 0x0249
    1b8c:	61 15       	cp	r22, r1
    1b8e:	71 05       	cpc	r23, r1
    1b90:	89 f4       	brne	.+34     	; 0x1bb4 <free+0x4c>
    1b92:	8d 91       	ld	r24, X+
    1b94:	9c 91       	ld	r25, X
    1b96:	11 97       	sbiw	r26, 0x01	; 1
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	20 91 46 02 	lds	r18, 0x0246
    1ba0:	30 91 47 02 	lds	r19, 0x0247
    1ba4:	28 17       	cp	r18, r24
    1ba6:	39 07       	cpc	r19, r25
    1ba8:	69 f5       	brne	.+90     	; 0x1c04 <free+0x9c>
    1baa:	b0 93 47 02 	sts	0x0247, r27
    1bae:	a0 93 46 02 	sts	0x0246, r26
    1bb2:	6e c0       	rjmp	.+220    	; 0x1c90 <free+0x128>
    1bb4:	fb 01       	movw	r30, r22
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	01 c0       	rjmp	.+2      	; 0x1bbe <free+0x56>
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ea 17       	cp	r30, r26
    1bc0:	fb 07       	cpc	r31, r27
    1bc2:	30 f4       	brcc	.+12     	; 0x1bd0 <free+0x68>
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	af 01       	movw	r20, r30
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	b9 f7       	brne	.-18     	; 0x1bbc <free+0x54>
    1bce:	1f c0       	rjmp	.+62     	; 0x1c0e <free+0xa6>
    1bd0:	e9 01       	movw	r28, r18
    1bd2:	22 97       	sbiw	r28, 0x02	; 2
    1bd4:	fb 83       	std	Y+3, r31	; 0x03
    1bd6:	ea 83       	std	Y+2, r30	; 0x02
    1bd8:	08 81       	ld	r16, Y
    1bda:	19 81       	ldd	r17, Y+1	; 0x01
    1bdc:	c9 01       	movw	r24, r18
    1bde:	80 0f       	add	r24, r16
    1be0:	91 1f       	adc	r25, r17
    1be2:	8e 17       	cp	r24, r30
    1be4:	9f 07       	cpc	r25, r31
    1be6:	59 f4       	brne	.+22     	; 0x1bfe <free+0x96>
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	80 0f       	add	r24, r16
    1bee:	91 1f       	adc	r25, r17
    1bf0:	02 96       	adiw	r24, 0x02	; 2
    1bf2:	99 83       	std	Y+1, r25	; 0x01
    1bf4:	88 83       	st	Y, r24
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	9b 83       	std	Y+3, r25	; 0x03
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
    1bfe:	41 15       	cp	r20, r1
    1c00:	51 05       	cpc	r21, r1
    1c02:	29 f4       	brne	.+10     	; 0x1c0e <free+0xa6>
    1c04:	b0 93 49 02 	sts	0x0249, r27
    1c08:	a0 93 48 02 	sts	0x0248, r26
    1c0c:	41 c0       	rjmp	.+130    	; 0x1c90 <free+0x128>
    1c0e:	fa 01       	movw	r30, r20
    1c10:	b3 83       	std	Z+3, r27	; 0x03
    1c12:	a2 83       	std	Z+2, r26	; 0x02
    1c14:	c1 91       	ld	r28, Z+
    1c16:	d1 91       	ld	r29, Z+
    1c18:	ec 0f       	add	r30, r28
    1c1a:	fd 1f       	adc	r31, r29
    1c1c:	ae 17       	cp	r26, r30
    1c1e:	bf 07       	cpc	r27, r31
    1c20:	81 f4       	brne	.+32     	; 0x1c42 <free+0xda>
    1c22:	f9 01       	movw	r30, r18
    1c24:	92 91       	ld	r25, -Z
    1c26:	82 91       	ld	r24, -Z
    1c28:	8c 0f       	add	r24, r28
    1c2a:	9d 1f       	adc	r25, r29
    1c2c:	02 96       	adiw	r24, 0x02	; 2
    1c2e:	da 01       	movw	r26, r20
    1c30:	11 96       	adiw	r26, 0x01	; 1
    1c32:	9c 93       	st	X, r25
    1c34:	8e 93       	st	-X, r24
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	13 96       	adiw	r26, 0x03	; 3
    1c3c:	9c 93       	st	X, r25
    1c3e:	8e 93       	st	-X, r24
    1c40:	12 97       	sbiw	r26, 0x02	; 2
    1c42:	e0 e0       	ldi	r30, 0x00	; 0
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <free+0xe4>
    1c48:	fb 01       	movw	r30, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	db 01       	movw	r26, r22
    1c4e:	12 96       	adiw	r26, 0x02	; 2
    1c50:	8d 91       	ld	r24, X+
    1c52:	9c 91       	ld	r25, X
    1c54:	13 97       	sbiw	r26, 0x03	; 3
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	b9 f7       	brne	.-18     	; 0x1c48 <free+0xe0>
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	02 96       	adiw	r24, 0x02	; 2
    1c5e:	2d 91       	ld	r18, X+
    1c60:	3c 91       	ld	r19, X
    1c62:	11 97       	sbiw	r26, 0x01	; 1
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	20 91 46 02 	lds	r18, 0x0246
    1c6c:	30 91 47 02 	lds	r19, 0x0247
    1c70:	28 17       	cp	r18, r24
    1c72:	39 07       	cpc	r19, r25
    1c74:	69 f4       	brne	.+26     	; 0x1c90 <free+0x128>
    1c76:	30 97       	sbiw	r30, 0x00	; 0
    1c78:	29 f4       	brne	.+10     	; 0x1c84 <free+0x11c>
    1c7a:	10 92 49 02 	sts	0x0249, r1
    1c7e:	10 92 48 02 	sts	0x0248, r1
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <free+0x120>
    1c84:	13 82       	std	Z+3, r1	; 0x03
    1c86:	12 82       	std	Z+2, r1	; 0x02
    1c88:	70 93 47 02 	sts	0x0247, r23
    1c8c:	60 93 46 02 	sts	0x0246, r22
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	08 95       	ret

00001c9a <memcmp>:
    1c9a:	fb 01       	movw	r30, r22
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <memcmp+0xe>
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	01 90       	ld	r0, Z+
    1ca4:	80 19       	sub	r24, r0
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <memcmp+0x16>
    1ca8:	41 50       	subi	r20, 0x01	; 1
    1caa:	50 40       	sbci	r21, 0x00	; 0
    1cac:	c8 f7       	brcc	.-14     	; 0x1ca0 <memcmp+0x6>
    1cae:	88 1b       	sub	r24, r24
    1cb0:	99 0b       	sbc	r25, r25
    1cb2:	08 95       	ret

00001cb4 <memcpy>:
    1cb4:	fb 01       	movw	r30, r22
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <memcpy+0xa>
    1cba:	01 90       	ld	r0, Z+
    1cbc:	0d 92       	st	X+, r0
    1cbe:	41 50       	subi	r20, 0x01	; 1
    1cc0:	50 40       	sbci	r21, 0x00	; 0
    1cc2:	d8 f7       	brcc	.-10     	; 0x1cba <memcpy+0x6>
    1cc4:	08 95       	ret

00001cc6 <strncmp>:
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	dc 01       	movw	r26, r24
    1cca:	41 50       	subi	r20, 0x01	; 1
    1ccc:	50 40       	sbci	r21, 0x00	; 0
    1cce:	30 f0       	brcs	.+12     	; 0x1cdc <strncmp+0x16>
    1cd0:	8d 91       	ld	r24, X+
    1cd2:	01 90       	ld	r0, Z+
    1cd4:	80 19       	sub	r24, r0
    1cd6:	19 f4       	brne	.+6      	; 0x1cde <strncmp+0x18>
    1cd8:	00 20       	and	r0, r0
    1cda:	b9 f7       	brne	.-18     	; 0x1cca <strncmp+0x4>
    1cdc:	88 1b       	sub	r24, r24
    1cde:	99 0b       	sbc	r25, r25
    1ce0:	08 95       	ret

00001ce2 <_exit>:
    1ce2:	f8 94       	cli

00001ce4 <__stop_program>:
    1ce4:	ff cf       	rjmp	.-2      	; 0x1ce4 <__stop_program>
