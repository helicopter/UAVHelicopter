
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800200  00001e7e  00001f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080023c  0080023c  00001f4e  2**0
                  ALLOC
  3 .stab         000020f4  00000000  00000000  00001f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c4  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000460  00000000  00000000  00004937  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000052d2  00000000  00000000  00004d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001df5  00000000  00000000  0000a069  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001590  00000000  00000000  0000be5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e44  00000000  00000000  0000d3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001e20  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021a6  00000000  00000000  00010054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000390  00000000  00000000  000121fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
       4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
	{
		//Copy the record
		//danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      44:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      68:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      6c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      70:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      7c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      80:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      84:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      88:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      90:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      94:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      98:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      a0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      a4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      a8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      ac:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      b0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
	}
}
      b4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      b8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      bc:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      c0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      c4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      cc:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      d0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      d4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
	{
		case 1:
		TCCR3B |= NoPrescaling;
		break;
		case 8:
		TCCR3B |= PrescaleByEight;
      d8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      dc:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      e0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>
      e8:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <_ZN10helicopter5tasks4Task4initEv>
		break;
		case 64:
		TCCR3B |= PrescaleBySixtyFour;
      ec:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>
      f0:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>
      f4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>
      f8:	0c 94 cb 00 	jmp	0x196	; 0x196 <_ZN10helicopter7drivers12SerialDriverD0Ev>
      fc:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <_ZN10helicopter5tasks4Task11runTaskImplEv>
		break;
		case 256:
		TCCR3B |= PrescaleByTwofiftysix;
     100:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     108:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <_ZN10helicopter5tasks4Task7runTaskEv>
     10c:	0c 94 96 01 	jmp	0x32c	; 0x32c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>
     110:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_ZN10helicopter7drivers12SerialDriverD1Ev>

00000114 <__ctors_end>:
		break;
		case 1024:
		TCCR3B |= PrescaleByTentwentyfour;
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d1 e2       	ldi	r29, 0x21	; 33
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0c bf       	out	0x3c, r16	; 60

00000124 <__do_copy_data>:
     124:	12 e0       	ldi	r17, 0x02	; 2
		break;
     126:	a0 e0       	ldi	r26, 0x00	; 0
		default:
		TCCR3B |= NoPrescaling;
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	fe e1       	ldi	r31, 0x1E	; 30
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	ac 33       	cpi	r26, 0x3C	; 60
	}
}
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	22 e0       	ldi	r18, 0x02	; 2
     140:	ac e3       	ldi	r26, 0x3C	; 60
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a2 34       	cpi	r26, 0x42	; 66
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	0e 94 39 03 	call	0x672	; 0x672 <main>
     152:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <_exit>

00000156 <__bad_interrupt>:
     156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	1f 92       	push	r1
     160:	1f 92       	push	r1
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	9a 83       	std	Y+2, r25	; 0x02
     168:	89 83       	std	Y+1, r24	; 0x01
				{
     16a:	89 81       	ldd	r24, Y+1	; 0x01
     16c:	9a 81       	ldd	r25, Y+2	; 0x02
     16e:	2a e0       	ldi	r18, 0x0A	; 10
     170:	32 e0       	ldi	r19, 0x02	; 2
     172:	fc 01       	movw	r30, r24
     174:	31 83       	std	Z+1, r19	; 0x01
     176:	20 83       	st	Z, r18
					
				}
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	81 70       	andi	r24, 0x01	; 1
     17e:	99 27       	eor	r25, r25
     180:	00 97       	sbiw	r24, 0x00	; 0
     182:	21 f0       	breq	.+8      	; 0x18c <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZdlPv>
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	1f 92       	push	r1
     19c:	1f 92       	push	r1
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	9a 83       	std	Y+2, r25	; 0x02
     1a4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN10helicopter7drivers12SerialDriverD1Ev>
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	9a 81       	ldd	r25, Y+2	; 0x02
     1b2:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZdlPv>
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "commonheader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     1c6:	1f 92       	push	r1
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9c 83       	std	Y+4, r25	; 0x04
     1ce:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     1d0:	1a 82       	std	Y+2, r1	; 0x02
     1d2:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	9c 81       	ldd	r25, Y+4	; 0x04
     1d8:	fc 01       	movw	r30, r24
     1da:	80 85       	ldd	r24, Z+8	; 0x08
     1dc:	88 23       	and	r24, r24
     1de:	b9 f1       	breq	.+110    	; 0x24e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     1e0:	8b 81       	ldd	r24, Y+3	; 0x03
     1e2:	9c 81       	ldd	r25, Y+4	; 0x04
     1e4:	fc 01       	movw	r30, r24
     1e6:	82 81       	ldd	r24, Z+2	; 0x02
     1e8:	93 81       	ldd	r25, Z+3	; 0x03
     1ea:	a4 81       	ldd	r26, Z+4	; 0x04
     1ec:	b5 81       	ldd	r27, Z+5	; 0x05
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	aa 1f       	adc	r26, r26
     1f4:	bb 1f       	adc	r27, r27
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	aa 1f       	adc	r26, r26
     1fc:	bb 1f       	adc	r27, r27
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	aa 1f       	adc	r26, r26
     204:	bb 1f       	adc	r27, r27
     206:	9c 01       	movw	r18, r24
     208:	ad 01       	movw	r20, r26
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	94 e2       	ldi	r25, 0x24	; 36
     20e:	a4 ef       	ldi	r26, 0xF4	; 244
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	bc 01       	movw	r22, r24
     214:	cd 01       	movw	r24, r26
     216:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__udivmodsi4>
     21a:	da 01       	movw	r26, r20
     21c:	c9 01       	movw	r24, r18
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	a1 09       	sbc	r26, r1
     222:	b1 09       	sbc	r27, r1
     224:	bc 01       	movw	r22, r24
     226:	cd 01       	movw	r24, r26
     228:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__floatunsisf>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	bc 01       	movw	r22, r24
     232:	cd 01       	movw	r24, r26
     234:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <floor>
     238:	dc 01       	movw	r26, r24
     23a:	cb 01       	movw	r24, r22
     23c:	bc 01       	movw	r22, r24
     23e:	cd 01       	movw	r24, r26
     240:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     244:	dc 01       	movw	r26, r24
     246:	cb 01       	movw	r24, r22
     248:	9a 83       	std	Y+2, r25	; 0x02
     24a:	89 83       	std	Y+1, r24	; 0x01
     24c:	3a c0       	rjmp	.+116    	; 0x2c2 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	9c 81       	ldd	r25, Y+4	; 0x04
     252:	fc 01       	movw	r30, r24
     254:	82 81       	ldd	r24, Z+2	; 0x02
     256:	93 81       	ldd	r25, Z+3	; 0x03
     258:	a4 81       	ldd	r26, Z+4	; 0x04
     25a:	b5 81       	ldd	r27, Z+5	; 0x05
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	aa 1f       	adc	r26, r26
     262:	bb 1f       	adc	r27, r27
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	aa 1f       	adc	r26, r26
     26a:	bb 1f       	adc	r27, r27
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	aa 1f       	adc	r26, r26
     272:	bb 1f       	adc	r27, r27
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	aa 1f       	adc	r26, r26
     27a:	bb 1f       	adc	r27, r27
     27c:	9c 01       	movw	r18, r24
     27e:	ad 01       	movw	r20, r26
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	94 e2       	ldi	r25, 0x24	; 36
     284:	a4 ef       	ldi	r26, 0xF4	; 244
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__udivmodsi4>
     290:	da 01       	movw	r26, r20
     292:	c9 01       	movw	r24, r18
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	a1 09       	sbc	r26, r1
     298:	b1 09       	sbc	r27, r1
     29a:	bc 01       	movw	r22, r24
     29c:	cd 01       	movw	r24, r26
     29e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__floatunsisf>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	bc 01       	movw	r22, r24
     2a8:	cd 01       	movw	r24, r26
     2aa:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <floor>
     2ae:	dc 01       	movw	r26, r24
     2b0:	cb 01       	movw	r24, r22
     2b2:	bc 01       	movw	r22, r24
     2b4:	cd 01       	movw	r24, r26
     2b6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	9a 83       	std	Y+2, r25	; 0x02
     2c0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     2c2:	8b 81       	ldd	r24, Y+3	; 0x03
     2c4:	9c 81       	ldd	r25, Y+4	; 0x04
     2c6:	fc 01       	movw	r30, r24
     2c8:	86 81       	ldd	r24, Z+6	; 0x06
     2ca:	88 23       	and	r24, r24
     2cc:	41 f5       	brne	.+80     	; 0x31e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     2ce:	84 ec       	ldi	r24, 0xC4	; 196
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	29 81       	ldd	r18, Y+1	; 0x01
     2d4:	3a 81       	ldd	r19, Y+2	; 0x02
     2d6:	fc 01       	movw	r30, r24
     2d8:	31 83       	std	Z+1, r19	; 0x01
     2da:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     2dc:	82 ec       	ldi	r24, 0xC2	; 194
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	22 ec       	ldi	r18, 0xC2	; 194
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	26 60       	ori	r18, 0x06	; 6
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	fc 01       	movw	r30, r24
     2f4:	80 85       	ldd	r24, Z+8	; 0x08
     2f6:	88 23       	and	r24, r24
     2f8:	49 f0       	breq	.+18     	; 0x30c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     2fa:	80 ec       	ldi	r24, 0xC0	; 192
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	20 ec       	ldi	r18, 0xC0	; 192
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	f9 01       	movw	r30, r18
     304:	20 81       	ld	r18, Z
     306:	22 60       	ori	r18, 0x02	; 2
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     30c:	81 ec       	ldi	r24, 0xC1	; 193
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	21 ec       	ldi	r18, 0xC1	; 193
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	28 61       	ori	r18, 0x18	; 24
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
	}
}
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>:

int SerialDriver::transmitByte(byte byteToSend)
{
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	00 d0       	rcall	.+0      	; 0x332 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x6>
     332:	1f 92       	push	r1
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	9c 83       	std	Y+4, r25	; 0x04
     33c:	8b 83       	std	Y+3, r24	; 0x03
     33e:	6d 83       	std	Y+5, r22	; 0x05
	if (uartPort == Zero)
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	fc 01       	movw	r30, r24
     346:	86 81       	ldd	r24, Z+6	; 0x06
     348:	88 23       	and	r24, r24
     34a:	51 f5       	brne	.+84     	; 0x3a0 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x74>
	{
		int counter = 0;
     34c:	1a 82       	std	Y+2, r1	; 0x02
     34e:	19 82       	std	Y+1, r1	; 0x01
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     350:	14 c0       	rjmp	.+40     	; 0x37a <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x4e>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	9c 81       	ldd	r25, Y+4	; 0x04
     356:	fc 01       	movw	r30, r24
     358:	87 81       	ldd	r24, Z+7	; 0x07
     35a:	88 23       	and	r24, r24
     35c:	71 f0       	breq	.+28     	; 0x37a <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x4e>
			{
				if (counter > SENDTIMEOUTCOUNTER)
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	fd e7       	ldi	r31, 0x7D	; 125
     366:	9f 07       	cpc	r25, r31
     368:	1c f0       	brlt	.+6      	; 0x370 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x44>
				{
					return -1;
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	9f ef       	ldi	r25, 0xFF	; 255
     36e:	1a c0       	rjmp	.+52     	; 0x3a4 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x78>
				}
				
				counter++;
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	9a 81       	ldd	r25, Y+2	; 0x02
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
	if (uartPort == Zero)
	{
		int counter = 0;
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     37a:	80 ec       	ldi	r24, 0xC0	; 192
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	fc 01       	movw	r30, r24
     380:	80 81       	ld	r24, Z
     382:	88 2f       	mov	r24, r24
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	80 72       	andi	r24, 0x20	; 32
     388:	99 27       	eor	r25, r25
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	00 97       	sbiw	r24, 0x00	; 0
     38e:	09 f0       	breq	.+2      	; 0x392 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x66>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	22 23       	and	r18, r18
     394:	f1 f6       	brne	.-68     	; 0x352 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x26>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     396:	86 ec       	ldi	r24, 0xC6	; 198
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	2d 81       	ldd	r18, Y+5	; 0x05
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
	}
	
	return 0;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
}
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x6>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x8>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	9c 83       	std	Y+4, r25	; 0x04
     3c2:	8b 83       	std	Y+3, r24	; 0x03
     3c4:	7e 83       	std	Y+6, r23	; 0x06
     3c6:	6d 83       	std	Y+5, r22	; 0x05
	if (uartPort == Zero)
     3c8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ca:	9c 81       	ldd	r25, Y+4	; 0x04
     3cc:	fc 01       	movw	r30, r24
     3ce:	86 81       	ldd	r24, Z+6	; 0x06
     3d0:	88 23       	and	r24, r24
     3d2:	49 f5       	brne	.+82     	; 0x426 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x72>
	{
		int counter = 0;
     3d4:	1a 82       	std	Y+2, r1	; 0x02
     3d6:	19 82       	std	Y+1, r1	; 0x01
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     3d8:	14 c0       	rjmp	.+40     	; 0x402 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x4e>
		{
			if (isTimeoutEnabled)
     3da:	8b 81       	ldd	r24, Y+3	; 0x03
     3dc:	9c 81       	ldd	r25, Y+4	; 0x04
     3de:	fc 01       	movw	r30, r24
     3e0:	87 81       	ldd	r24, Z+7	; 0x07
     3e2:	88 23       	and	r24, r24
     3e4:	71 f0       	breq	.+28     	; 0x402 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x4e>
			{
				//Check for timeout
				if (counter > RECEIVETIMEOUTCOUNTER)
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	fd e7       	ldi	r31, 0x7D	; 125
     3ee:	9f 07       	cpc	r25, r31
     3f0:	1c f0       	brlt	.+6      	; 0x3f8 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x44>
				{
					return -1;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	19 c0       	rjmp	.+50     	; 0x42a <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x76>
				}
			
				counter++;			
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01
	if (uartPort == Zero)
	{
		int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     402:	80 ec       	ldi	r24, 0xC0	; 192
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	fc 01       	movw	r30, r24
     408:	80 81       	ld	r24, Z
     40a:	80 95       	com	r24
     40c:	88 1f       	adc	r24, r24
     40e:	88 27       	eor	r24, r24
     410:	88 1f       	adc	r24, r24
     412:	88 23       	and	r24, r24
     414:	11 f7       	brne	.-60     	; 0x3da <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x26>
			}
		}
		
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
     416:	86 ec       	ldi	r24, 0xC6	; 198
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	20 81       	ld	r18, Z
     41e:	8d 81       	ldd	r24, Y+5	; 0x05
     420:	9e 81       	ldd	r25, Y+6	; 0x06
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
	}
	
	return 0;
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	26 96       	adiw	r28, 0x06	; 6
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>:
					
					int ledToBlink;
				
				public:

				FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	28 97       	sbiw	r28, 0x08	; 8
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	89 83       	std	Y+1, r24	; 0x01
     454:	7c 83       	std	Y+4, r23	; 0x04
     456:	6b 83       	std	Y+3, r22	; 0x03
     458:	5e 83       	std	Y+6, r21	; 0x06
     45a:	4d 83       	std	Y+5, r20	; 0x05
     45c:	38 87       	std	Y+8, r19	; 0x08
     45e:	2f 83       	std	Y+7, r18	; 0x07
					Task(delay, period),
					isOn(false),
					ledToBlink(ledToBlink)
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	4d 81       	ldd	r20, Y+5	; 0x05
     466:	5e 81       	ldd	r21, Y+6	; 0x06
     468:	2b 81       	ldd	r18, Y+3	; 0x03
     46a:	3c 81       	ldd	r19, Y+4	; 0x04
     46c:	b9 01       	movw	r22, r18
     46e:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN10helicopter5tasks4TaskC1Eii>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	28 e1       	ldi	r18, 0x18	; 24
     478:	32 e0       	ldi	r19, 0x02	; 2
     47a:	fc 01       	movw	r30, r24
     47c:	31 83       	std	Z+1, r19	; 0x01
     47e:	20 83       	st	Z, r18
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	fc 01       	movw	r30, r24
     486:	17 82       	std	Z+7, r1	; 0x07
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	2f 81       	ldd	r18, Y+7	; 0x07
     48e:	38 85       	ldd	r19, Y+8	; 0x08
     490:	fc 01       	movw	r30, r24
     492:	31 87       	std	Z+9, r19	; 0x09
     494:	20 87       	std	Z+8, r18	; 0x08
				{
					
				}
     496:	28 96       	adiw	r28, 0x08	; 8
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>:
	
				void init()
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	1f 92       	push	r1
     4ae:	1f 92       	push	r1
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	9a 83       	std	Y+2, r25	; 0x02
     4b6:	89 83       	std	Y+1, r24	; 0x01
				{
					DDRA |= (1<<ledToBlink);
     4b8:	81 e2       	ldi	r24, 0x21	; 33
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	21 e2       	ldi	r18, 0x21	; 33
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	62 2f       	mov	r22, r18
     4c6:	29 81       	ldd	r18, Y+1	; 0x01
     4c8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ca:	f9 01       	movw	r30, r18
     4cc:	40 85       	ldd	r20, Z+8	; 0x08
     4ce:	51 85       	ldd	r21, Z+9	; 0x09
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	04 2e       	mov	r0, r20
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x34>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x30>
     4e0:	26 2b       	or	r18, r22
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
				}
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>:
	
				/**
				 * Flashes the LED
				 */
				void runTaskImpl() {
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	1f 92       	push	r1
     4f6:	1f 92       	push	r1
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	9a 83       	std	Y+2, r25	; 0x02
     4fe:	89 83       	std	Y+1, r24	; 0x01
					if (isOn)
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	fc 01       	movw	r30, r24
     506:	87 81       	ldd	r24, Z+7	; 0x07
     508:	88 23       	and	r24, r24
     50a:	e9 f0       	breq	.+58     	; 0x546 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x56>
					{
						PORTA &= ~(1<<ledToBlink);
     50c:	82 e2       	ldi	r24, 0x22	; 34
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	22 e2       	ldi	r18, 0x22	; 34
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	62 2f       	mov	r22, r18
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	3a 81       	ldd	r19, Y+2	; 0x02
     51e:	f9 01       	movw	r30, r18
     520:	40 85       	ldd	r20, Z+8	; 0x08
     522:	51 85       	ldd	r21, Z+9	; 0x09
     524:	21 e0       	ldi	r18, 0x01	; 1
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	04 2e       	mov	r0, r20
     52a:	02 c0       	rjmp	.+4      	; 0x530 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x40>
     52c:	22 0f       	add	r18, r18
     52e:	33 1f       	adc	r19, r19
     530:	0a 94       	dec	r0
     532:	e2 f7       	brpl	.-8      	; 0x52c <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x3c>
     534:	20 95       	com	r18
     536:	26 23       	and	r18, r22
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18
						isOn = false;
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	fc 01       	movw	r30, r24
     542:	17 82       	std	Z+7, r1	; 0x07
     544:	1c c0       	rjmp	.+56     	; 0x57e <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x8e>
					}else
					{
						PORTA |= (1<<ledToBlink);
     546:	82 e2       	ldi	r24, 0x22	; 34
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	22 e2       	ldi	r18, 0x22	; 34
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	62 2f       	mov	r22, r18
     554:	29 81       	ldd	r18, Y+1	; 0x01
     556:	3a 81       	ldd	r19, Y+2	; 0x02
     558:	f9 01       	movw	r30, r18
     55a:	40 85       	ldd	r20, Z+8	; 0x08
     55c:	51 85       	ldd	r21, Z+9	; 0x09
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	04 2e       	mov	r0, r20
     564:	02 c0       	rjmp	.+4      	; 0x56a <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x7a>
     566:	22 0f       	add	r18, r18
     568:	33 1f       	adc	r19, r19
     56a:	0a 94       	dec	r0
     56c:	e2 f7       	brpl	.-8      	; 0x566 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x76>
     56e:	26 2b       	or	r18, r22
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
						isOn = true;
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	fc 01       	movw	r30, r24
     57c:	27 83       	std	Z+7, r18	; 0x07
					}
				}
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>:
				 * @param uartPort Which UART port on the board to utilize.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
     588:	ef 92       	push	r14
     58a:	0f 93       	push	r16
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	29 97       	sbiw	r28, 0x09	; 9
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	4b 83       	std	Y+3, r20	; 0x03
     5a6:	5c 83       	std	Y+4, r21	; 0x04
     5a8:	6d 83       	std	Y+5, r22	; 0x05
     5aa:	7e 83       	std	Y+6, r23	; 0x06
     5ac:	2f 83       	std	Y+7, r18	; 0x07
     5ae:	08 87       	std	Y+8, r16	; 0x08
     5b0:	e9 86       	std	Y+9, r14	; 0x09
					bool enableTimeout = true,
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	2a e0       	ldi	r18, 0x0A	; 10
     5b8:	32 e0       	ldi	r19, 0x02	; 2
     5ba:	fc 01       	movw	r30, r24
     5bc:	31 83       	std	Z+1, r19	; 0x01
     5be:	20 83       	st	Z, r18
     5c0:	29 81       	ldd	r18, Y+1	; 0x01
     5c2:	3a 81       	ldd	r19, Y+2	; 0x02
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	ad 81       	ldd	r26, Y+5	; 0x05
     5ca:	be 81       	ldd	r27, Y+6	; 0x06
     5cc:	f9 01       	movw	r30, r18
     5ce:	82 83       	std	Z+2, r24	; 0x02
     5d0:	93 83       	std	Z+3, r25	; 0x03
     5d2:	a4 83       	std	Z+4, r26	; 0x04
     5d4:	b5 83       	std	Z+5, r27	; 0x05
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	2f 81       	ldd	r18, Y+7	; 0x07
     5dc:	fc 01       	movw	r30, r24
     5de:	26 83       	std	Z+6, r18	; 0x06
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	28 85       	ldd	r18, Y+8	; 0x08
     5e6:	fc 01       	movw	r30, r24
     5e8:	27 83       	std	Z+7, r18	; 0x07
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	29 85       	ldd	r18, Y+9	; 0x09
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 87       	std	Z+8, r18	; 0x08
				{}
     5f4:	29 96       	adiw	r28, 0x09	; 9
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	0f 91       	pop	r16
     606:	ef 90       	pop	r14
     608:	08 95       	ret

0000060a <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * This is because internally, the message builder 'builds' the message as the bytes
				 * are received. If another message starts to be received and starts inserting
				 * bytes into the same internal message structure, it will corrupt the message
				 * being built. 
				 */
				RadioInterface(SerialDriver *serialDriver):
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	9a 83       	std	Y+2, r25	; 0x02
     618:	89 83       	std	Y+1, r24	; 0x01
     61a:	7c 83       	std	Y+4, r23	; 0x04
     61c:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	2b 81       	ldd	r18, Y+3	; 0x03
     624:	3c 81       	ldd	r19, Y+4	; 0x04
     626:	fc 01       	movw	r30, r24
     628:	31 83       	std	Z+1, r19	; 0x01
     62a:	20 83       	st	Z, r18
					{}
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int rawMagZ;
			
			public:
			
			SystemModel():
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	1f 92       	push	r1
     640:	1f 92       	push	r1
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	9a 83       	std	Y+2, r25	; 0x02
     648:	89 83       	std	Y+1, r24	; 0x01
			rawMagX(0),
			rawMagY(0),
			rawMagZ(0)
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	fc 01       	movw	r30, r24
     650:	11 82       	std	Z+1, r1	; 0x01
     652:	10 82       	st	Z, r1
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	fc 01       	movw	r30, r24
     65a:	13 82       	std	Z+3, r1	; 0x03
     65c:	12 82       	std	Z+2, r1	; 0x02
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	fc 01       	movw	r30, r24
     664:	15 82       	std	Z+5, r1	; 0x05
     666:	14 82       	std	Z+4, r1	; 0x04
			{
				
			}
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <main>:
using namespace helicopter::drivers;
using namespace helicopter::interfaces;
using namespace helicopter::model;

int main(void)
{	
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	2e 97       	sbiw	r28, 0x0e	; 14
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
     692:	86 e0       	ldi	r24, 0x06	; 6
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     69a:	8c 01       	movw	r16, r24
     69c:	c8 01       	movw	r24, r16
     69e:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN10helicopter5model11SystemModelC1Ev>
     6a2:	1a 83       	std	Y+2, r17	; 0x02
     6a4:	09 83       	std	Y+1, r16	; 0x01
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, true, true);
     6a6:	89 e0       	ldi	r24, 0x09	; 9
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     6ae:	6c 01       	movw	r12, r24
     6b0:	ee 24       	eor	r14, r14
     6b2:	e3 94       	inc	r14
     6b4:	01 e0       	ldi	r16, 0x01	; 1
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	51 ee       	ldi	r21, 0xE1	; 225
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	c6 01       	movw	r24, r12
     6c2:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>
     6c6:	dc 82       	std	Y+4, r13	; 0x04
     6c8:	cb 82       	std	Y+3, r12	; 0x03
	serialDriver->initialize();
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	9c 81       	ldd	r25, Y+4	; 0x04
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	91 81       	ldd	r25, Z+1	; 0x01
     6d4:	04 96       	adiw	r24, 0x04	; 4
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 81       	ld	r18, Z
     6da:	31 81       	ldd	r19, Z+1	; 0x01
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	f9 01       	movw	r30, r18
     6e2:	19 95       	eicall
	
	
	RadioInterface *radioInterface = new RadioInterface(serialDriver);
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     6ec:	8c 01       	movw	r16, r24
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	bc 01       	movw	r22, r24
     6f4:	c8 01       	movw	r24, r16
     6f6:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverE>
     6fa:	1e 83       	std	Y+6, r17	; 0x06
     6fc:	0d 83       	std	Y+5, r16	; 0x05
	
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 20);//starting at tick 1, execute 50 times a second
     6fe:	8b e0       	ldi	r24, 0x0B	; 11
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     706:	7c 01       	movw	r14, r24
     708:	49 81       	ldd	r20, Y+1	; 0x01
     70a:	5a 81       	ldd	r21, Y+2	; 0x02
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	9e 81       	ldd	r25, Y+6	; 0x06
     710:	04 e1       	ldi	r16, 0x14	; 20
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	bc 01       	movw	r22, r24
     71a:	c7 01       	movw	r24, r14
     71c:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     720:	f8 86       	std	Y+8, r15	; 0x08
     722:	ef 82       	std	Y+7, r14	; 0x07

	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 40);//starting at tick 2, execute 50 times a second
     724:	8b e0       	ldi	r24, 0x0B	; 11
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     72c:	7c 01       	movw	r14, r24
     72e:	49 81       	ldd	r20, Y+1	; 0x01
     730:	5a 81       	ldd	r21, Y+2	; 0x02
     732:	8d 81       	ldd	r24, Y+5	; 0x05
     734:	9e 81       	ldd	r25, Y+6	; 0x06
     736:	08 e2       	ldi	r16, 0x28	; 40
     738:	10 e0       	ldi	r17, 0x00	; 0
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	bc 01       	movw	r22, r24
     740:	c7 01       	movw	r24, r14
     742:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     746:	fa 86       	std	Y+10, r15	; 0x0a
     748:	e9 86       	std	Y+9, r14	; 0x09
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, TIMER_FREQUENCY_HZ);//starting at tick 3, execute once a second
     74a:	8a e0       	ldi	r24, 0x0A	; 10
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     752:	8c 01       	movw	r16, r24
     754:	23 e0       	ldi	r18, 0x03	; 3
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	48 ec       	ldi	r20, 0xC8	; 200
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	c8 01       	movw	r24, r16
     762:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>
     766:	1c 87       	std	Y+12, r17	; 0x0c
     768:	0b 87       	std	Y+11, r16	; 0x0b
		
	
	
	Scheduler *scheduler = Scheduler::getScheduler();
     76a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
     76e:	9e 87       	std	Y+14, r25	; 0x0e
     770:	8d 87       	std	Y+13, r24	; 0x0d
	
	scheduler->addTask(flashTask);
     772:	2b 85       	ldd	r18, Y+11	; 0x0b
     774:	3c 85       	ldd	r19, Y+12	; 0x0c
     776:	8d 85       	ldd	r24, Y+13	; 0x0d
     778:	9e 85       	ldd	r25, Y+14	; 0x0e
     77a:	b9 01       	movw	r22, r18
     77c:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
     780:	2f 81       	ldd	r18, Y+7	; 0x07
     782:	38 85       	ldd	r19, Y+8	; 0x08
     784:	8d 85       	ldd	r24, Y+13	; 0x0d
     786:	9e 85       	ldd	r25, Y+14	; 0x0e
     788:	b9 01       	movw	r22, r18
     78a:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
     78e:	29 85       	ldd	r18, Y+9	; 0x09
     790:	3a 85       	ldd	r19, Y+10	; 0x0a
     792:	8d 85       	ldd	r24, Y+13	; 0x0d
     794:	9e 85       	ldd	r25, Y+14	; 0x0e
     796:	b9 01       	movw	r22, r18
     798:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
     79c:	8d 85       	ldd	r24, Y+13	; 0x0d
     79e:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
     7a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a8:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	
	while(1)
	{
		scheduler->dispatch(); //ensure it includes processor sleeping.
     7ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ae:	9e 85       	ldd	r25, Y+14	; 0x0e
     7b0:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
     7b4:	fb cf       	rjmp	.-10     	; 0x7ac <main+0x13a>

000007b6 <_ZN10helicopter8messages22SystemTelemetryMessage14getMessageSizeEv>:
				byte getType()
				{
					return msgType;
				}
				
				int getMessageSize()
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	1f 92       	push	r1
     7bc:	1f 92       	push	r1
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	9a 83       	std	Y+2, r25	; 0x02
     7c4:	89 83       	std	Y+1, r24	; 0x01
				{
					return MessageSize;
     7c6:	87 e0       	ldi	r24, 0x07	; 7
     7c8:	90 e0       	ldi	r25, 0x00	; 0
				}
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_>:

using namespace helicopter::util::common;
using namespace helicopter::interfaces;

void RadioInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2d 97       	sbiw	r28, 0x0d	; 13
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	9d 83       	std	Y+5, r25	; 0x05
     7ee:	8c 83       	std	Y+4, r24	; 0x04
     7f0:	7f 83       	std	Y+7, r23	; 0x07
     7f2:	6e 83       	std	Y+6, r22	; 0x06
     7f4:	59 87       	std	Y+9, r21	; 0x09
     7f6:	48 87       	std	Y+8, r20	; 0x08
     7f8:	3b 87       	std	Y+11, r19	; 0x0b
     7fa:	2a 87       	std	Y+10, r18	; 0x0a
     7fc:	1d 87       	std	Y+13, r17	; 0x0d
     7fe:	0c 87       	std	Y+12, r16	; 0x0c
	//These fields can overflow, but that is intentional.
	for (int i = 0; i < payloadSize; i++)
     800:	1a 82       	std	Y+2, r1	; 0x02
     802:	19 82       	std	Y+1, r1	; 0x01
     804:	26 c0       	rjmp	.+76     	; 0x852 <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_+0x7e>
	{
		byte b = msgPayload[i];
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	2e 81       	ldd	r18, Y+6	; 0x06
     80c:	3f 81       	ldd	r19, Y+7	; 0x07
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	fc 01       	movw	r30, r24
     814:	80 81       	ld	r24, Z
     816:	8b 83       	std	Y+3, r24	; 0x03
		
		checksumA = (byte) (checksumA + b);
     818:	8a 85       	ldd	r24, Y+10	; 0x0a
     81a:	9b 85       	ldd	r25, Y+11	; 0x0b
     81c:	fc 01       	movw	r30, r24
     81e:	90 81       	ld	r25, Z
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	29 2f       	mov	r18, r25
     824:	28 0f       	add	r18, r24
     826:	8a 85       	ldd	r24, Y+10	; 0x0a
     828:	9b 85       	ldd	r25, Y+11	; 0x0b
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
     82e:	8c 85       	ldd	r24, Y+12	; 0x0c
     830:	9d 85       	ldd	r25, Y+13	; 0x0d
     832:	fc 01       	movw	r30, r24
     834:	20 81       	ld	r18, Z
     836:	8a 85       	ldd	r24, Y+10	; 0x0a
     838:	9b 85       	ldd	r25, Y+11	; 0x0b
     83a:	fc 01       	movw	r30, r24
     83c:	80 81       	ld	r24, Z
     83e:	28 0f       	add	r18, r24
     840:	8c 85       	ldd	r24, Y+12	; 0x0c
     842:	9d 85       	ldd	r25, Y+13	; 0x0d
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
using namespace helicopter::interfaces;

void RadioInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	//These fields can overflow, but that is intentional.
	for (int i = 0; i < payloadSize; i++)
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	29 81       	ldd	r18, Y+1	; 0x01
     856:	3a 81       	ldd	r19, Y+2	; 0x02
     858:	88 85       	ldd	r24, Y+8	; 0x08
     85a:	99 85       	ldd	r25, Y+9	; 0x09
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	0c f0       	brlt	.+2      	; 0x864 <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_+0x90>
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	44 23       	and	r20, r20
     866:	79 f6       	brne	.-98     	; 0x806 <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_+0x32>
		byte b = msgPayload[i];
		
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	08 95       	ret

0000087e <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE>:

int RadioInterface::transmit(SystemTelemetryMessage *msgToSend)
{
     87e:	cf 92       	push	r12
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	64 97       	sbiw	r28, 0x14	; 20
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	9a 8b       	std	Y+18, r25	; 0x12
     8a0:	89 8b       	std	Y+17, r24	; 0x11
     8a2:	7c 8b       	std	Y+20, r23	; 0x14
     8a4:	6b 8b       	std	Y+19, r22	; 0x13
		
		delete msgPayload;
	}
	
	return status;
}
     8a6:	ed b6       	in	r14, 0x3d	; 61
     8a8:	fe b6       	in	r15, 0x3e	; 62
	}
}

int RadioInterface::transmit(SystemTelemetryMessage *msgToSend)
{
	int status = 0;
     8aa:	1a 82       	std	Y+2, r1	; 0x02
     8ac:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
     8ae:	8b 89       	ldd	r24, Y+19	; 0x13
     8b0:	9c 89       	ldd	r25, Y+20	; 0x14
     8b2:	00 97       	sbiw	r24, 0x00	; 0
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE+0x3a>
     8b6:	9f c0       	rjmp	.+318    	; 0x9f6 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE+0x178>
     8b8:	8d b7       	in	r24, 0x3d	; 61
     8ba:	9e b7       	in	r25, 0x3e	; 62
     8bc:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
     8be:	8b 89       	ldd	r24, Y+19	; 0x13
     8c0:	9c 89       	ldd	r25, Y+20	; 0x14
     8c2:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     8c6:	9e 83       	std	Y+6, r25	; 0x06
     8c8:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
     8ca:	8b 89       	ldd	r24, Y+19	; 0x13
     8cc:	9c 89       	ldd	r25, Y+20	; 0x14
     8ce:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN10helicopter8messages22SystemTelemetryMessage14getMessageSizeEv>
     8d2:	98 87       	std	Y+8, r25	; 0x08
     8d4:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + 4;;
     8d6:	8f 81       	ldd	r24, Y+7	; 0x07
     8d8:	98 85       	ldd	r25, Y+8	; 0x08
     8da:	04 96       	adiw	r24, 0x04	; 4
     8dc:	9a 87       	std	Y+10, r25	; 0x0a
     8de:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
     8e0:	89 85       	ldd	r24, Y+9	; 0x09
     8e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	9c 87       	std	Y+12, r25	; 0x0c
     8e8:	8b 87       	std	Y+11, r24	; 0x0b
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	2d b7       	in	r18, 0x3d	; 61
     8ee:	3e b7       	in	r19, 0x3e	; 62
     8f0:	28 1b       	sub	r18, r24
     8f2:	39 0b       	sbc	r19, r25
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	3e bf       	out	0x3e, r19	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	2d bf       	out	0x3d, r18	; 61
     8fe:	8d b7       	in	r24, 0x3d	; 61
     900:	9e b7       	in	r25, 0x3e	; 62
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	9e 87       	std	Y+14, r25	; 0x0e
     906:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = RadioInterface::SyncByte1;
     908:	8d 85       	ldd	r24, Y+13	; 0x0d
     90a:	9e 85       	ldd	r25, Y+14	; 0x0e
     90c:	25 eb       	ldi	r18, 0xB5	; 181
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
		completeMsg[1] = RadioInterface::SyncByte2;
     912:	8d 85       	ldd	r24, Y+13	; 0x0d
     914:	9e 85       	ldd	r25, Y+14	; 0x0e
     916:	22 e6       	ldi	r18, 0x62	; 98
     918:	fc 01       	movw	r30, r24
     91a:	21 83       	std	Z+1, r18	; 0x01
		
		memcpy(&completeMsg[2], msgPayload, payloadSize);
     91c:	4f 81       	ldd	r20, Y+7	; 0x07
     91e:	58 85       	ldd	r21, Y+8	; 0x08
     920:	8d 85       	ldd	r24, Y+13	; 0x0d
     922:	9e 85       	ldd	r25, Y+14	; 0x0e
     924:	02 96       	adiw	r24, 0x02	; 2
     926:	2d 81       	ldd	r18, Y+5	; 0x05
     928:	3e 81       	ldd	r19, Y+6	; 0x06
     92a:	b9 01       	movw	r22, r18
     92c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <memcpy>
		
		byte checksumA = 0;
     930:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
     932:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
     934:	fe 01       	movw	r30, r28
     936:	70 96       	adiw	r30, 0x10	; 16
     938:	9e 01       	movw	r18, r28
     93a:	21 5f       	subi	r18, 0xF1	; 241
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	4f 81       	ldd	r20, Y+7	; 0x07
     940:	58 85       	ldd	r21, Y+8	; 0x08
     942:	6d 81       	ldd	r22, Y+5	; 0x05
     944:	7e 81       	ldd	r23, Y+6	; 0x06
     946:	89 89       	ldd	r24, Y+17	; 0x11
     948:	9a 89       	ldd	r25, Y+18	; 0x12
     94a:	8f 01       	movw	r16, r30
     94c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
     950:	89 85       	ldd	r24, Y+9	; 0x09
     952:	9a 85       	ldd	r25, Y+10	; 0x0a
     954:	02 97       	sbiw	r24, 0x02	; 2
     956:	4f 85       	ldd	r20, Y+15	; 0x0f
     958:	2d 85       	ldd	r18, Y+13	; 0x0d
     95a:	3e 85       	ldd	r19, Y+14	; 0x0e
     95c:	82 0f       	add	r24, r18
     95e:	93 1f       	adc	r25, r19
     960:	fc 01       	movw	r30, r24
     962:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
     964:	89 85       	ldd	r24, Y+9	; 0x09
     966:	9a 85       	ldd	r25, Y+10	; 0x0a
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	48 89       	ldd	r20, Y+16	; 0x10
     96c:	2d 85       	ldd	r18, Y+13	; 0x0d
     96e:	3e 85       	ldd	r19, Y+14	; 0x0e
     970:	82 0f       	add	r24, r18
     972:	93 1f       	adc	r25, r19
     974:	fc 01       	movw	r30, r24
     976:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     978:	1c 82       	std	Y+4, r1	; 0x04
     97a:	1b 82       	std	Y+3, r1	; 0x03
     97c:	23 c0       	rjmp	.+70     	; 0x9c4 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE+0x146>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
     97e:	89 89       	ldd	r24, Y+17	; 0x11
     980:	9a 89       	ldd	r25, Y+18	; 0x12
     982:	fc 01       	movw	r30, r24
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	91 81       	ldd	r25, Z+1	; 0x01
     98e:	06 96       	adiw	r24, 0x06	; 6
     990:	fc 01       	movw	r30, r24
     992:	20 81       	ld	r18, Z
     994:	31 81       	ldd	r19, Z+1	; 0x01
     996:	4d 85       	ldd	r20, Y+13	; 0x0d
     998:	5e 85       	ldd	r21, Y+14	; 0x0e
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	84 0f       	add	r24, r20
     9a0:	95 1f       	adc	r25, r21
     9a2:	fc 01       	movw	r30, r24
     9a4:	40 81       	ld	r20, Z
     9a6:	89 89       	ldd	r24, Y+17	; 0x11
     9a8:	9a 89       	ldd	r25, Y+18	; 0x12
     9aa:	fc 01       	movw	r30, r24
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	64 2f       	mov	r22, r20
     9b2:	f9 01       	movw	r30, r18
     9b4:	19 95       	eicall
     9b6:	9a 83       	std	Y+2, r25	; 0x02
     9b8:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	8b 83       	std	Y+3, r24	; 0x03
     9c4:	2b 81       	ldd	r18, Y+3	; 0x03
     9c6:	3c 81       	ldd	r19, Y+4	; 0x04
     9c8:	89 85       	ldd	r24, Y+9	; 0x09
     9ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     9cc:	28 17       	cp	r18, r24
     9ce:	39 07       	cpc	r19, r25
     9d0:	34 f4       	brge	.+12     	; 0x9de <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE+0x160>
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	11 f4       	brne	.+4      	; 0x9de <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE+0x160>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE+0x162>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	88 23       	and	r24, r24
     9e2:	69 f6       	brne	.-102    	; 0x97e <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE+0x100>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete msgPayload;
     9e4:	8d 81       	ldd	r24, Y+5	; 0x05
     9e6:	9e 81       	ldd	r25, Y+6	; 0x06
     9e8:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZdlPv>
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de be       	out	0x3e, r13	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	fe be       	out	0x3e, r15	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	ed be       	out	0x3d, r14	; 61
     a04:	64 96       	adiw	r28, 0x14	; 20
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE>:

int RadioInterface::receive(SystemTelemetryMessage * &receivedMessage)
{
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	66 97       	sbiw	r28, 0x16	; 22
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	9c 8b       	std	Y+20, r25	; 0x14
     a3c:	8b 8b       	std	Y+19, r24	; 0x13
     a3e:	7e 8b       	std	Y+22, r23	; 0x16
     a40:	6d 8b       	std	Y+21, r22	; 0x15
	int status = 0;
     a42:	1a 82       	std	Y+2, r1	; 0x02
     a44:	19 82       	std	Y+1, r1	; 0x01
	
	byte previousByte = 0;
     a46:	1b 82       	std	Y+3, r1	; 0x03
	byte currentByte = 0;
     a48:	1e 82       	std	Y+6, r1	; 0x06
	

	//Read until the sync bytes are received or we time out.
	//Throw away the 'garbage' bytes.
	while(!(previousByte == SyncByte1 && currentByte == SyncByte2) && status == 0)
     a4a:	1b c0       	rjmp	.+54     	; 0xa82 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x60>
	{
		previousByte = currentByte;
     a4c:	8e 81       	ldd	r24, Y+6	; 0x06
     a4e:	8b 83       	std	Y+3, r24	; 0x03
		status = serialDriver->receiveByte(currentByte);
     a50:	8b 89       	ldd	r24, Y+19	; 0x13
     a52:	9c 89       	ldd	r25, Y+20	; 0x14
     a54:	fc 01       	movw	r30, r24
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	08 96       	adiw	r24, 0x08	; 8
     a62:	fc 01       	movw	r30, r24
     a64:	20 81       	ld	r18, Z
     a66:	31 81       	ldd	r19, Z+1	; 0x01
     a68:	8b 89       	ldd	r24, Y+19	; 0x13
     a6a:	9c 89       	ldd	r25, Y+20	; 0x14
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	ae 01       	movw	r20, r28
     a74:	4a 5f       	subi	r20, 0xFA	; 250
     a76:	5f 4f       	sbci	r21, 0xFF	; 255
     a78:	ba 01       	movw	r22, r20
     a7a:	f9 01       	movw	r30, r18
     a7c:	19 95       	eicall
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01
	byte currentByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away the 'garbage' bytes.
	while(!(previousByte == SyncByte1 && currentByte == SyncByte2) && status == 0)
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	85 3b       	cpi	r24, 0xB5	; 181
     a86:	19 f4       	brne	.+6      	; 0xa8e <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x6c>
     a88:	8e 81       	ldd	r24, Y+6	; 0x06
     a8a:	82 36       	cpi	r24, 0x62	; 98
     a8c:	31 f0       	breq	.+12     	; 0xa9a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x78>
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	00 97       	sbiw	r24, 0x00	; 0
     a94:	11 f4       	brne	.+4      	; 0xa9a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x78>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x7a>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	88 23       	and	r24, r24
     a9e:	b1 f6       	brne	.-84     	; 0xa4c <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x2a>
		//TODO note:
		//While there is a timeout mechnism for waiting on the port, if a huge amount of
		//data arrived very rapidly and this kept processing the data, it would never timeout.
	}
	
	if (status == 0)
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	09 f0       	breq	.+2      	; 0xaaa <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x88>
     aa8:	c6 c0       	rjmp	.+396    	; 0xc36 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x214>
	{
		
		//once we have found a valid message, get the message ID
		byte msgType = 0;
     aaa:	1f 82       	std	Y+7, r1	; 0x07
		
		status = serialDriver->receiveByte(msgType);
     aac:	8b 89       	ldd	r24, Y+19	; 0x13
     aae:	9c 89       	ldd	r25, Y+20	; 0x14
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	fc 01       	movw	r30, r24
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	08 96       	adiw	r24, 0x08	; 8
     abe:	fc 01       	movw	r30, r24
     ac0:	20 81       	ld	r18, Z
     ac2:	31 81       	ldd	r19, Z+1	; 0x01
     ac4:	8b 89       	ldd	r24, Y+19	; 0x13
     ac6:	9c 89       	ldd	r25, Y+20	; 0x14
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	ae 01       	movw	r20, r28
     ad0:	49 5f       	subi	r20, 0xF9	; 249
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	ba 01       	movw	r22, r20
     ad6:	f9 01       	movw	r30, r18
     ad8:	19 95       	eicall
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0 && msgType == SystemTelemetryMessage::SystemTelemetryMessageType)
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	09 f0       	breq	.+2      	; 0xae8 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0xc6>
     ae6:	9e c0       	rjmp	.+316    	; 0xc24 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x202>
     ae8:	8f 81       	ldd	r24, Y+7	; 0x07
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	09 f0       	breq	.+2      	; 0xaf0 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0xce>
     aee:	9a c0       	rjmp	.+308    	; 0xc24 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x202>
		{
			byte messagePayload[SystemTelemetryMessage::MessageSize];
			
			messagePayload[0] = msgType;
     af0:	8f 81       	ldd	r24, Y+7	; 0x07
     af2:	88 87       	std	Y+8, r24	; 0x08
			
			
			//skip the first position since thats where the message type is located.
			for (int i = 1; i < SystemTelemetryMessage::MessageSize && status == 0; i++)
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	9d 83       	std	Y+5, r25	; 0x05
     afa:	8c 83       	std	Y+4, r24	; 0x04
     afc:	22 c0       	rjmp	.+68     	; 0xb42 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x120>
			{				
				status = serialDriver->receiveByte(messagePayload[i]);
     afe:	8b 89       	ldd	r24, Y+19	; 0x13
     b00:	9c 89       	ldd	r25, Y+20	; 0x14
     b02:	fc 01       	movw	r30, r24
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	fc 01       	movw	r30, r24
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	08 96       	adiw	r24, 0x08	; 8
     b10:	fc 01       	movw	r30, r24
     b12:	20 81       	ld	r18, Z
     b14:	31 81       	ldd	r19, Z+1	; 0x01
     b16:	ae 01       	movw	r20, r28
     b18:	48 5f       	subi	r20, 0xF8	; 248
     b1a:	5f 4f       	sbci	r21, 0xFF	; 255
     b1c:	8c 81       	ldd	r24, Y+4	; 0x04
     b1e:	9d 81       	ldd	r25, Y+5	; 0x05
     b20:	48 0f       	add	r20, r24
     b22:	59 1f       	adc	r21, r25
     b24:	8b 89       	ldd	r24, Y+19	; 0x13
     b26:	9c 89       	ldd	r25, Y+20	; 0x14
     b28:	fc 01       	movw	r30, r24
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	ba 01       	movw	r22, r20
     b30:	f9 01       	movw	r30, r18
     b32:	19 95       	eicall
     b34:	9a 83       	std	Y+2, r25	; 0x02
     b36:	89 83       	std	Y+1, r24	; 0x01
			
			messagePayload[0] = msgType;
			
			
			//skip the first position since thats where the message type is located.
			for (int i = 1; i < SystemTelemetryMessage::MessageSize && status == 0; i++)
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	9d 81       	ldd	r25, Y+5	; 0x05
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	9d 83       	std	Y+5, r25	; 0x05
     b40:	8c 83       	std	Y+4, r24	; 0x04
     b42:	8c 81       	ldd	r24, Y+4	; 0x04
     b44:	9d 81       	ldd	r25, Y+5	; 0x05
     b46:	87 30       	cpi	r24, 0x07	; 7
     b48:	91 05       	cpc	r25, r1
     b4a:	34 f4       	brge	.+12     	; 0xb58 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x136>
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	11 f4       	brne	.+4      	; 0xb58 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x136>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x138>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	88 23       	and	r24, r24
     b5c:	81 f6       	brne	.-96     	; 0xafe <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0xdc>
			{				
				status = serialDriver->receiveByte(messagePayload[i]);
			}
			
			if (status == 0)
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	09 f0       	breq	.+2      	; 0xb68 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x146>
     b66:	66 c0       	rjmp	.+204    	; 0xc34 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x212>
			{
				//Read the two checksum bytes
				byte messageChecksumA = 0;
     b68:	1f 86       	std	Y+15, r1	; 0x0f
				byte messageChecksumB = 0;
     b6a:	18 8a       	std	Y+16, r1	; 0x10
				byte calculatedChecksumA = 0;
     b6c:	19 8a       	std	Y+17, r1	; 0x11
				byte calculatedChecksumB = 0;
     b6e:	1a 8a       	std	Y+18, r1	; 0x12
							
				//TODO status is overwritten
				status = serialDriver->receiveByte(messageChecksumA);
     b70:	8b 89       	ldd	r24, Y+19	; 0x13
     b72:	9c 89       	ldd	r25, Y+20	; 0x14
     b74:	fc 01       	movw	r30, r24
     b76:	80 81       	ld	r24, Z
     b78:	91 81       	ldd	r25, Z+1	; 0x01
     b7a:	fc 01       	movw	r30, r24
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	08 96       	adiw	r24, 0x08	; 8
     b82:	fc 01       	movw	r30, r24
     b84:	20 81       	ld	r18, Z
     b86:	31 81       	ldd	r19, Z+1	; 0x01
     b88:	8b 89       	ldd	r24, Y+19	; 0x13
     b8a:	9c 89       	ldd	r25, Y+20	; 0x14
     b8c:	fc 01       	movw	r30, r24
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	ae 01       	movw	r20, r28
     b94:	41 5f       	subi	r20, 0xF1	; 241
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	ba 01       	movw	r22, r20
     b9a:	f9 01       	movw	r30, r18
     b9c:	19 95       	eicall
     b9e:	9a 83       	std	Y+2, r25	; 0x02
     ba0:	89 83       	std	Y+1, r24	; 0x01
				status = serialDriver->receiveByte(messageChecksumB);
     ba2:	8b 89       	ldd	r24, Y+19	; 0x13
     ba4:	9c 89       	ldd	r25, Y+20	; 0x14
     ba6:	fc 01       	movw	r30, r24
     ba8:	80 81       	ld	r24, Z
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	fc 01       	movw	r30, r24
     bae:	80 81       	ld	r24, Z
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	08 96       	adiw	r24, 0x08	; 8
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 81       	ld	r18, Z
     bb8:	31 81       	ldd	r19, Z+1	; 0x01
     bba:	8b 89       	ldd	r24, Y+19	; 0x13
     bbc:	9c 89       	ldd	r25, Y+20	; 0x14
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	ae 01       	movw	r20, r28
     bc6:	40 5f       	subi	r20, 0xF0	; 240
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	ba 01       	movw	r22, r20
     bcc:	f9 01       	movw	r30, r18
     bce:	19 95       	eicall
     bd0:	9a 83       	std	Y+2, r25	; 0x02
     bd2:	89 83       	std	Y+1, r24	; 0x01
				
				
				calculateChecksum(messagePayload, SystemTelemetryMessage::MessageSize, calculatedChecksumA, calculatedChecksumB);
     bd4:	ae 01       	movw	r20, r28
     bd6:	4e 5e       	subi	r20, 0xEE	; 238
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	9e 01       	movw	r18, r28
     bdc:	2f 5e       	subi	r18, 0xEF	; 239
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
     be0:	be 01       	movw	r22, r28
     be2:	68 5f       	subi	r22, 0xF8	; 248
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	8b 89       	ldd	r24, Y+19	; 0x13
     be8:	9c 89       	ldd	r25, Y+20	; 0x14
     bea:	8a 01       	movw	r16, r20
     bec:	47 e0       	ldi	r20, 0x07	; 7
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_>
				
				//verify that the checksum is correct
				if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
     bf4:	99 89       	ldd	r25, Y+17	; 0x11
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	98 17       	cp	r25, r24
     bfa:	79 f4       	brne	.+30     	; 0xc1a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x1f8>
     bfc:	9a 89       	ldd	r25, Y+18	; 0x12
     bfe:	88 89       	ldd	r24, Y+16	; 0x10
     c00:	98 17       	cp	r25, r24
     c02:	59 f4       	brne	.+22     	; 0xc1a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x1f8>
				{
					//build the message
					receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
     c04:	ce 01       	movw	r24, r28
     c06:	08 96       	adiw	r24, 0x08	; 8
     c08:	0e 94 f0 06 	call	0xde0	; 0xde0 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPc>
     c0c:	9c 01       	movw	r18, r24
     c0e:	8d 89       	ldd	r24, Y+21	; 0x15
     c10:	9e 89       	ldd	r25, Y+22	; 0x16
     c12:	fc 01       	movw	r30, r24
     c14:	31 83       	std	Z+1, r19	; 0x01
     c16:	20 83       	st	Z, r18
				}else
				{
					status = -3;
				}
			}
     c18:	0d c0       	rjmp	.+26     	; 0xc34 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x212>
				{
					//build the message
					receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
				}else
				{
					status = -3;
     c1a:	8d ef       	ldi	r24, 0xFD	; 253
     c1c:	9f ef       	ldi	r25, 0xFF	; 255
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
				}
			}
     c22:	08 c0       	rjmp	.+16     	; 0xc34 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x212>
		}else if (msgType != SystemTelemetryMessage::SystemTelemetryMessageType)
     c24:	8f 81       	ldd	r24, Y+7	; 0x07
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	31 f0       	breq	.+12     	; 0xc36 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x214>
		{
			status = -2;
     c2a:	8e ef       	ldi	r24, 0xFE	; 254
     c2c:	9f ef       	ldi	r25, 0xFF	; 255
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x214>
					receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
				}else
				{
					status = -3;
				}
			}
     c34:	00 00       	nop
		{
			status = -2;
		}
	}
	
	if (status != 0)
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	29 f0       	breq	.+10     	; 0xc48 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE+0x226>
	{
		receivedMessage = NULL;
     c3e:	8d 89       	ldd	r24, Y+21	; 0x15
     c40:	9e 89       	ldd	r25, Y+22	; 0x16
     c42:	fc 01       	movw	r30, r24
     c44:	11 82       	std	Z+1, r1	; 0x01
     c46:	10 82       	st	Z, r1
	}
	
	return status;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	66 96       	adiw	r28, 0x16	; 22
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(msgType) +
				sizeof(magX) +
				sizeof(magY) +
				sizeof(magZ);
			
				SystemTelemetryMessage():
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	1f 92       	push	r1
     c68:	1f 92       	push	r1
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
					magX(0),
					magY(0),
					magZ(0),
					msgType(SystemTelemetryMessageType)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	fc 01       	movw	r30, r24
     c78:	11 82       	std	Z+1, r1	; 0x01
     c7a:	10 82       	st	Z, r1
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	fc 01       	movw	r30, r24
     c82:	13 82       	std	Z+3, r1	; 0x03
     c84:	12 82       	std	Z+2, r1	; 0x02
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	fc 01       	movw	r30, r24
     c8c:	15 82       	std	Z+5, r1	; 0x05
     c8e:	14 82       	std	Z+4, r1	; 0x04
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	22 e0       	ldi	r18, 0x02	; 2
     c96:	fc 01       	movw	r30, r24
     c98:	26 83       	std	Z+6, r18	; 0x06
				{
				
				}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
     caa:	00 d0       	rcall	.+0      	; 0xcac <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9e 83       	std	Y+6, r25	; 0x06
     cb2:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
     cb4:	87 e0       	ldi	r24, 0x07	; 7
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_Znaj>
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	fc 01       	movw	r30, r24
     cce:	26 81       	ldd	r18, Z+6	; 0x06
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	9c 81       	ldd	r25, Y+4	; 0x04
     cd4:	fc 01       	movw	r30, r24
     cd6:	20 83       	st	Z, r18
	
	msgPtr++;
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magX, sizeof(magX));
     ce2:	2d 81       	ldd	r18, Y+5	; 0x05
     ce4:	3e 81       	ldd	r19, Y+6	; 0x06
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	42 e0       	ldi	r20, 0x02	; 2
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	b9 01       	movw	r22, r18
     cf0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <memcpy>
	
	msgPtr += sizeof(magX);
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	02 96       	adiw	r24, 0x02	; 2
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magY, sizeof(magY));
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	9c 01       	movw	r18, r24
     d04:	2e 5f       	subi	r18, 0xFE	; 254
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	42 e0       	ldi	r20, 0x02	; 2
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	b9 01       	movw	r22, r18
     d12:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <memcpy>
	
	msgPtr += sizeof(magY);
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	02 96       	adiw	r24, 0x02	; 2
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magZ, sizeof(magZ));
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	9c 01       	movw	r18, r24
     d26:	2c 5f       	subi	r18, 0xFC	; 252
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	42 e0       	ldi	r20, 0x02	; 2
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	b9 01       	movw	r22, r18
     d34:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <memcpy>
	
	return msg;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d3c:	26 96       	adiw	r28, 0x06	; 6
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x6>
     d54:	1f 92       	push	r1
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	7c 83       	std	Y+4, r23	; 0x04
     d60:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	a1 f1       	breq	.+104    	; 0xdd2 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x84>
	{
		msgType = message[0];
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	fc 01       	movw	r30, r24
     d70:	20 81       	ld	r18, Z
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	fc 01       	movw	r30, r24
     d78:	26 83       	std	Z+6, r18	; 0x06
		
		message++;
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9c 81       	ldd	r25, Y+4	; 0x04
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magX, message, sizeof(magX));
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	2b 81       	ldd	r18, Y+3	; 0x03
     d8a:	3c 81       	ldd	r19, Y+4	; 0x04
     d8c:	42 e0       	ldi	r20, 0x02	; 2
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	b9 01       	movw	r22, r18
     d92:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <memcpy>
		
		message += sizeof(magX);
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	02 96       	adiw	r24, 0x02	; 2
     d9c:	9c 83       	std	Y+4, r25	; 0x04
     d9e:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magY, message, sizeof(magY));
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	02 96       	adiw	r24, 0x02	; 2
     da6:	2b 81       	ldd	r18, Y+3	; 0x03
     da8:	3c 81       	ldd	r19, Y+4	; 0x04
     daa:	42 e0       	ldi	r20, 0x02	; 2
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	b9 01       	movw	r22, r18
     db0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <memcpy>
		
		message += sizeof(magY);
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	02 96       	adiw	r24, 0x02	; 2
     dba:	9c 83       	std	Y+4, r25	; 0x04
     dbc:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magZ, message, sizeof(magZ));
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	04 96       	adiw	r24, 0x04	; 4
     dc4:	2b 81       	ldd	r18, Y+3	; 0x03
     dc6:	3c 81       	ldd	r19, Y+4	; 0x04
     dc8:	42 e0       	ldi	r20, 0x02	; 2
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	b9 01       	movw	r22, r18
     dce:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <memcpy>
	}
}
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPc>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPc+0xa>
     dea:	1f 92       	push	r1
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
     df4:	87 e0       	ldi	r24, 0x07	; 7
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     dfc:	8c 01       	movw	r16, r24
     dfe:	c8 01       	movw	r24, r16
     e00:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
     e04:	1a 83       	std	Y+2, r17	; 0x02
     e06:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
     e08:	2b 81       	ldd	r18, Y+3	; 0x03
     e0a:	3c 81       	ldd	r19, Y+4	; 0x04
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	b9 01       	movw	r22, r18
     e12:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>
	
	return msg;
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	08 95       	ret

00000e2c <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>:
				byte *getBytes();
			
				void buildMessage(byte *message);
			
				int MagX() const { return magX; }
				void MagX(int val) { magX = val; }
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	00 d0       	rcall	.+0      	; 0xe32 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi+0x6>
     e32:	1f 92       	push	r1
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	7c 83       	std	Y+4, r23	; 0x04
     e3e:	6b 83       	std	Y+3, r22	; 0x03
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	2b 81       	ldd	r18, Y+3	; 0x03
     e46:	3c 81       	ldd	r19, Y+4	; 0x04
     e48:	fc 01       	movw	r30, r24
     e4a:	31 83       	std	Z+1, r19	; 0x01
     e4c:	20 83       	st	Z, r18
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>:
			
				int MagY() const { return magY; }
				void MagY(int val) { magY = val; }
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	00 d0       	rcall	.+0      	; 0xe62 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi+0x6>
     e62:	1f 92       	push	r1
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	7c 83       	std	Y+4, r23	; 0x04
     e6e:	6b 83       	std	Y+3, r22	; 0x03
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	2b 81       	ldd	r18, Y+3	; 0x03
     e76:	3c 81       	ldd	r19, Y+4	; 0x04
     e78:	fc 01       	movw	r30, r24
     e7a:	33 83       	std	Z+3, r19	; 0x03
     e7c:	22 83       	std	Z+2, r18	; 0x02
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>:
			
				int MagZ() const { return magZ; }
				void MagZ(int val) { magZ = val; }
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi+0x6>
     e92:	1f 92       	push	r1
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	7c 83       	std	Y+4, r23	; 0x04
     e9e:	6b 83       	std	Y+3, r22	; 0x03
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	2b 81       	ldd	r18, Y+3	; 0x03
     ea6:	3c 81       	ldd	r19, Y+4	; 0x04
     ea8:	fc 01       	movw	r30, r24
     eaa:	35 83       	std	Z+5, r19	; 0x05
     eac:	24 83       	std	Z+4, r18	; 0x04
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <_ZNK10helicopter5model11SystemModel7RawMagXEv>:
			
			int RawMagX() const { return rawMagX; }
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	1f 92       	push	r1
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	fc 01       	movw	r30, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <_ZNK10helicopter5model11SystemModel7RawMagYEv>:
			void RawMagX(int val) { rawMagX = val; }
			
			int RawMagY() const { return rawMagY; }
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	1f 92       	push	r1
     ee6:	1f 92       	push	r1
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	fc 01       	movw	r30, r24
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <_ZNK10helicopter5model11SystemModel7RawMagZEv>:
			void RawMagY(int val) { rawMagY = val; }
			
			int RawMagZ() const { return rawMagZ; }
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	1f 92       	push	r1
     f0a:	1f 92       	push	r1
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	fc 01       	movw	r30, r24
     f1a:	84 81       	ldd	r24, Z+4	; 0x04
     f1c:	95 81       	ldd	r25, Z+5	; 0x05
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>:

using namespace helicopter::model;


SystemTelemetryMessage *SystemModel::CreateTelemetryMessage()
{
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	00 d0       	rcall	.+0      	; 0xf32 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv+0xa>
     f32:	1f 92       	push	r1
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	9c 83       	std	Y+4, r25	; 0x04
     f3a:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
     f3c:	87 e0       	ldi	r24, 0x07	; 7
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
     f44:	8c 01       	movw	r16, r24
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
     f4c:	1a 83       	std	Y+2, r17	; 0x02
     f4e:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagX(RawMagX());
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZNK10helicopter5model11SystemModel7RawMagXEv>
     f58:	9c 01       	movw	r18, r24
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	b9 01       	movw	r22, r18
     f60:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>
	message->MagY(RawMagY());
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZNK10helicopter5model11SystemModel7RawMagYEv>
     f6c:	9c 01       	movw	r18, r24
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	b9 01       	movw	r22, r18
     f74:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>
	message->MagZ(RawMagZ());
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZNK10helicopter5model11SystemModel7RawMagZEv>
     f80:	9c 01       	movw	r18, r24
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	b9 01       	movw	r22, r18
     f88:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>
	
	return message;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret

00000fa2 <_ZN10helicopter5tasks4Task8getDelayEv>:
				Task (int delay, int period);
				virtual void init(){;}
				virtual void runTask();
				
					
				int getDelay()
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	1f 92       	push	r1
     fa8:	1f 92       	push	r1
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	fc 01       	movw	r30, r24
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
				}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	1f 92       	push	r1
     fcc:	1f 92       	push	r1
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	fc 01       	movw	r30, r24
     fdc:	84 81       	ldd	r24, Z+4	; 0x04
     fde:	95 81       	ldd	r25, Z+5	; 0x05
				}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	00 d0       	rcall	.+0      	; 0xff0 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
     ff0:	1f 92       	push	r1
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	7c 83       	std	Y+4, r23	; 0x04
     ffc:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	2b 81       	ldd	r18, Y+3	; 0x03
    1004:	3c 81       	ldd	r19, Y+4	; 0x04
    1006:	fc 01       	movw	r30, r24
    1008:	33 83       	std	Z+3, r19	; 0x03
    100a:	22 83       	std	Z+2, r18	; 0x02
				}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	1f 92       	push	r1
    1020:	1f 92       	push	r1
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	fc 01       	movw	r30, r24
    1030:	86 81       	ldd	r24, Z+6	; 0x06
				}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	00 d0       	rcall	.+0      	; 0x1042 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	2b 81       	ldd	r18, Y+3	; 0x03
    1052:	fc 01       	movw	r30, r24
    1054:	26 83       	std	Z+6, r18	; 0x06
				}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				void reduceDelay()
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	1f 92       	push	r1
    1068:	1f 92       	push	r1
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	fc 01       	movw	r30, r24
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	9c 01       	movw	r18, r24
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	31 09       	sbc	r19, r1
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	fc 01       	movw	r30, r24
    1088:	33 83       	std	Z+3, r19	; 0x03
    108a:	22 83       	std	Z+2, r18	; 0x02
				}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for task execution.
				*/
				void start();
				
				int getNumOfTasks()
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	1f 92       	push	r1
    109c:	1f 92       	push	r1
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	fc 01       	movw	r30, r24
    10ac:	84 89       	ldd	r24, Z+20	; 0x14
    10ae:	95 89       	ldd	r25, Z+21	; 0x15
				}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	1f 92       	push	r1
    10c0:	1f 92       	push	r1
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    10e4:	80 91 3c 02 	lds	r24, 0x023C
    10e8:	90 91 3d 02 	lds	r25, 0x023D
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	81 f4       	brne	.+32     	; 0x1110 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x38>
	{
		//scheduler = new Scheduler(124, 8);
		scheduler = new Scheduler(TARGET_TIMER_COUNT, TIMER_PRESCALER);
    10f0:	8a e1       	ldi	r24, 0x1A	; 26
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Znwj>
    10f8:	8c 01       	movw	r16, r24
    10fa:	40 e4       	ldi	r20, 0x40	; 64
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	62 ee       	ldi	r22, 0xE2	; 226
    1100:	74 e0       	ldi	r23, 0x04	; 4
    1102:	c8 01       	movw	r24, r16
    1104:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>
    1108:	10 93 3d 02 	sts	0x023D, r17
    110c:	00 93 3c 02 	sts	0x023C, r16
	}
	
	return scheduler;
    1110:	80 91 3c 02 	lds	r24, 0x023C
    1114:	90 91 3d 02 	lds	r25, 0x023D
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>:

Scheduler::Scheduler(int targetTimerCount, PRESCALER prescale)
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	00 d0       	rcall	.+0      	; 0x1128 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x6>
    1128:	00 d0       	rcall	.+0      	; 0x112a <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x8>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	7c 83       	std	Y+4, r23	; 0x04
    1134:	6b 83       	std	Y+3, r22	; 0x03
    1136:	5e 83       	std	Y+6, r21	; 0x06
    1138:	4d 83       	std	Y+5, r20	; 0x05
{
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	2b 81       	ldd	r18, Y+3	; 0x03
    1140:	3c 81       	ldd	r19, Y+4	; 0x04
    1142:	fc 01       	movw	r30, r24
    1144:	37 8b       	std	Z+23, r19	; 0x17
    1146:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescale;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	2d 81       	ldd	r18, Y+5	; 0x05
    114e:	3e 81       	ldd	r19, Y+6	; 0x06
    1150:	fc 01       	movw	r30, r24
    1152:	31 8f       	std	Z+25, r19	; 0x19
    1154:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	fc 01       	movw	r30, r24
    115c:	15 8a       	std	Z+21, r1	; 0x15
    115e:	14 8a       	std	Z+20, r1	; 0x14
}
    1160:	26 96       	adiw	r28, 0x06	; 6
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
{
	
}

int Scheduler::addTask(Task *task)
{
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	00 d0       	rcall	.+0      	; 0x1178 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    1178:	1f 92       	push	r1
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	7c 83       	std	Y+4, r23	; 0x04
    1184:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	fc 01       	movw	r30, r24
    118c:	84 89       	ldd	r24, Z+20	; 0x14
    118e:	95 89       	ldd	r25, Z+21	; 0x15
    1190:	8a 30       	cpi	r24, 0x0A	; 10
    1192:	91 05       	cpc	r25, r1
    1194:	04 f5       	brge	.+64     	; 0x11d6 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	fc 01       	movw	r30, r24
    119c:	84 89       	ldd	r24, Z+20	; 0x14
    119e:	95 89       	ldd	r25, Z+21	; 0x15
    11a0:	29 81       	ldd	r18, Y+1	; 0x01
    11a2:	3a 81       	ldd	r19, Y+2	; 0x02
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	82 0f       	add	r24, r18
    11aa:	93 1f       	adc	r25, r19
    11ac:	2b 81       	ldd	r18, Y+3	; 0x03
    11ae:	3c 81       	ldd	r19, Y+4	; 0x04
    11b0:	fc 01       	movw	r30, r24
    11b2:	31 83       	std	Z+1, r19	; 0x01
    11b4:	20 83       	st	Z, r18
		numOfTasks++;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	fc 01       	movw	r30, r24
    11bc:	84 89       	ldd	r24, Z+20	; 0x14
    11be:	95 89       	ldd	r25, Z+21	; 0x15
    11c0:	9c 01       	movw	r18, r24
    11c2:	2f 5f       	subi	r18, 0xFF	; 255
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	fc 01       	movw	r30, r24
    11cc:	35 8b       	std	Z+21, r19	; 0x15
    11ce:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    11ee:	1f 92       	push	r1
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9c 83       	std	Y+4, r25	; 0x04
    11f6:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    11f8:	1a 82       	std	Y+2, r1	; 0x02
    11fa:	19 82       	std	Y+1, r1	; 0x01
    11fc:	24 c0       	rjmp	.+72     	; 0x1246 <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    11fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1200:	3c 81       	ldd	r19, Y+4	; 0x04
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	fc 01       	movw	r30, r24
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	02 96       	adiw	r24, 0x02	; 2
    121c:	fc 01       	movw	r30, r24
    121e:	20 81       	ld	r18, Z
    1220:	31 81       	ldd	r19, Z+1	; 0x01
    1222:	4b 81       	ldd	r20, Y+3	; 0x03
    1224:	5c 81       	ldd	r21, Y+4	; 0x04
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	84 0f       	add	r24, r20
    1230:	95 1f       	adc	r25, r21
    1232:	fc 01       	movw	r30, r24
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	f9 01       	movw	r30, r18
    123a:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	fc 01       	movw	r30, r24
    124c:	24 89       	ldd	r18, Z+20	; 0x14
    124e:	35 89       	ldd	r19, Z+21	; 0x15
    1250:	41 e0       	ldi	r20, 0x01	; 1
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	82 17       	cp	r24, r18
    1258:	93 07       	cpc	r25, r19
    125a:	0c f0       	brlt	.+2      	; 0x125e <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	44 23       	and	r20, r20
    1260:	71 f6       	brne	.-100    	; 0x11fe <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    1262:	88 e8       	ldi	r24, 0x88	; 136
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2b 81       	ldd	r18, Y+3	; 0x03
    1268:	3c 81       	ldd	r19, Y+4	; 0x04
    126a:	f9 01       	movw	r30, r18
    126c:	26 89       	ldd	r18, Z+22	; 0x16
    126e:	37 89       	ldd	r19, Z+23	; 0x17
    1270:	fc 01       	movw	r30, r24
    1272:	31 83       	std	Z+1, r19	; 0x01
    1274:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    1276:	81 e8       	ldi	r24, 0x81	; 129
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	21 e8       	ldi	r18, 0x81	; 129
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	f9 01       	movw	r30, r18
    1280:	20 81       	ld	r18, Z
    1282:	28 60       	ori	r18, 0x08	; 8
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    1288:	8f e6       	ldi	r24, 0x6F	; 111
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	2f e6       	ldi	r18, 0x6F	; 111
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	20 81       	ld	r18, Z
    1294:	22 60       	ori	r18, 0x02	; 2
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    129a:	78 94       	sei
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    12ba:	1c 82       	std	Y+4, r1	; 0x04
    12bc:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    12be:	1a 82       	std	Y+2, r1	; 0x02
    12c0:	19 82       	std	Y+1, r1	; 0x01
    12c2:	2f c0       	rjmp	.+94     	; 0x1322 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x78>
	{
		task = scheduler->getTasks()[i];
    12c4:	80 91 3c 02 	lds	r24, 0x023C
    12c8:	90 91 3d 02 	lds	r25, 0x023D
    12cc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    12d0:	9c 01       	movw	r18, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	82 0f       	add	r24, r18
    12dc:	93 1f       	adc	r25, r19
    12de:	fc 01       	movw	r30, r24
    12e0:	80 81       	ld	r24, Z
    12e2:	91 81       	ldd	r25, Z+1	; 0x01
    12e4:	9c 83       	std	Y+4, r25	; 0x04
    12e6:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	0e 94 0d 08 	call	0x101a	; 0x101a <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    12f0:	88 23       	and	r24, r24
    12f2:	91 f0       	breq	.+36     	; 0x1318 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
		{
			task->setIsReadyToRun(false);
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	fc 01       	movw	r30, r24
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	04 96       	adiw	r24, 0x04	; 4
    130a:	fc 01       	movw	r30, r24
    130c:	20 81       	ld	r18, Z
    130e:	31 81       	ldd	r19, Z+1	; 0x01
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	f9 01       	movw	r30, r18
    1316:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	fc 01       	movw	r30, r24
    1328:	24 89       	ldd	r18, Z+20	; 0x14
    132a:	35 89       	ldd	r19, Z+21	; 0x15
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	82 17       	cp	r24, r18
    1334:	93 07       	cpc	r25, r19
    1336:	0c f0       	brlt	.+2      	; 0x133a <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x90>
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	44 23       	and	r20, r20
    133c:	19 f6       	brne	.-122    	; 0x12c4 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
			task->setIsReadyToRun(false);
			task->runTask();
		}
	}
	
	set_sleep_mode(SLEEP_MODE_IDLE);
    133e:	83 e5       	ldi	r24, 0x53	; 83
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	23 e5       	ldi	r18, 0x53	; 83
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	f9 01       	movw	r30, r18
    1348:	20 81       	ld	r18, Z
    134a:	21 7f       	andi	r18, 0xF1	; 241
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
	sleep_mode();
    1350:	83 e5       	ldi	r24, 0x53	; 83
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	23 e5       	ldi	r18, 0x53	; 83
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	21 60       	ori	r18, 0x01	; 1
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
    1362:	88 95       	sleep
    1364:	83 e5       	ldi	r24, 0x53	; 83
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	23 e5       	ldi	r18, 0x53	; 83
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	f9 01       	movw	r30, r18
    136e:	20 81       	ld	r18, Z
    1370:	2e 7f       	andi	r18, 0xFE	; 254
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
}
    1376:	26 96       	adiw	r28, 0x06	; 6
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	1f 92       	push	r1
    138e:	1f 92       	push	r1
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
	switch(this->prescaler)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	fc 01       	movw	r30, r24
    139e:	80 8d       	ldd	r24, Z+24	; 0x18
    13a0:	91 8d       	ldd	r25, Z+25	; 0x19
    13a2:	80 34       	cpi	r24, 0x40	; 64
    13a4:	91 05       	cpc	r25, r1
    13a6:	39 f1       	breq	.+78     	; 0x13f6 <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    13a8:	81 34       	cpi	r24, 0x41	; 65
    13aa:	91 05       	cpc	r25, r1
    13ac:	3c f4       	brge	.+14     	; 0x13bc <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	69 f0       	breq	.+26     	; 0x13ce <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	91 05       	cpc	r25, r1
    13b8:	a1 f0       	breq	.+40     	; 0x13e2 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    13ba:	3b c0       	rjmp	.+118    	; 0x1432 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    13bc:	81 15       	cp	r24, r1
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	9f 07       	cpc	r25, r31
    13c2:	19 f1       	breq	.+70     	; 0x140a <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    13c4:	81 15       	cp	r24, r1
    13c6:	24 e0       	ldi	r18, 0x04	; 4
    13c8:	92 07       	cpc	r25, r18
    13ca:	49 f1       	breq	.+82     	; 0x141e <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    13cc:	32 c0       	rjmp	.+100    	; 0x1432 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    13ce:	81 e8       	ldi	r24, 0x81	; 129
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	21 e8       	ldi	r18, 0x81	; 129
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	f9 01       	movw	r30, r18
    13d8:	20 81       	ld	r18, Z
    13da:	21 60       	ori	r18, 0x01	; 1
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
			break;
    13e0:	31 c0       	rjmp	.+98     	; 0x1444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    13e2:	81 e8       	ldi	r24, 0x81	; 129
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	21 e8       	ldi	r18, 0x81	; 129
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	f9 01       	movw	r30, r18
    13ec:	20 81       	ld	r18, Z
    13ee:	22 60       	ori	r18, 0x02	; 2
    13f0:	fc 01       	movw	r30, r24
    13f2:	20 83       	st	Z, r18
			break;
    13f4:	27 c0       	rjmp	.+78     	; 0x1444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    13f6:	81 e8       	ldi	r24, 0x81	; 129
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	21 e8       	ldi	r18, 0x81	; 129
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	f9 01       	movw	r30, r18
    1400:	20 81       	ld	r18, Z
    1402:	23 60       	ori	r18, 0x03	; 3
    1404:	fc 01       	movw	r30, r24
    1406:	20 83       	st	Z, r18
			break;
    1408:	1d c0       	rjmp	.+58     	; 0x1444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    140a:	81 e8       	ldi	r24, 0x81	; 129
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	21 e8       	ldi	r18, 0x81	; 129
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	f9 01       	movw	r30, r18
    1414:	20 81       	ld	r18, Z
    1416:	24 60       	ori	r18, 0x04	; 4
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
			break;
    141c:	13 c0       	rjmp	.+38     	; 0x1444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    141e:	81 e8       	ldi	r24, 0x81	; 129
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	21 e8       	ldi	r18, 0x81	; 129
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	20 81       	ld	r18, Z
    142a:	25 60       	ori	r18, 0x05	; 5
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
			break;
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    1432:	81 e8       	ldi	r24, 0x81	; 129
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	21 e8       	ldi	r18, 0x81	; 129
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	f9 01       	movw	r30, r18
    143c:	20 81       	ld	r18, Z
    143e:	21 60       	ori	r18, 0x01	; 1
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
	}
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    144e:	1f 92       	push	r1
    1450:	0f 92       	push	r0
    1452:	00 90 5f 00 	lds	r0, 0x005F
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	00 90 5b 00 	lds	r0, 0x005B
    145e:	0f 92       	push	r0
    1460:	2f 93       	push	r18
    1462:	3f 93       	push	r19
    1464:	4f 93       	push	r20
    1466:	5f 93       	push	r21
    1468:	6f 93       	push	r22
    146a:	7f 93       	push	r23
    146c:	8f 93       	push	r24
    146e:	9f 93       	push	r25
    1470:	af 93       	push	r26
    1472:	bf 93       	push	r27
    1474:	ef 93       	push	r30
    1476:	ff 93       	push	r31
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	00 d0       	rcall	.+0      	; 0x147e <__vector_17+0x30>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <__vector_17+0x32>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	Scheduler *scheduler = Scheduler::getScheduler();
    1484:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    148c:	1e 82       	std	Y+6, r1	; 0x06
    148e:	1d 82       	std	Y+5, r1	; 0x05
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1490:	1a 82       	std	Y+2, r1	; 0x02
    1492:	19 82       	std	Y+1, r1	; 0x01
    1494:	33 c0       	rjmp	.+102    	; 0x14fc <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    149e:	9c 01       	movw	r18, r24
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	82 0f       	add	r24, r18
    14aa:	93 1f       	adc	r25, r19
    14ac:	fc 01       	movw	r30, r24
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN10helicopter5tasks4Task8getDelayEv>
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <__vector_17+0x78>
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	22 23       	and	r18, r18
    14c8:	81 f0       	breq	.+32     	; 0x14ea <__vector_17+0x9c>
		{
			task->setIsReadyToRun(true);
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN10helicopter5tasks4Task9getPeriodEv>
    14dc:	9c 01       	movw	r18, r24
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	b9 01       	movw	r22, r18
    14e4:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN10helicopter5tasks4Task8setDelayEi>
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN10helicopter5tasks4Task11reduceDelayEv>
{
	Scheduler *scheduler = Scheduler::getScheduler();
	
	Task *task = NULL;
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    1504:	9c 01       	movw	r18, r24
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	82 17       	cp	r24, r18
    150e:	93 07       	cpc	r25, r19
    1510:	0c f0       	brlt	.+2      	; 0x1514 <__vector_17+0xc6>
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	44 23       	and	r20, r20
    1516:	09 f0       	breq	.+2      	; 0x151a <__vector_17+0xcc>
    1518:	be cf       	rjmp	.-132    	; 0x1496 <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    151a:	26 96       	adiw	r28, 0x06	; 6
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	7f 91       	pop	r23
    1538:	6f 91       	pop	r22
    153a:	5f 91       	pop	r21
    153c:	4f 91       	pop	r20
    153e:	3f 91       	pop	r19
    1540:	2f 91       	pop	r18
    1542:	0f 90       	pop	r0
    1544:	00 92 5b 00 	sts	0x005B, r0
    1548:	0f 90       	pop	r0
    154a:	00 92 5f 00 	sts	0x005F, r0
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <_ZN10helicopter5tasks4Task4initEv>:
			protected:
				virtual void runTaskImpl(){;}
				
			public:
				Task (int delay, int period);
				virtual void init(){;}
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	1f 92       	push	r1
    155a:	1f 92       	push	r1
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
					msgType(SystemTelemetryMessageType)
				{
				
				}
			
				~SystemTelemetryMessage() {}
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	1f 92       	push	r1
    1574:	1f 92       	push	r1
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret

00001588 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>:
			
				byte *getBytes();
			
				void buildMessage(byte *message);
			
				int MagX() const { return magX; }
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	1f 92       	push	r1
    158e:	1f 92       	push	r1
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	fc 01       	movw	r30, r24
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>:
				void MagX(int val) { magX = val; }
			
				int MagY() const { return magY; }
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	1f 92       	push	r1
    15b2:	1f 92       	push	r1
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9a 83       	std	Y+2, r25	; 0x02
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	9a 81       	ldd	r25, Y+2	; 0x02
    15c0:	fc 01       	movw	r30, r24
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>:
				void MagY(int val) { magY = val; }
			
				int MagZ() const { return magZ; }
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	1f 92       	push	r1
    15d6:	1f 92       	push	r1
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	fc 01       	movw	r30, r24
    15e6:	84 81       	ldd	r24, Z+4	; 0x04
    15e8:	95 81       	ldd	r25, Z+5	; 0x05
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <_ZN10helicopter5model11SystemModel7RawMagXEi>:
			{
				
			}
			
			int RawMagX() const { return rawMagX; }
			void RawMagX(int val) { rawMagX = val; }
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <_ZN10helicopter5model11SystemModel7RawMagXEi+0x6>
    15fa:	1f 92       	push	r1
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	7c 83       	std	Y+4, r23	; 0x04
    1606:	6b 83       	std	Y+3, r22	; 0x03
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	fc 01       	movw	r30, r24
    1612:	31 83       	std	Z+1, r19	; 0x01
    1614:	20 83       	st	Z, r18
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <_ZN10helicopter5model11SystemModel7RawMagYEi>:
			
			int RawMagY() const { return rawMagY; }
			void RawMagY(int val) { rawMagY = val; }
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	00 d0       	rcall	.+0      	; 0x162a <_ZN10helicopter5model11SystemModel7RawMagYEi+0x6>
    162a:	1f 92       	push	r1
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	7c 83       	std	Y+4, r23	; 0x04
    1636:	6b 83       	std	Y+3, r22	; 0x03
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	fc 01       	movw	r30, r24
    1642:	33 83       	std	Z+3, r19	; 0x03
    1644:	22 83       	std	Z+2, r18	; 0x02
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <_ZN10helicopter5model11SystemModel7RawMagZEi>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	00 d0       	rcall	.+0      	; 0x165a <_ZN10helicopter5model11SystemModel7RawMagZEi+0x6>
    165a:	1f 92       	push	r1
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	7c 83       	std	Y+4, r23	; 0x04
    1666:	6b 83       	std	Y+3, r22	; 0x03
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	2b 81       	ldd	r18, Y+3	; 0x03
    166e:	3c 81       	ldd	r19, Y+4	; 0x04
    1670:	fc 01       	movw	r30, r24
    1672:	35 83       	std	Z+5, r19	; 0x05
    1674:	24 83       	std	Z+4, r18	; 0x04
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks::misctasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	2a 97       	sbiw	r28, 0x0a	; 10
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	7c 83       	std	Y+4, r23	; 0x04
    16a2:	6b 83       	std	Y+3, r22	; 0x03
    16a4:	5e 83       	std	Y+6, r21	; 0x06
    16a6:	4d 83       	std	Y+5, r20	; 0x05
    16a8:	38 87       	std	Y+8, r19	; 0x08
    16aa:	2f 83       	std	Y+7, r18	; 0x07
    16ac:	1a 87       	std	Y+10, r17	; 0x0a
    16ae:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	49 85       	ldd	r20, Y+9	; 0x09
    16b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    16b8:	2f 81       	ldd	r18, Y+7	; 0x07
    16ba:	38 85       	ldd	r19, Y+8	; 0x08
    16bc:	b9 01       	movw	r22, r18
    16be:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN10helicopter5tasks4TaskC1Eii>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	22 e2       	ldi	r18, 0x22	; 34
    16c8:	32 e0       	ldi	r19, 0x02	; 2
    16ca:	fc 01       	movw	r30, r24
    16cc:	31 83       	std	Z+1, r19	; 0x01
    16ce:	20 83       	st	Z, r18
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	fc 01       	movw	r30, r24
    16da:	30 87       	std	Z+8, r19	; 0x08
    16dc:	27 83       	std	Z+7, r18	; 0x07
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	2d 81       	ldd	r18, Y+5	; 0x05
    16e4:	3e 81       	ldd	r19, Y+6	; 0x06
    16e6:	fc 01       	movw	r30, r24
    16e8:	32 87       	std	Z+10, r19	; 0x0a
    16ea:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    16ec:	2a 96       	adiw	r28, 0x0a	; 10
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	08 95       	ret

00001702 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>:


void SimTelemetryTask::runTaskImpl() 
{
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	00 d0       	rcall	.+0      	; 0x170c <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xa>
    170c:	00 d0       	rcall	.+0      	; 0x170e <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xc>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
	
	PORTA |= (1<<PA5);
    1716:	82 e2       	ldi	r24, 0x22	; 34
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	22 e2       	ldi	r18, 0x22	; 34
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	f9 01       	movw	r30, r18
    1720:	20 81       	ld	r18, Z
    1722:	20 62       	ori	r18, 0x20	; 32
    1724:	fc 01       	movw	r30, r24
    1726:	20 83       	st	Z, r18
	
	
	
	//Use the radio interface to get the telemetry message from the simulator
	SystemTelemetryMessage *message = NULL;
    1728:	1c 82       	std	Y+4, r1	; 0x04
    172a:	1b 82       	std	Y+3, r1	; 0x03
	
	//TODO: keep in mind that the message received might not have been received in the
	//expected order. I.e. this message might actually be a different type of message.
	//so we should use more of a pub sub model. This works for now though since this is the
	//only message.
	if (radioInterface->receive(message) == 0 && message != NULL)
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	fc 01       	movw	r30, r24
    1732:	87 81       	ldd	r24, Z+7	; 0x07
    1734:	90 85       	ldd	r25, Z+8	; 0x08
    1736:	9e 01       	movw	r18, r28
    1738:	2d 5f       	subi	r18, 0xFD	; 253
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	b9 01       	movw	r22, r18
    173e:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages22SystemTelemetryMessageE>
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	31 f4       	brne	.+12     	; 0x1752 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x50>
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	11 f0       	breq	.+4      	; 0x1752 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x50>
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x52>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	88 23       	and	r24, r24
    1756:	b1 f1       	breq	.+108    	; 0x17c4 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xc2>
	{
		SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
			
		//Update the model using the new data received from the simulator.
		model->RawMagX(telemMsg->MagX());
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>
    1768:	9c 01       	movw	r18, r24
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	fc 01       	movw	r30, r24
    1770:	81 85       	ldd	r24, Z+9	; 0x09
    1772:	92 85       	ldd	r25, Z+10	; 0x0a
    1774:	b9 01       	movw	r22, r18
    1776:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN10helicopter5model11SystemModel7RawMagXEi>
		model->RawMagY(telemMsg->MagY());
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>
    1782:	9c 01       	movw	r18, r24
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	fc 01       	movw	r30, r24
    178a:	81 85       	ldd	r24, Z+9	; 0x09
    178c:	92 85       	ldd	r25, Z+10	; 0x0a
    178e:	b9 01       	movw	r22, r18
    1790:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN10helicopter5model11SystemModel7RawMagYEi>
		model->RawMagZ(telemMsg->MagZ());
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>
    179c:	9c 01       	movw	r18, r24
    179e:	8d 81       	ldd	r24, Y+5	; 0x05
    17a0:	9e 81       	ldd	r25, Y+6	; 0x06
    17a2:	fc 01       	movw	r30, r24
    17a4:	81 85       	ldd	r24, Z+9	; 0x09
    17a6:	92 85       	ldd	r25, Z+10	; 0x0a
    17a8:	b9 01       	movw	r22, r18
    17aa:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_ZN10helicopter5model11SystemModel7RawMagZEi>
		
		delete message;
    17ae:	0b 81       	ldd	r16, Y+3	; 0x03
    17b0:	1c 81       	ldd	r17, Y+4	; 0x04
    17b2:	01 15       	cp	r16, r1
    17b4:	11 05       	cpc	r17, r1
    17b6:	31 f0       	breq	.+12     	; 0x17c4 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xc2>
    17b8:	c8 01       	movw	r24, r16
    17ba:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    17be:	c8 01       	movw	r24, r16
    17c0:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZdlPv>
	}
	
	
	PORTA &= ~(1<<PA5);
    17c4:	82 e2       	ldi	r24, 0x22	; 34
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	22 e2       	ldi	r18, 0x22	; 34
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	20 81       	ld	r18, Z
    17d0:	2f 7d       	andi	r18, 0xDF	; 223
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
	
}
    17d6:	26 96       	adiw	r28, 0x06	; 6
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				int delay;
				int period;
				bool isReadyToRun;
				
			protected:
				virtual void runTaskImpl(){;}
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	1f 92       	push	r1
    17f2:	1f 92       	push	r1
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	00 d0       	rcall	.+0      	; 0x180c <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	7c 83       	std	Y+4, r23	; 0x04
    1818:	6b 83       	std	Y+3, r22	; 0x03
    181a:	5e 83       	std	Y+6, r21	; 0x06
    181c:	4d 83       	std	Y+5, r20	; 0x05
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	2c e2       	ldi	r18, 0x2C	; 44
    1824:	32 e0       	ldi	r19, 0x02	; 2
    1826:	fc 01       	movw	r30, r24
    1828:	31 83       	std	Z+1, r19	; 0x01
    182a:	20 83       	st	Z, r18
{
	this->delay = delay;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	2b 81       	ldd	r18, Y+3	; 0x03
    1832:	3c 81       	ldd	r19, Y+4	; 0x04
    1834:	fc 01       	movw	r30, r24
    1836:	33 83       	std	Z+3, r19	; 0x03
    1838:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	2d 81       	ldd	r18, Y+5	; 0x05
    1840:	3e 81       	ldd	r19, Y+6	; 0x06
    1842:	fc 01       	movw	r30, r24
    1844:	35 83       	std	Z+5, r19	; 0x05
    1846:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	fc 01       	movw	r30, r24
    184e:	16 82       	std	Z+6, r1	; 0x06
}
    1850:	26 96       	adiw	r28, 0x06	; 6
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	1f 92       	push	r1
    1868:	1f 92       	push	r1
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    1872:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	fc 01       	movw	r30, r24
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	fc 01       	movw	r30, r24
    1880:	20 81       	ld	r18, Z
    1882:	31 81       	ldd	r19, Z+1	; 0x01
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	f9 01       	movw	r30, r18
    188a:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    188c:	78 94       	sei
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	2a 97       	sbiw	r28, 0x0a	; 10
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	7c 83       	std	Y+4, r23	; 0x04
    18b6:	6b 83       	std	Y+3, r22	; 0x03
    18b8:	5e 83       	std	Y+6, r21	; 0x06
    18ba:	4d 83       	std	Y+5, r20	; 0x05
    18bc:	38 87       	std	Y+8, r19	; 0x08
    18be:	2f 83       	std	Y+7, r18	; 0x07
    18c0:	1a 87       	std	Y+10, r17	; 0x0a
    18c2:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	49 85       	ldd	r20, Y+9	; 0x09
    18ca:	5a 85       	ldd	r21, Y+10	; 0x0a
    18cc:	2f 81       	ldd	r18, Y+7	; 0x07
    18ce:	38 85       	ldd	r19, Y+8	; 0x08
    18d0:	b9 01       	movw	r22, r18
    18d2:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN10helicopter5tasks4TaskC1Eii>
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	26 e3       	ldi	r18, 0x36	; 54
    18dc:	32 e0       	ldi	r19, 0x02	; 2
    18de:	fc 01       	movw	r30, r24
    18e0:	31 83       	std	Z+1, r19	; 0x01
    18e2:	20 83       	st	Z, r18
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ea:	3c 81       	ldd	r19, Y+4	; 0x04
    18ec:	fc 01       	movw	r30, r24
    18ee:	30 87       	std	Z+8, r19	; 0x08
    18f0:	27 83       	std	Z+7, r18	; 0x07
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	2d 81       	ldd	r18, Y+5	; 0x05
    18f8:	3e 81       	ldd	r19, Y+6	; 0x06
    18fa:	fc 01       	movw	r30, r24
    18fc:	32 87       	std	Z+10, r19	; 0x0a
    18fe:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1900:	2a 96       	adiw	r28, 0x0a	; 10
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	00 d0       	rcall	.+0      	; 0x1920 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0xa>
    1920:	1f 92       	push	r1
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = model->CreateTelemetryMessage();
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	fc 01       	movw	r30, r24
    1930:	81 85       	ldd	r24, Z+9	; 0x09
    1932:	92 85       	ldd	r25, Z+10	; 0x0a
    1934:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
	message->MagY(32);
	message->MagZ(31);
	*/
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	fc 01       	movw	r30, r24
    1942:	87 81       	ldd	r24, Z+7	; 0x07
    1944:	90 85       	ldd	r25, Z+8	; 0x08
    1946:	29 81       	ldd	r18, Y+1	; 0x01
    1948:	3a 81       	ldd	r19, Y+2	; 0x02
    194a:	b9 01       	movw	r22, r18
    194c:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages22SystemTelemetryMessageE>
	
	delete message;
    1950:	09 81       	ldd	r16, Y+1	; 0x01
    1952:	1a 81       	ldd	r17, Y+2	; 0x02
    1954:	01 15       	cp	r16, r1
    1956:	11 05       	cpc	r17, r1
    1958:	31 f0       	breq	.+12     	; 0x1966 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x50>
    195a:	c8 01       	movw	r24, r16
    195c:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    1960:	c8 01       	movw	r24, r16
    1962:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZdlPv>
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret

00001978 <_Znwj>:
 *  Author: HP User
 */ 
#include <commonheader.h>

void * operator new(size_t size)
{
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	1f 92       	push	r1
    197e:	1f 92       	push	r1
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <malloc>
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <_ZdlPv>:

void operator delete(void * ptr)
{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	1f 92       	push	r1
    19a0:	1f 92       	push	r1
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	21 f0       	breq	.+8      	; 0x19ba <_ZdlPv+0x20>
	{
		free(ptr);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <free>
	}
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <_Znaj>:

void * operator new[](size_t size)
{
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	1f 92       	push	r1
    19ca:	1f 92       	push	r1
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <malloc>
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <__fixunssfsi>:
    19e6:	ac d0       	rcall	.+344    	; 0x1b40 <__fp_splitA>
    19e8:	88 f0       	brcs	.+34     	; 0x1a0c <__fixunssfsi+0x26>
    19ea:	9f 57       	subi	r25, 0x7F	; 127
    19ec:	90 f0       	brcs	.+36     	; 0x1a12 <__fixunssfsi+0x2c>
    19ee:	b9 2f       	mov	r27, r25
    19f0:	99 27       	eor	r25, r25
    19f2:	b7 51       	subi	r27, 0x17	; 23
    19f4:	a0 f0       	brcs	.+40     	; 0x1a1e <__fixunssfsi+0x38>
    19f6:	d1 f0       	breq	.+52     	; 0x1a2c <__fixunssfsi+0x46>
    19f8:	66 0f       	add	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	1a f0       	brmi	.+6      	; 0x1a08 <__fixunssfsi+0x22>
    1a02:	ba 95       	dec	r27
    1a04:	c9 f7       	brne	.-14     	; 0x19f8 <__fixunssfsi+0x12>
    1a06:	12 c0       	rjmp	.+36     	; 0x1a2c <__fixunssfsi+0x46>
    1a08:	b1 30       	cpi	r27, 0x01	; 1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <__fixunssfsi+0x46>
    1a0c:	ca d0       	rcall	.+404    	; 0x1ba2 <__fp_zero>
    1a0e:	b1 e0       	ldi	r27, 0x01	; 1
    1a10:	08 95       	ret
    1a12:	c7 c0       	rjmp	.+398    	; 0x1ba2 <__fp_zero>
    1a14:	67 2f       	mov	r22, r23
    1a16:	78 2f       	mov	r23, r24
    1a18:	88 27       	eor	r24, r24
    1a1a:	b8 5f       	subi	r27, 0xF8	; 248
    1a1c:	39 f0       	breq	.+14     	; 0x1a2c <__fixunssfsi+0x46>
    1a1e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a20:	cc f3       	brlt	.-14     	; 0x1a14 <__fixunssfsi+0x2e>
    1a22:	86 95       	lsr	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	b3 95       	inc	r27
    1a2a:	d9 f7       	brne	.-10     	; 0x1a22 <__fixunssfsi+0x3c>
    1a2c:	3e f4       	brtc	.+14     	; 0x1a3c <__fixunssfsi+0x56>
    1a2e:	90 95       	com	r25
    1a30:	80 95       	com	r24
    1a32:	70 95       	com	r23
    1a34:	61 95       	neg	r22
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	08 95       	ret

00001a3e <__floatunsisf>:
    1a3e:	e8 94       	clt
    1a40:	09 c0       	rjmp	.+18     	; 0x1a54 <__floatsisf+0x12>

00001a42 <__floatsisf>:
    1a42:	97 fb       	bst	r25, 7
    1a44:	3e f4       	brtc	.+14     	; 0x1a54 <__floatsisf+0x12>
    1a46:	90 95       	com	r25
    1a48:	80 95       	com	r24
    1a4a:	70 95       	com	r23
    1a4c:	61 95       	neg	r22
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	8f 4f       	sbci	r24, 0xFF	; 255
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	99 23       	and	r25, r25
    1a56:	a9 f0       	breq	.+42     	; 0x1a82 <__floatsisf+0x40>
    1a58:	f9 2f       	mov	r31, r25
    1a5a:	96 e9       	ldi	r25, 0x96	; 150
    1a5c:	bb 27       	eor	r27, r27
    1a5e:	93 95       	inc	r25
    1a60:	f6 95       	lsr	r31
    1a62:	87 95       	ror	r24
    1a64:	77 95       	ror	r23
    1a66:	67 95       	ror	r22
    1a68:	b7 95       	ror	r27
    1a6a:	f1 11       	cpse	r31, r1
    1a6c:	f8 cf       	rjmp	.-16     	; 0x1a5e <__floatsisf+0x1c>
    1a6e:	fa f4       	brpl	.+62     	; 0x1aae <__floatsisf+0x6c>
    1a70:	bb 0f       	add	r27, r27
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <__floatsisf+0x36>
    1a74:	60 ff       	sbrs	r22, 0
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <__floatsisf+0x6c>
    1a78:	6f 5f       	subi	r22, 0xFF	; 255
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	16 c0       	rjmp	.+44     	; 0x1aae <__floatsisf+0x6c>
    1a82:	88 23       	and	r24, r24
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <__floatsisf+0x48>
    1a86:	96 e9       	ldi	r25, 0x96	; 150
    1a88:	11 c0       	rjmp	.+34     	; 0x1aac <__floatsisf+0x6a>
    1a8a:	77 23       	and	r23, r23
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <__floatsisf+0x54>
    1a8e:	9e e8       	ldi	r25, 0x8E	; 142
    1a90:	87 2f       	mov	r24, r23
    1a92:	76 2f       	mov	r23, r22
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <__floatsisf+0x5e>
    1a96:	66 23       	and	r22, r22
    1a98:	71 f0       	breq	.+28     	; 0x1ab6 <__floatsisf+0x74>
    1a9a:	96 e8       	ldi	r25, 0x86	; 134
    1a9c:	86 2f       	mov	r24, r22
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	2a f0       	brmi	.+10     	; 0x1aae <__floatsisf+0x6c>
    1aa4:	9a 95       	dec	r25
    1aa6:	66 0f       	add	r22, r22
    1aa8:	77 1f       	adc	r23, r23
    1aaa:	88 1f       	adc	r24, r24
    1aac:	da f7       	brpl	.-10     	; 0x1aa4 <__floatsisf+0x62>
    1aae:	88 0f       	add	r24, r24
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret

00001ab8 <floor>:
    1ab8:	5d d0       	rcall	.+186    	; 0x1b74 <__fp_trunc>
    1aba:	80 f0       	brcs	.+32     	; 0x1adc <floor+0x24>
    1abc:	9f 37       	cpi	r25, 0x7F	; 127
    1abe:	40 f4       	brcc	.+16     	; 0x1ad0 <floor+0x18>
    1ac0:	91 11       	cpse	r25, r1
    1ac2:	0e f0       	brts	.+2      	; 0x1ac6 <floor+0xe>
    1ac4:	6f c0       	rjmp	.+222    	; 0x1ba4 <__fp_szero>
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	80 e8       	ldi	r24, 0x80	; 128
    1acc:	9f eb       	ldi	r25, 0xBF	; 191
    1ace:	08 95       	ret
    1ad0:	26 f4       	brtc	.+8      	; 0x1ada <floor+0x22>
    1ad2:	1b 16       	cp	r1, r27
    1ad4:	61 1d       	adc	r22, r1
    1ad6:	71 1d       	adc	r23, r1
    1ad8:	81 1d       	adc	r24, r1
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <__fp_mintl>
    1adc:	1b c0       	rjmp	.+54     	; 0x1b14 <__fp_mpack>

00001ade <__fp_mintl>:
    1ade:	88 23       	and	r24, r24
    1ae0:	71 f4       	brne	.+28     	; 0x1afe <__fp_mintl+0x20>
    1ae2:	77 23       	and	r23, r23
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <__fp_mintl+0x10>
    1ae6:	98 50       	subi	r25, 0x08	; 8
    1ae8:	87 2b       	or	r24, r23
    1aea:	76 2f       	mov	r23, r22
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <__fp_mintl+0x1e>
    1aee:	66 23       	and	r22, r22
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <__fp_mintl+0x18>
    1af2:	99 27       	eor	r25, r25
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <__fp_mintl+0x32>
    1af6:	90 51       	subi	r25, 0x10	; 16
    1af8:	86 2b       	or	r24, r22
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	2a f0       	brmi	.+10     	; 0x1b0a <__fp_mintl+0x2c>
    1b00:	9a 95       	dec	r25
    1b02:	66 0f       	add	r22, r22
    1b04:	77 1f       	adc	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	da f7       	brpl	.-10     	; 0x1b00 <__fp_mintl+0x22>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	96 95       	lsr	r25
    1b0e:	87 95       	ror	r24
    1b10:	97 f9       	bld	r25, 7
    1b12:	08 95       	ret

00001b14 <__fp_mpack>:
    1b14:	9f 3f       	cpi	r25, 0xFF	; 255
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <__fp_mpack_finite+0xc>

00001b18 <__fp_mpack_finite>:
    1b18:	91 50       	subi	r25, 0x01	; 1
    1b1a:	20 f4       	brcc	.+8      	; 0x1b24 <__fp_mpack_finite+0xc>
    1b1c:	87 95       	ror	r24
    1b1e:	77 95       	ror	r23
    1b20:	67 95       	ror	r22
    1b22:	b7 95       	ror	r27
    1b24:	88 0f       	add	r24, r24
    1b26:	91 1d       	adc	r25, r1
    1b28:	96 95       	lsr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	97 f9       	bld	r25, 7
    1b2e:	08 95       	ret

00001b30 <__fp_split3>:
    1b30:	57 fd       	sbrc	r21, 7
    1b32:	90 58       	subi	r25, 0x80	; 128
    1b34:	44 0f       	add	r20, r20
    1b36:	55 1f       	adc	r21, r21
    1b38:	59 f0       	breq	.+22     	; 0x1b50 <__fp_splitA+0x10>
    1b3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b3c:	71 f0       	breq	.+28     	; 0x1b5a <__fp_splitA+0x1a>
    1b3e:	47 95       	ror	r20

00001b40 <__fp_splitA>:
    1b40:	88 0f       	add	r24, r24
    1b42:	97 fb       	bst	r25, 7
    1b44:	99 1f       	adc	r25, r25
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <__fp_splitA+0x20>
    1b48:	9f 3f       	cpi	r25, 0xFF	; 255
    1b4a:	79 f0       	breq	.+30     	; 0x1b6a <__fp_splitA+0x2a>
    1b4c:	87 95       	ror	r24
    1b4e:	08 95       	ret
    1b50:	12 16       	cp	r1, r18
    1b52:	13 06       	cpc	r1, r19
    1b54:	14 06       	cpc	r1, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	f2 cf       	rjmp	.-28     	; 0x1b3e <__fp_split3+0xe>
    1b5a:	46 95       	lsr	r20
    1b5c:	f1 df       	rcall	.-30     	; 0x1b40 <__fp_splitA>
    1b5e:	08 c0       	rjmp	.+16     	; 0x1b70 <__fp_splitA+0x30>
    1b60:	16 16       	cp	r1, r22
    1b62:	17 06       	cpc	r1, r23
    1b64:	18 06       	cpc	r1, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	f1 cf       	rjmp	.-30     	; 0x1b4c <__fp_splitA+0xc>
    1b6a:	86 95       	lsr	r24
    1b6c:	71 05       	cpc	r23, r1
    1b6e:	61 05       	cpc	r22, r1
    1b70:	08 94       	sec
    1b72:	08 95       	ret

00001b74 <__fp_trunc>:
    1b74:	e5 df       	rcall	.-54     	; 0x1b40 <__fp_splitA>
    1b76:	a0 f0       	brcs	.+40     	; 0x1ba0 <__fp_trunc+0x2c>
    1b78:	be e7       	ldi	r27, 0x7E	; 126
    1b7a:	b9 17       	cp	r27, r25
    1b7c:	88 f4       	brcc	.+34     	; 0x1ba0 <__fp_trunc+0x2c>
    1b7e:	bb 27       	eor	r27, r27
    1b80:	9f 38       	cpi	r25, 0x8F	; 143
    1b82:	60 f4       	brcc	.+24     	; 0x1b9c <__fp_trunc+0x28>
    1b84:	16 16       	cp	r1, r22
    1b86:	b1 1d       	adc	r27, r1
    1b88:	67 2f       	mov	r22, r23
    1b8a:	78 2f       	mov	r23, r24
    1b8c:	88 27       	eor	r24, r24
    1b8e:	98 5f       	subi	r25, 0xF8	; 248
    1b90:	f7 cf       	rjmp	.-18     	; 0x1b80 <__fp_trunc+0xc>
    1b92:	86 95       	lsr	r24
    1b94:	77 95       	ror	r23
    1b96:	67 95       	ror	r22
    1b98:	b1 1d       	adc	r27, r1
    1b9a:	93 95       	inc	r25
    1b9c:	96 39       	cpi	r25, 0x96	; 150
    1b9e:	c8 f3       	brcs	.-14     	; 0x1b92 <__fp_trunc+0x1e>
    1ba0:	08 95       	ret

00001ba2 <__fp_zero>:
    1ba2:	e8 94       	clt

00001ba4 <__fp_szero>:
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	66 27       	eor	r22, r22
    1ba8:	77 27       	eor	r23, r23
    1baa:	cb 01       	movw	r24, r22
    1bac:	97 f9       	bld	r25, 7
    1bae:	08 95       	ret

00001bb0 <__udivmodsi4>:
    1bb0:	a1 e2       	ldi	r26, 0x21	; 33
    1bb2:	1a 2e       	mov	r1, r26
    1bb4:	aa 1b       	sub	r26, r26
    1bb6:	bb 1b       	sub	r27, r27
    1bb8:	fd 01       	movw	r30, r26
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <__udivmodsi4_ep>

00001bbc <__udivmodsi4_loop>:
    1bbc:	aa 1f       	adc	r26, r26
    1bbe:	bb 1f       	adc	r27, r27
    1bc0:	ee 1f       	adc	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	a2 17       	cp	r26, r18
    1bc6:	b3 07       	cpc	r27, r19
    1bc8:	e4 07       	cpc	r30, r20
    1bca:	f5 07       	cpc	r31, r21
    1bcc:	20 f0       	brcs	.+8      	; 0x1bd6 <__udivmodsi4_ep>
    1bce:	a2 1b       	sub	r26, r18
    1bd0:	b3 0b       	sbc	r27, r19
    1bd2:	e4 0b       	sbc	r30, r20
    1bd4:	f5 0b       	sbc	r31, r21

00001bd6 <__udivmodsi4_ep>:
    1bd6:	66 1f       	adc	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	1a 94       	dec	r1
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <__udivmodsi4_loop>
    1be2:	60 95       	com	r22
    1be4:	70 95       	com	r23
    1be6:	80 95       	com	r24
    1be8:	90 95       	com	r25
    1bea:	9b 01       	movw	r18, r22
    1bec:	ac 01       	movw	r20, r24
    1bee:	bd 01       	movw	r22, r26
    1bf0:	cf 01       	movw	r24, r30
    1bf2:	08 95       	ret

00001bf4 <malloc>:
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	82 30       	cpi	r24, 0x02	; 2
    1bfe:	91 05       	cpc	r25, r1
    1c00:	10 f4       	brcc	.+4      	; 0x1c06 <malloc+0x12>
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	e0 91 40 02 	lds	r30, 0x0240
    1c0a:	f0 91 41 02 	lds	r31, 0x0241
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	c0 e0       	ldi	r28, 0x00	; 0
    1c14:	d0 e0       	ldi	r29, 0x00	; 0
    1c16:	23 c0       	rjmp	.+70     	; 0x1c5e <malloc+0x6a>
    1c18:	40 81       	ld	r20, Z
    1c1a:	51 81       	ldd	r21, Z+1	; 0x01
    1c1c:	48 17       	cp	r20, r24
    1c1e:	59 07       	cpc	r21, r25
    1c20:	a8 f0       	brcs	.+42     	; 0x1c4c <malloc+0x58>
    1c22:	48 17       	cp	r20, r24
    1c24:	59 07       	cpc	r21, r25
    1c26:	61 f4       	brne	.+24     	; 0x1c40 <malloc+0x4c>
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	20 97       	sbiw	r28, 0x00	; 0
    1c2e:	19 f0       	breq	.+6      	; 0x1c36 <malloc+0x42>
    1c30:	9b 83       	std	Y+3, r25	; 0x03
    1c32:	8a 83       	std	Y+2, r24	; 0x02
    1c34:	2e c0       	rjmp	.+92     	; 0x1c92 <malloc+0x9e>
    1c36:	90 93 41 02 	sts	0x0241, r25
    1c3a:	80 93 40 02 	sts	0x0240, r24
    1c3e:	29 c0       	rjmp	.+82     	; 0x1c92 <malloc+0x9e>
    1c40:	21 15       	cp	r18, r1
    1c42:	31 05       	cpc	r19, r1
    1c44:	29 f0       	breq	.+10     	; 0x1c50 <malloc+0x5c>
    1c46:	42 17       	cp	r20, r18
    1c48:	53 07       	cpc	r21, r19
    1c4a:	10 f0       	brcs	.+4      	; 0x1c50 <malloc+0x5c>
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <malloc+0x60>
    1c50:	be 01       	movw	r22, r28
    1c52:	df 01       	movw	r26, r30
    1c54:	02 81       	ldd	r16, Z+2	; 0x02
    1c56:	13 81       	ldd	r17, Z+3	; 0x03
    1c58:	ef 01       	movw	r28, r30
    1c5a:	9a 01       	movw	r18, r20
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	30 97       	sbiw	r30, 0x00	; 0
    1c60:	d9 f6       	brne	.-74     	; 0x1c18 <malloc+0x24>
    1c62:	21 15       	cp	r18, r1
    1c64:	31 05       	cpc	r19, r1
    1c66:	09 f1       	breq	.+66     	; 0x1caa <malloc+0xb6>
    1c68:	28 1b       	sub	r18, r24
    1c6a:	39 0b       	sbc	r19, r25
    1c6c:	24 30       	cpi	r18, 0x04	; 4
    1c6e:	31 05       	cpc	r19, r1
    1c70:	90 f4       	brcc	.+36     	; 0x1c96 <malloc+0xa2>
    1c72:	12 96       	adiw	r26, 0x02	; 2
    1c74:	8d 91       	ld	r24, X+
    1c76:	9c 91       	ld	r25, X
    1c78:	13 97       	sbiw	r26, 0x03	; 3
    1c7a:	61 15       	cp	r22, r1
    1c7c:	71 05       	cpc	r23, r1
    1c7e:	21 f0       	breq	.+8      	; 0x1c88 <malloc+0x94>
    1c80:	fb 01       	movw	r30, r22
    1c82:	93 83       	std	Z+3, r25	; 0x03
    1c84:	82 83       	std	Z+2, r24	; 0x02
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <malloc+0x9c>
    1c88:	90 93 41 02 	sts	0x0241, r25
    1c8c:	80 93 40 02 	sts	0x0240, r24
    1c90:	fd 01       	movw	r30, r26
    1c92:	32 96       	adiw	r30, 0x02	; 2
    1c94:	44 c0       	rjmp	.+136    	; 0x1d1e <malloc+0x12a>
    1c96:	fd 01       	movw	r30, r26
    1c98:	e2 0f       	add	r30, r18
    1c9a:	f3 1f       	adc	r31, r19
    1c9c:	81 93       	st	Z+, r24
    1c9e:	91 93       	st	Z+, r25
    1ca0:	22 50       	subi	r18, 0x02	; 2
    1ca2:	31 09       	sbc	r19, r1
    1ca4:	2d 93       	st	X+, r18
    1ca6:	3c 93       	st	X, r19
    1ca8:	3a c0       	rjmp	.+116    	; 0x1d1e <malloc+0x12a>
    1caa:	20 91 3e 02 	lds	r18, 0x023E
    1cae:	30 91 3f 02 	lds	r19, 0x023F
    1cb2:	23 2b       	or	r18, r19
    1cb4:	41 f4       	brne	.+16     	; 0x1cc6 <malloc+0xd2>
    1cb6:	20 91 02 02 	lds	r18, 0x0202
    1cba:	30 91 03 02 	lds	r19, 0x0203
    1cbe:	30 93 3f 02 	sts	0x023F, r19
    1cc2:	20 93 3e 02 	sts	0x023E, r18
    1cc6:	20 91 00 02 	lds	r18, 0x0200
    1cca:	30 91 01 02 	lds	r19, 0x0201
    1cce:	21 15       	cp	r18, r1
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	41 f4       	brne	.+16     	; 0x1ce4 <malloc+0xf0>
    1cd4:	2d b7       	in	r18, 0x3d	; 61
    1cd6:	3e b7       	in	r19, 0x3e	; 62
    1cd8:	40 91 04 02 	lds	r20, 0x0204
    1cdc:	50 91 05 02 	lds	r21, 0x0205
    1ce0:	24 1b       	sub	r18, r20
    1ce2:	35 0b       	sbc	r19, r21
    1ce4:	e0 91 3e 02 	lds	r30, 0x023E
    1ce8:	f0 91 3f 02 	lds	r31, 0x023F
    1cec:	e2 17       	cp	r30, r18
    1cee:	f3 07       	cpc	r31, r19
    1cf0:	a0 f4       	brcc	.+40     	; 0x1d1a <malloc+0x126>
    1cf2:	2e 1b       	sub	r18, r30
    1cf4:	3f 0b       	sbc	r19, r31
    1cf6:	28 17       	cp	r18, r24
    1cf8:	39 07       	cpc	r19, r25
    1cfa:	78 f0       	brcs	.+30     	; 0x1d1a <malloc+0x126>
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	4e 5f       	subi	r20, 0xFE	; 254
    1d00:	5f 4f       	sbci	r21, 0xFF	; 255
    1d02:	24 17       	cp	r18, r20
    1d04:	35 07       	cpc	r19, r21
    1d06:	48 f0       	brcs	.+18     	; 0x1d1a <malloc+0x126>
    1d08:	4e 0f       	add	r20, r30
    1d0a:	5f 1f       	adc	r21, r31
    1d0c:	50 93 3f 02 	sts	0x023F, r21
    1d10:	40 93 3e 02 	sts	0x023E, r20
    1d14:	81 93       	st	Z+, r24
    1d16:	91 93       	st	Z+, r25
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <malloc+0x12a>
    1d1a:	e0 e0       	ldi	r30, 0x00	; 0
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	cf 01       	movw	r24, r30
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <free>:
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <free+0x12>
    1d3a:	8f c0       	rjmp	.+286    	; 0x1e5a <free+0x130>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	12 97       	sbiw	r26, 0x02	; 2
    1d40:	13 96       	adiw	r26, 0x03	; 3
    1d42:	1c 92       	st	X, r1
    1d44:	1e 92       	st	-X, r1
    1d46:	12 97       	sbiw	r26, 0x02	; 2
    1d48:	e0 90 40 02 	lds	r14, 0x0240
    1d4c:	f0 90 41 02 	lds	r15, 0x0241
    1d50:	e1 14       	cp	r14, r1
    1d52:	f1 04       	cpc	r15, r1
    1d54:	89 f4       	brne	.+34     	; 0x1d78 <free+0x4e>
    1d56:	2d 91       	ld	r18, X+
    1d58:	3c 91       	ld	r19, X
    1d5a:	11 97       	sbiw	r26, 0x01	; 1
    1d5c:	28 0f       	add	r18, r24
    1d5e:	39 1f       	adc	r19, r25
    1d60:	80 91 3e 02 	lds	r24, 0x023E
    1d64:	90 91 3f 02 	lds	r25, 0x023F
    1d68:	82 17       	cp	r24, r18
    1d6a:	93 07       	cpc	r25, r19
    1d6c:	89 f5       	brne	.+98     	; 0x1dd0 <free+0xa6>
    1d6e:	b0 93 3f 02 	sts	0x023F, r27
    1d72:	a0 93 3e 02 	sts	0x023E, r26
    1d76:	71 c0       	rjmp	.+226    	; 0x1e5a <free+0x130>
    1d78:	e7 01       	movw	r28, r14
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <free+0x58>
    1d80:	ea 01       	movw	r28, r20
    1d82:	ca 17       	cp	r28, r26
    1d84:	db 07       	cpc	r29, r27
    1d86:	38 f4       	brcc	.+14     	; 0x1d96 <free+0x6c>
    1d88:	4a 81       	ldd	r20, Y+2	; 0x02
    1d8a:	5b 81       	ldd	r21, Y+3	; 0x03
    1d8c:	9e 01       	movw	r18, r28
    1d8e:	41 15       	cp	r20, r1
    1d90:	51 05       	cpc	r21, r1
    1d92:	b1 f7       	brne	.-20     	; 0x1d80 <free+0x56>
    1d94:	22 c0       	rjmp	.+68     	; 0x1dda <free+0xb0>
    1d96:	bc 01       	movw	r22, r24
    1d98:	62 50       	subi	r22, 0x02	; 2
    1d9a:	71 09       	sbc	r23, r1
    1d9c:	fb 01       	movw	r30, r22
    1d9e:	d3 83       	std	Z+3, r29	; 0x03
    1da0:	c2 83       	std	Z+2, r28	; 0x02
    1da2:	00 81       	ld	r16, Z
    1da4:	11 81       	ldd	r17, Z+1	; 0x01
    1da6:	ac 01       	movw	r20, r24
    1da8:	40 0f       	add	r20, r16
    1daa:	51 1f       	adc	r21, r17
    1dac:	4c 17       	cp	r20, r28
    1dae:	5d 07       	cpc	r21, r29
    1db0:	61 f4       	brne	.+24     	; 0x1dca <free+0xa0>
    1db2:	48 81       	ld	r20, Y
    1db4:	59 81       	ldd	r21, Y+1	; 0x01
    1db6:	40 0f       	add	r20, r16
    1db8:	51 1f       	adc	r21, r17
    1dba:	4e 5f       	subi	r20, 0xFE	; 254
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	51 83       	std	Z+1, r21	; 0x01
    1dc0:	40 83       	st	Z, r20
    1dc2:	4a 81       	ldd	r20, Y+2	; 0x02
    1dc4:	5b 81       	ldd	r21, Y+3	; 0x03
    1dc6:	53 83       	std	Z+3, r21	; 0x03
    1dc8:	42 83       	std	Z+2, r20	; 0x02
    1dca:	21 15       	cp	r18, r1
    1dcc:	31 05       	cpc	r19, r1
    1dce:	29 f4       	brne	.+10     	; 0x1dda <free+0xb0>
    1dd0:	b0 93 41 02 	sts	0x0241, r27
    1dd4:	a0 93 40 02 	sts	0x0240, r26
    1dd8:	40 c0       	rjmp	.+128    	; 0x1e5a <free+0x130>
    1dda:	f9 01       	movw	r30, r18
    1ddc:	b3 83       	std	Z+3, r27	; 0x03
    1dde:	a2 83       	std	Z+2, r26	; 0x02
    1de0:	e9 01       	movw	r28, r18
    1de2:	69 91       	ld	r22, Y+
    1de4:	79 91       	ld	r23, Y+
    1de6:	c6 0f       	add	r28, r22
    1de8:	d7 1f       	adc	r29, r23
    1dea:	ac 17       	cp	r26, r28
    1dec:	bd 07       	cpc	r27, r29
    1dee:	79 f4       	brne	.+30     	; 0x1e0e <free+0xe4>
    1df0:	dc 01       	movw	r26, r24
    1df2:	5e 91       	ld	r21, -X
    1df4:	4e 91       	ld	r20, -X
    1df6:	46 0f       	add	r20, r22
    1df8:	57 1f       	adc	r21, r23
    1dfa:	4e 5f       	subi	r20, 0xFE	; 254
    1dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfe:	51 83       	std	Z+1, r21	; 0x01
    1e00:	40 83       	st	Z, r20
    1e02:	12 96       	adiw	r26, 0x02	; 2
    1e04:	8d 91       	ld	r24, X+
    1e06:	9c 91       	ld	r25, X
    1e08:	13 97       	sbiw	r26, 0x03	; 3
    1e0a:	93 83       	std	Z+3, r25	; 0x03
    1e0c:	82 83       	std	Z+2, r24	; 0x02
    1e0e:	a0 e0       	ldi	r26, 0x00	; 0
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <free+0xee>
    1e14:	d7 01       	movw	r26, r14
    1e16:	7c 01       	movw	r14, r24
    1e18:	f7 01       	movw	r30, r14
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <free+0xea>
    1e22:	c7 01       	movw	r24, r14
    1e24:	02 96       	adiw	r24, 0x02	; 2
    1e26:	20 81       	ld	r18, Z
    1e28:	31 81       	ldd	r19, Z+1	; 0x01
    1e2a:	82 0f       	add	r24, r18
    1e2c:	93 1f       	adc	r25, r19
    1e2e:	20 91 3e 02 	lds	r18, 0x023E
    1e32:	30 91 3f 02 	lds	r19, 0x023F
    1e36:	28 17       	cp	r18, r24
    1e38:	39 07       	cpc	r19, r25
    1e3a:	79 f4       	brne	.+30     	; 0x1e5a <free+0x130>
    1e3c:	10 97       	sbiw	r26, 0x00	; 0
    1e3e:	29 f4       	brne	.+10     	; 0x1e4a <free+0x120>
    1e40:	10 92 41 02 	sts	0x0241, r1
    1e44:	10 92 40 02 	sts	0x0240, r1
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <free+0x128>
    1e4a:	13 96       	adiw	r26, 0x03	; 3
    1e4c:	1c 92       	st	X, r1
    1e4e:	1e 92       	st	-X, r1
    1e50:	12 97       	sbiw	r26, 0x02	; 2
    1e52:	f0 92 3f 02 	sts	0x023F, r15
    1e56:	e0 92 3e 02 	sts	0x023E, r14
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	08 95       	ret

00001e68 <memcpy>:
    1e68:	fb 01       	movw	r30, r22
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <memcpy+0xa>
    1e6e:	01 90       	ld	r0, Z+
    1e70:	0d 92       	st	X+, r0
    1e72:	41 50       	subi	r20, 0x01	; 1
    1e74:	50 40       	sbci	r21, 0x00	; 0
    1e76:	d8 f7       	brcc	.-10     	; 0x1e6e <memcpy+0x6>
    1e78:	08 95       	ret

00001e7a <_exit>:
    1e7a:	f8 94       	cli

00001e7c <__stop_program>:
    1e7c:	ff cf       	rjmp	.-2      	; 0x1e7c <__stop_program>
