
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800200  00002742  000027d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800260  00800260  00002836  2**0
                  ALLOC
  3 .stab         000020f4  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c4  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000051f0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000568  00000000  00000000  0000521f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000060ce  00000000  00000000  00005787  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002408  00000000  00000000  0000b855  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001933  00000000  00000000  0000dc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000123c  00000000  00000000  0000f590  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000020b0  00000000  00000000  000107cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a7c  00000000  00000000  0001287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000458  00000000  00000000  000152f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__ctors_end>
       4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      10:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      18:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      1c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      24:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      28:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      30:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      3c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      40:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      44:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      4c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      50:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      58:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      5c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      60:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      68:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      6c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      70:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      74:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      7c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      80:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      84:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      88:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      90:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      94:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      98:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      a0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      a4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      a8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      ac:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      b0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
	}
}
      b4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      b8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      bc:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      c0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      c4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      cc:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      d0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      d4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      d8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      dc:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      e0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 8f 08 	jmp	0x111e	; 0x111e <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
      e8:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
      ec:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>
      f0:	0c 94 94 02 	jmp	0x528	; 0x528 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>
      f4:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <_ZN10helicopter8messages11SyncMessage8getBytesEv>
      f8:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>
      fc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     100:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     104:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_ZN10helicopter5tasks4Task7runTaskEv>
     108:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>
     10c:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <_ZN10helicopter5tasks4Task11runTaskImplEv>
     110:	0c 94 89 07 	jmp	0xf12	; 0xf12 <_ZN10helicopter8messages7Message12buildMessageEPc>
     114:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     11c:	0c 94 65 07 	jmp	0xeca	; 0xeca <_ZN10helicopter8messages7MessageD0Ev>
     120:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <_ZN10helicopter5tasks4Task4initEv>
     124:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     128:	0c 94 d7 07 	jmp	0xfae	; 0xfae <_ZN10helicopter8messages11SyncMessageD0Ev>
     12c:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <_ZN10helicopter8messages7Message8getBytesEv>
     130:	0c 94 11 08 	jmp	0x1022	; 0x1022 <_ZN10helicopter8messages11SyncMessage12buildMessageEPc>
     134:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <_ZN10helicopter8messages7MessageD1Ev>
     138:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <_ZN10helicopter8messages11SyncMessageD1Ev>
     13c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>
     140:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_ZN10helicopter7drivers12SerialDriverD1Ev>

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d1 e2       	ldi	r29, 0x21	; 33
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0c bf       	out	0x3c, r16	; 60

00000154 <__do_copy_data>:
     154:	12 e0       	ldi	r17, 0x02	; 2
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	e2 e4       	ldi	r30, 0x42	; 66
     15c:	f7 e2       	ldi	r31, 0x27	; 39
     15e:	00 e0       	ldi	r16, 0x00	; 0
     160:	0b bf       	out	0x3b, r16	; 59
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x14>
     164:	07 90       	elpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	a0 36       	cpi	r26, 0x60	; 96
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0x10>

0000016e <__do_clear_bss>:
     16e:	22 e0       	ldi	r18, 0x02	; 2
     170:	a0 e6       	ldi	r26, 0x60	; 96
     172:	b2 e0       	ldi	r27, 0x02	; 2
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	a7 36       	cpi	r26, 0x67	; 103
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	0e 94 aa 03 	call	0x754	; 0x754 <main>
     182:	0c 94 9f 13 	jmp	0x273e	; 0x273e <_exit>

00000186 <__bad_interrupt>:
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018a <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	1f 92       	push	r1
     190:	1f 92       	push	r1
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	9a 83       	std	Y+2, r25	; 0x02
     198:	89 83       	std	Y+1, r24	; 0x01
				{
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	9a 81       	ldd	r25, Y+2	; 0x02
     19e:	2a e0       	ldi	r18, 0x0A	; 10
     1a0:	32 e0       	ldi	r19, 0x02	; 2
     1a2:	fc 01       	movw	r30, r24
     1a4:	31 83       	std	Z+1, r19	; 0x01
     1a6:	20 83       	st	Z, r18
					
				}
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	81 70       	andi	r24, 0x01	; 1
     1ae:	99 27       	eor	r25, r25
     1b0:	00 97       	sbiw	r24, 0x00	; 0
     1b2:	21 f0       	breq	.+8      	; 0x1bc <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	9a 81       	ldd	r25, Y+2	; 0x02
     1b8:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	1f 92       	push	r1
     1cc:	1f 92       	push	r1
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
     1da:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN10helicopter7drivers12SerialDriverD1Ev>
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	9a 81       	ldd	r25, Y+2	; 0x02
     1e2:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "commonheader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     1f6:	1f 92       	push	r1
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	9c 83       	std	Y+4, r25	; 0x04
     1fe:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     200:	1a 82       	std	Y+2, r1	; 0x02
     202:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     204:	8b 81       	ldd	r24, Y+3	; 0x03
     206:	9c 81       	ldd	r25, Y+4	; 0x04
     208:	fc 01       	movw	r30, r24
     20a:	80 89       	ldd	r24, Z+16	; 0x10
     20c:	88 23       	and	r24, r24
     20e:	b9 f1       	breq	.+110    	; 0x27e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	fc 01       	movw	r30, r24
     216:	82 85       	ldd	r24, Z+10	; 0x0a
     218:	93 85       	ldd	r25, Z+11	; 0x0b
     21a:	a4 85       	ldd	r26, Z+12	; 0x0c
     21c:	b5 85       	ldd	r27, Z+13	; 0x0d
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	aa 1f       	adc	r26, r26
     224:	bb 1f       	adc	r27, r27
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	aa 1f       	adc	r26, r26
     22c:	bb 1f       	adc	r27, r27
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	aa 1f       	adc	r26, r26
     234:	bb 1f       	adc	r27, r27
     236:	9c 01       	movw	r18, r24
     238:	ad 01       	movw	r20, r26
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	94 e2       	ldi	r25, 0x24	; 36
     23e:	a4 ef       	ldi	r26, 0xF4	; 244
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	0e 94 26 12 	call	0x244c	; 0x244c <__udivmodsi4>
     24a:	da 01       	movw	r26, r20
     24c:	c9 01       	movw	r24, r18
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	a1 09       	sbc	r26, r1
     252:	b1 09       	sbc	r27, r1
     254:	bc 01       	movw	r22, r24
     256:	cd 01       	movw	r24, r26
     258:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__floatunsisf>
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	bc 01       	movw	r22, r24
     262:	cd 01       	movw	r24, r26
     264:	0e 94 96 11 	call	0x232c	; 0x232c <floor>
     268:	dc 01       	movw	r26, r24
     26a:	cb 01       	movw	r24, r22
     26c:	bc 01       	movw	r22, r24
     26e:	cd 01       	movw	r24, r26
     270:	0e 94 2d 11 	call	0x225a	; 0x225a <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
     27c:	3a c0       	rjmp	.+116    	; 0x2f2 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	fc 01       	movw	r30, r24
     284:	82 85       	ldd	r24, Z+10	; 0x0a
     286:	93 85       	ldd	r25, Z+11	; 0x0b
     288:	a4 85       	ldd	r26, Z+12	; 0x0c
     28a:	b5 85       	ldd	r27, Z+13	; 0x0d
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	aa 1f       	adc	r26, r26
     292:	bb 1f       	adc	r27, r27
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	aa 1f       	adc	r26, r26
     29a:	bb 1f       	adc	r27, r27
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	aa 1f       	adc	r26, r26
     2a2:	bb 1f       	adc	r27, r27
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	aa 1f       	adc	r26, r26
     2aa:	bb 1f       	adc	r27, r27
     2ac:	9c 01       	movw	r18, r24
     2ae:	ad 01       	movw	r20, r26
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	94 e2       	ldi	r25, 0x24	; 36
     2b4:	a4 ef       	ldi	r26, 0xF4	; 244
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	bc 01       	movw	r22, r24
     2ba:	cd 01       	movw	r24, r26
     2bc:	0e 94 26 12 	call	0x244c	; 0x244c <__udivmodsi4>
     2c0:	da 01       	movw	r26, r20
     2c2:	c9 01       	movw	r24, r18
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	a1 09       	sbc	r26, r1
     2c8:	b1 09       	sbc	r27, r1
     2ca:	bc 01       	movw	r22, r24
     2cc:	cd 01       	movw	r24, r26
     2ce:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__floatunsisf>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	0e 94 96 11 	call	0x232c	; 0x232c <floor>
     2de:	dc 01       	movw	r26, r24
     2e0:	cb 01       	movw	r24, r22
     2e2:	bc 01       	movw	r22, r24
     2e4:	cd 01       	movw	r24, r26
     2e6:	0e 94 2d 11 	call	0x225a	; 0x225a <__fixunssfsi>
     2ea:	dc 01       	movw	r26, r24
     2ec:	cb 01       	movw	r24, r22
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	9c 81       	ldd	r25, Y+4	; 0x04
     2f6:	fc 01       	movw	r30, r24
     2f8:	86 85       	ldd	r24, Z+14	; 0x0e
     2fa:	88 23       	and	r24, r24
     2fc:	41 f5       	brne	.+80     	; 0x34e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     2fe:	84 ec       	ldi	r24, 0xC4	; 196
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	29 81       	ldd	r18, Y+1	; 0x01
     304:	3a 81       	ldd	r19, Y+2	; 0x02
     306:	fc 01       	movw	r30, r24
     308:	31 83       	std	Z+1, r19	; 0x01
     30a:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     30c:	82 ec       	ldi	r24, 0xC2	; 194
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	22 ec       	ldi	r18, 0xC2	; 194
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	26 60       	ori	r18, 0x06	; 6
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	9c 81       	ldd	r25, Y+4	; 0x04
     322:	fc 01       	movw	r30, r24
     324:	80 89       	ldd	r24, Z+16	; 0x10
     326:	88 23       	and	r24, r24
     328:	49 f0       	breq	.+18     	; 0x33c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     32a:	80 ec       	ldi	r24, 0xC0	; 192
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	20 ec       	ldi	r18, 0xC0	; 192
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	20 81       	ld	r18, Z
     336:	22 60       	ori	r18, 0x02	; 2
     338:	fc 01       	movw	r30, r24
     33a:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     33c:	81 ec       	ldi	r24, 0xC1	; 193
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	21 ec       	ldi	r18, 0xC1	; 193
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	f9 01       	movw	r30, r18
     346:	20 81       	ld	r18, Z
     348:	28 61       	ori	r18, 0x18	; 24
     34a:	fc 01       	movw	r30, r24
     34c:	20 83       	st	Z, r18
	}
}
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>:

int SerialDriver::transmitByte(byte byteToSend)
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x6>
     362:	1f 92       	push	r1
     364:	1f 92       	push	r1
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	9c 83       	std	Y+4, r25	; 0x04
     36c:	8b 83       	std	Y+3, r24	; 0x03
     36e:	6d 83       	std	Y+5, r22	; 0x05
	if (uartPort == Zero)
     370:	8b 81       	ldd	r24, Y+3	; 0x03
     372:	9c 81       	ldd	r25, Y+4	; 0x04
     374:	fc 01       	movw	r30, r24
     376:	86 85       	ldd	r24, Z+14	; 0x0e
     378:	88 23       	and	r24, r24
     37a:	b1 f4       	brne	.+44     	; 0x3a8 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x4c>
	{
		int counter = 0;
     37c:	1a 82       	std	Y+2, r1	; 0x02
     37e:	19 82       	std	Y+1, r1	; 0x01
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     380:	00 00       	nop
     382:	80 ec       	ldi	r24, 0xC0	; 192
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	88 2f       	mov	r24, r24
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	80 72       	andi	r24, 0x20	; 32
     390:	99 27       	eor	r25, r25
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	09 f0       	breq	.+2      	; 0x39a <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x3e>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	22 23       	and	r18, r18
     39c:	91 f7       	brne	.-28     	; 0x382 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x26>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     39e:	86 ec       	ldi	r24, 0xC6	; 198
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	2d 81       	ldd	r18, Y+5	; 0x05
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	}
	
	return 0;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
}
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x6>
     3c2:	1f 92       	push	r1
     3c4:	1f 92       	push	r1
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	9b 83       	std	Y+3, r25	; 0x03
     3cc:	8a 83       	std	Y+2, r24	; 0x02
     3ce:	7d 83       	std	Y+5, r23	; 0x05
     3d0:	6c 83       	std	Y+4, r22	; 0x04
	bool hasDataOverrun = false;
     3d2:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
     3d6:	9b 81       	ldd	r25, Y+3	; 0x03
     3d8:	fc 01       	movw	r30, r24
     3da:	86 85       	ldd	r24, Z+14	; 0x0e
     3dc:	88 23       	and	r24, r24
     3de:	d9 f5       	brne	.+118    	; 0x456 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x9a>
	{
		
		if (isTimeoutEnabled)
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	fc 01       	movw	r30, r24
     3e6:	87 85       	ldd	r24, Z+15	; 0x0f
     3e8:	88 23       	and	r24, r24
     3ea:	a9 f0       	breq	.+42     	; 0x416 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x5a>
		{
			timer.startTimer();
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	9b 81       	ldd	r25, Y+3	; 0x03
     3f0:	02 96       	adiw	r24, 0x02	; 2
     3f2:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN10helicopter4util5Timer10startTimerEv>
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     3f6:	0f c0       	rjmp	.+30     	; 0x416 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x5a>
		{
			if (timer.hasTimedout())
     3f8:	8a 81       	ldd	r24, Y+2	; 0x02
     3fa:	9b 81       	ldd	r25, Y+3	; 0x03
     3fc:	02 96       	adiw	r24, 0x02	; 2
     3fe:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <_ZN10helicopter4util5Timer11hasTimedoutEv>
     402:	88 23       	and	r24, r24
     404:	49 f0       	breq	.+18     	; 0x418 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x5c>
			{
				timer.stopTimer();
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	9b 81       	ldd	r25, Y+3	; 0x03
     40a:	02 96       	adiw	r24, 0x02	; 2
     40c:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN10helicopter4util5Timer9stopTimerEv>
				return -1;
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	9f ef       	ldi	r25, 0xFF	; 255
     414:	27 c0       	rjmp	.+78     	; 0x464 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0xa8>
			timer.startTimer();
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     416:	00 00       	nop
     418:	80 ec       	ldi	r24, 0xC0	; 192
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	80 95       	com	r24
     422:	88 1f       	adc	r24, r24
     424:	88 27       	eor	r24, r24
     426:	88 1f       	adc	r24, r24
     428:	88 23       	and	r24, r24
     42a:	31 f7       	brne	.-52     	; 0x3f8 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x3c>
			}*/
		}
		
		//determine if there has been a data overrun.
		//Swallow the overrun because nothing can be done.
		hasDataOverrun = (UCSR0A & (1 << DOR0)) != 0;
     42c:	80 ec       	ldi	r24, 0xC0	; 192
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	88 70       	andi	r24, 0x08	; 8
     43a:	99 27       	eor	r25, r25
     43c:	21 e0       	ldi	r18, 0x01	; 1
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	09 f4       	brne	.+2      	; 0x444 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x88>
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	29 83       	std	Y+1, r18	; 0x01
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
     446:	86 ec       	ldi	r24, 0xC6	; 198
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	20 81       	ld	r18, Z
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	9d 81       	ldd	r25, Y+5	; 0x05
     452:	fc 01       	movw	r30, r24
     454:	20 83       	st	Z, r18
	}
	
	timer.stopTimer();
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	9b 81       	ldd	r25, Y+3	; 0x03
     45a:	02 96       	adiw	r24, 0x02	; 2
     45c:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return 0;
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>:
					
					int ledToBlink;
				
				public:

				FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	28 97       	sbiw	r28, 0x08	; 8
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	7c 83       	std	Y+4, r23	; 0x04
     48e:	6b 83       	std	Y+3, r22	; 0x03
     490:	5e 83       	std	Y+6, r21	; 0x06
     492:	4d 83       	std	Y+5, r20	; 0x05
     494:	38 87       	std	Y+8, r19	; 0x08
     496:	2f 83       	std	Y+7, r18	; 0x07
					Task(delay, period),
					isOn(false),
					ledToBlink(ledToBlink)
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	4d 81       	ldd	r20, Y+5	; 0x05
     49e:	5e 81       	ldd	r21, Y+6	; 0x06
     4a0:	2b 81       	ldd	r18, Y+3	; 0x03
     4a2:	3c 81       	ldd	r19, Y+4	; 0x04
     4a4:	b9 01       	movw	r22, r18
     4a6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN10helicopter5tasks4TaskC1Eii>
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	28 e1       	ldi	r18, 0x18	; 24
     4b0:	32 e0       	ldi	r19, 0x02	; 2
     4b2:	fc 01       	movw	r30, r24
     4b4:	31 83       	std	Z+1, r19	; 0x01
     4b6:	20 83       	st	Z, r18
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	fc 01       	movw	r30, r24
     4be:	17 82       	std	Z+7, r1	; 0x07
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	2f 81       	ldd	r18, Y+7	; 0x07
     4c6:	38 85       	ldd	r19, Y+8	; 0x08
     4c8:	fc 01       	movw	r30, r24
     4ca:	31 87       	std	Z+9, r19	; 0x09
     4cc:	20 87       	std	Z+8, r18	; 0x08
				{
					
				}
     4ce:	28 96       	adiw	r28, 0x08	; 8
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>:
	
				void init()
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	1f 92       	push	r1
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
				{
					DDRA |= (1<<ledToBlink);
     4f0:	81 e2       	ldi	r24, 0x21	; 33
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	21 e2       	ldi	r18, 0x21	; 33
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	f9 01       	movw	r30, r18
     4fa:	20 81       	ld	r18, Z
     4fc:	62 2f       	mov	r22, r18
     4fe:	29 81       	ldd	r18, Y+1	; 0x01
     500:	3a 81       	ldd	r19, Y+2	; 0x02
     502:	f9 01       	movw	r30, r18
     504:	40 85       	ldd	r20, Z+8	; 0x08
     506:	51 85       	ldd	r21, Z+9	; 0x09
     508:	21 e0       	ldi	r18, 0x01	; 1
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	04 2e       	mov	r0, r20
     50e:	02 c0       	rjmp	.+4      	; 0x514 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x34>
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x30>
     518:	26 2b       	or	r18, r22
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
				}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>:
	
				/**
				 * Flashes the LED
				 */
				void runTaskImpl() {
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	1f 92       	push	r1
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	9a 83       	std	Y+2, r25	; 0x02
     536:	89 83       	std	Y+1, r24	; 0x01
					if (isOn)
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	87 81       	ldd	r24, Z+7	; 0x07
     540:	88 23       	and	r24, r24
     542:	e9 f0       	breq	.+58     	; 0x57e <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x56>
					{
						PORTA &= ~(1<<ledToBlink);
     544:	82 e2       	ldi	r24, 0x22	; 34
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	22 e2       	ldi	r18, 0x22	; 34
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	62 2f       	mov	r22, r18
     552:	29 81       	ldd	r18, Y+1	; 0x01
     554:	3a 81       	ldd	r19, Y+2	; 0x02
     556:	f9 01       	movw	r30, r18
     558:	40 85       	ldd	r20, Z+8	; 0x08
     55a:	51 85       	ldd	r21, Z+9	; 0x09
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	04 2e       	mov	r0, r20
     562:	02 c0       	rjmp	.+4      	; 0x568 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x40>
     564:	22 0f       	add	r18, r18
     566:	33 1f       	adc	r19, r19
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x3c>
     56c:	20 95       	com	r18
     56e:	26 23       	and	r18, r22
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
						isOn = false;
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	fc 01       	movw	r30, r24
     57a:	17 82       	std	Z+7, r1	; 0x07
     57c:	1c c0       	rjmp	.+56     	; 0x5b6 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x8e>
					}else
					{
						PORTA |= (1<<ledToBlink);
     57e:	82 e2       	ldi	r24, 0x22	; 34
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	22 e2       	ldi	r18, 0x22	; 34
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	f9 01       	movw	r30, r18
     588:	20 81       	ld	r18, Z
     58a:	62 2f       	mov	r22, r18
     58c:	29 81       	ldd	r18, Y+1	; 0x01
     58e:	3a 81       	ldd	r19, Y+2	; 0x02
     590:	f9 01       	movw	r30, r18
     592:	40 85       	ldd	r20, Z+8	; 0x08
     594:	51 85       	ldd	r21, Z+9	; 0x09
     596:	21 e0       	ldi	r18, 0x01	; 1
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	04 2e       	mov	r0, r20
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x7a>
     59e:	22 0f       	add	r18, r18
     5a0:	33 1f       	adc	r19, r19
     5a2:	0a 94       	dec	r0
     5a4:	e2 f7       	brpl	.-8      	; 0x59e <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x76>
     5a6:	26 2b       	or	r18, r22
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
						isOn = true;
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	fc 01       	movw	r30, r24
     5b4:	27 83       	std	Z+7, r18	; 0x07
					}
				}
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <_ZN10helicopter4util5TimerC1Emim>:
			public:

				/**
				 * timeoutMilliseconds has to be <= 1000.
				 */
				Timer (unsigned long cpuSpeed, int timerPrescaler, unsigned long timeoutMilliseconds):
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	2c 97       	sbiw	r28, 0x0c	; 12
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	9a 83       	std	Y+2, r25	; 0x02
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	4b 83       	std	Y+3, r20	; 0x03
     5e2:	5c 83       	std	Y+4, r21	; 0x04
     5e4:	6d 83       	std	Y+5, r22	; 0x05
     5e6:	7e 83       	std	Y+6, r23	; 0x06
     5e8:	38 87       	std	Y+8, r19	; 0x08
     5ea:	2f 83       	std	Y+7, r18	; 0x07
     5ec:	e9 86       	std	Y+9, r14	; 0x09
     5ee:	fa 86       	std	Y+10, r15	; 0x0a
     5f0:	0b 87       	std	Y+11, r16	; 0x0b
     5f2:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
     5f4:	29 81       	ldd	r18, Y+1	; 0x01
     5f6:	3a 81       	ldd	r19, Y+2	; 0x02
     5f8:	8b 81       	ldd	r24, Y+3	; 0x03
     5fa:	9c 81       	ldd	r25, Y+4	; 0x04
     5fc:	ad 81       	ldd	r26, Y+5	; 0x05
     5fe:	be 81       	ldd	r27, Y+6	; 0x06
     600:	f9 01       	movw	r30, r18
     602:	80 83       	st	Z, r24
     604:	91 83       	std	Z+1, r25	; 0x01
     606:	a2 83       	std	Z+2, r26	; 0x02
     608:	b3 83       	std	Z+3, r27	; 0x03
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	2f 81       	ldd	r18, Y+7	; 0x07
     610:	38 85       	ldd	r19, Y+8	; 0x08
     612:	fc 01       	movw	r30, r24
     614:	35 83       	std	Z+5, r19	; 0x05
     616:	24 83       	std	Z+4, r18	; 0x04
     618:	29 85       	ldd	r18, Y+9	; 0x09
     61a:	3a 85       	ldd	r19, Y+10	; 0x0a
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	fc 01       	movw	r30, r24
     622:	37 83       	std	Z+7, r19	; 0x07
     624:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
     626:	2c 96       	adiw	r28, 0x0c	; 12
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	08 95       	ret

00000640 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>:
				 * @param uartPort Which UART port on the board to utilize.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	29 97       	sbiw	r28, 0x09	; 9
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	4b 83       	std	Y+3, r20	; 0x03
     662:	5c 83       	std	Y+4, r21	; 0x04
     664:	6d 83       	std	Y+5, r22	; 0x05
     666:	7e 83       	std	Y+6, r23	; 0x06
     668:	2f 83       	std	Y+7, r18	; 0x07
     66a:	08 87       	std	Y+8, r16	; 0x08
     66c:	e9 86       	std	Y+9, r14	; 0x09
					bool useDoubleSpeedMode = false) :
				timer(F_CPU, 1024, 300), 
				baudRate(baudRate),
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	2a e0       	ldi	r18, 0x0A	; 10
     674:	32 e0       	ldi	r19, 0x02	; 2
     676:	fc 01       	movw	r30, r24
     678:	31 83       	std	Z+1, r19	; 0x01
     67a:	20 83       	st	Z, r18
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	02 96       	adiw	r24, 0x02	; 2
     682:	1c e2       	ldi	r17, 0x2C	; 44
     684:	e1 2e       	mov	r14, r17
     686:	ff 24       	eor	r15, r15
     688:	f3 94       	inc	r15
     68a:	00 e0       	ldi	r16, 0x00	; 0
     68c:	10 e0       	ldi	r17, 0x00	; 0
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	34 e0       	ldi	r19, 0x04	; 4
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	54 e2       	ldi	r21, 0x24	; 36
     696:	64 ef       	ldi	r22, 0xF4	; 244
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN10helicopter4util5TimerC1Emim>
     69e:	29 81       	ldd	r18, Y+1	; 0x01
     6a0:	3a 81       	ldd	r19, Y+2	; 0x02
     6a2:	8b 81       	ldd	r24, Y+3	; 0x03
     6a4:	9c 81       	ldd	r25, Y+4	; 0x04
     6a6:	ad 81       	ldd	r26, Y+5	; 0x05
     6a8:	be 81       	ldd	r27, Y+6	; 0x06
     6aa:	f9 01       	movw	r30, r18
     6ac:	82 87       	std	Z+10, r24	; 0x0a
     6ae:	93 87       	std	Z+11, r25	; 0x0b
     6b0:	a4 87       	std	Z+12, r26	; 0x0c
     6b2:	b5 87       	std	Z+13, r27	; 0x0d
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	2f 81       	ldd	r18, Y+7	; 0x07
     6ba:	fc 01       	movw	r30, r24
     6bc:	26 87       	std	Z+14, r18	; 0x0e
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	28 85       	ldd	r18, Y+8	; 0x08
     6c4:	fc 01       	movw	r30, r24
     6c6:	27 87       	std	Z+15, r18	; 0x0f
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	29 85       	ldd	r18, Y+9	; 0x09
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 8b       	std	Z+16, r18	; 0x10
				{}
     6d2:	29 96       	adiw	r28, 0x09	; 9
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	08 95       	ret

000006ec <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * This is because internally, the message builder 'builds' the message as the bytes
				 * are received. If another message starts to be received and starts inserting
				 * bytes into the same internal message structure, it will corrupt the message
				 * being built. 
				 */
				RadioInterface(SerialDriver *serialDriver):
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
     6f2:	1f 92       	push	r1
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	9a 83       	std	Y+2, r25	; 0x02
     6fa:	89 83       	std	Y+1, r24	; 0x01
     6fc:	7c 83       	std	Y+4, r23	; 0x04
     6fe:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	2b 81       	ldd	r18, Y+3	; 0x03
     706:	3c 81       	ldd	r19, Y+4	; 0x04
     708:	fc 01       	movw	r30, r24
     70a:	31 83       	std	Z+1, r19	; 0x01
     70c:	20 83       	st	Z, r18
					{}
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int rawMagZ;
			
			public:
			
			SystemModel():
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	1f 92       	push	r1
     722:	1f 92       	push	r1
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
			rawMagX(0),
			rawMagY(0),
			rawMagZ(0)
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	fc 01       	movw	r30, r24
     732:	11 82       	std	Z+1, r1	; 0x01
     734:	10 82       	st	Z, r1
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	fc 01       	movw	r30, r24
     73c:	13 82       	std	Z+3, r1	; 0x03
     73e:	12 82       	std	Z+2, r1	; 0x02
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	fc 01       	movw	r30, r24
     746:	15 82       	std	Z+5, r1	; 0x05
     748:	14 82       	std	Z+4, r1	; 0x04
			{
				
			}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <main>:
using namespace helicopter::drivers;
using namespace helicopter::interfaces;
using namespace helicopter::model;

int main(void)
{	
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	2e 97       	sbiw	r28, 0x0e	; 14
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
     774:	86 e0       	ldi	r24, 0x06	; 6
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
     77c:	8c 01       	movw	r16, r24
     77e:	c8 01       	movw	r24, r16
     780:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN10helicopter5model11SystemModelC1Ev>
     784:	1a 83       	std	Y+2, r17	; 0x02
     786:	09 83       	std	Y+1, r16	; 0x01
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, true, true);
     788:	81 e1       	ldi	r24, 0x11	; 17
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
     790:	6c 01       	movw	r12, r24
     792:	ee 24       	eor	r14, r14
     794:	e3 94       	inc	r14
     796:	01 e0       	ldi	r16, 0x01	; 1
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	51 ee       	ldi	r21, 0xE1	; 225
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	c6 01       	movw	r24, r12
     7a4:	0e 94 20 03 	call	0x640	; 0x640 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>
     7a8:	dc 82       	std	Y+4, r13	; 0x04
     7aa:	cb 82       	std	Y+3, r12	; 0x03
	serialDriver->initialize();
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	9c 81       	ldd	r25, Y+4	; 0x04
     7b0:	fc 01       	movw	r30, r24
     7b2:	80 81       	ld	r24, Z
     7b4:	91 81       	ldd	r25, Z+1	; 0x01
     7b6:	04 96       	adiw	r24, 0x04	; 4
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 81       	ld	r18, Z
     7bc:	31 81       	ldd	r19, Z+1	; 0x01
     7be:	8b 81       	ldd	r24, Y+3	; 0x03
     7c0:	9c 81       	ldd	r25, Y+4	; 0x04
     7c2:	f9 01       	movw	r30, r18
     7c4:	19 95       	eicall
	
	
	RadioInterface *radioInterface = new RadioInterface(serialDriver);
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
     7ce:	8c 01       	movw	r16, r24
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	bc 01       	movw	r22, r24
     7d6:	c8 01       	movw	r24, r16
     7d8:	0e 94 76 03 	call	0x6ec	; 0x6ec <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverE>
     7dc:	1e 83       	std	Y+6, r17	; 0x06
     7de:	0d 83       	std	Y+5, r16	; 0x05
	
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 50 times a second
     7e0:	8b e0       	ldi	r24, 0x0B	; 11
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
     7e8:	7c 01       	movw	r14, r24
     7ea:	49 81       	ldd	r20, Y+1	; 0x01
     7ec:	5a 81       	ldd	r21, Y+2	; 0x02
     7ee:	8d 81       	ldd	r24, Y+5	; 0x05
     7f0:	9e 81       	ldd	r25, Y+6	; 0x06
     7f2:	0a e0       	ldi	r16, 0x0A	; 10
     7f4:	10 e0       	ldi	r17, 0x00	; 0
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	bc 01       	movw	r22, r24
     7fc:	c7 01       	movw	r24, r14
     7fe:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     802:	f8 86       	std	Y+8, r15	; 0x08
     804:	ef 82       	std	Y+7, r14	; 0x07

	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 50 times a second
     806:	8b e0       	ldi	r24, 0x0B	; 11
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
     80e:	7c 01       	movw	r14, r24
     810:	49 81       	ldd	r20, Y+1	; 0x01
     812:	5a 81       	ldd	r21, Y+2	; 0x02
     814:	8d 81       	ldd	r24, Y+5	; 0x05
     816:	9e 81       	ldd	r25, Y+6	; 0x06
     818:	0a e0       	ldi	r16, 0x0A	; 10
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	bc 01       	movw	r22, r24
     822:	c7 01       	movw	r24, r14
     824:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     828:	fa 86       	std	Y+10, r15	; 0x0a
     82a:	e9 86       	std	Y+9, r14	; 0x09
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, TIMER_FREQUENCY_HZ);//starting at tick 3, execute once a second
     82c:	8a e0       	ldi	r24, 0x0A	; 10
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
     834:	8c 01       	movw	r16, r24
     836:	23 e0       	ldi	r18, 0x03	; 3
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	48 ec       	ldi	r20, 0xC8	; 200
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	62 e0       	ldi	r22, 0x02	; 2
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	c8 01       	movw	r24, r16
     844:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>
     848:	1c 87       	std	Y+12, r17	; 0x0c
     84a:	0b 87       	std	Y+11, r16	; 0x0b
		
	
	
	Scheduler *scheduler = Scheduler::getScheduler();
     84c:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
     850:	9e 87       	std	Y+14, r25	; 0x0e
     852:	8d 87       	std	Y+13, r24	; 0x0d
	
	scheduler->addTask(flashTask);
     854:	2b 85       	ldd	r18, Y+11	; 0x0b
     856:	3c 85       	ldd	r19, Y+12	; 0x0c
     858:	8d 85       	ldd	r24, Y+13	; 0x0d
     85a:	9e 85       	ldd	r25, Y+14	; 0x0e
     85c:	b9 01       	movw	r22, r18
     85e:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
     862:	2f 81       	ldd	r18, Y+7	; 0x07
     864:	38 85       	ldd	r19, Y+8	; 0x08
     866:	8d 85       	ldd	r24, Y+13	; 0x0d
     868:	9e 85       	ldd	r25, Y+14	; 0x0e
     86a:	b9 01       	movw	r22, r18
     86c:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
     870:	29 85       	ldd	r18, Y+9	; 0x09
     872:	3a 85       	ldd	r19, Y+10	; 0x0a
     874:	8d 85       	ldd	r24, Y+13	; 0x0d
     876:	9e 85       	ldd	r25, Y+14	; 0x0e
     878:	b9 01       	movw	r22, r18
     87a:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
     87e:	8d 85       	ldd	r24, Y+13	; 0x0d
     880:	9e 85       	ldd	r25, Y+14	; 0x0e
     882:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
     886:	8d 85       	ldd	r24, Y+13	; 0x0d
     888:	9e 85       	ldd	r25, Y+14	; 0x0e
     88a:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	
	while(1)
	{
		scheduler->dispatch(); //ensure it includes processor sleeping.
     88e:	8d 85       	ldd	r24, Y+13	; 0x0d
     890:	9e 85       	ldd	r25, Y+14	; 0x0e
     892:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
     896:	fb cf       	rjmp	.-10     	; 0x88e <main+0x13a>

00000898 <_ZN10helicopter8messages7Message14getMessageSizeEv>:
				byte getType()
				{
					return msgType;
				}
			
				int getMessageSize()
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	1f 92       	push	r1
     89e:	1f 92       	push	r1
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
				{
					return msgSize;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	fc 01       	movw	r30, r24
     8ae:	83 81       	ldd	r24, Z+3	; 0x03
     8b0:	94 81       	ldd	r25, Z+4	; 0x04
				}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_>:

using namespace helicopter::util::common;
using namespace helicopter::interfaces;

void RadioInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	2d 97       	sbiw	r28, 0x0d	; 13
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	9d 83       	std	Y+5, r25	; 0x05
     8d6:	8c 83       	std	Y+4, r24	; 0x04
     8d8:	7f 83       	std	Y+7, r23	; 0x07
     8da:	6e 83       	std	Y+6, r22	; 0x06
     8dc:	59 87       	std	Y+9, r21	; 0x09
     8de:	48 87       	std	Y+8, r20	; 0x08
     8e0:	3b 87       	std	Y+11, r19	; 0x0b
     8e2:	2a 87       	std	Y+10, r18	; 0x0a
     8e4:	1d 87       	std	Y+13, r17	; 0x0d
     8e6:	0c 87       	std	Y+12, r16	; 0x0c
	//These fields can overflow, but that is intentional.
	for (int i = 0; i < payloadSize; i++)
     8e8:	1a 82       	std	Y+2, r1	; 0x02
     8ea:	19 82       	std	Y+1, r1	; 0x01
     8ec:	26 c0       	rjmp	.+76     	; 0x93a <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_+0x7e>
	{
		byte b = msgPayload[i];
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	2e 81       	ldd	r18, Y+6	; 0x06
     8f4:	3f 81       	ldd	r19, Y+7	; 0x07
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	8b 83       	std	Y+3, r24	; 0x03
		
		checksumA = (byte) (checksumA + b);
     900:	8a 85       	ldd	r24, Y+10	; 0x0a
     902:	9b 85       	ldd	r25, Y+11	; 0x0b
     904:	fc 01       	movw	r30, r24
     906:	90 81       	ld	r25, Z
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	29 2f       	mov	r18, r25
     90c:	28 0f       	add	r18, r24
     90e:	8a 85       	ldd	r24, Y+10	; 0x0a
     910:	9b 85       	ldd	r25, Y+11	; 0x0b
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
     916:	8c 85       	ldd	r24, Y+12	; 0x0c
     918:	9d 85       	ldd	r25, Y+13	; 0x0d
     91a:	fc 01       	movw	r30, r24
     91c:	20 81       	ld	r18, Z
     91e:	8a 85       	ldd	r24, Y+10	; 0x0a
     920:	9b 85       	ldd	r25, Y+11	; 0x0b
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	28 0f       	add	r18, r24
     928:	8c 85       	ldd	r24, Y+12	; 0x0c
     92a:	9d 85       	ldd	r25, Y+13	; 0x0d
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
using namespace helicopter::interfaces;

void RadioInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	//These fields can overflow, but that is intentional.
	for (int i = 0; i < payloadSize; i++)
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	9a 83       	std	Y+2, r25	; 0x02
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	29 81       	ldd	r18, Y+1	; 0x01
     93e:	3a 81       	ldd	r19, Y+2	; 0x02
     940:	88 85       	ldd	r24, Y+8	; 0x08
     942:	99 85       	ldd	r25, Y+9	; 0x09
     944:	28 17       	cp	r18, r24
     946:	39 07       	cpc	r19, r25
     948:	0c f0       	brlt	.+2      	; 0x94c <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_+0x90>
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	44 23       	and	r20, r20
     94e:	79 f6       	brne	.-98     	; 0x8ee <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_+0x32>
		byte b = msgPayload[i];
		
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
     950:	2d 96       	adiw	r28, 0x0d	; 13
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE>:

int RadioInterface::transmit(Message *msgToSend)
{
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	64 97       	sbiw	r28, 0x14	; 20
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	9a 8b       	std	Y+18, r25	; 0x12
     988:	89 8b       	std	Y+17, r24	; 0x11
     98a:	7c 8b       	std	Y+20, r23	; 0x14
     98c:	6b 8b       	std	Y+19, r22	; 0x13
		
		delete [] msgPayload;
	}
	
	return status;
}
     98e:	ed b6       	in	r14, 0x3d	; 61
     990:	fe b6       	in	r15, 0x3e	; 62
	}
}

int RadioInterface::transmit(Message *msgToSend)
{
	int status = 0;
     992:	1a 82       	std	Y+2, r1	; 0x02
     994:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
     996:	8b 89       	ldd	r24, Y+19	; 0x13
     998:	9c 89       	ldd	r25, Y+20	; 0x14
     99a:	00 97       	sbiw	r24, 0x00	; 0
     99c:	09 f4       	brne	.+2      	; 0x9a0 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x3a>
     99e:	b1 c0       	rjmp	.+354    	; 0xb02 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x19c>
     9a0:	8d b7       	in	r24, 0x3d	; 61
     9a2:	9e b7       	in	r25, 0x3e	; 62
     9a4:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
     9a6:	8b 89       	ldd	r24, Y+19	; 0x13
     9a8:	9c 89       	ldd	r25, Y+20	; 0x14
     9aa:	fc 01       	movw	r30, r24
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	04 96       	adiw	r24, 0x04	; 4
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 81       	ld	r18, Z
     9b6:	31 81       	ldd	r19, Z+1	; 0x01
     9b8:	8b 89       	ldd	r24, Y+19	; 0x13
     9ba:	9c 89       	ldd	r25, Y+20	; 0x14
     9bc:	f9 01       	movw	r30, r18
     9be:	19 95       	eicall
     9c0:	9e 83       	std	Y+6, r25	; 0x06
     9c2:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
     9c4:	8b 89       	ldd	r24, Y+19	; 0x13
     9c6:	9c 89       	ldd	r25, Y+20	; 0x14
     9c8:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN10helicopter8messages7Message14getMessageSizeEv>
     9cc:	98 87       	std	Y+8, r25	; 0x08
     9ce:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
     9d0:	8f 81       	ldd	r24, Y+7	; 0x07
     9d2:	98 85       	ldd	r25, Y+8	; 0x08
     9d4:	05 96       	adiw	r24, 0x05	; 5
     9d6:	9a 87       	std	Y+10, r25	; 0x0a
     9d8:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
     9da:	89 85       	ldd	r24, Y+9	; 0x09
     9dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	9c 87       	std	Y+12, r25	; 0x0c
     9e2:	8b 87       	std	Y+11, r24	; 0x0b
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	2d b7       	in	r18, 0x3d	; 61
     9e8:	3e b7       	in	r19, 0x3e	; 62
     9ea:	28 1b       	sub	r18, r24
     9ec:	39 0b       	sbc	r19, r25
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	3e bf       	out	0x3e, r19	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	2d bf       	out	0x3d, r18	; 61
     9f8:	8d b7       	in	r24, 0x3d	; 61
     9fa:	9e b7       	in	r25, 0x3e	; 62
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	9e 87       	std	Y+14, r25	; 0x0e
     a00:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = RadioInterface::SyncByte1;
     a02:	8d 85       	ldd	r24, Y+13	; 0x0d
     a04:	9e 85       	ldd	r25, Y+14	; 0x0e
     a06:	25 eb       	ldi	r18, 0xB5	; 181
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
		completeMsg[1] = RadioInterface::SyncByte2;
     a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a10:	22 e6       	ldi	r18, 0x62	; 98
     a12:	fc 01       	movw	r30, r24
     a14:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = RadioInterface::SyncByte3;
     a16:	8d 85       	ldd	r24, Y+13	; 0x0d
     a18:	9e 85       	ldd	r25, Y+14	; 0x0e
     a1a:	27 ed       	ldi	r18, 0xD7	; 215
     a1c:	fc 01       	movw	r30, r24
     a1e:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
     a20:	4f 81       	ldd	r20, Y+7	; 0x07
     a22:	58 85       	ldd	r21, Y+8	; 0x08
     a24:	8d 85       	ldd	r24, Y+13	; 0x0d
     a26:	9e 85       	ldd	r25, Y+14	; 0x0e
     a28:	03 96       	adiw	r24, 0x03	; 3
     a2a:	2d 81       	ldd	r18, Y+5	; 0x05
     a2c:	3e 81       	ldd	r19, Y+6	; 0x06
     a2e:	b9 01       	movw	r22, r18
     a30:	0e 94 96 13 	call	0x272c	; 0x272c <memcpy>
		
		byte checksumA = 0;
     a34:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
     a36:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
     a38:	fe 01       	movw	r30, r28
     a3a:	70 96       	adiw	r30, 0x10	; 16
     a3c:	9e 01       	movw	r18, r28
     a3e:	21 5f       	subi	r18, 0xF1	; 241
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
     a42:	4f 81       	ldd	r20, Y+7	; 0x07
     a44:	58 85       	ldd	r21, Y+8	; 0x08
     a46:	6d 81       	ldd	r22, Y+5	; 0x05
     a48:	7e 81       	ldd	r23, Y+6	; 0x06
     a4a:	89 89       	ldd	r24, Y+17	; 0x11
     a4c:	9a 89       	ldd	r25, Y+18	; 0x12
     a4e:	8f 01       	movw	r16, r30
     a50:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
     a54:	89 85       	ldd	r24, Y+9	; 0x09
     a56:	9a 85       	ldd	r25, Y+10	; 0x0a
     a58:	02 97       	sbiw	r24, 0x02	; 2
     a5a:	4f 85       	ldd	r20, Y+15	; 0x0f
     a5c:	2d 85       	ldd	r18, Y+13	; 0x0d
     a5e:	3e 85       	ldd	r19, Y+14	; 0x0e
     a60:	82 0f       	add	r24, r18
     a62:	93 1f       	adc	r25, r19
     a64:	fc 01       	movw	r30, r24
     a66:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
     a68:	89 85       	ldd	r24, Y+9	; 0x09
     a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	48 89       	ldd	r20, Y+16	; 0x10
     a70:	2d 85       	ldd	r18, Y+13	; 0x0d
     a72:	3e 85       	ldd	r19, Y+14	; 0x0e
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
     a78:	fc 01       	movw	r30, r24
     a7a:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     a7c:	1c 82       	std	Y+4, r1	; 0x04
     a7e:	1b 82       	std	Y+3, r1	; 0x03
     a80:	23 c0       	rjmp	.+70     	; 0xac8 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x162>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
     a82:	89 89       	ldd	r24, Y+17	; 0x11
     a84:	9a 89       	ldd	r25, Y+18	; 0x12
     a86:	fc 01       	movw	r30, r24
     a88:	80 81       	ld	r24, Z
     a8a:	91 81       	ldd	r25, Z+1	; 0x01
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	06 96       	adiw	r24, 0x06	; 6
     a94:	fc 01       	movw	r30, r24
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	4d 85       	ldd	r20, Y+13	; 0x0d
     a9c:	5e 85       	ldd	r21, Y+14	; 0x0e
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	84 0f       	add	r24, r20
     aa4:	95 1f       	adc	r25, r21
     aa6:	fc 01       	movw	r30, r24
     aa8:	40 81       	ld	r20, Z
     aaa:	89 89       	ldd	r24, Y+17	; 0x11
     aac:	9a 89       	ldd	r25, Y+18	; 0x12
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	64 2f       	mov	r22, r20
     ab6:	f9 01       	movw	r30, r18
     ab8:	19 95       	eicall
     aba:	9a 83       	std	Y+2, r25	; 0x02
     abc:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	2b 81       	ldd	r18, Y+3	; 0x03
     aca:	3c 81       	ldd	r19, Y+4	; 0x04
     acc:	89 85       	ldd	r24, Y+9	; 0x09
     ace:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad0:	28 17       	cp	r18, r24
     ad2:	39 07       	cpc	r19, r25
     ad4:	34 f4       	brge	.+12     	; 0xae2 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x17c>
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	11 f4       	brne	.+4      	; 0xae2 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x17c>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x17e>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	88 23       	and	r24, r24
     ae6:	69 f6       	brne	.-102    	; 0xa82 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x11c>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete [] msgPayload;
     ae8:	8d 81       	ldd	r24, Y+5	; 0x05
     aea:	9e 81       	ldd	r25, Y+6	; 0x06
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	21 f0       	breq	.+8      	; 0xaf8 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x192>
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZdaPv>
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de be       	out	0x3e, r13	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	fe be       	out	0x3e, r15	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	ed be       	out	0x3d, r14	; 61
     b10:	64 96       	adiw	r28, 0x14	; 20
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	08 95       	ret

00000b2e <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE>:

int RadioInterface::receive(Message * &receivedMessage)
{
     b2e:	cf 92       	push	r12
     b30:	df 92       	push	r13
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	66 97       	sbiw	r28, 0x16	; 22
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	9c 8b       	std	Y+20, r25	; 0x14
     b50:	8b 8b       	std	Y+19, r24	; 0x13
     b52:	7e 8b       	std	Y+22, r23	; 0x16
     b54:	6d 8b       	std	Y+21, r22	; 0x15
	{
		receivedMessage = NULL;
	}
	
	return status;
     b56:	ed b6       	in	r14, 0x3d	; 61
     b58:	fe b6       	in	r15, 0x3e	; 62
	return status;
}

int RadioInterface::receive(Message * &receivedMessage)
{
	int status = 0;
     b5a:	1a 82       	std	Y+2, r1	; 0x02
     b5c:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
     b5e:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
     b60:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
     b62:	1d 86       	std	Y+13, r1	; 0x0d
	

	//Read until the sync bytes are received or we time out.
	//Throw away the 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
     b64:	1d c0       	rjmp	.+58     	; 0xba0 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x72>
	{
		firstSyncByte = secondSyncByte;
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
     b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6c:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte);
     b6e:	8b 89       	ldd	r24, Y+19	; 0x13
     b70:	9c 89       	ldd	r25, Y+20	; 0x14
     b72:	fc 01       	movw	r30, r24
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	fc 01       	movw	r30, r24
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	08 96       	adiw	r24, 0x08	; 8
     b80:	fc 01       	movw	r30, r24
     b82:	20 81       	ld	r18, Z
     b84:	31 81       	ldd	r19, Z+1	; 0x01
     b86:	8b 89       	ldd	r24, Y+19	; 0x13
     b88:	9c 89       	ldd	r25, Y+20	; 0x14
     b8a:	fc 01       	movw	r30, r24
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	ae 01       	movw	r20, r28
     b92:	43 5f       	subi	r20, 0xF3	; 243
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
     b96:	ba 01       	movw	r22, r20
     b98:	f9 01       	movw	r30, r18
     b9a:	19 95       	eicall
     b9c:	9a 83       	std	Y+2, r25	; 0x02
     b9e:	89 83       	std	Y+1, r24	; 0x01
    byte thirdSyncByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away the 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	85 3b       	cpi	r24, 0xB5	; 181
     ba4:	31 f4       	brne	.+12     	; 0xbb2 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x84>
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	82 36       	cpi	r24, 0x62	; 98
     baa:	19 f4       	brne	.+6      	; 0xbb2 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x84>
     bac:	8d 85       	ldd	r24, Y+13	; 0x0d
     bae:	87 3d       	cpi	r24, 0xD7	; 215
     bb0:	31 f0       	breq	.+12     	; 0xbbe <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x90>
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	11 f4       	brne	.+4      	; 0xbbe <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x90>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x92>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	88 23       	and	r24, r24
     bc2:	89 f6       	brne	.-94     	; 0xb66 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x38>
		//TODO note:
		//While there is a timeout mechanism for waiting on the port, if a huge amount of
		//data arrived very rapidly and this kept processing the data, it would never timeout.
	}
	
	if (status == 0)
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	9a 81       	ldd	r25, Y+2	; 0x02
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	09 f0       	breq	.+2      	; 0xbce <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0xa0>
     bcc:	1a c1       	rjmp	.+564    	; 0xe02 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2d4>
	{
		
		//once we have found a valid message, get the message ID
		byte msgType = 0;
     bce:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType);
     bd0:	8b 89       	ldd	r24, Y+19	; 0x13
     bd2:	9c 89       	ldd	r25, Y+20	; 0x14
     bd4:	fc 01       	movw	r30, r24
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	fc 01       	movw	r30, r24
     bdc:	80 81       	ld	r24, Z
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	08 96       	adiw	r24, 0x08	; 8
     be2:	fc 01       	movw	r30, r24
     be4:	20 81       	ld	r18, Z
     be6:	31 81       	ldd	r19, Z+1	; 0x01
     be8:	8b 89       	ldd	r24, Y+19	; 0x13
     bea:	9c 89       	ldd	r25, Y+20	; 0x14
     bec:	fc 01       	movw	r30, r24
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	ae 01       	movw	r20, r28
     bf4:	42 5f       	subi	r20, 0xF2	; 242
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	ba 01       	movw	r22, r20
     bfa:	f9 01       	movw	r30, r18
     bfc:	19 95       	eicall
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	09 f0       	breq	.+2      	; 0xc0c <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0xde>
     c0a:	fb c0       	rjmp	.+502    	; 0xe02 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2d4>
		{
			int msgSize = 0;
     c0c:	1e 82       	std	Y+6, r1	; 0x06
     c0e:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
     c10:	8e 85       	ldd	r24, Y+14	; 0x0e
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	91 05       	cpc	r25, r1
     c1a:	29 f4       	brne	.+10     	; 0xc26 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0xf8>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
     c1c:	87 e0       	ldi	r24, 0x07	; 7
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
					break;
     c24:	26 c0       	rjmp	.+76     	; 0xc72 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x144>
				default:
					//unrecognized message type.
//					status = -2;
status = serialDriver->receiveByte(msgType);
     c26:	8b 89       	ldd	r24, Y+19	; 0x13
     c28:	9c 89       	ldd	r25, Y+20	; 0x14
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	08 96       	adiw	r24, 0x08	; 8
     c38:	fc 01       	movw	r30, r24
     c3a:	20 81       	ld	r18, Z
     c3c:	31 81       	ldd	r19, Z+1	; 0x01
     c3e:	8b 89       	ldd	r24, Y+19	; 0x13
     c40:	9c 89       	ldd	r25, Y+20	; 0x14
     c42:	fc 01       	movw	r30, r24
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	ae 01       	movw	r20, r28
     c4a:	42 5f       	subi	r20, 0xF2	; 242
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	ba 01       	movw	r22, r20
     c50:	f9 01       	movw	r30, r18
     c52:	19 95       	eicall
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
if (status == -1) {break;}else {
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	ff ef       	ldi	r31, 0xFF	; 255
     c60:	9f 07       	cpc	r25, r31
     c62:	31 f0       	breq	.+12     	; 0xc70 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x142>
					status = msgType;
     c64:	8e 85       	ldd	r24, Y+14	; 0x0e
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
					break;
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x144>
					break;
				default:
					//unrecognized message type.
//					status = -2;
status = serialDriver->receiveByte(msgType);
if (status == -1) {break;}else {
     c70:	00 00       	nop
					status = msgType;
					break;
}
			}
			
			if (status == 0)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	09 f0       	breq	.+2      	; 0xc7c <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x14e>
     c7a:	c3 c0       	rjmp	.+390    	; 0xe02 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2d4>
     c7c:	8d b7       	in	r24, 0x3d	; 61
     c7e:	9e b7       	in	r25, 0x3e	; 62
     c80:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	9a 87       	std	Y+10, r25	; 0x0a
     c8a:	89 87       	std	Y+9, r24	; 0x09
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	2d b7       	in	r18, 0x3d	; 61
     c90:	3e b7       	in	r19, 0x3e	; 62
     c92:	28 1b       	sub	r18, r24
     c94:	39 0b       	sbc	r19, r25
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	3e bf       	out	0x3e, r19	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	2d bf       	out	0x3d, r18	; 61
     ca0:	8d b7       	in	r24, 0x3d	; 61
     ca2:	9e b7       	in	r25, 0x3e	; 62
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	9c 87       	std	Y+12, r25	; 0x0c
     ca8:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
     caa:	2e 85       	ldd	r18, Y+14	; 0x0e
     cac:	8b 85       	ldd	r24, Y+11	; 0x0b
     cae:	9c 85       	ldd	r25, Y+12	; 0x0c
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
							
							
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	98 87       	std	Y+8, r25	; 0x08
     cba:	8f 83       	std	Y+7, r24	; 0x07
     cbc:	21 c0       	rjmp	.+66     	; 0xd00 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x1d2>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
     cbe:	8b 89       	ldd	r24, Y+19	; 0x13
     cc0:	9c 89       	ldd	r25, Y+20	; 0x14
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	fc 01       	movw	r30, r24
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	08 96       	adiw	r24, 0x08	; 8
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 81       	ld	r18, Z
     cd4:	31 81       	ldd	r19, Z+1	; 0x01
     cd6:	4b 85       	ldd	r20, Y+11	; 0x0b
     cd8:	5c 85       	ldd	r21, Y+12	; 0x0c
     cda:	8f 81       	ldd	r24, Y+7	; 0x07
     cdc:	98 85       	ldd	r25, Y+8	; 0x08
     cde:	48 0f       	add	r20, r24
     ce0:	59 1f       	adc	r21, r25
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	9c 89       	ldd	r25, Y+20	; 0x14
     ce6:	fc 01       	movw	r30, r24
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	ba 01       	movw	r22, r20
     cee:	f9 01       	movw	r30, r18
     cf0:	19 95       	eicall
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
							
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	98 87       	std	Y+8, r25	; 0x08
     cfe:	8f 83       	std	Y+7, r24	; 0x07
     d00:	2f 81       	ldd	r18, Y+7	; 0x07
     d02:	38 85       	ldd	r19, Y+8	; 0x08
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	28 17       	cp	r18, r24
     d0a:	39 07       	cpc	r19, r25
     d0c:	34 f4       	brge	.+12     	; 0xd1a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x1ec>
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	11 f4       	brne	.+4      	; 0xd1a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x1ec>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x1ee>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	88 23       	and	r24, r24
     d1e:	79 f6       	brne	.-98     	; 0xcbe <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x190>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
				}
							
				if (status == 0)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	09 f0       	breq	.+2      	; 0xd2a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x1fc>
     d28:	67 c0       	rjmp	.+206    	; 0xdf8 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2ca>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
     d2a:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
     d2c:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
     d2e:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
     d30:	1a 8a       	std	Y+18, r1	; 0x12
								
					//TODO status is overwritten
					status = serialDriver->receiveByte(messageChecksumA);
     d32:	8b 89       	ldd	r24, Y+19	; 0x13
     d34:	9c 89       	ldd	r25, Y+20	; 0x14
     d36:	fc 01       	movw	r30, r24
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	fc 01       	movw	r30, r24
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	08 96       	adiw	r24, 0x08	; 8
     d44:	fc 01       	movw	r30, r24
     d46:	20 81       	ld	r18, Z
     d48:	31 81       	ldd	r19, Z+1	; 0x01
     d4a:	8b 89       	ldd	r24, Y+19	; 0x13
     d4c:	9c 89       	ldd	r25, Y+20	; 0x14
     d4e:	fc 01       	movw	r30, r24
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	ae 01       	movw	r20, r28
     d56:	41 5f       	subi	r20, 0xF1	; 241
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	ba 01       	movw	r22, r20
     d5c:	f9 01       	movw	r30, r18
     d5e:	19 95       	eicall
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB);
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	fc 01       	movw	r30, r24
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	08 96       	adiw	r24, 0x08	; 8
     d76:	fc 01       	movw	r30, r24
     d78:	20 81       	ld	r18, Z
     d7a:	31 81       	ldd	r19, Z+1	; 0x01
     d7c:	8b 89       	ldd	r24, Y+19	; 0x13
     d7e:	9c 89       	ldd	r25, Y+20	; 0x14
     d80:	fc 01       	movw	r30, r24
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	ae 01       	movw	r20, r28
     d88:	40 5f       	subi	r20, 0xF0	; 240
     d8a:	5f 4f       	sbci	r21, 0xFF	; 255
     d8c:	ba 01       	movw	r22, r20
     d8e:	f9 01       	movw	r30, r18
     d90:	19 95       	eicall
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
								
								
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
     d96:	6b 85       	ldd	r22, Y+11	; 0x0b
     d98:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9a:	fe 01       	movw	r30, r28
     d9c:	72 96       	adiw	r30, 0x12	; 18
     d9e:	9e 01       	movw	r18, r28
     da0:	2f 5e       	subi	r18, 0xEF	; 239
     da2:	3f 4f       	sbci	r19, 0xFF	; 255
     da4:	4d 81       	ldd	r20, Y+5	; 0x05
     da6:	5e 81       	ldd	r21, Y+6	; 0x06
     da8:	8b 89       	ldd	r24, Y+19	; 0x13
     daa:	9c 89       	ldd	r25, Y+20	; 0x14
     dac:	8f 01       	movw	r16, r30
     dae:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN10helicopter10interfaces14RadioInterface17calculateChecksumEPciRcS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
     db2:	99 89       	ldd	r25, Y+17	; 0x11
     db4:	8f 85       	ldd	r24, Y+15	; 0x0f
     db6:	98 17       	cp	r25, r24
     db8:	d9 f4       	brne	.+54     	; 0xdf0 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2c2>
     dba:	9a 89       	ldd	r25, Y+18	; 0x12
     dbc:	88 89       	ldd	r24, Y+16	; 0x10
     dbe:	98 17       	cp	r25, r24
     dc0:	b9 f4       	brne	.+46     	; 0xdf0 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2c2>
					{
						//build the message
						switch(msgType)
     dc2:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc4:	88 2f       	mov	r24, r24
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	91 05       	cpc	r25, r1
     dcc:	59 f4       	brne	.+22     	; 0xde4 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2b6>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
     dce:	8b 85       	ldd	r24, Y+11	; 0x0b
     dd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     dd2:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPc>
     dd6:	9c 01       	movw	r18, r24
     dd8:	8d 89       	ldd	r24, Y+21	; 0x15
     dda:	9e 89       	ldd	r25, Y+22	; 0x16
     ddc:	fc 01       	movw	r30, r24
     dde:	31 83       	std	Z+1, r19	; 0x01
     de0:	20 83       	st	Z, r18
							break;
     de2:	05 c0       	rjmp	.+10     	; 0xdee <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2c0>
							default:
								//unrecognized message type.
								status = -2;
     de4:	8e ef       	ldi	r24, 0xFE	; 254
     de6:	9f ef       	ldi	r25, 0xFF	; 255
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
							break;
     dec:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2ca>
								status = -2;
							break;
						}
					}else
					{
						status = -3;
     df0:	8d ef       	ldi	r24, 0xFD	; 253
     df2:	9f ef       	ldi	r25, 0xFF	; 255
     df4:	9a 83       	std	Y+2, r25	; 0x02
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de be       	out	0x3e, r13	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x2e6>
	{
		receivedMessage = NULL;
     e0a:	8d 89       	ldd	r24, Y+21	; 0x15
     e0c:	9e 89       	ldd	r25, Y+22	; 0x16
     e0e:	fc 01       	movw	r30, r24
     e10:	11 82       	std	Z+1, r1	; 0x01
     e12:	10 82       	st	Z, r1
	}
	
	return status;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	fe be       	out	0x3e, r15	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	ed be       	out	0x3d, r14	; 61
     e22:	66 96       	adiw	r28, 0x16	; 22
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	08 95       	ret

00000e40 <_ZN10helicopter8messages7MessageC1Eci>:
				
				int msgSize;
				
			public:
			
				Message (byte msgType, int msgSize):
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	00 d0       	rcall	.+0      	; 0xe46 <_ZN10helicopter8messages7MessageC1Eci+0x6>
     e46:	1f 92       	push	r1
     e48:	1f 92       	push	r1
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	6b 83       	std	Y+3, r22	; 0x03
     e54:	5d 83       	std	Y+5, r21	; 0x05
     e56:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	2e e2       	ldi	r18, 0x2E	; 46
     e5e:	32 e0       	ldi	r19, 0x02	; 2
     e60:	fc 01       	movw	r30, r24
     e62:	31 83       	std	Z+1, r19	; 0x01
     e64:	20 83       	st	Z, r18
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	2b 81       	ldd	r18, Y+3	; 0x03
     e6c:	fc 01       	movw	r30, r24
     e6e:	22 83       	std	Z+2, r18	; 0x02
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	2c 81       	ldd	r18, Y+4	; 0x04
     e76:	3d 81       	ldd	r19, Y+5	; 0x05
     e78:	fc 01       	movw	r30, r24
     e7a:	34 83       	std	Z+4, r19	; 0x04
     e7c:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <_ZN10helicopter8messages7MessageD1Ev>:
				
				virtual ~Message()
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	1f 92       	push	r1
     e94:	1f 92       	push	r1
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
				{
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	2e e2       	ldi	r18, 0x2E	; 46
     ea4:	32 e0       	ldi	r19, 0x02	; 2
     ea6:	fc 01       	movw	r30, r24
     ea8:	31 83       	std	Z+1, r19	; 0x01
     eaa:	20 83       	st	Z, r18
					
				}
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	81 70       	andi	r24, 0x01	; 1
     eb2:	99 27       	eor	r25, r25
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	21 f0       	breq	.+8      	; 0xec0 <_ZN10helicopter8messages7MessageD1Ev+0x32>
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
     ebc:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	08 95       	ret

00000eca <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	1f 92       	push	r1
     ed0:	1f 92       	push	r1
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN10helicopter8messages7MessageD1Ev>
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <_ZN10helicopter8messages7Message8getBytesEv>:
				int getMessageSize()
				{
					return msgSize;
				}
			
				virtual byte *getBytes()
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	1f 92       	push	r1
     efa:	1f 92       	push	r1
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
				{
					return NULL;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
				}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <_ZN10helicopter8messages7Message12buildMessageEPc>:
			
				virtual void buildMessage(byte *message)
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <_ZN10helicopter8messages7Message12buildMessageEPc+0x6>
     f18:	1f 92       	push	r1
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	7c 83       	std	Y+4, r23	; 0x04
     f24:	6b 83       	std	Y+3, r22	; 0x03
				{
					//noop. subclass should implement this.
				}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	1f 92       	push	r1
     f3a:	1f 92       	push	r1
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	63 e0       	ldi	r22, 0x03	; 3
     f4e:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN10helicopter8messages7MessageC1Eci>
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	22 e2       	ldi	r18, 0x22	; 34
     f58:	32 e0       	ldi	r19, 0x02	; 2
     f5a:	fc 01       	movw	r30, r24
     f5c:	31 83       	std	Z+1, r19	; 0x01
     f5e:	20 83       	st	Z, r18
				{
								
				}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <_ZN10helicopter8messages11SyncMessageD1Ev>:
				//Implement virtual distructor.
				
				~SyncMessage()
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	1f 92       	push	r1
     f70:	1f 92       	push	r1
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
				{
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	22 e2       	ldi	r18, 0x22	; 34
     f80:	32 e0       	ldi	r19, 0x02	; 2
     f82:	fc 01       	movw	r30, r24
     f84:	31 83       	std	Z+1, r19	; 0x01
     f86:	20 83       	st	Z, r18
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN10helicopter8messages7MessageD1Ev>
					
				}
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	99 27       	eor	r25, r25
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	21 f0       	breq	.+8      	; 0xfa4 <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <_ZN10helicopter8messages11SyncMessageD0Ev>:
				{
								
				}
				//Implement virtual distructor.
				
				~SyncMessage()
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	1f 92       	push	r1
     fb4:	1f 92       	push	r1
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN10helicopter8messages11SyncMessageD1Ev>
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	00 d0       	rcall	.+0      	; 0xfde <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 20 10 	call	0x2040	; 0x2040 <_Znaj>
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	fc 01       	movw	r30, r24
    1002:	22 81       	ldd	r18, Z+2	; 0x02
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
	
	return msg;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1010:	26 96       	adiw	r28, 0x06	; 6
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <_ZN10helicopter8messages11SyncMessage12buildMessageEPc>:

void SyncMessage::buildMessage(byte *message)
{
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	00 d0       	rcall	.+0      	; 0x1028 <_ZN10helicopter8messages11SyncMessage12buildMessageEPc+0x6>
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	7c 83       	std	Y+4, r23	; 0x04
    1034:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	41 f0       	breq	.+16     	; 0x104e <_ZN10helicopter8messages11SyncMessage12buildMessageEPc+0x2c>
	{
		msgType = message[0];
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	fc 01       	movw	r30, r24
    1044:	20 81       	ld	r18, Z
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	fc 01       	movw	r30, r24
    104c:	22 83       	std	Z+2, r18	; 0x02
	}
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(msgType) +
				sizeof(magX) +
				sizeof(magY) +
				sizeof(magZ);
			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	1f 92       	push	r1
    1062:	1f 92       	push	r1
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
					magX(0),
					magY(0),
					magZ(0)
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	47 e0       	ldi	r20, 0x07	; 7
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN10helicopter8messages7MessageC1Eci>
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	2a e3       	ldi	r18, 0x3A	; 58
    1080:	32 e0       	ldi	r19, 0x02	; 2
    1082:	fc 01       	movw	r30, r24
    1084:	31 83       	std	Z+1, r19	; 0x01
    1086:	20 83       	st	Z, r18
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	fc 01       	movw	r30, r24
    108e:	16 82       	std	Z+6, r1	; 0x06
    1090:	15 82       	std	Z+5, r1	; 0x05
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	fc 01       	movw	r30, r24
    1098:	10 86       	std	Z+8, r1	; 0x08
    109a:	17 82       	std	Z+7, r1	; 0x07
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	12 86       	std	Z+10, r1	; 0x0a
    10a4:	11 86       	std	Z+9, r1	; 0x09
				{
				
				}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	1f 92       	push	r1
    10b6:	1f 92       	push	r1
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	2a e3       	ldi	r18, 0x3A	; 58
    10c6:	32 e0       	ldi	r19, 0x02	; 2
    10c8:	fc 01       	movw	r30, r24
    10ca:	31 83       	std	Z+1, r19	; 0x01
    10cc:	20 83       	st	Z, r18
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN10helicopter8messages7MessageD1Ev>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	81 70       	andi	r24, 0x01	; 1
    10dc:	99 27       	eor	r25, r25
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	21 f0       	breq	.+8      	; 0x10ea <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	1f 92       	push	r1
    10fa:	1f 92       	push	r1
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZdlPv>
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	00 d0       	rcall	.+0      	; 0x1124 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    112e:	87 e0       	ldi	r24, 0x07	; 7
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 20 10 	call	0x2040	; 0x2040 <_Znaj>
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	fc 01       	movw	r30, r24
    1148:	22 81       	ldd	r18, Z+2	; 0x02
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
	
	msgPtr++;
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magX, sizeof(magX));
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	9c 01       	movw	r18, r24
    1162:	2b 5f       	subi	r18, 0xFB	; 251
    1164:	3f 4f       	sbci	r19, 0xFF	; 255
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	42 e0       	ldi	r20, 0x02	; 2
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	b9 01       	movw	r22, r18
    1170:	0e 94 96 13 	call	0x272c	; 0x272c <memcpy>
	
	msgPtr += sizeof(magX);
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magY, sizeof(magY));
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	9c 01       	movw	r18, r24
    1184:	29 5f       	subi	r18, 0xF9	; 249
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	42 e0       	ldi	r20, 0x02	; 2
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	b9 01       	movw	r22, r18
    1192:	0e 94 96 13 	call	0x272c	; 0x272c <memcpy>
	
	msgPtr += sizeof(magY);
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	02 96       	adiw	r24, 0x02	; 2
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magZ, sizeof(magZ));
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	9c 01       	movw	r18, r24
    11a6:	27 5f       	subi	r18, 0xF7	; 247
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	42 e0       	ldi	r20, 0x02	; 2
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	b9 01       	movw	r22, r18
    11b4:	0e 94 96 13 	call	0x272c	; 0x272c <memcpy>
	
	return msg;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11bc:	26 96       	adiw	r28, 0x06	; 6
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x6>
    11d4:	1f 92       	push	r1
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	7c 83       	std	Y+4, r23	; 0x04
    11e0:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	a9 f1       	breq	.+106    	; 0x1254 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x86>
	{
		msgType = message[0];
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 81       	ld	r18, Z
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	fc 01       	movw	r30, r24
    11f8:	22 83       	std	Z+2, r18	; 0x02
		
		message++;
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magX, message, sizeof(magX));
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	05 96       	adiw	r24, 0x05	; 5
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	42 e0       	ldi	r20, 0x02	; 2
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	b9 01       	movw	r22, r18
    1214:	0e 94 96 13 	call	0x272c	; 0x272c <memcpy>
		
		message += sizeof(magX);
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	02 96       	adiw	r24, 0x02	; 2
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magY, message, sizeof(magY));
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	07 96       	adiw	r24, 0x07	; 7
    1228:	2b 81       	ldd	r18, Y+3	; 0x03
    122a:	3c 81       	ldd	r19, Y+4	; 0x04
    122c:	42 e0       	ldi	r20, 0x02	; 2
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	b9 01       	movw	r22, r18
    1232:	0e 94 96 13 	call	0x272c	; 0x272c <memcpy>
		
		message += sizeof(magY);
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	02 96       	adiw	r24, 0x02	; 2
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magZ, message, sizeof(magZ));
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	09 96       	adiw	r24, 0x09	; 9
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	42 e0       	ldi	r20, 0x02	; 2
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	b9 01       	movw	r22, r18
    1250:	0e 94 96 13 	call	0x272c	; 0x272c <memcpy>
	}
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPc>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	00 d0       	rcall	.+0      	; 0x126c <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPc+0xa>
    126c:	1f 92       	push	r1
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    1276:	8b e0       	ldi	r24, 0x0B	; 11
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
    127e:	8c 01       	movw	r16, r24
    1280:	c8 01       	movw	r24, r16
    1282:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    1286:	1a 83       	std	Y+2, r17	; 0x02
    1288:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	fc 01       	movw	r30, r24
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	06 96       	adiw	r24, 0x06	; 6
    1296:	fc 01       	movw	r30, r24
    1298:	20 81       	ld	r18, Z
    129a:	31 81       	ldd	r19, Z+1	; 0x01
    129c:	4b 81       	ldd	r20, Y+3	; 0x03
    129e:	5c 81       	ldd	r21, Y+4	; 0x04
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	ba 01       	movw	r22, r20
    12a6:	f9 01       	movw	r30, r18
    12a8:	19 95       	eicall
	
	return msg;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>:
			
				int MagX() const { return magX; }
				void MagX(int val) { magX = val; }
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi+0x6>
    12c6:	1f 92       	push	r1
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	7c 83       	std	Y+4, r23	; 0x04
    12d2:	6b 83       	std	Y+3, r22	; 0x03
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	2b 81       	ldd	r18, Y+3	; 0x03
    12da:	3c 81       	ldd	r19, Y+4	; 0x04
    12dc:	fc 01       	movw	r30, r24
    12de:	36 83       	std	Z+6, r19	; 0x06
    12e0:	25 83       	std	Z+5, r18	; 0x05
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>:
			
				int MagY() const { return magY; }
				void MagY(int val) { magY = val; }
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi+0x6>
    12f6:	1f 92       	push	r1
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	7c 83       	std	Y+4, r23	; 0x04
    1302:	6b 83       	std	Y+3, r22	; 0x03
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	fc 01       	movw	r30, r24
    130e:	30 87       	std	Z+8, r19	; 0x08
    1310:	27 83       	std	Z+7, r18	; 0x07
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>:
			
				int MagZ() const { return magZ; }
				void MagZ(int val) { magZ = val; }
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	00 d0       	rcall	.+0      	; 0x1326 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi+0x6>
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	7c 83       	std	Y+4, r23	; 0x04
    1332:	6b 83       	std	Y+3, r22	; 0x03
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	2b 81       	ldd	r18, Y+3	; 0x03
    133a:	3c 81       	ldd	r19, Y+4	; 0x04
    133c:	fc 01       	movw	r30, r24
    133e:	32 87       	std	Z+10, r19	; 0x0a
    1340:	21 87       	std	Z+9, r18	; 0x09
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <_ZNK10helicopter5model11SystemModel7RawMagXEv>:
			
			int RawMagX() const { return rawMagX; }
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	1f 92       	push	r1
    1356:	1f 92       	push	r1
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	fc 01       	movw	r30, r24
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <_ZNK10helicopter5model11SystemModel7RawMagYEv>:
			void RawMagX(int val) { rawMagX = val; }
			
			int RawMagY() const { return rawMagY; }
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	1f 92       	push	r1
    137a:	1f 92       	push	r1
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	fc 01       	movw	r30, r24
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <_ZNK10helicopter5model11SystemModel7RawMagZEv>:
			void RawMagY(int val) { rawMagY = val; }
			
			int RawMagZ() const { return rawMagZ; }
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	1f 92       	push	r1
    139e:	1f 92       	push	r1
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	fc 01       	movw	r30, r24
    13ae:	84 81       	ldd	r24, Z+4	; 0x04
    13b0:	95 81       	ldd	r25, Z+5	; 0x05
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>:

using namespace helicopter::model;


SystemTelemetryMessage *SystemModel::CreateTelemetryMessage()
{
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv+0xa>
    13c6:	1f 92       	push	r1
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    13d0:	8b e0       	ldi	r24, 0x0B	; 11
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
    13d8:	8c 01       	movw	r16, r24
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    13e0:	1a 83       	std	Y+2, r17	; 0x02
    13e2:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagX(RawMagX());
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZNK10helicopter5model11SystemModel7RawMagXEv>
    13ec:	9c 01       	movw	r18, r24
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	b9 01       	movw	r22, r18
    13f4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>
	message->MagY(RawMagY());
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZNK10helicopter5model11SystemModel7RawMagYEv>
    1400:	9c 01       	movw	r18, r24
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	b9 01       	movw	r22, r18
    1408:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>
	message->MagZ(RawMagZ());
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZNK10helicopter5model11SystemModel7RawMagZEv>
    1414:	9c 01       	movw	r18, r24
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	b9 01       	movw	r22, r18
    141c:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>
	
	return message;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	08 95       	ret

00001436 <_ZN10helicopter5tasks4Task8getDelayEv>:
				Task (int delay, int period);
				virtual void init(){;}
				virtual void runTask();
				
					
				int getDelay()
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	1f 92       	push	r1
    143c:	1f 92       	push	r1
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	fc 01       	movw	r30, r24
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
				}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	1f 92       	push	r1
    1460:	1f 92       	push	r1
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	fc 01       	movw	r30, r24
    1470:	84 81       	ldd	r24, Z+4	; 0x04
    1472:	95 81       	ldd	r25, Z+5	; 0x05
				}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	00 d0       	rcall	.+0      	; 0x1484 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    1484:	1f 92       	push	r1
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	7c 83       	std	Y+4, r23	; 0x04
    1490:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	fc 01       	movw	r30, r24
    149c:	33 83       	std	Z+3, r19	; 0x03
    149e:	22 83       	std	Z+2, r18	; 0x02
				}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	1f 92       	push	r1
    14b4:	1f 92       	push	r1
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	fc 01       	movw	r30, r24
    14c4:	86 81       	ldd	r24, Z+6	; 0x06
				}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	fc 01       	movw	r30, r24
    14e8:	26 83       	std	Z+6, r18	; 0x06
				}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				void reduceDelay()
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	1f 92       	push	r1
    14fc:	1f 92       	push	r1
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	fc 01       	movw	r30, r24
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	9c 01       	movw	r18, r24
    1512:	21 50       	subi	r18, 0x01	; 1
    1514:	31 09       	sbc	r19, r1
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	fc 01       	movw	r30, r24
    151c:	33 83       	std	Z+3, r19	; 0x03
    151e:	22 83       	std	Z+2, r18	; 0x02
				}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	08 95       	ret

0000152a <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for task execution.
				*/
				void start();
				
				int getNumOfTasks()
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	1f 92       	push	r1
    1530:	1f 92       	push	r1
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	fc 01       	movw	r30, r24
    1540:	84 89       	ldd	r24, Z+20	; 0x14
    1542:	95 89       	ldd	r25, Z+21	; 0x15
				}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	1f 92       	push	r1
    1554:	1f 92       	push	r1
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    1578:	80 91 60 02 	lds	r24, 0x0260
    157c:	90 91 61 02 	lds	r25, 0x0261
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	81 f4       	brne	.+32     	; 0x15a4 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x38>
	{
		//scheduler = new Scheduler(124, 8);
		scheduler = new Scheduler(TARGET_TIMER_COUNT, TIMER_PRESCALER);
    1584:	8a e1       	ldi	r24, 0x1A	; 26
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Znwj>
    158c:	8c 01       	movw	r16, r24
    158e:	40 e4       	ldi	r20, 0x40	; 64
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	62 ee       	ldi	r22, 0xE2	; 226
    1594:	74 e0       	ldi	r23, 0x04	; 4
    1596:	c8 01       	movw	r24, r16
    1598:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>
    159c:	10 93 61 02 	sts	0x0261, r17
    15a0:	00 93 60 02 	sts	0x0260, r16
	}
	
	return scheduler;
    15a4:	80 91 60 02 	lds	r24, 0x0260
    15a8:	90 91 61 02 	lds	r25, 0x0261
}
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>:

Scheduler::Scheduler(int targetTimerCount, PRESCALER prescale)
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x8>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	7c 83       	std	Y+4, r23	; 0x04
    15c8:	6b 83       	std	Y+3, r22	; 0x03
    15ca:	5e 83       	std	Y+6, r21	; 0x06
    15cc:	4d 83       	std	Y+5, r20	; 0x05
{
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	2b 81       	ldd	r18, Y+3	; 0x03
    15d4:	3c 81       	ldd	r19, Y+4	; 0x04
    15d6:	fc 01       	movw	r30, r24
    15d8:	37 8b       	std	Z+23, r19	; 0x17
    15da:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescale;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	2d 81       	ldd	r18, Y+5	; 0x05
    15e2:	3e 81       	ldd	r19, Y+6	; 0x06
    15e4:	fc 01       	movw	r30, r24
    15e6:	31 8f       	std	Z+25, r19	; 0x19
    15e8:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	fc 01       	movw	r30, r24
    15f0:	15 8a       	std	Z+21, r1	; 0x15
    15f2:	14 8a       	std	Z+20, r1	; 0x14
}
    15f4:	26 96       	adiw	r28, 0x06	; 6
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
{
	
}

int Scheduler::addTask(Task *task)
{
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	00 d0       	rcall	.+0      	; 0x160c <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    160c:	1f 92       	push	r1
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	7c 83       	std	Y+4, r23	; 0x04
    1618:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	fc 01       	movw	r30, r24
    1620:	84 89       	ldd	r24, Z+20	; 0x14
    1622:	95 89       	ldd	r25, Z+21	; 0x15
    1624:	8a 30       	cpi	r24, 0x0A	; 10
    1626:	91 05       	cpc	r25, r1
    1628:	04 f5       	brge	.+64     	; 0x166a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	fc 01       	movw	r30, r24
    1630:	84 89       	ldd	r24, Z+20	; 0x14
    1632:	95 89       	ldd	r25, Z+21	; 0x15
    1634:	29 81       	ldd	r18, Y+1	; 0x01
    1636:	3a 81       	ldd	r19, Y+2	; 0x02
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	82 0f       	add	r24, r18
    163e:	93 1f       	adc	r25, r19
    1640:	2b 81       	ldd	r18, Y+3	; 0x03
    1642:	3c 81       	ldd	r19, Y+4	; 0x04
    1644:	fc 01       	movw	r30, r24
    1646:	31 83       	std	Z+1, r19	; 0x01
    1648:	20 83       	st	Z, r18
		numOfTasks++;
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	fc 01       	movw	r30, r24
    1650:	84 89       	ldd	r24, Z+20	; 0x14
    1652:	95 89       	ldd	r25, Z+21	; 0x15
    1654:	9c 01       	movw	r18, r24
    1656:	2f 5f       	subi	r18, 0xFF	; 255
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	fc 01       	movw	r30, r24
    1660:	35 8b       	std	Z+21, r19	; 0x15
    1662:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	9f ef       	ldi	r25, 0xFF	; 255
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 d0       	rcall	.+0      	; 0x1682 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    1682:	1f 92       	push	r1
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    168c:	1a 82       	std	Y+2, r1	; 0x02
    168e:	19 82       	std	Y+1, r1	; 0x01
    1690:	24 c0       	rjmp	.+72     	; 0x16da <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	fc 01       	movw	r30, r24
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	fc 01       	movw	r30, r24
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	02 96       	adiw	r24, 0x02	; 2
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 81       	ld	r18, Z
    16b4:	31 81       	ldd	r19, Z+1	; 0x01
    16b6:	4b 81       	ldd	r20, Y+3	; 0x03
    16b8:	5c 81       	ldd	r21, Y+4	; 0x04
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	84 0f       	add	r24, r20
    16c4:	95 1f       	adc	r25, r21
    16c6:	fc 01       	movw	r30, r24
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	f9 01       	movw	r30, r18
    16ce:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	fc 01       	movw	r30, r24
    16e0:	24 89       	ldd	r18, Z+20	; 0x14
    16e2:	35 89       	ldd	r19, Z+21	; 0x15
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	82 17       	cp	r24, r18
    16ec:	93 07       	cpc	r25, r19
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	44 23       	and	r20, r20
    16f4:	71 f6       	brne	.-100    	; 0x1692 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    16f6:	88 e8       	ldi	r24, 0x88	; 136
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	2b 81       	ldd	r18, Y+3	; 0x03
    16fc:	3c 81       	ldd	r19, Y+4	; 0x04
    16fe:	f9 01       	movw	r30, r18
    1700:	26 89       	ldd	r18, Z+22	; 0x16
    1702:	37 89       	ldd	r19, Z+23	; 0x17
    1704:	fc 01       	movw	r30, r24
    1706:	31 83       	std	Z+1, r19	; 0x01
    1708:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    170a:	81 e8       	ldi	r24, 0x81	; 129
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	21 e8       	ldi	r18, 0x81	; 129
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	f9 01       	movw	r30, r18
    1714:	20 81       	ld	r18, Z
    1716:	28 60       	ori	r18, 0x08	; 8
    1718:	fc 01       	movw	r30, r24
    171a:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    171c:	8f e6       	ldi	r24, 0x6F	; 111
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	2f e6       	ldi	r18, 0x6F	; 111
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	f9 01       	movw	r30, r18
    1726:	20 81       	ld	r18, Z
    1728:	22 60       	ori	r18, 0x02	; 2
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    172e:	78 94       	sei
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	00 d0       	rcall	.+0      	; 0x1744 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    174e:	1c 82       	std	Y+4, r1	; 0x04
    1750:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    1752:	1a 82       	std	Y+2, r1	; 0x02
    1754:	19 82       	std	Y+1, r1	; 0x01
    1756:	2f c0       	rjmp	.+94     	; 0x17b6 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x78>
	{
		task = scheduler->getTasks()[i];
    1758:	80 91 60 02 	lds	r24, 0x0260
    175c:	90 91 61 02 	lds	r25, 0x0261
    1760:	0e 94 a7 0a 	call	0x154e	; 0x154e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1764:	9c 01       	movw	r18, r24
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	82 0f       	add	r24, r18
    1770:	93 1f       	adc	r25, r19
    1772:	fc 01       	movw	r30, r24
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    1784:	88 23       	and	r24, r24
    1786:	91 f0       	breq	.+36     	; 0x17ac <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
		{
			task->setIsReadyToRun(false);
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	fc 01       	movw	r30, r24
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	04 96       	adiw	r24, 0x04	; 4
    179e:	fc 01       	movw	r30, r24
    17a0:	20 81       	ld	r18, Z
    17a2:	31 81       	ldd	r19, Z+1	; 0x01
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	f9 01       	movw	r30, r18
    17aa:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	fc 01       	movw	r30, r24
    17bc:	24 89       	ldd	r18, Z+20	; 0x14
    17be:	35 89       	ldd	r19, Z+21	; 0x15
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	82 17       	cp	r24, r18
    17c8:	93 07       	cpc	r25, r19
    17ca:	0c f0       	brlt	.+2      	; 0x17ce <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x90>
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	44 23       	and	r20, r20
    17d0:	19 f6       	brne	.-122    	; 0x1758 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
			task->setIsReadyToRun(false);
			task->runTask();
		}
	}
	
	set_sleep_mode(SLEEP_MODE_IDLE);
    17d2:	83 e5       	ldi	r24, 0x53	; 83
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	23 e5       	ldi	r18, 0x53	; 83
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	f9 01       	movw	r30, r18
    17dc:	20 81       	ld	r18, Z
    17de:	21 7f       	andi	r18, 0xF1	; 241
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 83       	st	Z, r18
	sleep_mode();
    17e4:	83 e5       	ldi	r24, 0x53	; 83
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	23 e5       	ldi	r18, 0x53	; 83
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	f9 01       	movw	r30, r18
    17ee:	20 81       	ld	r18, Z
    17f0:	21 60       	ori	r18, 0x01	; 1
    17f2:	fc 01       	movw	r30, r24
    17f4:	20 83       	st	Z, r18
    17f6:	88 95       	sleep
    17f8:	83 e5       	ldi	r24, 0x53	; 83
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	23 e5       	ldi	r18, 0x53	; 83
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	f9 01       	movw	r30, r18
    1802:	20 81       	ld	r18, Z
    1804:	2e 7f       	andi	r18, 0xFE	; 254
    1806:	fc 01       	movw	r30, r24
    1808:	20 83       	st	Z, r18
}
    180a:	26 96       	adiw	r28, 0x06	; 6
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	1f 92       	push	r1
    1822:	1f 92       	push	r1
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
	switch(this->prescaler)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	fc 01       	movw	r30, r24
    1832:	80 8d       	ldd	r24, Z+24	; 0x18
    1834:	91 8d       	ldd	r25, Z+25	; 0x19
    1836:	80 34       	cpi	r24, 0x40	; 64
    1838:	91 05       	cpc	r25, r1
    183a:	39 f1       	breq	.+78     	; 0x188a <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    183c:	81 34       	cpi	r24, 0x41	; 65
    183e:	91 05       	cpc	r25, r1
    1840:	3c f4       	brge	.+14     	; 0x1850 <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	69 f0       	breq	.+26     	; 0x1862 <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	91 05       	cpc	r25, r1
    184c:	a1 f0       	breq	.+40     	; 0x1876 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    184e:	3b c0       	rjmp	.+118    	; 0x18c6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    1850:	81 15       	cp	r24, r1
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	9f 07       	cpc	r25, r31
    1856:	19 f1       	breq	.+70     	; 0x189e <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    1858:	81 15       	cp	r24, r1
    185a:	24 e0       	ldi	r18, 0x04	; 4
    185c:	92 07       	cpc	r25, r18
    185e:	49 f1       	breq	.+82     	; 0x18b2 <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    1860:	32 c0       	rjmp	.+100    	; 0x18c6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    1862:	81 e8       	ldi	r24, 0x81	; 129
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	21 e8       	ldi	r18, 0x81	; 129
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	21 60       	ori	r18, 0x01	; 1
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
			break;
    1874:	31 c0       	rjmp	.+98     	; 0x18d8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    1876:	81 e8       	ldi	r24, 0x81	; 129
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	21 e8       	ldi	r18, 0x81	; 129
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	f9 01       	movw	r30, r18
    1880:	20 81       	ld	r18, Z
    1882:	22 60       	ori	r18, 0x02	; 2
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18
			break;
    1888:	27 c0       	rjmp	.+78     	; 0x18d8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    188a:	81 e8       	ldi	r24, 0x81	; 129
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	21 e8       	ldi	r18, 0x81	; 129
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	f9 01       	movw	r30, r18
    1894:	20 81       	ld	r18, Z
    1896:	23 60       	ori	r18, 0x03	; 3
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18
			break;
    189c:	1d c0       	rjmp	.+58     	; 0x18d8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    189e:	81 e8       	ldi	r24, 0x81	; 129
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	21 e8       	ldi	r18, 0x81	; 129
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	f9 01       	movw	r30, r18
    18a8:	20 81       	ld	r18, Z
    18aa:	24 60       	ori	r18, 0x04	; 4
    18ac:	fc 01       	movw	r30, r24
    18ae:	20 83       	st	Z, r18
			break;
    18b0:	13 c0       	rjmp	.+38     	; 0x18d8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    18b2:	81 e8       	ldi	r24, 0x81	; 129
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	21 e8       	ldi	r18, 0x81	; 129
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	f9 01       	movw	r30, r18
    18bc:	20 81       	ld	r18, Z
    18be:	25 60       	ori	r18, 0x05	; 5
    18c0:	fc 01       	movw	r30, r24
    18c2:	20 83       	st	Z, r18
			break;
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    18c6:	81 e8       	ldi	r24, 0x81	; 129
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	21 e8       	ldi	r18, 0x81	; 129
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	f9 01       	movw	r30, r18
    18d0:	20 81       	ld	r18, Z
    18d2:	21 60       	ori	r18, 0x01	; 1
    18d4:	fc 01       	movw	r30, r24
    18d6:	20 83       	st	Z, r18
	}
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    18e2:	1f 92       	push	r1
    18e4:	0f 92       	push	r0
    18e6:	00 90 5f 00 	lds	r0, 0x005F
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	00 90 5b 00 	lds	r0, 0x005B
    18f2:	0f 92       	push	r0
    18f4:	2f 93       	push	r18
    18f6:	3f 93       	push	r19
    18f8:	4f 93       	push	r20
    18fa:	5f 93       	push	r21
    18fc:	6f 93       	push	r22
    18fe:	7f 93       	push	r23
    1900:	8f 93       	push	r24
    1902:	9f 93       	push	r25
    1904:	af 93       	push	r26
    1906:	bf 93       	push	r27
    1908:	ef 93       	push	r30
    190a:	ff 93       	push	r31
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	00 d0       	rcall	.+0      	; 0x1912 <__vector_17+0x30>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <__vector_17+0x32>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	Scheduler *scheduler = Scheduler::getScheduler();
    1918:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    1920:	1e 82       	std	Y+6, r1	; 0x06
    1922:	1d 82       	std	Y+5, r1	; 0x05
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1924:	1a 82       	std	Y+2, r1	; 0x02
    1926:	19 82       	std	Y+1, r1	; 0x01
    1928:	33 c0       	rjmp	.+102    	; 0x1990 <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	0e 94 a7 0a 	call	0x154e	; 0x154e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1932:	9c 01       	movw	r18, r24
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	82 0f       	add	r24, r18
    193e:	93 1f       	adc	r25, r19
    1940:	fc 01       	movw	r30, r24
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN10helicopter5tasks4Task8getDelayEv>
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f0       	breq	.+2      	; 0x195a <__vector_17+0x78>
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	22 23       	and	r18, r18
    195c:	81 f0       	breq	.+32     	; 0x197e <__vector_17+0x9c>
		{
			task->setIsReadyToRun(true);
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN10helicopter5tasks4Task9getPeriodEv>
    1970:	9c 01       	movw	r18, r24
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	b9 01       	movw	r22, r18
    1978:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN10helicopter5tasks4Task8setDelayEi>
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN10helicopter5tasks4Task11reduceDelayEv>
{
	Scheduler *scheduler = Scheduler::getScheduler();
	
	Task *task = NULL;
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    1998:	9c 01       	movw	r18, r24
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	82 17       	cp	r24, r18
    19a2:	93 07       	cpc	r25, r19
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <__vector_17+0xc6>
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	44 23       	and	r20, r20
    19aa:	09 f0       	breq	.+2      	; 0x19ae <__vector_17+0xcc>
    19ac:	be cf       	rjmp	.-132    	; 0x192a <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    19ae:	26 96       	adiw	r28, 0x06	; 6
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	ff 91       	pop	r31
    19c0:	ef 91       	pop	r30
    19c2:	bf 91       	pop	r27
    19c4:	af 91       	pop	r26
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	7f 91       	pop	r23
    19cc:	6f 91       	pop	r22
    19ce:	5f 91       	pop	r21
    19d0:	4f 91       	pop	r20
    19d2:	3f 91       	pop	r19
    19d4:	2f 91       	pop	r18
    19d6:	0f 90       	pop	r0
    19d8:	00 92 5b 00 	sts	0x005B, r0
    19dc:	0f 90       	pop	r0
    19de:	00 92 5f 00 	sts	0x005F, r0
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <_ZN10helicopter5tasks4Task4initEv>:
			protected:
				virtual void runTaskImpl(){;}
				
			public:
				Task (int delay, int period);
				virtual void init(){;}
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	1f 92       	push	r1
    19ee:	1f 92       	push	r1
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>:
				
				}
			
				~SystemTelemetryMessage() {}
			
				int MagX() const { return magX; }
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	1f 92       	push	r1
    1a08:	1f 92       	push	r1
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	fc 01       	movw	r30, r24
    1a18:	85 81       	ldd	r24, Z+5	; 0x05
    1a1a:	96 81       	ldd	r25, Z+6	; 0x06
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>:
				void MagX(int val) { magX = val; }
			
				int MagY() const { return magY; }
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	1f 92       	push	r1
    1a2c:	1f 92       	push	r1
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	87 81       	ldd	r24, Z+7	; 0x07
    1a3e:	90 85       	ldd	r25, Z+8	; 0x08
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>:
				void MagY(int val) { magY = val; }
			
				int MagZ() const { return magZ; }
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	1f 92       	push	r1
    1a50:	1f 92       	push	r1
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	fc 01       	movw	r30, r24
    1a60:	81 85       	ldd	r24, Z+9	; 0x09
    1a62:	92 85       	ldd	r25, Z+10	; 0x0a
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <_ZN10helicopter5model11SystemModel7RawMagXEi>:
			{
				
			}
			
			int RawMagX() const { return rawMagX; }
			void RawMagX(int val) { rawMagX = val; }
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <_ZN10helicopter5model11SystemModel7RawMagXEi+0x6>
    1a74:	1f 92       	push	r1
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	7c 83       	std	Y+4, r23	; 0x04
    1a80:	6b 83       	std	Y+3, r22	; 0x03
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	31 83       	std	Z+1, r19	; 0x01
    1a8e:	20 83       	st	Z, r18
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <_ZN10helicopter5model11SystemModel7RawMagYEi>:
			
			int RawMagY() const { return rawMagY; }
			void RawMagY(int val) { rawMagY = val; }
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <_ZN10helicopter5model11SystemModel7RawMagYEi+0x6>
    1aa4:	1f 92       	push	r1
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	7c 83       	std	Y+4, r23	; 0x04
    1ab0:	6b 83       	std	Y+3, r22	; 0x03
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aba:	fc 01       	movw	r30, r24
    1abc:	33 83       	std	Z+3, r19	; 0x03
    1abe:	22 83       	std	Z+2, r18	; 0x02
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	08 95       	ret

00001ace <_ZN10helicopter5model11SystemModel7RawMagZEi>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <_ZN10helicopter5model11SystemModel7RawMagZEi+0x6>
    1ad4:	1f 92       	push	r1
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	7c 83       	std	Y+4, r23	; 0x04
    1ae0:	6b 83       	std	Y+3, r22	; 0x03
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aea:	fc 01       	movw	r30, r24
    1aec:	35 83       	std	Z+5, r19	; 0x05
    1aee:	24 83       	std	Z+4, r18	; 0x04
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks::misctasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	2a 97       	sbiw	r28, 0x0a	; 10
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	7c 83       	std	Y+4, r23	; 0x04
    1b1c:	6b 83       	std	Y+3, r22	; 0x03
    1b1e:	5e 83       	std	Y+6, r21	; 0x06
    1b20:	4d 83       	std	Y+5, r20	; 0x05
    1b22:	38 87       	std	Y+8, r19	; 0x08
    1b24:	2f 83       	std	Y+7, r18	; 0x07
    1b26:	1a 87       	std	Y+10, r17	; 0x0a
    1b28:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	49 85       	ldd	r20, Y+9	; 0x09
    1b30:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b32:	2f 81       	ldd	r18, Y+7	; 0x07
    1b34:	38 85       	ldd	r19, Y+8	; 0x08
    1b36:	b9 01       	movw	r22, r18
    1b38:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN10helicopter5tasks4TaskC1Eii>
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	26 e4       	ldi	r18, 0x46	; 70
    1b42:	32 e0       	ldi	r19, 0x02	; 2
    1b44:	fc 01       	movw	r30, r24
    1b46:	31 83       	std	Z+1, r19	; 0x01
    1b48:	20 83       	st	Z, r18
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b50:	3c 81       	ldd	r19, Y+4	; 0x04
    1b52:	fc 01       	movw	r30, r24
    1b54:	30 87       	std	Z+8, r19	; 0x08
    1b56:	27 83       	std	Z+7, r18	; 0x07
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b60:	fc 01       	movw	r30, r24
    1b62:	32 87       	std	Z+10, r19	; 0x0a
    1b64:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1b66:	2a 96       	adiw	r28, 0x0a	; 10
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>:

bool isOn = false;
void SimTelemetryTask::runTaskImpl() 
{
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	2f 97       	sbiw	r28, 0x0f	; 15
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	9f 87       	std	Y+15, r25	; 0x0f
    1b92:	8e 87       	std	Y+14, r24	; 0x0e
	if (isOn)
    1b94:	80 91 62 02 	lds	r24, 0x0262
    1b98:	88 23       	and	r24, r24
    1b9a:	59 f0       	breq	.+22     	; 0x1bb2 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x36>
	{
		PORTA |= (1<<PA5);
    1b9c:	82 e2       	ldi	r24, 0x22	; 34
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	22 e2       	ldi	r18, 0x22	; 34
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	f9 01       	movw	r30, r18
    1ba6:	20 81       	ld	r18, Z
    1ba8:	20 62       	ori	r18, 0x20	; 32
    1baa:	fc 01       	movw	r30, r24
    1bac:	20 83       	st	Z, r18
		isOn = false;
    1bae:	10 92 62 02 	sts	0x0262, r1
				
				
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	07 96       	adiw	r24, 0x07	; 7
    1bb6:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    1bba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	87 81       	ldd	r24, Z+7	; 0x07
    1bc2:	90 85       	ldd	r25, Z+8	; 0x08
    1bc4:	9e 01       	movw	r18, r28
    1bc6:	29 5f       	subi	r18, 0xF9	; 249
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	b9 01       	movw	r22, r18
    1bcc:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE>
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	09 f0       	breq	.+2      	; 0x1bde <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x62>
    1bdc:	36 c1       	rjmp	.+620    	; 0x1e4a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ce>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    1bde:	1d 86       	std	Y+13, r1	; 0x0d
    1be0:	1c 86       	std	Y+12, r1	; 0x0c
	
		status = radioInterface->receive(message);
    1be2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be6:	fc 01       	movw	r30, r24
    1be8:	87 81       	ldd	r24, Z+7	; 0x07
    1bea:	90 85       	ldd	r25, Z+8	; 0x08
    1bec:	9e 01       	movw	r18, r28
    1bee:	24 5f       	subi	r18, 0xF4	; 244
    1bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE>
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	
		//TODO: keep in mind that the message received might not have been received in the
		//expected order. I.e. this message might actually be a different type of message.
		//so we should use more of a pub sub model. This works for now though since this is the
		//only message.
		if (status == 0 && message != NULL)
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x8a>
    1c04:	43 c0       	rjmp	.+134    	; 0x1c8c <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x110>
    1c06:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c08:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x94>
    1c0e:	3e c0       	rjmp	.+124    	; 0x1c8c <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x110>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    1c10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c12:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			model->RawMagX(telemMsg->MagX());
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>
    1c20:	9c 01       	movw	r18, r24
    1c22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c24:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c26:	fc 01       	movw	r30, r24
    1c28:	81 85       	ldd	r24, Z+9	; 0x09
    1c2a:	92 85       	ldd	r25, Z+10	; 0x0a
    1c2c:	b9 01       	movw	r22, r18
    1c2e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(telemMsg->MagY());
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c40:	fc 01       	movw	r30, r24
    1c42:	81 85       	ldd	r24, Z+9	; 0x09
    1c44:	92 85       	ldd	r25, Z+10	; 0x0a
    1c46:	b9 01       	movw	r22, r18
    1c48:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(telemMsg->MagZ());
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>
    1c54:	9c 01       	movw	r18, r24
    1c56:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c58:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	81 85       	ldd	r24, Z+9	; 0x09
    1c5e:	92 85       	ldd	r25, Z+10	; 0x0a
    1c60:	b9 01       	movw	r22, r18
    1c62:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN10helicopter5model11SystemModel7RawMagZEi>
		
			delete message;
    1c66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c68:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xf4>
    1c6e:	da c0       	rjmp	.+436    	; 0x1e24 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2a8>
    1c70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c72:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c74:	fc 01       	movw	r30, r24
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	02 96       	adiw	r24, 0x02	; 2
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	20 81       	ld	r18, Z
    1c80:	31 81       	ldd	r19, Z+1	; 0x01
    1c82:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c84:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c86:	f9 01       	movw	r30, r18
    1c88:	19 95       	eicall
    1c8a:	cc c0       	rjmp	.+408    	; 0x1e24 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2a8>
		}else if (status == -4 && message != NULL)
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	8c 3f       	cpi	r24, 0xFC	; 252
    1c92:	ff ef       	ldi	r31, 0xFF	; 255
    1c94:	9f 07       	cpc	r25, r31
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x11e>
    1c98:	3e c0       	rjmp	.+124    	; 0x1d16 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x19a>
    1c9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c9c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	d1 f1       	breq	.+116    	; 0x1d16 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x19a>
		{
			
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    1ca2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ca4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
			model->RawMagX(telemMsg->MagX());
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cb8:	fc 01       	movw	r30, r24
    1cba:	81 85       	ldd	r24, Z+9	; 0x09
    1cbc:	92 85       	ldd	r25, Z+10	; 0x0a
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(telemMsg->MagY());
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>
    1ccc:	9c 01       	movw	r18, r24
    1cce:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	81 85       	ldd	r24, Z+9	; 0x09
    1cd6:	92 85       	ldd	r25, Z+10	; 0x0a
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(-4);
    1cde:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ce0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	81 85       	ldd	r24, Z+9	; 0x09
    1ce6:	92 85       	ldd	r25, Z+10	; 0x0a
    1ce8:	6c ef       	ldi	r22, 0xFC	; 252
    1cea:	7f ef       	ldi	r23, 0xFF	; 255
    1cec:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN10helicopter5model11SystemModel7RawMagZEi>
			delete telemMsg;
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x17e>
    1cf8:	97 c0       	rjmp	.+302    	; 0x1e28 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ac>
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	fc 01       	movw	r30, r24
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	02 96       	adiw	r24, 0x02	; 2
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 81       	ld	r18, Z
    1d0a:	31 81       	ldd	r19, Z+1	; 0x01
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	f9 01       	movw	r30, r18
    1d12:	19 95       	eicall
    1d14:	89 c0       	rjmp	.+274    	; 0x1e28 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ac>
		}else if (status == -4 && message == NULL)
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	8c 3f       	cpi	r24, 0xFC	; 252
    1d1c:	ff ef       	ldi	r31, 0xFF	; 255
    1d1e:	9f 07       	cpc	r25, r31
    1d20:	01 f5       	brne	.+64     	; 0x1d62 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x1e6>
    1d22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d24:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	e1 f4       	brne	.+56     	; 0x1d62 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x1e6>
		{
			model->RawMagX(-4);
    1d2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d2e:	fc 01       	movw	r30, r24
    1d30:	81 85       	ldd	r24, Z+9	; 0x09
    1d32:	92 85       	ldd	r25, Z+10	; 0x0a
    1d34:	6c ef       	ldi	r22, 0xFC	; 252
    1d36:	7f ef       	ldi	r23, 0xFF	; 255
    1d38:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(-4);
    1d3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d40:	fc 01       	movw	r30, r24
    1d42:	81 85       	ldd	r24, Z+9	; 0x09
    1d44:	92 85       	ldd	r25, Z+10	; 0x0a
    1d46:	6c ef       	ldi	r22, 0xFC	; 252
    1d48:	7f ef       	ldi	r23, 0xFF	; 255
    1d4a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(-4);
    1d4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d50:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d52:	fc 01       	movw	r30, r24
    1d54:	81 85       	ldd	r24, Z+9	; 0x09
    1d56:	92 85       	ldd	r25, Z+10	; 0x0a
    1d58:	6c ef       	ldi	r22, 0xFC	; 252
    1d5a:	7f ef       	ldi	r23, 0xFF	; 255
    1d5c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN10helicopter5model11SystemModel7RawMagZEi>
    1d60:	64 c0       	rjmp	.+200    	; 0x1e2a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ae>
			
		}
		else if (status == -2)
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	8e 3f       	cpi	r24, 0xFE	; 254
    1d68:	ff ef       	ldi	r31, 0xFF	; 255
    1d6a:	9f 07       	cpc	r25, r31
    1d6c:	e1 f4       	brne	.+56     	; 0x1da6 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x22a>
		{
			model->RawMagX(-2);
    1d6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d72:	fc 01       	movw	r30, r24
    1d74:	81 85       	ldd	r24, Z+9	; 0x09
    1d76:	92 85       	ldd	r25, Z+10	; 0x0a
    1d78:	6e ef       	ldi	r22, 0xFE	; 254
    1d7a:	7f ef       	ldi	r23, 0xFF	; 255
    1d7c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(-2);
    1d80:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d82:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d84:	fc 01       	movw	r30, r24
    1d86:	81 85       	ldd	r24, Z+9	; 0x09
    1d88:	92 85       	ldd	r25, Z+10	; 0x0a
    1d8a:	6e ef       	ldi	r22, 0xFE	; 254
    1d8c:	7f ef       	ldi	r23, 0xFF	; 255
    1d8e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(-2);
    1d92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d94:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d96:	fc 01       	movw	r30, r24
    1d98:	81 85       	ldd	r24, Z+9	; 0x09
    1d9a:	92 85       	ldd	r25, Z+10	; 0x0a
    1d9c:	6e ef       	ldi	r22, 0xFE	; 254
    1d9e:	7f ef       	ldi	r23, 0xFF	; 255
    1da0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN10helicopter5model11SystemModel7RawMagZEi>
    1da4:	42 c0       	rjmp	.+132    	; 0x1e2a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ae>
		}else if (status == -1)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	9a 81       	ldd	r25, Y+2	; 0x02
    1daa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dac:	ff ef       	ldi	r31, 0xFF	; 255
    1dae:	9f 07       	cpc	r25, r31
    1db0:	e1 f4       	brne	.+56     	; 0x1dea <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x26e>
		{
			model->RawMagX(-1);
    1db2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db6:	fc 01       	movw	r30, r24
    1db8:	81 85       	ldd	r24, Z+9	; 0x09
    1dba:	92 85       	ldd	r25, Z+10	; 0x0a
    1dbc:	6f ef       	ldi	r22, 0xFF	; 255
    1dbe:	7f ef       	ldi	r23, 0xFF	; 255
    1dc0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(-1);
    1dc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dc8:	fc 01       	movw	r30, r24
    1dca:	81 85       	ldd	r24, Z+9	; 0x09
    1dcc:	92 85       	ldd	r25, Z+10	; 0x0a
    1dce:	6f ef       	ldi	r22, 0xFF	; 255
    1dd0:	7f ef       	ldi	r23, 0xFF	; 255
    1dd2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(-1);
    1dd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dda:	fc 01       	movw	r30, r24
    1ddc:	81 85       	ldd	r24, Z+9	; 0x09
    1dde:	92 85       	ldd	r25, Z+10	; 0x0a
    1de0:	6f ef       	ldi	r22, 0xFF	; 255
    1de2:	7f ef       	ldi	r23, 0xFF	; 255
    1de4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN10helicopter5model11SystemModel7RawMagZEi>
    1de8:	20 c0       	rjmp	.+64     	; 0x1e2a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ae>
		}else
		{
			model->RawMagX(-10);
    1dea:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dec:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dee:	fc 01       	movw	r30, r24
    1df0:	81 85       	ldd	r24, Z+9	; 0x09
    1df2:	92 85       	ldd	r25, Z+10	; 0x0a
    1df4:	66 ef       	ldi	r22, 0xF6	; 246
    1df6:	7f ef       	ldi	r23, 0xFF	; 255
    1df8:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(-10);
    1dfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e00:	fc 01       	movw	r30, r24
    1e02:	81 85       	ldd	r24, Z+9	; 0x09
    1e04:	92 85       	ldd	r25, Z+10	; 0x0a
    1e06:	66 ef       	ldi	r22, 0xF6	; 246
    1e08:	7f ef       	ldi	r23, 0xFF	; 255
    1e0a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(status);
    1e0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e12:	fc 01       	movw	r30, r24
    1e14:	81 85       	ldd	r24, Z+9	; 0x09
    1e16:	92 85       	ldd	r25, Z+10	; 0x0a
    1e18:	29 81       	ldd	r18, Y+1	; 0x01
    1e1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN10helicopter5model11SystemModel7RawMagZEi>
    1e22:	03 c0       	rjmp	.+6      	; 0x1e2a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ae>
			//Update the model using the new data received from the simulator.
			model->RawMagX(telemMsg->MagX());
			model->RawMagY(telemMsg->MagY());
			model->RawMagZ(telemMsg->MagZ());
		
			delete message;
    1e24:	00 00       	nop
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ae>
			
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
			model->RawMagX(telemMsg->MagX());
			model->RawMagY(telemMsg->MagY());
			model->RawMagZ(-4);
			delete telemMsg;
    1e28:	00 00       	nop
			model->RawMagX(-10);
			model->RawMagY(-10);
			model->RawMagZ(status);
		}
		
		if (status != 0)
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	61 f0       	breq	.+24     	; 0x1e4a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x2ce>
		{
			PORTA &= ~(1<<PA5);
    1e32:	82 e2       	ldi	r24, 0x22	; 34
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	22 e2       	ldi	r18, 0x22	; 34
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	f9 01       	movw	r30, r18
    1e3c:	20 81       	ld	r18, Z
    1e3e:	2f 7d       	andi	r18, 0xDF	; 223
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18
			isOn = true;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	80 93 62 02 	sts	0x0262, r24
			

		}
	}
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	07 96       	adiw	r24, 0x07	; 7
    1e4e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    1e52:	2f 96       	adiw	r28, 0x0f	; 15
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	08 95       	ret

00001e64 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				int delay;
				int period;
				bool isReadyToRun;
				
			protected:
				virtual void runTaskImpl(){;}
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	1f 92       	push	r1
    1e6a:	1f 92       	push	r1
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	08 95       	ret

00001e7e <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	7c 83       	std	Y+4, r23	; 0x04
    1e90:	6b 83       	std	Y+3, r22	; 0x03
    1e92:	5e 83       	std	Y+6, r21	; 0x06
    1e94:	4d 83       	std	Y+5, r20	; 0x05
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	20 e5       	ldi	r18, 0x50	; 80
    1e9c:	32 e0       	ldi	r19, 0x02	; 2
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	31 83       	std	Z+1, r19	; 0x01
    1ea2:	20 83       	st	Z, r18
{
	this->delay = delay;
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1eac:	fc 01       	movw	r30, r24
    1eae:	33 83       	std	Z+3, r19	; 0x03
    1eb0:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eba:	fc 01       	movw	r30, r24
    1ebc:	35 83       	std	Z+5, r19	; 0x05
    1ebe:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	16 82       	std	Z+6, r1	; 0x06
}
    1ec8:	26 96       	adiw	r28, 0x06	; 6
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	08 95       	ret

00001eda <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	1f 92       	push	r1
    1ee0:	1f 92       	push	r1
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    1eea:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 81       	ld	r18, Z
    1efa:	31 81       	ldd	r19, Z+1	; 0x01
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	f9 01       	movw	r30, r18
    1f02:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    1f04:	78 94       	sei
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	7c 83       	std	Y+4, r23	; 0x04
    1f2e:	6b 83       	std	Y+3, r22	; 0x03
    1f30:	5e 83       	std	Y+6, r21	; 0x06
    1f32:	4d 83       	std	Y+5, r20	; 0x05
    1f34:	38 87       	std	Y+8, r19	; 0x08
    1f36:	2f 83       	std	Y+7, r18	; 0x07
    1f38:	1a 87       	std	Y+10, r17	; 0x0a
    1f3a:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	49 85       	ldd	r20, Y+9	; 0x09
    1f42:	5a 85       	ldd	r21, Y+10	; 0x0a
    1f44:	2f 81       	ldd	r18, Y+7	; 0x07
    1f46:	38 85       	ldd	r19, Y+8	; 0x08
    1f48:	b9 01       	movw	r22, r18
    1f4a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN10helicopter5tasks4TaskC1Eii>
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	2a e5       	ldi	r18, 0x5A	; 90
    1f54:	32 e0       	ldi	r19, 0x02	; 2
    1f56:	fc 01       	movw	r30, r24
    1f58:	31 83       	std	Z+1, r19	; 0x01
    1f5a:	20 83       	st	Z, r18
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	2b 81       	ldd	r18, Y+3	; 0x03
    1f62:	3c 81       	ldd	r19, Y+4	; 0x04
    1f64:	fc 01       	movw	r30, r24
    1f66:	30 87       	std	Z+8, r19	; 0x08
    1f68:	27 83       	std	Z+7, r18	; 0x07
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f70:	3e 81       	ldd	r19, Y+6	; 0x06
    1f72:	fc 01       	movw	r30, r24
    1f74:	32 87       	std	Z+10, r19	; 0x0a
    1f76:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1f78:	2a 96       	adiw	r28, 0x0a	; 10
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    1f94:	1f 92       	push	r1
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = model->CreateTelemetryMessage();
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	81 85       	ldd	r24, Z+9	; 0x09
    1fa6:	92 85       	ldd	r25, Z+10	; 0x0a
    1fa8:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	message->MagY(32);
	message->MagZ(31);
	*/
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	87 81       	ldd	r24, Z+7	; 0x07
    1fb8:	90 85       	ldd	r25, Z+8	; 0x08
    1fba:	29 81       	ldd	r18, Y+1	; 0x01
    1fbc:	3a 81       	ldd	r19, Y+2	; 0x02
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f0       	breq	.+26     	; 0x1fe6 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	02 96       	adiw	r24, 0x02	; 2
    1fd8:	fc 01       	movw	r30, r24
    1fda:	20 81       	ld	r18, Z
    1fdc:	31 81       	ldd	r19, Z+1	; 0x01
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	19 95       	eicall
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	08 95       	ret

00001ff4 <_Znwj>:
 *  Author: HP User
 */ 
#include <commonheader.h>

void * operator new(size_t size)
{
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	1f 92       	push	r1
    1ffa:	1f 92       	push	r1
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <malloc>
}
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <_ZdlPv>:

void operator delete(void * ptr)
{
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	1f 92       	push	r1
    201c:	1f 92       	push	r1
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	21 f0       	breq	.+8      	; 0x2036 <_ZdlPv+0x20>
	{
		free(ptr);
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	0e 94 f7 12 	call	0x25ee	; 0x25ee <free>
	}
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <_Znaj>:

void * operator new[](size_t size)
{
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	1f 92       	push	r1
    2046:	1f 92       	push	r1
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <malloc>
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <_ZdaPv>:

void operator delete[](void * ptr)
{
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	1f 92       	push	r1
    2068:	1f 92       	push	r1
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	21 f0       	breq	.+8      	; 0x2082 <_ZdaPv+0x20>
	{
		free(ptr);
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <free>
	}
	
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	08 95       	ret

0000208c <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	00 d0       	rcall	.+0      	; 0x2096 <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    2096:	1f 92       	push	r1
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	9c 83       	std	Y+4, r25	; 0x04
    209e:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 1000 / timeoutMilliseconds;
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	fc 01       	movw	r30, r24
    20ae:	26 81       	ldd	r18, Z+6	; 0x06
    20b0:	37 81       	ldd	r19, Z+7	; 0x07
    20b2:	88 ee       	ldi	r24, 0xE8	; 232
    20b4:	93 e0       	ldi	r25, 0x03	; 3
    20b6:	b9 01       	movw	r22, r18
    20b8:	0e 94 12 12 	call	0x2424	; 0x2424 <__divmodhi4>
    20bc:	9b 01       	movw	r18, r22
    20be:	3a 83       	std	Y+2, r19	; 0x02
    20c0:	29 83       	std	Y+1, r18	; 0x01
	
	//setup timer. This value has to be less than the max number of a 16 bit numer 65535.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); //Set Clear Timer on Compare (auto reset) (CTC)
    20c2:	08 e9       	ldi	r16, 0x98	; 152
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	fc 01       	movw	r30, r24
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	a2 81       	ldd	r26, Z+2	; 0x02
    20d2:	b3 81       	ldd	r27, Z+3	; 0x03
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	f9 01       	movw	r30, r18
    20da:	24 81       	ldd	r18, Z+4	; 0x04
    20dc:	35 81       	ldd	r19, Z+5	; 0x05
    20de:	44 27       	eor	r20, r20
    20e0:	37 fd       	sbrc	r19, 7
    20e2:	40 95       	com	r20
    20e4:	54 2f       	mov	r21, r20
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 26 12 	call	0x244c	; 0x244c <__udivmodsi4>
    20ee:	da 01       	movw	r26, r20
    20f0:	c9 01       	movw	r24, r18
    20f2:	29 81       	ldd	r18, Y+1	; 0x01
    20f4:	3a 81       	ldd	r19, Y+2	; 0x02
    20f6:	44 27       	eor	r20, r20
    20f8:	37 fd       	sbrc	r19, 7
    20fa:	40 95       	com	r20
    20fc:	54 2f       	mov	r21, r20
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 26 12 	call	0x244c	; 0x244c <__udivmodsi4>
    2106:	da 01       	movw	r26, r20
    2108:	c9 01       	movw	r24, r18
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for ctc mode
    2110:	81 e9       	ldi	r24, 0x91	; 145
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	21 e9       	ldi	r18, 0x91	; 145
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	f9 01       	movw	r30, r18
    211a:	20 81       	ld	r18, Z
    211c:	28 60       	ori	r18, 0x08	; 8
    211e:	fc 01       	movw	r30, r24
    2120:	20 83       	st	Z, r18
		
	TIMSK3 |= (1 << OCIE3A); //enable ctc interrupt
    2122:	81 e7       	ldi	r24, 0x71	; 113
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	21 e7       	ldi	r18, 0x71	; 113
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	f9 01       	movw	r30, r18
    212c:	20 81       	ld	r18, Z
    212e:	22 60       	ori	r18, 0x02	; 2
    2130:	fc 01       	movw	r30, r24
    2132:	20 83       	st	Z, r18
		
	switch(timerPrescaler)
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	fc 01       	movw	r30, r24
    213a:	84 81       	ldd	r24, Z+4	; 0x04
    213c:	95 81       	ldd	r25, Z+5	; 0x05
    213e:	80 34       	cpi	r24, 0x40	; 64
    2140:	91 05       	cpc	r25, r1
    2142:	39 f1       	breq	.+78     	; 0x2192 <_ZN10helicopter4util5Timer10startTimerEv+0x106>
    2144:	81 34       	cpi	r24, 0x41	; 65
    2146:	91 05       	cpc	r25, r1
    2148:	3c f4       	brge	.+14     	; 0x2158 <_ZN10helicopter4util5Timer10startTimerEv+0xcc>
    214a:	81 30       	cpi	r24, 0x01	; 1
    214c:	91 05       	cpc	r25, r1
    214e:	69 f0       	breq	.+26     	; 0x216a <_ZN10helicopter4util5Timer10startTimerEv+0xde>
    2150:	88 30       	cpi	r24, 0x08	; 8
    2152:	91 05       	cpc	r25, r1
    2154:	a1 f0       	breq	.+40     	; 0x217e <_ZN10helicopter4util5Timer10startTimerEv+0xf2>
    2156:	3b c0       	rjmp	.+118    	; 0x21ce <_ZN10helicopter4util5Timer10startTimerEv+0x142>
    2158:	81 15       	cp	r24, r1
    215a:	f1 e0       	ldi	r31, 0x01	; 1
    215c:	9f 07       	cpc	r25, r31
    215e:	19 f1       	breq	.+70     	; 0x21a6 <_ZN10helicopter4util5Timer10startTimerEv+0x11a>
    2160:	81 15       	cp	r24, r1
    2162:	24 e0       	ldi	r18, 0x04	; 4
    2164:	92 07       	cpc	r25, r18
    2166:	49 f1       	breq	.+82     	; 0x21ba <_ZN10helicopter4util5Timer10startTimerEv+0x12e>
    2168:	32 c0       	rjmp	.+100    	; 0x21ce <_ZN10helicopter4util5Timer10startTimerEv+0x142>
	{
		case 1:
		TCCR3B |= NoPrescaling;
    216a:	81 e9       	ldi	r24, 0x91	; 145
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	21 e9       	ldi	r18, 0x91	; 145
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	f9 01       	movw	r30, r18
    2174:	20 81       	ld	r18, Z
    2176:	21 60       	ori	r18, 0x01	; 1
    2178:	fc 01       	movw	r30, r24
    217a:	20 83       	st	Z, r18
		break;
    217c:	31 c0       	rjmp	.+98     	; 0x21e0 <_ZN10helicopter4util5Timer10startTimerEv+0x154>
		case 8:
		TCCR3B |= PrescaleByEight;
    217e:	81 e9       	ldi	r24, 0x91	; 145
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	21 e9       	ldi	r18, 0x91	; 145
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	f9 01       	movw	r30, r18
    2188:	20 81       	ld	r18, Z
    218a:	22 60       	ori	r18, 0x02	; 2
    218c:	fc 01       	movw	r30, r24
    218e:	20 83       	st	Z, r18
		break;
    2190:	27 c0       	rjmp	.+78     	; 0x21e0 <_ZN10helicopter4util5Timer10startTimerEv+0x154>
		case 64:
		TCCR3B |= PrescaleBySixtyFour;
    2192:	81 e9       	ldi	r24, 0x91	; 145
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	21 e9       	ldi	r18, 0x91	; 145
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	f9 01       	movw	r30, r18
    219c:	20 81       	ld	r18, Z
    219e:	23 60       	ori	r18, 0x03	; 3
    21a0:	fc 01       	movw	r30, r24
    21a2:	20 83       	st	Z, r18
		break;
    21a4:	1d c0       	rjmp	.+58     	; 0x21e0 <_ZN10helicopter4util5Timer10startTimerEv+0x154>
		case 256:
		TCCR3B |= PrescaleByTwofiftysix;
    21a6:	81 e9       	ldi	r24, 0x91	; 145
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	21 e9       	ldi	r18, 0x91	; 145
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	f9 01       	movw	r30, r18
    21b0:	20 81       	ld	r18, Z
    21b2:	24 60       	ori	r18, 0x04	; 4
    21b4:	fc 01       	movw	r30, r24
    21b6:	20 83       	st	Z, r18
		break;
    21b8:	13 c0       	rjmp	.+38     	; 0x21e0 <_ZN10helicopter4util5Timer10startTimerEv+0x154>
		case 1024:
		TCCR3B |= PrescaleByTentwentyfour;
    21ba:	81 e9       	ldi	r24, 0x91	; 145
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	21 e9       	ldi	r18, 0x91	; 145
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	f9 01       	movw	r30, r18
    21c4:	20 81       	ld	r18, Z
    21c6:	25 60       	ori	r18, 0x05	; 5
    21c8:	fc 01       	movw	r30, r24
    21ca:	20 83       	st	Z, r18
		break;
    21cc:	09 c0       	rjmp	.+18     	; 0x21e0 <_ZN10helicopter4util5Timer10startTimerEv+0x154>
		default:
		TCCR3B |= NoPrescaling;
    21ce:	81 e9       	ldi	r24, 0x91	; 145
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	21 e9       	ldi	r18, 0x91	; 145
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	f9 01       	movw	r30, r18
    21d8:	20 81       	ld	r18, Z
    21da:	21 60       	ori	r18, 0x01	; 1
    21dc:	fc 01       	movw	r30, r24
    21de:	20 83       	st	Z, r18
	}
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	08 95       	ret

000021f2 <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	1f 92       	push	r1
    21f8:	1f 92       	push	r1
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
	return (TIFR3 & (1<<OCF3A)) != 0;
    2202:	88 e3       	ldi	r24, 0x38	; 56
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	fc 01       	movw	r30, r24
    2208:	80 81       	ld	r24, Z
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	82 70       	andi	r24, 0x02	; 2
    2210:	99 27       	eor	r25, r25
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	09 f4       	brne	.+2      	; 0x221a <__stack+0x1b>
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	82 2f       	mov	r24, r18
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	1f 92       	push	r1
    222c:	1f 92       	push	r1
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    2236:	81 e9       	ldi	r24, 0x91	; 145
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	fc 01       	movw	r30, r24
    223c:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    223e:	88 e3       	ldi	r24, 0x38	; 56
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	28 e3       	ldi	r18, 0x38	; 56
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	f9 01       	movw	r30, r18
    2248:	20 81       	ld	r18, Z
    224a:	22 60       	ori	r18, 0x02	; 2
    224c:	fc 01       	movw	r30, r24
    224e:	20 83       	st	Z, r18
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	08 95       	ret

0000225a <__fixunssfsi>:
    225a:	ac d0       	rcall	.+344    	; 0x23b4 <__fp_splitA>
    225c:	88 f0       	brcs	.+34     	; 0x2280 <__fixunssfsi+0x26>
    225e:	9f 57       	subi	r25, 0x7F	; 127
    2260:	90 f0       	brcs	.+36     	; 0x2286 <__fixunssfsi+0x2c>
    2262:	b9 2f       	mov	r27, r25
    2264:	99 27       	eor	r25, r25
    2266:	b7 51       	subi	r27, 0x17	; 23
    2268:	a0 f0       	brcs	.+40     	; 0x2292 <__fixunssfsi+0x38>
    226a:	d1 f0       	breq	.+52     	; 0x22a0 <__fixunssfsi+0x46>
    226c:	66 0f       	add	r22, r22
    226e:	77 1f       	adc	r23, r23
    2270:	88 1f       	adc	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	1a f0       	brmi	.+6      	; 0x227c <__fixunssfsi+0x22>
    2276:	ba 95       	dec	r27
    2278:	c9 f7       	brne	.-14     	; 0x226c <__fixunssfsi+0x12>
    227a:	12 c0       	rjmp	.+36     	; 0x22a0 <__fixunssfsi+0x46>
    227c:	b1 30       	cpi	r27, 0x01	; 1
    227e:	81 f0       	breq	.+32     	; 0x22a0 <__fixunssfsi+0x46>
    2280:	ca d0       	rcall	.+404    	; 0x2416 <__fp_zero>
    2282:	b1 e0       	ldi	r27, 0x01	; 1
    2284:	08 95       	ret
    2286:	c7 c0       	rjmp	.+398    	; 0x2416 <__fp_zero>
    2288:	67 2f       	mov	r22, r23
    228a:	78 2f       	mov	r23, r24
    228c:	88 27       	eor	r24, r24
    228e:	b8 5f       	subi	r27, 0xF8	; 248
    2290:	39 f0       	breq	.+14     	; 0x22a0 <__fixunssfsi+0x46>
    2292:	b9 3f       	cpi	r27, 0xF9	; 249
    2294:	cc f3       	brlt	.-14     	; 0x2288 <__fixunssfsi+0x2e>
    2296:	86 95       	lsr	r24
    2298:	77 95       	ror	r23
    229a:	67 95       	ror	r22
    229c:	b3 95       	inc	r27
    229e:	d9 f7       	brne	.-10     	; 0x2296 <__fixunssfsi+0x3c>
    22a0:	3e f4       	brtc	.+14     	; 0x22b0 <__fixunssfsi+0x56>
    22a2:	90 95       	com	r25
    22a4:	80 95       	com	r24
    22a6:	70 95       	com	r23
    22a8:	61 95       	neg	r22
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	8f 4f       	sbci	r24, 0xFF	; 255
    22ae:	9f 4f       	sbci	r25, 0xFF	; 255
    22b0:	08 95       	ret

000022b2 <__floatunsisf>:
    22b2:	e8 94       	clt
    22b4:	09 c0       	rjmp	.+18     	; 0x22c8 <__floatsisf+0x12>

000022b6 <__floatsisf>:
    22b6:	97 fb       	bst	r25, 7
    22b8:	3e f4       	brtc	.+14     	; 0x22c8 <__floatsisf+0x12>
    22ba:	90 95       	com	r25
    22bc:	80 95       	com	r24
    22be:	70 95       	com	r23
    22c0:	61 95       	neg	r22
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	8f 4f       	sbci	r24, 0xFF	; 255
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	99 23       	and	r25, r25
    22ca:	a9 f0       	breq	.+42     	; 0x22f6 <__floatsisf+0x40>
    22cc:	f9 2f       	mov	r31, r25
    22ce:	96 e9       	ldi	r25, 0x96	; 150
    22d0:	bb 27       	eor	r27, r27
    22d2:	93 95       	inc	r25
    22d4:	f6 95       	lsr	r31
    22d6:	87 95       	ror	r24
    22d8:	77 95       	ror	r23
    22da:	67 95       	ror	r22
    22dc:	b7 95       	ror	r27
    22de:	f1 11       	cpse	r31, r1
    22e0:	f8 cf       	rjmp	.-16     	; 0x22d2 <__floatsisf+0x1c>
    22e2:	fa f4       	brpl	.+62     	; 0x2322 <__floatsisf+0x6c>
    22e4:	bb 0f       	add	r27, r27
    22e6:	11 f4       	brne	.+4      	; 0x22ec <__floatsisf+0x36>
    22e8:	60 ff       	sbrs	r22, 0
    22ea:	1b c0       	rjmp	.+54     	; 0x2322 <__floatsisf+0x6c>
    22ec:	6f 5f       	subi	r22, 0xFF	; 255
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	8f 4f       	sbci	r24, 0xFF	; 255
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	16 c0       	rjmp	.+44     	; 0x2322 <__floatsisf+0x6c>
    22f6:	88 23       	and	r24, r24
    22f8:	11 f0       	breq	.+4      	; 0x22fe <__floatsisf+0x48>
    22fa:	96 e9       	ldi	r25, 0x96	; 150
    22fc:	11 c0       	rjmp	.+34     	; 0x2320 <__floatsisf+0x6a>
    22fe:	77 23       	and	r23, r23
    2300:	21 f0       	breq	.+8      	; 0x230a <__floatsisf+0x54>
    2302:	9e e8       	ldi	r25, 0x8E	; 142
    2304:	87 2f       	mov	r24, r23
    2306:	76 2f       	mov	r23, r22
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <__floatsisf+0x5e>
    230a:	66 23       	and	r22, r22
    230c:	71 f0       	breq	.+28     	; 0x232a <__floatsisf+0x74>
    230e:	96 e8       	ldi	r25, 0x86	; 134
    2310:	86 2f       	mov	r24, r22
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	2a f0       	brmi	.+10     	; 0x2322 <__floatsisf+0x6c>
    2318:	9a 95       	dec	r25
    231a:	66 0f       	add	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	da f7       	brpl	.-10     	; 0x2318 <__floatsisf+0x62>
    2322:	88 0f       	add	r24, r24
    2324:	96 95       	lsr	r25
    2326:	87 95       	ror	r24
    2328:	97 f9       	bld	r25, 7
    232a:	08 95       	ret

0000232c <floor>:
    232c:	5d d0       	rcall	.+186    	; 0x23e8 <__fp_trunc>
    232e:	80 f0       	brcs	.+32     	; 0x2350 <floor+0x24>
    2330:	9f 37       	cpi	r25, 0x7F	; 127
    2332:	40 f4       	brcc	.+16     	; 0x2344 <floor+0x18>
    2334:	91 11       	cpse	r25, r1
    2336:	0e f0       	brts	.+2      	; 0x233a <floor+0xe>
    2338:	6f c0       	rjmp	.+222    	; 0x2418 <__fp_szero>
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	80 e8       	ldi	r24, 0x80	; 128
    2340:	9f eb       	ldi	r25, 0xBF	; 191
    2342:	08 95       	ret
    2344:	26 f4       	brtc	.+8      	; 0x234e <floor+0x22>
    2346:	1b 16       	cp	r1, r27
    2348:	61 1d       	adc	r22, r1
    234a:	71 1d       	adc	r23, r1
    234c:	81 1d       	adc	r24, r1
    234e:	01 c0       	rjmp	.+2      	; 0x2352 <__fp_mintl>
    2350:	1b c0       	rjmp	.+54     	; 0x2388 <__fp_mpack>

00002352 <__fp_mintl>:
    2352:	88 23       	and	r24, r24
    2354:	71 f4       	brne	.+28     	; 0x2372 <__fp_mintl+0x20>
    2356:	77 23       	and	r23, r23
    2358:	21 f0       	breq	.+8      	; 0x2362 <__fp_mintl+0x10>
    235a:	98 50       	subi	r25, 0x08	; 8
    235c:	87 2b       	or	r24, r23
    235e:	76 2f       	mov	r23, r22
    2360:	07 c0       	rjmp	.+14     	; 0x2370 <__fp_mintl+0x1e>
    2362:	66 23       	and	r22, r22
    2364:	11 f4       	brne	.+4      	; 0x236a <__fp_mintl+0x18>
    2366:	99 27       	eor	r25, r25
    2368:	0d c0       	rjmp	.+26     	; 0x2384 <__fp_mintl+0x32>
    236a:	90 51       	subi	r25, 0x10	; 16
    236c:	86 2b       	or	r24, r22
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	2a f0       	brmi	.+10     	; 0x237e <__fp_mintl+0x2c>
    2374:	9a 95       	dec	r25
    2376:	66 0f       	add	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	88 1f       	adc	r24, r24
    237c:	da f7       	brpl	.-10     	; 0x2374 <__fp_mintl+0x22>
    237e:	88 0f       	add	r24, r24
    2380:	96 95       	lsr	r25
    2382:	87 95       	ror	r24
    2384:	97 f9       	bld	r25, 7
    2386:	08 95       	ret

00002388 <__fp_mpack>:
    2388:	9f 3f       	cpi	r25, 0xFF	; 255
    238a:	31 f0       	breq	.+12     	; 0x2398 <__fp_mpack_finite+0xc>

0000238c <__fp_mpack_finite>:
    238c:	91 50       	subi	r25, 0x01	; 1
    238e:	20 f4       	brcc	.+8      	; 0x2398 <__fp_mpack_finite+0xc>
    2390:	87 95       	ror	r24
    2392:	77 95       	ror	r23
    2394:	67 95       	ror	r22
    2396:	b7 95       	ror	r27
    2398:	88 0f       	add	r24, r24
    239a:	91 1d       	adc	r25, r1
    239c:	96 95       	lsr	r25
    239e:	87 95       	ror	r24
    23a0:	97 f9       	bld	r25, 7
    23a2:	08 95       	ret

000023a4 <__fp_split3>:
    23a4:	57 fd       	sbrc	r21, 7
    23a6:	90 58       	subi	r25, 0x80	; 128
    23a8:	44 0f       	add	r20, r20
    23aa:	55 1f       	adc	r21, r21
    23ac:	59 f0       	breq	.+22     	; 0x23c4 <__fp_splitA+0x10>
    23ae:	5f 3f       	cpi	r21, 0xFF	; 255
    23b0:	71 f0       	breq	.+28     	; 0x23ce <__fp_splitA+0x1a>
    23b2:	47 95       	ror	r20

000023b4 <__fp_splitA>:
    23b4:	88 0f       	add	r24, r24
    23b6:	97 fb       	bst	r25, 7
    23b8:	99 1f       	adc	r25, r25
    23ba:	61 f0       	breq	.+24     	; 0x23d4 <__fp_splitA+0x20>
    23bc:	9f 3f       	cpi	r25, 0xFF	; 255
    23be:	79 f0       	breq	.+30     	; 0x23de <__fp_splitA+0x2a>
    23c0:	87 95       	ror	r24
    23c2:	08 95       	ret
    23c4:	12 16       	cp	r1, r18
    23c6:	13 06       	cpc	r1, r19
    23c8:	14 06       	cpc	r1, r20
    23ca:	55 1f       	adc	r21, r21
    23cc:	f2 cf       	rjmp	.-28     	; 0x23b2 <__fp_split3+0xe>
    23ce:	46 95       	lsr	r20
    23d0:	f1 df       	rcall	.-30     	; 0x23b4 <__fp_splitA>
    23d2:	08 c0       	rjmp	.+16     	; 0x23e4 <__fp_splitA+0x30>
    23d4:	16 16       	cp	r1, r22
    23d6:	17 06       	cpc	r1, r23
    23d8:	18 06       	cpc	r1, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	f1 cf       	rjmp	.-30     	; 0x23c0 <__fp_splitA+0xc>
    23de:	86 95       	lsr	r24
    23e0:	71 05       	cpc	r23, r1
    23e2:	61 05       	cpc	r22, r1
    23e4:	08 94       	sec
    23e6:	08 95       	ret

000023e8 <__fp_trunc>:
    23e8:	e5 df       	rcall	.-54     	; 0x23b4 <__fp_splitA>
    23ea:	a0 f0       	brcs	.+40     	; 0x2414 <__fp_trunc+0x2c>
    23ec:	be e7       	ldi	r27, 0x7E	; 126
    23ee:	b9 17       	cp	r27, r25
    23f0:	88 f4       	brcc	.+34     	; 0x2414 <__fp_trunc+0x2c>
    23f2:	bb 27       	eor	r27, r27
    23f4:	9f 38       	cpi	r25, 0x8F	; 143
    23f6:	60 f4       	brcc	.+24     	; 0x2410 <__fp_trunc+0x28>
    23f8:	16 16       	cp	r1, r22
    23fa:	b1 1d       	adc	r27, r1
    23fc:	67 2f       	mov	r22, r23
    23fe:	78 2f       	mov	r23, r24
    2400:	88 27       	eor	r24, r24
    2402:	98 5f       	subi	r25, 0xF8	; 248
    2404:	f7 cf       	rjmp	.-18     	; 0x23f4 <__fp_trunc+0xc>
    2406:	86 95       	lsr	r24
    2408:	77 95       	ror	r23
    240a:	67 95       	ror	r22
    240c:	b1 1d       	adc	r27, r1
    240e:	93 95       	inc	r25
    2410:	96 39       	cpi	r25, 0x96	; 150
    2412:	c8 f3       	brcs	.-14     	; 0x2406 <__fp_trunc+0x1e>
    2414:	08 95       	ret

00002416 <__fp_zero>:
    2416:	e8 94       	clt

00002418 <__fp_szero>:
    2418:	bb 27       	eor	r27, r27
    241a:	66 27       	eor	r22, r22
    241c:	77 27       	eor	r23, r23
    241e:	cb 01       	movw	r24, r22
    2420:	97 f9       	bld	r25, 7
    2422:	08 95       	ret

00002424 <__divmodhi4>:
    2424:	97 fb       	bst	r25, 7
    2426:	07 2e       	mov	r0, r23
    2428:	16 f4       	brtc	.+4      	; 0x242e <__divmodhi4+0xa>
    242a:	00 94       	com	r0
    242c:	07 d0       	rcall	.+14     	; 0x243c <__divmodhi4_neg1>
    242e:	77 fd       	sbrc	r23, 7
    2430:	09 d0       	rcall	.+18     	; 0x2444 <__divmodhi4_neg2>
    2432:	0e 94 48 12 	call	0x2490	; 0x2490 <__udivmodhi4>
    2436:	07 fc       	sbrc	r0, 7
    2438:	05 d0       	rcall	.+10     	; 0x2444 <__divmodhi4_neg2>
    243a:	3e f4       	brtc	.+14     	; 0x244a <__divmodhi4_exit>

0000243c <__divmodhi4_neg1>:
    243c:	90 95       	com	r25
    243e:	81 95       	neg	r24
    2440:	9f 4f       	sbci	r25, 0xFF	; 255
    2442:	08 95       	ret

00002444 <__divmodhi4_neg2>:
    2444:	70 95       	com	r23
    2446:	61 95       	neg	r22
    2448:	7f 4f       	sbci	r23, 0xFF	; 255

0000244a <__divmodhi4_exit>:
    244a:	08 95       	ret

0000244c <__udivmodsi4>:
    244c:	a1 e2       	ldi	r26, 0x21	; 33
    244e:	1a 2e       	mov	r1, r26
    2450:	aa 1b       	sub	r26, r26
    2452:	bb 1b       	sub	r27, r27
    2454:	fd 01       	movw	r30, r26
    2456:	0d c0       	rjmp	.+26     	; 0x2472 <__udivmodsi4_ep>

00002458 <__udivmodsi4_loop>:
    2458:	aa 1f       	adc	r26, r26
    245a:	bb 1f       	adc	r27, r27
    245c:	ee 1f       	adc	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	a2 17       	cp	r26, r18
    2462:	b3 07       	cpc	r27, r19
    2464:	e4 07       	cpc	r30, r20
    2466:	f5 07       	cpc	r31, r21
    2468:	20 f0       	brcs	.+8      	; 0x2472 <__udivmodsi4_ep>
    246a:	a2 1b       	sub	r26, r18
    246c:	b3 0b       	sbc	r27, r19
    246e:	e4 0b       	sbc	r30, r20
    2470:	f5 0b       	sbc	r31, r21

00002472 <__udivmodsi4_ep>:
    2472:	66 1f       	adc	r22, r22
    2474:	77 1f       	adc	r23, r23
    2476:	88 1f       	adc	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	1a 94       	dec	r1
    247c:	69 f7       	brne	.-38     	; 0x2458 <__udivmodsi4_loop>
    247e:	60 95       	com	r22
    2480:	70 95       	com	r23
    2482:	80 95       	com	r24
    2484:	90 95       	com	r25
    2486:	9b 01       	movw	r18, r22
    2488:	ac 01       	movw	r20, r24
    248a:	bd 01       	movw	r22, r26
    248c:	cf 01       	movw	r24, r30
    248e:	08 95       	ret

00002490 <__udivmodhi4>:
    2490:	aa 1b       	sub	r26, r26
    2492:	bb 1b       	sub	r27, r27
    2494:	51 e1       	ldi	r21, 0x11	; 17
    2496:	07 c0       	rjmp	.+14     	; 0x24a6 <__udivmodhi4_ep>

00002498 <__udivmodhi4_loop>:
    2498:	aa 1f       	adc	r26, r26
    249a:	bb 1f       	adc	r27, r27
    249c:	a6 17       	cp	r26, r22
    249e:	b7 07       	cpc	r27, r23
    24a0:	10 f0       	brcs	.+4      	; 0x24a6 <__udivmodhi4_ep>
    24a2:	a6 1b       	sub	r26, r22
    24a4:	b7 0b       	sbc	r27, r23

000024a6 <__udivmodhi4_ep>:
    24a6:	88 1f       	adc	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	5a 95       	dec	r21
    24ac:	a9 f7       	brne	.-22     	; 0x2498 <__udivmodhi4_loop>
    24ae:	80 95       	com	r24
    24b0:	90 95       	com	r25
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	08 95       	ret

000024b8 <malloc>:
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	82 30       	cpi	r24, 0x02	; 2
    24c2:	91 05       	cpc	r25, r1
    24c4:	10 f4       	brcc	.+4      	; 0x24ca <malloc+0x12>
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	e0 91 65 02 	lds	r30, 0x0265
    24ce:	f0 91 66 02 	lds	r31, 0x0266
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	c0 e0       	ldi	r28, 0x00	; 0
    24d8:	d0 e0       	ldi	r29, 0x00	; 0
    24da:	23 c0       	rjmp	.+70     	; 0x2522 <malloc+0x6a>
    24dc:	40 81       	ld	r20, Z
    24de:	51 81       	ldd	r21, Z+1	; 0x01
    24e0:	48 17       	cp	r20, r24
    24e2:	59 07       	cpc	r21, r25
    24e4:	a8 f0       	brcs	.+42     	; 0x2510 <malloc+0x58>
    24e6:	48 17       	cp	r20, r24
    24e8:	59 07       	cpc	r21, r25
    24ea:	61 f4       	brne	.+24     	; 0x2504 <malloc+0x4c>
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 97       	sbiw	r28, 0x00	; 0
    24f2:	19 f0       	breq	.+6      	; 0x24fa <malloc+0x42>
    24f4:	9b 83       	std	Y+3, r25	; 0x03
    24f6:	8a 83       	std	Y+2, r24	; 0x02
    24f8:	2e c0       	rjmp	.+92     	; 0x2556 <malloc+0x9e>
    24fa:	90 93 66 02 	sts	0x0266, r25
    24fe:	80 93 65 02 	sts	0x0265, r24
    2502:	29 c0       	rjmp	.+82     	; 0x2556 <malloc+0x9e>
    2504:	21 15       	cp	r18, r1
    2506:	31 05       	cpc	r19, r1
    2508:	29 f0       	breq	.+10     	; 0x2514 <malloc+0x5c>
    250a:	42 17       	cp	r20, r18
    250c:	53 07       	cpc	r21, r19
    250e:	10 f0       	brcs	.+4      	; 0x2514 <malloc+0x5c>
    2510:	a9 01       	movw	r20, r18
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <malloc+0x60>
    2514:	be 01       	movw	r22, r28
    2516:	df 01       	movw	r26, r30
    2518:	02 81       	ldd	r16, Z+2	; 0x02
    251a:	13 81       	ldd	r17, Z+3	; 0x03
    251c:	ef 01       	movw	r28, r30
    251e:	9a 01       	movw	r18, r20
    2520:	f8 01       	movw	r30, r16
    2522:	30 97       	sbiw	r30, 0x00	; 0
    2524:	d9 f6       	brne	.-74     	; 0x24dc <malloc+0x24>
    2526:	21 15       	cp	r18, r1
    2528:	31 05       	cpc	r19, r1
    252a:	09 f1       	breq	.+66     	; 0x256e <malloc+0xb6>
    252c:	28 1b       	sub	r18, r24
    252e:	39 0b       	sbc	r19, r25
    2530:	24 30       	cpi	r18, 0x04	; 4
    2532:	31 05       	cpc	r19, r1
    2534:	90 f4       	brcc	.+36     	; 0x255a <malloc+0xa2>
    2536:	12 96       	adiw	r26, 0x02	; 2
    2538:	8d 91       	ld	r24, X+
    253a:	9c 91       	ld	r25, X
    253c:	13 97       	sbiw	r26, 0x03	; 3
    253e:	61 15       	cp	r22, r1
    2540:	71 05       	cpc	r23, r1
    2542:	21 f0       	breq	.+8      	; 0x254c <malloc+0x94>
    2544:	fb 01       	movw	r30, r22
    2546:	93 83       	std	Z+3, r25	; 0x03
    2548:	82 83       	std	Z+2, r24	; 0x02
    254a:	04 c0       	rjmp	.+8      	; 0x2554 <malloc+0x9c>
    254c:	90 93 66 02 	sts	0x0266, r25
    2550:	80 93 65 02 	sts	0x0265, r24
    2554:	fd 01       	movw	r30, r26
    2556:	32 96       	adiw	r30, 0x02	; 2
    2558:	44 c0       	rjmp	.+136    	; 0x25e2 <malloc+0x12a>
    255a:	fd 01       	movw	r30, r26
    255c:	e2 0f       	add	r30, r18
    255e:	f3 1f       	adc	r31, r19
    2560:	81 93       	st	Z+, r24
    2562:	91 93       	st	Z+, r25
    2564:	22 50       	subi	r18, 0x02	; 2
    2566:	31 09       	sbc	r19, r1
    2568:	2d 93       	st	X+, r18
    256a:	3c 93       	st	X, r19
    256c:	3a c0       	rjmp	.+116    	; 0x25e2 <malloc+0x12a>
    256e:	20 91 63 02 	lds	r18, 0x0263
    2572:	30 91 64 02 	lds	r19, 0x0264
    2576:	23 2b       	or	r18, r19
    2578:	41 f4       	brne	.+16     	; 0x258a <malloc+0xd2>
    257a:	20 91 02 02 	lds	r18, 0x0202
    257e:	30 91 03 02 	lds	r19, 0x0203
    2582:	30 93 64 02 	sts	0x0264, r19
    2586:	20 93 63 02 	sts	0x0263, r18
    258a:	20 91 00 02 	lds	r18, 0x0200
    258e:	30 91 01 02 	lds	r19, 0x0201
    2592:	21 15       	cp	r18, r1
    2594:	31 05       	cpc	r19, r1
    2596:	41 f4       	brne	.+16     	; 0x25a8 <malloc+0xf0>
    2598:	2d b7       	in	r18, 0x3d	; 61
    259a:	3e b7       	in	r19, 0x3e	; 62
    259c:	40 91 04 02 	lds	r20, 0x0204
    25a0:	50 91 05 02 	lds	r21, 0x0205
    25a4:	24 1b       	sub	r18, r20
    25a6:	35 0b       	sbc	r19, r21
    25a8:	e0 91 63 02 	lds	r30, 0x0263
    25ac:	f0 91 64 02 	lds	r31, 0x0264
    25b0:	e2 17       	cp	r30, r18
    25b2:	f3 07       	cpc	r31, r19
    25b4:	a0 f4       	brcc	.+40     	; 0x25de <malloc+0x126>
    25b6:	2e 1b       	sub	r18, r30
    25b8:	3f 0b       	sbc	r19, r31
    25ba:	28 17       	cp	r18, r24
    25bc:	39 07       	cpc	r19, r25
    25be:	78 f0       	brcs	.+30     	; 0x25de <malloc+0x126>
    25c0:	ac 01       	movw	r20, r24
    25c2:	4e 5f       	subi	r20, 0xFE	; 254
    25c4:	5f 4f       	sbci	r21, 0xFF	; 255
    25c6:	24 17       	cp	r18, r20
    25c8:	35 07       	cpc	r19, r21
    25ca:	48 f0       	brcs	.+18     	; 0x25de <malloc+0x126>
    25cc:	4e 0f       	add	r20, r30
    25ce:	5f 1f       	adc	r21, r31
    25d0:	50 93 64 02 	sts	0x0264, r21
    25d4:	40 93 63 02 	sts	0x0263, r20
    25d8:	81 93       	st	Z+, r24
    25da:	91 93       	st	Z+, r25
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <malloc+0x12a>
    25de:	e0 e0       	ldi	r30, 0x00	; 0
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	cf 01       	movw	r24, r30
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <free>:
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	09 f4       	brne	.+2      	; 0x2600 <free+0x12>
    25fe:	8f c0       	rjmp	.+286    	; 0x271e <free+0x130>
    2600:	dc 01       	movw	r26, r24
    2602:	12 97       	sbiw	r26, 0x02	; 2
    2604:	13 96       	adiw	r26, 0x03	; 3
    2606:	1c 92       	st	X, r1
    2608:	1e 92       	st	-X, r1
    260a:	12 97       	sbiw	r26, 0x02	; 2
    260c:	e0 90 65 02 	lds	r14, 0x0265
    2610:	f0 90 66 02 	lds	r15, 0x0266
    2614:	e1 14       	cp	r14, r1
    2616:	f1 04       	cpc	r15, r1
    2618:	89 f4       	brne	.+34     	; 0x263c <free+0x4e>
    261a:	2d 91       	ld	r18, X+
    261c:	3c 91       	ld	r19, X
    261e:	11 97       	sbiw	r26, 0x01	; 1
    2620:	28 0f       	add	r18, r24
    2622:	39 1f       	adc	r19, r25
    2624:	80 91 63 02 	lds	r24, 0x0263
    2628:	90 91 64 02 	lds	r25, 0x0264
    262c:	82 17       	cp	r24, r18
    262e:	93 07       	cpc	r25, r19
    2630:	89 f5       	brne	.+98     	; 0x2694 <free+0xa6>
    2632:	b0 93 64 02 	sts	0x0264, r27
    2636:	a0 93 63 02 	sts	0x0263, r26
    263a:	71 c0       	rjmp	.+226    	; 0x271e <free+0x130>
    263c:	e7 01       	movw	r28, r14
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	01 c0       	rjmp	.+2      	; 0x2646 <free+0x58>
    2644:	ea 01       	movw	r28, r20
    2646:	ca 17       	cp	r28, r26
    2648:	db 07       	cpc	r29, r27
    264a:	38 f4       	brcc	.+14     	; 0x265a <free+0x6c>
    264c:	4a 81       	ldd	r20, Y+2	; 0x02
    264e:	5b 81       	ldd	r21, Y+3	; 0x03
    2650:	9e 01       	movw	r18, r28
    2652:	41 15       	cp	r20, r1
    2654:	51 05       	cpc	r21, r1
    2656:	b1 f7       	brne	.-20     	; 0x2644 <free+0x56>
    2658:	22 c0       	rjmp	.+68     	; 0x269e <free+0xb0>
    265a:	bc 01       	movw	r22, r24
    265c:	62 50       	subi	r22, 0x02	; 2
    265e:	71 09       	sbc	r23, r1
    2660:	fb 01       	movw	r30, r22
    2662:	d3 83       	std	Z+3, r29	; 0x03
    2664:	c2 83       	std	Z+2, r28	; 0x02
    2666:	00 81       	ld	r16, Z
    2668:	11 81       	ldd	r17, Z+1	; 0x01
    266a:	ac 01       	movw	r20, r24
    266c:	40 0f       	add	r20, r16
    266e:	51 1f       	adc	r21, r17
    2670:	4c 17       	cp	r20, r28
    2672:	5d 07       	cpc	r21, r29
    2674:	61 f4       	brne	.+24     	; 0x268e <free+0xa0>
    2676:	48 81       	ld	r20, Y
    2678:	59 81       	ldd	r21, Y+1	; 0x01
    267a:	40 0f       	add	r20, r16
    267c:	51 1f       	adc	r21, r17
    267e:	4e 5f       	subi	r20, 0xFE	; 254
    2680:	5f 4f       	sbci	r21, 0xFF	; 255
    2682:	51 83       	std	Z+1, r21	; 0x01
    2684:	40 83       	st	Z, r20
    2686:	4a 81       	ldd	r20, Y+2	; 0x02
    2688:	5b 81       	ldd	r21, Y+3	; 0x03
    268a:	53 83       	std	Z+3, r21	; 0x03
    268c:	42 83       	std	Z+2, r20	; 0x02
    268e:	21 15       	cp	r18, r1
    2690:	31 05       	cpc	r19, r1
    2692:	29 f4       	brne	.+10     	; 0x269e <free+0xb0>
    2694:	b0 93 66 02 	sts	0x0266, r27
    2698:	a0 93 65 02 	sts	0x0265, r26
    269c:	40 c0       	rjmp	.+128    	; 0x271e <free+0x130>
    269e:	f9 01       	movw	r30, r18
    26a0:	b3 83       	std	Z+3, r27	; 0x03
    26a2:	a2 83       	std	Z+2, r26	; 0x02
    26a4:	e9 01       	movw	r28, r18
    26a6:	69 91       	ld	r22, Y+
    26a8:	79 91       	ld	r23, Y+
    26aa:	c6 0f       	add	r28, r22
    26ac:	d7 1f       	adc	r29, r23
    26ae:	ac 17       	cp	r26, r28
    26b0:	bd 07       	cpc	r27, r29
    26b2:	79 f4       	brne	.+30     	; 0x26d2 <free+0xe4>
    26b4:	dc 01       	movw	r26, r24
    26b6:	5e 91       	ld	r21, -X
    26b8:	4e 91       	ld	r20, -X
    26ba:	46 0f       	add	r20, r22
    26bc:	57 1f       	adc	r21, r23
    26be:	4e 5f       	subi	r20, 0xFE	; 254
    26c0:	5f 4f       	sbci	r21, 0xFF	; 255
    26c2:	51 83       	std	Z+1, r21	; 0x01
    26c4:	40 83       	st	Z, r20
    26c6:	12 96       	adiw	r26, 0x02	; 2
    26c8:	8d 91       	ld	r24, X+
    26ca:	9c 91       	ld	r25, X
    26cc:	13 97       	sbiw	r26, 0x03	; 3
    26ce:	93 83       	std	Z+3, r25	; 0x03
    26d0:	82 83       	std	Z+2, r24	; 0x02
    26d2:	a0 e0       	ldi	r26, 0x00	; 0
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <free+0xee>
    26d8:	d7 01       	movw	r26, r14
    26da:	7c 01       	movw	r14, r24
    26dc:	f7 01       	movw	r30, r14
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <free+0xea>
    26e6:	c7 01       	movw	r24, r14
    26e8:	02 96       	adiw	r24, 0x02	; 2
    26ea:	20 81       	ld	r18, Z
    26ec:	31 81       	ldd	r19, Z+1	; 0x01
    26ee:	82 0f       	add	r24, r18
    26f0:	93 1f       	adc	r25, r19
    26f2:	20 91 63 02 	lds	r18, 0x0263
    26f6:	30 91 64 02 	lds	r19, 0x0264
    26fa:	28 17       	cp	r18, r24
    26fc:	39 07       	cpc	r19, r25
    26fe:	79 f4       	brne	.+30     	; 0x271e <free+0x130>
    2700:	10 97       	sbiw	r26, 0x00	; 0
    2702:	29 f4       	brne	.+10     	; 0x270e <free+0x120>
    2704:	10 92 66 02 	sts	0x0266, r1
    2708:	10 92 65 02 	sts	0x0265, r1
    270c:	04 c0       	rjmp	.+8      	; 0x2716 <free+0x128>
    270e:	13 96       	adiw	r26, 0x03	; 3
    2710:	1c 92       	st	X, r1
    2712:	1e 92       	st	-X, r1
    2714:	12 97       	sbiw	r26, 0x02	; 2
    2716:	f0 92 64 02 	sts	0x0264, r15
    271a:	e0 92 63 02 	sts	0x0263, r14
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	08 95       	ret

0000272c <memcpy>:
    272c:	fb 01       	movw	r30, r22
    272e:	dc 01       	movw	r26, r24
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <memcpy+0xa>
    2732:	01 90       	ld	r0, Z+
    2734:	0d 92       	st	X+, r0
    2736:	41 50       	subi	r20, 0x01	; 1
    2738:	50 40       	sbci	r21, 0x00	; 0
    273a:	d8 f7       	brcc	.-10     	; 0x2732 <memcpy+0x6>
    273c:	08 95       	ret

0000273e <_exit>:
    273e:	f8 94       	cli

00002740 <__stop_program>:
    2740:	ff cf       	rjmp	.-2      	; 0x2740 <__stop_program>
