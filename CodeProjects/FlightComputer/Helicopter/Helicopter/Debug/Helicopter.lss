
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800200  00002246  000022da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080026c  0080026c  00002346  2**0
                  ALLOC
  3 .stab         000020f4  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c4  00000000  00000000  0000443c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000518  00000000  00000000  00004d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000533a  00000000  00000000  00005247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021c0  00000000  00000000  0000a581  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000182b  00000000  00000000  0000c741  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001030  00000000  00000000  0000df6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021fa  00000000  00000000  0000ef9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000259f  00000000  00000000  00011196  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000410  00000000  00000000  00013735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
       8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
       c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      10:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      18:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
	{
		//Copy the record
		//danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      68:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      6c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      70:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      74:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      7c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      80:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      84:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      88:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      90:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      94:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      98:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      ac:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      b0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
	}
}
      b4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      b8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      bc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      c0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      c4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      cc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      dc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      e0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
      e8:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <_ZN10helicopter8messages7Message8getBytesEv>
      ec:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
      f0:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <_ZN10helicopter5tasks4Task4initEv>
      f4:	0c 94 83 07 	jmp	0xf06	; 0xf06 <_ZN10helicopter8messages19SimTelemetryMessage8getBytesEv>
      f8:	0c 94 6e 07 	jmp	0xedc	; 0xedc <_ZN10helicopter8messages19SimTelemetryMessageD0Ev>
      fc:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <_ZN10helicopter8messages14MessageBuilderD1Ev>
     100:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>
     104:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <_ZN10helicopter8messages7MessageD0Ev>
     108:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <_ZN10helicopter5tasks4Task11runTaskImplEv>
     10c:	0c 94 96 02 	jmp	0x52c	; 0x52c <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>
     110:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>
     114:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <_ZN10helicopter8messages19SimTelemetryMessageD1Ev>
     118:	0c 94 1f 08 	jmp	0x103e	; 0x103e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     11c:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <_ZN10helicopter8messages14MessageBuilderD0Ev>
     120:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>
     124:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc>
     128:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <_ZN10helicopter8messages14MessageBuilder12buildMessageEv>
     12c:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc>
     130:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     134:	0c 94 ae 08 	jmp	0x115c	; 0x115c <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>
     138:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     13c:	0c 94 67 05 	jmp	0xace	; 0xace <_ZN10helicopter8messages7MessageD1Ev>
     140:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <_ZN10helicopter5tasks4Task7runTaskEv>
     144:	0c 94 00 01 	jmp	0x200	; 0x200 <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     148:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN10helicopter8messages7Message12buildMessageEPc>
     14c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>
     150:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_ZN10helicopter7drivers12SerialDriverD1Ev>

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d1 e2       	ldi	r29, 0x21	; 33
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	0c bf       	out	0x3c, r16	; 60

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b2 e0       	ldi	r27, 0x02	; 2
     16a:	e6 e4       	ldi	r30, 0x46	; 70
     16c:	f2 e2       	ldi	r31, 0x22	; 34
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	0b bf       	out	0x3b, r16	; 59
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
     174:	07 90       	elpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ac 36       	cpi	r26, 0x6C	; 108
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	ac e6       	ldi	r26, 0x6C	; 108
     182:	b2 e0       	ldi	r27, 0x02	; 2
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a2 37       	cpi	r26, 0x72	; 114
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 80 03 	call	0x700	; 0x700 <main>
     192:	0c 94 21 11 	jmp	0x2242	; 0x2242 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
				{
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	2a e0       	ldi	r18, 0x0A	; 10
     1b0:	32 e0       	ldi	r19, 0x02	; 2
     1b2:	fc 01       	movw	r30, r24
     1b4:	31 83       	std	Z+1, r19	; 0x01
     1b6:	20 83       	st	Z, r18
					
				}
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	81 70       	andi	r24, 0x01	; 1
     1be:	99 27       	eor	r25, r25
     1c0:	00 97       	sbiw	r24, 0x00	; 0
     1c2:	21 f0       	breq	.+8      	; 0x1cc <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	9a 81       	ldd	r25, Y+2	; 0x02
     1c8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	1f 92       	push	r1
     1dc:	1f 92       	push	r1
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZN10helicopter7drivers12SerialDriverD1Ev>
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	9a 81       	ldd	r25, Y+2	; 0x02
     1f2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "commonheader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	9c 83       	std	Y+4, r25	; 0x04
     20e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     210:	1a 82       	std	Y+2, r1	; 0x02
     212:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	fc 01       	movw	r30, r24
     21a:	80 85       	ldd	r24, Z+8	; 0x08
     21c:	88 23       	and	r24, r24
     21e:	b9 f1       	breq	.+110    	; 0x28e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	fc 01       	movw	r30, r24
     226:	82 81       	ldd	r24, Z+2	; 0x02
     228:	93 81       	ldd	r25, Z+3	; 0x03
     22a:	a4 81       	ldd	r26, Z+4	; 0x04
     22c:	b5 81       	ldd	r27, Z+5	; 0x05
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	aa 1f       	adc	r26, r26
     234:	bb 1f       	adc	r27, r27
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	aa 1f       	adc	r26, r26
     23c:	bb 1f       	adc	r27, r27
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	aa 1f       	adc	r26, r26
     244:	bb 1f       	adc	r27, r27
     246:	9c 01       	movw	r18, r24
     248:	ad 01       	movw	r20, r26
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	94 e2       	ldi	r25, 0x24	; 36
     24e:	a4 ef       	ldi	r26, 0xF4	; 244
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__udivmodsi4>
     25a:	da 01       	movw	r26, r20
     25c:	c9 01       	movw	r24, r18
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	a1 09       	sbc	r26, r1
     262:	b1 09       	sbc	r27, r1
     264:	bc 01       	movw	r22, r24
     266:	cd 01       	movw	r24, r26
     268:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__floatunsisf>
     26c:	dc 01       	movw	r26, r24
     26e:	cb 01       	movw	r24, r22
     270:	bc 01       	movw	r22, r24
     272:	cd 01       	movw	r24, r26
     274:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <floor>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	9a 83       	std	Y+2, r25	; 0x02
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	3a c0       	rjmp	.+116    	; 0x302 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	9c 81       	ldd	r25, Y+4	; 0x04
     292:	fc 01       	movw	r30, r24
     294:	82 81       	ldd	r24, Z+2	; 0x02
     296:	93 81       	ldd	r25, Z+3	; 0x03
     298:	a4 81       	ldd	r26, Z+4	; 0x04
     29a:	b5 81       	ldd	r27, Z+5	; 0x05
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	aa 1f       	adc	r26, r26
     2a2:	bb 1f       	adc	r27, r27
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	aa 1f       	adc	r26, r26
     2aa:	bb 1f       	adc	r27, r27
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	aa 1f       	adc	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	aa 1f       	adc	r26, r26
     2ba:	bb 1f       	adc	r27, r27
     2bc:	9c 01       	movw	r18, r24
     2be:	ad 01       	movw	r20, r26
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	94 e2       	ldi	r25, 0x24	; 36
     2c4:	a4 ef       	ldi	r26, 0xF4	; 244
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	bc 01       	movw	r22, r24
     2ca:	cd 01       	movw	r24, r26
     2cc:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__udivmodsi4>
     2d0:	da 01       	movw	r26, r20
     2d2:	c9 01       	movw	r24, r18
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	a1 09       	sbc	r26, r1
     2d8:	b1 09       	sbc	r27, r1
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__floatunsisf>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	bc 01       	movw	r22, r24
     2e8:	cd 01       	movw	r24, r26
     2ea:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <floor>
     2ee:	dc 01       	movw	r26, r24
     2f0:	cb 01       	movw	r24, r22
     2f2:	bc 01       	movw	r22, r24
     2f4:	cd 01       	movw	r24, r26
     2f6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fixunssfsi>
     2fa:	dc 01       	movw	r26, r24
     2fc:	cb 01       	movw	r24, r22
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     302:	8b 81       	ldd	r24, Y+3	; 0x03
     304:	9c 81       	ldd	r25, Y+4	; 0x04
     306:	fc 01       	movw	r30, r24
     308:	86 81       	ldd	r24, Z+6	; 0x06
     30a:	88 23       	and	r24, r24
     30c:	41 f5       	brne	.+80     	; 0x35e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     30e:	84 ec       	ldi	r24, 0xC4	; 196
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	29 81       	ldd	r18, Y+1	; 0x01
     314:	3a 81       	ldd	r19, Y+2	; 0x02
     316:	fc 01       	movw	r30, r24
     318:	31 83       	std	Z+1, r19	; 0x01
     31a:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     31c:	82 ec       	ldi	r24, 0xC2	; 194
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	22 ec       	ldi	r18, 0xC2	; 194
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	26 60       	ori	r18, 0x06	; 6
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	fc 01       	movw	r30, r24
     334:	80 85       	ldd	r24, Z+8	; 0x08
     336:	88 23       	and	r24, r24
     338:	49 f0       	breq	.+18     	; 0x34c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     33a:	80 ec       	ldi	r24, 0xC0	; 192
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 ec       	ldi	r18, 0xC0	; 192
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	f9 01       	movw	r30, r18
     344:	20 81       	ld	r18, Z
     346:	22 60       	ori	r18, 0x02	; 2
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     34c:	81 ec       	ldi	r24, 0xC1	; 193
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	21 ec       	ldi	r18, 0xC1	; 193
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	28 61       	ori	r18, 0x18	; 24
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
	}
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>:

int SerialDriver::transmitByte(byte byteToSend)
{
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x6>
     372:	1f 92       	push	r1
     374:	1f 92       	push	r1
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9c 83       	std	Y+4, r25	; 0x04
     37c:	8b 83       	std	Y+3, r24	; 0x03
     37e:	6d 83       	std	Y+5, r22	; 0x05
	if (uartPort == Zero)
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	9c 81       	ldd	r25, Y+4	; 0x04
     384:	fc 01       	movw	r30, r24
     386:	86 81       	ldd	r24, Z+6	; 0x06
     388:	88 23       	and	r24, r24
     38a:	49 f5       	brne	.+82     	; 0x3de <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x72>
	{
		int counter = 0;
     38c:	1a 82       	std	Y+2, r1	; 0x02
     38e:	19 82       	std	Y+1, r1	; 0x01
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     390:	13 c0       	rjmp	.+38     	; 0x3b8 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x4c>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	fc 01       	movw	r30, r24
     398:	87 81       	ldd	r24, Z+7	; 0x07
     39a:	88 23       	and	r24, r24
     39c:	69 f0       	breq	.+26     	; 0x3b8 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x4c>
			{
				if (counter > SENDTIMEOUTCOUNTER)
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	89 32       	cpi	r24, 0x29	; 41
     3a4:	91 05       	cpc	r25, r1
     3a6:	1c f0       	brlt	.+6      	; 0x3ae <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x42>
				{
					return -1;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	9f ef       	ldi	r25, 0xFF	; 255
     3ac:	1a c0       	rjmp	.+52     	; 0x3e2 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x76>
				}
				
				counter++;
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
	if (uartPort == Zero)
	{
		int counter = 0;
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     3b8:	80 ec       	ldi	r24, 0xC0	; 192
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	80 72       	andi	r24, 0x20	; 32
     3c6:	99 27       	eor	r25, r25
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x64>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	22 23       	and	r18, r18
     3d2:	f9 f6       	brne	.-66     	; 0x392 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x26>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     3d4:	86 ec       	ldi	r24, 0xC6	; 198
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	2d 81       	ldd	r18, Y+5	; 0x05
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
	}
	
	return 0;
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
}
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x6>
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x8>
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	9c 83       	std	Y+4, r25	; 0x04
     400:	8b 83       	std	Y+3, r24	; 0x03
     402:	7e 83       	std	Y+6, r23	; 0x06
     404:	6d 83       	std	Y+5, r22	; 0x05
	if (uartPort == Zero)
     406:	8b 81       	ldd	r24, Y+3	; 0x03
     408:	9c 81       	ldd	r25, Y+4	; 0x04
     40a:	fc 01       	movw	r30, r24
     40c:	86 81       	ldd	r24, Z+6	; 0x06
     40e:	88 23       	and	r24, r24
     410:	41 f5       	brne	.+80     	; 0x462 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x70>
	{
		int counter = 0;
     412:	1a 82       	std	Y+2, r1	; 0x02
     414:	19 82       	std	Y+1, r1	; 0x01
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     416:	13 c0       	rjmp	.+38     	; 0x43e <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x4c>
		{
			if (isTimeoutEnabled)
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	9c 81       	ldd	r25, Y+4	; 0x04
     41c:	fc 01       	movw	r30, r24
     41e:	87 81       	ldd	r24, Z+7	; 0x07
     420:	88 23       	and	r24, r24
     422:	69 f0       	breq	.+26     	; 0x43e <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x4c>
			{
				//Check for timeout
				if (counter > RECEIVETIMEOUTCOUNTER)
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	89 32       	cpi	r24, 0x29	; 41
     42a:	91 05       	cpc	r25, r1
     42c:	1c f0       	brlt	.+6      	; 0x434 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x42>
				{
					return -1;
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	9f ef       	ldi	r25, 0xFF	; 255
     432:	19 c0       	rjmp	.+50     	; 0x466 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x74>
				}
			
				counter++;			
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	9a 81       	ldd	r25, Y+2	; 0x02
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	9a 83       	std	Y+2, r25	; 0x02
     43c:	89 83       	std	Y+1, r24	; 0x01
	if (uartPort == Zero)
	{
		int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     43e:	80 ec       	ldi	r24, 0xC0	; 192
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	fc 01       	movw	r30, r24
     444:	80 81       	ld	r24, Z
     446:	80 95       	com	r24
     448:	88 1f       	adc	r24, r24
     44a:	88 27       	eor	r24, r24
     44c:	88 1f       	adc	r24, r24
     44e:	88 23       	and	r24, r24
     450:	19 f7       	brne	.-58     	; 0x418 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x26>
			}
		}
		
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
     452:	86 ec       	ldi	r24, 0xC6	; 198
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	fc 01       	movw	r30, r24
     458:	20 81       	ld	r18, Z
     45a:	8d 81       	ldd	r24, Y+5	; 0x05
     45c:	9e 81       	ldd	r25, Y+6	; 0x06
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
	}
	
	return 0;
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	26 96       	adiw	r28, 0x06	; 6
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>:
					
					int ledToBlink;
				
				public:

				FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	28 97       	sbiw	r28, 0x08	; 8
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	7c 83       	std	Y+4, r23	; 0x04
     492:	6b 83       	std	Y+3, r22	; 0x03
     494:	5e 83       	std	Y+6, r21	; 0x06
     496:	4d 83       	std	Y+5, r20	; 0x05
     498:	38 87       	std	Y+8, r19	; 0x08
     49a:	2f 83       	std	Y+7, r18	; 0x07
					Task(delay, period),
					isOn(false),
					ledToBlink(ledToBlink)
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	4d 81       	ldd	r20, Y+5	; 0x05
     4a2:	5e 81       	ldd	r21, Y+6	; 0x06
     4a4:	2b 81       	ldd	r18, Y+3	; 0x03
     4a6:	3c 81       	ldd	r19, Y+4	; 0x04
     4a8:	b9 01       	movw	r22, r18
     4aa:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN10helicopter5tasks4TaskC1Eii>
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	28 e1       	ldi	r18, 0x18	; 24
     4b4:	32 e0       	ldi	r19, 0x02	; 2
     4b6:	fc 01       	movw	r30, r24
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	fc 01       	movw	r30, r24
     4c2:	17 82       	std	Z+7, r1	; 0x07
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	2f 81       	ldd	r18, Y+7	; 0x07
     4ca:	38 85       	ldd	r19, Y+8	; 0x08
     4cc:	fc 01       	movw	r30, r24
     4ce:	31 87       	std	Z+9, r19	; 0x09
     4d0:	20 87       	std	Z+8, r18	; 0x08
				{
					
				}
     4d2:	28 96       	adiw	r28, 0x08	; 8
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>:
	
				void init()
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	1f 92       	push	r1
     4ea:	1f 92       	push	r1
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	9a 83       	std	Y+2, r25	; 0x02
     4f2:	89 83       	std	Y+1, r24	; 0x01
				{
					DDRA |= (1<<ledToBlink);
     4f4:	81 e2       	ldi	r24, 0x21	; 33
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	21 e2       	ldi	r18, 0x21	; 33
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	62 2f       	mov	r22, r18
     502:	29 81       	ldd	r18, Y+1	; 0x01
     504:	3a 81       	ldd	r19, Y+2	; 0x02
     506:	f9 01       	movw	r30, r18
     508:	40 85       	ldd	r20, Z+8	; 0x08
     50a:	51 85       	ldd	r21, Z+9	; 0x09
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	04 2e       	mov	r0, r20
     512:	02 c0       	rjmp	.+4      	; 0x518 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x34>
     514:	22 0f       	add	r18, r18
     516:	33 1f       	adc	r19, r19
     518:	0a 94       	dec	r0
     51a:	e2 f7       	brpl	.-8      	; 0x514 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x30>
     51c:	26 2b       	or	r18, r22
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
				}
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>:
	
				/**
				 * Flashes the LED
				 */
				void runTaskImpl() {
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	1f 92       	push	r1
     532:	1f 92       	push	r1
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	9a 83       	std	Y+2, r25	; 0x02
     53a:	89 83       	std	Y+1, r24	; 0x01
					if (isOn)
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	fc 01       	movw	r30, r24
     542:	87 81       	ldd	r24, Z+7	; 0x07
     544:	88 23       	and	r24, r24
     546:	e9 f0       	breq	.+58     	; 0x582 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x56>
					{
						PORTA &= ~(1<<ledToBlink);
     548:	82 e2       	ldi	r24, 0x22	; 34
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	22 e2       	ldi	r18, 0x22	; 34
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	f9 01       	movw	r30, r18
     552:	20 81       	ld	r18, Z
     554:	62 2f       	mov	r22, r18
     556:	29 81       	ldd	r18, Y+1	; 0x01
     558:	3a 81       	ldd	r19, Y+2	; 0x02
     55a:	f9 01       	movw	r30, r18
     55c:	40 85       	ldd	r20, Z+8	; 0x08
     55e:	51 85       	ldd	r21, Z+9	; 0x09
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	04 2e       	mov	r0, r20
     566:	02 c0       	rjmp	.+4      	; 0x56c <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x40>
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	0a 94       	dec	r0
     56e:	e2 f7       	brpl	.-8      	; 0x568 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x3c>
     570:	20 95       	com	r18
     572:	26 23       	and	r18, r22
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
						isOn = false;
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	fc 01       	movw	r30, r24
     57e:	17 82       	std	Z+7, r1	; 0x07
     580:	1c c0       	rjmp	.+56     	; 0x5ba <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x8e>
					}else
					{
						PORTA |= (1<<ledToBlink);
     582:	82 e2       	ldi	r24, 0x22	; 34
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	22 e2       	ldi	r18, 0x22	; 34
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	f9 01       	movw	r30, r18
     58c:	20 81       	ld	r18, Z
     58e:	62 2f       	mov	r22, r18
     590:	29 81       	ldd	r18, Y+1	; 0x01
     592:	3a 81       	ldd	r19, Y+2	; 0x02
     594:	f9 01       	movw	r30, r18
     596:	40 85       	ldd	r20, Z+8	; 0x08
     598:	51 85       	ldd	r21, Z+9	; 0x09
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	04 2e       	mov	r0, r20
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x7a>
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x76>
     5aa:	26 2b       	or	r18, r22
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
						isOn = true;
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	fc 01       	movw	r30, r24
     5b8:	27 83       	std	Z+7, r18	; 0x07
					}
				}
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>:
				 * @param uartPort Which UART port on the board to utilize.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
     5c4:	ef 92       	push	r14
     5c6:	0f 93       	push	r16
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	29 97       	sbiw	r28, 0x09	; 9
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	9a 83       	std	Y+2, r25	; 0x02
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	4b 83       	std	Y+3, r20	; 0x03
     5e2:	5c 83       	std	Y+4, r21	; 0x04
     5e4:	6d 83       	std	Y+5, r22	; 0x05
     5e6:	7e 83       	std	Y+6, r23	; 0x06
     5e8:	2f 83       	std	Y+7, r18	; 0x07
     5ea:	08 87       	std	Y+8, r16	; 0x08
     5ec:	e9 86       	std	Y+9, r14	; 0x09
					bool enableTimeout = true,
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	2a e0       	ldi	r18, 0x0A	; 10
     5f4:	32 e0       	ldi	r19, 0x02	; 2
     5f6:	fc 01       	movw	r30, r24
     5f8:	31 83       	std	Z+1, r19	; 0x01
     5fa:	20 83       	st	Z, r18
     5fc:	29 81       	ldd	r18, Y+1	; 0x01
     5fe:	3a 81       	ldd	r19, Y+2	; 0x02
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	9c 81       	ldd	r25, Y+4	; 0x04
     604:	ad 81       	ldd	r26, Y+5	; 0x05
     606:	be 81       	ldd	r27, Y+6	; 0x06
     608:	f9 01       	movw	r30, r18
     60a:	82 83       	std	Z+2, r24	; 0x02
     60c:	93 83       	std	Z+3, r25	; 0x03
     60e:	a4 83       	std	Z+4, r26	; 0x04
     610:	b5 83       	std	Z+5, r27	; 0x05
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	2f 81       	ldd	r18, Y+7	; 0x07
     618:	fc 01       	movw	r30, r24
     61a:	26 83       	std	Z+6, r18	; 0x06
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	28 85       	ldd	r18, Y+8	; 0x08
     622:	fc 01       	movw	r30, r24
     624:	27 83       	std	Z+7, r18	; 0x07
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	29 85       	ldd	r18, Y+9	; 0x09
     62c:	fc 01       	movw	r30, r24
     62e:	20 87       	std	Z+8, r18	; 0x08
				{}
     630:	29 96       	adiw	r28, 0x09	; 9
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	0f 91       	pop	r16
     642:	ef 90       	pop	r14
     644:	08 95       	ret

00000646 <_ZN10helicopter8messages14MessageBuilderC1Ev>:
				byte messageType;
				
			public:
			
				//TODO: Implement destructor. and delete internalMessage
				MessageBuilder(): internalMessage(NULL), internalMessageCounter(0) {}
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	1f 92       	push	r1
     64c:	1f 92       	push	r1
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	9a 81       	ldd	r25, Y+2	; 0x02
     65a:	2e e2       	ldi	r18, 0x2E	; 46
     65c:	32 e0       	ldi	r19, 0x02	; 2
     65e:	fc 01       	movw	r30, r24
     660:	31 83       	std	Z+1, r19	; 0x01
     662:	20 83       	st	Z, r18
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	fc 01       	movw	r30, r24
     66a:	13 82       	std	Z+3, r1	; 0x03
     66c:	12 82       	std	Z+2, r1	; 0x02
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	fc 01       	movw	r30, r24
     674:	15 82       	std	Z+5, r1	; 0x05
     676:	14 82       	std	Z+4, r1	; 0x04
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE>:
				 * This is because internally, the message builder 'builds' the message as the bytes
				 * are received. If another message starts to be received and starts inserting
				 * bytes into the same internal message structure, it will corrupt the message
				 * being built. 
				 */
				RadioInterface(SerialDriver *serialDriver, MessageBuilder *builder):
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	00 d0       	rcall	.+0      	; 0x688 <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE+0x6>
     688:	00 d0       	rcall	.+0      	; 0x68a <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE+0x8>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	7c 83       	std	Y+4, r23	; 0x04
     694:	6b 83       	std	Y+3, r22	; 0x03
     696:	5e 83       	std	Y+6, r21	; 0x06
     698:	4d 83       	std	Y+5, r20	; 0x05
					serialDriver(serialDriver),
					msgBuilder(builder)
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	2b 81       	ldd	r18, Y+3	; 0x03
     6a0:	3c 81       	ldd	r19, Y+4	; 0x04
     6a2:	fc 01       	movw	r30, r24
     6a4:	31 83       	std	Z+1, r19	; 0x01
     6a6:	20 83       	st	Z, r18
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	2d 81       	ldd	r18, Y+5	; 0x05
     6ae:	3e 81       	ldd	r19, Y+6	; 0x06
     6b0:	fc 01       	movw	r30, r24
     6b2:	33 83       	std	Z+3, r19	; 0x03
     6b4:	22 83       	std	Z+2, r18	; 0x02
					{}
     6b6:	26 96       	adiw	r28, 0x06	; 6
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int rawMagZ;
			
			public:
			
			SystemModel():
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	1f 92       	push	r1
     6ce:	1f 92       	push	r1
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	9a 83       	std	Y+2, r25	; 0x02
     6d6:	89 83       	std	Y+1, r24	; 0x01
			rawMagX(0),
			rawMagY(0),
			rawMagZ(0)
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	fc 01       	movw	r30, r24
     6de:	11 82       	std	Z+1, r1	; 0x01
     6e0:	10 82       	st	Z, r1
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	fc 01       	movw	r30, r24
     6e8:	13 82       	std	Z+3, r1	; 0x03
     6ea:	12 82       	std	Z+2, r1	; 0x02
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	9a 81       	ldd	r25, Y+2	; 0x02
     6f0:	fc 01       	movw	r30, r24
     6f2:	15 82       	std	Z+5, r1	; 0x05
     6f4:	14 82       	std	Z+4, r1	; 0x04
			{
				
			}
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <main>:
using namespace helicopter::drivers;
using namespace helicopter::interfaces;
using namespace helicopter::model;

int main(void)
{	
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	60 97       	sbiw	r28, 0x10	; 16
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
     720:	86 e0       	ldi	r24, 0x06	; 6
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     728:	8c 01       	movw	r16, r24
     72a:	c8 01       	movw	r24, r16
     72c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN10helicopter5model11SystemModelC1Ev>
     730:	1a 83       	std	Y+2, r17	; 0x02
     732:	09 83       	std	Y+1, r16	; 0x01
	
	MessageBuilder *messageBuilder = new MessageBuilder();
     734:	87 e0       	ldi	r24, 0x07	; 7
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     73c:	8c 01       	movw	r16, r24
     73e:	c8 01       	movw	r24, r16
     740:	0e 94 23 03 	call	0x646	; 0x646 <_ZN10helicopter8messages14MessageBuilderC1Ev>
     744:	1c 83       	std	Y+4, r17	; 0x04
     746:	0b 83       	std	Y+3, r16	; 0x03
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, false, true);
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     750:	6c 01       	movw	r12, r24
     752:	ee 24       	eor	r14, r14
     754:	e3 94       	inc	r14
     756:	00 e0       	ldi	r16, 0x00	; 0
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	51 ee       	ldi	r21, 0xE1	; 225
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	c6 01       	movw	r24, r12
     764:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>
     768:	de 82       	std	Y+6, r13	; 0x06
     76a:	cd 82       	std	Y+5, r12	; 0x05
	serialDriver->initialize();
     76c:	8d 81       	ldd	r24, Y+5	; 0x05
     76e:	9e 81       	ldd	r25, Y+6	; 0x06
     770:	fc 01       	movw	r30, r24
     772:	80 81       	ld	r24, Z
     774:	91 81       	ldd	r25, Z+1	; 0x01
     776:	04 96       	adiw	r24, 0x04	; 4
     778:	fc 01       	movw	r30, r24
     77a:	20 81       	ld	r18, Z
     77c:	31 81       	ldd	r19, Z+1	; 0x01
     77e:	8d 81       	ldd	r24, Y+5	; 0x05
     780:	9e 81       	ldd	r25, Y+6	; 0x06
     782:	f9 01       	movw	r30, r18
     784:	19 95       	eicall
	
	
	RadioInterface *radioInterface = new RadioInterface(serialDriver, messageBuilder);
     786:	84 e0       	ldi	r24, 0x04	; 4
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     78e:	8c 01       	movw	r16, r24
     790:	2b 81       	ldd	r18, Y+3	; 0x03
     792:	3c 81       	ldd	r19, Y+4	; 0x04
     794:	8d 81       	ldd	r24, Y+5	; 0x05
     796:	9e 81       	ldd	r25, Y+6	; 0x06
     798:	a9 01       	movw	r20, r18
     79a:	bc 01       	movw	r22, r24
     79c:	c8 01       	movw	r24, r16
     79e:	0e 94 41 03 	call	0x682	; 0x682 <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE>
     7a2:	18 87       	std	Y+8, r17	; 0x08
     7a4:	0f 83       	std	Y+7, r16	; 0x07
	
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, TIMER_FREQUENCY_HZ / 4);//starting at tick 1, execute 50 times a second
     7a6:	8b e0       	ldi	r24, 0x0B	; 11
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     7ae:	7c 01       	movw	r14, r24
     7b0:	49 81       	ldd	r20, Y+1	; 0x01
     7b2:	5a 81       	ldd	r21, Y+2	; 0x02
     7b4:	8f 81       	ldd	r24, Y+7	; 0x07
     7b6:	98 85       	ldd	r25, Y+8	; 0x08
     7b8:	02 e3       	ldi	r16, 0x32	; 50
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	bc 01       	movw	r22, r24
     7c2:	c7 01       	movw	r24, r14
     7c4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     7c8:	fa 86       	std	Y+10, r15	; 0x0a
     7ca:	e9 86       	std	Y+9, r14	; 0x09

	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, TIMER_FREQUENCY_HZ / 4);//starting at tick 2, execute 50 times a second
     7cc:	8b e0       	ldi	r24, 0x0B	; 11
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     7d4:	7c 01       	movw	r14, r24
     7d6:	49 81       	ldd	r20, Y+1	; 0x01
     7d8:	5a 81       	ldd	r21, Y+2	; 0x02
     7da:	8f 81       	ldd	r24, Y+7	; 0x07
     7dc:	98 85       	ldd	r25, Y+8	; 0x08
     7de:	02 e3       	ldi	r16, 0x32	; 50
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	bc 01       	movw	r22, r24
     7e8:	c7 01       	movw	r24, r14
     7ea:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     7ee:	fc 86       	std	Y+12, r15	; 0x0c
     7f0:	eb 86       	std	Y+11, r14	; 0x0b
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, TIMER_FREQUENCY_HZ);//starting at tick 3, execute once a second
     7f2:	8a e0       	ldi	r24, 0x0A	; 10
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     7fa:	8c 01       	movw	r16, r24
     7fc:	23 e0       	ldi	r18, 0x03	; 3
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	48 ec       	ldi	r20, 0xC8	; 200
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	c8 01       	movw	r24, r16
     80a:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>
     80e:	1e 87       	std	Y+14, r17	; 0x0e
     810:	0d 87       	std	Y+13, r16	; 0x0d
		
	
	
	Scheduler *scheduler = Scheduler::getScheduler();
     812:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
     816:	98 8b       	std	Y+16, r25	; 0x10
     818:	8f 87       	std	Y+15, r24	; 0x0f
	
	scheduler->addTask(flashTask);
     81a:	2d 85       	ldd	r18, Y+13	; 0x0d
     81c:	3e 85       	ldd	r19, Y+14	; 0x0e
     81e:	8f 85       	ldd	r24, Y+15	; 0x0f
     820:	98 89       	ldd	r25, Y+16	; 0x10
     822:	b9 01       	movw	r22, r18
     824:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
//	scheduler->addTask(simTelemTask);
	
	scheduler->addTask(transTelemTask);
     828:	2b 85       	ldd	r18, Y+11	; 0x0b
     82a:	3c 85       	ldd	r19, Y+12	; 0x0c
     82c:	8f 85       	ldd	r24, Y+15	; 0x0f
     82e:	98 89       	ldd	r25, Y+16	; 0x10
     830:	b9 01       	movw	r22, r18
     832:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
     836:	8f 85       	ldd	r24, Y+15	; 0x0f
     838:	98 89       	ldd	r25, Y+16	; 0x10
     83a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
     83e:	8f 85       	ldd	r24, Y+15	; 0x0f
     840:	98 89       	ldd	r25, Y+16	; 0x10
     842:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	
	while(1)
	{
		scheduler->dispatch(); //ensure it includes processor sleeping.
     846:	8f 85       	ldd	r24, Y+15	; 0x0f
     848:	98 89       	ldd	r25, Y+16	; 0x10
     84a:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
     84e:	fb cf       	rjmp	.-10     	; 0x846 <main+0x146>

00000850 <_ZN10helicopter8messages7Message13getNumOfBytesEv>:
				virtual void buildMessage(byte *message);
				
				/**
				 * Returns the number of bytes in the byte array format of this message.
				 */
				int getNumOfBytes()
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	1f 92       	push	r1
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	9a 83       	std	Y+2, r25	; 0x02
     85e:	89 83       	std	Y+1, r24	; 0x01
				{
					return numBytesInMessage;
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	fc 01       	movw	r30, r24
     866:	83 81       	ldd	r24, Z+3	; 0x03
     868:	94 81       	ldd	r25, Z+4	; 0x04
				}
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE>:

using namespace helicopter::util::common;
using namespace helicopter::interfaces;

int RadioInterface::transmit(Message *msgToSend)
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	2c 97       	sbiw	r28, 0x0c	; 12
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	9a 87       	std	Y+10, r25	; 0x0a
     88a:	89 87       	std	Y+9, r24	; 0x09
     88c:	7c 87       	std	Y+12, r23	; 0x0c
     88e:	6b 87       	std	Y+11, r22	; 0x0b
	int status = 0;
     890:	1a 82       	std	Y+2, r1	; 0x02
     892:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
     894:	8b 85       	ldd	r24, Y+11	; 0x0b
     896:	9c 85       	ldd	r25, Y+12	; 0x0c
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	09 f4       	brne	.+2      	; 0x89e <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x2a>
     89c:	4f c0       	rjmp	.+158    	; 0x93c <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xc8>
	{
		byte *bytesToSend = msgToSend->getBytes();
     89e:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a2:	fc 01       	movw	r30, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	04 96       	adiw	r24, 0x04	; 4
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 81       	ld	r18, Z
     8ae:	31 81       	ldd	r19, Z+1	; 0x01
     8b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b4:	f9 01       	movw	r30, r18
     8b6:	19 95       	eicall
     8b8:	9e 83       	std	Y+6, r25	; 0x06
     8ba:	8d 83       	std	Y+5, r24	; 0x05
		
		int numOfBytes = msgToSend->getNumOfBytes();
     8bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8be:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c0:	0e 94 28 04 	call	0x850	; 0x850 <_ZN10helicopter8messages7Message13getNumOfBytesEv>
     8c4:	98 87       	std	Y+8, r25	; 0x08
     8c6:	8f 83       	std	Y+7, r24	; 0x07
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < numOfBytes && status == 0; i++)
     8c8:	1c 82       	std	Y+4, r1	; 0x04
     8ca:	1b 82       	std	Y+3, r1	; 0x03
     8cc:	23 c0       	rjmp	.+70     	; 0x914 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xa0>
		{
			status = serialDriver->transmitByte(bytesToSend[i]);
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d2:	fc 01       	movw	r30, r24
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	fc 01       	movw	r30, r24
     8da:	80 81       	ld	r24, Z
     8dc:	91 81       	ldd	r25, Z+1	; 0x01
     8de:	06 96       	adiw	r24, 0x06	; 6
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 81       	ld	r18, Z
     8e4:	31 81       	ldd	r19, Z+1	; 0x01
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	4d 81       	ldd	r20, Y+5	; 0x05
     8ec:	5e 81       	ldd	r21, Y+6	; 0x06
     8ee:	84 0f       	add	r24, r20
     8f0:	95 1f       	adc	r25, r21
     8f2:	fc 01       	movw	r30, r24
     8f4:	40 81       	ld	r20, Z
     8f6:	89 85       	ldd	r24, Y+9	; 0x09
     8f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	64 2f       	mov	r22, r20
     902:	f9 01       	movw	r30, r18
     904:	19 95       	eicall
     906:	9a 83       	std	Y+2, r25	; 0x02
     908:	89 83       	std	Y+1, r24	; 0x01
		byte *bytesToSend = msgToSend->getBytes();
		
		int numOfBytes = msgToSend->getNumOfBytes();
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < numOfBytes && status == 0; i++)
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	2b 81       	ldd	r18, Y+3	; 0x03
     916:	3c 81       	ldd	r19, Y+4	; 0x04
     918:	8f 81       	ldd	r24, Y+7	; 0x07
     91a:	98 85       	ldd	r25, Y+8	; 0x08
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	34 f4       	brge	.+12     	; 0x92e <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xba>
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	11 f4       	brne	.+4      	; 0x92e <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xba>
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	01 c0       	rjmp	.+2      	; 0x930 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xbc>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	88 23       	and	r24, r24
     932:	69 f6       	brne	.-102    	; 0x8ce <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x5a>
		{
			status = serialDriver->transmitByte(bytesToSend[i]);
		}
		
		delete bytesToSend;
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
	}
	
	return status;
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     940:	2c 96       	adiw	r28, 0x0c	; 12
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE>:

int RadioInterface::receive(Message * &receivedMessage)
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	2a 97       	sbiw	r28, 0x0a	; 10
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	98 87       	std	Y+8, r25	; 0x08
     968:	8f 83       	std	Y+7, r24	; 0x07
     96a:	7a 87       	std	Y+10, r23	; 0x0a
     96c:	69 87       	std	Y+9, r22	; 0x09
	byte msgType = 0;
     96e:	1d 82       	std	Y+5, r1	; 0x05
	
	//Get the type of the message to build from the radio
	if (serialDriver->receiveByte(msgType) == 0)
     970:	8f 81       	ldd	r24, Y+7	; 0x07
     972:	98 85       	ldd	r25, Y+8	; 0x08
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	08 96       	adiw	r24, 0x08	; 8
     982:	fc 01       	movw	r30, r24
     984:	20 81       	ld	r18, Z
     986:	31 81       	ldd	r19, Z+1	; 0x01
     988:	8f 81       	ldd	r24, Y+7	; 0x07
     98a:	98 85       	ldd	r25, Y+8	; 0x08
     98c:	fc 01       	movw	r30, r24
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	ae 01       	movw	r20, r28
     994:	4b 5f       	subi	r20, 0xFB	; 251
     996:	5f 4f       	sbci	r21, 0xFF	; 255
     998:	ba 01       	movw	r22, r20
     99a:	f9 01       	movw	r30, r18
     99c:	19 95       	eicall
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x54>
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	22 23       	and	r18, r18
     9a8:	09 f4       	brne	.+2      	; 0x9ac <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x5a>
     9aa:	86 c0       	rjmp	.+268    	; 0xab8 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x166>
	{
		//Get the number of bytes that should be contained in that message
		int numOfBytesInMsg = msgBuilder->getNumOfBytesForMessage(msgType);
     9ac:	8f 81       	ldd	r24, Y+7	; 0x07
     9ae:	98 85       	ldd	r25, Y+8	; 0x08
     9b0:	fc 01       	movw	r30, r24
     9b2:	82 81       	ldd	r24, Z+2	; 0x02
     9b4:	93 81       	ldd	r25, Z+3	; 0x03
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	06 96       	adiw	r24, 0x06	; 6
     9be:	fc 01       	movw	r30, r24
     9c0:	20 81       	ld	r18, Z
     9c2:	31 81       	ldd	r19, Z+1	; 0x01
     9c4:	4d 81       	ldd	r20, Y+5	; 0x05
     9c6:	8f 81       	ldd	r24, Y+7	; 0x07
     9c8:	98 85       	ldd	r25, Y+8	; 0x08
     9ca:	fc 01       	movw	r30, r24
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	64 2f       	mov	r22, r20
     9d2:	f9 01       	movw	r30, r18
     9d4:	19 95       	eicall
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
		
		
		if (numOfBytesInMsg > 0)
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	18 16       	cp	r1, r24
     9e0:	19 06       	cpc	r1, r25
     9e2:	0c f0       	brlt	.+2      	; 0x9e6 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x94>
     9e4:	66 c0       	rjmp	.+204    	; 0xab2 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x160>
		{
			//Reset the message builder so it's ready to construct the new message
			msgBuilder->initialize(numOfBytesInMsg, msgType);
     9e6:	4d 81       	ldd	r20, Y+5	; 0x05
     9e8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ea:	98 85       	ldd	r25, Y+8	; 0x08
     9ec:	fc 01       	movw	r30, r24
     9ee:	82 81       	ldd	r24, Z+2	; 0x02
     9f0:	93 81       	ldd	r25, Z+3	; 0x03
     9f2:	2b 81       	ldd	r18, Y+3	; 0x03
     9f4:	3c 81       	ldd	r19, Y+4	; 0x04
     9f6:	b9 01       	movw	r22, r18
     9f8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN10helicopter8messages14MessageBuilder10initializeEic>
			
			//Start reading the rest of the message. The first byte of the 
			//message was already read (the message type).
			for (int i = 1; i < numOfBytesInMsg; i++)
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	9a 83       	std	Y+2, r25	; 0x02
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	2f c0       	rjmp	.+94     	; 0xa64 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x112>
			{
				byte receivedByte = 0;
     a06:	1e 82       	std	Y+6, r1	; 0x06
				
				//Read the byte from the radio
				if (serialDriver->receiveByte(receivedByte) < 0)
     a08:	8f 81       	ldd	r24, Y+7	; 0x07
     a0a:	98 85       	ldd	r25, Y+8	; 0x08
     a0c:	fc 01       	movw	r30, r24
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01
     a18:	08 96       	adiw	r24, 0x08	; 8
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 81       	ld	r18, Z
     a1e:	31 81       	ldd	r19, Z+1	; 0x01
     a20:	8f 81       	ldd	r24, Y+7	; 0x07
     a22:	98 85       	ldd	r25, Y+8	; 0x08
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	ae 01       	movw	r20, r28
     a2c:	4a 5f       	subi	r20, 0xFA	; 250
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	ba 01       	movw	r22, r20
     a32:	f9 01       	movw	r30, r18
     a34:	19 95       	eicall
     a36:	89 2f       	mov	r24, r25
     a38:	88 1f       	adc	r24, r24
     a3a:	88 27       	eor	r24, r24
     a3c:	88 1f       	adc	r24, r24
     a3e:	88 23       	and	r24, r24
     a40:	19 f0       	breq	.+6      	; 0xa48 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0xf6>
				{
					//msg timed out
					return -1;
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	9f ef       	ldi	r25, 0xFF	; 255
     a46:	3a c0       	rjmp	.+116    	; 0xabc <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x16a>
				}else
				{
					msgBuilder->addByte(receivedByte);
     a48:	2e 81       	ldd	r18, Y+6	; 0x06
     a4a:	8f 81       	ldd	r24, Y+7	; 0x07
     a4c:	98 85       	ldd	r25, Y+8	; 0x08
     a4e:	fc 01       	movw	r30, r24
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	93 81       	ldd	r25, Z+3	; 0x03
     a54:	62 2f       	mov	r22, r18
     a56:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN10helicopter8messages14MessageBuilder7addByteEc>
			//Reset the message builder so it's ready to construct the new message
			msgBuilder->initialize(numOfBytesInMsg, msgType);
			
			//Start reading the rest of the message. The first byte of the 
			//message was already read (the message type).
			for (int i = 1; i < numOfBytesInMsg; i++)
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	9a 81       	ldd	r25, Y+2	; 0x02
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	41 e0       	ldi	r20, 0x01	; 1
     a66:	29 81       	ldd	r18, Y+1	; 0x01
     a68:	3a 81       	ldd	r19, Y+2	; 0x02
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	9c 81       	ldd	r25, Y+4	; 0x04
     a6e:	28 17       	cp	r18, r24
     a70:	39 07       	cpc	r19, r25
     a72:	0c f0       	brlt	.+2      	; 0xa76 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x124>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	44 23       	and	r20, r20
     a78:	31 f6       	brne	.-116    	; 0xa06 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0xb4>
				{
					msgBuilder->addByte(receivedByte);
				}
			}
			
			receivedMessage = msgBuilder->buildMessage();
     a7a:	8f 81       	ldd	r24, Y+7	; 0x07
     a7c:	98 85       	ldd	r25, Y+8	; 0x08
     a7e:	fc 01       	movw	r30, r24
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	fc 01       	movw	r30, r24
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	04 96       	adiw	r24, 0x04	; 4
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 81       	ld	r18, Z
     a90:	31 81       	ldd	r19, Z+1	; 0x01
     a92:	8f 81       	ldd	r24, Y+7	; 0x07
     a94:	98 85       	ldd	r25, Y+8	; 0x08
     a96:	fc 01       	movw	r30, r24
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	93 81       	ldd	r25, Z+3	; 0x03
     a9c:	f9 01       	movw	r30, r18
     a9e:	19 95       	eicall
     aa0:	9c 01       	movw	r18, r24
     aa2:	89 85       	ldd	r24, Y+9	; 0x09
     aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa6:	fc 01       	movw	r30, r24
     aa8:	31 83       	std	Z+1, r19	; 0x01
     aaa:	20 83       	st	Z, r18
	{
		//failed to receive the message type byte / timeout
		return -3;
	}
	
	return 0;
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	05 c0       	rjmp	.+10     	; 0xabc <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x16a>
			
			receivedMessage = msgBuilder->buildMessage();
		}else
		{
			//Unknown message type
			return -2;
     ab2:	8e ef       	ldi	r24, 0xFE	; 254
     ab4:	9f ef       	ldi	r25, 0xFF	; 255
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x16a>
		}
	}else
	{
		//failed to receive the message type byte / timeout
		return -3;
     ab8:	8d ef       	ldi	r24, 0xFD	; 253
     aba:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	return 0;
     abc:	2a 96       	adiw	r28, 0x0a	; 10
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <_ZN10helicopter8messages7MessageD1Ev>:
				int numBytesInMessage;
			
			public:
				Message (byte msgType, int numOfBytesInMessage);
					
				virtual ~Message() {}
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	1f 92       	push	r1
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	89 83       	std	Y+1, r24	; 0x01
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	22 e2       	ldi	r18, 0x22	; 34
     ae4:	32 e0       	ldi	r19, 0x02	; 2
     ae6:	fc 01       	movw	r30, r24
     ae8:	31 83       	std	Z+1, r19	; 0x01
     aea:	20 83       	st	Z, r18
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	81 70       	andi	r24, 0x01	; 1
     af2:	99 27       	eor	r25, r25
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	21 f0       	breq	.+8      	; 0xb00 <_ZN10helicopter8messages7MessageD1Ev+0x32>
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <_ZN10helicopter8messages7MessageD0Ev>:
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	1f 92       	push	r1
     b10:	1f 92       	push	r1
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	9a 83       	std	Y+2, r25	; 0x02
     b18:	89 83       	std	Y+1, r24	; 0x01
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	9a 81       	ldd	r25, Y+2	; 0x02
     b1e:	0e 94 67 05 	call	0xace	; 0xace <_ZN10helicopter8messages7MessageD1Ev>
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <_ZN10helicopter8messages7MessageC1Eci>:

#include "Message.h"

using namespace helicopter::messages;

Message::Message (byte msgType, int numOfBytesInMessage):
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <_ZN10helicopter8messages7MessageC1Eci+0x6>
     b3a:	1f 92       	push	r1
     b3c:	1f 92       	push	r1
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6b 83       	std	Y+3, r22	; 0x03
     b48:	5d 83       	std	Y+5, r21	; 0x05
     b4a:	4c 83       	std	Y+4, r20	; 0x04
msgType(msgType),
numBytesInMessage(numOfBytesInMessage)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	22 e2       	ldi	r18, 0x22	; 34
     b52:	32 e0       	ldi	r19, 0x02	; 2
     b54:	fc 01       	movw	r30, r24
     b56:	31 83       	std	Z+1, r19	; 0x01
     b58:	20 83       	st	Z, r18
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	2b 81       	ldd	r18, Y+3	; 0x03
     b60:	fc 01       	movw	r30, r24
     b62:	22 83       	std	Z+2, r18	; 0x02
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	2c 81       	ldd	r18, Y+4	; 0x04
     b6a:	3d 81       	ldd	r19, Y+5	; 0x05
     b6c:	fc 01       	movw	r30, r24
     b6e:	34 83       	std	Z+4, r19	; 0x04
     b70:	23 83       	std	Z+3, r18	; 0x03
{
}
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <_ZN10helicopter8messages7Message8getBytesEv>:
/**
	* Returns the bytes in this message as an array of bytes where
	* the number of bytes is equal to whats returned by getNumOfBytes
	*/
byte* Message::getBytes()
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	1f 92       	push	r1
     b88:	1f 92       	push	r1
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
	return NULL;	
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
}
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <_ZN10helicopter8messages7Message12buildMessageEPc>:
	* object with the parsed values
	* @param message the message in byte structure to be parsed
	* to populate this object with data. 
	*/
void Message::buildMessage(byte *message)
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <_ZN10helicopter8messages7Message12buildMessageEPc+0x6>
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	7c 83       	std	Y+4, r23	; 0x04
     bb2:	6b 83       	std	Y+3, r22	; 0x03
	
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <_ZN10helicopter8messages14MessageBuilderD1Ev>:
					
				virtual ~MessageBuilder() {}
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	1f 92       	push	r1
     bc8:	1f 92       	push	r1
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	9a 83       	std	Y+2, r25	; 0x02
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	2e e2       	ldi	r18, 0x2E	; 46
     bd8:	32 e0       	ldi	r19, 0x02	; 2
     bda:	fc 01       	movw	r30, r24
     bdc:	31 83       	std	Z+1, r19	; 0x01
     bde:	20 83       	st	Z, r18
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	81 70       	andi	r24, 0x01	; 1
     be6:	99 27       	eor	r25, r25
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	21 f0       	breq	.+8      	; 0xbf4 <_ZN10helicopter8messages14MessageBuilderD1Ev+0x32>
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <_ZN10helicopter8messages14MessageBuilderD0Ev>:
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	1f 92       	push	r1
     c04:	1f 92       	push	r1
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN10helicopter8messages14MessageBuilderD1Ev>
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <_ZN10helicopter8messages19SimTelemetryMessageC1Ev>:
			sizeof(msgType) +
			sizeof(magX) +
			sizeof(magY) +
			sizeof(magZ);
						
			SimTelemetryMessage(): Message(SimTelemetryMessageType, MessageSize),
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	1f 92       	push	r1
     c2e:	1f 92       	push	r1
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
				magX(0),
				magY(0),
				magZ(0)
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	47 e0       	ldi	r20, 0x07	; 7
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN10helicopter8messages7MessageC1Eci>
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	2a e3       	ldi	r18, 0x3A	; 58
     c4c:	32 e0       	ldi	r19, 0x02	; 2
     c4e:	fc 01       	movw	r30, r24
     c50:	31 83       	std	Z+1, r19	; 0x01
     c52:	20 83       	st	Z, r18
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	fc 01       	movw	r30, r24
     c5a:	16 82       	std	Z+6, r1	; 0x06
     c5c:	15 82       	std	Z+5, r1	; 0x05
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	fc 01       	movw	r30, r24
     c64:	10 86       	std	Z+8, r1	; 0x08
     c66:	17 82       	std	Z+7, r1	; 0x07
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	fc 01       	movw	r30, r24
     c6e:	12 86       	std	Z+10, r1	; 0x0a
     c70:	11 86       	std	Z+9, r1	; 0x09
			{
				
			}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(msgType) +
				sizeof(magX) +
				sizeof(magY) +
				sizeof(magZ);
			
				SystemTelemetryMessage(): Message(SystemTelemetryMessageType, MessageSize),
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	1f 92       	push	r1
     c82:	1f 92       	push	r1
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
					magX(0),
					magY(0),
					magZ(0)
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	47 e0       	ldi	r20, 0x07	; 7
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	62 e0       	ldi	r22, 0x02	; 2
     c96:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN10helicopter8messages7MessageC1Eci>
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	26 e4       	ldi	r18, 0x46	; 70
     ca0:	32 e0       	ldi	r19, 0x02	; 2
     ca2:	fc 01       	movw	r30, r24
     ca4:	31 83       	std	Z+1, r19	; 0x01
     ca6:	20 83       	st	Z, r18
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	fc 01       	movw	r30, r24
     cae:	16 82       	std	Z+6, r1	; 0x06
     cb0:	15 82       	std	Z+5, r1	; 0x05
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	fc 01       	movw	r30, r24
     cb8:	10 86       	std	Z+8, r1	; 0x08
     cba:	17 82       	std	Z+7, r1	; 0x07
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	fc 01       	movw	r30, r24
     cc2:	12 86       	std	Z+10, r1	; 0x0a
     cc4:	11 86       	std	Z+9, r1	; 0x09
				{
				
				}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <_ZN10helicopter8messages14MessageBuilder10initializeEic>:
#include "SystemTelemetryMessage.h"

using namespace helicopter::messages;

void MessageBuilder::initialize(int numOfBytesInMessage, byte messageType)
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <_ZN10helicopter8messages14MessageBuilder10initializeEic+0x6>
     cd6:	1f 92       	push	r1
     cd8:	1f 92       	push	r1
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	7c 83       	std	Y+4, r23	; 0x04
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	4d 83       	std	Y+5, r20	; 0x05
	if (internalMessage != NULL)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	fc 01       	movw	r30, r24
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	61 f0       	breq	.+24     	; 0xd0e <_ZN10helicopter8messages14MessageBuilder10initializeEic+0x3e>
	{
		delete internalMessage;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	fc 01       	movw	r30, r24
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
		
		internalMessage = NULL;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	fc 01       	movw	r30, r24
     d0a:	13 82       	std	Z+3, r1	; 0x03
     d0c:	12 82       	std	Z+2, r1	; 0x02
	}
	
	this->messageType = messageType;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	2d 81       	ldd	r18, Y+5	; 0x05
     d14:	fc 01       	movw	r30, r24
     d16:	26 83       	std	Z+6, r18	; 0x06
	
	internalMessage = new byte[numOfBytesInMessage];
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_Znaj>
     d20:	9c 01       	movw	r18, r24
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	fc 01       	movw	r30, r24
     d28:	33 83       	std	Z+3, r19	; 0x03
     d2a:	22 83       	std	Z+2, r18	; 0x02
	
	internalMessageCounter = 0;
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	fc 01       	movw	r30, r24
     d32:	15 82       	std	Z+5, r1	; 0x05
     d34:	14 82       	std	Z+4, r1	; 0x04
	
	internalMessage[internalMessageCounter++] = messageType;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	fc 01       	movw	r30, r24
     d3c:	42 81       	ldd	r20, Z+2	; 0x02
     d3e:	53 81       	ldd	r21, Z+3	; 0x03
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	fc 01       	movw	r30, r24
     d46:	84 81       	ldd	r24, Z+4	; 0x04
     d48:	95 81       	ldd	r25, Z+5	; 0x05
     d4a:	9c 01       	movw	r18, r24
     d4c:	24 0f       	add	r18, r20
     d4e:	35 1f       	adc	r19, r21
     d50:	4d 81       	ldd	r20, Y+5	; 0x05
     d52:	f9 01       	movw	r30, r18
     d54:	40 83       	st	Z, r20
     d56:	9c 01       	movw	r18, r24
     d58:	2f 5f       	subi	r18, 0xFF	; 255
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	fc 01       	movw	r30, r24
     d62:	35 83       	std	Z+5, r19	; 0x05
     d64:	24 83       	std	Z+4, r18	; 0x04
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <_ZN10helicopter8messages14MessageBuilder7addByteEc>:

void MessageBuilder::addByte(byte byteToAdd)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <_ZN10helicopter8messages14MessageBuilder7addByteEc+0x6>
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	6b 83       	std	Y+3, r22	; 0x03
	internalMessage[internalMessageCounter++] = byteToAdd;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	fc 01       	movw	r30, r24
     d8c:	42 81       	ldd	r20, Z+2	; 0x02
     d8e:	53 81       	ldd	r21, Z+3	; 0x03
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	fc 01       	movw	r30, r24
     d96:	84 81       	ldd	r24, Z+4	; 0x04
     d98:	95 81       	ldd	r25, Z+5	; 0x05
     d9a:	9c 01       	movw	r18, r24
     d9c:	24 0f       	add	r18, r20
     d9e:	35 1f       	adc	r19, r21
     da0:	4b 81       	ldd	r20, Y+3	; 0x03
     da2:	f9 01       	movw	r30, r18
     da4:	40 83       	st	Z, r20
     da6:	9c 01       	movw	r18, r24
     da8:	2f 5f       	subi	r18, 0xFF	; 255
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	fc 01       	movw	r30, r24
     db2:	35 83       	std	Z+5, r19	; 0x05
     db4:	24 83       	std	Z+4, r18	; 0x04
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc>:

int MessageBuilder::getNumOfBytesForMessage(byte messageType)
{
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x6>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	6b 83       	std	Y+3, r22	; 0x03
	if (messageType == SimTelemetryMessage::SimTelemetryMessageType)
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	19 f4       	brne	.+6      	; 0xdde <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x1c>
	{
		return SimTelemetryMessage::MessageSize;
     dd8:	87 e0       	ldi	r24, 0x07	; 7
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x2c>
	}else if (messageType == SystemTelemetryMessage::SystemTelemetryMessageType)
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	19 f4       	brne	.+6      	; 0xdea <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x28>
	{
		return SystemTelemetryMessage::MessageSize;
     de4:	87 e0       	ldi	r24, 0x07	; 7
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x2c>
	}
	
	return 0;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
}
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <_ZN10helicopter8messages14MessageBuilder12buildMessageEv>:

Message *MessageBuilder::buildMessage()
{
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	00 d0       	rcall	.+0      	; 0xe04 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0xa>
     e04:	1f 92       	push	r1
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9c 83       	std	Y+4, r25	; 0x04
     e0c:	8b 83       	std	Y+3, r24	; 0x03
	Message *message = NULL;
     e0e:	1a 82       	std	Y+2, r1	; 0x02
     e10:	19 82       	std	Y+1, r1	; 0x01
	
	if (messageType == SimTelemetryMessage::SimTelemetryMessageType)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	fc 01       	movw	r30, r24
     e18:	86 81       	ldd	r24, Z+6	; 0x06
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	59 f4       	brne	.+22     	; 0xe34 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x3a>
	{
		message = new SimTelemetryMessage();
     e1e:	8b e0       	ldi	r24, 0x0B	; 11
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     e26:	8c 01       	movw	r16, r24
     e28:	c8 01       	movw	r24, r16
     e2a:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN10helicopter8messages19SimTelemetryMessageC1Ev>
     e2e:	1a 83       	std	Y+2, r17	; 0x02
     e30:	09 83       	std	Y+1, r16	; 0x01
     e32:	10 c0       	rjmp	.+32     	; 0xe54 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x5a>
	}else if (messageType == SystemTelemetryMessage::SystemTelemetryMessageType)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	fc 01       	movw	r30, r24
     e3a:	86 81       	ldd	r24, Z+6	; 0x06
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	51 f4       	brne	.+20     	; 0xe54 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x5a>
	{
		message = new SystemTelemetryMessage();
     e40:	8b e0       	ldi	r24, 0x0B	; 11
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
     e48:	8c 01       	movw	r16, r24
     e4a:	c8 01       	movw	r24, r16
     e4c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
     e50:	1a 83       	std	Y+2, r17	; 0x02
     e52:	09 83       	std	Y+1, r16	; 0x01
	}
	
	if (message != NULL)
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	99 f0       	breq	.+38     	; 0xe82 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x88>
	{
		message->buildMessage(internalMessage);
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	06 96       	adiw	r24, 0x06	; 6
     e68:	fc 01       	movw	r30, r24
     e6a:	20 81       	ld	r18, Z
     e6c:	31 81       	ldd	r19, Z+1	; 0x01
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	fc 01       	movw	r30, r24
     e74:	42 81       	ldd	r20, Z+2	; 0x02
     e76:	53 81       	ldd	r21, Z+3	; 0x03
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	ba 01       	movw	r22, r20
     e7e:	f9 01       	movw	r30, r18
     e80:	19 95       	eicall
	}
	//TODO IMPLEMENT
	//do a bunch of switch statements on which message to build.
	
	return message;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <_ZN10helicopter8messages19SimTelemetryMessageD1Ev>:
	
			~SimTelemetryMessage() {}
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	1f 92       	push	r1
     e9e:	1f 92       	push	r1
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	2a e3       	ldi	r18, 0x3A	; 58
     eae:	32 e0       	ldi	r19, 0x02	; 2
     eb0:	fc 01       	movw	r30, r24
     eb2:	31 83       	std	Z+1, r19	; 0x01
     eb4:	20 83       	st	Z, r18
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	0e 94 67 05 	call	0xace	; 0xace <_ZN10helicopter8messages7MessageD1Ev>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	81 70       	andi	r24, 0x01	; 1
     ec4:	99 27       	eor	r25, r25
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	21 f0       	breq	.+8      	; 0xed2 <_ZN10helicopter8messages19SimTelemetryMessageD1Ev+0x3a>
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <_ZN10helicopter8messages19SimTelemetryMessageD0Ev>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	1f 92       	push	r1
     ee2:	1f 92       	push	r1
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN10helicopter8messages19SimTelemetryMessageD1Ev>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <_ZN10helicopter8messages19SimTelemetryMessage8getBytesEv>:
#include "SimTelemetryMessage.h"

using namespace helicopter::messages;

byte *SimTelemetryMessage::getBytes()
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <_ZN10helicopter8messages19SimTelemetryMessage8getBytesEv+0x6>
     f0c:	1f 92       	push	r1
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	8b 83       	std	Y+3, r24	; 0x03
	byte *msg = new byte[MessageSize];
     f16:	87 e0       	ldi	r24, 0x07	; 7
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_Znaj>
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
	msg[0] = this->msgType;
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	fc 01       	movw	r30, r24
     f28:	22 81       	ldd	r18, Z+2	; 0x02
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	fc 01       	movw	r30, r24
     f30:	20 83       	st	Z, r18
	
	msg++;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
	memcpy(msg, &magX, sizeof(magX));
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	9c 01       	movw	r18, r24
     f42:	2b 5f       	subi	r18, 0xFB	; 251
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	42 e0       	ldi	r20, 0x02	; 2
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	b9 01       	movw	r22, r18
     f50:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
	
	msg += sizeof(magX);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	02 96       	adiw	r24, 0x02	; 2
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
	memcpy(msg, &magY, sizeof(magY));
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	9c 01       	movw	r18, r24
     f64:	29 5f       	subi	r18, 0xF9	; 249
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	42 e0       	ldi	r20, 0x02	; 2
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	b9 01       	movw	r22, r18
     f72:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
	
	msg += sizeof(magY);
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	02 96       	adiw	r24, 0x02	; 2
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
	memcpy(msg, &magZ, sizeof(magZ));
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	9c 01       	movw	r18, r24
     f86:	27 5f       	subi	r18, 0xF7	; 247
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	42 e0       	ldi	r20, 0x02	; 2
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	b9 01       	movw	r22, r18
     f94:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
		
	return msg;
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc>:
	
void SimTelemetryMessage::buildMessage(byte *message)
{
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc+0x6>
     fb0:	1f 92       	push	r1
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	7c 83       	std	Y+4, r23	; 0x04
     fbc:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	a9 f1       	breq	.+106    	; 0x1030 <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc+0x86>
	{
		msgType = message[0];
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	fc 01       	movw	r30, r24
     fcc:	20 81       	ld	r18, Z
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	fc 01       	movw	r30, r24
     fd4:	22 83       	std	Z+2, r18	; 0x02
		
		message++;
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	9c 83       	std	Y+4, r25	; 0x04
     fde:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magX, message, sizeof(magX));
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	05 96       	adiw	r24, 0x05	; 5
     fe6:	2b 81       	ldd	r18, Y+3	; 0x03
     fe8:	3c 81       	ldd	r19, Y+4	; 0x04
     fea:	42 e0       	ldi	r20, 0x02	; 2
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	b9 01       	movw	r22, r18
     ff0:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
		
		message += sizeof(magX);
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	02 96       	adiw	r24, 0x02	; 2
     ffa:	9c 83       	std	Y+4, r25	; 0x04
     ffc:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magY, message, sizeof(magY));
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	07 96       	adiw	r24, 0x07	; 7
    1004:	2b 81       	ldd	r18, Y+3	; 0x03
    1006:	3c 81       	ldd	r19, Y+4	; 0x04
    1008:	42 e0       	ldi	r20, 0x02	; 2
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	b9 01       	movw	r22, r18
    100e:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
		
		message += sizeof(magY);
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	02 96       	adiw	r24, 0x02	; 2
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magZ, message, sizeof(magZ));
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	09 96       	adiw	r24, 0x09	; 9
    1022:	2b 81       	ldd	r18, Y+3	; 0x03
    1024:	3c 81       	ldd	r19, Y+4	; 0x04
    1026:	42 e0       	ldi	r20, 0x02	; 2
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	b9 01       	movw	r22, r18
    102c:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
	}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	1f 92       	push	r1
    1044:	1f 92       	push	r1
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	26 e4       	ldi	r18, 0x46	; 70
    1054:	32 e0       	ldi	r19, 0x02	; 2
    1056:	fc 01       	movw	r30, r24
    1058:	31 83       	std	Z+1, r19	; 0x01
    105a:	20 83       	st	Z, r18
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	0e 94 67 05 	call	0xace	; 0xace <_ZN10helicopter8messages7MessageD1Ev>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	99 27       	eor	r25, r25
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	21 f0       	breq	.+8      	; 0x1078 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	1f 92       	push	r1
    1088:	1f 92       	push	r1
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <_ZdlPv>
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:
#include <string.h>

using namespace helicopter::messages;

byte *SystemTelemetryMessage::getBytes()
{
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    10bc:	87 e0       	ldi	r24, 0x07	; 7
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_Znaj>
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	9e 81       	ldd	r25, Y+6	; 0x06
    10d4:	fc 01       	movw	r30, r24
    10d6:	22 81       	ldd	r18, Z+2	; 0x02
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
	
	msgPtr++;
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magX, sizeof(magX));
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	9c 01       	movw	r18, r24
    10f0:	2b 5f       	subi	r18, 0xFB	; 251
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	42 e0       	ldi	r20, 0x02	; 2
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	b9 01       	movw	r22, r18
    10fe:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
	
	msgPtr += sizeof(magX);
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	02 96       	adiw	r24, 0x02	; 2
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magY, sizeof(magY));
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	9c 01       	movw	r18, r24
    1112:	29 5f       	subi	r18, 0xF9	; 249
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	42 e0       	ldi	r20, 0x02	; 2
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	b9 01       	movw	r22, r18
    1120:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
	
	msgPtr += sizeof(magY);
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	02 96       	adiw	r24, 0x02	; 2
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magZ, sizeof(magZ));
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	9c 01       	movw	r18, r24
    1134:	27 5f       	subi	r18, 0xF7	; 247
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	42 e0       	ldi	r20, 0x02	; 2
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	b9 01       	movw	r22, r18
    1142:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
	
	return msg;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
}
    114a:	26 96       	adiw	r28, 0x06	; 6
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	00 d0       	rcall	.+0      	; 0x1162 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x6>
    1162:	1f 92       	push	r1
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	7c 83       	std	Y+4, r23	; 0x04
    116e:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	a9 f1       	breq	.+106    	; 0x11e2 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x86>
	{
		msgType = message[0];
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	fc 01       	movw	r30, r24
    117e:	20 81       	ld	r18, Z
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	fc 01       	movw	r30, r24
    1186:	22 83       	std	Z+2, r18	; 0x02
		
		message++;
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magX, message, sizeof(magX));
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	05 96       	adiw	r24, 0x05	; 5
    1198:	2b 81       	ldd	r18, Y+3	; 0x03
    119a:	3c 81       	ldd	r19, Y+4	; 0x04
    119c:	42 e0       	ldi	r20, 0x02	; 2
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	b9 01       	movw	r22, r18
    11a2:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
		
		message += sizeof(magX);
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	02 96       	adiw	r24, 0x02	; 2
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magY, message, sizeof(magY));
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	07 96       	adiw	r24, 0x07	; 7
    11b6:	2b 81       	ldd	r18, Y+3	; 0x03
    11b8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ba:	42 e0       	ldi	r20, 0x02	; 2
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	b9 01       	movw	r22, r18
    11c0:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
		
		message += sizeof(magY);
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	02 96       	adiw	r24, 0x02	; 2
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magZ, message, sizeof(magZ));
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	09 96       	adiw	r24, 0x09	; 9
    11d4:	2b 81       	ldd	r18, Y+3	; 0x03
    11d6:	3c 81       	ldd	r19, Y+4	; 0x04
    11d8:	42 e0       	ldi	r20, 0x02	; 2
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	b9 01       	movw	r22, r18
    11de:	0e 94 18 11 	call	0x2230	; 0x2230 <memcpy>
	}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <_ZNK10helicopter5model11SystemModel7RawMagXEv>:
			
			int RawMagX() const { return rawMagX; }
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	1f 92       	push	r1
    11f6:	1f 92       	push	r1
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	fc 01       	movw	r30, r24
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <_ZNK10helicopter5model11SystemModel7RawMagYEv>:
			void RawMagX(int val) { rawMagX = val; }
			
			int RawMagY() const { return rawMagY; }
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	1f 92       	push	r1
    121a:	1f 92       	push	r1
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	fc 01       	movw	r30, r24
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <_ZNK10helicopter5model11SystemModel7RawMagZEv>:
			void RawMagY(int val) { rawMagY = val; }
			
			int RawMagZ() const { return rawMagZ; }
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	1f 92       	push	r1
    123e:	1f 92       	push	r1
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	84 81       	ldd	r24, Z+4	; 0x04
    1250:	95 81       	ldd	r25, Z+5	; 0x05
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>:
				byte *getBytes();
			
				void buildMessage(byte *message);
			
				int MagX() const { return magX; }
				void MagX(int val) { magX = val; }
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	00 d0       	rcall	.+0      	; 0x1262 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi+0x6>
    1262:	1f 92       	push	r1
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	7c 83       	std	Y+4, r23	; 0x04
    126e:	6b 83       	std	Y+3, r22	; 0x03
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	fc 01       	movw	r30, r24
    127a:	36 83       	std	Z+6, r19	; 0x06
    127c:	25 83       	std	Z+5, r18	; 0x05
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>:
			
				int MagY() const { return magY; }
				void MagY(int val) { magY = val; }
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	00 d0       	rcall	.+0      	; 0x1292 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi+0x6>
    1292:	1f 92       	push	r1
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	7c 83       	std	Y+4, r23	; 0x04
    129e:	6b 83       	std	Y+3, r22	; 0x03
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	fc 01       	movw	r30, r24
    12aa:	30 87       	std	Z+8, r19	; 0x08
    12ac:	27 83       	std	Z+7, r18	; 0x07
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>:
			
				int MagZ() const { return magZ; }
				void MagZ(int val) { magZ = val; }
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi+0x6>
    12c2:	1f 92       	push	r1
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	7c 83       	std	Y+4, r23	; 0x04
    12ce:	6b 83       	std	Y+3, r22	; 0x03
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	2b 81       	ldd	r18, Y+3	; 0x03
    12d6:	3c 81       	ldd	r19, Y+4	; 0x04
    12d8:	fc 01       	movw	r30, r24
    12da:	32 87       	std	Z+10, r19	; 0x0a
    12dc:	21 87       	std	Z+9, r18	; 0x09
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>:

using namespace helicopter::model;


Message *SystemModel::CreateTelemetryMessage()
{
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv+0xa>
    12f6:	1f 92       	push	r1
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	9c 83       	std	Y+4, r25	; 0x04
    12fe:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    1300:	8b e0       	ldi	r24, 0x0B	; 11
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
    1308:	8c 01       	movw	r16, r24
    130a:	c8 01       	movw	r24, r16
    130c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    1310:	1a 83       	std	Y+2, r17	; 0x02
    1312:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagX(RawMagX());
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZNK10helicopter5model11SystemModel7RawMagXEv>
    131c:	9c 01       	movw	r18, r24
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	b9 01       	movw	r22, r18
    1324:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>
	message->MagY(RawMagY());
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZNK10helicopter5model11SystemModel7RawMagYEv>
    1330:	9c 01       	movw	r18, r24
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	b9 01       	movw	r22, r18
    1338:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>
	message->MagZ(RawMagZ());
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZNK10helicopter5model11SystemModel7RawMagZEv>
    1344:	9c 01       	movw	r18, r24
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	b9 01       	movw	r22, r18
    134c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>
	
	return message;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <_ZN10helicopter5tasks4Task8getDelayEv>:
				Task (int delay, int period);
				virtual void init(){;}
				virtual void runTask();
				
					
				int getDelay()
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	1f 92       	push	r1
    136c:	1f 92       	push	r1
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	fc 01       	movw	r30, r24
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
				}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	1f 92       	push	r1
    1390:	1f 92       	push	r1
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	fc 01       	movw	r30, r24
    13a0:	84 81       	ldd	r24, Z+4	; 0x04
    13a2:	95 81       	ldd	r25, Z+5	; 0x05
				}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    13b4:	1f 92       	push	r1
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	7c 83       	std	Y+4, r23	; 0x04
    13c0:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	fc 01       	movw	r30, r24
    13cc:	33 83       	std	Z+3, r19	; 0x03
    13ce:	22 83       	std	Z+2, r18	; 0x02
				}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	1f 92       	push	r1
    13e4:	1f 92       	push	r1
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	fc 01       	movw	r30, r24
    13f4:	86 81       	ldd	r24, Z+6	; 0x06
				}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	00 d0       	rcall	.+0      	; 0x1406 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	fc 01       	movw	r30, r24
    1418:	26 83       	std	Z+6, r18	; 0x06
				}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	08 95       	ret

00001426 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				void reduceDelay()
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	1f 92       	push	r1
    142c:	1f 92       	push	r1
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	fc 01       	movw	r30, r24
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	9c 01       	movw	r18, r24
    1442:	21 50       	subi	r18, 0x01	; 1
    1444:	31 09       	sbc	r19, r1
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	fc 01       	movw	r30, r24
    144c:	33 83       	std	Z+3, r19	; 0x03
    144e:	22 83       	std	Z+2, r18	; 0x02
				}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for task execution.
				*/
				void start();
				
				int getNumOfTasks()
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	1f 92       	push	r1
    1460:	1f 92       	push	r1
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	fc 01       	movw	r30, r24
    1470:	84 89       	ldd	r24, Z+20	; 0x14
    1472:	95 89       	ldd	r25, Z+21	; 0x15
				}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	1f 92       	push	r1
    1484:	1f 92       	push	r1
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    14a8:	80 91 6c 02 	lds	r24, 0x026C
    14ac:	90 91 6d 02 	lds	r25, 0x026D
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	81 f4       	brne	.+32     	; 0x14d4 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x38>
	{
		//scheduler = new Scheduler(124, 8);
		scheduler = new Scheduler(TARGET_TIMER_COUNT, TIMER_PRESCALER);
    14b4:	8a e1       	ldi	r24, 0x1A	; 26
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_Znwj>
    14bc:	8c 01       	movw	r16, r24
    14be:	40 e4       	ldi	r20, 0x40	; 64
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	62 ee       	ldi	r22, 0xE2	; 226
    14c4:	74 e0       	ldi	r23, 0x04	; 4
    14c6:	c8 01       	movw	r24, r16
    14c8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>
    14cc:	10 93 6d 02 	sts	0x026D, r17
    14d0:	00 93 6c 02 	sts	0x026C, r16
	}
	
	return scheduler;
    14d4:	80 91 6c 02 	lds	r24, 0x026C
    14d8:	90 91 6d 02 	lds	r25, 0x026D
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	08 95       	ret

000014e6 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>:

Scheduler::Scheduler(int targetTimerCount, PRESCALER prescale)
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x8>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	7c 83       	std	Y+4, r23	; 0x04
    14f8:	6b 83       	std	Y+3, r22	; 0x03
    14fa:	5e 83       	std	Y+6, r21	; 0x06
    14fc:	4d 83       	std	Y+5, r20	; 0x05
{
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	2b 81       	ldd	r18, Y+3	; 0x03
    1504:	3c 81       	ldd	r19, Y+4	; 0x04
    1506:	fc 01       	movw	r30, r24
    1508:	37 8b       	std	Z+23, r19	; 0x17
    150a:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescale;
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	2d 81       	ldd	r18, Y+5	; 0x05
    1512:	3e 81       	ldd	r19, Y+6	; 0x06
    1514:	fc 01       	movw	r30, r24
    1516:	31 8f       	std	Z+25, r19	; 0x19
    1518:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	fc 01       	movw	r30, r24
    1520:	15 8a       	std	Z+21, r1	; 0x15
    1522:	14 8a       	std	Z+20, r1	; 0x14
}
    1524:	26 96       	adiw	r28, 0x06	; 6
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
{
	
}

int Scheduler::addTask(Task *task)
{
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	00 d0       	rcall	.+0      	; 0x153c <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    153c:	1f 92       	push	r1
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	7c 83       	std	Y+4, r23	; 0x04
    1548:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	fc 01       	movw	r30, r24
    1550:	84 89       	ldd	r24, Z+20	; 0x14
    1552:	95 89       	ldd	r25, Z+21	; 0x15
    1554:	8a 30       	cpi	r24, 0x0A	; 10
    1556:	91 05       	cpc	r25, r1
    1558:	04 f5       	brge	.+64     	; 0x159a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	fc 01       	movw	r30, r24
    1560:	84 89       	ldd	r24, Z+20	; 0x14
    1562:	95 89       	ldd	r25, Z+21	; 0x15
    1564:	29 81       	ldd	r18, Y+1	; 0x01
    1566:	3a 81       	ldd	r19, Y+2	; 0x02
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	82 0f       	add	r24, r18
    156e:	93 1f       	adc	r25, r19
    1570:	2b 81       	ldd	r18, Y+3	; 0x03
    1572:	3c 81       	ldd	r19, Y+4	; 0x04
    1574:	fc 01       	movw	r30, r24
    1576:	31 83       	std	Z+1, r19	; 0x01
    1578:	20 83       	st	Z, r18
		numOfTasks++;
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	fc 01       	movw	r30, r24
    1580:	84 89       	ldd	r24, Z+20	; 0x14
    1582:	95 89       	ldd	r25, Z+21	; 0x15
    1584:	9c 01       	movw	r18, r24
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	fc 01       	movw	r30, r24
    1590:	35 8b       	std	Z+21, r19	; 0x15
    1592:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	9f ef       	ldi	r25, 0xFF	; 255
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    15b2:	1f 92       	push	r1
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    15bc:	1a 82       	std	Y+2, r1	; 0x02
    15be:	19 82       	std	Y+1, r1	; 0x01
    15c0:	24 c0       	rjmp	.+72     	; 0x160a <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	82 0f       	add	r24, r18
    15d0:	93 1f       	adc	r25, r19
    15d2:	fc 01       	movw	r30, r24
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	fc 01       	movw	r30, r24
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	02 96       	adiw	r24, 0x02	; 2
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 81       	ld	r18, Z
    15e4:	31 81       	ldd	r19, Z+1	; 0x01
    15e6:	4b 81       	ldd	r20, Y+3	; 0x03
    15e8:	5c 81       	ldd	r21, Y+4	; 0x04
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	84 0f       	add	r24, r20
    15f4:	95 1f       	adc	r25, r21
    15f6:	fc 01       	movw	r30, r24
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	f9 01       	movw	r30, r18
    15fe:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	fc 01       	movw	r30, r24
    1610:	24 89       	ldd	r18, Z+20	; 0x14
    1612:	35 89       	ldd	r19, Z+21	; 0x15
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	82 17       	cp	r24, r18
    161c:	93 07       	cpc	r25, r19
    161e:	0c f0       	brlt	.+2      	; 0x1622 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	44 23       	and	r20, r20
    1624:	71 f6       	brne	.-100    	; 0x15c2 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    1626:	88 e8       	ldi	r24, 0x88	; 136
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	f9 01       	movw	r30, r18
    1630:	26 89       	ldd	r18, Z+22	; 0x16
    1632:	37 89       	ldd	r19, Z+23	; 0x17
    1634:	fc 01       	movw	r30, r24
    1636:	31 83       	std	Z+1, r19	; 0x01
    1638:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    163a:	81 e8       	ldi	r24, 0x81	; 129
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	21 e8       	ldi	r18, 0x81	; 129
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	f9 01       	movw	r30, r18
    1644:	20 81       	ld	r18, Z
    1646:	28 60       	ori	r18, 0x08	; 8
    1648:	fc 01       	movw	r30, r24
    164a:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    164c:	8f e6       	ldi	r24, 0x6F	; 111
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	2f e6       	ldi	r18, 0x6F	; 111
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	f9 01       	movw	r30, r18
    1656:	20 81       	ld	r18, Z
    1658:	22 60       	ori	r18, 0x02	; 2
    165a:	fc 01       	movw	r30, r24
    165c:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    165e:	78 94       	sei
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	00 d0       	rcall	.+0      	; 0x1674 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9e 83       	std	Y+6, r25	; 0x06
    167c:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    167e:	1c 82       	std	Y+4, r1	; 0x04
    1680:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    1682:	1a 82       	std	Y+2, r1	; 0x02
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	2f c0       	rjmp	.+94     	; 0x16e6 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x78>
	{
		task = scheduler->getTasks()[i];
    1688:	80 91 6c 02 	lds	r24, 0x026C
    168c:	90 91 6d 02 	lds	r25, 0x026D
    1690:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1694:	9c 01       	movw	r18, r24
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	fc 01       	movw	r30, r24
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    16b4:	88 23       	and	r24, r24
    16b6:	91 f0       	breq	.+36     	; 0x16dc <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
		{
			task->setIsReadyToRun(false);
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	fc 01       	movw	r30, r24
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	04 96       	adiw	r24, 0x04	; 4
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 81       	ld	r18, Z
    16d2:	31 81       	ldd	r19, Z+1	; 0x01
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	f9 01       	movw	r30, r18
    16da:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	fc 01       	movw	r30, r24
    16ec:	24 89       	ldd	r18, Z+20	; 0x14
    16ee:	35 89       	ldd	r19, Z+21	; 0x15
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	82 17       	cp	r24, r18
    16f8:	93 07       	cpc	r25, r19
    16fa:	0c f0       	brlt	.+2      	; 0x16fe <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x90>
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	44 23       	and	r20, r20
    1700:	19 f6       	brne	.-122    	; 0x1688 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
			task->setIsReadyToRun(false);
			task->runTask();
		}
	}
	
	set_sleep_mode(SLEEP_MODE_IDLE);
    1702:	83 e5       	ldi	r24, 0x53	; 83
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	23 e5       	ldi	r18, 0x53	; 83
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	f9 01       	movw	r30, r18
    170c:	20 81       	ld	r18, Z
    170e:	21 7f       	andi	r18, 0xF1	; 241
    1710:	fc 01       	movw	r30, r24
    1712:	20 83       	st	Z, r18
	sleep_mode();
    1714:	83 e5       	ldi	r24, 0x53	; 83
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	23 e5       	ldi	r18, 0x53	; 83
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	f9 01       	movw	r30, r18
    171e:	20 81       	ld	r18, Z
    1720:	21 60       	ori	r18, 0x01	; 1
    1722:	fc 01       	movw	r30, r24
    1724:	20 83       	st	Z, r18
    1726:	88 95       	sleep
    1728:	83 e5       	ldi	r24, 0x53	; 83
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	23 e5       	ldi	r18, 0x53	; 83
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	f9 01       	movw	r30, r18
    1732:	20 81       	ld	r18, Z
    1734:	2e 7f       	andi	r18, 0xFE	; 254
    1736:	fc 01       	movw	r30, r24
    1738:	20 83       	st	Z, r18
}
    173a:	26 96       	adiw	r28, 0x06	; 6
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	1f 92       	push	r1
    1752:	1f 92       	push	r1
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
	switch(this->prescaler)
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	fc 01       	movw	r30, r24
    1762:	80 8d       	ldd	r24, Z+24	; 0x18
    1764:	91 8d       	ldd	r25, Z+25	; 0x19
    1766:	80 34       	cpi	r24, 0x40	; 64
    1768:	91 05       	cpc	r25, r1
    176a:	39 f1       	breq	.+78     	; 0x17ba <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    176c:	81 34       	cpi	r24, 0x41	; 65
    176e:	91 05       	cpc	r25, r1
    1770:	3c f4       	brge	.+14     	; 0x1780 <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	69 f0       	breq	.+26     	; 0x1792 <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	91 05       	cpc	r25, r1
    177c:	a1 f0       	breq	.+40     	; 0x17a6 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    177e:	3b c0       	rjmp	.+118    	; 0x17f6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    1780:	81 15       	cp	r24, r1
    1782:	f1 e0       	ldi	r31, 0x01	; 1
    1784:	9f 07       	cpc	r25, r31
    1786:	19 f1       	breq	.+70     	; 0x17ce <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    1788:	81 15       	cp	r24, r1
    178a:	24 e0       	ldi	r18, 0x04	; 4
    178c:	92 07       	cpc	r25, r18
    178e:	49 f1       	breq	.+82     	; 0x17e2 <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    1790:	32 c0       	rjmp	.+100    	; 0x17f6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    1792:	81 e8       	ldi	r24, 0x81	; 129
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	21 e8       	ldi	r18, 0x81	; 129
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	f9 01       	movw	r30, r18
    179c:	20 81       	ld	r18, Z
    179e:	21 60       	ori	r18, 0x01	; 1
    17a0:	fc 01       	movw	r30, r24
    17a2:	20 83       	st	Z, r18
			break;
    17a4:	31 c0       	rjmp	.+98     	; 0x1808 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    17a6:	81 e8       	ldi	r24, 0x81	; 129
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	21 e8       	ldi	r18, 0x81	; 129
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	f9 01       	movw	r30, r18
    17b0:	20 81       	ld	r18, Z
    17b2:	22 60       	ori	r18, 0x02	; 2
    17b4:	fc 01       	movw	r30, r24
    17b6:	20 83       	st	Z, r18
			break;
    17b8:	27 c0       	rjmp	.+78     	; 0x1808 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    17ba:	81 e8       	ldi	r24, 0x81	; 129
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	21 e8       	ldi	r18, 0x81	; 129
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	f9 01       	movw	r30, r18
    17c4:	20 81       	ld	r18, Z
    17c6:	23 60       	ori	r18, 0x03	; 3
    17c8:	fc 01       	movw	r30, r24
    17ca:	20 83       	st	Z, r18
			break;
    17cc:	1d c0       	rjmp	.+58     	; 0x1808 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    17ce:	81 e8       	ldi	r24, 0x81	; 129
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	21 e8       	ldi	r18, 0x81	; 129
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	f9 01       	movw	r30, r18
    17d8:	20 81       	ld	r18, Z
    17da:	24 60       	ori	r18, 0x04	; 4
    17dc:	fc 01       	movw	r30, r24
    17de:	20 83       	st	Z, r18
			break;
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    17e2:	81 e8       	ldi	r24, 0x81	; 129
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	21 e8       	ldi	r18, 0x81	; 129
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f9 01       	movw	r30, r18
    17ec:	20 81       	ld	r18, Z
    17ee:	25 60       	ori	r18, 0x05	; 5
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 83       	st	Z, r18
			break;
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    17f6:	81 e8       	ldi	r24, 0x81	; 129
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	21 e8       	ldi	r18, 0x81	; 129
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	f9 01       	movw	r30, r18
    1800:	20 81       	ld	r18, Z
    1802:	21 60       	ori	r18, 0x01	; 1
    1804:	fc 01       	movw	r30, r24
    1806:	20 83       	st	Z, r18
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	00 90 5f 00 	lds	r0, 0x005F
    181a:	0f 92       	push	r0
    181c:	11 24       	eor	r1, r1
    181e:	00 90 5b 00 	lds	r0, 0x005B
    1822:	0f 92       	push	r0
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	6f 93       	push	r22
    182e:	7f 93       	push	r23
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	00 d0       	rcall	.+0      	; 0x1842 <__vector_17+0x30>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <__vector_17+0x32>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
	Scheduler *scheduler = Scheduler::getScheduler();
    1848:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    1850:	1e 82       	std	Y+6, r1	; 0x06
    1852:	1d 82       	std	Y+5, r1	; 0x05
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1854:	1a 82       	std	Y+2, r1	; 0x02
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	33 c0       	rjmp	.+102    	; 0x18c0 <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1862:	9c 01       	movw	r18, r24
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	fc 01       	movw	r30, r24
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN10helicopter5tasks4Task8getDelayEv>
    1882:	21 e0       	ldi	r18, 0x01	; 1
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	09 f0       	breq	.+2      	; 0x188a <__vector_17+0x78>
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	22 23       	and	r18, r18
    188c:	81 f0       	breq	.+32     	; 0x18ae <__vector_17+0x9c>
		{
			task->setIsReadyToRun(true);
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN10helicopter5tasks4Task9getPeriodEv>
    18a0:	9c 01       	movw	r18, r24
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	b9 01       	movw	r22, r18
    18a8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN10helicopter5tasks4Task8setDelayEi>
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN10helicopter5tasks4Task11reduceDelayEv>
{
	Scheduler *scheduler = Scheduler::getScheduler();
	
	Task *task = NULL;
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    18c8:	9c 01       	movw	r18, r24
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	82 17       	cp	r24, r18
    18d2:	93 07       	cpc	r25, r19
    18d4:	0c f0       	brlt	.+2      	; 0x18d8 <__vector_17+0xc6>
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	44 23       	and	r20, r20
    18da:	09 f0       	breq	.+2      	; 0x18de <__vector_17+0xcc>
    18dc:	be cf       	rjmp	.-132    	; 0x185a <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    18de:	26 96       	adiw	r28, 0x06	; 6
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	00 92 5b 00 	sts	0x005B, r0
    190c:	0f 90       	pop	r0
    190e:	00 92 5f 00 	sts	0x005F, r0
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <_ZN10helicopter5tasks4Task4initEv>:
			protected:
				virtual void runTaskImpl(){;}
				
			public:
				Task (int delay, int period);
				virtual void init(){;}
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	1f 92       	push	r1
    191e:	1f 92       	push	r1
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <_ZN10helicopter8messages7Message7getTypeEv>:
					
				byte getType() 
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	1f 92       	push	r1
    1938:	1f 92       	push	r1
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
				{
					return msgType;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	fc 01       	movw	r30, r24
    1948:	82 81       	ldd	r24, Z+2	; 0x02
				}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <_ZN10helicopter5model11SystemModel7RawMagXEi>:
			{
				
			}
			
			int RawMagX() const { return rawMagX; }
			void RawMagX(int val) { rawMagX = val; }
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	00 d0       	rcall	.+0      	; 0x195a <_ZN10helicopter5model11SystemModel7RawMagXEi+0x6>
    195a:	1f 92       	push	r1
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	7c 83       	std	Y+4, r23	; 0x04
    1966:	6b 83       	std	Y+3, r22	; 0x03
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	fc 01       	movw	r30, r24
    1972:	31 83       	std	Z+1, r19	; 0x01
    1974:	20 83       	st	Z, r18
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <_ZN10helicopter5model11SystemModel7RawMagYEi>:
			
			int RawMagY() const { return rawMagY; }
			void RawMagY(int val) { rawMagY = val; }
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	00 d0       	rcall	.+0      	; 0x198a <_ZN10helicopter5model11SystemModel7RawMagYEi+0x6>
    198a:	1f 92       	push	r1
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	7c 83       	std	Y+4, r23	; 0x04
    1996:	6b 83       	std	Y+3, r22	; 0x03
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	2b 81       	ldd	r18, Y+3	; 0x03
    199e:	3c 81       	ldd	r19, Y+4	; 0x04
    19a0:	fc 01       	movw	r30, r24
    19a2:	33 83       	std	Z+3, r19	; 0x03
    19a4:	22 83       	std	Z+2, r18	; 0x02
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <_ZN10helicopter5model11SystemModel7RawMagZEi>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <_ZN10helicopter5model11SystemModel7RawMagZEi+0x6>
    19ba:	1f 92       	push	r1
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	7c 83       	std	Y+4, r23	; 0x04
    19c6:	6b 83       	std	Y+3, r22	; 0x03
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	2b 81       	ldd	r18, Y+3	; 0x03
    19ce:	3c 81       	ldd	r19, Y+4	; 0x04
    19d0:	fc 01       	movw	r30, r24
    19d2:	35 83       	std	Z+5, r19	; 0x05
    19d4:	24 83       	std	Z+4, r18	; 0x04
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <_ZNK10helicopter8messages19SimTelemetryMessage4MagXEv>:
			
			byte *getBytes();
			
			void buildMessage(byte *message);
			
			int MagX() const { return magX; }
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	1f 92       	push	r1
    19ea:	1f 92       	push	r1
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	fc 01       	movw	r30, r24
    19fa:	85 81       	ldd	r24, Z+5	; 0x05
    19fc:	96 81       	ldd	r25, Z+6	; 0x06
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <_ZNK10helicopter8messages19SimTelemetryMessage4MagYEv>:
			void MagX(int val) { magX = val; }
				
			int MagY() const { return magY; }
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	1f 92       	push	r1
    1a0e:	1f 92       	push	r1
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	87 81       	ldd	r24, Z+7	; 0x07
    1a20:	90 85       	ldd	r25, Z+8	; 0x08
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <_ZNK10helicopter8messages19SimTelemetryMessage4MagZEv>:
			void MagY(int val) { magY = val; }
			
			int MagZ() const { return magZ; }
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	1f 92       	push	r1
    1a32:	1f 92       	push	r1
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	fc 01       	movw	r30, r24
    1a42:	81 85       	ldd	r24, Z+9	; 0x09
    1a44:	92 85       	ldd	r25, Z+10	; 0x0a
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "SimTelemetryMessage.h"

using namespace helicopter::tasks::misctasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	7c 83       	std	Y+4, r23	; 0x04
    1a6e:	6b 83       	std	Y+3, r22	; 0x03
    1a70:	5e 83       	std	Y+6, r21	; 0x06
    1a72:	4d 83       	std	Y+5, r20	; 0x05
    1a74:	38 87       	std	Y+8, r19	; 0x08
    1a76:	2f 83       	std	Y+7, r18	; 0x07
    1a78:	1a 87       	std	Y+10, r17	; 0x0a
    1a7a:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	49 85       	ldd	r20, Y+9	; 0x09
    1a82:	5a 85       	ldd	r21, Y+10	; 0x0a
    1a84:	2f 81       	ldd	r18, Y+7	; 0x07
    1a86:	38 85       	ldd	r19, Y+8	; 0x08
    1a88:	b9 01       	movw	r22, r18
    1a8a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN10helicopter5tasks4TaskC1Eii>
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	22 e5       	ldi	r18, 0x52	; 82
    1a94:	32 e0       	ldi	r19, 0x02	; 2
    1a96:	fc 01       	movw	r30, r24
    1a98:	31 83       	std	Z+1, r19	; 0x01
    1a9a:	20 83       	st	Z, r18
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	30 87       	std	Z+8, r19	; 0x08
    1aa8:	27 83       	std	Z+7, r18	; 0x07
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	32 87       	std	Z+10, r19	; 0x0a
    1ab6:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1ab8:	2a 96       	adiw	r28, 0x0a	; 10
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>:


void SimTelemetryTask::runTaskImpl() 
{
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x6>
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x8>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
	//Use the radio interface to get the telemetry message from the simulator
	Message *message = NULL;
    1ade:	1c 82       	std	Y+4, r1	; 0x04
    1ae0:	1b 82       	std	Y+3, r1	; 0x03
	
	//TODO: keep in mind that the message received might not have been received in the
	//expected order. I.e. this message might actually be a different type of message.
	//so we should use more of a pub sub model. This works for now though since this is the
	//only message.
	if (radioInterface->receive(message) == 0 && message != NULL)
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	87 81       	ldd	r24, Z+7	; 0x07
    1aea:	90 85       	ldd	r25, Z+8	; 0x08
    1aec:	9e 01       	movw	r18, r28
    1aee:	2d 5f       	subi	r18, 0xFD	; 253
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	b9 01       	movw	r22, r18
    1af4:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE>
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	31 f4       	brne	.+12     	; 0x1b08 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x3a>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x3a>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x3c>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	88 23       	and	r24, r24
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x42>
    1b0e:	47 c0       	rjmp	.+142    	; 0x1b9e <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xd0>
	{
		//If it's a sim telemetry message, then process it. 
		if (message->getType() == SimTelemetryMessage::SimTelemetryMessageType)
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN10helicopter8messages7Message7getTypeEv>
    1b18:	98 2f       	mov	r25, r24
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	91 30       	cpi	r25, 0x01	; 1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x54>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	88 23       	and	r24, r24
    1b24:	59 f1       	breq	.+86     	; 0x1b7c <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xae>
		{
			SimTelemetryMessage *simMsg = (SimTelemetryMessage*) message;
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
			
			//Update the model using the new data received from the simulator.
			model->RawMagX(simMsg->MagX());
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZNK10helicopter8messages19SimTelemetryMessage4MagXEv>
    1b36:	9c 01       	movw	r18, r24
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	81 85       	ldd	r24, Z+9	; 0x09
    1b40:	92 85       	ldd	r25, Z+10	; 0x0a
    1b42:	b9 01       	movw	r22, r18
    1b44:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(simMsg->MagY());
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZNK10helicopter8messages19SimTelemetryMessage4MagYEv>
    1b50:	9c 01       	movw	r18, r24
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	fc 01       	movw	r30, r24
    1b58:	81 85       	ldd	r24, Z+9	; 0x09
    1b5a:	92 85       	ldd	r25, Z+10	; 0x0a
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(simMsg->MagZ());
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZNK10helicopter8messages19SimTelemetryMessage4MagZEv>
    1b6a:	9c 01       	movw	r18, r24
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	fc 01       	movw	r30, r24
    1b72:	81 85       	ldd	r24, Z+9	; 0x09
    1b74:	92 85       	ldd	r25, Z+10	; 0x0a
    1b76:	b9 01       	movw	r22, r18
    1b78:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN10helicopter5model11SystemModel7RawMagZEi>
		}
		
		delete message;
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f0       	breq	.+26     	; 0x1b9e <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xd0>
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	fc 01       	movw	r30, r24
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	02 96       	adiw	r24, 0x02	; 2
    1b90:	fc 01       	movw	r30, r24
    1b92:	20 81       	ld	r18, Z
    1b94:	31 81       	ldd	r19, Z+1	; 0x01
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	19 95       	eicall
	}
	
    1b9e:	26 96       	adiw	r28, 0x06	; 6
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				int delay;
				int period;
				bool isReadyToRun;
				
			protected:
				virtual void runTaskImpl(){;}
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	1f 92       	push	r1
    1bb6:	1f 92       	push	r1
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	7c 83       	std	Y+4, r23	; 0x04
    1bdc:	6b 83       	std	Y+3, r22	; 0x03
    1bde:	5e 83       	std	Y+6, r21	; 0x06
    1be0:	4d 83       	std	Y+5, r20	; 0x05
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	2c e5       	ldi	r18, 0x5C	; 92
    1be8:	32 e0       	ldi	r19, 0x02	; 2
    1bea:	fc 01       	movw	r30, r24
    1bec:	31 83       	std	Z+1, r19	; 0x01
    1bee:	20 83       	st	Z, r18
{
	this->delay = delay;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	33 83       	std	Z+3, r19	; 0x03
    1bfc:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	2d 81       	ldd	r18, Y+5	; 0x05
    1c04:	3e 81       	ldd	r19, Y+6	; 0x06
    1c06:	fc 01       	movw	r30, r24
    1c08:	35 83       	std	Z+5, r19	; 0x05
    1c0a:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	fc 01       	movw	r30, r24
    1c12:	16 82       	std	Z+6, r1	; 0x06
}
    1c14:	26 96       	adiw	r28, 0x06	; 6
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	08 95       	ret

00001c26 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	1f 92       	push	r1
    1c2c:	1f 92       	push	r1
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    1c36:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	fc 01       	movw	r30, r24
    1c44:	20 81       	ld	r18, Z
    1c46:	31 81       	ldd	r19, Z+1	; 0x01
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	f9 01       	movw	r30, r18
    1c4e:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    1c50:	78 94       	sei
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	08 95       	ret

00001c5c <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	2a 97       	sbiw	r28, 0x0a	; 10
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	7c 83       	std	Y+4, r23	; 0x04
    1c7a:	6b 83       	std	Y+3, r22	; 0x03
    1c7c:	5e 83       	std	Y+6, r21	; 0x06
    1c7e:	4d 83       	std	Y+5, r20	; 0x05
    1c80:	38 87       	std	Y+8, r19	; 0x08
    1c82:	2f 83       	std	Y+7, r18	; 0x07
    1c84:	1a 87       	std	Y+10, r17	; 0x0a
    1c86:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	49 85       	ldd	r20, Y+9	; 0x09
    1c8e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c90:	2f 81       	ldd	r18, Y+7	; 0x07
    1c92:	38 85       	ldd	r19, Y+8	; 0x08
    1c94:	b9 01       	movw	r22, r18
    1c96:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN10helicopter5tasks4TaskC1Eii>
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	26 e6       	ldi	r18, 0x66	; 102
    1ca0:	32 e0       	ldi	r19, 0x02	; 2
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	31 83       	std	Z+1, r19	; 0x01
    1ca6:	20 83       	st	Z, r18
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	2b 81       	ldd	r18, Y+3	; 0x03
    1cae:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	30 87       	std	Z+8, r19	; 0x08
    1cb4:	27 83       	std	Z+7, r18	; 0x07
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	2d 81       	ldd	r18, Y+5	; 0x05
    1cbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	32 87       	std	Z+10, r19	; 0x0a
    1cc2:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1cc4:	2a 96       	adiw	r28, 0x0a	; 10
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

00001cda <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    1ce0:	1f 92       	push	r1
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
	Message *message = model->CreateTelemetryMessage();
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	fc 01       	movw	r30, r24
    1cf0:	81 85       	ldd	r24, Z+9	; 0x09
    1cf2:	92 85       	ldd	r25, Z+10	; 0x0a
    1cf4:	0e 94 76 09 	call	0x12ec	; 0x12ec <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	message->MagY(32);
	message->MagZ(31);
	*/
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	fc 01       	movw	r30, r24
    1d02:	87 81       	ldd	r24, Z+7	; 0x07
    1d04:	90 85       	ldd	r25, Z+8	; 0x08
    1d06:	29 81       	ldd	r18, Y+1	; 0x01
    1d08:	3a 81       	ldd	r19, Y+2	; 0x02
    1d0a:	b9 01       	movw	r22, r18
    1d0c:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f0       	breq	.+26     	; 0x1d32 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	02 96       	adiw	r24, 0x02	; 2
    1d24:	fc 01       	movw	r30, r24
    1d26:	20 81       	ld	r18, Z
    1d28:	31 81       	ldd	r19, Z+1	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	f9 01       	movw	r30, r18
    1d30:	19 95       	eicall
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <_Znwj>:
 *  Author: HP User
 */ 
#include <commonheader.h>

void * operator new(size_t size)
{
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	1f 92       	push	r1
    1d46:	1f 92       	push	r1
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <malloc>
}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	08 95       	ret

00001d62 <_ZdlPv>:

void operator delete(void * ptr)
{
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	1f 92       	push	r1
    1d68:	1f 92       	push	r1
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	21 f0       	breq	.+8      	; 0x1d82 <_ZdlPv+0x20>
	{
		free(ptr);
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <free>
	}
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <_Znaj>:

void * operator new[](size_t size)
{
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	1f 92       	push	r1
    1d92:	1f 92       	push	r1
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <malloc>
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <__fixunssfsi>:
    1dae:	ac d0       	rcall	.+344    	; 0x1f08 <__fp_splitA>
    1db0:	88 f0       	brcs	.+34     	; 0x1dd4 <__fixunssfsi+0x26>
    1db2:	9f 57       	subi	r25, 0x7F	; 127
    1db4:	90 f0       	brcs	.+36     	; 0x1dda <__fixunssfsi+0x2c>
    1db6:	b9 2f       	mov	r27, r25
    1db8:	99 27       	eor	r25, r25
    1dba:	b7 51       	subi	r27, 0x17	; 23
    1dbc:	a0 f0       	brcs	.+40     	; 0x1de6 <__fixunssfsi+0x38>
    1dbe:	d1 f0       	breq	.+52     	; 0x1df4 <__fixunssfsi+0x46>
    1dc0:	66 0f       	add	r22, r22
    1dc2:	77 1f       	adc	r23, r23
    1dc4:	88 1f       	adc	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	1a f0       	brmi	.+6      	; 0x1dd0 <__fixunssfsi+0x22>
    1dca:	ba 95       	dec	r27
    1dcc:	c9 f7       	brne	.-14     	; 0x1dc0 <__fixunssfsi+0x12>
    1dce:	12 c0       	rjmp	.+36     	; 0x1df4 <__fixunssfsi+0x46>
    1dd0:	b1 30       	cpi	r27, 0x01	; 1
    1dd2:	81 f0       	breq	.+32     	; 0x1df4 <__fixunssfsi+0x46>
    1dd4:	ca d0       	rcall	.+404    	; 0x1f6a <__fp_zero>
    1dd6:	b1 e0       	ldi	r27, 0x01	; 1
    1dd8:	08 95       	ret
    1dda:	c7 c0       	rjmp	.+398    	; 0x1f6a <__fp_zero>
    1ddc:	67 2f       	mov	r22, r23
    1dde:	78 2f       	mov	r23, r24
    1de0:	88 27       	eor	r24, r24
    1de2:	b8 5f       	subi	r27, 0xF8	; 248
    1de4:	39 f0       	breq	.+14     	; 0x1df4 <__fixunssfsi+0x46>
    1de6:	b9 3f       	cpi	r27, 0xF9	; 249
    1de8:	cc f3       	brlt	.-14     	; 0x1ddc <__fixunssfsi+0x2e>
    1dea:	86 95       	lsr	r24
    1dec:	77 95       	ror	r23
    1dee:	67 95       	ror	r22
    1df0:	b3 95       	inc	r27
    1df2:	d9 f7       	brne	.-10     	; 0x1dea <__fixunssfsi+0x3c>
    1df4:	3e f4       	brtc	.+14     	; 0x1e04 <__fixunssfsi+0x56>
    1df6:	90 95       	com	r25
    1df8:	80 95       	com	r24
    1dfa:	70 95       	com	r23
    1dfc:	61 95       	neg	r22
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	8f 4f       	sbci	r24, 0xFF	; 255
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	08 95       	ret

00001e06 <__floatunsisf>:
    1e06:	e8 94       	clt
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <__floatsisf+0x12>

00001e0a <__floatsisf>:
    1e0a:	97 fb       	bst	r25, 7
    1e0c:	3e f4       	brtc	.+14     	; 0x1e1c <__floatsisf+0x12>
    1e0e:	90 95       	com	r25
    1e10:	80 95       	com	r24
    1e12:	70 95       	com	r23
    1e14:	61 95       	neg	r22
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	99 23       	and	r25, r25
    1e1e:	a9 f0       	breq	.+42     	; 0x1e4a <__floatsisf+0x40>
    1e20:	f9 2f       	mov	r31, r25
    1e22:	96 e9       	ldi	r25, 0x96	; 150
    1e24:	bb 27       	eor	r27, r27
    1e26:	93 95       	inc	r25
    1e28:	f6 95       	lsr	r31
    1e2a:	87 95       	ror	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	f1 11       	cpse	r31, r1
    1e34:	f8 cf       	rjmp	.-16     	; 0x1e26 <__floatsisf+0x1c>
    1e36:	fa f4       	brpl	.+62     	; 0x1e76 <__floatsisf+0x6c>
    1e38:	bb 0f       	add	r27, r27
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <__floatsisf+0x36>
    1e3c:	60 ff       	sbrs	r22, 0
    1e3e:	1b c0       	rjmp	.+54     	; 0x1e76 <__floatsisf+0x6c>
    1e40:	6f 5f       	subi	r22, 0xFF	; 255
    1e42:	7f 4f       	sbci	r23, 0xFF	; 255
    1e44:	8f 4f       	sbci	r24, 0xFF	; 255
    1e46:	9f 4f       	sbci	r25, 0xFF	; 255
    1e48:	16 c0       	rjmp	.+44     	; 0x1e76 <__floatsisf+0x6c>
    1e4a:	88 23       	and	r24, r24
    1e4c:	11 f0       	breq	.+4      	; 0x1e52 <__floatsisf+0x48>
    1e4e:	96 e9       	ldi	r25, 0x96	; 150
    1e50:	11 c0       	rjmp	.+34     	; 0x1e74 <__floatsisf+0x6a>
    1e52:	77 23       	and	r23, r23
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <__floatsisf+0x54>
    1e56:	9e e8       	ldi	r25, 0x8E	; 142
    1e58:	87 2f       	mov	r24, r23
    1e5a:	76 2f       	mov	r23, r22
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <__floatsisf+0x5e>
    1e5e:	66 23       	and	r22, r22
    1e60:	71 f0       	breq	.+28     	; 0x1e7e <__floatsisf+0x74>
    1e62:	96 e8       	ldi	r25, 0x86	; 134
    1e64:	86 2f       	mov	r24, r22
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	2a f0       	brmi	.+10     	; 0x1e76 <__floatsisf+0x6c>
    1e6c:	9a 95       	dec	r25
    1e6e:	66 0f       	add	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	88 1f       	adc	r24, r24
    1e74:	da f7       	brpl	.-10     	; 0x1e6c <__floatsisf+0x62>
    1e76:	88 0f       	add	r24, r24
    1e78:	96 95       	lsr	r25
    1e7a:	87 95       	ror	r24
    1e7c:	97 f9       	bld	r25, 7
    1e7e:	08 95       	ret

00001e80 <floor>:
    1e80:	5d d0       	rcall	.+186    	; 0x1f3c <__fp_trunc>
    1e82:	80 f0       	brcs	.+32     	; 0x1ea4 <floor+0x24>
    1e84:	9f 37       	cpi	r25, 0x7F	; 127
    1e86:	40 f4       	brcc	.+16     	; 0x1e98 <floor+0x18>
    1e88:	91 11       	cpse	r25, r1
    1e8a:	0e f0       	brts	.+2      	; 0x1e8e <floor+0xe>
    1e8c:	6f c0       	rjmp	.+222    	; 0x1f6c <__fp_szero>
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	80 e8       	ldi	r24, 0x80	; 128
    1e94:	9f eb       	ldi	r25, 0xBF	; 191
    1e96:	08 95       	ret
    1e98:	26 f4       	brtc	.+8      	; 0x1ea2 <floor+0x22>
    1e9a:	1b 16       	cp	r1, r27
    1e9c:	61 1d       	adc	r22, r1
    1e9e:	71 1d       	adc	r23, r1
    1ea0:	81 1d       	adc	r24, r1
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <__fp_mintl>
    1ea4:	1b c0       	rjmp	.+54     	; 0x1edc <__fp_mpack>

00001ea6 <__fp_mintl>:
    1ea6:	88 23       	and	r24, r24
    1ea8:	71 f4       	brne	.+28     	; 0x1ec6 <__fp_mintl+0x20>
    1eaa:	77 23       	and	r23, r23
    1eac:	21 f0       	breq	.+8      	; 0x1eb6 <__fp_mintl+0x10>
    1eae:	98 50       	subi	r25, 0x08	; 8
    1eb0:	87 2b       	or	r24, r23
    1eb2:	76 2f       	mov	r23, r22
    1eb4:	07 c0       	rjmp	.+14     	; 0x1ec4 <__fp_mintl+0x1e>
    1eb6:	66 23       	and	r22, r22
    1eb8:	11 f4       	brne	.+4      	; 0x1ebe <__fp_mintl+0x18>
    1eba:	99 27       	eor	r25, r25
    1ebc:	0d c0       	rjmp	.+26     	; 0x1ed8 <__fp_mintl+0x32>
    1ebe:	90 51       	subi	r25, 0x10	; 16
    1ec0:	86 2b       	or	r24, r22
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	2a f0       	brmi	.+10     	; 0x1ed2 <__fp_mintl+0x2c>
    1ec8:	9a 95       	dec	r25
    1eca:	66 0f       	add	r22, r22
    1ecc:	77 1f       	adc	r23, r23
    1ece:	88 1f       	adc	r24, r24
    1ed0:	da f7       	brpl	.-10     	; 0x1ec8 <__fp_mintl+0x22>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	96 95       	lsr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	97 f9       	bld	r25, 7
    1eda:	08 95       	ret

00001edc <__fp_mpack>:
    1edc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ede:	31 f0       	breq	.+12     	; 0x1eec <__fp_mpack_finite+0xc>

00001ee0 <__fp_mpack_finite>:
    1ee0:	91 50       	subi	r25, 0x01	; 1
    1ee2:	20 f4       	brcc	.+8      	; 0x1eec <__fp_mpack_finite+0xc>
    1ee4:	87 95       	ror	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	88 0f       	add	r24, r24
    1eee:	91 1d       	adc	r25, r1
    1ef0:	96 95       	lsr	r25
    1ef2:	87 95       	ror	r24
    1ef4:	97 f9       	bld	r25, 7
    1ef6:	08 95       	ret

00001ef8 <__fp_split3>:
    1ef8:	57 fd       	sbrc	r21, 7
    1efa:	90 58       	subi	r25, 0x80	; 128
    1efc:	44 0f       	add	r20, r20
    1efe:	55 1f       	adc	r21, r21
    1f00:	59 f0       	breq	.+22     	; 0x1f18 <__fp_splitA+0x10>
    1f02:	5f 3f       	cpi	r21, 0xFF	; 255
    1f04:	71 f0       	breq	.+28     	; 0x1f22 <__fp_splitA+0x1a>
    1f06:	47 95       	ror	r20

00001f08 <__fp_splitA>:
    1f08:	88 0f       	add	r24, r24
    1f0a:	97 fb       	bst	r25, 7
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <__fp_splitA+0x20>
    1f10:	9f 3f       	cpi	r25, 0xFF	; 255
    1f12:	79 f0       	breq	.+30     	; 0x1f32 <__fp_splitA+0x2a>
    1f14:	87 95       	ror	r24
    1f16:	08 95       	ret
    1f18:	12 16       	cp	r1, r18
    1f1a:	13 06       	cpc	r1, r19
    1f1c:	14 06       	cpc	r1, r20
    1f1e:	55 1f       	adc	r21, r21
    1f20:	f2 cf       	rjmp	.-28     	; 0x1f06 <__fp_split3+0xe>
    1f22:	46 95       	lsr	r20
    1f24:	f1 df       	rcall	.-30     	; 0x1f08 <__fp_splitA>
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <__fp_splitA+0x30>
    1f28:	16 16       	cp	r1, r22
    1f2a:	17 06       	cpc	r1, r23
    1f2c:	18 06       	cpc	r1, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	f1 cf       	rjmp	.-30     	; 0x1f14 <__fp_splitA+0xc>
    1f32:	86 95       	lsr	r24
    1f34:	71 05       	cpc	r23, r1
    1f36:	61 05       	cpc	r22, r1
    1f38:	08 94       	sec
    1f3a:	08 95       	ret

00001f3c <__fp_trunc>:
    1f3c:	e5 df       	rcall	.-54     	; 0x1f08 <__fp_splitA>
    1f3e:	a0 f0       	brcs	.+40     	; 0x1f68 <__fp_trunc+0x2c>
    1f40:	be e7       	ldi	r27, 0x7E	; 126
    1f42:	b9 17       	cp	r27, r25
    1f44:	88 f4       	brcc	.+34     	; 0x1f68 <__fp_trunc+0x2c>
    1f46:	bb 27       	eor	r27, r27
    1f48:	9f 38       	cpi	r25, 0x8F	; 143
    1f4a:	60 f4       	brcc	.+24     	; 0x1f64 <__fp_trunc+0x28>
    1f4c:	16 16       	cp	r1, r22
    1f4e:	b1 1d       	adc	r27, r1
    1f50:	67 2f       	mov	r22, r23
    1f52:	78 2f       	mov	r23, r24
    1f54:	88 27       	eor	r24, r24
    1f56:	98 5f       	subi	r25, 0xF8	; 248
    1f58:	f7 cf       	rjmp	.-18     	; 0x1f48 <__fp_trunc+0xc>
    1f5a:	86 95       	lsr	r24
    1f5c:	77 95       	ror	r23
    1f5e:	67 95       	ror	r22
    1f60:	b1 1d       	adc	r27, r1
    1f62:	93 95       	inc	r25
    1f64:	96 39       	cpi	r25, 0x96	; 150
    1f66:	c8 f3       	brcs	.-14     	; 0x1f5a <__fp_trunc+0x1e>
    1f68:	08 95       	ret

00001f6a <__fp_zero>:
    1f6a:	e8 94       	clt

00001f6c <__fp_szero>:
    1f6c:	bb 27       	eor	r27, r27
    1f6e:	66 27       	eor	r22, r22
    1f70:	77 27       	eor	r23, r23
    1f72:	cb 01       	movw	r24, r22
    1f74:	97 f9       	bld	r25, 7
    1f76:	08 95       	ret

00001f78 <__udivmodsi4>:
    1f78:	a1 e2       	ldi	r26, 0x21	; 33
    1f7a:	1a 2e       	mov	r1, r26
    1f7c:	aa 1b       	sub	r26, r26
    1f7e:	bb 1b       	sub	r27, r27
    1f80:	fd 01       	movw	r30, r26
    1f82:	0d c0       	rjmp	.+26     	; 0x1f9e <__udivmodsi4_ep>

00001f84 <__udivmodsi4_loop>:
    1f84:	aa 1f       	adc	r26, r26
    1f86:	bb 1f       	adc	r27, r27
    1f88:	ee 1f       	adc	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	a2 17       	cp	r26, r18
    1f8e:	b3 07       	cpc	r27, r19
    1f90:	e4 07       	cpc	r30, r20
    1f92:	f5 07       	cpc	r31, r21
    1f94:	20 f0       	brcs	.+8      	; 0x1f9e <__udivmodsi4_ep>
    1f96:	a2 1b       	sub	r26, r18
    1f98:	b3 0b       	sbc	r27, r19
    1f9a:	e4 0b       	sbc	r30, r20
    1f9c:	f5 0b       	sbc	r31, r21

00001f9e <__udivmodsi4_ep>:
    1f9e:	66 1f       	adc	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	1a 94       	dec	r1
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <__udivmodsi4_loop>
    1faa:	60 95       	com	r22
    1fac:	70 95       	com	r23
    1fae:	80 95       	com	r24
    1fb0:	90 95       	com	r25
    1fb2:	9b 01       	movw	r18, r22
    1fb4:	ac 01       	movw	r20, r24
    1fb6:	bd 01       	movw	r22, r26
    1fb8:	cf 01       	movw	r24, r30
    1fba:	08 95       	ret

00001fbc <malloc>:
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	82 30       	cpi	r24, 0x02	; 2
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	10 f4       	brcc	.+4      	; 0x1fce <malloc+0x12>
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	e0 91 70 02 	lds	r30, 0x0270
    1fd2:	f0 91 71 02 	lds	r31, 0x0271
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	c0 e0       	ldi	r28, 0x00	; 0
    1fdc:	d0 e0       	ldi	r29, 0x00	; 0
    1fde:	23 c0       	rjmp	.+70     	; 0x2026 <malloc+0x6a>
    1fe0:	40 81       	ld	r20, Z
    1fe2:	51 81       	ldd	r21, Z+1	; 0x01
    1fe4:	48 17       	cp	r20, r24
    1fe6:	59 07       	cpc	r21, r25
    1fe8:	a8 f0       	brcs	.+42     	; 0x2014 <malloc+0x58>
    1fea:	48 17       	cp	r20, r24
    1fec:	59 07       	cpc	r21, r25
    1fee:	61 f4       	brne	.+24     	; 0x2008 <malloc+0x4c>
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	20 97       	sbiw	r28, 0x00	; 0
    1ff6:	19 f0       	breq	.+6      	; 0x1ffe <malloc+0x42>
    1ff8:	9b 83       	std	Y+3, r25	; 0x03
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
    1ffc:	2e c0       	rjmp	.+92     	; 0x205a <malloc+0x9e>
    1ffe:	90 93 71 02 	sts	0x0271, r25
    2002:	80 93 70 02 	sts	0x0270, r24
    2006:	29 c0       	rjmp	.+82     	; 0x205a <malloc+0x9e>
    2008:	21 15       	cp	r18, r1
    200a:	31 05       	cpc	r19, r1
    200c:	29 f0       	breq	.+10     	; 0x2018 <malloc+0x5c>
    200e:	42 17       	cp	r20, r18
    2010:	53 07       	cpc	r21, r19
    2012:	10 f0       	brcs	.+4      	; 0x2018 <malloc+0x5c>
    2014:	a9 01       	movw	r20, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <malloc+0x60>
    2018:	be 01       	movw	r22, r28
    201a:	df 01       	movw	r26, r30
    201c:	02 81       	ldd	r16, Z+2	; 0x02
    201e:	13 81       	ldd	r17, Z+3	; 0x03
    2020:	ef 01       	movw	r28, r30
    2022:	9a 01       	movw	r18, r20
    2024:	f8 01       	movw	r30, r16
    2026:	30 97       	sbiw	r30, 0x00	; 0
    2028:	d9 f6       	brne	.-74     	; 0x1fe0 <malloc+0x24>
    202a:	21 15       	cp	r18, r1
    202c:	31 05       	cpc	r19, r1
    202e:	09 f1       	breq	.+66     	; 0x2072 <malloc+0xb6>
    2030:	28 1b       	sub	r18, r24
    2032:	39 0b       	sbc	r19, r25
    2034:	24 30       	cpi	r18, 0x04	; 4
    2036:	31 05       	cpc	r19, r1
    2038:	90 f4       	brcc	.+36     	; 0x205e <malloc+0xa2>
    203a:	12 96       	adiw	r26, 0x02	; 2
    203c:	8d 91       	ld	r24, X+
    203e:	9c 91       	ld	r25, X
    2040:	13 97       	sbiw	r26, 0x03	; 3
    2042:	61 15       	cp	r22, r1
    2044:	71 05       	cpc	r23, r1
    2046:	21 f0       	breq	.+8      	; 0x2050 <malloc+0x94>
    2048:	fb 01       	movw	r30, r22
    204a:	93 83       	std	Z+3, r25	; 0x03
    204c:	82 83       	std	Z+2, r24	; 0x02
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <malloc+0x9c>
    2050:	90 93 71 02 	sts	0x0271, r25
    2054:	80 93 70 02 	sts	0x0270, r24
    2058:	fd 01       	movw	r30, r26
    205a:	32 96       	adiw	r30, 0x02	; 2
    205c:	44 c0       	rjmp	.+136    	; 0x20e6 <malloc+0x12a>
    205e:	fd 01       	movw	r30, r26
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	81 93       	st	Z+, r24
    2066:	91 93       	st	Z+, r25
    2068:	22 50       	subi	r18, 0x02	; 2
    206a:	31 09       	sbc	r19, r1
    206c:	2d 93       	st	X+, r18
    206e:	3c 93       	st	X, r19
    2070:	3a c0       	rjmp	.+116    	; 0x20e6 <malloc+0x12a>
    2072:	20 91 6e 02 	lds	r18, 0x026E
    2076:	30 91 6f 02 	lds	r19, 0x026F
    207a:	23 2b       	or	r18, r19
    207c:	41 f4       	brne	.+16     	; 0x208e <malloc+0xd2>
    207e:	20 91 02 02 	lds	r18, 0x0202
    2082:	30 91 03 02 	lds	r19, 0x0203
    2086:	30 93 6f 02 	sts	0x026F, r19
    208a:	20 93 6e 02 	sts	0x026E, r18
    208e:	20 91 00 02 	lds	r18, 0x0200
    2092:	30 91 01 02 	lds	r19, 0x0201
    2096:	21 15       	cp	r18, r1
    2098:	31 05       	cpc	r19, r1
    209a:	41 f4       	brne	.+16     	; 0x20ac <malloc+0xf0>
    209c:	2d b7       	in	r18, 0x3d	; 61
    209e:	3e b7       	in	r19, 0x3e	; 62
    20a0:	40 91 04 02 	lds	r20, 0x0204
    20a4:	50 91 05 02 	lds	r21, 0x0205
    20a8:	24 1b       	sub	r18, r20
    20aa:	35 0b       	sbc	r19, r21
    20ac:	e0 91 6e 02 	lds	r30, 0x026E
    20b0:	f0 91 6f 02 	lds	r31, 0x026F
    20b4:	e2 17       	cp	r30, r18
    20b6:	f3 07       	cpc	r31, r19
    20b8:	a0 f4       	brcc	.+40     	; 0x20e2 <malloc+0x126>
    20ba:	2e 1b       	sub	r18, r30
    20bc:	3f 0b       	sbc	r19, r31
    20be:	28 17       	cp	r18, r24
    20c0:	39 07       	cpc	r19, r25
    20c2:	78 f0       	brcs	.+30     	; 0x20e2 <malloc+0x126>
    20c4:	ac 01       	movw	r20, r24
    20c6:	4e 5f       	subi	r20, 0xFE	; 254
    20c8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ca:	24 17       	cp	r18, r20
    20cc:	35 07       	cpc	r19, r21
    20ce:	48 f0       	brcs	.+18     	; 0x20e2 <malloc+0x126>
    20d0:	4e 0f       	add	r20, r30
    20d2:	5f 1f       	adc	r21, r31
    20d4:	50 93 6f 02 	sts	0x026F, r21
    20d8:	40 93 6e 02 	sts	0x026E, r20
    20dc:	81 93       	st	Z+, r24
    20de:	91 93       	st	Z+, r25
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <malloc+0x12a>
    20e2:	e0 e0       	ldi	r30, 0x00	; 0
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	cf 01       	movw	r24, r30
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	08 95       	ret

000020f2 <free>:
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	09 f4       	brne	.+2      	; 0x2104 <free+0x12>
    2102:	8f c0       	rjmp	.+286    	; 0x2222 <__stack+0x23>
    2104:	dc 01       	movw	r26, r24
    2106:	12 97       	sbiw	r26, 0x02	; 2
    2108:	13 96       	adiw	r26, 0x03	; 3
    210a:	1c 92       	st	X, r1
    210c:	1e 92       	st	-X, r1
    210e:	12 97       	sbiw	r26, 0x02	; 2
    2110:	e0 90 70 02 	lds	r14, 0x0270
    2114:	f0 90 71 02 	lds	r15, 0x0271
    2118:	e1 14       	cp	r14, r1
    211a:	f1 04       	cpc	r15, r1
    211c:	89 f4       	brne	.+34     	; 0x2140 <free+0x4e>
    211e:	2d 91       	ld	r18, X+
    2120:	3c 91       	ld	r19, X
    2122:	11 97       	sbiw	r26, 0x01	; 1
    2124:	28 0f       	add	r18, r24
    2126:	39 1f       	adc	r19, r25
    2128:	80 91 6e 02 	lds	r24, 0x026E
    212c:	90 91 6f 02 	lds	r25, 0x026F
    2130:	82 17       	cp	r24, r18
    2132:	93 07       	cpc	r25, r19
    2134:	89 f5       	brne	.+98     	; 0x2198 <free+0xa6>
    2136:	b0 93 6f 02 	sts	0x026F, r27
    213a:	a0 93 6e 02 	sts	0x026E, r26
    213e:	71 c0       	rjmp	.+226    	; 0x2222 <__stack+0x23>
    2140:	e7 01       	movw	r28, r14
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	01 c0       	rjmp	.+2      	; 0x214a <free+0x58>
    2148:	ea 01       	movw	r28, r20
    214a:	ca 17       	cp	r28, r26
    214c:	db 07       	cpc	r29, r27
    214e:	38 f4       	brcc	.+14     	; 0x215e <free+0x6c>
    2150:	4a 81       	ldd	r20, Y+2	; 0x02
    2152:	5b 81       	ldd	r21, Y+3	; 0x03
    2154:	9e 01       	movw	r18, r28
    2156:	41 15       	cp	r20, r1
    2158:	51 05       	cpc	r21, r1
    215a:	b1 f7       	brne	.-20     	; 0x2148 <free+0x56>
    215c:	22 c0       	rjmp	.+68     	; 0x21a2 <free+0xb0>
    215e:	bc 01       	movw	r22, r24
    2160:	62 50       	subi	r22, 0x02	; 2
    2162:	71 09       	sbc	r23, r1
    2164:	fb 01       	movw	r30, r22
    2166:	d3 83       	std	Z+3, r29	; 0x03
    2168:	c2 83       	std	Z+2, r28	; 0x02
    216a:	00 81       	ld	r16, Z
    216c:	11 81       	ldd	r17, Z+1	; 0x01
    216e:	ac 01       	movw	r20, r24
    2170:	40 0f       	add	r20, r16
    2172:	51 1f       	adc	r21, r17
    2174:	4c 17       	cp	r20, r28
    2176:	5d 07       	cpc	r21, r29
    2178:	61 f4       	brne	.+24     	; 0x2192 <free+0xa0>
    217a:	48 81       	ld	r20, Y
    217c:	59 81       	ldd	r21, Y+1	; 0x01
    217e:	40 0f       	add	r20, r16
    2180:	51 1f       	adc	r21, r17
    2182:	4e 5f       	subi	r20, 0xFE	; 254
    2184:	5f 4f       	sbci	r21, 0xFF	; 255
    2186:	51 83       	std	Z+1, r21	; 0x01
    2188:	40 83       	st	Z, r20
    218a:	4a 81       	ldd	r20, Y+2	; 0x02
    218c:	5b 81       	ldd	r21, Y+3	; 0x03
    218e:	53 83       	std	Z+3, r21	; 0x03
    2190:	42 83       	std	Z+2, r20	; 0x02
    2192:	21 15       	cp	r18, r1
    2194:	31 05       	cpc	r19, r1
    2196:	29 f4       	brne	.+10     	; 0x21a2 <free+0xb0>
    2198:	b0 93 71 02 	sts	0x0271, r27
    219c:	a0 93 70 02 	sts	0x0270, r26
    21a0:	40 c0       	rjmp	.+128    	; 0x2222 <__stack+0x23>
    21a2:	f9 01       	movw	r30, r18
    21a4:	b3 83       	std	Z+3, r27	; 0x03
    21a6:	a2 83       	std	Z+2, r26	; 0x02
    21a8:	e9 01       	movw	r28, r18
    21aa:	69 91       	ld	r22, Y+
    21ac:	79 91       	ld	r23, Y+
    21ae:	c6 0f       	add	r28, r22
    21b0:	d7 1f       	adc	r29, r23
    21b2:	ac 17       	cp	r26, r28
    21b4:	bd 07       	cpc	r27, r29
    21b6:	79 f4       	brne	.+30     	; 0x21d6 <free+0xe4>
    21b8:	dc 01       	movw	r26, r24
    21ba:	5e 91       	ld	r21, -X
    21bc:	4e 91       	ld	r20, -X
    21be:	46 0f       	add	r20, r22
    21c0:	57 1f       	adc	r21, r23
    21c2:	4e 5f       	subi	r20, 0xFE	; 254
    21c4:	5f 4f       	sbci	r21, 0xFF	; 255
    21c6:	51 83       	std	Z+1, r21	; 0x01
    21c8:	40 83       	st	Z, r20
    21ca:	12 96       	adiw	r26, 0x02	; 2
    21cc:	8d 91       	ld	r24, X+
    21ce:	9c 91       	ld	r25, X
    21d0:	13 97       	sbiw	r26, 0x03	; 3
    21d2:	93 83       	std	Z+3, r25	; 0x03
    21d4:	82 83       	std	Z+2, r24	; 0x02
    21d6:	a0 e0       	ldi	r26, 0x00	; 0
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <free+0xee>
    21dc:	d7 01       	movw	r26, r14
    21de:	7c 01       	movw	r14, r24
    21e0:	f7 01       	movw	r30, r14
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	c9 f7       	brne	.-14     	; 0x21dc <free+0xea>
    21ea:	c7 01       	movw	r24, r14
    21ec:	02 96       	adiw	r24, 0x02	; 2
    21ee:	20 81       	ld	r18, Z
    21f0:	31 81       	ldd	r19, Z+1	; 0x01
    21f2:	82 0f       	add	r24, r18
    21f4:	93 1f       	adc	r25, r19
    21f6:	20 91 6e 02 	lds	r18, 0x026E
    21fa:	30 91 6f 02 	lds	r19, 0x026F
    21fe:	28 17       	cp	r18, r24
    2200:	39 07       	cpc	r19, r25
    2202:	79 f4       	brne	.+30     	; 0x2222 <__stack+0x23>
    2204:	10 97       	sbiw	r26, 0x00	; 0
    2206:	29 f4       	brne	.+10     	; 0x2212 <__stack+0x13>
    2208:	10 92 71 02 	sts	0x0271, r1
    220c:	10 92 70 02 	sts	0x0270, r1
    2210:	04 c0       	rjmp	.+8      	; 0x221a <__stack+0x1b>
    2212:	13 96       	adiw	r26, 0x03	; 3
    2214:	1c 92       	st	X, r1
    2216:	1e 92       	st	-X, r1
    2218:	12 97       	sbiw	r26, 0x02	; 2
    221a:	f0 92 6f 02 	sts	0x026F, r15
    221e:	e0 92 6e 02 	sts	0x026E, r14
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	ff 90       	pop	r15
    222c:	ef 90       	pop	r14
    222e:	08 95       	ret

00002230 <memcpy>:
    2230:	fb 01       	movw	r30, r22
    2232:	dc 01       	movw	r26, r24
    2234:	02 c0       	rjmp	.+4      	; 0x223a <memcpy+0xa>
    2236:	01 90       	ld	r0, Z+
    2238:	0d 92       	st	X+, r0
    223a:	41 50       	subi	r20, 0x01	; 1
    223c:	50 40       	sbci	r21, 0x00	; 0
    223e:	d8 f7       	brcc	.-10     	; 0x2236 <memcpy+0x6>
    2240:	08 95       	ret

00002242 <_exit>:
    2242:	f8 94       	cli

00002244 <__stop_program>:
    2244:	ff cf       	rjmp	.-2      	; 0x2244 <__stop_program>
