
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00002dbe  00002e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800270  00800270  00002ec2  2**0
                  ALLOC
  3 .stab         000020f4  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c4  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000587c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000688  00000000  00000000  000058ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006958  00000000  00000000  00005f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000250a  00000000  00000000  0000c88b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c95  00000000  00000000  0000ed95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001644  00000000  00000000  00010a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000027ae  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003339  00000000  00000000  0001481e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000558  00000000  00000000  00017b57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
	}
}
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <_ZN10helicopter8messages11SyncMessageD0Ev>
      e8:	0c 94 14 11 	jmp	0x2228	; 0x2228 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
      ec:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_ZN10helicopter5tasks4Task11runTaskImplEv>
      f0:	0c 94 17 13 	jmp	0x262e	; 0x262e <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
      f4:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <_ZN10helicopter5tasks4Task4initEv>
      f8:	0c 94 09 03 	jmp	0x612	; 0x612 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
      fc:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_ZN10helicopter7drivers12SerialDriverD1Ev>
     100:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     104:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     108:	0c 94 07 08 	jmp	0x100e	; 0x100e <_ZN10helicopter8messages7Message8getBytesEv>
     10c:	0c 94 08 01 	jmp	0x210	; 0x210 <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     110:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <_ZN10helicopter8messages7MessageD0Ev>
     114:	0c 94 9a 02 	jmp	0x534	; 0x534 <_ZN10helicopter5tasks4TaskD0Ev>
     118:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     11c:	0c 94 18 12 	jmp	0x2430	; 0x2430 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>
     120:	0c 94 be 01 	jmp	0x37c	; 0x37c <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>
     124:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <_ZN10helicopter8messages7MessageD1Ev>
     128:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <_ZN10helicopter8messages11SyncMessageD1Ev>
     12c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     130:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     134:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
     138:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
     13c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
     140:	0c 94 c5 08 	jmp	0x118a	; 0x118a <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     144:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <_ZN10helicopter5tasks4Task7runTaskEv>
     148:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     14c:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
     150:	0c 94 17 02 	jmp	0x42e	; 0x42e <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>
     154:	0c 94 16 08 	jmp	0x102c	; 0x102c <_ZN10helicopter8messages7Message12buildMessageEPh>
     158:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN10helicopter5tasks12FlashLEDTask4initEv>
     15c:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     160:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d1 e2       	ldi	r29, 0x21	; 33
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0c bf       	out	0x3c, r16	; 60

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b2 e0       	ldi	r27, 0x02	; 2
     17a:	ee eb       	ldi	r30, 0xBE	; 190
     17c:	fd e2       	ldi	r31, 0x2D	; 45
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a0 37       	cpi	r26, 0x70	; 112
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	22 e0       	ldi	r18, 0x02	; 2
     190:	a0 e7       	ldi	r26, 0x70	; 112
     192:	b2 e0       	ldi	r27, 0x02	; 2
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a6 37       	cpi	r26, 0x76	; 118
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 2b 04 	call	0x856	; 0x856 <main>
     1a2:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	1f 92       	push	r1
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
				{
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	2a e0       	ldi	r18, 0x0A	; 10
     1c0:	32 e0       	ldi	r19, 0x02	; 2
     1c2:	fc 01       	movw	r30, r24
     1c4:	31 83       	std	Z+1, r19	; 0x01
     1c6:	20 83       	st	Z, r18
					
				}
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	81 70       	andi	r24, 0x01	; 1
     1ce:	99 27       	eor	r25, r25
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	21 f0       	breq	.+8      	; 0x1dc <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	1f 92       	push	r1
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	9a 83       	std	Y+2, r25	; 0x02
     1f4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	9a 81       	ldd	r25, Y+2	; 0x02
     1fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN10helicopter7drivers12SerialDriverD1Ev>
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "CommonHeader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	9c 83       	std	Y+4, r25	; 0x04
     21e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     220:	1a 82       	std	Y+2, r1	; 0x02
     222:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	9c 81       	ldd	r25, Y+4	; 0x04
     228:	fc 01       	movw	r30, r24
     22a:	82 85       	ldd	r24, Z+10	; 0x0a
     22c:	88 23       	and	r24, r24
     22e:	b9 f1       	breq	.+110    	; 0x29e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	fc 01       	movw	r30, r24
     236:	82 81       	ldd	r24, Z+2	; 0x02
     238:	93 81       	ldd	r25, Z+3	; 0x03
     23a:	a4 81       	ldd	r26, Z+4	; 0x04
     23c:	b5 81       	ldd	r27, Z+5	; 0x05
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	aa 1f       	adc	r26, r26
     244:	bb 1f       	adc	r27, r27
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	aa 1f       	adc	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	aa 1f       	adc	r26, r26
     254:	bb 1f       	adc	r27, r27
     256:	9c 01       	movw	r18, r24
     258:	ad 01       	movw	r20, r26
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	94 e2       	ldi	r25, 0x24	; 36
     25e:	a4 ef       	ldi	r26, 0xF4	; 244
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	bc 01       	movw	r22, r24
     264:	cd 01       	movw	r24, r26
     266:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
     26a:	da 01       	movw	r26, r20
     26c:	c9 01       	movw	r24, r18
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	a1 09       	sbc	r26, r1
     272:	b1 09       	sbc	r27, r1
     274:	bc 01       	movw	r22, r24
     276:	cd 01       	movw	r24, r26
     278:	0e 94 97 14 	call	0x292e	; 0x292e <__floatunsisf>
     27c:	dc 01       	movw	r26, r24
     27e:	cb 01       	movw	r24, r22
     280:	bc 01       	movw	r22, r24
     282:	cd 01       	movw	r24, r26
     284:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <floor>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	bc 01       	movw	r22, r24
     28e:	cd 01       	movw	r24, r26
     290:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__fixunssfsi>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	3a c0       	rjmp	.+116    	; 0x312 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     29e:	8b 81       	ldd	r24, Y+3	; 0x03
     2a0:	9c 81       	ldd	r25, Y+4	; 0x04
     2a2:	fc 01       	movw	r30, r24
     2a4:	82 81       	ldd	r24, Z+2	; 0x02
     2a6:	93 81       	ldd	r25, Z+3	; 0x03
     2a8:	a4 81       	ldd	r26, Z+4	; 0x04
     2aa:	b5 81       	ldd	r27, Z+5	; 0x05
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	aa 1f       	adc	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	aa 1f       	adc	r26, r26
     2ba:	bb 1f       	adc	r27, r27
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	aa 1f       	adc	r26, r26
     2c2:	bb 1f       	adc	r27, r27
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	aa 1f       	adc	r26, r26
     2ca:	bb 1f       	adc	r27, r27
     2cc:	9c 01       	movw	r18, r24
     2ce:	ad 01       	movw	r20, r26
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	94 e2       	ldi	r25, 0x24	; 36
     2d4:	a4 ef       	ldi	r26, 0xF4	; 244
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
     2e0:	da 01       	movw	r26, r20
     2e2:	c9 01       	movw	r24, r18
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	a1 09       	sbc	r26, r1
     2e8:	b1 09       	sbc	r27, r1
     2ea:	bc 01       	movw	r22, r24
     2ec:	cd 01       	movw	r24, r26
     2ee:	0e 94 97 14 	call	0x292e	; 0x292e <__floatunsisf>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	bc 01       	movw	r22, r24
     2f8:	cd 01       	movw	r24, r26
     2fa:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <floor>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	bc 01       	movw	r22, r24
     304:	cd 01       	movw	r24, r26
     306:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__fixunssfsi>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	9c 81       	ldd	r25, Y+4	; 0x04
     316:	fc 01       	movw	r30, r24
     318:	86 81       	ldd	r24, Z+6	; 0x06
     31a:	88 23       	and	r24, r24
     31c:	41 f5       	brne	.+80     	; 0x36e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     31e:	84 ec       	ldi	r24, 0xC4	; 196
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	29 81       	ldd	r18, Y+1	; 0x01
     324:	3a 81       	ldd	r19, Y+2	; 0x02
     326:	fc 01       	movw	r30, r24
     328:	31 83       	std	Z+1, r19	; 0x01
     32a:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     32c:	82 ec       	ldi	r24, 0xC2	; 194
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	22 ec       	ldi	r18, 0xC2	; 194
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f9 01       	movw	r30, r18
     336:	20 81       	ld	r18, Z
     338:	26 60       	ori	r18, 0x06	; 6
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	9c 81       	ldd	r25, Y+4	; 0x04
     342:	fc 01       	movw	r30, r24
     344:	82 85       	ldd	r24, Z+10	; 0x0a
     346:	88 23       	and	r24, r24
     348:	49 f0       	breq	.+18     	; 0x35c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     34a:	80 ec       	ldi	r24, 0xC0	; 192
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	20 ec       	ldi	r18, 0xC0	; 192
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	f9 01       	movw	r30, r18
     354:	20 81       	ld	r18, Z
     356:	22 60       	ori	r18, 0x02	; 2
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     35c:	81 ec       	ldi	r24, 0xC1	; 193
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	21 ec       	ldi	r18, 0xC1	; 193
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	28 61       	ori	r18, 0x18	; 24
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
	}
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>:

int SerialDriver::transmitByte(byte byteToSend)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	00 d0       	rcall	.+0      	; 0x382 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6>
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	89 83       	std	Y+1, r24	; 0x01
     38a:	6b 83       	std	Y+3, r22	; 0x03
	if (uartPort == Zero)
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	9a 81       	ldd	r25, Y+2	; 0x02
     390:	fc 01       	movw	r30, r24
     392:	86 81       	ldd	r24, Z+6	; 0x06
     394:	88 23       	and	r24, r24
     396:	09 f0       	breq	.+2      	; 0x39a <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x1e>
     398:	42 c0       	rjmp	.+132    	; 0x41e <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa2>
	{
		if (isTimeoutEnabled)
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	fc 01       	movw	r30, r24
     3a0:	81 85       	ldd	r24, Z+9	; 0x09
     3a2:	88 23       	and	r24, r24
     3a4:	09 f1       	breq	.+66     	; 0x3e8 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			timer->startTimer();
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	fc 01       	movw	r30, r24
     3ac:	87 81       	ldd	r24, Z+7	; 0x07
     3ae:	90 85       	ldd	r25, Z+8	; 0x08
     3b0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     3b4:	19 c0       	rjmp	.+50     	; 0x3e8 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ba:	fc 01       	movw	r30, r24
     3bc:	81 85       	ldd	r24, Z+9	; 0x09
     3be:	88 23       	and	r24, r24
     3c0:	a1 f0       	breq	.+40     	; 0x3ea <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
			{
				if (timer->hasTimedout())
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	fc 01       	movw	r30, r24
     3c8:	87 81       	ldd	r24, Z+7	; 0x07
     3ca:	90 85       	ldd	r25, Z+8	; 0x08
     3cc:	0e 94 32 14 	call	0x2864	; 0x2864 <_ZN10helicopter4util5Timer11hasTimedoutEv>
     3d0:	88 23       	and	r24, r24
     3d2:	59 f0       	breq	.+22     	; 0x3ea <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
				{
					timer->stopTimer();
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	9a 81       	ldd	r25, Y+2	; 0x02
     3d8:	fc 01       	movw	r30, r24
     3da:	87 81       	ldd	r24, Z+7	; 0x07
     3dc:	90 85       	ldd	r25, Z+8	; 0x08
     3de:	0e 94 4c 14 	call	0x2898	; 0x2898 <_ZN10helicopter4util5Timer9stopTimerEv>
					return -1;
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	9f ef       	ldi	r25, 0xFF	; 255
     3e6:	1d c0       	rjmp	.+58     	; 0x422 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa6>
		{
			timer->startTimer();
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     3e8:	00 00       	nop
     3ea:	80 ec       	ldi	r24, 0xC0	; 192
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	fc 01       	movw	r30, r24
     3f0:	80 81       	ld	r24, Z
     3f2:	88 2f       	mov	r24, r24
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	80 72       	andi	r24, 0x20	; 32
     3f8:	99 27       	eor	r25, r25
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	00 97       	sbiw	r24, 0x00	; 0
     3fe:	09 f0       	breq	.+2      	; 0x402 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x86>
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	22 23       	and	r18, r18
     404:	c1 f6       	brne	.-80     	; 0x3b6 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x3a>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     406:	86 ec       	ldi	r24, 0xC6	; 198
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2b 81       	ldd	r18, Y+3	; 0x03
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18
		
		timer->stopTimer();
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	87 81       	ldd	r24, Z+7	; 0x07
     418:	90 85       	ldd	r25, Z+8	; 0x08
     41a:	0e 94 4c 14 	call	0x2898	; 0x2898 <_ZN10helicopter4util5Timer9stopTimerEv>
	}
	
	return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6>
     434:	1f 92       	push	r1
     436:	1f 92       	push	r1
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	9b 83       	std	Y+3, r25	; 0x03
     43e:	8a 83       	std	Y+2, r24	; 0x02
     440:	7d 83       	std	Y+5, r23	; 0x05
     442:	6c 83       	std	Y+4, r22	; 0x04
	bool hasDataOverrun = false;
     444:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
     446:	8a 81       	ldd	r24, Y+2	; 0x02
     448:	9b 81       	ldd	r25, Y+3	; 0x03
     44a:	fc 01       	movw	r30, r24
     44c:	86 81       	ldd	r24, Z+6	; 0x06
     44e:	88 23       	and	r24, r24
     450:	09 f0       	breq	.+2      	; 0x454 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x26>
     452:	41 c0       	rjmp	.+130    	; 0x4d6 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xa8>
	{
		
		if (isTimeoutEnabled)
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	fc 01       	movw	r30, r24
     45a:	81 85       	ldd	r24, Z+9	; 0x09
     45c:	88 23       	and	r24, r24
     45e:	d9 f0       	breq	.+54     	; 0x496 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			timer->startTimer();
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	9b 81       	ldd	r25, Y+3	; 0x03
     464:	fc 01       	movw	r30, r24
     466:	87 81       	ldd	r24, Z+7	; 0x07
     468:	90 85       	ldd	r25, Z+8	; 0x08
     46a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     46e:	13 c0       	rjmp	.+38     	; 0x496 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			if (timer->hasTimedout())
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	9b 81       	ldd	r25, Y+3	; 0x03
     474:	fc 01       	movw	r30, r24
     476:	87 81       	ldd	r24, Z+7	; 0x07
     478:	90 85       	ldd	r25, Z+8	; 0x08
     47a:	0e 94 32 14 	call	0x2864	; 0x2864 <_ZN10helicopter4util5Timer11hasTimedoutEv>
     47e:	88 23       	and	r24, r24
     480:	59 f0       	breq	.+22     	; 0x498 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6a>
			{
				timer->stopTimer();
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	9b 81       	ldd	r25, Y+3	; 0x03
     486:	fc 01       	movw	r30, r24
     488:	87 81       	ldd	r24, Z+7	; 0x07
     48a:	90 85       	ldd	r25, Z+8	; 0x08
     48c:	0e 94 4c 14 	call	0x2898	; 0x2898 <_ZN10helicopter4util5Timer9stopTimerEv>
				return -1;
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	29 c0       	rjmp	.+82     	; 0x4e8 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xba>
			timer->startTimer();
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     496:	00 00       	nop
     498:	80 ec       	ldi	r24, 0xC0	; 192
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	fc 01       	movw	r30, r24
     49e:	80 81       	ld	r24, Z
     4a0:	80 95       	com	r24
     4a2:	88 1f       	adc	r24, r24
     4a4:	88 27       	eor	r24, r24
     4a6:	88 1f       	adc	r24, r24
     4a8:	88 23       	and	r24, r24
     4aa:	11 f7       	brne	.-60     	; 0x470 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x42>
			}*/
		}
		
		//determine if there has been a data overrun.
		//Swallow the overrun because nothing can be done.
		hasDataOverrun = (UCSR0A & (1 << DOR0)) != 0;
     4ac:	80 ec       	ldi	r24, 0xC0	; 192
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	80 81       	ld	r24, Z
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	88 70       	andi	r24, 0x08	; 8
     4ba:	99 27       	eor	r25, r25
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	00 97       	sbiw	r24, 0x00	; 0
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x96>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	29 83       	std	Y+1, r18	; 0x01
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
     4c6:	86 ec       	ldi	r24, 0xC6	; 198
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 81       	ld	r18, Z
     4ce:	8c 81       	ldd	r24, Y+4	; 0x04
     4d0:	9d 81       	ldd	r25, Y+5	; 0x05
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
	}
	
	timer->stopTimer();
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	9b 81       	ldd	r25, Y+3	; 0x03
     4da:	fc 01       	movw	r30, r24
     4dc:	87 81       	ldd	r24, Z+7	; 0x07
     4de:	90 85       	ldd	r25, Z+8	; 0x08
     4e0:	0e 94 4c 14 	call	0x2898	; 0x2898 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return 0;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	28 e5       	ldi	r18, 0x58	; 88
     50e:	32 e0       	ldi	r19, 0x02	; 2
     510:	fc 01       	movw	r30, r24
     512:	31 83       	std	Z+1, r19	; 0x01
     514:	20 83       	st	Z, r18
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	81 70       	andi	r24, 0x01	; 1
     51c:	99 27       	eor	r25, r25
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	21 f0       	breq	.+8      	; 0x52a <_ZN10helicopter5tasks4TaskD1Ev+0x32>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_ZN10helicopter5tasks4TaskD0Ev>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	1f 92       	push	r1
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>:
					
				int ledToBlink;
				
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	28 97       	sbiw	r28, 0x08	; 8
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	7c 83       	std	Y+4, r23	; 0x04
     578:	6b 83       	std	Y+3, r22	; 0x03
     57a:	5e 83       	std	Y+6, r21	; 0x06
     57c:	4d 83       	std	Y+5, r20	; 0x05
     57e:	38 87       	std	Y+8, r19	; 0x08
     580:	2f 83       	std	Y+7, r18	; 0x07
				Task(delay, period),
				isOn(false),
				ledToBlink(ledToBlink)
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	4d 81       	ldd	r20, Y+5	; 0x05
     588:	5e 81       	ldd	r21, Y+6	; 0x06
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	3c 81       	ldd	r19, Y+4	; 0x04
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN10helicopter5tasks4TaskC1Eii>
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	9a 81       	ldd	r25, Y+2	; 0x02
     598:	28 e1       	ldi	r18, 0x18	; 24
     59a:	32 e0       	ldi	r19, 0x02	; 2
     59c:	fc 01       	movw	r30, r24
     59e:	31 83       	std	Z+1, r19	; 0x01
     5a0:	20 83       	st	Z, r18
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	fc 01       	movw	r30, r24
     5a8:	17 82       	std	Z+7, r1	; 0x07
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	2f 81       	ldd	r18, Y+7	; 0x07
     5b0:	38 85       	ldd	r19, Y+8	; 0x08
     5b2:	fc 01       	movw	r30, r24
     5b4:	31 87       	std	Z+9, r19	; 0x09
     5b6:	20 87       	std	Z+8, r18	; 0x08
			{
					
			}
     5b8:	28 96       	adiw	r28, 0x08	; 8
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
	
			void init()
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	1f 92       	push	r1
     5d0:	1f 92       	push	r1
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	89 83       	std	Y+1, r24	; 0x01
			{
				DDRA |= (1<<ledToBlink);
     5da:	81 e2       	ldi	r24, 0x21	; 33
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	21 e2       	ldi	r18, 0x21	; 33
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	62 2f       	mov	r22, r18
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	3a 81       	ldd	r19, Y+2	; 0x02
     5ec:	f9 01       	movw	r30, r18
     5ee:	40 85       	ldd	r20, Z+8	; 0x08
     5f0:	51 85       	ldd	r21, Z+9	; 0x09
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	04 2e       	mov	r0, r20
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x34>
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	0a 94       	dec	r0
     600:	e2 f7       	brpl	.-8      	; 0x5fa <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x30>
     602:	26 2b       	or	r18, r22
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
			}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	1f 92       	push	r1
     618:	1f 92       	push	r1
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01
				if (isOn)
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	fc 01       	movw	r30, r24
     628:	87 81       	ldd	r24, Z+7	; 0x07
     62a:	88 23       	and	r24, r24
     62c:	e9 f0       	breq	.+58     	; 0x668 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x56>
				{
					PORTA &= ~(1<<ledToBlink);
     62e:	82 e2       	ldi	r24, 0x22	; 34
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	22 e2       	ldi	r18, 0x22	; 34
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	f9 01       	movw	r30, r18
     638:	20 81       	ld	r18, Z
     63a:	62 2f       	mov	r22, r18
     63c:	29 81       	ldd	r18, Y+1	; 0x01
     63e:	3a 81       	ldd	r19, Y+2	; 0x02
     640:	f9 01       	movw	r30, r18
     642:	40 85       	ldd	r20, Z+8	; 0x08
     644:	51 85       	ldd	r21, Z+9	; 0x09
     646:	21 e0       	ldi	r18, 0x01	; 1
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	04 2e       	mov	r0, r20
     64c:	02 c0       	rjmp	.+4      	; 0x652 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x40>
     64e:	22 0f       	add	r18, r18
     650:	33 1f       	adc	r19, r19
     652:	0a 94       	dec	r0
     654:	e2 f7       	brpl	.-8      	; 0x64e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x3c>
     656:	20 95       	com	r18
     658:	26 23       	and	r18, r22
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
					isOn = false;
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	fc 01       	movw	r30, r24
     664:	17 82       	std	Z+7, r1	; 0x07
     666:	1c c0       	rjmp	.+56     	; 0x6a0 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x8e>
				}else
				{
					PORTA |= (1<<ledToBlink);
     668:	82 e2       	ldi	r24, 0x22	; 34
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	22 e2       	ldi	r18, 0x22	; 34
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	62 2f       	mov	r22, r18
     676:	29 81       	ldd	r18, Y+1	; 0x01
     678:	3a 81       	ldd	r19, Y+2	; 0x02
     67a:	f9 01       	movw	r30, r18
     67c:	40 85       	ldd	r20, Z+8	; 0x08
     67e:	51 85       	ldd	r21, Z+9	; 0x09
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	04 2e       	mov	r0, r20
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x7a>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x76>
     690:	26 2b       	or	r18, r22
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
					isOn = true;
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	fc 01       	movw	r30, r24
     69e:	27 83       	std	Z+7, r18	; 0x07
				}
			}
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <_ZN10helicopter4util5TimerC1Em9PRESCALERm>:
				 * @timeoutMilliseconds the milliseconds that should go by before the
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	2c 97       	sbiw	r28, 0x0c	; 12
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	4b 83       	std	Y+3, r20	; 0x03
     6cc:	5c 83       	std	Y+4, r21	; 0x04
     6ce:	6d 83       	std	Y+5, r22	; 0x05
     6d0:	7e 83       	std	Y+6, r23	; 0x06
     6d2:	38 87       	std	Y+8, r19	; 0x08
     6d4:	2f 83       	std	Y+7, r18	; 0x07
     6d6:	e9 86       	std	Y+9, r14	; 0x09
     6d8:	fa 86       	std	Y+10, r15	; 0x0a
     6da:	0b 87       	std	Y+11, r16	; 0x0b
     6dc:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
     6de:	29 81       	ldd	r18, Y+1	; 0x01
     6e0:	3a 81       	ldd	r19, Y+2	; 0x02
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	ad 81       	ldd	r26, Y+5	; 0x05
     6e8:	be 81       	ldd	r27, Y+6	; 0x06
     6ea:	f9 01       	movw	r30, r18
     6ec:	80 83       	st	Z, r24
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	a2 83       	std	Z+2, r26	; 0x02
     6f2:	b3 83       	std	Z+3, r27	; 0x03
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	2f 81       	ldd	r18, Y+7	; 0x07
     6fa:	38 85       	ldd	r19, Y+8	; 0x08
     6fc:	fc 01       	movw	r30, r24
     6fe:	35 83       	std	Z+5, r19	; 0x05
     700:	24 83       	std	Z+4, r18	; 0x04
     702:	29 85       	ldd	r18, Y+9	; 0x09
     704:	3a 85       	ldd	r19, Y+10	; 0x0a
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	fc 01       	movw	r30, r24
     70c:	37 83       	std	Z+7, r19	; 0x07
     70e:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
     710:	2c 96       	adiw	r28, 0x0c	; 12
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	08 95       	ret

0000072a <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>:
				 * only used when enableTimeout = true.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
     72a:	cf 92       	push	r12
     72c:	ef 92       	push	r14
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	2b 97       	sbiw	r28, 0x0b	; 11
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	4b 83       	std	Y+3, r20	; 0x03
     74c:	5c 83       	std	Y+4, r21	; 0x04
     74e:	6d 83       	std	Y+5, r22	; 0x05
     750:	7e 83       	std	Y+6, r23	; 0x06
     752:	2f 83       	std	Y+7, r18	; 0x07
     754:	19 87       	std	Y+9, r17	; 0x09
     756:	08 87       	std	Y+8, r16	; 0x08
     758:	ea 86       	std	Y+10, r14	; 0x0a
     75a:	cb 86       	std	Y+11, r12	; 0x0b
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				timer(timer),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	2a e0       	ldi	r18, 0x0A	; 10
     762:	32 e0       	ldi	r19, 0x02	; 2
     764:	fc 01       	movw	r30, r24
     766:	31 83       	std	Z+1, r19	; 0x01
     768:	20 83       	st	Z, r18
     76a:	29 81       	ldd	r18, Y+1	; 0x01
     76c:	3a 81       	ldd	r19, Y+2	; 0x02
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	ad 81       	ldd	r26, Y+5	; 0x05
     774:	be 81       	ldd	r27, Y+6	; 0x06
     776:	f9 01       	movw	r30, r18
     778:	82 83       	std	Z+2, r24	; 0x02
     77a:	93 83       	std	Z+3, r25	; 0x03
     77c:	a4 83       	std	Z+4, r26	; 0x04
     77e:	b5 83       	std	Z+5, r27	; 0x05
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	2f 81       	ldd	r18, Y+7	; 0x07
     786:	fc 01       	movw	r30, r24
     788:	26 83       	std	Z+6, r18	; 0x06
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	28 85       	ldd	r18, Y+8	; 0x08
     790:	39 85       	ldd	r19, Y+9	; 0x09
     792:	fc 01       	movw	r30, r24
     794:	30 87       	std	Z+8, r19	; 0x08
     796:	27 83       	std	Z+7, r18	; 0x07
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	9a 81       	ldd	r25, Y+2	; 0x02
     79c:	2a 85       	ldd	r18, Y+10	; 0x0a
     79e:	fc 01       	movw	r30, r24
     7a0:	21 87       	std	Z+9, r18	; 0x09
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	2b 85       	ldd	r18, Y+11	; 0x0b
     7a8:	fc 01       	movw	r30, r24
     7aa:	22 87       	std	Z+10, r18	; 0x0a
				{
					
				}
     7ac:	2b 96       	adiw	r28, 0x0b	; 11
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ef 90       	pop	r14
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret

000007c6 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * at the same time interval (i.e. 20 milliseconds) for both transmitting a byte as well
				 * as receiving a byte.
				 * @param serialDriver the driver used to communicate with the serial port
				 * which is used to communicate with the Ground Control Station.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver):
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	7c 83       	std	Y+4, r23	; 0x04
     7d8:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	2b 81       	ldd	r18, Y+3	; 0x03
     7e0:	3c 81       	ldd	r19, Y+4	; 0x04
     7e2:	fc 01       	movw	r30, r24
     7e4:	31 83       	std	Z+1, r19	; 0x01
     7e6:	20 83       	st	Z, r18
					{}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int checksumErrors;
			
			public:
			
			SystemModel():
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	1f 92       	push	r1
     7fc:	1f 92       	push	r1
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
			rawMagY(0),
			rawMagZ(0),
			magYaw(0),
			timeouts(0),
			unrecognizedMsgTypes(0),
			checksumErrors(0)
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	fc 01       	movw	r30, r24
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	10 82       	st	Z, r1
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	fc 01       	movw	r30, r24
     816:	13 82       	std	Z+3, r1	; 0x03
     818:	12 82       	std	Z+2, r1	; 0x02
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	fc 01       	movw	r30, r24
     820:	15 82       	std	Z+5, r1	; 0x05
     822:	14 82       	std	Z+4, r1	; 0x04
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	fc 01       	movw	r30, r24
     82a:	17 82       	std	Z+7, r1	; 0x07
     82c:	16 82       	std	Z+6, r1	; 0x06
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	fc 01       	movw	r30, r24
     834:	11 86       	std	Z+9, r1	; 0x09
     836:	10 86       	std	Z+8, r1	; 0x08
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	fc 01       	movw	r30, r24
     83e:	13 86       	std	Z+11, r1	; 0x0b
     840:	12 86       	std	Z+10, r1	; 0x0a
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	fc 01       	movw	r30, r24
     848:	15 86       	std	Z+13, r1	; 0x0d
     84a:	14 86       	std	Z+12, r1	; 0x0c
			{
				
			}
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <main>:
using namespace helicopter::drivers;
using namespace helicopter::interfaces;
using namespace helicopter::model;

int main(void)
{	
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	60 97       	sbiw	r28, 0x10	; 16
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
     87a:	8e e0       	ldi	r24, 0x0E	; 14
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
     882:	8c 01       	movw	r16, r24
     884:	c8 01       	movw	r24, r16
     886:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN10helicopter5model11SystemModelC1Ev>
     88a:	1a 83       	std	Y+2, r17	; 0x02
     88c:	09 83       	std	Y+1, r16	; 0x01
	
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 10); //Good timeout when using the USB
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
     896:	6c 01       	movw	r12, r24
     898:	1a e0       	ldi	r17, 0x0A	; 10
     89a:	e1 2e       	mov	r14, r17
     89c:	f1 2c       	mov	r15, r1
     89e:	00 e0       	ldi	r16, 0x00	; 0
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	34 e0       	ldi	r19, 0x04	; 4
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	54 e2       	ldi	r21, 0x24	; 36
     8aa:	64 ef       	ldi	r22, 0xF4	; 244
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	c6 01       	movw	r24, r12
     8b0:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN10helicopter4util5TimerC1Em9PRESCALERm>
     8b4:	dc 82       	std	Y+4, r13	; 0x04
     8b6:	cb 82       	std	Y+3, r12	; 0x03
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);  
     8b8:	8b e0       	ldi	r24, 0x0B	; 11
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
     8c0:	5c 01       	movw	r10, r24
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	9c 81       	ldd	r25, Y+4	; 0x04
     8c6:	cc 24       	eor	r12, r12
     8c8:	c3 94       	inc	r12
     8ca:	ee 24       	eor	r14, r14
     8cc:	e3 94       	inc	r14
     8ce:	8c 01       	movw	r16, r24
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	51 ee       	ldi	r21, 0xE1	; 225
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	c5 01       	movw	r24, r10
     8dc:	0e 94 95 03 	call	0x72a	; 0x72a <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>
     8e0:	be 82       	std	Y+6, r11	; 0x06
     8e2:	ad 82       	std	Y+5, r10	; 0x05
	serialDriver->initialize();
     8e4:	8d 81       	ldd	r24, Y+5	; 0x05
     8e6:	9e 81       	ldd	r25, Y+6	; 0x06
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	04 96       	adiw	r24, 0x04	; 4
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 81       	ld	r18, Z
     8f4:	31 81       	ldd	r19, Z+1	; 0x01
     8f6:	8d 81       	ldd	r24, Y+5	; 0x05
     8f8:	9e 81       	ldd	r25, Y+6	; 0x06
     8fa:	f9 01       	movw	r30, r18
     8fc:	19 95       	eicall
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver);
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
     906:	8c 01       	movw	r16, r24
     908:	8d 81       	ldd	r24, Y+5	; 0x05
     90a:	9e 81       	ldd	r25, Y+6	; 0x06
     90c:	bc 01       	movw	r22, r24
     90e:	c8 01       	movw	r24, r16
     910:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>
     914:	18 87       	std	Y+8, r17	; 0x08
     916:	0f 83       	std	Y+7, r16	; 0x07
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 50 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 50 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, 0, 4);//starting at tick 0, execute 50 times a second
     918:	8b e0       	ldi	r24, 0x0B	; 11
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
     920:	7c 01       	movw	r14, r24
     922:	49 81       	ldd	r20, Y+1	; 0x01
     924:	5a 81       	ldd	r21, Y+2	; 0x02
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	98 85       	ldd	r25, Y+8	; 0x08
     92a:	04 e0       	ldi	r16, 0x04	; 4
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	bc 01       	movw	r22, r24
     934:	c7 01       	movw	r24, r14
     936:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
     93a:	fa 86       	std	Y+10, r15	; 0x0a
     93c:	e9 86       	std	Y+9, r14	; 0x09
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
     93e:	8b e0       	ldi	r24, 0x0B	; 11
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
     946:	7c 01       	movw	r14, r24
     948:	49 81       	ldd	r20, Y+1	; 0x01
     94a:	5a 81       	ldd	r21, Y+2	; 0x02
     94c:	8f 81       	ldd	r24, Y+7	; 0x07
     94e:	98 85       	ldd	r25, Y+8	; 0x08
     950:	04 e0       	ldi	r16, 0x04	; 4
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	bc 01       	movw	r22, r24
     95a:	c7 01       	movw	r24, r14
     95c:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
     960:	fc 86       	std	Y+12, r15	; 0x0c
     962:	eb 86       	std	Y+11, r14	; 0x0b
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
     96c:	8c 01       	movw	r16, r24
     96e:	23 e0       	ldi	r18, 0x03	; 3
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	48 ec       	ldi	r20, 0xC8	; 200
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	62 e0       	ldi	r22, 0x02	; 2
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	c8 01       	movw	r24, r16
     97c:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>
     980:	1e 87       	std	Y+14, r17	; 0x0e
     982:	0d 87       	std	Y+13, r16	; 0x0d
		

	Scheduler *scheduler = Scheduler::getScheduler();
     984:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
     988:	98 8b       	std	Y+16, r25	; 0x10
     98a:	8f 87       	std	Y+15, r24	; 0x0f
	
	scheduler->addTask(flashTask);
     98c:	2d 85       	ldd	r18, Y+13	; 0x0d
     98e:	3e 85       	ldd	r19, Y+14	; 0x0e
     990:	8f 85       	ldd	r24, Y+15	; 0x0f
     992:	98 89       	ldd	r25, Y+16	; 0x10
     994:	b9 01       	movw	r22, r18
     996:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
     99a:	29 85       	ldd	r18, Y+9	; 0x09
     99c:	3a 85       	ldd	r19, Y+10	; 0x0a
     99e:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a0:	98 89       	ldd	r25, Y+16	; 0x10
     9a2:	b9 01       	movw	r22, r18
     9a4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
     9a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     9aa:	3c 85       	ldd	r19, Y+12	; 0x0c
     9ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ae:	98 89       	ldd	r25, Y+16	; 0x10
     9b0:	b9 01       	movw	r22, r18
     9b2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
     9b6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9b8:	98 89       	ldd	r25, Y+16	; 0x10
     9ba:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
     9be:	8f 85       	ldd	r24, Y+15	; 0x0f
     9c0:	98 89       	ldd	r25, Y+16	; 0x10
     9c2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	while(1)
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
     9c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9c8:	98 89       	ldd	r25, Y+16	; 0x10
     9ca:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
     9ce:	fb cf       	rjmp	.-10     	; 0x9c6 <main+0x170>

000009d0 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	1f 92       	push	r1
     9d6:	1f 92       	push	r1
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	9a 83       	std	Y+2, r25	; 0x02
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	28 e1       	ldi	r18, 0x18	; 24
     9e6:	32 e0       	ldi	r19, 0x02	; 2
     9e8:	fc 01       	movw	r30, r24
     9ea:	31 83       	std	Z+1, r19	; 0x01
     9ec:	20 83       	st	Z, r18
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	9a 81       	ldd	r25, Y+2	; 0x02
     9f2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	81 70       	andi	r24, 0x01	; 1
     9fc:	99 27       	eor	r25, r25
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	21 f0       	breq	.+8      	; 0xa0a <_ZN10helicopter5tasks12FlashLEDTaskD1Ev+0x3a>
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	1f 92       	push	r1
     a1a:	1f 92       	push	r1
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	9a 83       	std	Y+2, r25	; 0x02
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	2d 97       	sbiw	r28, 0x0d	; 13
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	9d 83       	std	Y+5, r25	; 0x05
     a58:	8c 83       	std	Y+4, r24	; 0x04
     a5a:	7f 83       	std	Y+7, r23	; 0x07
     a5c:	6e 83       	std	Y+6, r22	; 0x06
     a5e:	59 87       	std	Y+9, r21	; 0x09
     a60:	48 87       	std	Y+8, r20	; 0x08
     a62:	3b 87       	std	Y+11, r19	; 0x0b
     a64:	2a 87       	std	Y+10, r18	; 0x0a
     a66:	1d 87       	std	Y+13, r17	; 0x0d
     a68:	0c 87       	std	Y+12, r16	; 0x0c
	for (int i = 0; i < payloadSize; i++)
     a6a:	1a 82       	std	Y+2, r1	; 0x02
     a6c:	19 82       	std	Y+1, r1	; 0x01
     a6e:	26 c0       	rjmp	.+76     	; 0xabc <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x7e>
	{
		byte b = msgPayload[i];
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	2e 81       	ldd	r18, Y+6	; 0x06
     a76:	3f 81       	ldd	r19, Y+7	; 0x07
     a78:	82 0f       	add	r24, r18
     a7a:	93 1f       	adc	r25, r19
     a7c:	fc 01       	movw	r30, r24
     a7e:	80 81       	ld	r24, Z
     a80:	8b 83       	std	Y+3, r24	; 0x03
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
     a82:	8a 85       	ldd	r24, Y+10	; 0x0a
     a84:	9b 85       	ldd	r25, Y+11	; 0x0b
     a86:	fc 01       	movw	r30, r24
     a88:	90 81       	ld	r25, Z
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	29 2f       	mov	r18, r25
     a8e:	28 0f       	add	r18, r24
     a90:	8a 85       	ldd	r24, Y+10	; 0x0a
     a92:	9b 85       	ldd	r25, Y+11	; 0x0b
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
     a98:	8c 85       	ldd	r24, Y+12	; 0x0c
     a9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 81       	ld	r18, Z
     aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
     aa2:	9b 85       	ldd	r25, Y+11	; 0x0b
     aa4:	fc 01       	movw	r30, r24
     aa6:	80 81       	ld	r24, Z
     aa8:	28 0f       	add	r18, r24
     aaa:	8c 85       	ldd	r24, Y+12	; 0x0c
     aac:	9d 85       	ldd	r25, Y+13	; 0x0d
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	9a 83       	std	Y+2, r25	; 0x02
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	41 e0       	ldi	r20, 0x01	; 1
     abe:	29 81       	ldd	r18, Y+1	; 0x01
     ac0:	3a 81       	ldd	r19, Y+2	; 0x02
     ac2:	88 85       	ldd	r24, Y+8	; 0x08
     ac4:	99 85       	ldd	r25, Y+9	; 0x09
     ac6:	28 17       	cp	r18, r24
     ac8:	39 07       	cpc	r19, r25
     aca:	0c f0       	brlt	.+2      	; 0xace <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x90>
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	44 23       	and	r20, r20
     ad0:	79 f6       	brne	.-98     	; 0xa70 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x32>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
     ad2:	2d 96       	adiw	r28, 0x0d	; 13
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	64 97       	sbiw	r28, 0x14	; 20
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	9a 8b       	std	Y+18, r25	; 0x12
     b0a:	89 8b       	std	Y+17, r24	; 0x11
     b0c:	7c 8b       	std	Y+20, r23	; 0x14
     b0e:	6b 8b       	std	Y+19, r22	; 0x13
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
     b10:	ed b6       	in	r14, 0x3d	; 61
     b12:	fe b6       	in	r15, 0x3e	; 62
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
     b14:	1a 82       	std	Y+2, r1	; 0x02
     b16:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
     b18:	8b 89       	ldd	r24, Y+19	; 0x13
     b1a:	9c 89       	ldd	r25, Y+20	; 0x14
     b1c:	00 97       	sbiw	r24, 0x00	; 0
     b1e:	09 f4       	brne	.+2      	; 0xb22 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3a>
     b20:	b3 c0       	rjmp	.+358    	; 0xc88 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1a0>
     b22:	8d b7       	in	r24, 0x3d	; 61
     b24:	9e b7       	in	r25, 0x3e	; 62
     b26:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
     b28:	8b 89       	ldd	r24, Y+19	; 0x13
     b2a:	9c 89       	ldd	r25, Y+20	; 0x14
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	04 96       	adiw	r24, 0x04	; 4
     b34:	fc 01       	movw	r30, r24
     b36:	20 81       	ld	r18, Z
     b38:	31 81       	ldd	r19, Z+1	; 0x01
     b3a:	8b 89       	ldd	r24, Y+19	; 0x13
     b3c:	9c 89       	ldd	r25, Y+20	; 0x14
     b3e:	f9 01       	movw	r30, r18
     b40:	19 95       	eicall
     b42:	9e 83       	std	Y+6, r25	; 0x06
     b44:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
     b46:	8b 89       	ldd	r24, Y+19	; 0x13
     b48:	9c 89       	ldd	r25, Y+20	; 0x14
     b4a:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN10helicopter8messages7Message14getMessageSizeEv>
     b4e:	98 87       	std	Y+8, r25	; 0x08
     b50:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
     b52:	8f 81       	ldd	r24, Y+7	; 0x07
     b54:	98 85       	ldd	r25, Y+8	; 0x08
     b56:	05 96       	adiw	r24, 0x05	; 5
     b58:	9a 87       	std	Y+10, r25	; 0x0a
     b5a:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
     b5c:	89 85       	ldd	r24, Y+9	; 0x09
     b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	9c 87       	std	Y+12, r25	; 0x0c
     b64:	8b 87       	std	Y+11, r24	; 0x0b
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	2d b7       	in	r18, 0x3d	; 61
     b6a:	3e b7       	in	r19, 0x3e	; 62
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	3e bf       	out	0x3e, r19	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	2d bf       	out	0x3d, r18	; 61
     b7a:	8d b7       	in	r24, 0x3d	; 61
     b7c:	9e b7       	in	r25, 0x3e	; 62
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	9e 87       	std	Y+14, r25	; 0x0e
     b82:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
     b84:	8d 85       	ldd	r24, Y+13	; 0x0d
     b86:	9e 85       	ldd	r25, Y+14	; 0x0e
     b88:	25 eb       	ldi	r18, 0xB5	; 181
     b8a:	fc 01       	movw	r30, r24
     b8c:	20 83       	st	Z, r18
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	22 e6       	ldi	r18, 0x62	; 98
     b94:	fc 01       	movw	r30, r24
     b96:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
     b98:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9c:	27 ed       	ldi	r18, 0xD7	; 215
     b9e:	fc 01       	movw	r30, r24
     ba0:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
     ba2:	4f 81       	ldd	r20, Y+7	; 0x07
     ba4:	58 85       	ldd	r21, Y+8	; 0x08
     ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
     baa:	03 96       	adiw	r24, 0x03	; 3
     bac:	2d 81       	ldd	r18, Y+5	; 0x05
     bae:	3e 81       	ldd	r19, Y+6	; 0x06
     bb0:	b9 01       	movw	r22, r18
     bb2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <memcpy>
		
		byte checksumA = 0;
     bb6:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
     bb8:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
     bba:	fe 01       	movw	r30, r28
     bbc:	70 96       	adiw	r30, 0x10	; 16
     bbe:	9e 01       	movw	r18, r28
     bc0:	21 5f       	subi	r18, 0xF1	; 241
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 81       	ldd	r20, Y+7	; 0x07
     bc6:	58 85       	ldd	r21, Y+8	; 0x08
     bc8:	6d 81       	ldd	r22, Y+5	; 0x05
     bca:	7e 81       	ldd	r23, Y+6	; 0x06
     bcc:	89 89       	ldd	r24, Y+17	; 0x11
     bce:	9a 89       	ldd	r25, Y+18	; 0x12
     bd0:	8f 01       	movw	r16, r30
     bd2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
     bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bda:	02 97       	sbiw	r24, 0x02	; 2
     bdc:	4f 85       	ldd	r20, Y+15	; 0x0f
     bde:	2d 85       	ldd	r18, Y+13	; 0x0d
     be0:	3e 85       	ldd	r19, Y+14	; 0x0e
     be2:	82 0f       	add	r24, r18
     be4:	93 1f       	adc	r25, r19
     be6:	fc 01       	movw	r30, r24
     be8:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
     bea:	89 85       	ldd	r24, Y+9	; 0x09
     bec:	9a 85       	ldd	r25, Y+10	; 0x0a
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	48 89       	ldd	r20, Y+16	; 0x10
     bf2:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf4:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	fc 01       	movw	r30, r24
     bfc:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     bfe:	1c 82       	std	Y+4, r1	; 0x04
     c00:	1b 82       	std	Y+3, r1	; 0x03
     c02:	23 c0       	rjmp	.+70     	; 0xc4a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x162>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
     c04:	89 89       	ldd	r24, Y+17	; 0x11
     c06:	9a 89       	ldd	r25, Y+18	; 0x12
     c08:	fc 01       	movw	r30, r24
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	fc 01       	movw	r30, r24
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	06 96       	adiw	r24, 0x06	; 6
     c16:	fc 01       	movw	r30, r24
     c18:	20 81       	ld	r18, Z
     c1a:	31 81       	ldd	r19, Z+1	; 0x01
     c1c:	4d 85       	ldd	r20, Y+13	; 0x0d
     c1e:	5e 85       	ldd	r21, Y+14	; 0x0e
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	84 0f       	add	r24, r20
     c26:	95 1f       	adc	r25, r21
     c28:	fc 01       	movw	r30, r24
     c2a:	40 81       	ld	r20, Z
     c2c:	89 89       	ldd	r24, Y+17	; 0x11
     c2e:	9a 89       	ldd	r25, Y+18	; 0x12
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	64 2f       	mov	r22, r20
     c38:	f9 01       	movw	r30, r18
     c3a:	19 95       	eicall
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	9c 83       	std	Y+4, r25	; 0x04
     c48:	8b 83       	std	Y+3, r24	; 0x03
     c4a:	2b 81       	ldd	r18, Y+3	; 0x03
     c4c:	3c 81       	ldd	r19, Y+4	; 0x04
     c4e:	89 85       	ldd	r24, Y+9	; 0x09
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	34 f4       	brge	.+12     	; 0xc64 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	11 f4       	brne	.+4      	; 0xc64 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17e>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	88 23       	and	r24, r24
     c68:	69 f6       	brne	.-102    	; 0xc04 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x11c>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete [] msgPayload;
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	21 f0       	breq	.+8      	; 0xc7a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x192>
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZdaPv>
		msgPayload = NULL;
     c7a:	1e 82       	std	Y+6, r1	; 0x06
     c7c:	1d 82       	std	Y+5, r1	; 0x05
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de be       	out	0x3e, r13	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	fe be       	out	0x3e, r15	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	ed be       	out	0x3d, r14	; 61
     c96:	64 96       	adiw	r28, 0x14	; 20
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	08 95       	ret

00000cb4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	66 97       	sbiw	r28, 0x16	; 22
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	9c 8b       	std	Y+20, r25	; 0x14
     cd6:	8b 8b       	std	Y+19, r24	; 0x13
     cd8:	7e 8b       	std	Y+22, r23	; 0x16
     cda:	6d 8b       	std	Y+21, r22	; 0x15
	{
		receivedMessage = NULL;
	}
	
	return status;
     cdc:	ed b6       	in	r14, 0x3d	; 61
     cde:	fe b6       	in	r15, 0x3e	; 62
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
     ce0:	1a 82       	std	Y+2, r1	; 0x02
     ce2:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
     ce4:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
     ce6:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
     ce8:	1d 86       	std	Y+13, r1	; 0x0d
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
     cea:	1d c0       	rjmp	.+58     	; 0xd26 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x72>
	{
		firstSyncByte = secondSyncByte;
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
     cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf2:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte);
     cf4:	8b 89       	ldd	r24, Y+19	; 0x13
     cf6:	9c 89       	ldd	r25, Y+20	; 0x14
     cf8:	fc 01       	movw	r30, r24
     cfa:	80 81       	ld	r24, Z
     cfc:	91 81       	ldd	r25, Z+1	; 0x01
     cfe:	fc 01       	movw	r30, r24
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	08 96       	adiw	r24, 0x08	; 8
     d06:	fc 01       	movw	r30, r24
     d08:	20 81       	ld	r18, Z
     d0a:	31 81       	ldd	r19, Z+1	; 0x01
     d0c:	8b 89       	ldd	r24, Y+19	; 0x13
     d0e:	9c 89       	ldd	r25, Y+20	; 0x14
     d10:	fc 01       	movw	r30, r24
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	ae 01       	movw	r20, r28
     d18:	43 5f       	subi	r20, 0xF3	; 243
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	ba 01       	movw	r22, r20
     d1e:	f9 01       	movw	r30, r18
     d20:	19 95       	eicall
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
    byte thirdSyncByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	85 3b       	cpi	r24, 0xB5	; 181
     d2a:	31 f4       	brne	.+12     	; 0xd38 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	82 36       	cpi	r24, 0x62	; 98
     d30:	19 f4       	brne	.+6      	; 0xd38 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	87 3d       	cpi	r24, 0xD7	; 215
     d36:	31 f0       	breq	.+12     	; 0xd44 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	11 f4       	brne	.+4      	; 0xd44 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x92>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	88 23       	and	r24, r24
     d48:	89 f6       	brne	.-94     	; 0xcec <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x38>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receiveByte(thirdSyncByte);
	}
	
	if (status == 0)
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f0       	breq	.+2      	; 0xd54 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa0>
     d52:	f9 c0       	rjmp	.+498    	; 0xf46 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
     d54:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType);
     d56:	8b 89       	ldd	r24, Y+19	; 0x13
     d58:	9c 89       	ldd	r25, Y+20	; 0x14
     d5a:	fc 01       	movw	r30, r24
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	fc 01       	movw	r30, r24
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	08 96       	adiw	r24, 0x08	; 8
     d68:	fc 01       	movw	r30, r24
     d6a:	20 81       	ld	r18, Z
     d6c:	31 81       	ldd	r19, Z+1	; 0x01
     d6e:	8b 89       	ldd	r24, Y+19	; 0x13
     d70:	9c 89       	ldd	r25, Y+20	; 0x14
     d72:	fc 01       	movw	r30, r24
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	ae 01       	movw	r20, r28
     d7a:	42 5f       	subi	r20, 0xF2	; 242
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	ba 01       	movw	r22, r20
     d80:	f9 01       	movw	r30, r18
     d82:	19 95       	eicall
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	09 f0       	breq	.+2      	; 0xd92 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xde>
     d90:	da c0       	rjmp	.+436    	; 0xf46 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
		{
			int msgSize = 0;
     d92:	1e 82       	std	Y+6, r1	; 0x06
     d94:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
     d96:	8e 85       	ldd	r24, Y+14	; 0x0e
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	91 05       	cpc	r25, r1
     da0:	29 f4       	brne	.+10     	; 0xdac <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xf8>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
     da2:	8f e0       	ldi	r24, 0x0F	; 15
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9e 83       	std	Y+6, r25	; 0x06
     da8:	8d 83       	std	Y+5, r24	; 0x05
					break;
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x102>
				default:
					//unrecognized message type.
					status = -2;
     dac:	8e ef       	ldi	r24, 0xFE	; 254
     dae:	9f ef       	ldi	r25, 0xFF	; 255
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
					break;
     db4:	00 00       	nop
			}
			
			if (status == 0)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x10c>
     dbe:	c3 c0       	rjmp	.+390    	; 0xf46 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
     dc0:	8d b7       	in	r24, 0x3d	; 61
     dc2:	9e b7       	in	r25, 0x3e	; 62
     dc4:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	9a 87       	std	Y+10, r25	; 0x0a
     dce:	89 87       	std	Y+9, r24	; 0x09
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	2d b7       	in	r18, 0x3d	; 61
     dd4:	3e b7       	in	r19, 0x3e	; 62
     dd6:	28 1b       	sub	r18, r24
     dd8:	39 0b       	sbc	r19, r25
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	3e bf       	out	0x3e, r19	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	2d bf       	out	0x3d, r18	; 61
     de4:	8d b7       	in	r24, 0x3d	; 61
     de6:	9e b7       	in	r25, 0x3e	; 62
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	9c 87       	std	Y+12, r25	; 0x0c
     dec:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
     dee:	2e 85       	ldd	r18, Y+14	; 0x0e
     df0:	8b 85       	ldd	r24, Y+11	; 0x0b
     df2:	9c 85       	ldd	r25, Y+12	; 0x0c
     df4:	fc 01       	movw	r30, r24
     df6:	20 83       	st	Z, r18
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	8f 83       	std	Y+7, r24	; 0x07
     e00:	21 c0       	rjmp	.+66     	; 0xe44 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x190>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
     e02:	8b 89       	ldd	r24, Y+19	; 0x13
     e04:	9c 89       	ldd	r25, Y+20	; 0x14
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	fc 01       	movw	r30, r24
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	08 96       	adiw	r24, 0x08	; 8
     e14:	fc 01       	movw	r30, r24
     e16:	20 81       	ld	r18, Z
     e18:	31 81       	ldd	r19, Z+1	; 0x01
     e1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     e1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     e1e:	8f 81       	ldd	r24, Y+7	; 0x07
     e20:	98 85       	ldd	r25, Y+8	; 0x08
     e22:	48 0f       	add	r20, r24
     e24:	59 1f       	adc	r21, r25
     e26:	8b 89       	ldd	r24, Y+19	; 0x13
     e28:	9c 89       	ldd	r25, Y+20	; 0x14
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	ba 01       	movw	r22, r20
     e32:	f9 01       	movw	r30, r18
     e34:	19 95       	eicall
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	98 87       	std	Y+8, r25	; 0x08
     e42:	8f 83       	std	Y+7, r24	; 0x07
     e44:	2f 81       	ldd	r18, Y+7	; 0x07
     e46:	38 85       	ldd	r19, Y+8	; 0x08
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	28 17       	cp	r18, r24
     e4e:	39 07       	cpc	r19, r25
     e50:	34 f4       	brge	.+12     	; 0xe5e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	11 f4       	brne	.+4      	; 0xe5e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ac>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	88 23       	and	r24, r24
     e62:	79 f6       	brne	.-98     	; 0xe02 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x14e>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
				}
							
				if (status == 0)
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	09 f0       	breq	.+2      	; 0xe6e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ba>
     e6c:	67 c0       	rjmp	.+206    	; 0xf3c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
     e6e:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
     e70:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
     e72:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
     e74:	1a 8a       	std	Y+18, r1	; 0x12
								
					//Note: status is getting overwritten here.
					status = serialDriver->receiveByte(messageChecksumA);
     e76:	8b 89       	ldd	r24, Y+19	; 0x13
     e78:	9c 89       	ldd	r25, Y+20	; 0x14
     e7a:	fc 01       	movw	r30, r24
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	fc 01       	movw	r30, r24
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	08 96       	adiw	r24, 0x08	; 8
     e88:	fc 01       	movw	r30, r24
     e8a:	20 81       	ld	r18, Z
     e8c:	31 81       	ldd	r19, Z+1	; 0x01
     e8e:	8b 89       	ldd	r24, Y+19	; 0x13
     e90:	9c 89       	ldd	r25, Y+20	; 0x14
     e92:	fc 01       	movw	r30, r24
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	ae 01       	movw	r20, r28
     e9a:	41 5f       	subi	r20, 0xF1	; 241
     e9c:	5f 4f       	sbci	r21, 0xFF	; 255
     e9e:	ba 01       	movw	r22, r20
     ea0:	f9 01       	movw	r30, r18
     ea2:	19 95       	eicall
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB);
     ea8:	8b 89       	ldd	r24, Y+19	; 0x13
     eaa:	9c 89       	ldd	r25, Y+20	; 0x14
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	08 96       	adiw	r24, 0x08	; 8
     eba:	fc 01       	movw	r30, r24
     ebc:	20 81       	ld	r18, Z
     ebe:	31 81       	ldd	r19, Z+1	; 0x01
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	ae 01       	movw	r20, r28
     ecc:	40 5f       	subi	r20, 0xF0	; 240
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	ba 01       	movw	r22, r20
     ed2:	f9 01       	movw	r30, r18
     ed4:	19 95       	eicall
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
     eda:	6b 85       	ldd	r22, Y+11	; 0x0b
     edc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ede:	fe 01       	movw	r30, r28
     ee0:	72 96       	adiw	r30, 0x12	; 18
     ee2:	9e 01       	movw	r18, r28
     ee4:	2f 5e       	subi	r18, 0xEF	; 239
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	4d 81       	ldd	r20, Y+5	; 0x05
     eea:	5e 81       	ldd	r21, Y+6	; 0x06
     eec:	8b 89       	ldd	r24, Y+19	; 0x13
     eee:	9c 89       	ldd	r25, Y+20	; 0x14
     ef0:	8f 01       	movw	r16, r30
     ef2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
     ef6:	99 89       	ldd	r25, Y+17	; 0x11
     ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
     efa:	98 17       	cp	r25, r24
     efc:	d9 f4       	brne	.+54     	; 0xf34 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
     efe:	9a 89       	ldd	r25, Y+18	; 0x12
     f00:	88 89       	ldd	r24, Y+16	; 0x10
     f02:	98 17       	cp	r25, r24
     f04:	b9 f4       	brne	.+46     	; 0xf34 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
					{
						//build the message
						switch(msgType)
     f06:	8e 85       	ldd	r24, Y+14	; 0x0e
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	91 05       	cpc	r25, r1
     f10:	59 f4       	brne	.+22     	; 0xf28 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x274>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
     f12:	8b 85       	ldd	r24, Y+11	; 0x0b
     f14:	9c 85       	ldd	r25, Y+12	; 0x0c
     f16:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
     f1a:	9c 01       	movw	r18, r24
     f1c:	8d 89       	ldd	r24, Y+21	; 0x15
     f1e:	9e 89       	ldd	r25, Y+22	; 0x16
     f20:	fc 01       	movw	r30, r24
     f22:	31 83       	std	Z+1, r19	; 0x01
     f24:	20 83       	st	Z, r18
							break;
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x27e>
							default:
								//unrecognized message type.
								status = -2;
     f28:	8e ef       	ldi	r24, 0xFE	; 254
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
							break;
     f30:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
     f32:	04 c0       	rjmp	.+8      	; 0xf3c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -3;
     f34:	8d ef       	ldi	r24, 0xFD	; 253
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de be       	out	0x3e, r13	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	29 f0       	breq	.+10     	; 0xf58 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2a4>
	{
		receivedMessage = NULL;
     f4e:	8d 89       	ldd	r24, Y+21	; 0x15
     f50:	9e 89       	ldd	r25, Y+22	; 0x16
     f52:	fc 01       	movw	r30, r24
     f54:	11 82       	std	Z+1, r1	; 0x01
     f56:	10 82       	st	Z, r1
	}
	
	return status;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	fe be       	out	0x3e, r15	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	ed be       	out	0x3d, r14	; 61
     f66:	66 96       	adiw	r28, 0x16	; 22
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	cf 90       	pop	r12
     f82:	08 95       	ret

00000f84 <_ZN10helicopter8messages7MessageD1Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	1f 92       	push	r1
     f8a:	1f 92       	push	r1
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
				{
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	26 e2       	ldi	r18, 0x26	; 38
     f9a:	32 e0       	ldi	r19, 0x02	; 2
     f9c:	fc 01       	movw	r30, r24
     f9e:	31 83       	std	Z+1, r19	; 0x01
     fa0:	20 83       	st	Z, r18
					
				}
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	99 27       	eor	r25, r25
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	21 f0       	breq	.+8      	; 0xfb6 <_ZN10helicopter8messages7MessageD1Ev+0x32>
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	1f 92       	push	r1
     fc6:	1f 92       	push	r1
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN10helicopter8messages7MessageD1Ev>
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	1f 92       	push	r1
     ff0:	1f 92       	push	r1
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
	return msgSize;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	fc 01       	movw	r30, r24
    1000:	83 81       	ldd	r24, Z+3	; 0x03
    1002:	94 81       	ldd	r25, Z+4	; 0x04
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <_ZN10helicopter8messages7Message8getBytesEv>:
				
/**
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	1f 92       	push	r1
    1014:	1f 92       	push	r1
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
	return NULL;
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	00 d0       	rcall	.+0      	; 0x1032 <_ZN10helicopter8messages7Message12buildMessageEPh+0x6>
    1032:	1f 92       	push	r1
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	7c 83       	std	Y+4, r23	; 0x04
    103e:	6b 83       	std	Y+3, r22	; 0x03
	//noop. subclass should implement this.
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <_ZN10helicopter8messages7MessageC1Ehi>:
			
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	00 d0       	rcall	.+0      	; 0x1054 <_ZN10helicopter8messages7MessageC1Ehi+0x6>
    1054:	1f 92       	push	r1
    1056:	1f 92       	push	r1
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6b 83       	std	Y+3, r22	; 0x03
    1062:	5d 83       	std	Y+5, r21	; 0x05
    1064:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	26 e2       	ldi	r18, 0x26	; 38
    106c:	32 e0       	ldi	r19, 0x02	; 2
    106e:	fc 01       	movw	r30, r24
    1070:	31 83       	std	Z+1, r19	; 0x01
    1072:	20 83       	st	Z, r18
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	2b 81       	ldd	r18, Y+3	; 0x03
    107a:	fc 01       	movw	r30, r24
    107c:	22 83       	std	Z+2, r18	; 0x02
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	fc 01       	movw	r30, r24
    1088:	34 83       	std	Z+4, r19	; 0x04
    108a:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	1f 92       	push	r1
    10a2:	1f 92       	push	r1
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	41 e0       	ldi	r20, 0x01	; 1
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	63 e0       	ldi	r22, 0x03	; 3
    10b6:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN10helicopter8messages7MessageC1Ehi>
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	22 e3       	ldi	r18, 0x32	; 50
    10c0:	32 e0       	ldi	r19, 0x02	; 2
    10c2:	fc 01       	movw	r30, r24
    10c4:	31 83       	std	Z+1, r19	; 0x01
    10c6:	20 83       	st	Z, r18
				{
								
				}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <_ZN10helicopter8messages11SyncMessageD1Ev>:
				
				~SyncMessage()
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	1f 92       	push	r1
    10d8:	1f 92       	push	r1
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
				{
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	22 e3       	ldi	r18, 0x32	; 50
    10e8:	32 e0       	ldi	r19, 0x02	; 2
    10ea:	fc 01       	movw	r30, r24
    10ec:	31 83       	std	Z+1, r19	; 0x01
    10ee:	20 83       	st	Z, r18
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN10helicopter8messages7MessageD1Ev>
					
				}
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	99 27       	eor	r25, r25
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	21 f0       	breq	.+8      	; 0x110c <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <_ZN10helicopter8messages11SyncMessageD0Ev>:
				SyncMessage(): Message(MessageType,MessageSize)
				{
								
				}
				
				~SyncMessage()
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	1f 92       	push	r1
    111c:	1f 92       	push	r1
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN10helicopter8messages11SyncMessageD1Ev>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	00 d0       	rcall	.+0      	; 0x1146 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_Znaj>
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	fc 01       	movw	r30, r24
    116a:	22 81       	ldd	r18, Z+2	; 0x02
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
	
	return msg;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1178:	26 96       	adiw	r28, 0x06	; 6
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:

void SyncMessage::buildMessage(byte *message)
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	00 d0       	rcall	.+0      	; 0x1190 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x6>
    1190:	1f 92       	push	r1
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	7c 83       	std	Y+4, r23	; 0x04
    119c:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	41 f0       	breq	.+16     	; 0x11b6 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x2c>
	{
		msgType = message[0];
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 81       	ld	r18, Z
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	fc 01       	movw	r30, r24
    11b4:	22 83       	std	Z+2, r18	; 0x02
	}
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <_ZN10helicopter8messages7Message6encodeERPhRi>:
				
				/**
				 * Mem copies the value into the buffer pointer then increments
				 * the pointer location by the size of the value copied.
				 */
				void encode (byte *&buffPtr, int &val)
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <_ZN10helicopter8messages7Message6encodeERPhRi+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <_ZN10helicopter8messages7Message6encodeERPhRi+0x8>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	7c 83       	std	Y+4, r23	; 0x04
    11d6:	6b 83       	std	Y+3, r22	; 0x03
    11d8:	5e 83       	std	Y+6, r21	; 0x06
    11da:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	fc 01       	movw	r30, r24
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	2d 81       	ldd	r18, Y+5	; 0x05
    11e8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ea:	42 e0       	ldi	r20, 0x02	; 2
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	b9 01       	movw	r22, r18
    11f0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <memcpy>
					buffPtr += sizeof(val);
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	fc 01       	movw	r30, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	9c 01       	movw	r18, r24
    1200:	2e 5f       	subi	r18, 0xFE	; 254
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	fc 01       	movw	r30, r24
    120a:	31 83       	std	Z+1, r19	; 0x01
    120c:	20 83       	st	Z, r18
				}
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <_ZN10helicopter8messages7Message6encodeERPhRh>:
				
				void encode (byte *&buffPtr, byte &val)
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <_ZN10helicopter8messages7Message6encodeERPhRh+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <_ZN10helicopter8messages7Message6encodeERPhRh+0x8>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	7c 83       	std	Y+4, r23	; 0x04
    1232:	6b 83       	std	Y+3, r22	; 0x03
    1234:	5e 83       	std	Y+6, r21	; 0x06
    1236:	4d 83       	std	Y+5, r20	; 0x05
				{
					*buffPtr = val;
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	fc 01       	movw	r30, r24
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	2d 81       	ldd	r18, Y+5	; 0x05
    1244:	3e 81       	ldd	r19, Y+6	; 0x06
    1246:	f9 01       	movw	r30, r18
    1248:	20 81       	ld	r18, Z
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	fc 01       	movw	r30, r24
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	9c 01       	movw	r18, r24
    125a:	2f 5f       	subi	r18, 0xFF	; 255
    125c:	3f 4f       	sbci	r19, 0xFF	; 255
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	fc 01       	movw	r30, r24
    1264:	31 83       	std	Z+1, r19	; 0x01
    1266:	20 83       	st	Z, r18
				}
    1268:	26 96       	adiw	r28, 0x06	; 6
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <_ZN10helicopter8messages7Message6decodeERPhRh>:
				
				/**
				 * Copies the the value at the buff pointer location into the given val parameter and
				 * increments the buffer by the sizeof(val)
				 */
				void decode (byte *&buffPtr, byte &val)
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	00 d0       	rcall	.+0      	; 0x1280 <_ZN10helicopter8messages7Message6decodeERPhRh+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <_ZN10helicopter8messages7Message6decodeERPhRh+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	7c 83       	std	Y+4, r23	; 0x04
    128c:	6b 83       	std	Y+3, r22	; 0x03
    128e:	5e 83       	std	Y+6, r21	; 0x06
    1290:	4d 83       	std	Y+5, r20	; 0x05
				{
					val = *buffPtr;
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	fc 01       	movw	r30, r24
    1298:	80 81       	ld	r24, Z
    129a:	91 81       	ldd	r25, Z+1	; 0x01
    129c:	fc 01       	movw	r30, r24
    129e:	20 81       	ld	r18, Z
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	fc 01       	movw	r30, r24
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	9c 01       	movw	r18, r24
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	fc 01       	movw	r30, r24
    12be:	31 83       	std	Z+1, r19	; 0x01
    12c0:	20 83       	st	Z, r18
				}
    12c2:	26 96       	adiw	r28, 0x06	; 6
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <_ZN10helicopter8messages7Message6decodeERPhRi>:
				
				void decode (byte *&buffPtr, int &val)
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	00 d0       	rcall	.+0      	; 0x12da <_ZN10helicopter8messages7Message6decodeERPhRi+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <_ZN10helicopter8messages7Message6decodeERPhRi+0x8>
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	7c 83       	std	Y+4, r23	; 0x04
    12e6:	6b 83       	std	Y+3, r22	; 0x03
    12e8:	5e 83       	std	Y+6, r21	; 0x06
    12ea:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 81       	ld	r18, Z
    12f4:	31 81       	ldd	r19, Z+1	; 0x01
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	42 e0       	ldi	r20, 0x02	; 2
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	b9 01       	movw	r22, r18
    1300:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <memcpy>
					buffPtr += sizeof(val);
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	fc 01       	movw	r30, r24
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	9c 01       	movw	r18, r24
    1310:	2e 5f       	subi	r18, 0xFE	; 254
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	fc 01       	movw	r30, r24
    131a:	31 83       	std	Z+1, r19	; 0x01
    131c:	20 83       	st	Z, r18
				}
    131e:	26 96       	adiw	r28, 0x06	; 6
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(magYaw) +
				sizeof(timeouts) + 
				sizeof(unrecognizedMsgTypes) + 
				sizeof(checksumErrors);
			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	1f 92       	push	r1
    1336:	1f 92       	push	r1
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
					magY(0),
					magZ(0),
					magYaw(0),
					timeouts(0),
					unrecognizedMsgTypes(0),
					checksumErrors(0)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	4f e0       	ldi	r20, 0x0F	; 15
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	62 e0       	ldi	r22, 0x02	; 2
    134a:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN10helicopter8messages7MessageC1Ehi>
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	2e e3       	ldi	r18, 0x3E	; 62
    1354:	32 e0       	ldi	r19, 0x02	; 2
    1356:	fc 01       	movw	r30, r24
    1358:	31 83       	std	Z+1, r19	; 0x01
    135a:	20 83       	st	Z, r18
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	fc 01       	movw	r30, r24
    1362:	16 82       	std	Z+6, r1	; 0x06
    1364:	15 82       	std	Z+5, r1	; 0x05
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	fc 01       	movw	r30, r24
    136c:	10 86       	std	Z+8, r1	; 0x08
    136e:	17 82       	std	Z+7, r1	; 0x07
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	fc 01       	movw	r30, r24
    1376:	12 86       	std	Z+10, r1	; 0x0a
    1378:	11 86       	std	Z+9, r1	; 0x09
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	fc 01       	movw	r30, r24
    1380:	14 86       	std	Z+12, r1	; 0x0c
    1382:	13 86       	std	Z+11, r1	; 0x0b
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	fc 01       	movw	r30, r24
    138a:	16 86       	std	Z+14, r1	; 0x0e
    138c:	15 86       	std	Z+13, r1	; 0x0d
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	fc 01       	movw	r30, r24
    1394:	10 8a       	std	Z+16, r1	; 0x10
    1396:	17 86       	std	Z+15, r1	; 0x0f
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	fc 01       	movw	r30, r24
    139e:	12 8a       	std	Z+18, r1	; 0x12
    13a0:	11 8a       	std	Z+17, r1	; 0x11
				{
				
				}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	1f 92       	push	r1
    13b2:	1f 92       	push	r1
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	2e e3       	ldi	r18, 0x3E	; 62
    13c2:	32 e0       	ldi	r19, 0x02	; 2
    13c4:	fc 01       	movw	r30, r24
    13c6:	31 83       	std	Z+1, r19	; 0x01
    13c8:	20 83       	st	Z, r18
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN10helicopter8messages7MessageD1Ev>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	99 27       	eor	r25, r25
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	21 f0       	breq	.+8      	; 0x13e6 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	1f 92       	push	r1
    13f6:	1f 92       	push	r1
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	00 d0       	rcall	.+0      	; 0x1420 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    142a:	8f e0       	ldi	r24, 0x0F	; 15
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_Znaj>
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	8b 83       	std	Y+3, r24	; 0x03
	
	encode (msgPtr, msgType);
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	ac 01       	movw	r20, r24
    1444:	4e 5f       	subi	r20, 0xFE	; 254
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	9e 01       	movw	r18, r28
    144e:	2d 5f       	subi	r18, 0xFD	; 253
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	b9 01       	movw	r22, r18
    1454:	0e 94 10 09 	call	0x1220	; 0x1220 <_ZN10helicopter8messages7Message6encodeERPhRh>
	encode (msgPtr, magX);
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	ac 01       	movw	r20, r24
    145e:	4b 5f       	subi	r20, 0xFB	; 251
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	9e 01       	movw	r18, r28
    1468:	2d 5f       	subi	r18, 0xFD	; 253
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	b9 01       	movw	r22, r18
    146e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, magY);
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	ac 01       	movw	r20, r24
    1478:	49 5f       	subi	r20, 0xF9	; 249
    147a:	5f 4f       	sbci	r21, 0xFF	; 255
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	9e 01       	movw	r18, r28
    1482:	2d 5f       	subi	r18, 0xFD	; 253
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	b9 01       	movw	r22, r18
    1488:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, magZ);
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	ac 01       	movw	r20, r24
    1492:	47 5f       	subi	r20, 0xF7	; 247
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	9e 01       	movw	r18, r28
    149c:	2d 5f       	subi	r18, 0xFD	; 253
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	b9 01       	movw	r22, r18
    14a2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, magYaw);
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	ac 01       	movw	r20, r24
    14ac:	45 5f       	subi	r20, 0xF5	; 245
    14ae:	5f 4f       	sbci	r21, 0xFF	; 255
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	9e 01       	movw	r18, r28
    14b6:	2d 5f       	subi	r18, 0xFD	; 253
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	b9 01       	movw	r22, r18
    14bc:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, timeouts);
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	ac 01       	movw	r20, r24
    14c6:	43 5f       	subi	r20, 0xF3	; 243
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	9e 01       	movw	r18, r28
    14d0:	2d 5f       	subi	r18, 0xFD	; 253
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	b9 01       	movw	r22, r18
    14d6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, unrecognizedMsgTypes);
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	ac 01       	movw	r20, r24
    14e0:	41 5f       	subi	r20, 0xF1	; 241
    14e2:	5f 4f       	sbci	r21, 0xFF	; 255
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	9e 01       	movw	r18, r28
    14ea:	2d 5f       	subi	r18, 0xFD	; 253
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	b9 01       	movw	r22, r18
    14f0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, checksumErrors);
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	ac 01       	movw	r20, r24
    14fa:	4f 5e       	subi	r20, 0xEF	; 239
    14fc:	5f 4f       	sbci	r21, 0xFF	; 255
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	9e 01       	movw	r18, r28
    1504:	2d 5f       	subi	r18, 0xFD	; 253
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	b9 01       	movw	r22, r18
    150a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN10helicopter8messages7Message6encodeERPhRi>
	
	msgPtr += sizeof(unrecognizedMsgTypes);
	memcpy(msgPtr, &checksumErrors, sizeof(checksumErrors));
	*/
				
	return msg;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1512:	26 96       	adiw	r28, 0x06	; 6
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	00 d0       	rcall	.+0      	; 0x152a <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x6>
    152a:	1f 92       	push	r1
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	7c 83       	std	Y+4, r23	; 0x04
    1536:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	09 f4       	brne	.+2      	; 0x1542 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1e>
    1540:	68 c0       	rjmp	.+208    	; 0x1612 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0xee>
	{
		decode (message,msgType);
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	ac 01       	movw	r20, r24
    1548:	4e 5f       	subi	r20, 0xFE	; 254
    154a:	5f 4f       	sbci	r21, 0xFF	; 255
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	9e 01       	movw	r18, r28
    1552:	2d 5f       	subi	r18, 0xFD	; 253
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	b9 01       	movw	r22, r18
    1558:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN10helicopter8messages7Message6decodeERPhRh>
		decode (message,magX);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	ac 01       	movw	r20, r24
    1562:	4b 5f       	subi	r20, 0xFB	; 251
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	9e 01       	movw	r18, r28
    156c:	2d 5f       	subi	r18, 0xFD	; 253
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	b9 01       	movw	r22, r18
    1572:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,magY);
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	ac 01       	movw	r20, r24
    157c:	49 5f       	subi	r20, 0xF9	; 249
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	9e 01       	movw	r18, r28
    1586:	2d 5f       	subi	r18, 0xFD	; 253
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	b9 01       	movw	r22, r18
    158c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,magZ);
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	ac 01       	movw	r20, r24
    1596:	47 5f       	subi	r20, 0xF7	; 247
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	9e 01       	movw	r18, r28
    15a0:	2d 5f       	subi	r18, 0xFD	; 253
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	b9 01       	movw	r22, r18
    15a6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,magYaw);
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	ac 01       	movw	r20, r24
    15b0:	45 5f       	subi	r20, 0xF5	; 245
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	9e 01       	movw	r18, r28
    15ba:	2d 5f       	subi	r18, 0xFD	; 253
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	b9 01       	movw	r22, r18
    15c0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,timeouts);
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	ac 01       	movw	r20, r24
    15ca:	43 5f       	subi	r20, 0xF3	; 243
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	9e 01       	movw	r18, r28
    15d4:	2d 5f       	subi	r18, 0xFD	; 253
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	b9 01       	movw	r22, r18
    15da:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,unrecognizedMsgTypes);
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	ac 01       	movw	r20, r24
    15e4:	41 5f       	subi	r20, 0xF1	; 241
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	9e 01       	movw	r18, r28
    15ee:	2d 5f       	subi	r18, 0xFD	; 253
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	b9 01       	movw	r22, r18
    15f4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,checksumErrors);
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	ac 01       	movw	r20, r24
    15fe:	4f 5e       	subi	r20, 0xEF	; 239
    1600:	5f 4f       	sbci	r21, 0xFF	; 255
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	9e 01       	movw	r18, r28
    1608:	2d 5f       	subi	r18, 0xFD	; 253
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	b9 01       	movw	r22, r18
    160e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN10helicopter8messages7Message6decodeERPhRi>
		
		message += sizeof(unrecognizedMsgTypes);
		memcpy(&checksumErrors, message, sizeof(checksumErrors));
		*/
	}
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	00 d0       	rcall	.+0      	; 0x162a <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh+0xa>
    162a:	1f 92       	push	r1
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    1634:	83 e1       	ldi	r24, 0x13	; 19
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
    163c:	8c 01       	movw	r16, r24
    163e:	c8 01       	movw	r24, r16
    1640:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    1644:	1a 83       	std	Y+2, r17	; 0x02
    1646:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	fc 01       	movw	r30, r24
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	06 96       	adiw	r24, 0x06	; 6
    1654:	fc 01       	movw	r30, r24
    1656:	20 81       	ld	r18, Z
    1658:	31 81       	ldd	r19, Z+1	; 0x01
    165a:	4b 81       	ldd	r20, Y+3	; 0x03
    165c:	5c 81       	ldd	r21, Y+4	; 0x04
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	ba 01       	movw	r22, r20
    1664:	f9 01       	movw	r30, r18
    1666:	19 95       	eicall
	
	return msg;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>:
				/**
				 * Magnetic heading variables in the x y and z directions.
				 */
				
				int MagX() const { return magX; }
				void MagX(int val) { magX = val; }
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	00 d0       	rcall	.+0      	; 0x1684 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi+0x6>
    1684:	1f 92       	push	r1
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	7c 83       	std	Y+4, r23	; 0x04
    1690:	6b 83       	std	Y+3, r22	; 0x03
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	2b 81       	ldd	r18, Y+3	; 0x03
    1698:	3c 81       	ldd	r19, Y+4	; 0x04
    169a:	fc 01       	movw	r30, r24
    169c:	36 83       	std	Z+6, r19	; 0x06
    169e:	25 83       	std	Z+5, r18	; 0x05
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>:
			
				int MagY() const { return magY; }
				void MagY(int val) { magY = val; }
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi+0x6>
    16b4:	1f 92       	push	r1
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	7c 83       	std	Y+4, r23	; 0x04
    16c0:	6b 83       	std	Y+3, r22	; 0x03
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	fc 01       	movw	r30, r24
    16cc:	30 87       	std	Z+8, r19	; 0x08
    16ce:	27 83       	std	Z+7, r18	; 0x07
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>:
			
				int MagZ() const { return magZ; }
				void MagZ(int val) { magZ = val; }
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi+0x6>
    16e4:	1f 92       	push	r1
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	7c 83       	std	Y+4, r23	; 0x04
    16f0:	6b 83       	std	Y+3, r22	; 0x03
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	fc 01       	movw	r30, r24
    16fc:	32 87       	std	Z+10, r19	; 0x0a
    16fe:	21 87       	std	Z+9, r18	; 0x09
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <_ZN10helicopter8messages22SystemTelemetryMessage6MagYawEi>:
					
				int MagYaw() const { return magYaw; }
				void MagYaw(int val) { magYaw = val; }
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	00 d0       	rcall	.+0      	; 0x1714 <_ZN10helicopter8messages22SystemTelemetryMessage6MagYawEi+0x6>
    1714:	1f 92       	push	r1
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	7c 83       	std	Y+4, r23	; 0x04
    1720:	6b 83       	std	Y+3, r22	; 0x03
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	fc 01       	movw	r30, r24
    172c:	34 87       	std	Z+12, r19	; 0x0c
    172e:	23 87       	std	Z+11, r18	; 0x0b
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi>:
					
					
				int Timeouts() const {return timeouts; }
				void Timeouts(int val) { timeouts = val; }
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	00 d0       	rcall	.+0      	; 0x1744 <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi+0x6>
    1744:	1f 92       	push	r1
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	7c 83       	std	Y+4, r23	; 0x04
    1750:	6b 83       	std	Y+3, r22	; 0x03
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	fc 01       	movw	r30, r24
    175c:	36 87       	std	Z+14, r19	; 0x0e
    175e:	25 87       	std	Z+13, r18	; 0x0d
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi>:
				
				int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
				void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	00 d0       	rcall	.+0      	; 0x1774 <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi+0x6>
    1774:	1f 92       	push	r1
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	9a 83       	std	Y+2, r25	; 0x02
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	7c 83       	std	Y+4, r23	; 0x04
    1780:	6b 83       	std	Y+3, r22	; 0x03
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	fc 01       	movw	r30, r24
    178c:	30 8b       	std	Z+16, r19	; 0x10
    178e:	27 87       	std	Z+15, r18	; 0x0f
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi>:
				
				int ChecksumErrors() const {return checksumErrors; }
				void ChecksumErrors(int val) { checksumErrors = val; }
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi+0x6>
    17a4:	1f 92       	push	r1
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	7c 83       	std	Y+4, r23	; 0x04
    17b0:	6b 83       	std	Y+3, r22	; 0x03
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	fc 01       	movw	r30, r24
    17bc:	32 8b       	std	Z+18, r19	; 0x12
    17be:	21 8b       	std	Z+17, r18	; 0x11
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <_ZNK10helicopter5model11SystemModel7RawMagXEv>:
			 * X axis is left out of the FC
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			
			int RawMagX() const { return rawMagX; }
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	1f 92       	push	r1
    17d4:	1f 92       	push	r1
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	fc 01       	movw	r30, r24
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <_ZNK10helicopter5model11SystemModel7RawMagYEv>:
			void RawMagX(int val) { rawMagX = val; }
			
			int RawMagY() const { return rawMagY; }
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	1f 92       	push	r1
    17f8:	1f 92       	push	r1
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	fc 01       	movw	r30, r24
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <_ZNK10helicopter5model11SystemModel7RawMagZEv>:
			void RawMagY(int val) { rawMagY = val; }
			
			int RawMagZ() const { return rawMagZ; }
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	1f 92       	push	r1
    181c:	1f 92       	push	r1
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	fc 01       	movw	r30, r24
    182c:	84 81       	ldd	r24, Z+4	; 0x04
    182e:	95 81       	ldd	r25, Z+5	; 0x05
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <_ZNK10helicopter5model11SystemModel6MagYawEv>:
			void RawMagZ(int val) { rawMagZ = val; }
				

			int MagYaw() const { return magYaw; }
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	1f 92       	push	r1
    1840:	1f 92       	push	r1
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	fc 01       	movw	r30, r24
    1850:	86 81       	ldd	r24, Z+6	; 0x06
    1852:	97 81       	ldd	r25, Z+7	; 0x07
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <_ZNK10helicopter5model11SystemModel8TimeoutsEv>:
			void MagYaw(int val) { magYaw = val; }				
						
			int Timeouts() const {return timeouts; }
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	1f 92       	push	r1
    1864:	1f 92       	push	r1
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	9a 83       	std	Y+2, r25	; 0x02
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	fc 01       	movw	r30, r24
    1874:	80 85       	ldd	r24, Z+8	; 0x08
    1876:	91 85       	ldd	r25, Z+9	; 0x09
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>:
			void Timeouts(int val) { timeouts = val; }
			
			int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	1f 92       	push	r1
    1888:	1f 92       	push	r1
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	fc 01       	movw	r30, r24
    1898:	82 85       	ldd	r24, Z+10	; 0x0a
    189a:	93 85       	ldd	r25, Z+11	; 0x0b
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>:
			void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
			
			int ChecksumErrors() const {return checksumErrors; }
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	1f 92       	push	r1
    18ac:	1f 92       	push	r1
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	fc 01       	movw	r30, r24
    18bc:	84 85       	ldd	r24, Z+12	; 0x0c
    18be:	95 85       	ldd	r25, Z+13	; 0x0d
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>:

using namespace helicopter::model;


SystemTelemetryMessage *SystemModel::CreateTelemetryMessage()
{
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv+0xa>
    18d4:	1f 92       	push	r1
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	9c 83       	std	Y+4, r25	; 0x04
    18dc:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    18de:	83 e1       	ldi	r24, 0x13	; 19
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
    18e6:	8c 01       	movw	r16, r24
    18e8:	c8 01       	movw	r24, r16
    18ea:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    18ee:	1a 83       	std	Y+2, r17	; 0x02
    18f0:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagX(RawMagX());
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZNK10helicopter5model11SystemModel7RawMagXEv>
    18fa:	9c 01       	movw	r18, r24
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	b9 01       	movw	r22, r18
    1902:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>
	message->MagY(RawMagY());
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZNK10helicopter5model11SystemModel7RawMagYEv>
    190e:	9c 01       	movw	r18, r24
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	b9 01       	movw	r22, r18
    1916:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>
	message->MagZ(RawMagZ());
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <_ZNK10helicopter5model11SystemModel7RawMagZEv>
    1922:	9c 01       	movw	r18, r24
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	b9 01       	movw	r22, r18
    192a:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>
	message->MagYaw(MagYaw());
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZNK10helicopter5model11SystemModel6MagYawEv>
    1936:	9c 01       	movw	r18, r24
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	b9 01       	movw	r22, r18
    193e:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZN10helicopter8messages22SystemTelemetryMessage6MagYawEi>
	message->ChecksumErrors(ChecksumErrors());
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    194a:	9c 01       	movw	r18, r24
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	b9 01       	movw	r22, r18
    1952:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi>
	message->Timeouts(Timeouts());
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    195e:	9c 01       	movw	r18, r24
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	b9 01       	movw	r22, r18
    1966:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi>
	message->UnrecognizedMsgTypes(UnrecognizedMsgTypes());
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    1972:	9c 01       	movw	r18, r24
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	b9 01       	movw	r22, r18
    197a:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi>
	
	return message;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	08 95       	ret

00001994 <_ZN10helicopter5tasks4Task8getDelayEv>:
				 * subclasses runTaskImpl to execute the actual task logic.
				 */
				virtual void runTask();
				
					
				int getDelay()
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	1f 92       	push	r1
    199a:	1f 92       	push	r1
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	fc 01       	movw	r30, r24
    19aa:	82 81       	ldd	r24, Z+2	; 0x02
    19ac:	93 81       	ldd	r25, Z+3	; 0x03
				}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	08 95       	ret

000019b8 <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	1f 92       	push	r1
    19be:	1f 92       	push	r1
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	fc 01       	movw	r30, r24
    19ce:	84 81       	ldd	r24, Z+4	; 0x04
    19d0:	95 81       	ldd	r25, Z+5	; 0x05
				}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    19e2:	1f 92       	push	r1
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	7c 83       	std	Y+4, r23	; 0x04
    19ee:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	2b 81       	ldd	r18, Y+3	; 0x03
    19f6:	3c 81       	ldd	r19, Y+4	; 0x04
    19f8:	fc 01       	movw	r30, r24
    19fa:	33 83       	std	Z+3, r19	; 0x03
    19fc:	22 83       	std	Z+2, r18	; 0x02
				}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	1f 92       	push	r1
    1a12:	1f 92       	push	r1
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	fc 01       	movw	r30, r24
    1a22:	86 81       	ldd	r24, Z+6	; 0x06
				}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	2b 81       	ldd	r18, Y+3	; 0x03
    1a44:	fc 01       	movw	r30, r24
    1a46:	26 83       	std	Z+6, r18	; 0x06
				}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	08 95       	ret

00001a54 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	1f 92       	push	r1
    1a5a:	1f 92       	push	r1
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	fc 01       	movw	r30, r24
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	9c 01       	movw	r18, r24
    1a70:	21 50       	subi	r18, 0x01	; 1
    1a72:	31 09       	sbc	r19, r1
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	fc 01       	movw	r30, r24
    1a7a:	33 83       	std	Z+3, r19	; 0x03
    1a7c:	22 83       	std	Z+2, r18	; 0x02
				}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for determining which tasks are ready to run.
				*/
				void start();
				
				int getNumOfTasks()
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	1f 92       	push	r1
    1a8e:	1f 92       	push	r1
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	84 89       	ldd	r24, Z+20	; 0x14
    1aa0:	95 89       	ldd	r25, Z+21	; 0x15
				}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	1f 92       	push	r1
    1ab2:	1f 92       	push	r1
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	08 95       	ret

00001aca <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    1ada:	80 91 70 02 	lds	r24, 0x0270
    1ade:	90 91 71 02 	lds	r25, 0x0271
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	a1 f4       	brne	.+40     	; 0x1b0e <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x44>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    1ae6:	8a e1       	ldi	r24, 0x1A	; 26
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Znwj>
    1aee:	7c 01       	movw	r14, r24
    1af0:	08 ec       	ldi	r16, 0xC8	; 200
    1af2:	10 e0       	ldi	r17, 0x00	; 0
    1af4:	20 e4       	ldi	r18, 0x40	; 64
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	54 e2       	ldi	r21, 0x24	; 36
    1afc:	64 ef       	ldi	r22, 0xF4	; 244
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	c7 01       	movw	r24, r14
    1b02:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    1b06:	f0 92 71 02 	sts	0x0271, r15
    1b0a:	e0 92 70 02 	sts	0x0270, r14
	}

	return scheduler;
    1b0e:	80 91 70 02 	lds	r24, 0x0270
    1b12:	90 91 71 02 	lds	r25, 0x0271
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	08 95       	ret

00001b24 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	2a 97       	sbiw	r28, 0x0a	; 10
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	4b 83       	std	Y+3, r20	; 0x03
    1b42:	5c 83       	std	Y+4, r21	; 0x04
    1b44:	6d 83       	std	Y+5, r22	; 0x05
    1b46:	7e 83       	std	Y+6, r23	; 0x06
    1b48:	38 87       	std	Y+8, r19	; 0x08
    1b4a:	2f 83       	std	Y+7, r18	; 0x07
    1b4c:	1a 87       	std	Y+10, r17	; 0x0a
    1b4e:	09 87       	std	Y+9, r16	; 0x09
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    1b50:	8f 81       	ldd	r24, Y+7	; 0x07
    1b52:	98 85       	ldd	r25, Y+8	; 0x08
    1b54:	9c 01       	movw	r18, r24
    1b56:	44 27       	eor	r20, r20
    1b58:	37 fd       	sbrc	r19, 7
    1b5a:	40 95       	com	r20
    1b5c:	54 2f       	mov	r21, r20
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	ad 81       	ldd	r26, Y+5	; 0x05
    1b64:	be 81       	ldd	r27, Y+6	; 0x06
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    1b6e:	da 01       	movw	r26, r20
    1b70:	c9 01       	movw	r24, r18
    1b72:	29 85       	ldd	r18, Y+9	; 0x09
    1b74:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b76:	44 27       	eor	r20, r20
    1b78:	37 fd       	sbrc	r19, 7
    1b7a:	40 95       	com	r20
    1b7c:	54 2f       	mov	r21, r20
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    1b86:	da 01       	movw	r26, r20
    1b88:	c9 01       	movw	r24, r18
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	fc 01       	movw	r30, r24
    1b92:	37 8b       	std	Z+23, r19	; 0x17
    1b94:	26 8b       	std	Z+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	26 89       	ldd	r18, Z+22	; 0x16
    1b9e:	37 89       	ldd	r19, Z+23	; 0x17
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	37 8b       	std	Z+23, r19	; 0x17
    1ba8:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescaler;
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb0:	38 85       	ldd	r19, Y+8	; 0x08
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	31 8f       	std	Z+25, r19	; 0x19
    1bb6:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	15 8a       	std	Z+21, r1	; 0x15
    1bc0:	14 8a       	std	Z+20, r1	; 0x14
}
    1bc2:	2a 96       	adiw	r28, 0x0a	; 10
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	08 95       	ret

00001bd8 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    1bde:	1f 92       	push	r1
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	7c 83       	std	Y+4, r23	; 0x04
    1bea:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	84 89       	ldd	r24, Z+20	; 0x14
    1bf4:	95 89       	ldd	r25, Z+21	; 0x15
    1bf6:	8a 30       	cpi	r24, 0x0A	; 10
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	04 f5       	brge	.+64     	; 0x1c3c <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	fc 01       	movw	r30, r24
    1c02:	84 89       	ldd	r24, Z+20	; 0x14
    1c04:	95 89       	ldd	r25, Z+21	; 0x15
    1c06:	29 81       	ldd	r18, Y+1	; 0x01
    1c08:	3a 81       	ldd	r19, Y+2	; 0x02
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	fc 01       	movw	r30, r24
    1c18:	31 83       	std	Z+1, r19	; 0x01
    1c1a:	20 83       	st	Z, r18
		numOfTasks++;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	fc 01       	movw	r30, r24
    1c22:	84 89       	ldd	r24, Z+20	; 0x14
    1c24:	95 89       	ldd	r25, Z+21	; 0x15
    1c26:	9c 01       	movw	r18, r24
    1c28:	2f 5f       	subi	r18, 0xFF	; 255
    1c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	fc 01       	movw	r30, r24
    1c32:	35 8b       	std	Z+21, r19	; 0x15
    1c34:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	9f ef       	ldi	r25, 0xFF	; 255
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    1c54:	1f 92       	push	r1
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    1c5e:	1a 82       	std	Y+2, r1	; 0x02
    1c60:	19 82       	std	Y+1, r1	; 0x01
    1c62:	24 c0       	rjmp	.+72     	; 0x1cac <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	82 0f       	add	r24, r18
    1c72:	93 1f       	adc	r25, r19
    1c74:	fc 01       	movw	r30, r24
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	06 96       	adiw	r24, 0x06	; 6
    1c82:	fc 01       	movw	r30, r24
    1c84:	20 81       	ld	r18, Z
    1c86:	31 81       	ldd	r19, Z+1	; 0x01
    1c88:	4b 81       	ldd	r20, Y+3	; 0x03
    1c8a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	84 0f       	add	r24, r20
    1c96:	95 1f       	adc	r25, r21
    1c98:	fc 01       	movw	r30, r24
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	f9 01       	movw	r30, r18
    1ca0:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	24 89       	ldd	r18, Z+20	; 0x14
    1cb4:	35 89       	ldd	r19, Z+21	; 0x15
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	82 17       	cp	r24, r18
    1cbe:	93 07       	cpc	r25, r19
    1cc0:	0c f0       	brlt	.+2      	; 0x1cc4 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	44 23       	and	r20, r20
    1cc6:	71 f6       	brne	.-100    	; 0x1c64 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    1cc8:	88 e8       	ldi	r24, 0x88	; 136
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	26 89       	ldd	r18, Z+22	; 0x16
    1cd4:	37 89       	ldd	r19, Z+23	; 0x17
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	31 83       	std	Z+1, r19	; 0x01
    1cda:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    1cdc:	81 e8       	ldi	r24, 0x81	; 129
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	21 e8       	ldi	r18, 0x81	; 129
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	f9 01       	movw	r30, r18
    1ce6:	20 81       	ld	r18, Z
    1ce8:	28 60       	ori	r18, 0x08	; 8
    1cea:	fc 01       	movw	r30, r24
    1cec:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    1cee:	8f e6       	ldi	r24, 0x6F	; 111
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	2f e6       	ldi	r18, 0x6F	; 111
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	20 81       	ld	r18, Z
    1cfa:	22 60       	ori	r18, 0x02	; 2
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    1d00:	78 94       	sei
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    1d20:	1c 82       	std	Y+4, r1	; 0x04
    1d22:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    1d24:	1a 82       	std	Y+2, r1	; 0x02
    1d26:	19 82       	std	Y+1, r1	; 0x01
    1d28:	2a c0       	rjmp	.+84     	; 0x1d7e <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
	{
		task = tasks[i];
    1d2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	82 0f       	add	r24, r18
    1d38:	93 1f       	adc	r25, r19
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    1d4c:	88 23       	and	r24, r24
    1d4e:	91 f0       	breq	.+36     	; 0x1d74 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x64>
		{
			task->setIsReadyToRun(false);
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	fc 01       	movw	r30, r24
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	08 96       	adiw	r24, 0x08	; 8
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 81       	ld	r18, Z
    1d6a:	31 81       	ldd	r19, Z+1	; 0x01
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	f9 01       	movw	r30, r18
    1d72:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	fc 01       	movw	r30, r24
    1d84:	24 89       	ldd	r18, Z+20	; 0x14
    1d86:	35 89       	ldd	r19, Z+21	; 0x15
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	82 17       	cp	r24, r18
    1d90:	93 07       	cpc	r25, r19
    1d92:	0c f0       	brlt	.+2      	; 0x1d96 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x86>
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	44 23       	and	r20, r20
    1d98:	41 f6       	brne	.-112    	; 0x1d2a <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
	}
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    1d9a:	83 e5       	ldi	r24, 0x53	; 83
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	23 e5       	ldi	r18, 0x53	; 83
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	f9 01       	movw	r30, r18
    1da4:	20 81       	ld	r18, Z
    1da6:	21 7f       	andi	r18, 0xF1	; 241
    1da8:	fc 01       	movw	r30, r24
    1daa:	20 83       	st	Z, r18
	sleep_mode();
    1dac:	83 e5       	ldi	r24, 0x53	; 83
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	23 e5       	ldi	r18, 0x53	; 83
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	f9 01       	movw	r30, r18
    1db6:	20 81       	ld	r18, Z
    1db8:	21 60       	ori	r18, 0x01	; 1
    1dba:	fc 01       	movw	r30, r24
    1dbc:	20 83       	st	Z, r18
    1dbe:	88 95       	sleep
    1dc0:	83 e5       	ldi	r24, 0x53	; 83
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	23 e5       	ldi	r18, 0x53	; 83
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	f9 01       	movw	r30, r18
    1dca:	20 81       	ld	r18, Z
    1dcc:	2e 7f       	andi	r18, 0xFE	; 254
    1dce:	fc 01       	movw	r30, r24
    1dd0:	20 83       	st	Z, r18
}
    1dd2:	26 96       	adiw	r28, 0x06	; 6
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	1f 92       	push	r1
    1dea:	1f 92       	push	r1
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	fc 01       	movw	r30, r24
    1dfa:	80 8d       	ldd	r24, Z+24	; 0x18
    1dfc:	91 8d       	ldd	r25, Z+25	; 0x19
    1dfe:	80 34       	cpi	r24, 0x40	; 64
    1e00:	91 05       	cpc	r25, r1
    1e02:	39 f1       	breq	.+78     	; 0x1e52 <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    1e04:	81 34       	cpi	r24, 0x41	; 65
    1e06:	91 05       	cpc	r25, r1
    1e08:	3c f4       	brge	.+14     	; 0x1e18 <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	69 f0       	breq	.+26     	; 0x1e2a <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    1e10:	88 30       	cpi	r24, 0x08	; 8
    1e12:	91 05       	cpc	r25, r1
    1e14:	a1 f0       	breq	.+40     	; 0x1e3e <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    1e16:	3b c0       	rjmp	.+118    	; 0x1e8e <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    1e18:	81 15       	cp	r24, r1
    1e1a:	f1 e0       	ldi	r31, 0x01	; 1
    1e1c:	9f 07       	cpc	r25, r31
    1e1e:	19 f1       	breq	.+70     	; 0x1e66 <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    1e20:	81 15       	cp	r24, r1
    1e22:	24 e0       	ldi	r18, 0x04	; 4
    1e24:	92 07       	cpc	r25, r18
    1e26:	49 f1       	breq	.+82     	; 0x1e7a <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    1e28:	32 c0       	rjmp	.+100    	; 0x1e8e <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    1e2a:	81 e8       	ldi	r24, 0x81	; 129
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	21 e8       	ldi	r18, 0x81	; 129
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	f9 01       	movw	r30, r18
    1e34:	20 81       	ld	r18, Z
    1e36:	21 60       	ori	r18, 0x01	; 1
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
			break;
    1e3c:	31 c0       	rjmp	.+98     	; 0x1ea0 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    1e3e:	81 e8       	ldi	r24, 0x81	; 129
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	21 e8       	ldi	r18, 0x81	; 129
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	f9 01       	movw	r30, r18
    1e48:	20 81       	ld	r18, Z
    1e4a:	22 60       	ori	r18, 0x02	; 2
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	20 83       	st	Z, r18
			break;
    1e50:	27 c0       	rjmp	.+78     	; 0x1ea0 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    1e52:	81 e8       	ldi	r24, 0x81	; 129
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	21 e8       	ldi	r18, 0x81	; 129
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	f9 01       	movw	r30, r18
    1e5c:	20 81       	ld	r18, Z
    1e5e:	23 60       	ori	r18, 0x03	; 3
    1e60:	fc 01       	movw	r30, r24
    1e62:	20 83       	st	Z, r18
			break;
    1e64:	1d c0       	rjmp	.+58     	; 0x1ea0 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    1e66:	81 e8       	ldi	r24, 0x81	; 129
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	21 e8       	ldi	r18, 0x81	; 129
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	f9 01       	movw	r30, r18
    1e70:	20 81       	ld	r18, Z
    1e72:	24 60       	ori	r18, 0x04	; 4
    1e74:	fc 01       	movw	r30, r24
    1e76:	20 83       	st	Z, r18
			break;
    1e78:	13 c0       	rjmp	.+38     	; 0x1ea0 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    1e7a:	81 e8       	ldi	r24, 0x81	; 129
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	21 e8       	ldi	r18, 0x81	; 129
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	20 81       	ld	r18, Z
    1e86:	25 60       	ori	r18, 0x05	; 5
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
			break;
    1e8c:	09 c0       	rjmp	.+18     	; 0x1ea0 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    1e8e:	81 e8       	ldi	r24, 0x81	; 129
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	21 e8       	ldi	r18, 0x81	; 129
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	f9 01       	movw	r30, r18
    1e98:	20 81       	ld	r18, Z
    1e9a:	21 60       	ori	r18, 0x01	; 1
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	20 83       	st	Z, r18
	}
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    1eaa:	1f 92       	push	r1
    1eac:	0f 92       	push	r0
    1eae:	00 90 5f 00 	lds	r0, 0x005F
    1eb2:	0f 92       	push	r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	00 90 5b 00 	lds	r0, 0x005B
    1eba:	0f 92       	push	r0
    1ebc:	2f 93       	push	r18
    1ebe:	3f 93       	push	r19
    1ec0:	4f 93       	push	r20
    1ec2:	5f 93       	push	r21
    1ec4:	6f 93       	push	r22
    1ec6:	7f 93       	push	r23
    1ec8:	8f 93       	push	r24
    1eca:	9f 93       	push	r25
    1ecc:	af 93       	push	r26
    1ece:	bf 93       	push	r27
    1ed0:	ef 93       	push	r30
    1ed2:	ff 93       	push	r31
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <__vector_17+0x30>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <__vector_17+0x32>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
	//TODO do we want to stop interrupts in this method?
	Scheduler *scheduler = Scheduler::getScheduler();
    1ee0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    1ee8:	1e 82       	std	Y+6, r1	; 0x06
    1eea:	1d 82       	std	Y+5, r1	; 0x05
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1eec:	1a 82       	std	Y+2, r1	; 0x02
    1eee:	19 82       	std	Y+1, r1	; 0x01
    1ef0:	33 c0       	rjmp	.+102    	; 0x1f58 <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1efa:	9c 01       	movw	r18, r24
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	fc 01       	movw	r30, r24
    1f0a:	80 81       	ld	r24, Z
    1f0c:	91 81       	ldd	r25, Z+1	; 0x01
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	0e 94 ca 0c 	call	0x1994	; 0x1994 <_ZN10helicopter5tasks4Task8getDelayEv>
    1f1a:	21 e0       	ldi	r18, 0x01	; 1
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <__vector_17+0x78>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	22 23       	and	r18, r18
    1f24:	81 f0       	breq	.+32     	; 0x1f46 <__vector_17+0x9c>
		{
			//Mark the task as ready to run
			task->setIsReadyToRun(true);
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN10helicopter5tasks4Task9getPeriodEv>
    1f38:	9c 01       	movw	r18, r24
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	b9 01       	movw	r22, r18
    1f40:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN10helicopter5tasks4Task8setDelayEi>
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN10helicopter5tasks4Task11reduceDelayEv>
	
	Task *task = NULL;
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    1f60:	9c 01       	movw	r18, r24
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	82 17       	cp	r24, r18
    1f6a:	93 07       	cpc	r25, r19
    1f6c:	0c f0       	brlt	.+2      	; 0x1f70 <__vector_17+0xc6>
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	44 23       	and	r20, r20
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__vector_17+0xcc>
    1f74:	be cf       	rjmp	.-132    	; 0x1ef2 <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    1f76:	26 96       	adiw	r28, 0x06	; 6
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	ff 91       	pop	r31
    1f88:	ef 91       	pop	r30
    1f8a:	bf 91       	pop	r27
    1f8c:	af 91       	pop	r26
    1f8e:	9f 91       	pop	r25
    1f90:	8f 91       	pop	r24
    1f92:	7f 91       	pop	r23
    1f94:	6f 91       	pop	r22
    1f96:	5f 91       	pop	r21
    1f98:	4f 91       	pop	r20
    1f9a:	3f 91       	pop	r19
    1f9c:	2f 91       	pop	r18
    1f9e:	0f 90       	pop	r0
    1fa0:	00 92 5b 00 	sts	0x005B, r0
    1fa4:	0f 90       	pop	r0
    1fa6:	00 92 5f 00 	sts	0x005F, r0
    1faa:	0f 90       	pop	r0
    1fac:	1f 90       	pop	r1
    1fae:	18 95       	reti

00001fb0 <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	1f 92       	push	r1
    1fb6:	1f 92       	push	r1
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	08 95       	ret

00001fca <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>:
			
				/**
				 * Magnetic heading variables in the x y and z directions.
				 */
				
				int MagX() const { return magX; }
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	1f 92       	push	r1
    1fd0:	1f 92       	push	r1
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	fc 01       	movw	r30, r24
    1fe0:	85 81       	ldd	r24, Z+5	; 0x05
    1fe2:	96 81       	ldd	r25, Z+6	; 0x06
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	08 95       	ret

00001fee <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>:
				void MagX(int val) { magX = val; }
			
				int MagY() const { return magY; }
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	1f 92       	push	r1
    1ff4:	1f 92       	push	r1
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	fc 01       	movw	r30, r24
    2004:	87 81       	ldd	r24, Z+7	; 0x07
    2006:	90 85       	ldd	r25, Z+8	; 0x08
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	08 95       	ret

00002012 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>:
				void MagY(int val) { magY = val; }
			
				int MagZ() const { return magZ; }
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	1f 92       	push	r1
    2018:	1f 92       	push	r1
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	fc 01       	movw	r30, r24
    2028:	81 85       	ldd	r24, Z+9	; 0x09
    202a:	92 85       	ldd	r25, Z+10	; 0x0a
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <_ZNK10helicopter8messages22SystemTelemetryMessage6MagYawEv>:
				void MagZ(int val) { magZ = val; }
					
				int MagYaw() const { return magYaw; }
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	1f 92       	push	r1
    203c:	1f 92       	push	r1
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	fc 01       	movw	r30, r24
    204c:	83 85       	ldd	r24, Z+11	; 0x0b
    204e:	94 85       	ldd	r25, Z+12	; 0x0c
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	08 95       	ret

0000205a <_ZN10helicopter5model11SystemModel7RawMagXEi>:
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			
			int RawMagX() const { return rawMagX; }
			void RawMagX(int val) { rawMagX = val; }
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	00 d0       	rcall	.+0      	; 0x2060 <_ZN10helicopter5model11SystemModel7RawMagXEi+0x6>
    2060:	1f 92       	push	r1
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	7c 83       	std	Y+4, r23	; 0x04
    206c:	6b 83       	std	Y+3, r22	; 0x03
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	2b 81       	ldd	r18, Y+3	; 0x03
    2074:	3c 81       	ldd	r19, Y+4	; 0x04
    2076:	fc 01       	movw	r30, r24
    2078:	31 83       	std	Z+1, r19	; 0x01
    207a:	20 83       	st	Z, r18
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	08 95       	ret

0000208a <_ZN10helicopter5model11SystemModel7RawMagYEi>:
			
			int RawMagY() const { return rawMagY; }
			void RawMagY(int val) { rawMagY = val; }
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	00 d0       	rcall	.+0      	; 0x2090 <_ZN10helicopter5model11SystemModel7RawMagYEi+0x6>
    2090:	1f 92       	push	r1
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	7c 83       	std	Y+4, r23	; 0x04
    209c:	6b 83       	std	Y+3, r22	; 0x03
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	3c 81       	ldd	r19, Y+4	; 0x04
    20a6:	fc 01       	movw	r30, r24
    20a8:	33 83       	std	Z+3, r19	; 0x03
    20aa:	22 83       	std	Z+2, r18	; 0x02
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <_ZN10helicopter5model11SystemModel7RawMagZEi>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <_ZN10helicopter5model11SystemModel7RawMagZEi+0x6>
    20c0:	1f 92       	push	r1
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	7c 83       	std	Y+4, r23	; 0x04
    20cc:	6b 83       	std	Y+3, r22	; 0x03
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	3c 81       	ldd	r19, Y+4	; 0x04
    20d6:	fc 01       	movw	r30, r24
    20d8:	35 83       	std	Z+5, r19	; 0x05
    20da:	24 83       	std	Z+4, r18	; 0x04
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <_ZN10helicopter5model11SystemModel6MagYawEi>:
				

			int MagYaw() const { return magYaw; }
			void MagYaw(int val) { magYaw = val; }				
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <_ZN10helicopter5model11SystemModel6MagYawEi+0x6>
    20f0:	1f 92       	push	r1
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	7c 83       	std	Y+4, r23	; 0x04
    20fc:	6b 83       	std	Y+3, r22	; 0x03
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	2b 81       	ldd	r18, Y+3	; 0x03
    2104:	3c 81       	ldd	r19, Y+4	; 0x04
    2106:	fc 01       	movw	r30, r24
    2108:	37 83       	std	Z+7, r19	; 0x07
    210a:	26 83       	std	Z+6, r18	; 0x06
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <_ZN10helicopter5model11SystemModel8TimeoutsEi>:
						
			int Timeouts() const {return timeouts; }
			void Timeouts(int val) { timeouts = val; }
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	00 d0       	rcall	.+0      	; 0x2120 <_ZN10helicopter5model11SystemModel8TimeoutsEi+0x6>
    2120:	1f 92       	push	r1
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	7c 83       	std	Y+4, r23	; 0x04
    212c:	6b 83       	std	Y+3, r22	; 0x03
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	fc 01       	movw	r30, r24
    2138:	31 87       	std	Z+9, r19	; 0x09
    213a:	20 87       	std	Z+8, r18	; 0x08
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>:
			
			int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
			void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	00 d0       	rcall	.+0      	; 0x2150 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi+0x6>
    2150:	1f 92       	push	r1
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	7c 83       	std	Y+4, r23	; 0x04
    215c:	6b 83       	std	Y+3, r22	; 0x03
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	2b 81       	ldd	r18, Y+3	; 0x03
    2164:	3c 81       	ldd	r19, Y+4	; 0x04
    2166:	fc 01       	movw	r30, r24
    2168:	33 87       	std	Z+11, r19	; 0x0b
    216a:	22 87       	std	Z+10, r18	; 0x0a
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	08 95       	ret

0000217a <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>:
			
			int ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(int val) { checksumErrors = val; }
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	00 d0       	rcall	.+0      	; 0x2180 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi+0x6>
    2180:	1f 92       	push	r1
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	7c 83       	std	Y+4, r23	; 0x04
    218c:	6b 83       	std	Y+3, r22	; 0x03
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	2b 81       	ldd	r18, Y+3	; 0x03
    2194:	3c 81       	ldd	r19, Y+4	; 0x04
    2196:	fc 01       	movw	r30, r24
    2198:	35 87       	std	Z+13, r19	; 0x0d
    219a:	24 87       	std	Z+12, r18	; 0x0c
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	2a 97       	sbiw	r28, 0x0a	; 10
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	7c 83       	std	Y+4, r23	; 0x04
    21c8:	6b 83       	std	Y+3, r22	; 0x03
    21ca:	5e 83       	std	Y+6, r21	; 0x06
    21cc:	4d 83       	std	Y+5, r20	; 0x05
    21ce:	38 87       	std	Y+8, r19	; 0x08
    21d0:	2f 83       	std	Y+7, r18	; 0x07
    21d2:	1a 87       	std	Y+10, r17	; 0x0a
    21d4:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	49 85       	ldd	r20, Y+9	; 0x09
    21dc:	5a 85       	ldd	r21, Y+10	; 0x0a
    21de:	2f 81       	ldd	r18, Y+7	; 0x07
    21e0:	38 85       	ldd	r19, Y+8	; 0x08
    21e2:	b9 01       	movw	r22, r18
    21e4:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN10helicopter5tasks4TaskC1Eii>
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	9a 81       	ldd	r25, Y+2	; 0x02
    21ec:	2a e4       	ldi	r18, 0x4A	; 74
    21ee:	32 e0       	ldi	r19, 0x02	; 2
    21f0:	fc 01       	movw	r30, r24
    21f2:	31 83       	std	Z+1, r19	; 0x01
    21f4:	20 83       	st	Z, r18
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	2b 81       	ldd	r18, Y+3	; 0x03
    21fc:	3c 81       	ldd	r19, Y+4	; 0x04
    21fe:	fc 01       	movw	r30, r24
    2200:	30 87       	std	Z+8, r19	; 0x08
    2202:	27 83       	std	Z+7, r18	; 0x07
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	2d 81       	ldd	r18, Y+5	; 0x05
    220a:	3e 81       	ldd	r19, Y+6	; 0x06
    220c:	fc 01       	movw	r30, r24
    220e:	32 87       	std	Z+10, r19	; 0x0a
    2210:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    2212:	2a 96       	adiw	r28, 0x0a	; 10
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:

void SimTelemetryTask::runTaskImpl() 
{
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	2d 97       	sbiw	r28, 0x0d	; 13
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	9d 87       	std	Y+13, r25	; 0x0d
    223e:	8c 87       	std	Y+12, r24	; 0x0c
	
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    2240:	ce 01       	movw	r24, r28
    2242:	05 96       	adiw	r24, 0x05	; 5
    2244:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    2248:	8c 85       	ldd	r24, Y+12	; 0x0c
    224a:	9d 85       	ldd	r25, Y+13	; 0x0d
    224c:	fc 01       	movw	r30, r24
    224e:	87 81       	ldd	r24, Z+7	; 0x07
    2250:	90 85       	ldd	r25, Z+8	; 0x08
    2252:	9e 01       	movw	r18, r28
    2254:	2b 5f       	subi	r18, 0xFB	; 251
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	b9 01       	movw	r22, r18
    225a:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	09 f0       	breq	.+2      	; 0x226c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x44>
    226a:	62 c0       	rjmp	.+196    	; 0x2330 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x108>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    226c:	1b 86       	std	Y+11, r1	; 0x0b
    226e:	1a 86       	std	Y+10, r1	; 0x0a
	
		status = radioInterface->receive(message);
    2270:	8c 85       	ldd	r24, Y+12	; 0x0c
    2272:	9d 85       	ldd	r25, Y+13	; 0x0d
    2274:	fc 01       	movw	r30, r24
    2276:	87 81       	ldd	r24, Z+7	; 0x07
    2278:	90 85       	ldd	r25, Z+8	; 0x08
    227a:	9e 01       	movw	r18, r28
    227c:	26 5f       	subi	r18, 0xF6	; 246
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	b9 01       	movw	r22, r18
    2282:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
	
		if (status == 0 && message != NULL)
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	09 f0       	breq	.+2      	; 0x2294 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x6c>
    2292:	4e c0       	rjmp	.+156    	; 0x2330 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x108>
    2294:	8a 85       	ldd	r24, Y+10	; 0x0a
    2296:	9b 85       	ldd	r25, Y+11	; 0x0b
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	09 f4       	brne	.+2      	; 0x229e <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x76>
    229c:	49 c0       	rjmp	.+146    	; 0x2330 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x108>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    229e:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			model->RawMagX(telemMsg->MagX());
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>
    22ae:	9c 01       	movw	r18, r24
    22b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    22b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    22b4:	fc 01       	movw	r30, r24
    22b6:	81 85       	ldd	r24, Z+9	; 0x09
    22b8:	92 85       	ldd	r25, Z+10	; 0x0a
    22ba:	b9 01       	movw	r22, r18
    22bc:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(telemMsg->MagY());
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>
    22c8:	9c 01       	movw	r18, r24
    22ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    22cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    22ce:	fc 01       	movw	r30, r24
    22d0:	81 85       	ldd	r24, Z+9	; 0x09
    22d2:	92 85       	ldd	r25, Z+10	; 0x0a
    22d4:	b9 01       	movw	r22, r18
    22d6:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(telemMsg->MagZ());
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>
    22e2:	9c 01       	movw	r18, r24
    22e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    22e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    22e8:	fc 01       	movw	r30, r24
    22ea:	81 85       	ldd	r24, Z+9	; 0x09
    22ec:	92 85       	ldd	r25, Z+10	; 0x0a
    22ee:	b9 01       	movw	r22, r18
    22f0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN10helicopter5model11SystemModel7RawMagZEi>
			model->MagYaw(telemMsg->MagYaw());
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	0e 94 1b 10 	call	0x2036	; 0x2036 <_ZNK10helicopter8messages22SystemTelemetryMessage6MagYawEv>
    22fc:	9c 01       	movw	r18, r24
    22fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2300:	9d 85       	ldd	r25, Y+13	; 0x0d
    2302:	fc 01       	movw	r30, r24
    2304:	81 85       	ldd	r24, Z+9	; 0x09
    2306:	92 85       	ldd	r25, Z+10	; 0x0a
    2308:	b9 01       	movw	r22, r18
    230a:	0e 94 75 10 	call	0x20ea	; 0x20ea <_ZN10helicopter5model11SystemModel6MagYawEi>
		
			delete message;
    230e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2310:	9b 85       	ldd	r25, Y+11	; 0x0b
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f0       	breq	.+26     	; 0x2330 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x108>
    2316:	8a 85       	ldd	r24, Y+10	; 0x0a
    2318:	9b 85       	ldd	r25, Y+11	; 0x0b
    231a:	fc 01       	movw	r30, r24
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	02 96       	adiw	r24, 0x02	; 2
    2322:	fc 01       	movw	r30, r24
    2324:	20 81       	ld	r18, Z
    2326:	31 81       	ldd	r19, Z+1	; 0x01
    2328:	8a 85       	ldd	r24, Y+10	; 0x0a
    232a:	9b 85       	ldd	r25, Y+11	; 0x0b
    232c:	f9 01       	movw	r30, r18
    232e:	19 95       	eicall
		}
	}
	
	//Update instrumentation fields
	switch (status)
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	8e 3f       	cpi	r24, 0xFE	; 254
    2336:	ff ef       	ldi	r31, 0xFF	; 255
    2338:	9f 07       	cpc	r25, r31
    233a:	19 f1       	breq	.+70     	; 0x2382 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x15a>
    233c:	8f 3f       	cpi	r24, 0xFF	; 255
    233e:	2f ef       	ldi	r18, 0xFF	; 255
    2340:	92 07       	cpc	r25, r18
    2342:	2c f4       	brge	.+10     	; 0x234e <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x126>
    2344:	8d 3f       	cpi	r24, 0xFD	; 253
    2346:	ef ef       	ldi	r30, 0xFF	; 255
    2348:	9e 07       	cpc	r25, r30
    234a:	71 f1       	breq	.+92     	; 0x23a8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x180>
    234c:	40 c0       	rjmp	.+128    	; 0x23ce <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1a6>
    234e:	8f 3f       	cpi	r24, 0xFF	; 255
    2350:	ff ef       	ldi	r31, 0xFF	; 255
    2352:	9f 07       	cpc	r25, r31
    2354:	19 f0       	breq	.+6      	; 0x235c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x134>
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	d9 f1       	breq	.+118    	; 0x23d0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1a8>
    235a:	39 c0       	rjmp	.+114    	; 0x23ce <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1a6>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    235c:	8c 85       	ldd	r24, Y+12	; 0x0c
    235e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2360:	fc 01       	movw	r30, r24
    2362:	81 85       	ldd	r24, Z+9	; 0x09
    2364:	92 85       	ldd	r25, Z+10	; 0x0a
    2366:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    236a:	9c 01       	movw	r18, r24
    236c:	2f 5f       	subi	r18, 0xFF	; 255
    236e:	3f 4f       	sbci	r19, 0xFF	; 255
    2370:	8c 85       	ldd	r24, Y+12	; 0x0c
    2372:	9d 85       	ldd	r25, Y+13	; 0x0d
    2374:	fc 01       	movw	r30, r24
    2376:	81 85       	ldd	r24, Z+9	; 0x09
    2378:	92 85       	ldd	r25, Z+10	; 0x0a
    237a:	b9 01       	movw	r22, r18
    237c:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN10helicopter5model11SystemModel8TimeoutsEi>
			break;
    2380:	28 c0       	rjmp	.+80     	; 0x23d2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1aa>
		case -2:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    2382:	8c 85       	ldd	r24, Y+12	; 0x0c
    2384:	9d 85       	ldd	r25, Y+13	; 0x0d
    2386:	fc 01       	movw	r30, r24
    2388:	81 85       	ldd	r24, Z+9	; 0x09
    238a:	92 85       	ldd	r25, Z+10	; 0x0a
    238c:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    2390:	9c 01       	movw	r18, r24
    2392:	2f 5f       	subi	r18, 0xFF	; 255
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	8c 85       	ldd	r24, Y+12	; 0x0c
    2398:	9d 85       	ldd	r25, Y+13	; 0x0d
    239a:	fc 01       	movw	r30, r24
    239c:	81 85       	ldd	r24, Z+9	; 0x09
    239e:	92 85       	ldd	r25, Z+10	; 0x0a
    23a0:	b9 01       	movw	r22, r18
    23a2:	0e 94 a5 10 	call	0x214a	; 0x214a <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>
			break;
    23a6:	15 c0       	rjmp	.+42     	; 0x23d2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1aa>
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    23a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    23aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    23ac:	fc 01       	movw	r30, r24
    23ae:	81 85       	ldd	r24, Z+9	; 0x09
    23b0:	92 85       	ldd	r25, Z+10	; 0x0a
    23b2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    23b6:	9c 01       	movw	r18, r24
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23be:	9d 85       	ldd	r25, Y+13	; 0x0d
    23c0:	fc 01       	movw	r30, r24
    23c2:	81 85       	ldd	r24, Z+9	; 0x09
    23c4:	92 85       	ldd	r25, Z+10	; 0x0a
    23c6:	b9 01       	movw	r22, r18
    23c8:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>
		default:
			break;
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1aa>
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1aa>
	
	//Update instrumentation fields
	switch (status)
	{
		case 0:
			break;
    23d0:	00 00       	nop
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
		default:
			break;
		
	}
    23d2:	ce 01       	movw	r24, r28
    23d4:	05 96       	adiw	r24, 0x05	; 5
    23d6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    23da:	2d 96       	adiw	r28, 0x0d	; 13
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	08 95       	ret

000023ec <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	1f 92       	push	r1
    23f2:	1f 92       	push	r1
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	2a e4       	ldi	r18, 0x4A	; 74
    2402:	32 e0       	ldi	r19, 0x02	; 2
    2404:	fc 01       	movw	r30, r24
    2406:	31 83       	std	Z+1, r19	; 0x01
    2408:	20 83       	st	Z, r18
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	81 70       	andi	r24, 0x01	; 1
    2418:	99 27       	eor	r25, r25
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	21 f0       	breq	.+8      	; 0x2426 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev+0x3a>
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	08 95       	ret

00002430 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	1f 92       	push	r1
    2436:	1f 92       	push	r1
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	1f 92       	push	r1
    2460:	1f 92       	push	r1
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	00 d0       	rcall	.+0      	; 0x247a <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    247a:	00 d0       	rcall	.+0      	; 0x247c <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	7c 83       	std	Y+4, r23	; 0x04
    2486:	6b 83       	std	Y+3, r22	; 0x03
    2488:	5e 83       	std	Y+6, r21	; 0x06
    248a:	4d 83       	std	Y+5, r20	; 0x05
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	28 e5       	ldi	r18, 0x58	; 88
    2492:	32 e0       	ldi	r19, 0x02	; 2
    2494:	fc 01       	movw	r30, r24
    2496:	31 83       	std	Z+1, r19	; 0x01
    2498:	20 83       	st	Z, r18
{
	this->delay = delay;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	2b 81       	ldd	r18, Y+3	; 0x03
    24a0:	3c 81       	ldd	r19, Y+4	; 0x04
    24a2:	fc 01       	movw	r30, r24
    24a4:	33 83       	std	Z+3, r19	; 0x03
    24a6:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	2d 81       	ldd	r18, Y+5	; 0x05
    24ae:	3e 81       	ldd	r19, Y+6	; 0x06
    24b0:	fc 01       	movw	r30, r24
    24b2:	35 83       	std	Z+5, r19	; 0x05
    24b4:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	fc 01       	movw	r30, r24
    24bc:	16 82       	std	Z+6, r1	; 0x06
}
    24be:	26 96       	adiw	r28, 0x06	; 6
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	08 95       	ret

000024d0 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	1f 92       	push	r1
    24d6:	1f 92       	push	r1
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    24e0:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	fc 01       	movw	r30, r24
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	fc 01       	movw	r30, r24
    24ee:	20 81       	ld	r18, Z
    24f0:	31 81       	ldd	r19, Z+1	; 0x01
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	f9 01       	movw	r30, r18
    24f8:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    24fa:	78 94       	sei
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	2a 97       	sbiw	r28, 0x0a	; 10
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	7c 83       	std	Y+4, r23	; 0x04
    2524:	6b 83       	std	Y+3, r22	; 0x03
    2526:	5e 83       	std	Y+6, r21	; 0x06
    2528:	4d 83       	std	Y+5, r20	; 0x05
    252a:	38 87       	std	Y+8, r19	; 0x08
    252c:	2f 83       	std	Y+7, r18	; 0x07
    252e:	1a 87       	std	Y+10, r17	; 0x0a
    2530:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	49 85       	ldd	r20, Y+9	; 0x09
    2538:	5a 85       	ldd	r21, Y+10	; 0x0a
    253a:	2f 81       	ldd	r18, Y+7	; 0x07
    253c:	38 85       	ldd	r19, Y+8	; 0x08
    253e:	b9 01       	movw	r22, r18
    2540:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN10helicopter5tasks4TaskC1Eii>
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	26 e6       	ldi	r18, 0x66	; 102
    254a:	32 e0       	ldi	r19, 0x02	; 2
    254c:	fc 01       	movw	r30, r24
    254e:	31 83       	std	Z+1, r19	; 0x01
    2550:	20 83       	st	Z, r18
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	2b 81       	ldd	r18, Y+3	; 0x03
    2558:	3c 81       	ldd	r19, Y+4	; 0x04
    255a:	fc 01       	movw	r30, r24
    255c:	30 87       	std	Z+8, r19	; 0x08
    255e:	27 83       	std	Z+7, r18	; 0x07
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	2d 81       	ldd	r18, Y+5	; 0x05
    2566:	3e 81       	ldd	r19, Y+6	; 0x06
    2568:	fc 01       	movw	r30, r24
    256a:	32 87       	std	Z+10, r19	; 0x0a
    256c:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    256e:	2a 96       	adiw	r28, 0x0a	; 10
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	1f 91       	pop	r17
    2580:	0f 91       	pop	r16
    2582:	08 95       	ret

00002584 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	00 d0       	rcall	.+0      	; 0x258a <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    258a:	1f 92       	push	r1
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	9c 83       	std	Y+4, r25	; 0x04
    2592:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = model->CreateTelemetryMessage();
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	fc 01       	movw	r30, r24
    259a:	81 85       	ldd	r24, Z+9	; 0x09
    259c:	92 85       	ldd	r25, Z+10	; 0x0a
    259e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>
    25a2:	9a 83       	std	Y+2, r25	; 0x02
    25a4:	89 83       	std	Y+1, r24	; 0x01
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	fc 01       	movw	r30, r24
    25ac:	87 81       	ldd	r24, Z+7	; 0x07
    25ae:	90 85       	ldd	r25, Z+8	; 0x08
    25b0:	29 81       	ldd	r18, Y+1	; 0x01
    25b2:	3a 81       	ldd	r19, Y+2	; 0x02
    25b4:	b9 01       	movw	r22, r18
    25b6:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f0       	breq	.+26     	; 0x25dc <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	fc 01       	movw	r30, r24
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	02 96       	adiw	r24, 0x02	; 2
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 81       	ld	r18, Z
    25d2:	31 81       	ldd	r19, Z+1	; 0x01
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	f9 01       	movw	r30, r18
    25da:	19 95       	eicall
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	1f 92       	push	r1
    25f0:	1f 92       	push	r1
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	26 e6       	ldi	r18, 0x66	; 102
    2600:	32 e0       	ldi	r19, 0x02	; 2
    2602:	fc 01       	movw	r30, r24
    2604:	31 83       	std	Z+1, r19	; 0x01
    2606:	20 83       	st	Z, r18
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	81 70       	andi	r24, 0x01	; 1
    2616:	99 27       	eor	r25, r25
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	21 f0       	breq	.+8      	; 0x2624 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev+0x3a>
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	08 95       	ret

0000262e <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	1f 92       	push	r1
    2634:	1f 92       	push	r1
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZdlPv>
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <_Znwj>:
 *  Author: HP User
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	1f 92       	push	r1
    265e:	1f 92       	push	r1
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <malloc>
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <_ZdlPv>:

void operator delete(void * ptr)
{
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	1f 92       	push	r1
    2680:	1f 92       	push	r1
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	21 f0       	breq	.+8      	; 0x269a <_ZdlPv+0x20>
	{
		free(ptr);
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <free>
	}
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <_Znaj>:

void * operator new[](size_t size)
{
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	1f 92       	push	r1
    26aa:	1f 92       	push	r1
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <malloc>
}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <_ZdaPv>:

void operator delete[](void * ptr)
{
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	1f 92       	push	r1
    26cc:	1f 92       	push	r1
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	21 f0       	breq	.+8      	; 0x26e6 <_ZdaPv+0x20>
	{
		free(ptr);
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <free>
	}
	
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	08 95       	ret

000026f0 <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    26fa:	1f 92       	push	r1
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	0e 94 4c 14 	call	0x2898	; 0x2898 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
    270c:	1a 82       	std	Y+2, r1	; 0x02
    270e:	19 82       	std	Y+1, r1	; 0x01
	
	if (timeoutMilliseconds > 1000) 
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	9c 81       	ldd	r25, Y+4	; 0x04
    2714:	fc 01       	movw	r30, r24
    2716:	86 81       	ldd	r24, Z+6	; 0x06
    2718:	97 81       	ldd	r25, Z+7	; 0x07
    271a:	89 3e       	cpi	r24, 0xE9	; 233
    271c:	f3 e0       	ldi	r31, 0x03	; 3
    271e:	9f 07       	cpc	r25, r31
    2720:	2c f0       	brlt	.+10     	; 0x272c <_ZN10helicopter4util5Timer10startTimerEv+0x3c>
	{
		frequency = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	0d c0       	rjmp	.+26     	; 0x2746 <_ZN10helicopter4util5Timer10startTimerEv+0x56>
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	fc 01       	movw	r30, r24
    2732:	26 81       	ldd	r18, Z+6	; 0x06
    2734:	37 81       	ldd	r19, Z+7	; 0x07
    2736:	88 ee       	ldi	r24, 0xE8	; 232
    2738:	93 e0       	ldi	r25, 0x03	; 3
    273a:	b9 01       	movw	r22, r18
    273c:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__divmodhi4>
    2740:	9b 01       	movw	r18, r22
    2742:	3a 83       	std	Y+2, r19	; 0x02
    2744:	29 83       	std	Y+1, r18	; 0x01
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    2746:	08 e9       	ldi	r16, 0x98	; 152
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	fc 01       	movw	r30, r24
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	a2 81       	ldd	r26, Z+2	; 0x02
    2756:	b3 81       	ldd	r27, Z+3	; 0x03
    2758:	2b 81       	ldd	r18, Y+3	; 0x03
    275a:	3c 81       	ldd	r19, Y+4	; 0x04
    275c:	f9 01       	movw	r30, r18
    275e:	24 81       	ldd	r18, Z+4	; 0x04
    2760:	35 81       	ldd	r19, Z+5	; 0x05
    2762:	44 27       	eor	r20, r20
    2764:	37 fd       	sbrc	r19, 7
    2766:	40 95       	com	r20
    2768:	54 2f       	mov	r21, r20
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    2772:	da 01       	movw	r26, r20
    2774:	c9 01       	movw	r24, r18
    2776:	29 81       	ldd	r18, Y+1	; 0x01
    2778:	3a 81       	ldd	r19, Y+2	; 0x02
    277a:	44 27       	eor	r20, r20
    277c:	37 fd       	sbrc	r19, 7
    277e:	40 95       	com	r20
    2780:	54 2f       	mov	r21, r20
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    278a:	da 01       	movw	r26, r20
    278c:	c9 01       	movw	r24, r18
    278e:	f8 01       	movw	r30, r16
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    2794:	81 e9       	ldi	r24, 0x91	; 145
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	21 e9       	ldi	r18, 0x91	; 145
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	f9 01       	movw	r30, r18
    279e:	20 81       	ld	r18, Z
    27a0:	28 60       	ori	r18, 0x08	; 8
    27a2:	fc 01       	movw	r30, r24
    27a4:	20 83       	st	Z, r18
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	fc 01       	movw	r30, r24
    27ac:	84 81       	ldd	r24, Z+4	; 0x04
    27ae:	95 81       	ldd	r25, Z+5	; 0x05
    27b0:	80 34       	cpi	r24, 0x40	; 64
    27b2:	91 05       	cpc	r25, r1
    27b4:	39 f1       	breq	.+78     	; 0x2804 <_ZN10helicopter4util5Timer10startTimerEv+0x114>
    27b6:	81 34       	cpi	r24, 0x41	; 65
    27b8:	91 05       	cpc	r25, r1
    27ba:	3c f4       	brge	.+14     	; 0x27ca <_ZN10helicopter4util5Timer10startTimerEv+0xda>
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	91 05       	cpc	r25, r1
    27c0:	69 f0       	breq	.+26     	; 0x27dc <_ZN10helicopter4util5Timer10startTimerEv+0xec>
    27c2:	88 30       	cpi	r24, 0x08	; 8
    27c4:	91 05       	cpc	r25, r1
    27c6:	a1 f0       	breq	.+40     	; 0x27f0 <_ZN10helicopter4util5Timer10startTimerEv+0x100>
    27c8:	3b c0       	rjmp	.+118    	; 0x2840 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
    27ca:	81 15       	cp	r24, r1
    27cc:	f1 e0       	ldi	r31, 0x01	; 1
    27ce:	9f 07       	cpc	r25, r31
    27d0:	19 f1       	breq	.+70     	; 0x2818 <_ZN10helicopter4util5Timer10startTimerEv+0x128>
    27d2:	81 15       	cp	r24, r1
    27d4:	24 e0       	ldi	r18, 0x04	; 4
    27d6:	92 07       	cpc	r25, r18
    27d8:	49 f1       	breq	.+82     	; 0x282c <_ZN10helicopter4util5Timer10startTimerEv+0x13c>
    27da:	32 c0       	rjmp	.+100    	; 0x2840 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    27dc:	81 e9       	ldi	r24, 0x91	; 145
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	21 e9       	ldi	r18, 0x91	; 145
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	f9 01       	movw	r30, r18
    27e6:	20 81       	ld	r18, Z
    27e8:	21 60       	ori	r18, 0x01	; 1
    27ea:	fc 01       	movw	r30, r24
    27ec:	20 83       	st	Z, r18
		break;
    27ee:	31 c0       	rjmp	.+98     	; 0x2852 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    27f0:	81 e9       	ldi	r24, 0x91	; 145
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	21 e9       	ldi	r18, 0x91	; 145
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	f9 01       	movw	r30, r18
    27fa:	20 81       	ld	r18, Z
    27fc:	22 60       	ori	r18, 0x02	; 2
    27fe:	fc 01       	movw	r30, r24
    2800:	20 83       	st	Z, r18
		break;
    2802:	27 c0       	rjmp	.+78     	; 0x2852 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    2804:	81 e9       	ldi	r24, 0x91	; 145
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	21 e9       	ldi	r18, 0x91	; 145
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	f9 01       	movw	r30, r18
    280e:	20 81       	ld	r18, Z
    2810:	23 60       	ori	r18, 0x03	; 3
    2812:	fc 01       	movw	r30, r24
    2814:	20 83       	st	Z, r18
		break;
    2816:	1d c0       	rjmp	.+58     	; 0x2852 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    2818:	81 e9       	ldi	r24, 0x91	; 145
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	21 e9       	ldi	r18, 0x91	; 145
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	f9 01       	movw	r30, r18
    2822:	20 81       	ld	r18, Z
    2824:	24 60       	ori	r18, 0x04	; 4
    2826:	fc 01       	movw	r30, r24
    2828:	20 83       	st	Z, r18
		break;
    282a:	13 c0       	rjmp	.+38     	; 0x2852 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    282c:	81 e9       	ldi	r24, 0x91	; 145
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	21 e9       	ldi	r18, 0x91	; 145
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	f9 01       	movw	r30, r18
    2836:	20 81       	ld	r18, Z
    2838:	25 60       	ori	r18, 0x05	; 5
    283a:	fc 01       	movw	r30, r24
    283c:	20 83       	st	Z, r18
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		default:
		TCCR3B |= NoPrescaling;
    2840:	81 e9       	ldi	r24, 0x91	; 145
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	21 e9       	ldi	r18, 0x91	; 145
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	f9 01       	movw	r30, r18
    284a:	20 81       	ld	r18, Z
    284c:	21 60       	ori	r18, 0x01	; 1
    284e:	fc 01       	movw	r30, r24
    2850:	20 83       	st	Z, r18
	}
}
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	08 95       	ret

00002864 <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	1f 92       	push	r1
    286a:	1f 92       	push	r1
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    2874:	88 e3       	ldi	r24, 0x38	; 56
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	fc 01       	movw	r30, r24
    287a:	80 81       	ld	r24, Z
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	82 70       	andi	r24, 0x02	; 2
    2882:	99 27       	eor	r25, r25
    2884:	21 e0       	ldi	r18, 0x01	; 1
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	09 f4       	brne	.+2      	; 0x288c <_ZN10helicopter4util5Timer11hasTimedoutEv+0x28>
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	82 2f       	mov	r24, r18
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	08 95       	ret

00002898 <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	1f 92       	push	r1
    289e:	1f 92       	push	r1
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    28a8:	81 e9       	ldi	r24, 0x91	; 145
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	fc 01       	movw	r30, r24
    28ae:	10 82       	st	Z, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    28b0:	84 e9       	ldi	r24, 0x94	; 148
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	fc 01       	movw	r30, r24
    28b6:	11 82       	std	Z+1, r1	; 0x01
    28b8:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    28ba:	88 e3       	ldi	r24, 0x38	; 56
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	28 e3       	ldi	r18, 0x38	; 56
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	f9 01       	movw	r30, r18
    28c4:	20 81       	ld	r18, Z
    28c6:	22 60       	ori	r18, 0x02	; 2
    28c8:	fc 01       	movw	r30, r24
    28ca:	20 83       	st	Z, r18
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	08 95       	ret

000028d6 <__fixunssfsi>:
    28d6:	ac d0       	rcall	.+344    	; 0x2a30 <__fp_splitA>
    28d8:	88 f0       	brcs	.+34     	; 0x28fc <__fixunssfsi+0x26>
    28da:	9f 57       	subi	r25, 0x7F	; 127
    28dc:	90 f0       	brcs	.+36     	; 0x2902 <__fixunssfsi+0x2c>
    28de:	b9 2f       	mov	r27, r25
    28e0:	99 27       	eor	r25, r25
    28e2:	b7 51       	subi	r27, 0x17	; 23
    28e4:	a0 f0       	brcs	.+40     	; 0x290e <__fixunssfsi+0x38>
    28e6:	d1 f0       	breq	.+52     	; 0x291c <__fixunssfsi+0x46>
    28e8:	66 0f       	add	r22, r22
    28ea:	77 1f       	adc	r23, r23
    28ec:	88 1f       	adc	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	1a f0       	brmi	.+6      	; 0x28f8 <__fixunssfsi+0x22>
    28f2:	ba 95       	dec	r27
    28f4:	c9 f7       	brne	.-14     	; 0x28e8 <__fixunssfsi+0x12>
    28f6:	12 c0       	rjmp	.+36     	; 0x291c <__fixunssfsi+0x46>
    28f8:	b1 30       	cpi	r27, 0x01	; 1
    28fa:	81 f0       	breq	.+32     	; 0x291c <__fixunssfsi+0x46>
    28fc:	ca d0       	rcall	.+404    	; 0x2a92 <__fp_zero>
    28fe:	b1 e0       	ldi	r27, 0x01	; 1
    2900:	08 95       	ret
    2902:	c7 c0       	rjmp	.+398    	; 0x2a92 <__fp_zero>
    2904:	67 2f       	mov	r22, r23
    2906:	78 2f       	mov	r23, r24
    2908:	88 27       	eor	r24, r24
    290a:	b8 5f       	subi	r27, 0xF8	; 248
    290c:	39 f0       	breq	.+14     	; 0x291c <__fixunssfsi+0x46>
    290e:	b9 3f       	cpi	r27, 0xF9	; 249
    2910:	cc f3       	brlt	.-14     	; 0x2904 <__fixunssfsi+0x2e>
    2912:	86 95       	lsr	r24
    2914:	77 95       	ror	r23
    2916:	67 95       	ror	r22
    2918:	b3 95       	inc	r27
    291a:	d9 f7       	brne	.-10     	; 0x2912 <__fixunssfsi+0x3c>
    291c:	3e f4       	brtc	.+14     	; 0x292c <__fixunssfsi+0x56>
    291e:	90 95       	com	r25
    2920:	80 95       	com	r24
    2922:	70 95       	com	r23
    2924:	61 95       	neg	r22
    2926:	7f 4f       	sbci	r23, 0xFF	; 255
    2928:	8f 4f       	sbci	r24, 0xFF	; 255
    292a:	9f 4f       	sbci	r25, 0xFF	; 255
    292c:	08 95       	ret

0000292e <__floatunsisf>:
    292e:	e8 94       	clt
    2930:	09 c0       	rjmp	.+18     	; 0x2944 <__floatsisf+0x12>

00002932 <__floatsisf>:
    2932:	97 fb       	bst	r25, 7
    2934:	3e f4       	brtc	.+14     	; 0x2944 <__floatsisf+0x12>
    2936:	90 95       	com	r25
    2938:	80 95       	com	r24
    293a:	70 95       	com	r23
    293c:	61 95       	neg	r22
    293e:	7f 4f       	sbci	r23, 0xFF	; 255
    2940:	8f 4f       	sbci	r24, 0xFF	; 255
    2942:	9f 4f       	sbci	r25, 0xFF	; 255
    2944:	99 23       	and	r25, r25
    2946:	a9 f0       	breq	.+42     	; 0x2972 <__floatsisf+0x40>
    2948:	f9 2f       	mov	r31, r25
    294a:	96 e9       	ldi	r25, 0x96	; 150
    294c:	bb 27       	eor	r27, r27
    294e:	93 95       	inc	r25
    2950:	f6 95       	lsr	r31
    2952:	87 95       	ror	r24
    2954:	77 95       	ror	r23
    2956:	67 95       	ror	r22
    2958:	b7 95       	ror	r27
    295a:	f1 11       	cpse	r31, r1
    295c:	f8 cf       	rjmp	.-16     	; 0x294e <__floatsisf+0x1c>
    295e:	fa f4       	brpl	.+62     	; 0x299e <__floatsisf+0x6c>
    2960:	bb 0f       	add	r27, r27
    2962:	11 f4       	brne	.+4      	; 0x2968 <__floatsisf+0x36>
    2964:	60 ff       	sbrs	r22, 0
    2966:	1b c0       	rjmp	.+54     	; 0x299e <__floatsisf+0x6c>
    2968:	6f 5f       	subi	r22, 0xFF	; 255
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	8f 4f       	sbci	r24, 0xFF	; 255
    296e:	9f 4f       	sbci	r25, 0xFF	; 255
    2970:	16 c0       	rjmp	.+44     	; 0x299e <__floatsisf+0x6c>
    2972:	88 23       	and	r24, r24
    2974:	11 f0       	breq	.+4      	; 0x297a <__floatsisf+0x48>
    2976:	96 e9       	ldi	r25, 0x96	; 150
    2978:	11 c0       	rjmp	.+34     	; 0x299c <__floatsisf+0x6a>
    297a:	77 23       	and	r23, r23
    297c:	21 f0       	breq	.+8      	; 0x2986 <__floatsisf+0x54>
    297e:	9e e8       	ldi	r25, 0x8E	; 142
    2980:	87 2f       	mov	r24, r23
    2982:	76 2f       	mov	r23, r22
    2984:	05 c0       	rjmp	.+10     	; 0x2990 <__floatsisf+0x5e>
    2986:	66 23       	and	r22, r22
    2988:	71 f0       	breq	.+28     	; 0x29a6 <__floatsisf+0x74>
    298a:	96 e8       	ldi	r25, 0x86	; 134
    298c:	86 2f       	mov	r24, r22
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	2a f0       	brmi	.+10     	; 0x299e <__floatsisf+0x6c>
    2994:	9a 95       	dec	r25
    2996:	66 0f       	add	r22, r22
    2998:	77 1f       	adc	r23, r23
    299a:	88 1f       	adc	r24, r24
    299c:	da f7       	brpl	.-10     	; 0x2994 <__floatsisf+0x62>
    299e:	88 0f       	add	r24, r24
    29a0:	96 95       	lsr	r25
    29a2:	87 95       	ror	r24
    29a4:	97 f9       	bld	r25, 7
    29a6:	08 95       	ret

000029a8 <floor>:
    29a8:	5d d0       	rcall	.+186    	; 0x2a64 <__fp_trunc>
    29aa:	80 f0       	brcs	.+32     	; 0x29cc <floor+0x24>
    29ac:	9f 37       	cpi	r25, 0x7F	; 127
    29ae:	40 f4       	brcc	.+16     	; 0x29c0 <floor+0x18>
    29b0:	91 11       	cpse	r25, r1
    29b2:	0e f0       	brts	.+2      	; 0x29b6 <floor+0xe>
    29b4:	6f c0       	rjmp	.+222    	; 0x2a94 <__fp_szero>
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	80 e8       	ldi	r24, 0x80	; 128
    29bc:	9f eb       	ldi	r25, 0xBF	; 191
    29be:	08 95       	ret
    29c0:	26 f4       	brtc	.+8      	; 0x29ca <floor+0x22>
    29c2:	1b 16       	cp	r1, r27
    29c4:	61 1d       	adc	r22, r1
    29c6:	71 1d       	adc	r23, r1
    29c8:	81 1d       	adc	r24, r1
    29ca:	01 c0       	rjmp	.+2      	; 0x29ce <__fp_mintl>
    29cc:	1b c0       	rjmp	.+54     	; 0x2a04 <__fp_mpack>

000029ce <__fp_mintl>:
    29ce:	88 23       	and	r24, r24
    29d0:	71 f4       	brne	.+28     	; 0x29ee <__fp_mintl+0x20>
    29d2:	77 23       	and	r23, r23
    29d4:	21 f0       	breq	.+8      	; 0x29de <__fp_mintl+0x10>
    29d6:	98 50       	subi	r25, 0x08	; 8
    29d8:	87 2b       	or	r24, r23
    29da:	76 2f       	mov	r23, r22
    29dc:	07 c0       	rjmp	.+14     	; 0x29ec <__fp_mintl+0x1e>
    29de:	66 23       	and	r22, r22
    29e0:	11 f4       	brne	.+4      	; 0x29e6 <__fp_mintl+0x18>
    29e2:	99 27       	eor	r25, r25
    29e4:	0d c0       	rjmp	.+26     	; 0x2a00 <__fp_mintl+0x32>
    29e6:	90 51       	subi	r25, 0x10	; 16
    29e8:	86 2b       	or	r24, r22
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	2a f0       	brmi	.+10     	; 0x29fa <__fp_mintl+0x2c>
    29f0:	9a 95       	dec	r25
    29f2:	66 0f       	add	r22, r22
    29f4:	77 1f       	adc	r23, r23
    29f6:	88 1f       	adc	r24, r24
    29f8:	da f7       	brpl	.-10     	; 0x29f0 <__fp_mintl+0x22>
    29fa:	88 0f       	add	r24, r24
    29fc:	96 95       	lsr	r25
    29fe:	87 95       	ror	r24
    2a00:	97 f9       	bld	r25, 7
    2a02:	08 95       	ret

00002a04 <__fp_mpack>:
    2a04:	9f 3f       	cpi	r25, 0xFF	; 255
    2a06:	31 f0       	breq	.+12     	; 0x2a14 <__fp_mpack_finite+0xc>

00002a08 <__fp_mpack_finite>:
    2a08:	91 50       	subi	r25, 0x01	; 1
    2a0a:	20 f4       	brcc	.+8      	; 0x2a14 <__fp_mpack_finite+0xc>
    2a0c:	87 95       	ror	r24
    2a0e:	77 95       	ror	r23
    2a10:	67 95       	ror	r22
    2a12:	b7 95       	ror	r27
    2a14:	88 0f       	add	r24, r24
    2a16:	91 1d       	adc	r25, r1
    2a18:	96 95       	lsr	r25
    2a1a:	87 95       	ror	r24
    2a1c:	97 f9       	bld	r25, 7
    2a1e:	08 95       	ret

00002a20 <__fp_split3>:
    2a20:	57 fd       	sbrc	r21, 7
    2a22:	90 58       	subi	r25, 0x80	; 128
    2a24:	44 0f       	add	r20, r20
    2a26:	55 1f       	adc	r21, r21
    2a28:	59 f0       	breq	.+22     	; 0x2a40 <__fp_splitA+0x10>
    2a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a2c:	71 f0       	breq	.+28     	; 0x2a4a <__fp_splitA+0x1a>
    2a2e:	47 95       	ror	r20

00002a30 <__fp_splitA>:
    2a30:	88 0f       	add	r24, r24
    2a32:	97 fb       	bst	r25, 7
    2a34:	99 1f       	adc	r25, r25
    2a36:	61 f0       	breq	.+24     	; 0x2a50 <__fp_splitA+0x20>
    2a38:	9f 3f       	cpi	r25, 0xFF	; 255
    2a3a:	79 f0       	breq	.+30     	; 0x2a5a <__fp_splitA+0x2a>
    2a3c:	87 95       	ror	r24
    2a3e:	08 95       	ret
    2a40:	12 16       	cp	r1, r18
    2a42:	13 06       	cpc	r1, r19
    2a44:	14 06       	cpc	r1, r20
    2a46:	55 1f       	adc	r21, r21
    2a48:	f2 cf       	rjmp	.-28     	; 0x2a2e <__fp_split3+0xe>
    2a4a:	46 95       	lsr	r20
    2a4c:	f1 df       	rcall	.-30     	; 0x2a30 <__fp_splitA>
    2a4e:	08 c0       	rjmp	.+16     	; 0x2a60 <__fp_splitA+0x30>
    2a50:	16 16       	cp	r1, r22
    2a52:	17 06       	cpc	r1, r23
    2a54:	18 06       	cpc	r1, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	f1 cf       	rjmp	.-30     	; 0x2a3c <__fp_splitA+0xc>
    2a5a:	86 95       	lsr	r24
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	61 05       	cpc	r22, r1
    2a60:	08 94       	sec
    2a62:	08 95       	ret

00002a64 <__fp_trunc>:
    2a64:	e5 df       	rcall	.-54     	; 0x2a30 <__fp_splitA>
    2a66:	a0 f0       	brcs	.+40     	; 0x2a90 <__fp_trunc+0x2c>
    2a68:	be e7       	ldi	r27, 0x7E	; 126
    2a6a:	b9 17       	cp	r27, r25
    2a6c:	88 f4       	brcc	.+34     	; 0x2a90 <__fp_trunc+0x2c>
    2a6e:	bb 27       	eor	r27, r27
    2a70:	9f 38       	cpi	r25, 0x8F	; 143
    2a72:	60 f4       	brcc	.+24     	; 0x2a8c <__fp_trunc+0x28>
    2a74:	16 16       	cp	r1, r22
    2a76:	b1 1d       	adc	r27, r1
    2a78:	67 2f       	mov	r22, r23
    2a7a:	78 2f       	mov	r23, r24
    2a7c:	88 27       	eor	r24, r24
    2a7e:	98 5f       	subi	r25, 0xF8	; 248
    2a80:	f7 cf       	rjmp	.-18     	; 0x2a70 <__fp_trunc+0xc>
    2a82:	86 95       	lsr	r24
    2a84:	77 95       	ror	r23
    2a86:	67 95       	ror	r22
    2a88:	b1 1d       	adc	r27, r1
    2a8a:	93 95       	inc	r25
    2a8c:	96 39       	cpi	r25, 0x96	; 150
    2a8e:	c8 f3       	brcs	.-14     	; 0x2a82 <__fp_trunc+0x1e>
    2a90:	08 95       	ret

00002a92 <__fp_zero>:
    2a92:	e8 94       	clt

00002a94 <__fp_szero>:
    2a94:	bb 27       	eor	r27, r27
    2a96:	66 27       	eor	r22, r22
    2a98:	77 27       	eor	r23, r23
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	97 f9       	bld	r25, 7
    2a9e:	08 95       	ret

00002aa0 <__divmodhi4>:
    2aa0:	97 fb       	bst	r25, 7
    2aa2:	07 2e       	mov	r0, r23
    2aa4:	16 f4       	brtc	.+4      	; 0x2aaa <__divmodhi4+0xa>
    2aa6:	00 94       	com	r0
    2aa8:	07 d0       	rcall	.+14     	; 0x2ab8 <__divmodhi4_neg1>
    2aaa:	77 fd       	sbrc	r23, 7
    2aac:	09 d0       	rcall	.+18     	; 0x2ac0 <__divmodhi4_neg2>
    2aae:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__udivmodhi4>
    2ab2:	07 fc       	sbrc	r0, 7
    2ab4:	05 d0       	rcall	.+10     	; 0x2ac0 <__divmodhi4_neg2>
    2ab6:	3e f4       	brtc	.+14     	; 0x2ac6 <__divmodhi4_exit>

00002ab8 <__divmodhi4_neg1>:
    2ab8:	90 95       	com	r25
    2aba:	81 95       	neg	r24
    2abc:	9f 4f       	sbci	r25, 0xFF	; 255
    2abe:	08 95       	ret

00002ac0 <__divmodhi4_neg2>:
    2ac0:	70 95       	com	r23
    2ac2:	61 95       	neg	r22
    2ac4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ac6 <__divmodhi4_exit>:
    2ac6:	08 95       	ret

00002ac8 <__udivmodsi4>:
    2ac8:	a1 e2       	ldi	r26, 0x21	; 33
    2aca:	1a 2e       	mov	r1, r26
    2acc:	aa 1b       	sub	r26, r26
    2ace:	bb 1b       	sub	r27, r27
    2ad0:	fd 01       	movw	r30, r26
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <__udivmodsi4_ep>

00002ad4 <__udivmodsi4_loop>:
    2ad4:	aa 1f       	adc	r26, r26
    2ad6:	bb 1f       	adc	r27, r27
    2ad8:	ee 1f       	adc	r30, r30
    2ada:	ff 1f       	adc	r31, r31
    2adc:	a2 17       	cp	r26, r18
    2ade:	b3 07       	cpc	r27, r19
    2ae0:	e4 07       	cpc	r30, r20
    2ae2:	f5 07       	cpc	r31, r21
    2ae4:	20 f0       	brcs	.+8      	; 0x2aee <__udivmodsi4_ep>
    2ae6:	a2 1b       	sub	r26, r18
    2ae8:	b3 0b       	sbc	r27, r19
    2aea:	e4 0b       	sbc	r30, r20
    2aec:	f5 0b       	sbc	r31, r21

00002aee <__udivmodsi4_ep>:
    2aee:	66 1f       	adc	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	88 1f       	adc	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	1a 94       	dec	r1
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <__udivmodsi4_loop>
    2afa:	60 95       	com	r22
    2afc:	70 95       	com	r23
    2afe:	80 95       	com	r24
    2b00:	90 95       	com	r25
    2b02:	9b 01       	movw	r18, r22
    2b04:	ac 01       	movw	r20, r24
    2b06:	bd 01       	movw	r22, r26
    2b08:	cf 01       	movw	r24, r30
    2b0a:	08 95       	ret

00002b0c <__udivmodhi4>:
    2b0c:	aa 1b       	sub	r26, r26
    2b0e:	bb 1b       	sub	r27, r27
    2b10:	51 e1       	ldi	r21, 0x11	; 17
    2b12:	07 c0       	rjmp	.+14     	; 0x2b22 <__udivmodhi4_ep>

00002b14 <__udivmodhi4_loop>:
    2b14:	aa 1f       	adc	r26, r26
    2b16:	bb 1f       	adc	r27, r27
    2b18:	a6 17       	cp	r26, r22
    2b1a:	b7 07       	cpc	r27, r23
    2b1c:	10 f0       	brcs	.+4      	; 0x2b22 <__udivmodhi4_ep>
    2b1e:	a6 1b       	sub	r26, r22
    2b20:	b7 0b       	sbc	r27, r23

00002b22 <__udivmodhi4_ep>:
    2b22:	88 1f       	adc	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	5a 95       	dec	r21
    2b28:	a9 f7       	brne	.-22     	; 0x2b14 <__udivmodhi4_loop>
    2b2a:	80 95       	com	r24
    2b2c:	90 95       	com	r25
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	08 95       	ret

00002b34 <malloc>:
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	82 30       	cpi	r24, 0x02	; 2
    2b3e:	91 05       	cpc	r25, r1
    2b40:	10 f4       	brcc	.+4      	; 0x2b46 <malloc+0x12>
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	e0 91 74 02 	lds	r30, 0x0274
    2b4a:	f0 91 75 02 	lds	r31, 0x0275
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	c0 e0       	ldi	r28, 0x00	; 0
    2b54:	d0 e0       	ldi	r29, 0x00	; 0
    2b56:	23 c0       	rjmp	.+70     	; 0x2b9e <malloc+0x6a>
    2b58:	40 81       	ld	r20, Z
    2b5a:	51 81       	ldd	r21, Z+1	; 0x01
    2b5c:	48 17       	cp	r20, r24
    2b5e:	59 07       	cpc	r21, r25
    2b60:	a8 f0       	brcs	.+42     	; 0x2b8c <malloc+0x58>
    2b62:	48 17       	cp	r20, r24
    2b64:	59 07       	cpc	r21, r25
    2b66:	61 f4       	brne	.+24     	; 0x2b80 <malloc+0x4c>
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	20 97       	sbiw	r28, 0x00	; 0
    2b6e:	19 f0       	breq	.+6      	; 0x2b76 <malloc+0x42>
    2b70:	9b 83       	std	Y+3, r25	; 0x03
    2b72:	8a 83       	std	Y+2, r24	; 0x02
    2b74:	2e c0       	rjmp	.+92     	; 0x2bd2 <malloc+0x9e>
    2b76:	90 93 75 02 	sts	0x0275, r25
    2b7a:	80 93 74 02 	sts	0x0274, r24
    2b7e:	29 c0       	rjmp	.+82     	; 0x2bd2 <malloc+0x9e>
    2b80:	21 15       	cp	r18, r1
    2b82:	31 05       	cpc	r19, r1
    2b84:	29 f0       	breq	.+10     	; 0x2b90 <malloc+0x5c>
    2b86:	42 17       	cp	r20, r18
    2b88:	53 07       	cpc	r21, r19
    2b8a:	10 f0       	brcs	.+4      	; 0x2b90 <malloc+0x5c>
    2b8c:	a9 01       	movw	r20, r18
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <malloc+0x60>
    2b90:	be 01       	movw	r22, r28
    2b92:	df 01       	movw	r26, r30
    2b94:	02 81       	ldd	r16, Z+2	; 0x02
    2b96:	13 81       	ldd	r17, Z+3	; 0x03
    2b98:	ef 01       	movw	r28, r30
    2b9a:	9a 01       	movw	r18, r20
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	30 97       	sbiw	r30, 0x00	; 0
    2ba0:	d9 f6       	brne	.-74     	; 0x2b58 <malloc+0x24>
    2ba2:	21 15       	cp	r18, r1
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	09 f1       	breq	.+66     	; 0x2bea <malloc+0xb6>
    2ba8:	28 1b       	sub	r18, r24
    2baa:	39 0b       	sbc	r19, r25
    2bac:	24 30       	cpi	r18, 0x04	; 4
    2bae:	31 05       	cpc	r19, r1
    2bb0:	90 f4       	brcc	.+36     	; 0x2bd6 <malloc+0xa2>
    2bb2:	12 96       	adiw	r26, 0x02	; 2
    2bb4:	8d 91       	ld	r24, X+
    2bb6:	9c 91       	ld	r25, X
    2bb8:	13 97       	sbiw	r26, 0x03	; 3
    2bba:	61 15       	cp	r22, r1
    2bbc:	71 05       	cpc	r23, r1
    2bbe:	21 f0       	breq	.+8      	; 0x2bc8 <malloc+0x94>
    2bc0:	fb 01       	movw	r30, r22
    2bc2:	93 83       	std	Z+3, r25	; 0x03
    2bc4:	82 83       	std	Z+2, r24	; 0x02
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <malloc+0x9c>
    2bc8:	90 93 75 02 	sts	0x0275, r25
    2bcc:	80 93 74 02 	sts	0x0274, r24
    2bd0:	fd 01       	movw	r30, r26
    2bd2:	32 96       	adiw	r30, 0x02	; 2
    2bd4:	44 c0       	rjmp	.+136    	; 0x2c5e <malloc+0x12a>
    2bd6:	fd 01       	movw	r30, r26
    2bd8:	e2 0f       	add	r30, r18
    2bda:	f3 1f       	adc	r31, r19
    2bdc:	81 93       	st	Z+, r24
    2bde:	91 93       	st	Z+, r25
    2be0:	22 50       	subi	r18, 0x02	; 2
    2be2:	31 09       	sbc	r19, r1
    2be4:	2d 93       	st	X+, r18
    2be6:	3c 93       	st	X, r19
    2be8:	3a c0       	rjmp	.+116    	; 0x2c5e <malloc+0x12a>
    2bea:	20 91 72 02 	lds	r18, 0x0272
    2bee:	30 91 73 02 	lds	r19, 0x0273
    2bf2:	23 2b       	or	r18, r19
    2bf4:	41 f4       	brne	.+16     	; 0x2c06 <malloc+0xd2>
    2bf6:	20 91 02 02 	lds	r18, 0x0202
    2bfa:	30 91 03 02 	lds	r19, 0x0203
    2bfe:	30 93 73 02 	sts	0x0273, r19
    2c02:	20 93 72 02 	sts	0x0272, r18
    2c06:	20 91 00 02 	lds	r18, 0x0200
    2c0a:	30 91 01 02 	lds	r19, 0x0201
    2c0e:	21 15       	cp	r18, r1
    2c10:	31 05       	cpc	r19, r1
    2c12:	41 f4       	brne	.+16     	; 0x2c24 <malloc+0xf0>
    2c14:	2d b7       	in	r18, 0x3d	; 61
    2c16:	3e b7       	in	r19, 0x3e	; 62
    2c18:	40 91 04 02 	lds	r20, 0x0204
    2c1c:	50 91 05 02 	lds	r21, 0x0205
    2c20:	24 1b       	sub	r18, r20
    2c22:	35 0b       	sbc	r19, r21
    2c24:	e0 91 72 02 	lds	r30, 0x0272
    2c28:	f0 91 73 02 	lds	r31, 0x0273
    2c2c:	e2 17       	cp	r30, r18
    2c2e:	f3 07       	cpc	r31, r19
    2c30:	a0 f4       	brcc	.+40     	; 0x2c5a <malloc+0x126>
    2c32:	2e 1b       	sub	r18, r30
    2c34:	3f 0b       	sbc	r19, r31
    2c36:	28 17       	cp	r18, r24
    2c38:	39 07       	cpc	r19, r25
    2c3a:	78 f0       	brcs	.+30     	; 0x2c5a <malloc+0x126>
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	4e 5f       	subi	r20, 0xFE	; 254
    2c40:	5f 4f       	sbci	r21, 0xFF	; 255
    2c42:	24 17       	cp	r18, r20
    2c44:	35 07       	cpc	r19, r21
    2c46:	48 f0       	brcs	.+18     	; 0x2c5a <malloc+0x126>
    2c48:	4e 0f       	add	r20, r30
    2c4a:	5f 1f       	adc	r21, r31
    2c4c:	50 93 73 02 	sts	0x0273, r21
    2c50:	40 93 72 02 	sts	0x0272, r20
    2c54:	81 93       	st	Z+, r24
    2c56:	91 93       	st	Z+, r25
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <malloc+0x12a>
    2c5a:	e0 e0       	ldi	r30, 0x00	; 0
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	cf 01       	movw	r24, r30
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	08 95       	ret

00002c6a <free>:
    2c6a:	ef 92       	push	r14
    2c6c:	ff 92       	push	r15
    2c6e:	0f 93       	push	r16
    2c70:	1f 93       	push	r17
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <free+0x12>
    2c7a:	8f c0       	rjmp	.+286    	; 0x2d9a <free+0x130>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	12 97       	sbiw	r26, 0x02	; 2
    2c80:	13 96       	adiw	r26, 0x03	; 3
    2c82:	1c 92       	st	X, r1
    2c84:	1e 92       	st	-X, r1
    2c86:	12 97       	sbiw	r26, 0x02	; 2
    2c88:	e0 90 74 02 	lds	r14, 0x0274
    2c8c:	f0 90 75 02 	lds	r15, 0x0275
    2c90:	e1 14       	cp	r14, r1
    2c92:	f1 04       	cpc	r15, r1
    2c94:	89 f4       	brne	.+34     	; 0x2cb8 <free+0x4e>
    2c96:	2d 91       	ld	r18, X+
    2c98:	3c 91       	ld	r19, X
    2c9a:	11 97       	sbiw	r26, 0x01	; 1
    2c9c:	28 0f       	add	r18, r24
    2c9e:	39 1f       	adc	r19, r25
    2ca0:	80 91 72 02 	lds	r24, 0x0272
    2ca4:	90 91 73 02 	lds	r25, 0x0273
    2ca8:	82 17       	cp	r24, r18
    2caa:	93 07       	cpc	r25, r19
    2cac:	89 f5       	brne	.+98     	; 0x2d10 <free+0xa6>
    2cae:	b0 93 73 02 	sts	0x0273, r27
    2cb2:	a0 93 72 02 	sts	0x0272, r26
    2cb6:	71 c0       	rjmp	.+226    	; 0x2d9a <free+0x130>
    2cb8:	e7 01       	movw	r28, r14
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <free+0x58>
    2cc0:	ea 01       	movw	r28, r20
    2cc2:	ca 17       	cp	r28, r26
    2cc4:	db 07       	cpc	r29, r27
    2cc6:	38 f4       	brcc	.+14     	; 0x2cd6 <free+0x6c>
    2cc8:	4a 81       	ldd	r20, Y+2	; 0x02
    2cca:	5b 81       	ldd	r21, Y+3	; 0x03
    2ccc:	9e 01       	movw	r18, r28
    2cce:	41 15       	cp	r20, r1
    2cd0:	51 05       	cpc	r21, r1
    2cd2:	b1 f7       	brne	.-20     	; 0x2cc0 <free+0x56>
    2cd4:	22 c0       	rjmp	.+68     	; 0x2d1a <free+0xb0>
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	62 50       	subi	r22, 0x02	; 2
    2cda:	71 09       	sbc	r23, r1
    2cdc:	fb 01       	movw	r30, r22
    2cde:	d3 83       	std	Z+3, r29	; 0x03
    2ce0:	c2 83       	std	Z+2, r28	; 0x02
    2ce2:	00 81       	ld	r16, Z
    2ce4:	11 81       	ldd	r17, Z+1	; 0x01
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	40 0f       	add	r20, r16
    2cea:	51 1f       	adc	r21, r17
    2cec:	4c 17       	cp	r20, r28
    2cee:	5d 07       	cpc	r21, r29
    2cf0:	61 f4       	brne	.+24     	; 0x2d0a <free+0xa0>
    2cf2:	48 81       	ld	r20, Y
    2cf4:	59 81       	ldd	r21, Y+1	; 0x01
    2cf6:	40 0f       	add	r20, r16
    2cf8:	51 1f       	adc	r21, r17
    2cfa:	4e 5f       	subi	r20, 0xFE	; 254
    2cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    2cfe:	51 83       	std	Z+1, r21	; 0x01
    2d00:	40 83       	st	Z, r20
    2d02:	4a 81       	ldd	r20, Y+2	; 0x02
    2d04:	5b 81       	ldd	r21, Y+3	; 0x03
    2d06:	53 83       	std	Z+3, r21	; 0x03
    2d08:	42 83       	std	Z+2, r20	; 0x02
    2d0a:	21 15       	cp	r18, r1
    2d0c:	31 05       	cpc	r19, r1
    2d0e:	29 f4       	brne	.+10     	; 0x2d1a <free+0xb0>
    2d10:	b0 93 75 02 	sts	0x0275, r27
    2d14:	a0 93 74 02 	sts	0x0274, r26
    2d18:	40 c0       	rjmp	.+128    	; 0x2d9a <free+0x130>
    2d1a:	f9 01       	movw	r30, r18
    2d1c:	b3 83       	std	Z+3, r27	; 0x03
    2d1e:	a2 83       	std	Z+2, r26	; 0x02
    2d20:	e9 01       	movw	r28, r18
    2d22:	69 91       	ld	r22, Y+
    2d24:	79 91       	ld	r23, Y+
    2d26:	c6 0f       	add	r28, r22
    2d28:	d7 1f       	adc	r29, r23
    2d2a:	ac 17       	cp	r26, r28
    2d2c:	bd 07       	cpc	r27, r29
    2d2e:	79 f4       	brne	.+30     	; 0x2d4e <free+0xe4>
    2d30:	dc 01       	movw	r26, r24
    2d32:	5e 91       	ld	r21, -X
    2d34:	4e 91       	ld	r20, -X
    2d36:	46 0f       	add	r20, r22
    2d38:	57 1f       	adc	r21, r23
    2d3a:	4e 5f       	subi	r20, 0xFE	; 254
    2d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3e:	51 83       	std	Z+1, r21	; 0x01
    2d40:	40 83       	st	Z, r20
    2d42:	12 96       	adiw	r26, 0x02	; 2
    2d44:	8d 91       	ld	r24, X+
    2d46:	9c 91       	ld	r25, X
    2d48:	13 97       	sbiw	r26, 0x03	; 3
    2d4a:	93 83       	std	Z+3, r25	; 0x03
    2d4c:	82 83       	std	Z+2, r24	; 0x02
    2d4e:	a0 e0       	ldi	r26, 0x00	; 0
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <free+0xee>
    2d54:	d7 01       	movw	r26, r14
    2d56:	7c 01       	movw	r14, r24
    2d58:	f7 01       	movw	r30, r14
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	c9 f7       	brne	.-14     	; 0x2d54 <free+0xea>
    2d62:	c7 01       	movw	r24, r14
    2d64:	02 96       	adiw	r24, 0x02	; 2
    2d66:	20 81       	ld	r18, Z
    2d68:	31 81       	ldd	r19, Z+1	; 0x01
    2d6a:	82 0f       	add	r24, r18
    2d6c:	93 1f       	adc	r25, r19
    2d6e:	20 91 72 02 	lds	r18, 0x0272
    2d72:	30 91 73 02 	lds	r19, 0x0273
    2d76:	28 17       	cp	r18, r24
    2d78:	39 07       	cpc	r19, r25
    2d7a:	79 f4       	brne	.+30     	; 0x2d9a <free+0x130>
    2d7c:	10 97       	sbiw	r26, 0x00	; 0
    2d7e:	29 f4       	brne	.+10     	; 0x2d8a <free+0x120>
    2d80:	10 92 75 02 	sts	0x0275, r1
    2d84:	10 92 74 02 	sts	0x0274, r1
    2d88:	04 c0       	rjmp	.+8      	; 0x2d92 <free+0x128>
    2d8a:	13 96       	adiw	r26, 0x03	; 3
    2d8c:	1c 92       	st	X, r1
    2d8e:	1e 92       	st	-X, r1
    2d90:	12 97       	sbiw	r26, 0x02	; 2
    2d92:	f0 92 73 02 	sts	0x0273, r15
    2d96:	e0 92 72 02 	sts	0x0272, r14
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	ef 90       	pop	r14
    2da6:	08 95       	ret

00002da8 <memcpy>:
    2da8:	fb 01       	movw	r30, r22
    2daa:	dc 01       	movw	r26, r24
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <memcpy+0xa>
    2dae:	01 90       	ld	r0, Z+
    2db0:	0d 92       	st	X+, r0
    2db2:	41 50       	subi	r20, 0x01	; 1
    2db4:	50 40       	sbci	r21, 0x00	; 0
    2db6:	d8 f7       	brcc	.-10     	; 0x2dae <memcpy+0x6>
    2db8:	08 95       	ret

00002dba <_exit>:
    2dba:	f8 94       	cli

00002dbc <__stop_program>:
    2dbc:	ff cf       	rjmp	.-2      	; 0x2dbc <__stop_program>
