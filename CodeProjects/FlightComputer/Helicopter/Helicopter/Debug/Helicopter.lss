
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800200  0000b384  0000b418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008002a8  008002a8  0000b4c0  2**0
                  ALLOC
  3 .stab         0000444c  00000000  00000000  0000b4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001231  00000000  00000000  0000f90c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00010b3d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000fe8  00000000  00000000  00010b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001a3ea  00000000  00000000  00011b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003c54  00000000  00000000  0002bf3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003bbd  00000000  00000000  0002fb92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003e1c  00000000  00000000  00033750  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000077dc  00000000  00000000  0003756c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008cad  00000000  00000000  0003ed48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e20  00000000  00000000  000479f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
       4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
       8:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
       c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      10:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      18:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      1c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      24:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      28:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      30:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      34:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      3c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      40:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      44:	0c 94 22 3e 	jmp	0x7c44	; 0x7c44 <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      4c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      50:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      58:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      5c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      60:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      68:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      6c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      70:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      74:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      7c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      80:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      84:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      88:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      90:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      94:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      98:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      a0:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      a4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      a8:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      ac:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      b0:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
	}
}
      b4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      b8:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__vector_46>
      bc:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      c0:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      c4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      cc:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      d0:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      d4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      d8:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      dc:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      e0:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <_ZN10helicopter5model11SystemModel25YLateralOuterLoopSetpointEf+0x26>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240
     102:	07 63       	ori	r16, 0x37	; 55
     104:	42 36       	cpi	r20, 0x62	; 98
     106:	b7 9b       	sbis	0x16, 7	; 22
     108:	d8 a7       	std	Y+40, r29	; 0x28
     10a:	1a 39       	cpi	r17, 0x9A	; 154
     10c:	68 56       	subi	r22, 0x68	; 104
     10e:	18 ae       	std	Y+56, r1	; 0x38
     110:	ba ab       	std	Y+50, r27	; 0x32
     112:	55 8c       	ldd	r5, Z+29	; 0x1d
     114:	1d 3c       	cpi	r17, 0xCD	; 205
     116:	b7 cc       	rjmp	.-1682   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
     118:	57 63       	ori	r21, 0x37	; 55
     11a:	bd 6d       	ori	r27, 0xDD	; 221
     11c:	ed fd       	.word	0xfded	; ????
     11e:	75 3e       	cpi	r23, 0xE5	; 229
     120:	f6 17       	cp	r31, r22
     122:	72 31       	cpi	r23, 0x12	; 18
     124:	bf 00       	.word	0x00bf	; ????
     126:	00 00       	nop
     128:	80 3f       	cpi	r24, 0xF0	; 240
     12a:	08 00       	.word	0x0008	; ????
     12c:	00 00       	nop
     12e:	be 92       	st	-X, r11
     130:	24 49       	sbci	r18, 0x94	; 148
     132:	12 3e       	cpi	r17, 0xE2	; 226
     134:	ab aa       	std	Y+51, r10	; 0x33
     136:	aa 2a       	or	r10, r26
     138:	be cd       	rjmp	.-1156   	; 0xfffffcb6 <__eeprom_end+0xff7efcb6>
     13a:	cc cc       	rjmp	.-1640   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     13c:	4c 3e       	cpi	r20, 0xEC	; 236
     13e:	00 00       	nop
     140:	00 80       	ld	r0, Z
     142:	be ab       	std	Y+54, r27	; 0x36
     144:	aa aa       	std	Y+50, r10	; 0x32
     146:	aa 3e       	cpi	r26, 0xEA	; 234
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	bf 00       	.word	0x00bf	; ????
     14e:	00 00       	nop
     150:	80 3f       	cpi	r24, 0xF0	; 240
     152:	00 00       	nop
     154:	00 00       	nop
     156:	00 08       	sbc	r0, r0
     158:	41 78       	andi	r20, 0x81	; 129
     15a:	d3 bb       	out	0x13, r29	; 19
     15c:	43 87       	std	Z+11, r20	; 0x0b
     15e:	d1 13       	cpse	r29, r17
     160:	3d 19       	sub	r19, r13
     162:	0e 3c       	cpi	r16, 0xCE	; 206
     164:	c3 bd       	out	0x23, r28	; 35
     166:	42 82       	std	Z+2, r4	; 0x02
     168:	ad 2b       	or	r26, r29
     16a:	3e 68       	ori	r19, 0x8E	; 142
     16c:	ec 82       	std	Y+4, r14	; 0x04
     16e:	76 be       	out	0x36, r7	; 54
     170:	d9 8f       	std	Y+25, r29	; 0x19
     172:	e1 a9       	ldd	r30, Z+49	; 0x31
     174:	3e 4c       	sbci	r19, 0xCE	; 206
     176:	80 ef       	ldi	r24, 0xF0	; 240
     178:	ff be       	out	0x3f, r15	; 63
     17a:	01 c4       	rjmp	.+2050   	; 0x97e <_ZN10helicopter5model11SystemModel14LateralControlEf+0x2c>
     17c:	ff 7f       	andi	r31, 0xFF	; 255
     17e:	3f 00       	.word	0x003f	; ????
     180:	00 00       	nop
	...

00000184 <__trampolines_start>:
     184:	0c 94 15 35 	jmp	0x6a2a	; 0x6a2a <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
     188:	0c 94 c2 31 	jmp	0x6384	; 0x6384 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     18c:	0c 94 88 43 	jmp	0x8710	; 0x8710 <_ZN10helicopter5tasks17ReadIMUSensorTask11runTaskImplEv>
     190:	0c 94 6b 2b 	jmp	0x56d6	; 0x56d6 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     194:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <_ZN10helicopter5tasks4TaskD0Ev>
     198:	0c 94 cb 45 	jmp	0x8b96	; 0x8b96 <_ZN10helicopter5tasks20SensorProcessingTaskD1Ev>
     19c:	0c 94 1e 4a 	jmp	0x943c	; 0x943c <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     1a0:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE>
     1a4:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <_ZN10helicopter5tasks12FlashLEDTask4initEv>
     1a8:	0c 94 89 49 	jmp	0x9312	; 0x9312 <_ZN10helicopter5tasks4Task11runTaskImplEv>
     1ac:	0c 94 c4 49 	jmp	0x9388	; 0x9388 <_ZN10helicopter5tasks4Task7runTaskEv>
     1b0:	0c 94 91 41 	jmp	0x8322	; 0x8322 <_ZN10helicopter5tasks16PIDInnerLoopTaskD1Ev>
     1b4:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <_ZN10helicopter8messages7MessageD1Ev>
     1b8:	0c 94 74 49 	jmp	0x92e8	; 0x92e8 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>
     1bc:	0c 94 23 42 	jmp	0x8446	; 0x8446 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
     1c0:	0c 94 73 4a 	jmp	0x94e6	; 0x94e6 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
     1c4:	0c 94 0e 44 	jmp	0x881c	; 0x881c <_ZN10helicopter5tasks17ReadIMUSensorTaskD1Ev>
     1c8:	0c 94 f9 31 	jmp	0x63f2	; 0x63f2 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     1cc:	0c 94 d1 44 	jmp	0x89a2	; 0x89a2 <_ZN10helicopter5tasks20SensorProcessingTask11runTaskImplEv>
     1d0:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
     1d4:	0c 94 ad 2a 	jmp	0x555a	; 0x555a <_ZN10helicopter8messages7Message8getBytesEv>
     1d8:	0c 94 b3 41 	jmp	0x8366	; 0x8366 <_ZN10helicopter5tasks16PIDInnerLoopTaskD0Ev>
     1dc:	0c 94 bc 2a 	jmp	0x5578	; 0x5578 <_ZN10helicopter8messages7Message12buildMessageEPh>
     1e0:	0c 94 0f 2b 	jmp	0x561e	; 0x561e <_ZN10helicopter8messages11SyncMessageD1Ev>
     1e4:	0c 94 bf 13 	jmp	0x277e	; 0x277e <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     1e8:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     1ec:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
     1f0:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE>
     1f4:	0c 94 45 42 	jmp	0x848a	; 0x848a <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>
     1f8:	0c 94 76 41 	jmp	0x82ec	; 0x82ec <_ZN10helicopter5tasks16PIDInnerLoopTask11runTaskImplEv>
     1fc:	0c 94 fd 46 	jmp	0x8dfa	; 0x8dfa <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
     200:	0c 94 30 44 	jmp	0x8860	; 0x8860 <_ZN10helicopter5tasks17ReadIMUSensorTaskD0Ev>
     204:	0c 94 ed 45 	jmp	0x8bda	; 0x8bda <_ZN10helicopter5tasks20SensorProcessingTaskD0Ev>
     208:	0c 94 46 2b 	jmp	0x568c	; 0x568c <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     20c:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <_ZN10helicopter8messages11SyncMessageD0Ev>
     210:	0c 94 21 24 	jmp	0x4842	; 0x4842 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
     214:	0c 94 e4 31 	jmp	0x63c8	; 0x63c8 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     218:	0c 94 37 41 	jmp	0x826e	; 0x826e <_ZN10helicopter5tasks4Task4initEv>
     21c:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     220:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     224:	0c 94 51 4a 	jmp	0x94a2	; 0x94a2 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
     228:	0c 94 86 2a 	jmp	0x550c	; 0x550c <_ZN10helicopter8messages7MessageD0Ev>
     22c:	0c 94 52 49 	jmp	0x92a4	; 0x92a4 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
     230:	0c 94 fa 41 	jmp	0x83f4	; 0x83f4 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d1 e2       	ldi	r29, 0x21	; 33
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	0c bf       	out	0x3c, r16	; 60

00000244 <__do_copy_data>:
     244:	12 e0       	ldi	r17, 0x02	; 2
     246:	a0 e0       	ldi	r26, 0x00	; 0
     248:	b2 e0       	ldi	r27, 0x02	; 2
     24a:	e4 e8       	ldi	r30, 0x84	; 132
     24c:	f3 eb       	ldi	r31, 0xB3	; 179
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0b bf       	out	0x3b, r16	; 59
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x14>
     254:	07 90       	elpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	a8 3a       	cpi	r26, 0xA8	; 168
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0x10>

0000025e <__do_clear_bss>:
     25e:	22 e0       	ldi	r18, 0x02	; 2
     260:	a8 ea       	ldi	r26, 0xA8	; 168
     262:	b2 e0       	ldi	r27, 0x02	; 2
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a0 3b       	cpi	r26, 0xB0	; 176
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	0e 94 57 21 	call	0x42ae	; 0x42ae <main>
     272:	0c 94 c0 59 	jmp	0xb380	; 0xb380 <_exit>

00000276 <__bad_interrupt>:
     276:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027a <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>:
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			

			float MagYawDegrees() const { return magYawDegrees; }
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	1f 92       	push	r1
     280:	1f 92       	push	r1
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	9a 83       	std	Y+2, r25	; 0x02
     288:	89 83       	std	Y+1, r24	; 0x01
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	fc 01       	movw	r30, r24
     290:	81 81       	ldd	r24, Z+1	; 0x01
     292:	92 81       	ldd	r25, Z+2	; 0x02
     294:	a3 81       	ldd	r26, Z+3	; 0x03
     296:	b4 81       	ldd	r27, Z+4	; 0x04
     298:	bc 01       	movw	r22, r24
     29a:	cd 01       	movw	r24, r26
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>:
			void MagYawDegrees(float val) { magYawDegrees = val; }	
				
				
				
			float ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	1f 92       	push	r1
     2ac:	1f 92       	push	r1
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	9a 83       	std	Y+2, r25	; 0x02
     2b4:	89 83       	std	Y+1, r24	; 0x01
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	fc 01       	movw	r30, r24
     2bc:	85 81       	ldd	r24, Z+5	; 0x05
     2be:	96 81       	ldd	r25, Z+6	; 0x06
     2c0:	a7 81       	ldd	r26, Z+7	; 0x07
     2c2:	b0 85       	ldd	r27, Z+8	; 0x08
     2c4:	bc 01       	movw	r22, r24
     2c6:	cd 01       	movw	r24, r26
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <_ZNK10helicopter5model11SystemModel10YawControlEv>:
			void ReferenceMagYawDegrees(float val) { referenceMagYawDegrees = val;}
				
				
			float YawControl() const {return yawControl;}
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	1f 92       	push	r1
     2d8:	1f 92       	push	r1
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	9a 83       	std	Y+2, r25	; 0x02
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	fc 01       	movw	r30, r24
     2e8:	81 85       	ldd	r24, Z+9	; 0x09
     2ea:	92 85       	ldd	r25, Z+10	; 0x0a
     2ec:	a3 85       	ldd	r26, Z+11	; 0x0b
     2ee:	b4 85       	ldd	r27, Z+12	; 0x0c
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_ZN10helicopter5model11SystemModel10YawControlEf>:
			void YawControl(float val) { yawControl = val;}
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	00 d0       	rcall	.+0      	; 0x304 <_ZN10helicopter5model11SystemModel10YawControlEf+0x6>
     304:	00 d0       	rcall	.+0      	; 0x306 <_ZN10helicopter5model11SystemModel10YawControlEf+0x8>
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	9a 83       	std	Y+2, r25	; 0x02
     30c:	89 83       	std	Y+1, r24	; 0x01
     30e:	4b 83       	std	Y+3, r20	; 0x03
     310:	5c 83       	std	Y+4, r21	; 0x04
     312:	6d 83       	std	Y+5, r22	; 0x05
     314:	7e 83       	std	Y+6, r23	; 0x06
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	3a 81       	ldd	r19, Y+2	; 0x02
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
     31c:	9c 81       	ldd	r25, Y+4	; 0x04
     31e:	ad 81       	ldd	r26, Y+5	; 0x05
     320:	be 81       	ldd	r27, Y+6	; 0x06
     322:	f9 01       	movw	r30, r18
     324:	81 87       	std	Z+9, r24	; 0x09
     326:	92 87       	std	Z+10, r25	; 0x0a
     328:	a3 87       	std	Z+11, r26	; 0x0b
     32a:	b4 87       	std	Z+12, r27	; 0x0c
     32c:	26 96       	adiw	r28, 0x06	; 6
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>:
				
			float YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	1f 92       	push	r1
     344:	1f 92       	push	r1
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	fc 01       	movw	r30, r24
     354:	85 85       	ldd	r24, Z+13	; 0x0d
     356:	96 85       	ldd	r25, Z+14	; 0x0e
     358:	a7 85       	ldd	r26, Z+15	; 0x0f
     35a:	b0 89       	ldd	r27, Z+16	; 0x10
     35c:	bc 01       	movw	r22, r24
     35e:	cd 01       	movw	r24, r26
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEf>:
			void YawControlBeforeServoLimitsAdjustment(float val) { yawControlBeforeServoLimitsAdjustment = val;}
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEf+0x6>
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEf+0x8>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	4b 83       	std	Y+3, r20	; 0x03
     37c:	5c 83       	std	Y+4, r21	; 0x04
     37e:	6d 83       	std	Y+5, r22	; 0x05
     380:	7e 83       	std	Y+6, r23	; 0x06
     382:	29 81       	ldd	r18, Y+1	; 0x01
     384:	3a 81       	ldd	r19, Y+2	; 0x02
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	ad 81       	ldd	r26, Y+5	; 0x05
     38c:	be 81       	ldd	r27, Y+6	; 0x06
     38e:	f9 01       	movw	r30, r18
     390:	85 87       	std	Z+13, r24	; 0x0d
     392:	96 87       	std	Z+14, r25	; 0x0e
     394:	a7 87       	std	Z+15, r26	; 0x0f
     396:	b0 8b       	std	Z+16, r27	; 0x10
     398:	26 96       	adiw	r28, 0x06	; 6
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>:
				
			float YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	1f 92       	push	r1
     3b0:	1f 92       	push	r1
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	9a 83       	std	Y+2, r25	; 0x02
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	fc 01       	movw	r30, r24
     3c0:	81 89       	ldd	r24, Z+17	; 0x11
     3c2:	92 89       	ldd	r25, Z+18	; 0x12
     3c4:	a3 89       	ldd	r26, Z+19	; 0x13
     3c6:	b4 89       	ldd	r27, Z+20	; 0x14
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>:
			void YawVelocityDegreesPerSecond(float val) { yawVelocityDegreesPerSecond = val;}
				
			float ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	1f 92       	push	r1
     3dc:	1f 92       	push	r1
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	9a 83       	std	Y+2, r25	; 0x02
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ea:	fc 01       	movw	r30, r24
     3ec:	85 89       	ldd	r24, Z+21	; 0x15
     3ee:	96 89       	ldd	r25, Z+22	; 0x16
     3f0:	a7 89       	ldd	r26, Z+23	; 0x17
     3f2:	b0 8d       	ldd	r27, Z+24	; 0x18
     3f4:	bc 01       	movw	r22, r24
     3f6:	cd 01       	movw	r24, r26
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <_ZNK10helicopter5model11SystemModel11YawIntegralEv>:
			void ReferenceYawVelocityDegreesPerSecond(float val) { referenceYawVelocityDegreesPerSecond = val;}
				
			float YawIntegral() const {return yawIntegral;}
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	1f 92       	push	r1
     408:	1f 92       	push	r1
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	9a 83       	std	Y+2, r25	; 0x02
     410:	89 83       	std	Y+1, r24	; 0x01
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	9a 81       	ldd	r25, Y+2	; 0x02
     416:	fc 01       	movw	r30, r24
     418:	81 8d       	ldd	r24, Z+25	; 0x19
     41a:	92 8d       	ldd	r25, Z+26	; 0x1a
     41c:	a3 8d       	ldd	r26, Z+27	; 0x1b
     41e:	b4 8d       	ldd	r27, Z+28	; 0x1c
     420:	bc 01       	movw	r22, r24
     422:	cd 01       	movw	r24, r26
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN10helicopter5model11SystemModel11YawIntegralEf>:
			void YawIntegral(float val) { yawIntegral = val;}
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <_ZN10helicopter5model11SystemModel11YawIntegralEf+0x6>
     434:	00 d0       	rcall	.+0      	; 0x436 <_ZN10helicopter5model11SystemModel11YawIntegralEf+0x8>
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	9a 83       	std	Y+2, r25	; 0x02
     43c:	89 83       	std	Y+1, r24	; 0x01
     43e:	4b 83       	std	Y+3, r20	; 0x03
     440:	5c 83       	std	Y+4, r21	; 0x04
     442:	6d 83       	std	Y+5, r22	; 0x05
     444:	7e 83       	std	Y+6, r23	; 0x06
     446:	29 81       	ldd	r18, Y+1	; 0x01
     448:	3a 81       	ldd	r19, Y+2	; 0x02
     44a:	8b 81       	ldd	r24, Y+3	; 0x03
     44c:	9c 81       	ldd	r25, Y+4	; 0x04
     44e:	ad 81       	ldd	r26, Y+5	; 0x05
     450:	be 81       	ldd	r27, Y+6	; 0x06
     452:	f9 01       	movw	r30, r18
     454:	81 8f       	std	Z+25, r24	; 0x19
     456:	92 8f       	std	Z+26, r25	; 0x1a
     458:	a3 8f       	std	Z+27, r26	; 0x1b
     45a:	b4 8f       	std	Z+28, r27	; 0x1c
     45c:	26 96       	adiw	r28, 0x06	; 6
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <_ZN10helicopter5model11SystemModel15YawProportionalEf>:

			float YawProportional() const {return yawProportional;}
			void YawProportional(float val) { yawProportional = val;}
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <_ZN10helicopter5model11SystemModel15YawProportionalEf+0x6>
     474:	00 d0       	rcall	.+0      	; 0x476 <_ZN10helicopter5model11SystemModel15YawProportionalEf+0x8>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	4b 83       	std	Y+3, r20	; 0x03
     480:	5c 83       	std	Y+4, r21	; 0x04
     482:	6d 83       	std	Y+5, r22	; 0x05
     484:	7e 83       	std	Y+6, r23	; 0x06
     486:	29 81       	ldd	r18, Y+1	; 0x01
     488:	3a 81       	ldd	r19, Y+2	; 0x02
     48a:	8b 81       	ldd	r24, Y+3	; 0x03
     48c:	9c 81       	ldd	r25, Y+4	; 0x04
     48e:	ad 81       	ldd	r26, Y+5	; 0x05
     490:	be 81       	ldd	r27, Y+6	; 0x06
     492:	f9 01       	movw	r30, r18
     494:	85 8f       	std	Z+29, r24	; 0x1d
     496:	96 8f       	std	Z+30, r25	; 0x1e
     498:	a7 8f       	std	Z+31, r26	; 0x1f
     49a:	b0 a3       	std	Z+32, r27	; 0x20
     49c:	26 96       	adiw	r28, 0x06	; 6
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEf>:

			float YawDerivativeError() const {return yawDerivativeError;}
			void YawDerivativeError(float val) { yawDerivativeError = val;}								
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEf+0x6>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEf+0x8>
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	9a 83       	std	Y+2, r25	; 0x02
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	4b 83       	std	Y+3, r20	; 0x03
     4c0:	5c 83       	std	Y+4, r21	; 0x04
     4c2:	6d 83       	std	Y+5, r22	; 0x05
     4c4:	7e 83       	std	Y+6, r23	; 0x06
     4c6:	29 81       	ldd	r18, Y+1	; 0x01
     4c8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ca:	8b 81       	ldd	r24, Y+3	; 0x03
     4cc:	9c 81       	ldd	r25, Y+4	; 0x04
     4ce:	ad 81       	ldd	r26, Y+5	; 0x05
     4d0:	be 81       	ldd	r27, Y+6	; 0x06
     4d2:	f9 01       	movw	r30, r18
     4d4:	81 a3       	std	Z+33, r24	; 0x21
     4d6:	92 a3       	std	Z+34, r25	; 0x22
     4d8:	a3 a3       	std	Z+35, r26	; 0x23
     4da:	b4 a3       	std	Z+36, r27	; 0x24
     4dc:	26 96       	adiw	r28, 0x06	; 6
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <_ZNK10helicopter5model11SystemModel13XNEDBodyFrameEv>:
																							
		
		
		
			float XNEDBodyFrame() const {return xNEDBodyFrame;}
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	1f 92       	push	r1
     4f4:	1f 92       	push	r1
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	9a 83       	std	Y+2, r25	; 0x02
     4fc:	89 83       	std	Y+1, r24	; 0x01
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	fc 01       	movw	r30, r24
     504:	85 a1       	ldd	r24, Z+37	; 0x25
     506:	96 a1       	ldd	r25, Z+38	; 0x26
     508:	a7 a1       	ldd	r26, Z+39	; 0x27
     50a:	b0 a5       	ldd	r27, Z+40	; 0x28
     50c:	bc 01       	movw	r22, r24
     50e:	cd 01       	movw	r24, r26
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <_ZNK10helicopter5model11SystemModel22ReferenceXNEDBodyFrameEv>:
			void XNEDBodyFrame(float val) { xNEDBodyFrame = val;}
						
			float ReferenceXNEDBodyFrame() const {return referenceXNEDBodyFrame;}
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	1f 92       	push	r1
     520:	1f 92       	push	r1
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	fc 01       	movw	r30, r24
     530:	81 a5       	ldd	r24, Z+41	; 0x29
     532:	92 a5       	ldd	r25, Z+42	; 0x2a
     534:	a3 a5       	ldd	r26, Z+43	; 0x2b
     536:	b4 a5       	ldd	r27, Z+44	; 0x2c
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <_ZNK10helicopter5model11SystemModel43LongitudeControlBeforeServoLimitsAdjustmentEv>:
			void ReferenceXNEDBodyFrame(float val) { referenceXNEDBodyFrame = val;}

			float LongitudeControlBeforeServoLimitsAdjustment() const {return longitudeControlBeforeServoLimitsAdjustment;}
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	1f 92       	push	r1
     54c:	1f 92       	push	r1
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	89 83       	std	Y+1, r24	; 0x01
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	fc 01       	movw	r30, r24
     55c:	85 a5       	ldd	r24, Z+45	; 0x2d
     55e:	96 a5       	ldd	r25, Z+46	; 0x2e
     560:	a7 a5       	ldd	r26, Z+47	; 0x2f
     562:	b0 a9       	ldd	r27, Z+48	; 0x30
     564:	bc 01       	movw	r22, r24
     566:	cd 01       	movw	r24, r26
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <_ZN10helicopter5model11SystemModel43LongitudeControlBeforeServoLimitsAdjustmentEf>:
			void LongitudeControlBeforeServoLimitsAdjustment(float val) { longitudeControlBeforeServoLimitsAdjustment = val;}
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <_ZN10helicopter5model11SystemModel43LongitudeControlBeforeServoLimitsAdjustmentEf+0x6>
     578:	00 d0       	rcall	.+0      	; 0x57a <_ZN10helicopter5model11SystemModel43LongitudeControlBeforeServoLimitsAdjustmentEf+0x8>
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	9a 83       	std	Y+2, r25	; 0x02
     580:	89 83       	std	Y+1, r24	; 0x01
     582:	4b 83       	std	Y+3, r20	; 0x03
     584:	5c 83       	std	Y+4, r21	; 0x04
     586:	6d 83       	std	Y+5, r22	; 0x05
     588:	7e 83       	std	Y+6, r23	; 0x06
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	3a 81       	ldd	r19, Y+2	; 0x02
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	9c 81       	ldd	r25, Y+4	; 0x04
     592:	ad 81       	ldd	r26, Y+5	; 0x05
     594:	be 81       	ldd	r27, Y+6	; 0x06
     596:	f9 01       	movw	r30, r18
     598:	85 a7       	std	Z+45, r24	; 0x2d
     59a:	96 a7       	std	Z+46, r25	; 0x2e
     59c:	a7 a7       	std	Z+47, r26	; 0x2f
     59e:	b0 ab       	std	Z+48, r27	; 0x30
     5a0:	26 96       	adiw	r28, 0x06	; 6
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <_ZNK10helicopter5model11SystemModel16LongitudeControlEv>:

			float LongitudeControl() const {return longitudeControl;}
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	1f 92       	push	r1
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	fc 01       	movw	r30, r24
     5c8:	81 a9       	ldd	r24, Z+49	; 0x31
     5ca:	92 a9       	ldd	r25, Z+50	; 0x32
     5cc:	a3 a9       	ldd	r26, Z+51	; 0x33
     5ce:	b4 a9       	ldd	r27, Z+52	; 0x34
     5d0:	bc 01       	movw	r22, r24
     5d2:	cd 01       	movw	r24, r26
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <_ZN10helicopter5model11SystemModel16LongitudeControlEf>:
			void LongitudeControl(float val) { longitudeControl = val;}
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <_ZN10helicopter5model11SystemModel16LongitudeControlEf+0x6>
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <_ZN10helicopter5model11SystemModel16LongitudeControlEf+0x8>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	9a 83       	std	Y+2, r25	; 0x02
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	4b 83       	std	Y+3, r20	; 0x03
     5f0:	5c 83       	std	Y+4, r21	; 0x04
     5f2:	6d 83       	std	Y+5, r22	; 0x05
     5f4:	7e 83       	std	Y+6, r23	; 0x06
     5f6:	29 81       	ldd	r18, Y+1	; 0x01
     5f8:	3a 81       	ldd	r19, Y+2	; 0x02
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	ad 81       	ldd	r26, Y+5	; 0x05
     600:	be 81       	ldd	r27, Y+6	; 0x06
     602:	f9 01       	movw	r30, r18
     604:	81 ab       	std	Z+49, r24	; 0x31
     606:	92 ab       	std	Z+50, r25	; 0x32
     608:	a3 ab       	std	Z+51, r26	; 0x33
     60a:	b4 ab       	std	Z+52, r27	; 0x34
     60c:	26 96       	adiw	r28, 0x06	; 6
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <_ZNK10helicopter5model11SystemModel24XVelocityMetersPerSecondEv>:
				
			float XVelocityMetersPerSecond() const {return xVelocityMetersPerSecond;}
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	1f 92       	push	r1
     624:	1f 92       	push	r1
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	9a 83       	std	Y+2, r25	; 0x02
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	fc 01       	movw	r30, r24
     634:	85 a9       	ldd	r24, Z+53	; 0x35
     636:	96 a9       	ldd	r25, Z+54	; 0x36
     638:	a7 a9       	ldd	r26, Z+55	; 0x37
     63a:	b0 ad       	ldd	r27, Z+56	; 0x38
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <_ZNK10helicopter5model11SystemModel33ReferenceXVelocityMetersPerSecondEv>:
			void XVelocityMetersPerSecond(float val) { xVelocityMetersPerSecond = val;}
				
			float ReferenceXVelocityMetersPerSecond() const {return referenceXVelocityMetersPerSecond;}
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	1f 92       	push	r1
     650:	1f 92       	push	r1
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	fc 01       	movw	r30, r24
     660:	81 ad       	ldd	r24, Z+57	; 0x39
     662:	92 ad       	ldd	r25, Z+58	; 0x3a
     664:	a3 ad       	ldd	r26, Z+59	; 0x3b
     666:	b4 ad       	ldd	r27, Z+60	; 0x3c
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <_ZNK10helicopter5model11SystemModel27XLongitudeOuterLoopSetpointEv>:
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
				
			float XLongitudeOuterLoopSetpoint() const {return xLongitudeOuterLoopSetpoint;}
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	1f 92       	push	r1
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	cd 96       	adiw	r24, 0x3d	; 61
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	a2 81       	ldd	r26, Z+2	; 0x02
     694:	b3 81       	ldd	r27, Z+3	; 0x03
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <_ZN10helicopter5model11SystemModel27XLongitudeOuterLoopSetpointEf>:
			void XLongitudeOuterLoopSetpoint(float val) { xLongitudeOuterLoopSetpoint = val;}
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <_ZN10helicopter5model11SystemModel27XLongitudeOuterLoopSetpointEf+0x6>
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <_ZN10helicopter5model11SystemModel27XLongitudeOuterLoopSetpointEf+0x8>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	4b 83       	std	Y+3, r20	; 0x03
     6b6:	5c 83       	std	Y+4, r21	; 0x04
     6b8:	6d 83       	std	Y+5, r22	; 0x05
     6ba:	7e 83       	std	Y+6, r23	; 0x06
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	9c 01       	movw	r18, r24
     6c2:	23 5c       	subi	r18, 0xC3	; 195
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	ad 81       	ldd	r26, Y+5	; 0x05
     6cc:	be 81       	ldd	r27, Y+6	; 0x06
     6ce:	f9 01       	movw	r30, r18
     6d0:	80 83       	st	Z, r24
     6d2:	91 83       	std	Z+1, r25	; 0x01
     6d4:	a2 83       	std	Z+2, r26	; 0x02
     6d6:	b3 83       	std	Z+3, r27	; 0x03
     6d8:	26 96       	adiw	r28, 0x06	; 6
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <_ZN10helicopter5model11SystemModel13XProportionalEf>:
				
			float XProportional() const {return xProportional;}
			void XProportional(float val) { xProportional = val;}
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <_ZN10helicopter5model11SystemModel13XProportionalEf+0x6>
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <_ZN10helicopter5model11SystemModel13XProportionalEf+0x8>
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	9a 83       	std	Y+2, r25	; 0x02
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	4b 83       	std	Y+3, r20	; 0x03
     6fc:	5c 83       	std	Y+4, r21	; 0x04
     6fe:	6d 83       	std	Y+5, r22	; 0x05
     700:	7e 83       	std	Y+6, r23	; 0x06
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	9c 01       	movw	r18, r24
     708:	2f 5b       	subi	r18, 0xBF	; 191
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	ad 81       	ldd	r26, Y+5	; 0x05
     712:	be 81       	ldd	r27, Y+6	; 0x06
     714:	f9 01       	movw	r30, r18
     716:	80 83       	st	Z, r24
     718:	91 83       	std	Z+1, r25	; 0x01
     71a:	a2 83       	std	Z+2, r26	; 0x02
     71c:	b3 83       	std	Z+3, r27	; 0x03
     71e:	26 96       	adiw	r28, 0x06	; 6
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <_ZNK10helicopter5model11SystemModel9XIntegralEv>:
				
			float XIntegral() const {return xIntegral;}
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	1f 92       	push	r1
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	9a 83       	std	Y+2, r25	; 0x02
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	8b 5b       	subi	r24, 0xBB	; 187
     746:	9f 4f       	sbci	r25, 0xFF	; 255
     748:	fc 01       	movw	r30, r24
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
     74e:	a2 81       	ldd	r26, Z+2	; 0x02
     750:	b3 81       	ldd	r27, Z+3	; 0x03
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <_ZN10helicopter5model11SystemModel9XIntegralEf>:
			void XIntegral(float val) { xIntegral = val;}
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	00 d0       	rcall	.+0      	; 0x766 <_ZN10helicopter5model11SystemModel9XIntegralEf+0x6>
     766:	00 d0       	rcall	.+0      	; 0x768 <_ZN10helicopter5model11SystemModel9XIntegralEf+0x8>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	4b 83       	std	Y+3, r20	; 0x03
     772:	5c 83       	std	Y+4, r21	; 0x04
     774:	6d 83       	std	Y+5, r22	; 0x05
     776:	7e 83       	std	Y+6, r23	; 0x06
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	9c 01       	movw	r18, r24
     77e:	2b 5b       	subi	r18, 0xBB	; 187
     780:	3f 4f       	sbci	r19, 0xFF	; 255
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	ad 81       	ldd	r26, Y+5	; 0x05
     788:	be 81       	ldd	r27, Y+6	; 0x06
     78a:	f9 01       	movw	r30, r18
     78c:	80 83       	st	Z, r24
     78e:	91 83       	std	Z+1, r25	; 0x01
     790:	a2 83       	std	Z+2, r26	; 0x02
     792:	b3 83       	std	Z+3, r27	; 0x03
     794:	26 96       	adiw	r28, 0x06	; 6
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <_ZN10helicopter5model11SystemModel16XDerivativeErrorEf>:
				
			float XDerivativeError() const {return xDerivativeError;}
			void XDerivativeError(float val) { xDerivativeError = val;}
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <_ZN10helicopter5model11SystemModel16XDerivativeErrorEf+0x6>
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <_ZN10helicopter5model11SystemModel16XDerivativeErrorEf+0x8>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	4b 83       	std	Y+3, r20	; 0x03
     7b8:	5c 83       	std	Y+4, r21	; 0x04
     7ba:	6d 83       	std	Y+5, r22	; 0x05
     7bc:	7e 83       	std	Y+6, r23	; 0x06
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	9a 81       	ldd	r25, Y+2	; 0x02
     7c2:	9c 01       	movw	r18, r24
     7c4:	27 5b       	subi	r18, 0xB7	; 183
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	9c 81       	ldd	r25, Y+4	; 0x04
     7cc:	ad 81       	ldd	r26, Y+5	; 0x05
     7ce:	be 81       	ldd	r27, Y+6	; 0x06
     7d0:	f9 01       	movw	r30, r18
     7d2:	80 83       	st	Z, r24
     7d4:	91 83       	std	Z+1, r25	; 0x01
     7d6:	a2 83       	std	Z+2, r26	; 0x02
     7d8:	b3 83       	std	Z+3, r27	; 0x03
     7da:	26 96       	adiw	r28, 0x06	; 6
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <_ZNK10helicopter5model11SystemModel17ThetaPitchDegreesEv>:
				
		
			float ThetaPitchDegrees() const {return thetaPitchDegrees;}
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	1f 92       	push	r1
     7f2:	1f 92       	push	r1
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	89 83       	std	Y+1, r24	; 0x01
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	83 5b       	subi	r24, 0xB3	; 179
     802:	9f 4f       	sbci	r25, 0xFF	; 255
     804:	fc 01       	movw	r30, r24
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	a2 81       	ldd	r26, Z+2	; 0x02
     80c:	b3 81       	ldd	r27, Z+3	; 0x03
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <_ZNK10helicopter5model11SystemModel33PitchAngularVelocityRadsPerSecondEv>:
			void ThetaPitchDegrees(float val) {thetaPitchDegrees = val;}
		
			float PitchAngularVelocityRadsPerSecond() const {return pitchAngularVelocityRadsPerSecond;}
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	1f 92       	push	r1
     822:	1f 92       	push	r1
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	9a 81       	ldd	r25, Y+2	; 0x02
     830:	8f 5a       	subi	r24, 0xAF	; 175
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	91 81       	ldd	r25, Z+1	; 0x01
     83a:	a2 81       	ldd	r26, Z+2	; 0x02
     83c:	b3 81       	ldd	r27, Z+3	; 0x03
     83e:	bc 01       	movw	r22, r24
     840:	cd 01       	movw	r24, r26
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <_ZNK10helicopter5model11SystemModel13YNEDBodyFrameEv>:
						
						
						


			float YNEDBodyFrame() const {return yNEDBodyFrame;}
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	1f 92       	push	r1
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	8b 5a       	subi	r24, 0xAB	; 171
     862:	9f 4f       	sbci	r25, 0xFF	; 255
     864:	fc 01       	movw	r30, r24
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	a2 81       	ldd	r26, Z+2	; 0x02
     86c:	b3 81       	ldd	r27, Z+3	; 0x03
     86e:	bc 01       	movw	r22, r24
     870:	cd 01       	movw	r24, r26
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <_ZNK10helicopter5model11SystemModel22ReferenceYNEDBodyFrameEv>:
			void YNEDBodyFrame(float val) { yNEDBodyFrame = val;}

			float ReferenceYNEDBodyFrame() const {return referenceYNEDBodyFrame;}
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	1f 92       	push	r1
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	9a 81       	ldd	r25, Y+2	; 0x02
     890:	87 5a       	subi	r24, 0xA7	; 167
     892:	9f 4f       	sbci	r25, 0xFF	; 255
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	a2 81       	ldd	r26, Z+2	; 0x02
     89c:	b3 81       	ldd	r27, Z+3	; 0x03
     89e:	bc 01       	movw	r22, r24
     8a0:	cd 01       	movw	r24, r26
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <_ZNK10helicopter5model11SystemModel41LateralControlBeforeServoLimitsAdjustmentEv>:
			void ReferenceYNEDBodyFrame(float val) { referenceYNEDBodyFrame = val;}

			float LateralControlBeforeServoLimitsAdjustment() const {return lateralControlBeforeServoLimitsAdjustment;}
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	1f 92       	push	r1
     8b2:	1f 92       	push	r1
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	9a 83       	std	Y+2, r25	; 0x02
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	83 5a       	subi	r24, 0xA3	; 163
     8c2:	9f 4f       	sbci	r25, 0xFF	; 255
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	91 81       	ldd	r25, Z+1	; 0x01
     8ca:	a2 81       	ldd	r26, Z+2	; 0x02
     8cc:	b3 81       	ldd	r27, Z+3	; 0x03
     8ce:	bc 01       	movw	r22, r24
     8d0:	cd 01       	movw	r24, r26
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <_ZN10helicopter5model11SystemModel41LateralControlBeforeServoLimitsAdjustmentEf>:
			void LateralControlBeforeServoLimitsAdjustment(float val) { lateralControlBeforeServoLimitsAdjustment = val;}
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <_ZN10helicopter5model11SystemModel41LateralControlBeforeServoLimitsAdjustmentEf+0x6>
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <_ZN10helicopter5model11SystemModel41LateralControlBeforeServoLimitsAdjustmentEf+0x8>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	4b 83       	std	Y+3, r20	; 0x03
     8ee:	5c 83       	std	Y+4, r21	; 0x04
     8f0:	6d 83       	std	Y+5, r22	; 0x05
     8f2:	7e 83       	std	Y+6, r23	; 0x06
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	9a 81       	ldd	r25, Y+2	; 0x02
     8f8:	9c 01       	movw	r18, r24
     8fa:	23 5a       	subi	r18, 0xA3	; 163
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	9c 81       	ldd	r25, Y+4	; 0x04
     902:	ad 81       	ldd	r26, Y+5	; 0x05
     904:	be 81       	ldd	r27, Y+6	; 0x06
     906:	f9 01       	movw	r30, r18
     908:	80 83       	st	Z, r24
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	a2 83       	std	Z+2, r26	; 0x02
     90e:	b3 83       	std	Z+3, r27	; 0x03
     910:	26 96       	adiw	r28, 0x06	; 6
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <_ZNK10helicopter5model11SystemModel14LateralControlEv>:

			float LateralControl() const {return lateralControl;}
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	1f 92       	push	r1
     928:	1f 92       	push	r1
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	8f 59       	subi	r24, 0x9F	; 159
     938:	9f 4f       	sbci	r25, 0xFF	; 255
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	91 81       	ldd	r25, Z+1	; 0x01
     940:	a2 81       	ldd	r26, Z+2	; 0x02
     942:	b3 81       	ldd	r27, Z+3	; 0x03
     944:	bc 01       	movw	r22, r24
     946:	cd 01       	movw	r24, r26
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <_ZN10helicopter5model11SystemModel14LateralControlEf>:
			void LateralControl(float val) { lateralControl = val;}
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	00 d0       	rcall	.+0      	; 0x958 <_ZN10helicopter5model11SystemModel14LateralControlEf+0x6>
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN10helicopter5model11SystemModel14LateralControlEf+0x8>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	4b 83       	std	Y+3, r20	; 0x03
     964:	5c 83       	std	Y+4, r21	; 0x04
     966:	6d 83       	std	Y+5, r22	; 0x05
     968:	7e 83       	std	Y+6, r23	; 0x06
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	9a 81       	ldd	r25, Y+2	; 0x02
     96e:	9c 01       	movw	r18, r24
     970:	2f 59       	subi	r18, 0x9F	; 159
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	ad 81       	ldd	r26, Y+5	; 0x05
     97a:	be 81       	ldd	r27, Y+6	; 0x06
     97c:	f9 01       	movw	r30, r18
     97e:	80 83       	st	Z, r24
     980:	91 83       	std	Z+1, r25	; 0x01
     982:	a2 83       	std	Z+2, r26	; 0x02
     984:	b3 83       	std	Z+3, r27	; 0x03
     986:	26 96       	adiw	r28, 0x06	; 6
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZNK10helicopter5model11SystemModel24YVelocityMetersPerSecondEv>:

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	1f 92       	push	r1
     99e:	1f 92       	push	r1
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	8b 59       	subi	r24, 0x9B	; 155
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	a2 81       	ldd	r26, Z+2	; 0x02
     9b8:	b3 81       	ldd	r27, Z+3	; 0x03
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <_ZNK10helicopter5model11SystemModel33ReferenceYVelocityMetersPerSecondEv>:
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}

			float ReferenceYVelocityMetersPerSecond() const {return referenceYVelocityMetersPerSecond;}
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	1f 92       	push	r1
     9ce:	1f 92       	push	r1
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	9a 83       	std	Y+2, r25	; 0x02
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	9a 81       	ldd	r25, Y+2	; 0x02
     9dc:	87 59       	subi	r24, 0x97	; 151
     9de:	9f 4f       	sbci	r25, 0xFF	; 255
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	a2 81       	ldd	r26, Z+2	; 0x02
     9e8:	b3 81       	ldd	r27, Z+3	; 0x03
     9ea:	bc 01       	movw	r22, r24
     9ec:	cd 01       	movw	r24, r26
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <_ZNK10helicopter5model11SystemModel25YLateralOuterLoopSetpointEv>:
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}

			float YLateralOuterLoopSetpoint() const {return yLateralOuterLoopSetpoint;}
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	1f 92       	push	r1
     9fe:	1f 92       	push	r1
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	83 59       	subi	r24, 0x93	; 147
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	a2 81       	ldd	r26, Z+2	; 0x02
     a18:	b3 81       	ldd	r27, Z+3	; 0x03
     a1a:	bc 01       	movw	r22, r24
     a1c:	cd 01       	movw	r24, r26
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <_ZN10helicopter5model11SystemModel25YLateralOuterLoopSetpointEf>:
			void YLateralOuterLoopSetpoint(float val) { yLateralOuterLoopSetpoint = val;}
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <_ZN10helicopter5model11SystemModel25YLateralOuterLoopSetpointEf+0x6>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <_ZN10helicopter5model11SystemModel25YLateralOuterLoopSetpointEf+0x8>
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	9a 83       	std	Y+2, r25	; 0x02
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	4b 83       	std	Y+3, r20	; 0x03
     a3a:	5c 83       	std	Y+4, r21	; 0x04
     a3c:	6d 83       	std	Y+5, r22	; 0x05
     a3e:	7e 83       	std	Y+6, r23	; 0x06
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	9c 01       	movw	r18, r24
     a46:	23 59       	subi	r18, 0x93	; 147
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	9c 81       	ldd	r25, Y+4	; 0x04
     a4e:	ad 81       	ldd	r26, Y+5	; 0x05
     a50:	be 81       	ldd	r27, Y+6	; 0x06
     a52:	f9 01       	movw	r30, r18
     a54:	80 83       	st	Z, r24
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	a2 83       	std	Z+2, r26	; 0x02
     a5a:	b3 83       	std	Z+3, r27	; 0x03
     a5c:	26 96       	adiw	r28, 0x06	; 6
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <_ZN10helicopter5model11SystemModel13YProportionalEf>:

			float YProportional() const {return yProportional;}
			void YProportional(float val) { yProportional = val;}
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	00 d0       	rcall	.+0      	; 0xa74 <_ZN10helicopter5model11SystemModel13YProportionalEf+0x6>
     a74:	00 d0       	rcall	.+0      	; 0xa76 <_ZN10helicopter5model11SystemModel13YProportionalEf+0x8>
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	4b 83       	std	Y+3, r20	; 0x03
     a80:	5c 83       	std	Y+4, r21	; 0x04
     a82:	6d 83       	std	Y+5, r22	; 0x05
     a84:	7e 83       	std	Y+6, r23	; 0x06
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	9a 81       	ldd	r25, Y+2	; 0x02
     a8a:	9c 01       	movw	r18, r24
     a8c:	2f 58       	subi	r18, 0x8F	; 143
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	ad 81       	ldd	r26, Y+5	; 0x05
     a96:	be 81       	ldd	r27, Y+6	; 0x06
     a98:	f9 01       	movw	r30, r18
     a9a:	80 83       	st	Z, r24
     a9c:	91 83       	std	Z+1, r25	; 0x01
     a9e:	a2 83       	std	Z+2, r26	; 0x02
     aa0:	b3 83       	std	Z+3, r27	; 0x03
     aa2:	26 96       	adiw	r28, 0x06	; 6
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <_ZNK10helicopter5model11SystemModel9YIntegralEv>:

			float YIntegral() const {return yIntegral;}
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	1f 92       	push	r1
     aba:	1f 92       	push	r1
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	8b 58       	subi	r24, 0x8B	; 139
     aca:	9f 4f       	sbci	r25, 0xFF	; 255
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	a2 81       	ldd	r26, Z+2	; 0x02
     ad4:	b3 81       	ldd	r27, Z+3	; 0x03
     ad6:	bc 01       	movw	r22, r24
     ad8:	cd 01       	movw	r24, r26
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <_ZN10helicopter5model11SystemModel9YIntegralEf>:
			void YIntegral(float val) { yIntegral = val;}
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <_ZN10helicopter5model11SystemModel9YIntegralEf+0x6>
     aea:	00 d0       	rcall	.+0      	; 0xaec <_ZN10helicopter5model11SystemModel9YIntegralEf+0x8>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	89 83       	std	Y+1, r24	; 0x01
     af4:	4b 83       	std	Y+3, r20	; 0x03
     af6:	5c 83       	std	Y+4, r21	; 0x04
     af8:	6d 83       	std	Y+5, r22	; 0x05
     afa:	7e 83       	std	Y+6, r23	; 0x06
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	9c 01       	movw	r18, r24
     b02:	2b 58       	subi	r18, 0x8B	; 139
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	ad 81       	ldd	r26, Y+5	; 0x05
     b0c:	be 81       	ldd	r27, Y+6	; 0x06
     b0e:	f9 01       	movw	r30, r18
     b10:	80 83       	st	Z, r24
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	a2 83       	std	Z+2, r26	; 0x02
     b16:	b3 83       	std	Z+3, r27	; 0x03
     b18:	26 96       	adiw	r28, 0x06	; 6
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <_ZN10helicopter5model11SystemModel16YDerivativeErrorEf>:

			float YDerivativeError() const {return yDerivativeError;}
			void YDerivativeError(float val) { yDerivativeError = val;}
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <_ZN10helicopter5model11SystemModel16YDerivativeErrorEf+0x6>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <_ZN10helicopter5model11SystemModel16YDerivativeErrorEf+0x8>
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	9a 83       	std	Y+2, r25	; 0x02
     b38:	89 83       	std	Y+1, r24	; 0x01
     b3a:	4b 83       	std	Y+3, r20	; 0x03
     b3c:	5c 83       	std	Y+4, r21	; 0x04
     b3e:	6d 83       	std	Y+5, r22	; 0x05
     b40:	7e 83       	std	Y+6, r23	; 0x06
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	9a 81       	ldd	r25, Y+2	; 0x02
     b46:	9c 01       	movw	r18, r24
     b48:	27 58       	subi	r18, 0x87	; 135
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	ad 81       	ldd	r26, Y+5	; 0x05
     b52:	be 81       	ldd	r27, Y+6	; 0x06
     b54:	f9 01       	movw	r30, r18
     b56:	80 83       	st	Z, r24
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	a2 83       	std	Z+2, r26	; 0x02
     b5c:	b3 83       	std	Z+3, r27	; 0x03
     b5e:	26 96       	adiw	r28, 0x06	; 6
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <_ZNK10helicopter5model11SystemModel14PhiRollDegreesEv>:


			float PhiRollDegrees() const {return phiRollDegrees;}
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	1f 92       	push	r1
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	83 58       	subi	r24, 0x83	; 131
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	fc 01       	movw	r30, r24
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	a2 81       	ldd	r26, Z+2	; 0x02
     b90:	b3 81       	ldd	r27, Z+3	; 0x03
     b92:	bc 01       	movw	r22, r24
     b94:	cd 01       	movw	r24, r26
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <_ZNK10helicopter5model11SystemModel32RollAngularVelocityRadsPerSecondEv>:
			void PhiRollDegrees(float val) {phiRollDegrees = val;}

			float RollAngularVelocityRadsPerSecond() const {return rollAngularVelocityRadsPerSecond;}
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	1f 92       	push	r1
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	8f 57       	subi	r24, 0x7F	; 127
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	a2 81       	ldd	r26, Z+2	; 0x02
     bc0:	b3 81       	ldd	r27, Z+3	; 0x03
     bc2:	bc 01       	movw	r22, r24
     bc4:	cd 01       	movw	r24, r26
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <_ZNK10helicopter5model11SystemModel13ZNEDBodyFrameEv>:
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
			void AltitudeFeetAgl(float val) { altitudeFeetAgl = val; }

			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	1f 92       	push	r1
     bd6:	1f 92       	push	r1
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	87 57       	subi	r24, 0x77	; 119
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	a2 81       	ldd	r26, Z+2	; 0x02
     bf0:	b3 81       	ldd	r27, Z+3	; 0x03
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <_ZNK10helicopter5model11SystemModel26ReferenceZNEDBodyFrameFeetEv>:
			void ZNEDBodyFrame(float val) { zNEDBodyFrame = val; }


			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	1f 92       	push	r1
     c06:	1f 92       	push	r1
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	83 57       	subi	r24, 0x73	; 115
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	fc 01       	movw	r30, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	a2 81       	ldd	r26, Z+2	; 0x02
     c20:	b3 81       	ldd	r27, Z+3	; 0x03
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <_ZNK10helicopter5model11SystemModel26MainRotorCollectiveControlEv>:
			void ReferenceZNEDBodyFrameFeet(float val) { referenceAltitudeFeet = val;}


			float MainRotorCollectiveControl() const {return mainRotorControl;}
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	1f 92       	push	r1
     c36:	1f 92       	push	r1
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	8f 56       	subi	r24, 0x6F	; 111
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	fc 01       	movw	r30, r24
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	a2 81       	ldd	r26, Z+2	; 0x02
     c50:	b3 81       	ldd	r27, Z+3	; 0x03
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <_ZN10helicopter5model11SystemModel26MainRotorCollectiveControlEf>:
			void MainRotorCollectiveControl(float val) { mainRotorControl = val;}
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	00 d0       	rcall	.+0      	; 0xc66 <_ZN10helicopter5model11SystemModel26MainRotorCollectiveControlEf+0x6>
     c66:	00 d0       	rcall	.+0      	; 0xc68 <_ZN10helicopter5model11SystemModel26MainRotorCollectiveControlEf+0x8>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	4b 83       	std	Y+3, r20	; 0x03
     c72:	5c 83       	std	Y+4, r21	; 0x04
     c74:	6d 83       	std	Y+5, r22	; 0x05
     c76:	7e 83       	std	Y+6, r23	; 0x06
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	9c 01       	movw	r18, r24
     c7e:	2f 56       	subi	r18, 0x6F	; 111
     c80:	3f 4f       	sbci	r19, 0xFF	; 255
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	ad 81       	ldd	r26, Y+5	; 0x05
     c88:	be 81       	ldd	r27, Y+6	; 0x06
     c8a:	f9 01       	movw	r30, r18
     c8c:	80 83       	st	Z, r24
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	a2 83       	std	Z+2, r26	; 0x02
     c92:	b3 83       	std	Z+3, r27	; 0x03
     c94:	26 96       	adiw	r28, 0x06	; 6
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <_ZNK10helicopter5model11SystemModel43MainRotorControlBeforeServoLimitsAdjustmentEv>:

			float MainRotorControlBeforeServoLimitsAdjustment() const {return mainRotorControlBeforeServoLimitsAdjustment;}
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	1f 92       	push	r1
     cac:	1f 92       	push	r1
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	8b 56       	subi	r24, 0x6B	; 107
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	fc 01       	movw	r30, r24
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	a2 81       	ldd	r26, Z+2	; 0x02
     cc6:	b3 81       	ldd	r27, Z+3	; 0x03
     cc8:	bc 01       	movw	r22, r24
     cca:	cd 01       	movw	r24, r26
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <_ZN10helicopter5model11SystemModel43MainRotorControlBeforeServoLimitsAdjustmentEf>:
			void MainRotorControlBeforeServoLimitsAdjustment(float val) { mainRotorControlBeforeServoLimitsAdjustment = val;}
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	00 d0       	rcall	.+0      	; 0xcdc <_ZN10helicopter5model11SystemModel43MainRotorControlBeforeServoLimitsAdjustmentEf+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <_ZN10helicopter5model11SystemModel43MainRotorControlBeforeServoLimitsAdjustmentEf+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	4b 83       	std	Y+3, r20	; 0x03
     ce8:	5c 83       	std	Y+4, r21	; 0x04
     cea:	6d 83       	std	Y+5, r22	; 0x05
     cec:	7e 83       	std	Y+6, r23	; 0x06
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	9c 01       	movw	r18, r24
     cf4:	2b 56       	subi	r18, 0x6B	; 107
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	ad 81       	ldd	r26, Y+5	; 0x05
     cfe:	be 81       	ldd	r27, Y+6	; 0x06
     d00:	f9 01       	movw	r30, r18
     d02:	80 83       	st	Z, r24
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	a2 83       	std	Z+2, r26	; 0x02
     d08:	b3 83       	std	Z+3, r27	; 0x03
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <_ZNK10helicopter5model11SystemModel22ZVelocityFeetPerSecondEv>:

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	1f 92       	push	r1
     d22:	1f 92       	push	r1
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	9a 83       	std	Y+2, r25	; 0x02
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	87 56       	subi	r24, 0x67	; 103
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	a2 81       	ldd	r26, Z+2	; 0x02
     d3c:	b3 81       	ldd	r27, Z+3	; 0x03
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <_ZNK10helicopter5model11SystemModel31ReferenceZVelocityFeetPerSecondEv>:
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}

			float ReferenceZVelocityFeetPerSecond() const {return referenceZVelocityFeetPerSecond;}
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	1f 92       	push	r1
     d52:	1f 92       	push	r1
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	83 56       	subi	r24, 0x63	; 99
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	a2 81       	ldd	r26, Z+2	; 0x02
     d6c:	b3 81       	ldd	r27, Z+3	; 0x03
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <_ZNK10helicopter5model11SystemModel9ZIntegralEv>:
			void ReferenceZVelocityFeetPerSecond(float val) { referenceZVelocityFeetPerSecond = val;}

			float ZIntegral() const {return zIntegral;}
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	1f 92       	push	r1
     d82:	1f 92       	push	r1
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	8f 55       	subi	r24, 0x5F	; 95
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	a2 81       	ldd	r26, Z+2	; 0x02
     d9c:	b3 81       	ldd	r27, Z+3	; 0x03
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <_ZN10helicopter5model11SystemModel9ZIntegralEf>:
			void ZIntegral(float val) { zIntegral = val;}
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <_ZN10helicopter5model11SystemModel9ZIntegralEf+0x6>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <_ZN10helicopter5model11SystemModel9ZIntegralEf+0x8>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	4b 83       	std	Y+3, r20	; 0x03
     dbe:	5c 83       	std	Y+4, r21	; 0x04
     dc0:	6d 83       	std	Y+5, r22	; 0x05
     dc2:	7e 83       	std	Y+6, r23	; 0x06
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	9c 01       	movw	r18, r24
     dca:	2f 55       	subi	r18, 0x5F	; 95
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	ad 81       	ldd	r26, Y+5	; 0x05
     dd4:	be 81       	ldd	r27, Y+6	; 0x06
     dd6:	f9 01       	movw	r30, r18
     dd8:	80 83       	st	Z, r24
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	a2 83       	std	Z+2, r26	; 0x02
     dde:	b3 83       	std	Z+3, r27	; 0x03
     de0:	26 96       	adiw	r28, 0x06	; 6
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <_ZN10helicopter5model11SystemModel13ZProportionalEf>:

			float ZProportional() const {return zProportional;}
			void ZProportional(float val) { zProportional = val;}
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <_ZN10helicopter5model11SystemModel13ZProportionalEf+0x6>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <_ZN10helicopter5model11SystemModel13ZProportionalEf+0x8>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	4b 83       	std	Y+3, r20	; 0x03
     e04:	5c 83       	std	Y+4, r21	; 0x04
     e06:	6d 83       	std	Y+5, r22	; 0x05
     e08:	7e 83       	std	Y+6, r23	; 0x06
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	9a 81       	ldd	r25, Y+2	; 0x02
     e0e:	9c 01       	movw	r18, r24
     e10:	2b 55       	subi	r18, 0x5B	; 91
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	ad 81       	ldd	r26, Y+5	; 0x05
     e1a:	be 81       	ldd	r27, Y+6	; 0x06
     e1c:	f9 01       	movw	r30, r18
     e1e:	80 83       	st	Z, r24
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	a2 83       	std	Z+2, r26	; 0x02
     e24:	b3 83       	std	Z+3, r27	; 0x03
     e26:	26 96       	adiw	r28, 0x06	; 6
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <_ZN10helicopter5model11SystemModel16ZDerivativeErrorEf>:

			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <_ZN10helicopter5model11SystemModel16ZDerivativeErrorEf+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <_ZN10helicopter5model11SystemModel16ZDerivativeErrorEf+0x8>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	4b 83       	std	Y+3, r20	; 0x03
     e4a:	5c 83       	std	Y+4, r21	; 0x04
     e4c:	6d 83       	std	Y+5, r22	; 0x05
     e4e:	7e 83       	std	Y+6, r23	; 0x06
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	9c 01       	movw	r18, r24
     e56:	27 55       	subi	r18, 0x57	; 87
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	ad 81       	ldd	r26, Y+5	; 0x05
     e60:	be 81       	ldd	r27, Y+6	; 0x06
     e62:	f9 01       	movw	r30, r18
     e64:	80 83       	st	Z, r24
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	a2 83       	std	Z+2, r26	; 0x02
     e6a:	b3 83       	std	Z+3, r27	; 0x03
     e6c:	26 96       	adiw	r28, 0x06	; 6
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <_ZNK10helicopter5model11SystemModel11BlownFramesEv>:
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
			
			long ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(long val) { checksumErrors = val; }
			
			long BlownFrames() const {return numOfFramesBlown;}
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	1f 92       	push	r1
     e84:	1f 92       	push	r1
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	8f 53       	subi	r24, 0x3F	; 63
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	a2 81       	ldd	r26, Z+2	; 0x02
     e9e:	b3 81       	ldd	r27, Z+3	; 0x03
     ea0:	bc 01       	movw	r22, r24
     ea2:	cd 01       	movw	r24, r26
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <_ZN10helicopter5model11SystemModel11BlownFramesEl>:
			void BlownFrames( long val ) { numOfFramesBlown = val;}
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <_ZN10helicopter5model11SystemModel11BlownFramesEl+0x6>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <_ZN10helicopter5model11SystemModel11BlownFramesEl+0x8>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	4b 83       	std	Y+3, r20	; 0x03
     ec0:	5c 83       	std	Y+4, r21	; 0x04
     ec2:	6d 83       	std	Y+5, r22	; 0x05
     ec4:	7e 83       	std	Y+6, r23	; 0x06
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	9c 01       	movw	r18, r24
     ecc:	2f 53       	subi	r18, 0x3F	; 63
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	ad 81       	ldd	r26, Y+5	; 0x05
     ed6:	be 81       	ldd	r27, Y+6	; 0x06
     ed8:	f9 01       	movw	r30, r18
     eda:	80 83       	st	Z, r24
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	a2 83       	std	Z+2, r26	; 0x02
     ee0:	b3 83       	std	Z+3, r27	; 0x03
     ee2:	26 96       	adiw	r28, 0x06	; 6
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>:
			void InitialZPositionEcef( long val ) { initialZPositionEcef = val;}			
			/*
			float **  EcefToLocalNEDRotationMatrix() const {return ecefToLocalNEDRotationMatrix;}
			void EcefToLocalNEDRotationMatrix( long val ) { ecefToLocalNEDRotationMatrix = val;}*/
				
			OperatingState  OperationalState() const {return operationalState;}
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	1f 92       	push	r1
     efa:	1f 92       	push	r1
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	fc 01       	movw	r30, r24
     f0a:	80 81       	ld	r24, Z
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelE>:

#include "PIDController.h"

using namespace helicopter::controller;

PIDController::PIDController(SystemModel *model): 
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelE+0x6>
     f1c:	1f 92       	push	r1
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	7c 83       	std	Y+4, r23	; 0x04
     f28:	6b 83       	std	Y+3, r22	; 0x03
minMainRotorServoControlValue(0),
maxMainRotorServoControlValue(0),

intervalPeriodSecs(0),
controlMaxValue(0),
controlMinValue(0)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	2b 81       	ldd	r18, Y+3	; 0x03
     f30:	3c 81       	ldd	r19, Y+4	; 0x04
     f32:	fc 01       	movw	r30, r24
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	fc 01       	movw	r30, r24
     f3e:	12 82       	std	Z+2, r1	; 0x02
     f40:	13 82       	std	Z+3, r1	; 0x03
     f42:	14 82       	std	Z+4, r1	; 0x04
     f44:	15 82       	std	Z+5, r1	; 0x05
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	fc 01       	movw	r30, r24
     f4c:	16 82       	std	Z+6, r1	; 0x06
     f4e:	17 82       	std	Z+7, r1	; 0x07
     f50:	10 86       	std	Z+8, r1	; 0x08
     f52:	11 86       	std	Z+9, r1	; 0x09
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	fc 01       	movw	r30, r24
     f5a:	12 86       	std	Z+10, r1	; 0x0a
     f5c:	13 86       	std	Z+11, r1	; 0x0b
     f5e:	14 86       	std	Z+12, r1	; 0x0c
     f60:	15 86       	std	Z+13, r1	; 0x0d
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	fc 01       	movw	r30, r24
     f68:	16 86       	std	Z+14, r1	; 0x0e
     f6a:	17 86       	std	Z+15, r1	; 0x0f
     f6c:	10 8a       	std	Z+16, r1	; 0x10
     f6e:	11 8a       	std	Z+17, r1	; 0x11
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	fc 01       	movw	r30, r24
     f76:	12 8a       	std	Z+18, r1	; 0x12
     f78:	13 8a       	std	Z+19, r1	; 0x13
     f7a:	14 8a       	std	Z+20, r1	; 0x14
     f7c:	15 8a       	std	Z+21, r1	; 0x15
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	fc 01       	movw	r30, r24
     f84:	16 8a       	std	Z+22, r1	; 0x16
     f86:	17 8a       	std	Z+23, r1	; 0x17
     f88:	10 8e       	std	Z+24, r1	; 0x18
     f8a:	11 8e       	std	Z+25, r1	; 0x19
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	12 8e       	std	Z+26, r1	; 0x1a
     f94:	13 8e       	std	Z+27, r1	; 0x1b
     f96:	14 8e       	std	Z+28, r1	; 0x1c
     f98:	15 8e       	std	Z+29, r1	; 0x1d
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	16 8e       	std	Z+30, r1	; 0x1e
     fa2:	17 8e       	std	Z+31, r1	; 0x1f
     fa4:	10 a2       	std	Z+32, r1	; 0x20
     fa6:	11 a2       	std	Z+33, r1	; 0x21
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	fc 01       	movw	r30, r24
     fae:	12 a2       	std	Z+34, r1	; 0x22
     fb0:	13 a2       	std	Z+35, r1	; 0x23
     fb2:	14 a2       	std	Z+36, r1	; 0x24
     fb4:	15 a2       	std	Z+37, r1	; 0x25
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	fc 01       	movw	r30, r24
     fbc:	12 a6       	std	Z+42, r1	; 0x2a
     fbe:	13 a6       	std	Z+43, r1	; 0x2b
     fc0:	14 a6       	std	Z+44, r1	; 0x2c
     fc2:	15 a6       	std	Z+45, r1	; 0x2d
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	fc 01       	movw	r30, r24
     fca:	16 a6       	std	Z+46, r1	; 0x2e
     fcc:	17 a6       	std	Z+47, r1	; 0x2f
     fce:	10 aa       	std	Z+48, r1	; 0x30
     fd0:	11 aa       	std	Z+49, r1	; 0x31
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	fc 01       	movw	r30, r24
     fd8:	12 aa       	std	Z+50, r1	; 0x32
     fda:	13 aa       	std	Z+51, r1	; 0x33
     fdc:	14 aa       	std	Z+52, r1	; 0x34
     fde:	15 aa       	std	Z+53, r1	; 0x35
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	fc 01       	movw	r30, r24
     fe6:	16 aa       	std	Z+54, r1	; 0x36
     fe8:	17 aa       	std	Z+55, r1	; 0x37
     fea:	10 ae       	std	Z+56, r1	; 0x38
     fec:	11 ae       	std	Z+57, r1	; 0x39
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	fc 01       	movw	r30, r24
     ff4:	12 ae       	std	Z+58, r1	; 0x3a
     ff6:	13 ae       	std	Z+59, r1	; 0x3b
     ff8:	14 ae       	std	Z+60, r1	; 0x3c
     ffa:	15 ae       	std	Z+61, r1	; 0x3d
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	8e 5b       	subi	r24, 0xBE	; 190
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	fc 01       	movw	r30, r24
    1006:	10 82       	st	Z, r1
    1008:	11 82       	std	Z+1, r1	; 0x01
    100a:	12 82       	std	Z+2, r1	; 0x02
    100c:	13 82       	std	Z+3, r1	; 0x03
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	8a 5b       	subi	r24, 0xBA	; 186
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	fc 01       	movw	r30, r24
    1018:	10 82       	st	Z, r1
    101a:	11 82       	std	Z+1, r1	; 0x01
    101c:	12 82       	std	Z+2, r1	; 0x02
    101e:	13 82       	std	Z+3, r1	; 0x03
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	86 5b       	subi	r24, 0xB6	; 182
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	fc 01       	movw	r30, r24
    102a:	10 82       	st	Z, r1
    102c:	11 82       	std	Z+1, r1	; 0x01
    102e:	12 82       	std	Z+2, r1	; 0x02
    1030:	13 82       	std	Z+3, r1	; 0x03
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	82 5b       	subi	r24, 0xB2	; 178
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	fc 01       	movw	r30, r24
    103c:	10 82       	st	Z, r1
    103e:	11 82       	std	Z+1, r1	; 0x01
    1040:	12 82       	std	Z+2, r1	; 0x02
    1042:	13 82       	std	Z+3, r1	; 0x03
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	8e 5a       	subi	r24, 0xAE	; 174
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	fc 01       	movw	r30, r24
    104e:	10 82       	st	Z, r1
    1050:	11 82       	std	Z+1, r1	; 0x01
    1052:	12 82       	std	Z+2, r1	; 0x02
    1054:	13 82       	std	Z+3, r1	; 0x03
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	8a 5a       	subi	r24, 0xAA	; 170
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	fc 01       	movw	r30, r24
    1060:	10 82       	st	Z, r1
    1062:	11 82       	std	Z+1, r1	; 0x01
    1064:	12 82       	std	Z+2, r1	; 0x02
    1066:	13 82       	std	Z+3, r1	; 0x03
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	86 5a       	subi	r24, 0xA6	; 166
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	fc 01       	movw	r30, r24
    1072:	10 82       	st	Z, r1
    1074:	11 82       	std	Z+1, r1	; 0x01
    1076:	12 82       	std	Z+2, r1	; 0x02
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	82 5a       	subi	r24, 0xA2	; 162
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	fc 01       	movw	r30, r24
    1084:	10 82       	st	Z, r1
    1086:	11 82       	std	Z+1, r1	; 0x01
    1088:	12 82       	std	Z+2, r1	; 0x02
    108a:	13 82       	std	Z+3, r1	; 0x03
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	8e 59       	subi	r24, 0x9E	; 158
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	fc 01       	movw	r30, r24
    1096:	10 82       	st	Z, r1
    1098:	11 82       	std	Z+1, r1	; 0x01
    109a:	12 82       	std	Z+2, r1	; 0x02
    109c:	13 82       	std	Z+3, r1	; 0x03
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	8a 59       	subi	r24, 0x9A	; 154
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	fc 01       	movw	r30, r24
    10a8:	10 82       	st	Z, r1
    10aa:	11 82       	std	Z+1, r1	; 0x01
    10ac:	12 82       	std	Z+2, r1	; 0x02
    10ae:	13 82       	std	Z+3, r1	; 0x03
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	86 59       	subi	r24, 0x96	; 150
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	fc 01       	movw	r30, r24
    10ba:	10 82       	st	Z, r1
    10bc:	11 82       	std	Z+1, r1	; 0x01
    10be:	12 82       	std	Z+2, r1	; 0x02
    10c0:	13 82       	std	Z+3, r1	; 0x03
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	82 59       	subi	r24, 0x92	; 146
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	fc 01       	movw	r30, r24
    10cc:	10 82       	st	Z, r1
    10ce:	11 82       	std	Z+1, r1	; 0x01
    10d0:	12 82       	std	Z+2, r1	; 0x02
    10d2:	13 82       	std	Z+3, r1	; 0x03
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	8e 57       	subi	r24, 0x7E	; 126
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	fc 01       	movw	r30, r24
    10de:	10 82       	st	Z, r1
    10e0:	11 82       	std	Z+1, r1	; 0x01
    10e2:	12 82       	std	Z+2, r1	; 0x02
    10e4:	13 82       	std	Z+3, r1	; 0x03
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	8a 57       	subi	r24, 0x7A	; 122
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	fc 01       	movw	r30, r24
    10f0:	10 82       	st	Z, r1
    10f2:	11 82       	std	Z+1, r1	; 0x01
    10f4:	12 82       	std	Z+2, r1	; 0x02
    10f6:	13 82       	std	Z+3, r1	; 0x03
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	86 57       	subi	r24, 0x76	; 118
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	fc 01       	movw	r30, r24
    1102:	10 82       	st	Z, r1
    1104:	11 82       	std	Z+1, r1	; 0x01
    1106:	12 82       	std	Z+2, r1	; 0x02
    1108:	13 82       	std	Z+3, r1	; 0x03
{
	
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>:
{
	delete model;
}

float PIDController::calculateProportional(float currentValue, float referenceValue)
{
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	2a 97       	sbiw	r28, 0x0a	; 10
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	4b 83       	std	Y+3, r20	; 0x03
    1136:	5c 83       	std	Y+4, r21	; 0x04
    1138:	6d 83       	std	Y+5, r22	; 0x05
    113a:	7e 83       	std	Y+6, r23	; 0x06
    113c:	0f 83       	std	Y+7, r16	; 0x07
    113e:	18 87       	std	Y+8, r17	; 0x08
    1140:	29 87       	std	Y+9, r18	; 0x09
    1142:	3a 87       	std	Y+10, r19	; 0x0a
	return currentValue - referenceValue;
    1144:	2f 81       	ldd	r18, Y+7	; 0x07
    1146:	38 85       	ldd	r19, Y+8	; 0x08
    1148:	49 85       	ldd	r20, Y+9	; 0x09
    114a:	5a 85       	ldd	r21, Y+10	; 0x0a
    114c:	6b 81       	ldd	r22, Y+3	; 0x03
    114e:	7c 81       	ldd	r23, Y+4	; 0x04
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
}
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	2a 96       	adiw	r28, 0x0a	; 10
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>:

//TODO refactor to make this common for all PID calculations. I'll want to include the specific
//variables max values as parameters so I can 'generalize' it.
float PIDController::calculateIntegralAntiWindup(float oldControlPreServoAdj, float oldControl, float antiWindupGain)
{
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	62 97       	sbiw	r28, 0x12	; 18
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	4f 83       	std	Y+7, r20	; 0x07
    119c:	58 87       	std	Y+8, r21	; 0x08
    119e:	69 87       	std	Y+9, r22	; 0x09
    11a0:	7a 87       	std	Y+10, r23	; 0x0a
    11a2:	0b 87       	std	Y+11, r16	; 0x0b
    11a4:	1c 87       	std	Y+12, r17	; 0x0c
    11a6:	2d 87       	std	Y+13, r18	; 0x0d
    11a8:	3e 87       	std	Y+14, r19	; 0x0e
    11aa:	cf 86       	std	Y+15, r12	; 0x0f
    11ac:	d8 8a       	std	Y+16, r13	; 0x10
    11ae:	e9 8a       	std	Y+17, r14	; 0x11
    11b0:	fa 8a       	std	Y+18, r15	; 0x12
	float antiWindup = 0;
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	1a 82       	std	Y+2, r1	; 0x02
    11b6:	1b 82       	std	Y+3, r1	; 0x03
    11b8:	1c 82       	std	Y+4, r1	; 0x04
	
	antiWindup = antiWindupGain * (oldControlPreServoAdj - oldControl);
    11ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    11bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    11be:	4d 85       	ldd	r20, Y+13	; 0x0d
    11c0:	5e 85       	ldd	r21, Y+14	; 0x0e
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    11d4:	38 89       	ldd	r19, Y+16	; 0x10
    11d6:	49 89       	ldd	r20, Y+17	; 0x11
    11d8:	5a 89       	ldd	r21, Y+18	; 0x12
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	ab 83       	std	Y+3, r26	; 0x03
    11ec:	bc 83       	std	Y+4, r27	; 0x04
	
	return antiWindup;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	ab 81       	ldd	r26, Y+3	; 0x03
    11f4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	62 96       	adiw	r28, 0x12	; 18
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	08 95       	ret

00001218 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>:

/**
 * Anti-windup algorithm provided by Control Systems Design by Karl Johan Astrom 2002. chapter 6
 */
float PIDController::calculateIntegral(float proportional, float oldIntegral, float antiWindup, float integralGain)
{
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	66 97       	sbiw	r28, 0x16	; 22
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	4f 83       	std	Y+7, r20	; 0x07
    1246:	58 87       	std	Y+8, r21	; 0x08
    1248:	69 87       	std	Y+9, r22	; 0x09
    124a:	7a 87       	std	Y+10, r23	; 0x0a
    124c:	0b 87       	std	Y+11, r16	; 0x0b
    124e:	1c 87       	std	Y+12, r17	; 0x0c
    1250:	2d 87       	std	Y+13, r18	; 0x0d
    1252:	3e 87       	std	Y+14, r19	; 0x0e
    1254:	cf 86       	std	Y+15, r12	; 0x0f
    1256:	d8 8a       	std	Y+16, r13	; 0x10
    1258:	e9 8a       	std	Y+17, r14	; 0x11
    125a:	fa 8a       	std	Y+18, r15	; 0x12
    125c:	8b 8a       	std	Y+19, r8	; 0x13
    125e:	9c 8a       	std	Y+20, r9	; 0x14
    1260:	ad 8a       	std	Y+21, r10	; 0x15
    1262:	be 8a       	std	Y+22, r11	; 0x16
	
	float workingIntegral = 0;
    1264:	19 82       	std	Y+1, r1	; 0x01
    1266:	1a 82       	std	Y+2, r1	; 0x02
    1268:	1b 82       	std	Y+3, r1	; 0x03
    126a:	1c 82       	std	Y+4, r1	; 0x04
	
	workingIntegral = proportional * intervalPeriodSecs * integralGain;
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	8e 57       	subi	r24, 0x7E	; 126
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	fc 01       	movw	r30, r24
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	a2 81       	ldd	r26, Z+2	; 0x02
    127c:	b3 81       	ldd	r27, Z+3	; 0x03
    127e:	2f 81       	ldd	r18, Y+7	; 0x07
    1280:	38 85       	ldd	r19, Y+8	; 0x08
    1282:	49 85       	ldd	r20, Y+9	; 0x09
    1284:	5a 85       	ldd	r21, Y+10	; 0x0a
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	2b 89       	ldd	r18, Y+19	; 0x13
    1294:	3c 89       	ldd	r19, Y+20	; 0x14
    1296:	4d 89       	ldd	r20, Y+21	; 0x15
    1298:	5e 89       	ldd	r21, Y+22	; 0x16
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	9a 83       	std	Y+2, r25	; 0x02
    12aa:	ab 83       	std	Y+3, r26	; 0x03
    12ac:	bc 83       	std	Y+4, r27	; 0x04
	//Integrate (i.e. sum this working value with the current integral value).
	//Note: i'm going out of order from what is defined in the book referenced above.
	//I am summing before subtracting the antiwindup value to make it easier.
	//I also find it odd that the integral 'gain' is being applied before 
	//accounting for the anti-windup. But this could be to compensate for large errors.
	workingIntegral = workingIntegral + oldIntegral;
    12ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    12b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    12b2:	4d 85       	ldd	r20, Y+13	; 0x0d
    12b4:	5e 85       	ldd	r21, Y+14	; 0x0e
    12b6:	69 81       	ldd	r22, Y+1	; 0x01
    12b8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	ab 83       	std	Y+3, r26	; 0x03
    12cc:	bc 83       	std	Y+4, r27	; 0x04
	
	if (antiWindup != 0)
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    12d6:	78 89       	ldd	r23, Y+16	; 0x10
    12d8:	89 89       	ldd	r24, Y+17	; 0x11
    12da:	9a 89       	ldd	r25, Y+18	; 0x12
    12dc:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0xce>
    12e4:	52 c0       	rjmp	.+164    	; 0x138a <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x172>
	{
		//We want to know if the integral is greater than 0 or less than 0 so that when we subtract
		//the antiwindup value, we get closer to 0, and don't exceed 0.
		if (workingIntegral > 0 && antiWindup > workingIntegral)
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	a9 01       	movw	r20, r18
    12ec:	69 81       	ldd	r22, Y+1	; 0x01
    12ee:	7a 81       	ldd	r23, Y+2	; 0x02
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	8c f4       	brge	.+34     	; 0x131e <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x106>
    12fc:	29 81       	ldd	r18, Y+1	; 0x01
    12fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1300:	4b 81       	ldd	r20, Y+3	; 0x03
    1302:	5c 81       	ldd	r21, Y+4	; 0x04
    1304:	6f 85       	ldd	r22, Y+15	; 0x0f
    1306:	78 89       	ldd	r23, Y+16	; 0x10
    1308:	89 89       	ldd	r24, Y+17	; 0x11
    130a:	9a 89       	ldd	r25, Y+18	; 0x12
    130c:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    1310:	18 16       	cp	r1, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x106>
		{
			workingIntegral = 0;
    1314:	19 82       	std	Y+1, r1	; 0x01
    1316:	1a 82       	std	Y+2, r1	; 0x02
    1318:	1b 82       	std	Y+3, r1	; 0x03
    131a:	1c 82       	std	Y+4, r1	; 0x04
    131c:	1b c0       	rjmp	.+54     	; 0x1354 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x13c>
		}else if (workingIntegral < 0 && antiWindup < workingIntegral)
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	69 81       	ldd	r22, Y+1	; 0x01
    1326:	7a 81       	ldd	r23, Y+2	; 0x02
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    1330:	88 23       	and	r24, r24
    1332:	84 f4       	brge	.+32     	; 0x1354 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x13c>
    1334:	29 81       	ldd	r18, Y+1	; 0x01
    1336:	3a 81       	ldd	r19, Y+2	; 0x02
    1338:	4b 81       	ldd	r20, Y+3	; 0x03
    133a:	5c 81       	ldd	r21, Y+4	; 0x04
    133c:	6f 85       	ldd	r22, Y+15	; 0x0f
    133e:	78 89       	ldd	r23, Y+16	; 0x10
    1340:	89 89       	ldd	r24, Y+17	; 0x11
    1342:	9a 89       	ldd	r25, Y+18	; 0x12
    1344:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    1348:	88 23       	and	r24, r24
    134a:	24 f4       	brge	.+8      	; 0x1354 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x13c>
		{
			workingIntegral = 0;
    134c:	19 82       	std	Y+1, r1	; 0x01
    134e:	1a 82       	std	Y+2, r1	; 0x02
    1350:	1b 82       	std	Y+3, r1	; 0x03
    1352:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		if (workingIntegral != 0)
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	69 81       	ldd	r22, Y+1	; 0x01
    135c:	7a 81       	ldd	r23, Y+2	; 0x02
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    1366:	88 23       	and	r24, r24
    1368:	81 f0       	breq	.+32     	; 0x138a <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x172>
		{
				//Subtract the anti-windup value from the working integral. 
			workingIntegral = workingIntegral - antiWindup;
    136a:	2f 85       	ldd	r18, Y+15	; 0x0f
    136c:	38 89       	ldd	r19, Y+16	; 0x10
    136e:	49 89       	ldd	r20, Y+17	; 0x11
    1370:	5a 89       	ldd	r21, Y+18	; 0x12
    1372:	69 81       	ldd	r22, Y+1	; 0x01
    1374:	7a 81       	ldd	r23, Y+2	; 0x02
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	ab 83       	std	Y+3, r26	; 0x03
    1388:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	
	return workingIntegral;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	ab 81       	ldd	r26, Y+3	; 0x03
    1390:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	66 96       	adiw	r28, 0x16	; 22
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	08 95       	ret

000013bc <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>:

float PIDController::calculateVelocityError(float currentVelocity, float referenceVelocity)
{
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	2a 97       	sbiw	r28, 0x0a	; 10
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	4b 83       	std	Y+3, r20	; 0x03
    13da:	5c 83       	std	Y+4, r21	; 0x04
    13dc:	6d 83       	std	Y+5, r22	; 0x05
    13de:	7e 83       	std	Y+6, r23	; 0x06
    13e0:	0f 83       	std	Y+7, r16	; 0x07
    13e2:	18 87       	std	Y+8, r17	; 0x08
    13e4:	29 87       	std	Y+9, r18	; 0x09
    13e6:	3a 87       	std	Y+10, r19	; 0x0a
	return currentVelocity - referenceVelocity;
    13e8:	2f 81       	ldd	r18, Y+7	; 0x07
    13ea:	38 85       	ldd	r19, Y+8	; 0x08
    13ec:	49 85       	ldd	r20, Y+9	; 0x09
    13ee:	5a 85       	ldd	r21, Y+10	; 0x0a
    13f0:	6b 81       	ldd	r22, Y+3	; 0x03
    13f2:	7c 81       	ldd	r23, Y+4	; 0x04
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
}
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	2a 96       	adiw	r28, 0x0a	; 10
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>:

float PIDController::calculateOuterLoopControlValue(float proportionalError, float velocityError, float integral, float proportionalGain, float derivativeGain, int directionFactor)
{
    141a:	8f 92       	push	r8
    141c:	9f 92       	push	r9
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	66 97       	sbiw	r28, 0x16	; 22
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	4f 83       	std	Y+7, r20	; 0x07
    1448:	58 87       	std	Y+8, r21	; 0x08
    144a:	69 87       	std	Y+9, r22	; 0x09
    144c:	7a 87       	std	Y+10, r23	; 0x0a
    144e:	0b 87       	std	Y+11, r16	; 0x0b
    1450:	1c 87       	std	Y+12, r17	; 0x0c
    1452:	2d 87       	std	Y+13, r18	; 0x0d
    1454:	3e 87       	std	Y+14, r19	; 0x0e
    1456:	cf 86       	std	Y+15, r12	; 0x0f
    1458:	d8 8a       	std	Y+16, r13	; 0x10
    145a:	e9 8a       	std	Y+17, r14	; 0x11
    145c:	fa 8a       	std	Y+18, r15	; 0x12
    145e:	8b 8a       	std	Y+19, r8	; 0x13
    1460:	9c 8a       	std	Y+20, r9	; 0x14
    1462:	ad 8a       	std	Y+21, r10	; 0x15
    1464:	be 8a       	std	Y+22, r11	; 0x16
	float controlValue = 0;
    1466:	19 82       	std	Y+1, r1	; 0x01
    1468:	1a 82       	std	Y+2, r1	; 0x02
    146a:	1b 82       	std	Y+3, r1	; 0x03
    146c:	1c 82       	std	Y+4, r1	; 0x04
	
	controlValue = directionFactor * (integral  + proportionalError * proportionalGain + velocityError * derivativeGain);
    146e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1470:	9b a5       	ldd	r25, Y+43	; 0x2b
    1472:	aa 27       	eor	r26, r26
    1474:	97 fd       	sbrc	r25, 7
    1476:	a0 95       	com	r26
    1478:	ba 2f       	mov	r27, r26
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    1482:	6b 01       	movw	r12, r22
    1484:	7c 01       	movw	r14, r24
    1486:	2b 89       	ldd	r18, Y+19	; 0x13
    1488:	3c 89       	ldd	r19, Y+20	; 0x14
    148a:	4d 89       	ldd	r20, Y+21	; 0x15
    148c:	5e 89       	ldd	r21, Y+22	; 0x16
    148e:	6f 81       	ldd	r22, Y+7	; 0x07
    1490:	78 85       	ldd	r23, Y+8	; 0x08
    1492:	89 85       	ldd	r24, Y+9	; 0x09
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	2f 85       	ldd	r18, Y+15	; 0x0f
    14a0:	38 89       	ldd	r19, Y+16	; 0x10
    14a2:	49 89       	ldd	r20, Y+17	; 0x11
    14a4:	5a 89       	ldd	r21, Y+18	; 0x12
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	4c 01       	movw	r8, r24
    14b4:	5d 01       	movw	r10, r26
    14b6:	2e a1       	ldd	r18, Y+38	; 0x26
    14b8:	3f a1       	ldd	r19, Y+39	; 0x27
    14ba:	48 a5       	ldd	r20, Y+40	; 0x28
    14bc:	59 a5       	ldd	r21, Y+41	; 0x29
    14be:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c6:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9c 01       	movw	r18, r24
    14d0:	ad 01       	movw	r20, r26
    14d2:	c5 01       	movw	r24, r10
    14d4:	b4 01       	movw	r22, r8
    14d6:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9c 01       	movw	r18, r24
    14e0:	ad 01       	movw	r20, r26
    14e2:	c7 01       	movw	r24, r14
    14e4:	b6 01       	movw	r22, r12
    14e6:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	ab 83       	std	Y+3, r26	; 0x03
    14f4:	bc 83       	std	Y+4, r27	; 0x04
	
	return controlValue;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	ab 81       	ldd	r26, Y+3	; 0x03
    14fc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	66 96       	adiw	r28, 0x16	; 22
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	af 90       	pop	r10
    1522:	9f 90       	pop	r9
    1524:	8f 90       	pop	r8
    1526:	08 95       	ret

00001528 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>:


float PIDController::adjustControlForServoLimits( float controlValueToAdjust, float minServoControlValue, float maxServoControlValue )
{
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	2e 97       	sbiw	r28, 0x0e	; 14
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	4b 83       	std	Y+3, r20	; 0x03
    154e:	5c 83       	std	Y+4, r21	; 0x04
    1550:	6d 83       	std	Y+5, r22	; 0x05
    1552:	7e 83       	std	Y+6, r23	; 0x06
    1554:	0f 83       	std	Y+7, r16	; 0x07
    1556:	18 87       	std	Y+8, r17	; 0x08
    1558:	29 87       	std	Y+9, r18	; 0x09
    155a:	3a 87       	std	Y+10, r19	; 0x0a
    155c:	cb 86       	std	Y+11, r12	; 0x0b
    155e:	dc 86       	std	Y+12, r13	; 0x0c
    1560:	ed 86       	std	Y+13, r14	; 0x0d
    1562:	fe 86       	std	Y+14, r15	; 0x0e

	//TODO: when generalizing ensure to change this value. 
	//Todo revisit including trim.
	//controlValue += yawServoTrim;
	
	if (controlValueToAdjust > maxServoControlValue)
    1564:	2b 85       	ldd	r18, Y+11	; 0x0b
    1566:	3c 85       	ldd	r19, Y+12	; 0x0c
    1568:	4d 85       	ldd	r20, Y+13	; 0x0d
    156a:	5e 85       	ldd	r21, Y+14	; 0x0e
    156c:	6b 81       	ldd	r22, Y+3	; 0x03
    156e:	7c 81       	ldd	r23, Y+4	; 0x04
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    1578:	18 16       	cp	r1, r24
    157a:	4c f4       	brge	.+18     	; 0x158e <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff+0x66>
	{
		controlValueToAdjust = maxServoControlValue;
    157c:	8b 85       	ldd	r24, Y+11	; 0x0b
    157e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1580:	ad 85       	ldd	r26, Y+13	; 0x0d
    1582:	be 85       	ldd	r27, Y+14	; 0x0e
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	ad 83       	std	Y+5, r26	; 0x05
    158a:	be 83       	std	Y+6, r27	; 0x06
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff+0x8e>
	}else if (controlValueToAdjust < minServoControlValue)
    158e:	2f 81       	ldd	r18, Y+7	; 0x07
    1590:	38 85       	ldd	r19, Y+8	; 0x08
    1592:	49 85       	ldd	r20, Y+9	; 0x09
    1594:	5a 85       	ldd	r21, Y+10	; 0x0a
    1596:	6b 81       	ldd	r22, Y+3	; 0x03
    1598:	7c 81       	ldd	r23, Y+4	; 0x04
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	44 f4       	brge	.+16     	; 0x15b6 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff+0x8e>
	{
		controlValueToAdjust = minServoControlValue;
    15a6:	8f 81       	ldd	r24, Y+7	; 0x07
    15a8:	98 85       	ldd	r25, Y+8	; 0x08
    15aa:	a9 85       	ldd	r26, Y+9	; 0x09
    15ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	ad 83       	std	Y+5, r26	; 0x05
    15b4:	be 83       	std	Y+6, r27	; 0x06
	}
	
	return controlValueToAdjust;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	ad 81       	ldd	r26, Y+5	; 0x05
    15bc:	be 81       	ldd	r27, Y+6	; 0x06
}
    15be:	bc 01       	movw	r22, r24
    15c0:	cd 01       	movw	r24, r26
    15c2:	2e 96       	adiw	r28, 0x0e	; 14
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	08 95       	ret

000015e0 <_Z30calculateInnerLoopControlValuefffff>:


float calculateInnerLoopControlValue( float outerLoopSetpoint, float measuredValue, float gain, float angularVelocity, float angularVelocityGain )
{
    15e0:	af 92       	push	r10
    15e2:	bf 92       	push	r11
    15e4:	cf 92       	push	r12
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	60 97       	sbiw	r28, 0x10	; 16
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	69 83       	std	Y+1, r22	; 0x01
    1606:	7a 83       	std	Y+2, r23	; 0x02
    1608:	8b 83       	std	Y+3, r24	; 0x03
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	2d 83       	std	Y+5, r18	; 0x05
    160e:	3e 83       	std	Y+6, r19	; 0x06
    1610:	4f 83       	std	Y+7, r20	; 0x07
    1612:	58 87       	std	Y+8, r21	; 0x08
    1614:	e9 86       	std	Y+9, r14	; 0x09
    1616:	fa 86       	std	Y+10, r15	; 0x0a
    1618:	0b 87       	std	Y+11, r16	; 0x0b
    161a:	1c 87       	std	Y+12, r17	; 0x0c
    161c:	ad 86       	std	Y+13, r10	; 0x0d
    161e:	be 86       	std	Y+14, r11	; 0x0e
    1620:	cf 86       	std	Y+15, r12	; 0x0f
    1622:	d8 8a       	std	Y+16, r13	; 0x10
	return (gain * (outerLoopSetpoint - measuredValue)) - (angularVelocity * angularVelocityGain);
    1624:	2d 81       	ldd	r18, Y+5	; 0x05
    1626:	3e 81       	ldd	r19, Y+6	; 0x06
    1628:	4f 81       	ldd	r20, Y+7	; 0x07
    162a:	58 85       	ldd	r21, Y+8	; 0x08
    162c:	69 81       	ldd	r22, Y+1	; 0x01
    162e:	7a 81       	ldd	r23, Y+2	; 0x02
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	29 85       	ldd	r18, Y+9	; 0x09
    163e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1640:	4b 85       	ldd	r20, Y+11	; 0x0b
    1642:	5c 85       	ldd	r21, Y+12	; 0x0c
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	6c 01       	movw	r12, r24
    1652:	7d 01       	movw	r14, r26
    1654:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1656:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1658:	48 a1       	ldd	r20, Y+32	; 0x20
    165a:	59 a1       	ldd	r21, Y+33	; 0x21
    165c:	6d 85       	ldd	r22, Y+13	; 0x0d
    165e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1660:	8f 85       	ldd	r24, Y+15	; 0x0f
    1662:	98 89       	ldd	r25, Y+16	; 0x10
    1664:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9c 01       	movw	r18, r24
    166e:	ad 01       	movw	r20, r26
    1670:	c7 01       	movw	r24, r14
    1672:	b6 01       	movw	r22, r12
    1674:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
}
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	60 96       	adiw	r28, 0x10	; 16
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	bf 90       	pop	r11
    169e:	af 90       	pop	r10
    16a0:	08 95       	ret

000016a2 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff>:


float PIDController::adjustForSetpointLimits( float outerLoopControlSetpoint, float minSetpointLimitDegrees, float maxSetpointLimitDegrees )
{
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	2e 97       	sbiw	r28, 0x0e	; 14
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	4b 83       	std	Y+3, r20	; 0x03
    16c8:	5c 83       	std	Y+4, r21	; 0x04
    16ca:	6d 83       	std	Y+5, r22	; 0x05
    16cc:	7e 83       	std	Y+6, r23	; 0x06
    16ce:	0f 83       	std	Y+7, r16	; 0x07
    16d0:	18 87       	std	Y+8, r17	; 0x08
    16d2:	29 87       	std	Y+9, r18	; 0x09
    16d4:	3a 87       	std	Y+10, r19	; 0x0a
    16d6:	cb 86       	std	Y+11, r12	; 0x0b
    16d8:	dc 86       	std	Y+12, r13	; 0x0c
    16da:	ed 86       	std	Y+13, r14	; 0x0d
    16dc:	fe 86       	std	Y+14, r15	; 0x0e
	if (outerLoopControlSetpoint < minSetpointLimitDegrees)
    16de:	2f 81       	ldd	r18, Y+7	; 0x07
    16e0:	38 85       	ldd	r19, Y+8	; 0x08
    16e2:	49 85       	ldd	r20, Y+9	; 0x09
    16e4:	5a 85       	ldd	r21, Y+10	; 0x0a
    16e6:	6b 81       	ldd	r22, Y+3	; 0x03
    16e8:	7c 81       	ldd	r23, Y+4	; 0x04
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    16f2:	88 23       	and	r24, r24
    16f4:	4c f4       	brge	.+18     	; 0x1708 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff+0x66>
	{
		outerLoopControlSetpoint = minSetpointLimitDegrees;
    16f6:	8f 81       	ldd	r24, Y+7	; 0x07
    16f8:	98 85       	ldd	r25, Y+8	; 0x08
    16fa:	a9 85       	ldd	r26, Y+9	; 0x09
    16fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    16fe:	8b 83       	std	Y+3, r24	; 0x03
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	ad 83       	std	Y+5, r26	; 0x05
    1704:	be 83       	std	Y+6, r27	; 0x06
    1706:	14 c0       	rjmp	.+40     	; 0x1730 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff+0x8e>
	}else if (outerLoopControlSetpoint > maxSetpointLimitDegrees)
    1708:	2b 85       	ldd	r18, Y+11	; 0x0b
    170a:	3c 85       	ldd	r19, Y+12	; 0x0c
    170c:	4d 85       	ldd	r20, Y+13	; 0x0d
    170e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1710:	6b 81       	ldd	r22, Y+3	; 0x03
    1712:	7c 81       	ldd	r23, Y+4	; 0x04
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    171c:	18 16       	cp	r1, r24
    171e:	44 f4       	brge	.+16     	; 0x1730 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff+0x8e>
	{
		outerLoopControlSetpoint = maxSetpointLimitDegrees;
    1720:	8b 85       	ldd	r24, Y+11	; 0x0b
    1722:	9c 85       	ldd	r25, Y+12	; 0x0c
    1724:	ad 85       	ldd	r26, Y+13	; 0x0d
    1726:	be 85       	ldd	r27, Y+14	; 0x0e
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	ad 83       	std	Y+5, r26	; 0x05
    172e:	be 83       	std	Y+6, r27	; 0x06
	}
	
	return outerLoopControlSetpoint;
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	ad 81       	ldd	r26, Y+5	; 0x05
    1736:	be 81       	ldd	r27, Y+6	; 0x06
}
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	2e 96       	adiw	r28, 0x0e	; 14
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	df 90       	pop	r13
    1756:	cf 90       	pop	r12
    1758:	08 95       	ret

0000175a <_ZN10helicopter10controller13PIDController13addBlownFrameEv>:



//TODO WTF IS THIS DOING HERE?? THIS IS THE WRONG CONTROLLER!!
void PIDController::addBlownFrame()
{
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	1f 92       	push	r1
    1760:	1f 92       	push	r1
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
	model->BlownFrames(model->BlownFrames() + 1);
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	fc 01       	movw	r30, r24
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZNK10helicopter5model11SystemModel11BlownFramesEv>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	a1 1d       	adc	r26, r1
    1780:	b1 1d       	adc	r27, r1
    1782:	29 81       	ldd	r18, Y+1	; 0x01
    1784:	3a 81       	ldd	r19, Y+2	; 0x02
    1786:	f9 01       	movw	r30, r18
    1788:	20 81       	ld	r18, Z
    178a:	31 81       	ldd	r19, Z+1	; 0x01
    178c:	ac 01       	movw	r20, r24
    178e:	bd 01       	movw	r22, r26
    1790:	c9 01       	movw	r24, r18
    1792:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN10helicopter5model11SystemModel11BlownFramesEl>
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef>:

float PIDController::convertYawErrorFrom360to180( float yawError )
{
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x8>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	4b 83       	std	Y+3, r20	; 0x03
    17b2:	5c 83       	std	Y+4, r21	; 0x04
    17b4:	6d 83       	std	Y+5, r22	; 0x05
    17b6:	7e 83       	std	Y+6, r23	; 0x06
	if (yawError >= 180)
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	44 e3       	ldi	r20, 0x34	; 52
    17be:	53 e4       	ldi	r21, 0x43	; 67
    17c0:	6b 81       	ldd	r22, Y+3	; 0x03
    17c2:	7c 81       	ldd	r23, Y+4	; 0x04
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    17cc:	88 23       	and	r24, r24
    17ce:	8c f0       	brlt	.+34     	; 0x17f2 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x52>
	{
		yawError = yawError - 360;
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	44 eb       	ldi	r20, 0xB4	; 180
    17d6:	53 e4       	ldi	r21, 0x43	; 67
    17d8:	6b 81       	ldd	r22, Y+3	; 0x03
    17da:	7c 81       	ldd	r23, Y+4	; 0x04
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8b 83       	std	Y+3, r24	; 0x03
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	ad 83       	std	Y+5, r26	; 0x05
    17ee:	be 83       	std	Y+6, r27	; 0x06
    17f0:	1c c0       	rjmp	.+56     	; 0x182a <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x8a>
	}
	else if (yawError < -180)
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	44 e3       	ldi	r20, 0x34	; 52
    17f8:	53 ec       	ldi	r21, 0xC3	; 195
    17fa:	6b 81       	ldd	r22, Y+3	; 0x03
    17fc:	7c 81       	ldd	r23, Y+4	; 0x04
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    1806:	88 23       	and	r24, r24
    1808:	84 f4       	brge	.+32     	; 0x182a <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x8a>
	{
		yawError = yawError + 360;
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	44 eb       	ldi	r20, 0xB4	; 180
    1810:	53 e4       	ldi	r21, 0x43	; 67
    1812:	6b 81       	ldd	r22, Y+3	; 0x03
    1814:	7c 81       	ldd	r23, Y+4	; 0x04
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8b 83       	std	Y+3, r24	; 0x03
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	ad 83       	std	Y+5, r26	; 0x05
    1828:	be 83       	std	Y+6, r27	; 0x06
	}
	
	return yawError;
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	ad 81       	ldd	r26, Y+5	; 0x05
    1830:	be 81       	ldd	r27, Y+6	; 0x06
}
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	26 96       	adiw	r28, 0x06	; 6
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	08 95       	ret

00001848 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>:


void PIDController::tailRotorCollectiveOuterLoopUpdate()
{
    1848:	7f 92       	push	r7
    184a:	8f 92       	push	r8
    184c:	9f 92       	push	r9
    184e:	af 92       	push	r10
    1850:	bf 92       	push	r11
    1852:	cf 92       	push	r12
    1854:	df 92       	push	r13
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	6a 97       	sbiw	r28, 0x1a	; 26
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	9a 8f       	std	Y+26, r25	; 0x1a
    1874:	89 8f       	std	Y+25, r24	; 0x19
	if (model->OperationalState() == SystemModel::AutoPilot)
    1876:	89 8d       	ldd	r24, Y+25	; 0x19
    1878:	9a 8d       	ldd	r25, Y+26	; 0x1a
    187a:	fc 01       	movw	r30, r24
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>
    1884:	98 2f       	mov	r25, r24
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	91 30       	cpi	r25, 0x01	; 1
    188a:	09 f0       	breq	.+2      	; 0x188e <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv+0x46>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	88 23       	and	r24, r24
    1890:	09 f4       	brne	.+2      	; 0x1894 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv+0x4c>
    1892:	49 c1       	rjmp	.+658    	; 0x1b26 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv+0x2de>
	{
		float yawProportional = calculateProportional(model->MagYawDegrees(), model->ReferenceMagYawDegrees());
    1894:	89 8d       	ldd	r24, Y+25	; 0x19
    1896:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1898:	fc 01       	movw	r30, r24
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>
    18a2:	6b 01       	movw	r12, r22
    18a4:	7c 01       	movw	r14, r24
    18a6:	89 8d       	ldd	r24, Y+25	; 0x19
    18a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	e9 8d       	ldd	r30, Y+25	; 0x19
    18ba:	fa 8d       	ldd	r31, Y+26	; 0x1a
    18bc:	97 01       	movw	r18, r14
    18be:	86 01       	movw	r16, r12
    18c0:	ac 01       	movw	r20, r24
    18c2:	bd 01       	movw	r22, r26
    18c4:	cf 01       	movw	r24, r30
    18c6:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	ab 83       	std	Y+3, r26	; 0x03
    18d4:	bc 83       	std	Y+4, r27	; 0x04
		
		yawProportional = convertYawErrorFrom360to180(yawProportional);
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	ab 81       	ldd	r26, Y+3	; 0x03
    18dc:	bc 81       	ldd	r27, Y+4	; 0x04
    18de:	29 8d       	ldd	r18, Y+25	; 0x19
    18e0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    18e2:	ac 01       	movw	r20, r24
    18e4:	bd 01       	movw	r22, r26
    18e6:	c9 01       	movw	r24, r18
    18e8:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	ab 83       	std	Y+3, r26	; 0x03
    18f6:	bc 83       	std	Y+4, r27	; 0x04
		
		float yawIntegralAntiWindup = calculateIntegralAntiWindup(model->YawControlBeforeServoLimitsAdjustment(), model->YawControl(), yawAntiWindupGain);
    18f8:	89 8d       	ldd	r24, Y+25	; 0x19
    18fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18fc:	fc 01       	movw	r30, r24
    18fe:	c6 84       	ldd	r12, Z+14	; 0x0e
    1900:	d7 84       	ldd	r13, Z+15	; 0x0f
    1902:	e0 88       	ldd	r14, Z+16	; 0x10
    1904:	f1 88       	ldd	r15, Z+17	; 0x11
    1906:	89 8d       	ldd	r24, Y+25	; 0x19
    1908:	9a 8d       	ldd	r25, Y+26	; 0x1a
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZNK10helicopter5model11SystemModel10YawControlEv>
    1914:	4b 01       	movw	r8, r22
    1916:	5c 01       	movw	r10, r24
    1918:	89 8d       	ldd	r24, Y+25	; 0x19
    191a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    191c:	fc 01       	movw	r30, r24
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	0e 94 9f 01 	call	0x33e	; 0x33e <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	e9 8d       	ldd	r30, Y+25	; 0x19
    192c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    192e:	95 01       	movw	r18, r10
    1930:	84 01       	movw	r16, r8
    1932:	ac 01       	movw	r20, r24
    1934:	bd 01       	movw	r22, r26
    1936:	cf 01       	movw	r24, r30
    1938:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	8d 83       	std	Y+5, r24	; 0x05
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	af 83       	std	Y+7, r26	; 0x07
    1946:	b8 87       	std	Y+8, r27	; 0x08
		float weightedYawIntegral = calculateIntegral(yawProportional, model->YawIntegral(), yawIntegralAntiWindup, yawIntegralGain);
    1948:	89 8d       	ldd	r24, Y+25	; 0x19
    194a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    194c:	fc 01       	movw	r30, r24
    194e:	a2 80       	ldd	r10, Z+2	; 0x02
    1950:	b3 80       	ldd	r11, Z+3	; 0x03
    1952:	c4 80       	ldd	r12, Z+4	; 0x04
    1954:	d5 80       	ldd	r13, Z+5	; 0x05
    1956:	89 8d       	ldd	r24, Y+25	; 0x19
    1958:	9a 8d       	ldd	r25, Y+26	; 0x1a
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	0e 94 01 02 	call	0x402	; 0x402 <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
    1964:	9b 01       	movw	r18, r22
    1966:	ac 01       	movw	r20, r24
    1968:	ed 80       	ldd	r14, Y+5	; 0x05
    196a:	fe 80       	ldd	r15, Y+6	; 0x06
    196c:	0f 81       	ldd	r16, Y+7	; 0x07
    196e:	18 85       	ldd	r17, Y+8	; 0x08
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	ab 81       	ldd	r26, Y+3	; 0x03
    1976:	bc 81       	ldd	r27, Y+4	; 0x04
    1978:	e9 8d       	ldd	r30, Y+25	; 0x19
    197a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    197c:	45 01       	movw	r8, r10
    197e:	56 01       	movw	r10, r12
    1980:	67 01       	movw	r12, r14
    1982:	78 01       	movw	r14, r16
    1984:	89 01       	movw	r16, r18
    1986:	9a 01       	movw	r18, r20
    1988:	ac 01       	movw	r20, r24
    198a:	bd 01       	movw	r22, r26
    198c:	cf 01       	movw	r24, r30
    198e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	89 87       	std	Y+9, r24	; 0x09
    1998:	9a 87       	std	Y+10, r25	; 0x0a
    199a:	ab 87       	std	Y+11, r26	; 0x0b
    199c:	bc 87       	std	Y+12, r27	; 0x0c
		float yawDerivativeError = calculateVelocityError(model->YawVelocityDegreesPerSecond(), model->ReferenceYawVelocityDegreesPerSecond());
    199e:	89 8d       	ldd	r24, Y+25	; 0x19
    19a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19a2:	fc 01       	movw	r30, r24
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>
    19ac:	6b 01       	movw	r12, r22
    19ae:	7c 01       	movw	r14, r24
    19b0:	89 8d       	ldd	r24, Y+25	; 0x19
    19b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19b4:	fc 01       	movw	r30, r24
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	e9 8d       	ldd	r30, Y+25	; 0x19
    19c4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    19c6:	97 01       	movw	r18, r14
    19c8:	86 01       	movw	r16, r12
    19ca:	ac 01       	movw	r20, r24
    19cc:	bd 01       	movw	r22, r26
    19ce:	cf 01       	movw	r24, r30
    19d0:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8d 87       	std	Y+13, r24	; 0x0d
    19da:	9e 87       	std	Y+14, r25	; 0x0e
    19dc:	af 87       	std	Y+15, r26	; 0x0f
    19de:	b8 8b       	std	Y+16, r27	; 0x10
		float yawControlBeforeServoLimitsAdjustment = calculateOuterLoopControlValue(yawProportional, yawDerivativeError, weightedYawIntegral, yawProportionalGain, yawDerivativeGain, 1);
    19e0:	89 8d       	ldd	r24, Y+25	; 0x19
    19e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19e4:	fc 01       	movw	r30, r24
    19e6:	86 81       	ldd	r24, Z+6	; 0x06
    19e8:	97 81       	ldd	r25, Z+7	; 0x07
    19ea:	a0 85       	ldd	r26, Z+8	; 0x08
    19ec:	b1 85       	ldd	r27, Z+9	; 0x09
    19ee:	29 8d       	ldd	r18, Y+25	; 0x19
    19f0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    19f2:	f9 01       	movw	r30, r18
    19f4:	82 84       	ldd	r8, Z+10	; 0x0a
    19f6:	93 84       	ldd	r9, Z+11	; 0x0b
    19f8:	a4 84       	ldd	r10, Z+12	; 0x0c
    19fa:	b5 84       	ldd	r11, Z+13	; 0x0d
    19fc:	c9 84       	ldd	r12, Y+9	; 0x09
    19fe:	da 84       	ldd	r13, Y+10	; 0x0a
    1a00:	eb 84       	ldd	r14, Y+11	; 0x0b
    1a02:	fc 84       	ldd	r15, Y+12	; 0x0c
    1a04:	0d 85       	ldd	r16, Y+13	; 0x0d
    1a06:	1e 85       	ldd	r17, Y+14	; 0x0e
    1a08:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a0a:	38 89       	ldd	r19, Y+16	; 0x10
    1a0c:	49 81       	ldd	r20, Y+1	; 0x01
    1a0e:	5a 81       	ldd	r21, Y+2	; 0x02
    1a10:	6b 81       	ldd	r22, Y+3	; 0x03
    1a12:	7c 81       	ldd	r23, Y+4	; 0x04
    1a14:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a16:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1a18:	1f 92       	push	r1
    1a1a:	77 24       	eor	r7, r7
    1a1c:	73 94       	inc	r7
    1a1e:	7f 92       	push	r7
    1a20:	7b 2e       	mov	r7, r27
    1a22:	7f 92       	push	r7
    1a24:	7a 2e       	mov	r7, r26
    1a26:	7f 92       	push	r7
    1a28:	79 2e       	mov	r7, r25
    1a2a:	7f 92       	push	r7
    1a2c:	8f 93       	push	r24
    1a2e:	cf 01       	movw	r24, r30
    1a30:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	89 8b       	std	Y+17, r24	; 0x11
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	ab 8b       	std	Y+19, r26	; 0x13
    1a4a:	bc 8b       	std	Y+20, r27	; 0x14
		float yawControl = adjustControlForServoLimits(yawControlBeforeServoLimitsAdjustment, minYawServoControlValue, maxYawServoControlValue);
    1a4c:	89 8d       	ldd	r24, Y+25	; 0x19
    1a4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a50:	8a 5a       	subi	r24, 0xAA	; 170
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	fc 01       	movw	r30, r24
    1a56:	e0 80       	ld	r14, Z
    1a58:	f1 80       	ldd	r15, Z+1	; 0x01
    1a5a:	02 81       	ldd	r16, Z+2	; 0x02
    1a5c:	13 81       	ldd	r17, Z+3	; 0x03
    1a5e:	89 8d       	ldd	r24, Y+25	; 0x19
    1a60:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a62:	8e 5a       	subi	r24, 0xAE	; 174
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	fc 01       	movw	r30, r24
    1a68:	20 81       	ld	r18, Z
    1a6a:	31 81       	ldd	r19, Z+1	; 0x01
    1a6c:	42 81       	ldd	r20, Z+2	; 0x02
    1a6e:	53 81       	ldd	r21, Z+3	; 0x03
    1a70:	89 89       	ldd	r24, Y+17	; 0x11
    1a72:	9a 89       	ldd	r25, Y+18	; 0x12
    1a74:	ab 89       	ldd	r26, Y+19	; 0x13
    1a76:	bc 89       	ldd	r27, Y+20	; 0x14
    1a78:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a7a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1a7c:	67 01       	movw	r12, r14
    1a7e:	78 01       	movw	r14, r16
    1a80:	89 01       	movw	r16, r18
    1a82:	9a 01       	movw	r18, r20
    1a84:	ac 01       	movw	r20, r24
    1a86:	bd 01       	movw	r22, r26
    1a88:	cf 01       	movw	r24, r30
    1a8a:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8d 8b       	std	Y+21, r24	; 0x15
    1a94:	9e 8b       	std	Y+22, r25	; 0x16
    1a96:	af 8b       	std	Y+23, r26	; 0x17
    1a98:	b8 8f       	std	Y+24, r27	; 0x18
		
		model->YawControl(yawControl);
    1a9a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	20 81       	ld	r18, Z
    1aa2:	31 81       	ldd	r19, Z+1	; 0x01
    1aa4:	8d 89       	ldd	r24, Y+21	; 0x15
    1aa6:	9e 89       	ldd	r25, Y+22	; 0x16
    1aa8:	af 89       	ldd	r26, Y+23	; 0x17
    1aaa:	b8 8d       	ldd	r27, Y+24	; 0x18
    1aac:	ac 01       	movw	r20, r24
    1aae:	bd 01       	movw	r22, r26
    1ab0:	c9 01       	movw	r24, r18
    1ab2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN10helicopter5model11SystemModel10YawControlEf>
		model->YawControlBeforeServoLimitsAdjustment(yawControlBeforeServoLimitsAdjustment);
    1ab6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ab8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1aba:	fc 01       	movw	r30, r24
    1abc:	20 81       	ld	r18, Z
    1abe:	31 81       	ldd	r19, Z+1	; 0x01
    1ac0:	89 89       	ldd	r24, Y+17	; 0x11
    1ac2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac4:	ab 89       	ldd	r26, Y+19	; 0x13
    1ac6:	bc 89       	ldd	r27, Y+20	; 0x14
    1ac8:	ac 01       	movw	r20, r24
    1aca:	bd 01       	movw	r22, r26
    1acc:	c9 01       	movw	r24, r18
    1ace:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEf>
		model->YawIntegral(weightedYawIntegral);
    1ad2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ad4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	20 81       	ld	r18, Z
    1ada:	31 81       	ldd	r19, Z+1	; 0x01
    1adc:	89 85       	ldd	r24, Y+9	; 0x09
    1ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ae2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	bd 01       	movw	r22, r26
    1ae8:	c9 01       	movw	r24, r18
    1aea:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN10helicopter5model11SystemModel11YawIntegralEf>
		model->YawProportional(yawProportional);
    1aee:	89 8d       	ldd	r24, Y+25	; 0x19
    1af0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1af2:	fc 01       	movw	r30, r24
    1af4:	20 81       	ld	r18, Z
    1af6:	31 81       	ldd	r19, Z+1	; 0x01
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	ab 81       	ldd	r26, Y+3	; 0x03
    1afe:	bc 81       	ldd	r27, Y+4	; 0x04
    1b00:	ac 01       	movw	r20, r24
    1b02:	bd 01       	movw	r22, r26
    1b04:	c9 01       	movw	r24, r18
    1b06:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN10helicopter5model11SystemModel15YawProportionalEf>
		model->YawDerivativeError(yawDerivativeError);
    1b0a:	89 8d       	ldd	r24, Y+25	; 0x19
    1b0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b0e:	fc 01       	movw	r30, r24
    1b10:	20 81       	ld	r18, Z
    1b12:	31 81       	ldd	r19, Z+1	; 0x01
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	af 85       	ldd	r26, Y+15	; 0x0f
    1b1a:	b8 89       	ldd	r27, Y+16	; 0x10
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	bd 01       	movw	r22, r26
    1b20:	c9 01       	movw	r24, r18
    1b22:	0e 94 57 02 	call	0x4ae	; 0x4ae <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEf>
	}
}
    1b26:	6a 96       	adiw	r28, 0x1a	; 26
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	cf 90       	pop	r12
    1b42:	bf 90       	pop	r11
    1b44:	af 90       	pop	r10
    1b46:	9f 90       	pop	r9
    1b48:	8f 90       	pop	r8
    1b4a:	7f 90       	pop	r7
    1b4c:	08 95       	ret

00001b4e <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv>:

void PIDController::mainRotorCollectiveOuterLoopUpdate()
{
    1b4e:	7f 92       	push	r7
    1b50:	8f 92       	push	r8
    1b52:	9f 92       	push	r9
    1b54:	af 92       	push	r10
    1b56:	bf 92       	push	r11
    1b58:	cf 92       	push	r12
    1b5a:	df 92       	push	r13
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	6a 97       	sbiw	r28, 0x1a	; 26
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	9a 8f       	std	Y+26, r25	; 0x1a
    1b7a:	89 8f       	std	Y+25, r24	; 0x19
	if (model->OperationalState() == SystemModel::AutoPilot)
    1b7c:	89 8d       	ldd	r24, Y+25	; 0x19
    1b7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b80:	fc 01       	movw	r30, r24
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	91 30       	cpi	r25, 0x01	; 1
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv+0x46>
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	88 23       	and	r24, r24
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv+0x4c>
    1b98:	40 c1       	rjmp	.+640    	; 0x1e1a <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv+0x2cc>
	{
		float zProportional = calculateProportional(model->ZNEDBodyFrame(), model->ReferenceZNEDBodyFrameFeet());
    1b9a:	89 8d       	ldd	r24, Y+25	; 0x19
    1b9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZNK10helicopter5model11SystemModel26ReferenceZNEDBodyFrameFeetEv>
    1ba8:	6b 01       	movw	r12, r22
    1baa:	7c 01       	movw	r14, r24
    1bac:	89 8d       	ldd	r24, Y+25	; 0x19
    1bae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	80 81       	ld	r24, Z
    1bb4:	91 81       	ldd	r25, Z+1	; 0x01
    1bb6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZNK10helicopter5model11SystemModel13ZNEDBodyFrameEv>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bc0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bc2:	97 01       	movw	r18, r14
    1bc4:	86 01       	movw	r16, r12
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	bd 01       	movw	r22, r26
    1bca:	cf 01       	movw	r24, r30
    1bcc:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	ab 83       	std	Y+3, r26	; 0x03
    1bda:	bc 83       	std	Y+4, r27	; 0x04
	
		float zIntegralAntiWindup = calculateIntegralAntiWindup(model->MainRotorControlBeforeServoLimitsAdjustment(), model->MainRotorCollectiveControl(), zAntiWindupGain);
    1bdc:	89 8d       	ldd	r24, Y+25	; 0x19
    1bde:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1be0:	82 5b       	subi	r24, 0xB2	; 178
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	fc 01       	movw	r30, r24
    1be6:	c0 80       	ld	r12, Z
    1be8:	d1 80       	ldd	r13, Z+1	; 0x01
    1bea:	e2 80       	ldd	r14, Z+2	; 0x02
    1bec:	f3 80       	ldd	r15, Z+3	; 0x03
    1bee:	89 8d       	ldd	r24, Y+25	; 0x19
    1bf0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	80 81       	ld	r24, Z
    1bf6:	91 81       	ldd	r25, Z+1	; 0x01
    1bf8:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZNK10helicopter5model11SystemModel26MainRotorCollectiveControlEv>
    1bfc:	4b 01       	movw	r8, r22
    1bfe:	5c 01       	movw	r10, r24
    1c00:	89 8d       	ldd	r24, Y+25	; 0x19
    1c02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c04:	fc 01       	movw	r30, r24
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZNK10helicopter5model11SystemModel43MainRotorControlBeforeServoLimitsAdjustmentEv>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c14:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c16:	95 01       	movw	r18, r10
    1c18:	84 01       	movw	r16, r8
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	bd 01       	movw	r22, r26
    1c1e:	cf 01       	movw	r24, r30
    1c20:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	af 83       	std	Y+7, r26	; 0x07
    1c2e:	b8 87       	std	Y+8, r27	; 0x08
		float weightedZIntegral = calculateIntegral(zProportional, model->ZIntegral(), zIntegralAntiWindup, zIntegralGain);
    1c30:	89 8d       	ldd	r24, Y+25	; 0x19
    1c32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c34:	8e 5b       	subi	r24, 0xBE	; 190
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	fc 01       	movw	r30, r24
    1c3a:	a0 80       	ld	r10, Z
    1c3c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c3e:	c2 80       	ldd	r12, Z+2	; 0x02
    1c40:	d3 80       	ldd	r13, Z+3	; 0x03
    1c42:	89 8d       	ldd	r24, Y+25	; 0x19
    1c44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c46:	fc 01       	movw	r30, r24
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	0e 94 be 06 	call	0xd7c	; 0xd7c <_ZNK10helicopter5model11SystemModel9ZIntegralEv>
    1c50:	9b 01       	movw	r18, r22
    1c52:	ac 01       	movw	r20, r24
    1c54:	ed 80       	ldd	r14, Y+5	; 0x05
    1c56:	fe 80       	ldd	r15, Y+6	; 0x06
    1c58:	0f 81       	ldd	r16, Y+7	; 0x07
    1c5a:	18 85       	ldd	r17, Y+8	; 0x08
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	ab 81       	ldd	r26, Y+3	; 0x03
    1c62:	bc 81       	ldd	r27, Y+4	; 0x04
    1c64:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c66:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c68:	45 01       	movw	r8, r10
    1c6a:	56 01       	movw	r10, r12
    1c6c:	67 01       	movw	r12, r14
    1c6e:	78 01       	movw	r14, r16
    1c70:	89 01       	movw	r16, r18
    1c72:	9a 01       	movw	r18, r20
    1c74:	ac 01       	movw	r20, r24
    1c76:	bd 01       	movw	r22, r26
    1c78:	cf 01       	movw	r24, r30
    1c7a:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	89 87       	std	Y+9, r24	; 0x09
    1c84:	9a 87       	std	Y+10, r25	; 0x0a
    1c86:	ab 87       	std	Y+11, r26	; 0x0b
    1c88:	bc 87       	std	Y+12, r27	; 0x0c
		float zDerivativeError = calculateVelocityError(model->ZVelocityFeetPerSecond(), model->ReferenceZVelocityFeetPerSecond());
    1c8a:	89 8d       	ldd	r24, Y+25	; 0x19
    1c8c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c8e:	fc 01       	movw	r30, r24
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_ZNK10helicopter5model11SystemModel31ReferenceZVelocityFeetPerSecondEv>
    1c98:	6b 01       	movw	r12, r22
    1c9a:	7c 01       	movw	r14, r24
    1c9c:	89 8d       	ldd	r24, Y+25	; 0x19
    1c9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZNK10helicopter5model11SystemModel22ZVelocityFeetPerSecondEv>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	e9 8d       	ldd	r30, Y+25	; 0x19
    1cb0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1cb2:	97 01       	movw	r18, r14
    1cb4:	86 01       	movw	r16, r12
    1cb6:	ac 01       	movw	r20, r24
    1cb8:	bd 01       	movw	r22, r26
    1cba:	cf 01       	movw	r24, r30
    1cbc:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8d 87       	std	Y+13, r24	; 0x0d
    1cc6:	9e 87       	std	Y+14, r25	; 0x0e
    1cc8:	af 87       	std	Y+15, r26	; 0x0f
    1cca:	b8 8b       	std	Y+16, r27	; 0x10
		float mainRotorControlBeforeServoLimitsAdjustment = calculateOuterLoopControlValue(zProportional, zDerivativeError, weightedZIntegral, zProportionalGain, zDerivativeGain, 1);
    1ccc:	89 8d       	ldd	r24, Y+25	; 0x19
    1cce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cd0:	8a 5b       	subi	r24, 0xBA	; 186
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	a2 81       	ldd	r26, Z+2	; 0x02
    1cdc:	b3 81       	ldd	r27, Z+3	; 0x03
    1cde:	29 8d       	ldd	r18, Y+25	; 0x19
    1ce0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1ce2:	26 5b       	subi	r18, 0xB6	; 182
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	80 80       	ld	r8, Z
    1cea:	91 80       	ldd	r9, Z+1	; 0x01
    1cec:	a2 80       	ldd	r10, Z+2	; 0x02
    1cee:	b3 80       	ldd	r11, Z+3	; 0x03
    1cf0:	c9 84       	ldd	r12, Y+9	; 0x09
    1cf2:	da 84       	ldd	r13, Y+10	; 0x0a
    1cf4:	eb 84       	ldd	r14, Y+11	; 0x0b
    1cf6:	fc 84       	ldd	r15, Y+12	; 0x0c
    1cf8:	0d 85       	ldd	r16, Y+13	; 0x0d
    1cfa:	1e 85       	ldd	r17, Y+14	; 0x0e
    1cfc:	2f 85       	ldd	r18, Y+15	; 0x0f
    1cfe:	38 89       	ldd	r19, Y+16	; 0x10
    1d00:	49 81       	ldd	r20, Y+1	; 0x01
    1d02:	5a 81       	ldd	r21, Y+2	; 0x02
    1d04:	6b 81       	ldd	r22, Y+3	; 0x03
    1d06:	7c 81       	ldd	r23, Y+4	; 0x04
    1d08:	e9 8d       	ldd	r30, Y+25	; 0x19
    1d0a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1d0c:	1f 92       	push	r1
    1d0e:	77 24       	eor	r7, r7
    1d10:	73 94       	inc	r7
    1d12:	7f 92       	push	r7
    1d14:	7b 2e       	mov	r7, r27
    1d16:	7f 92       	push	r7
    1d18:	7a 2e       	mov	r7, r26
    1d1a:	7f 92       	push	r7
    1d1c:	79 2e       	mov	r7, r25
    1d1e:	7f 92       	push	r7
    1d20:	8f 93       	push	r24
    1d22:	cf 01       	movw	r24, r30
    1d24:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	89 8b       	std	Y+17, r24	; 0x11
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	ab 8b       	std	Y+19, r26	; 0x13
    1d3e:	bc 8b       	std	Y+20, r27	; 0x14
		float mainRotorControl = adjustControlForServoLimits(mainRotorControlBeforeServoLimitsAdjustment, minMainRotorServoControlValue, maxMainRotorServoControlValue);
    1d40:	89 8d       	ldd	r24, Y+25	; 0x19
    1d42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d44:	82 59       	subi	r24, 0x92	; 146
    1d46:	9f 4f       	sbci	r25, 0xFF	; 255
    1d48:	fc 01       	movw	r30, r24
    1d4a:	e0 80       	ld	r14, Z
    1d4c:	f1 80       	ldd	r15, Z+1	; 0x01
    1d4e:	02 81       	ldd	r16, Z+2	; 0x02
    1d50:	13 81       	ldd	r17, Z+3	; 0x03
    1d52:	89 8d       	ldd	r24, Y+25	; 0x19
    1d54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d56:	86 59       	subi	r24, 0x96	; 150
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	20 81       	ld	r18, Z
    1d5e:	31 81       	ldd	r19, Z+1	; 0x01
    1d60:	42 81       	ldd	r20, Z+2	; 0x02
    1d62:	53 81       	ldd	r21, Z+3	; 0x03
    1d64:	89 89       	ldd	r24, Y+17	; 0x11
    1d66:	9a 89       	ldd	r25, Y+18	; 0x12
    1d68:	ab 89       	ldd	r26, Y+19	; 0x13
    1d6a:	bc 89       	ldd	r27, Y+20	; 0x14
    1d6c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1d6e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1d70:	67 01       	movw	r12, r14
    1d72:	78 01       	movw	r14, r16
    1d74:	89 01       	movw	r16, r18
    1d76:	9a 01       	movw	r18, r20
    1d78:	ac 01       	movw	r20, r24
    1d7a:	bd 01       	movw	r22, r26
    1d7c:	cf 01       	movw	r24, r30
    1d7e:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	8d 8b       	std	Y+21, r24	; 0x15
    1d88:	9e 8b       	std	Y+22, r25	; 0x16
    1d8a:	af 8b       	std	Y+23, r26	; 0x17
    1d8c:	b8 8f       	std	Y+24, r27	; 0x18
	
		model->MainRotorCollectiveControl(mainRotorControl);
    1d8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1d90:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d92:	fc 01       	movw	r30, r24
    1d94:	20 81       	ld	r18, Z
    1d96:	31 81       	ldd	r19, Z+1	; 0x01
    1d98:	8d 89       	ldd	r24, Y+21	; 0x15
    1d9a:	9e 89       	ldd	r25, Y+22	; 0x16
    1d9c:	af 89       	ldd	r26, Y+23	; 0x17
    1d9e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1da0:	ac 01       	movw	r20, r24
    1da2:	bd 01       	movw	r22, r26
    1da4:	c9 01       	movw	r24, r18
    1da6:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN10helicopter5model11SystemModel26MainRotorCollectiveControlEf>
		model->MainRotorControlBeforeServoLimitsAdjustment(mainRotorControlBeforeServoLimitsAdjustment);
    1daa:	89 8d       	ldd	r24, Y+25	; 0x19
    1dac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dae:	fc 01       	movw	r30, r24
    1db0:	20 81       	ld	r18, Z
    1db2:	31 81       	ldd	r19, Z+1	; 0x01
    1db4:	89 89       	ldd	r24, Y+17	; 0x11
    1db6:	9a 89       	ldd	r25, Y+18	; 0x12
    1db8:	ab 89       	ldd	r26, Y+19	; 0x13
    1dba:	bc 89       	ldd	r27, Y+20	; 0x14
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	bd 01       	movw	r22, r26
    1dc0:	c9 01       	movw	r24, r18
    1dc2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN10helicopter5model11SystemModel43MainRotorControlBeforeServoLimitsAdjustmentEf>
		model->ZIntegral(weightedZIntegral);
    1dc6:	89 8d       	ldd	r24, Y+25	; 0x19
    1dc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dca:	fc 01       	movw	r30, r24
    1dcc:	20 81       	ld	r18, Z
    1dce:	31 81       	ldd	r19, Z+1	; 0x01
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1dd6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1dd8:	ac 01       	movw	r20, r24
    1dda:	bd 01       	movw	r22, r26
    1ddc:	c9 01       	movw	r24, r18
    1dde:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN10helicopter5model11SystemModel9ZIntegralEf>
		model->ZProportional(zProportional);
    1de2:	89 8d       	ldd	r24, Y+25	; 0x19
    1de4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 81       	ld	r18, Z
    1dea:	31 81       	ldd	r19, Z+1	; 0x01
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	ab 81       	ldd	r26, Y+3	; 0x03
    1df2:	bc 81       	ldd	r27, Y+4	; 0x04
    1df4:	ac 01       	movw	r20, r24
    1df6:	bd 01       	movw	r22, r26
    1df8:	c9 01       	movw	r24, r18
    1dfa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN10helicopter5model11SystemModel13ZProportionalEf>
		model->ZDerivativeError(zDerivativeError);
    1dfe:	89 8d       	ldd	r24, Y+25	; 0x19
    1e00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 81       	ld	r18, Z
    1e06:	31 81       	ldd	r19, Z+1	; 0x01
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	af 85       	ldd	r26, Y+15	; 0x0f
    1e0e:	b8 89       	ldd	r27, Y+16	; 0x10
    1e10:	ac 01       	movw	r20, r24
    1e12:	bd 01       	movw	r22, r26
    1e14:	c9 01       	movw	r24, r18
    1e16:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN10helicopter5model11SystemModel16ZDerivativeErrorEf>
	}
}
    1e1a:	6a 96       	adiw	r28, 0x1a	; 26
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	bf 90       	pop	r11
    1e38:	af 90       	pop	r10
    1e3a:	9f 90       	pop	r9
    1e3c:	8f 90       	pop	r8
    1e3e:	7f 90       	pop	r7
    1e40:	08 95       	ret

00001e42 <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv>:

void PIDController::cyclicLongitudeOuterLoopUpdate()
{
    1e42:	7f 92       	push	r7
    1e44:	8f 92       	push	r8
    1e46:	9f 92       	push	r9
    1e48:	af 92       	push	r10
    1e4a:	bf 92       	push	r11
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	66 97       	sbiw	r28, 0x16	; 22
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	9e 8b       	std	Y+22, r25	; 0x16
    1e6e:	8d 8b       	std	Y+21, r24	; 0x15
	if (model->OperationalState() == SystemModel::AutoPilot)
    1e70:	8d 89       	ldd	r24, Y+21	; 0x15
    1e72:	9e 89       	ldd	r25, Y+22	; 0x16
    1e74:	fc 01       	movw	r30, r24
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>
    1e7e:	98 2f       	mov	r25, r24
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	91 30       	cpi	r25, 0x01	; 1
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv+0x46>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	88 23       	and	r24, r24
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv+0x4c>
    1e8c:	2a c1       	rjmp	.+596    	; 0x20e2 <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv+0x2a0>
	{
		float xProportional = calculateProportional(model->XNEDBodyFrame(), model->ReferenceXNEDBodyFrame());
    1e8e:	8d 89       	ldd	r24, Y+21	; 0x15
    1e90:	9e 89       	ldd	r25, Y+22	; 0x16
    1e92:	fc 01       	movw	r30, r24
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZNK10helicopter5model11SystemModel22ReferenceXNEDBodyFrameEv>
    1e9c:	6b 01       	movw	r12, r22
    1e9e:	7c 01       	movw	r14, r24
    1ea0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ea2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZNK10helicopter5model11SystemModel13XNEDBodyFrameEv>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	ed 89       	ldd	r30, Y+21	; 0x15
    1eb4:	fe 89       	ldd	r31, Y+22	; 0x16
    1eb6:	97 01       	movw	r18, r14
    1eb8:	86 01       	movw	r16, r12
    1eba:	ac 01       	movw	r20, r24
    1ebc:	bd 01       	movw	r22, r26
    1ebe:	cf 01       	movw	r24, r30
    1ec0:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	ab 83       	std	Y+3, r26	; 0x03
    1ece:	bc 83       	std	Y+4, r27	; 0x04
		float xIntegralAntiWindup = calculateIntegralAntiWindup(model->LongitudeControlBeforeServoLimitsAdjustment(), model->LongitudeControl(), xAntiWindupGain);
    1ed0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ed2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	c6 8c       	ldd	r12, Z+30	; 0x1e
    1ed8:	d7 8c       	ldd	r13, Z+31	; 0x1f
    1eda:	e0 a0       	ldd	r14, Z+32	; 0x20
    1edc:	f1 a0       	ldd	r15, Z+33	; 0x21
    1ede:	8d 89       	ldd	r24, Y+21	; 0x15
    1ee0:	9e 89       	ldd	r25, Y+22	; 0x16
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZNK10helicopter5model11SystemModel16LongitudeControlEv>
    1eec:	4b 01       	movw	r8, r22
    1eee:	5c 01       	movw	r10, r24
    1ef0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	0e 94 a3 02 	call	0x546	; 0x546 <_ZNK10helicopter5model11SystemModel43LongitudeControlBeforeServoLimitsAdjustmentEv>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	ed 89       	ldd	r30, Y+21	; 0x15
    1f04:	fe 89       	ldd	r31, Y+22	; 0x16
    1f06:	95 01       	movw	r18, r10
    1f08:	84 01       	movw	r16, r8
    1f0a:	ac 01       	movw	r20, r24
    1f0c:	bd 01       	movw	r22, r26
    1f0e:	cf 01       	movw	r24, r30
    1f10:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8d 83       	std	Y+5, r24	; 0x05
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	af 83       	std	Y+7, r26	; 0x07
    1f1e:	b8 87       	std	Y+8, r27	; 0x08
		float weightedXIntegral = calculateIntegral(xProportional, model->XIntegral(), xIntegralAntiWindup, xIntegralGain);
    1f20:	8d 89       	ldd	r24, Y+21	; 0x15
    1f22:	9e 89       	ldd	r25, Y+22	; 0x16
    1f24:	fc 01       	movw	r30, r24
    1f26:	a2 88       	ldd	r10, Z+18	; 0x12
    1f28:	b3 88       	ldd	r11, Z+19	; 0x13
    1f2a:	c4 88       	ldd	r12, Z+20	; 0x14
    1f2c:	d5 88       	ldd	r13, Z+21	; 0x15
    1f2e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f30:	9e 89       	ldd	r25, Y+22	; 0x16
    1f32:	fc 01       	movw	r30, r24
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	0e 94 98 03 	call	0x730	; 0x730 <_ZNK10helicopter5model11SystemModel9XIntegralEv>
    1f3c:	9b 01       	movw	r18, r22
    1f3e:	ac 01       	movw	r20, r24
    1f40:	ed 80       	ldd	r14, Y+5	; 0x05
    1f42:	fe 80       	ldd	r15, Y+6	; 0x06
    1f44:	0f 81       	ldd	r16, Y+7	; 0x07
    1f46:	18 85       	ldd	r17, Y+8	; 0x08
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f50:	ed 89       	ldd	r30, Y+21	; 0x15
    1f52:	fe 89       	ldd	r31, Y+22	; 0x16
    1f54:	45 01       	movw	r8, r10
    1f56:	56 01       	movw	r10, r12
    1f58:	67 01       	movw	r12, r14
    1f5a:	78 01       	movw	r14, r16
    1f5c:	89 01       	movw	r16, r18
    1f5e:	9a 01       	movw	r18, r20
    1f60:	ac 01       	movw	r20, r24
    1f62:	bd 01       	movw	r22, r26
    1f64:	cf 01       	movw	r24, r30
    1f66:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	89 87       	std	Y+9, r24	; 0x09
    1f70:	9a 87       	std	Y+10, r25	; 0x0a
    1f72:	ab 87       	std	Y+11, r26	; 0x0b
    1f74:	bc 87       	std	Y+12, r27	; 0x0c
		float xDerivativeError = calculateVelocityError(model->XVelocityMetersPerSecond(), model->ReferenceXVelocityMetersPerSecond());
    1f76:	8d 89       	ldd	r24, Y+21	; 0x15
    1f78:	9e 89       	ldd	r25, Y+22	; 0x16
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	80 81       	ld	r24, Z
    1f7e:	91 81       	ldd	r25, Z+1	; 0x01
    1f80:	0e 94 25 03 	call	0x64a	; 0x64a <_ZNK10helicopter5model11SystemModel33ReferenceXVelocityMetersPerSecondEv>
    1f84:	6b 01       	movw	r12, r22
    1f86:	7c 01       	movw	r14, r24
    1f88:	8d 89       	ldd	r24, Y+21	; 0x15
    1f8a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZNK10helicopter5model11SystemModel24XVelocityMetersPerSecondEv>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	ed 89       	ldd	r30, Y+21	; 0x15
    1f9c:	fe 89       	ldd	r31, Y+22	; 0x16
    1f9e:	97 01       	movw	r18, r14
    1fa0:	86 01       	movw	r16, r12
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	bd 01       	movw	r22, r26
    1fa6:	cf 01       	movw	r24, r30
    1fa8:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8d 87       	std	Y+13, r24	; 0x0d
    1fb2:	9e 87       	std	Y+14, r25	; 0x0e
    1fb4:	af 87       	std	Y+15, r26	; 0x0f
    1fb6:	b8 8b       	std	Y+16, r27	; 0x10
		float xLongitudinalOuterLoopSetpoint = calculateOuterLoopControlValue(xProportional, xDerivativeError, weightedXIntegral, xProportionalGain, xDerivativeGain, 1);
    1fb8:	8d 89       	ldd	r24, Y+21	; 0x15
    1fba:	9e 89       	ldd	r25, Y+22	; 0x16
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	86 89       	ldd	r24, Z+22	; 0x16
    1fc0:	97 89       	ldd	r25, Z+23	; 0x17
    1fc2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1fc4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1fc6:	2d 89       	ldd	r18, Y+21	; 0x15
    1fc8:	3e 89       	ldd	r19, Y+22	; 0x16
    1fca:	f9 01       	movw	r30, r18
    1fcc:	82 8c       	ldd	r8, Z+26	; 0x1a
    1fce:	93 8c       	ldd	r9, Z+27	; 0x1b
    1fd0:	a4 8c       	ldd	r10, Z+28	; 0x1c
    1fd2:	b5 8c       	ldd	r11, Z+29	; 0x1d
    1fd4:	c9 84       	ldd	r12, Y+9	; 0x09
    1fd6:	da 84       	ldd	r13, Y+10	; 0x0a
    1fd8:	eb 84       	ldd	r14, Y+11	; 0x0b
    1fda:	fc 84       	ldd	r15, Y+12	; 0x0c
    1fdc:	0d 85       	ldd	r16, Y+13	; 0x0d
    1fde:	1e 85       	ldd	r17, Y+14	; 0x0e
    1fe0:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fe2:	38 89       	ldd	r19, Y+16	; 0x10
    1fe4:	49 81       	ldd	r20, Y+1	; 0x01
    1fe6:	5a 81       	ldd	r21, Y+2	; 0x02
    1fe8:	6b 81       	ldd	r22, Y+3	; 0x03
    1fea:	7c 81       	ldd	r23, Y+4	; 0x04
    1fec:	ed 89       	ldd	r30, Y+21	; 0x15
    1fee:	fe 89       	ldd	r31, Y+22	; 0x16
    1ff0:	1f 92       	push	r1
    1ff2:	77 24       	eor	r7, r7
    1ff4:	73 94       	inc	r7
    1ff6:	7f 92       	push	r7
    1ff8:	7b 2e       	mov	r7, r27
    1ffa:	7f 92       	push	r7
    1ffc:	7a 2e       	mov	r7, r26
    1ffe:	7f 92       	push	r7
    2000:	79 2e       	mov	r7, r25
    2002:	7f 92       	push	r7
    2004:	8f 93       	push	r24
    2006:	cf 01       	movw	r24, r30
    2008:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	89 8b       	std	Y+17, r24	; 0x11
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	ab 8b       	std	Y+19, r26	; 0x13
    2022:	bc 8b       	std	Y+20, r27	; 0x14
	
		xLongitudinalOuterLoopSetpoint = adjustForSetpointLimits(xLongitudinalOuterLoopSetpoint, minPitchSetpointDegrees, maxPitchSetpointDegrees);
    2024:	8d 89       	ldd	r24, Y+21	; 0x15
    2026:	9e 89       	ldd	r25, Y+22	; 0x16
    2028:	8a 58       	subi	r24, 0x8A	; 138
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	fc 01       	movw	r30, r24
    202e:	e0 80       	ld	r14, Z
    2030:	f1 80       	ldd	r15, Z+1	; 0x01
    2032:	02 81       	ldd	r16, Z+2	; 0x02
    2034:	13 81       	ldd	r17, Z+3	; 0x03
    2036:	8d 89       	ldd	r24, Y+21	; 0x15
    2038:	9e 89       	ldd	r25, Y+22	; 0x16
    203a:	8e 58       	subi	r24, 0x8E	; 142
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	fc 01       	movw	r30, r24
    2040:	20 81       	ld	r18, Z
    2042:	31 81       	ldd	r19, Z+1	; 0x01
    2044:	42 81       	ldd	r20, Z+2	; 0x02
    2046:	53 81       	ldd	r21, Z+3	; 0x03
    2048:	89 89       	ldd	r24, Y+17	; 0x11
    204a:	9a 89       	ldd	r25, Y+18	; 0x12
    204c:	ab 89       	ldd	r26, Y+19	; 0x13
    204e:	bc 89       	ldd	r27, Y+20	; 0x14
    2050:	ed 89       	ldd	r30, Y+21	; 0x15
    2052:	fe 89       	ldd	r31, Y+22	; 0x16
    2054:	67 01       	movw	r12, r14
    2056:	78 01       	movw	r14, r16
    2058:	89 01       	movw	r16, r18
    205a:	9a 01       	movw	r18, r20
    205c:	ac 01       	movw	r20, r24
    205e:	bd 01       	movw	r22, r26
    2060:	cf 01       	movw	r24, r30
    2062:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	89 8b       	std	Y+17, r24	; 0x11
    206c:	9a 8b       	std	Y+18, r25	; 0x12
    206e:	ab 8b       	std	Y+19, r26	; 0x13
    2070:	bc 8b       	std	Y+20, r27	; 0x14

		model->XLongitudeOuterLoopSetpoint(xLongitudinalOuterLoopSetpoint);
    2072:	8d 89       	ldd	r24, Y+21	; 0x15
    2074:	9e 89       	ldd	r25, Y+22	; 0x16
    2076:	fc 01       	movw	r30, r24
    2078:	20 81       	ld	r18, Z
    207a:	31 81       	ldd	r19, Z+1	; 0x01
    207c:	89 89       	ldd	r24, Y+17	; 0x11
    207e:	9a 89       	ldd	r25, Y+18	; 0x12
    2080:	ab 89       	ldd	r26, Y+19	; 0x13
    2082:	bc 89       	ldd	r27, Y+20	; 0x14
    2084:	ac 01       	movw	r20, r24
    2086:	bd 01       	movw	r22, r26
    2088:	c9 01       	movw	r24, r18
    208a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN10helicopter5model11SystemModel27XLongitudeOuterLoopSetpointEf>
		model->XIntegral(weightedXIntegral);
    208e:	8d 89       	ldd	r24, Y+21	; 0x15
    2090:	9e 89       	ldd	r25, Y+22	; 0x16
    2092:	fc 01       	movw	r30, r24
    2094:	20 81       	ld	r18, Z
    2096:	31 81       	ldd	r19, Z+1	; 0x01
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	ab 85       	ldd	r26, Y+11	; 0x0b
    209e:	bc 85       	ldd	r27, Y+12	; 0x0c
    20a0:	ac 01       	movw	r20, r24
    20a2:	bd 01       	movw	r22, r26
    20a4:	c9 01       	movw	r24, r18
    20a6:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN10helicopter5model11SystemModel9XIntegralEf>
		model->XProportional(xProportional);
    20aa:	8d 89       	ldd	r24, Y+21	; 0x15
    20ac:	9e 89       	ldd	r25, Y+22	; 0x16
    20ae:	fc 01       	movw	r30, r24
    20b0:	20 81       	ld	r18, Z
    20b2:	31 81       	ldd	r19, Z+1	; 0x01
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	ab 81       	ldd	r26, Y+3	; 0x03
    20ba:	bc 81       	ldd	r27, Y+4	; 0x04
    20bc:	ac 01       	movw	r20, r24
    20be:	bd 01       	movw	r22, r26
    20c0:	c9 01       	movw	r24, r18
    20c2:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN10helicopter5model11SystemModel13XProportionalEf>
		model->XDerivativeError(xDerivativeError);
    20c6:	8d 89       	ldd	r24, Y+21	; 0x15
    20c8:	9e 89       	ldd	r25, Y+22	; 0x16
    20ca:	fc 01       	movw	r30, r24
    20cc:	20 81       	ld	r18, Z
    20ce:	31 81       	ldd	r19, Z+1	; 0x01
    20d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d4:	af 85       	ldd	r26, Y+15	; 0x0f
    20d6:	b8 89       	ldd	r27, Y+16	; 0x10
    20d8:	ac 01       	movw	r20, r24
    20da:	bd 01       	movw	r22, r26
    20dc:	c9 01       	movw	r24, r18
    20de:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN10helicopter5model11SystemModel16XDerivativeErrorEf>
	}
}
    20e2:	66 96       	adiw	r28, 0x16	; 22
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	ff 90       	pop	r15
    20f8:	ef 90       	pop	r14
    20fa:	df 90       	pop	r13
    20fc:	cf 90       	pop	r12
    20fe:	bf 90       	pop	r11
    2100:	af 90       	pop	r10
    2102:	9f 90       	pop	r9
    2104:	8f 90       	pop	r8
    2106:	7f 90       	pop	r7
    2108:	08 95       	ret

0000210a <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv>:

void PIDController::cyclicLateralOuterLoopUpdate()
{
    210a:	7f 92       	push	r7
    210c:	8f 92       	push	r8
    210e:	9f 92       	push	r9
    2110:	af 92       	push	r10
    2112:	bf 92       	push	r11
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	66 97       	sbiw	r28, 0x16	; 22
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	9e 8b       	std	Y+22, r25	; 0x16
    2136:	8d 8b       	std	Y+21, r24	; 0x15
	if (model->OperationalState() == SystemModel::AutoPilot)
    2138:	8d 89       	ldd	r24, Y+21	; 0x15
    213a:	9e 89       	ldd	r25, Y+22	; 0x16
    213c:	fc 01       	movw	r30, r24
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>
    2146:	98 2f       	mov	r25, r24
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	91 30       	cpi	r25, 0x01	; 1
    214c:	09 f0       	breq	.+2      	; 0x2150 <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv+0x46>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	88 23       	and	r24, r24
    2152:	09 f4       	brne	.+2      	; 0x2156 <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv+0x4c>
    2154:	2c c1       	rjmp	.+600    	; 0x23ae <__stack+0x1af>
	{
		float yProportional = calculateProportional(model->YNEDBodyFrame(), model->ReferenceYNEDBodyFrame());
    2156:	8d 89       	ldd	r24, Y+21	; 0x15
    2158:	9e 89       	ldd	r25, Y+22	; 0x16
    215a:	fc 01       	movw	r30, r24
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZNK10helicopter5model11SystemModel22ReferenceYNEDBodyFrameEv>
    2164:	6b 01       	movw	r12, r22
    2166:	7c 01       	movw	r14, r24
    2168:	8d 89       	ldd	r24, Y+21	; 0x15
    216a:	9e 89       	ldd	r25, Y+22	; 0x16
    216c:	fc 01       	movw	r30, r24
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	0e 94 26 04 	call	0x84c	; 0x84c <_ZNK10helicopter5model11SystemModel13YNEDBodyFrameEv>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	ed 89       	ldd	r30, Y+21	; 0x15
    217c:	fe 89       	ldd	r31, Y+22	; 0x16
    217e:	97 01       	movw	r18, r14
    2180:	86 01       	movw	r16, r12
    2182:	ac 01       	movw	r20, r24
    2184:	bd 01       	movw	r22, r26
    2186:	cf 01       	movw	r24, r30
    2188:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	ab 83       	std	Y+3, r26	; 0x03
    2196:	bc 83       	std	Y+4, r27	; 0x04
		float yIntegralAntiWindup = calculateIntegralAntiWindup(model->LateralControlBeforeServoLimitsAdjustment(), model->LateralControl(), yAntiWindupGain);
    2198:	8d 89       	ldd	r24, Y+21	; 0x15
    219a:	9e 89       	ldd	r25, Y+22	; 0x16
    219c:	fc 01       	movw	r30, r24
    219e:	c6 a8       	ldd	r12, Z+54	; 0x36
    21a0:	d7 a8       	ldd	r13, Z+55	; 0x37
    21a2:	e0 ac       	ldd	r14, Z+56	; 0x38
    21a4:	f1 ac       	ldd	r15, Z+57	; 0x39
    21a6:	8d 89       	ldd	r24, Y+21	; 0x15
    21a8:	9e 89       	ldd	r25, Y+22	; 0x16
    21aa:	fc 01       	movw	r30, r24
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	0e 94 91 04 	call	0x922	; 0x922 <_ZNK10helicopter5model11SystemModel14LateralControlEv>
    21b4:	4b 01       	movw	r8, r22
    21b6:	5c 01       	movw	r10, r24
    21b8:	8d 89       	ldd	r24, Y+21	; 0x15
    21ba:	9e 89       	ldd	r25, Y+22	; 0x16
    21bc:	fc 01       	movw	r30, r24
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZNK10helicopter5model11SystemModel41LateralControlBeforeServoLimitsAdjustmentEv>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	ed 89       	ldd	r30, Y+21	; 0x15
    21cc:	fe 89       	ldd	r31, Y+22	; 0x16
    21ce:	95 01       	movw	r18, r10
    21d0:	84 01       	movw	r16, r8
    21d2:	ac 01       	movw	r20, r24
    21d4:	bd 01       	movw	r22, r26
    21d6:	cf 01       	movw	r24, r30
    21d8:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	af 83       	std	Y+7, r26	; 0x07
    21e6:	b8 87       	std	Y+8, r27	; 0x08
		float weightedYIntegral = calculateIntegral(yProportional, model->YIntegral(), yIntegralAntiWindup, yIntegralGain);
    21e8:	8d 89       	ldd	r24, Y+21	; 0x15
    21ea:	9e 89       	ldd	r25, Y+22	; 0x16
    21ec:	fc 01       	movw	r30, r24
    21ee:	a2 a4       	ldd	r10, Z+42	; 0x2a
    21f0:	b3 a4       	ldd	r11, Z+43	; 0x2b
    21f2:	c4 a4       	ldd	r12, Z+44	; 0x2c
    21f4:	d5 a4       	ldd	r13, Z+45	; 0x2d
    21f6:	8d 89       	ldd	r24, Y+21	; 0x15
    21f8:	9e 89       	ldd	r25, Y+22	; 0x16
    21fa:	fc 01       	movw	r30, r24
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	0e 94 5a 05 	call	0xab4	; 0xab4 <_ZNK10helicopter5model11SystemModel9YIntegralEv>
    2204:	9b 01       	movw	r18, r22
    2206:	ac 01       	movw	r20, r24
    2208:	ed 80       	ldd	r14, Y+5	; 0x05
    220a:	fe 80       	ldd	r15, Y+6	; 0x06
    220c:	0f 81       	ldd	r16, Y+7	; 0x07
    220e:	18 85       	ldd	r17, Y+8	; 0x08
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	ab 81       	ldd	r26, Y+3	; 0x03
    2216:	bc 81       	ldd	r27, Y+4	; 0x04
    2218:	ed 89       	ldd	r30, Y+21	; 0x15
    221a:	fe 89       	ldd	r31, Y+22	; 0x16
    221c:	45 01       	movw	r8, r10
    221e:	56 01       	movw	r10, r12
    2220:	67 01       	movw	r12, r14
    2222:	78 01       	movw	r14, r16
    2224:	89 01       	movw	r16, r18
    2226:	9a 01       	movw	r18, r20
    2228:	ac 01       	movw	r20, r24
    222a:	bd 01       	movw	r22, r26
    222c:	cf 01       	movw	r24, r30
    222e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	89 87       	std	Y+9, r24	; 0x09
    2238:	9a 87       	std	Y+10, r25	; 0x0a
    223a:	ab 87       	std	Y+11, r26	; 0x0b
    223c:	bc 87       	std	Y+12, r27	; 0x0c
		float yDerivativeError = calculateVelocityError(model->YVelocityMetersPerSecond(), model->ReferenceYVelocityMetersPerSecond());
    223e:	8d 89       	ldd	r24, Y+21	; 0x15
    2240:	9e 89       	ldd	r25, Y+22	; 0x16
    2242:	fc 01       	movw	r30, r24
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_ZNK10helicopter5model11SystemModel33ReferenceYVelocityMetersPerSecondEv>
    224c:	6b 01       	movw	r12, r22
    224e:	7c 01       	movw	r14, r24
    2250:	8d 89       	ldd	r24, Y+21	; 0x15
    2252:	9e 89       	ldd	r25, Y+22	; 0x16
    2254:	fc 01       	movw	r30, r24
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	0e 94 cc 04 	call	0x998	; 0x998 <_ZNK10helicopter5model11SystemModel24YVelocityMetersPerSecondEv>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	ed 89       	ldd	r30, Y+21	; 0x15
    2264:	fe 89       	ldd	r31, Y+22	; 0x16
    2266:	97 01       	movw	r18, r14
    2268:	86 01       	movw	r16, r12
    226a:	ac 01       	movw	r20, r24
    226c:	bd 01       	movw	r22, r26
    226e:	cf 01       	movw	r24, r30
    2270:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8d 87       	std	Y+13, r24	; 0x0d
    227a:	9e 87       	std	Y+14, r25	; 0x0e
    227c:	af 87       	std	Y+15, r26	; 0x0f
    227e:	b8 8b       	std	Y+16, r27	; 0x10
		//we use a -1 direction factor because unlike other controls, if we have a positive proportional error, we actually need a 'negative' desired 
		//roll setpoint in order for the helicopter to track back towards the desired position. So if the helicopter is directly 'east' of the desired position,
		//the proportional error will correctly be positive (in a North-east-down coordinate system), but the helicopter will have to roll counter clockwise
		//to return to the desired position. This differs from if the helicopter was directly north of the desired position. The x proportional would be positive
		//(in NED), but it would take a positive pitch angle setpoint to get the helicopter to return to the desired position.
		float yLateralOuterLoopSetpoint = calculateOuterLoopControlValue(yProportional, yDerivativeError, weightedYIntegral, yProportionalGain, yDerivativeGain, -1);
    2280:	8d 89       	ldd	r24, Y+21	; 0x15
    2282:	9e 89       	ldd	r25, Y+22	; 0x16
    2284:	fc 01       	movw	r30, r24
    2286:	86 a5       	ldd	r24, Z+46	; 0x2e
    2288:	97 a5       	ldd	r25, Z+47	; 0x2f
    228a:	a0 a9       	ldd	r26, Z+48	; 0x30
    228c:	b1 a9       	ldd	r27, Z+49	; 0x31
    228e:	2d 89       	ldd	r18, Y+21	; 0x15
    2290:	3e 89       	ldd	r19, Y+22	; 0x16
    2292:	f9 01       	movw	r30, r18
    2294:	82 a8       	ldd	r8, Z+50	; 0x32
    2296:	93 a8       	ldd	r9, Z+51	; 0x33
    2298:	a4 a8       	ldd	r10, Z+52	; 0x34
    229a:	b5 a8       	ldd	r11, Z+53	; 0x35
    229c:	c9 84       	ldd	r12, Y+9	; 0x09
    229e:	da 84       	ldd	r13, Y+10	; 0x0a
    22a0:	eb 84       	ldd	r14, Y+11	; 0x0b
    22a2:	fc 84       	ldd	r15, Y+12	; 0x0c
    22a4:	0d 85       	ldd	r16, Y+13	; 0x0d
    22a6:	1e 85       	ldd	r17, Y+14	; 0x0e
    22a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    22aa:	38 89       	ldd	r19, Y+16	; 0x10
    22ac:	49 81       	ldd	r20, Y+1	; 0x01
    22ae:	5a 81       	ldd	r21, Y+2	; 0x02
    22b0:	6b 81       	ldd	r22, Y+3	; 0x03
    22b2:	7c 81       	ldd	r23, Y+4	; 0x04
    22b4:	ed 89       	ldd	r30, Y+21	; 0x15
    22b6:	fe 89       	ldd	r31, Y+22	; 0x16
    22b8:	77 24       	eor	r7, r7
    22ba:	7a 94       	dec	r7
    22bc:	7f 92       	push	r7
    22be:	77 24       	eor	r7, r7
    22c0:	7a 94       	dec	r7
    22c2:	7f 92       	push	r7
    22c4:	7b 2e       	mov	r7, r27
    22c6:	7f 92       	push	r7
    22c8:	7a 2e       	mov	r7, r26
    22ca:	7f 92       	push	r7
    22cc:	79 2e       	mov	r7, r25
    22ce:	7f 92       	push	r7
    22d0:	8f 93       	push	r24
    22d2:	cf 01       	movw	r24, r30
    22d4:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	89 8b       	std	Y+17, r24	; 0x11
    22ea:	9a 8b       	std	Y+18, r25	; 0x12
    22ec:	ab 8b       	std	Y+19, r26	; 0x13
    22ee:	bc 8b       	std	Y+20, r27	; 0x14

		yLateralOuterLoopSetpoint = adjustForSetpointLimits(yLateralOuterLoopSetpoint, minRollSetpointDegrees, maxRollSetpointDegrees);
    22f0:	8d 89       	ldd	r24, Y+21	; 0x15
    22f2:	9e 89       	ldd	r25, Y+22	; 0x16
    22f4:	82 58       	subi	r24, 0x82	; 130
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	fc 01       	movw	r30, r24
    22fa:	e0 80       	ld	r14, Z
    22fc:	f1 80       	ldd	r15, Z+1	; 0x01
    22fe:	02 81       	ldd	r16, Z+2	; 0x02
    2300:	13 81       	ldd	r17, Z+3	; 0x03
    2302:	8d 89       	ldd	r24, Y+21	; 0x15
    2304:	9e 89       	ldd	r25, Y+22	; 0x16
    2306:	86 58       	subi	r24, 0x86	; 134
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
    230a:	fc 01       	movw	r30, r24
    230c:	20 81       	ld	r18, Z
    230e:	31 81       	ldd	r19, Z+1	; 0x01
    2310:	42 81       	ldd	r20, Z+2	; 0x02
    2312:	53 81       	ldd	r21, Z+3	; 0x03
    2314:	89 89       	ldd	r24, Y+17	; 0x11
    2316:	9a 89       	ldd	r25, Y+18	; 0x12
    2318:	ab 89       	ldd	r26, Y+19	; 0x13
    231a:	bc 89       	ldd	r27, Y+20	; 0x14
    231c:	ed 89       	ldd	r30, Y+21	; 0x15
    231e:	fe 89       	ldd	r31, Y+22	; 0x16
    2320:	67 01       	movw	r12, r14
    2322:	78 01       	movw	r14, r16
    2324:	89 01       	movw	r16, r18
    2326:	9a 01       	movw	r18, r20
    2328:	ac 01       	movw	r20, r24
    232a:	bd 01       	movw	r22, r26
    232c:	cf 01       	movw	r24, r30
    232e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	89 8b       	std	Y+17, r24	; 0x11
    2338:	9a 8b       	std	Y+18, r25	; 0x12
    233a:	ab 8b       	std	Y+19, r26	; 0x13
    233c:	bc 8b       	std	Y+20, r27	; 0x14
	
		model->YLateralOuterLoopSetpoint(yLateralOuterLoopSetpoint);
    233e:	8d 89       	ldd	r24, Y+21	; 0x15
    2340:	9e 89       	ldd	r25, Y+22	; 0x16
    2342:	fc 01       	movw	r30, r24
    2344:	20 81       	ld	r18, Z
    2346:	31 81       	ldd	r19, Z+1	; 0x01
    2348:	89 89       	ldd	r24, Y+17	; 0x11
    234a:	9a 89       	ldd	r25, Y+18	; 0x12
    234c:	ab 89       	ldd	r26, Y+19	; 0x13
    234e:	bc 89       	ldd	r27, Y+20	; 0x14
    2350:	ac 01       	movw	r20, r24
    2352:	bd 01       	movw	r22, r26
    2354:	c9 01       	movw	r24, r18
    2356:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN10helicopter5model11SystemModel25YLateralOuterLoopSetpointEf>
		model->YIntegral(weightedYIntegral);
    235a:	8d 89       	ldd	r24, Y+21	; 0x15
    235c:	9e 89       	ldd	r25, Y+22	; 0x16
    235e:	fc 01       	movw	r30, r24
    2360:	20 81       	ld	r18, Z
    2362:	31 81       	ldd	r19, Z+1	; 0x01
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	ab 85       	ldd	r26, Y+11	; 0x0b
    236a:	bc 85       	ldd	r27, Y+12	; 0x0c
    236c:	ac 01       	movw	r20, r24
    236e:	bd 01       	movw	r22, r26
    2370:	c9 01       	movw	r24, r18
    2372:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN10helicopter5model11SystemModel9YIntegralEf>
		model->YProportional(yProportional);
    2376:	8d 89       	ldd	r24, Y+21	; 0x15
    2378:	9e 89       	ldd	r25, Y+22	; 0x16
    237a:	fc 01       	movw	r30, r24
    237c:	20 81       	ld	r18, Z
    237e:	31 81       	ldd	r19, Z+1	; 0x01
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	ab 81       	ldd	r26, Y+3	; 0x03
    2386:	bc 81       	ldd	r27, Y+4	; 0x04
    2388:	ac 01       	movw	r20, r24
    238a:	bd 01       	movw	r22, r26
    238c:	c9 01       	movw	r24, r18
    238e:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN10helicopter5model11SystemModel13YProportionalEf>
		model->YDerivativeError(yDerivativeError);
    2392:	8d 89       	ldd	r24, Y+21	; 0x15
    2394:	9e 89       	ldd	r25, Y+22	; 0x16
    2396:	fc 01       	movw	r30, r24
    2398:	20 81       	ld	r18, Z
    239a:	31 81       	ldd	r19, Z+1	; 0x01
    239c:	8d 85       	ldd	r24, Y+13	; 0x0d
    239e:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a0:	af 85       	ldd	r26, Y+15	; 0x0f
    23a2:	b8 89       	ldd	r27, Y+16	; 0x10
    23a4:	ac 01       	movw	r20, r24
    23a6:	bd 01       	movw	r22, r26
    23a8:	c9 01       	movw	r24, r18
    23aa:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN10helicopter5model11SystemModel16YDerivativeErrorEf>
	}
}
    23ae:	66 96       	adiw	r28, 0x16	; 22
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	df 90       	pop	r13
    23c8:	cf 90       	pop	r12
    23ca:	bf 90       	pop	r11
    23cc:	af 90       	pop	r10
    23ce:	9f 90       	pop	r9
    23d0:	8f 90       	pop	r8
    23d2:	7f 90       	pop	r7
    23d4:	08 95       	ret

000023d6 <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv>:

void PIDController::cyclicLongitudeInnerLoopUpdate()
{
    23d6:	2f 92       	push	r2
    23d8:	3f 92       	push	r3
    23da:	4f 92       	push	r4
    23dc:	5f 92       	push	r5
    23de:	6f 92       	push	r6
    23e0:	7f 92       	push	r7
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	9a 87       	std	Y+10, r25	; 0x0a
    240c:	89 87       	std	Y+9, r24	; 0x09
	if (model->OperationalState() == SystemModel::AutoPilot)
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	fc 01       	movw	r30, r24
    2414:	80 81       	ld	r24, Z
    2416:	91 81       	ldd	r25, Z+1	; 0x01
    2418:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>
    241c:	98 2f       	mov	r25, r24
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	91 30       	cpi	r25, 0x01	; 1
    2422:	09 f0       	breq	.+2      	; 0x2426 <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv+0x50>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	88 23       	and	r24, r24
    2428:	09 f4       	brne	.+2      	; 0x242c <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv+0x56>
    242a:	8c c0       	rjmp	.+280    	; 0x2544 <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv+0x16e>
	{
		float xLongitudinalInnerLoopControlBeforeServoLimits = calculateInnerLoopControlValue(model->XLongitudeOuterLoopSetpoint(), model->ThetaPitchDegrees(), longitudeInnerLoopGain, model->PitchAngularVelocityRadsPerSecond(), pitchAngularVelocityGain);
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	fc 01       	movw	r30, r24
    2432:	c6 a0       	ldd	r12, Z+38	; 0x26
    2434:	d7 a0       	ldd	r13, Z+39	; 0x27
    2436:	e0 a4       	ldd	r14, Z+40	; 0x28
    2438:	f1 a4       	ldd	r15, Z+41	; 0x29
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	fc 01       	movw	r30, r24
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZNK10helicopter5model11SystemModel33PitchAngularVelocityRadsPerSecondEv>
    2448:	6b 87       	std	Y+11, r22	; 0x0b
    244a:	7c 87       	std	Y+12, r23	; 0x0c
    244c:	8d 87       	std	Y+13, r24	; 0x0d
    244e:	9e 87       	std	Y+14, r25	; 0x0e
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	fc 01       	movw	r30, r24
    2456:	22 a0       	ldd	r2, Z+34	; 0x22
    2458:	33 a0       	ldd	r3, Z+35	; 0x23
    245a:	44 a0       	ldd	r4, Z+36	; 0x24
    245c:	55 a0       	ldd	r5, Z+37	; 0x25
    245e:	89 85       	ldd	r24, Y+9	; 0x09
    2460:	9a 85       	ldd	r25, Y+10	; 0x0a
    2462:	fc 01       	movw	r30, r24
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZNK10helicopter5model11SystemModel17ThetaPitchDegreesEv>
    246c:	3b 01       	movw	r6, r22
    246e:	4c 01       	movw	r8, r24
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	fc 01       	movw	r30, r24
    2476:	80 81       	ld	r24, Z
    2478:	91 81       	ldd	r25, Z+1	; 0x01
    247a:	0e 94 3b 03 	call	0x676	; 0x676 <_ZNK10helicopter5model11SystemModel27XLongitudeOuterLoopSetpointEv>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	2f 2d       	mov	r18, r15
    2484:	2f 93       	push	r18
    2486:	2e 2d       	mov	r18, r14
    2488:	2f 93       	push	r18
    248a:	2d 2d       	mov	r18, r13
    248c:	2f 93       	push	r18
    248e:	2c 2d       	mov	r18, r12
    2490:	2f 93       	push	r18
    2492:	ab 84       	ldd	r10, Y+11	; 0x0b
    2494:	bc 84       	ldd	r11, Y+12	; 0x0c
    2496:	cd 84       	ldd	r12, Y+13	; 0x0d
    2498:	de 84       	ldd	r13, Y+14	; 0x0e
    249a:	82 01       	movw	r16, r4
    249c:	71 01       	movw	r14, r2
    249e:	a4 01       	movw	r20, r8
    24a0:	93 01       	movw	r18, r6
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_Z30calculateInnerLoopControlValuefffff>
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	ab 83       	std	Y+3, r26	; 0x03
    24bc:	bc 83       	std	Y+4, r27	; 0x04
	
		float xLongitudinalInnerLoopControl = adjustControlForServoLimits(xLongitudinalInnerLoopControlBeforeServoLimits, minLongitudeServoControlValue, maxLongitudeServoControlValue);
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	82 5a       	subi	r24, 0xA2	; 162
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	fc 01       	movw	r30, r24
    24c8:	e0 80       	ld	r14, Z
    24ca:	f1 80       	ldd	r15, Z+1	; 0x01
    24cc:	02 81       	ldd	r16, Z+2	; 0x02
    24ce:	13 81       	ldd	r17, Z+3	; 0x03
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	86 5a       	subi	r24, 0xA6	; 166
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	fc 01       	movw	r30, r24
    24da:	20 81       	ld	r18, Z
    24dc:	31 81       	ldd	r19, Z+1	; 0x01
    24de:	42 81       	ldd	r20, Z+2	; 0x02
    24e0:	53 81       	ldd	r21, Z+3	; 0x03
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	ab 81       	ldd	r26, Y+3	; 0x03
    24e8:	bc 81       	ldd	r27, Y+4	; 0x04
    24ea:	e9 85       	ldd	r30, Y+9	; 0x09
    24ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    24ee:	67 01       	movw	r12, r14
    24f0:	78 01       	movw	r14, r16
    24f2:	89 01       	movw	r16, r18
    24f4:	9a 01       	movw	r18, r20
    24f6:	ac 01       	movw	r20, r24
    24f8:	bd 01       	movw	r22, r26
    24fa:	cf 01       	movw	r24, r30
    24fc:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	af 83       	std	Y+7, r26	; 0x07
    250a:	b8 87       	std	Y+8, r27	; 0x08
	
		model->LongitudeControlBeforeServoLimitsAdjustment(xLongitudinalInnerLoopControlBeforeServoLimits);
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	fc 01       	movw	r30, r24
    2512:	20 81       	ld	r18, Z
    2514:	31 81       	ldd	r19, Z+1	; 0x01
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	ab 81       	ldd	r26, Y+3	; 0x03
    251c:	bc 81       	ldd	r27, Y+4	; 0x04
    251e:	ac 01       	movw	r20, r24
    2520:	bd 01       	movw	r22, r26
    2522:	c9 01       	movw	r24, r18
    2524:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN10helicopter5model11SystemModel43LongitudeControlBeforeServoLimitsAdjustmentEf>
	
		model->LongitudeControl(xLongitudinalInnerLoopControl);
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	fc 01       	movw	r30, r24
    252e:	20 81       	ld	r18, Z
    2530:	31 81       	ldd	r19, Z+1	; 0x01
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	af 81       	ldd	r26, Y+7	; 0x07
    2538:	b8 85       	ldd	r27, Y+8	; 0x08
    253a:	ac 01       	movw	r20, r24
    253c:	bd 01       	movw	r22, r26
    253e:	c9 01       	movw	r24, r18
    2540:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN10helicopter5model11SystemModel16LongitudeControlEf>
	}
}
    2544:	2e 96       	adiw	r28, 0x0e	; 14
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	df 90       	pop	r13
    255e:	cf 90       	pop	r12
    2560:	bf 90       	pop	r11
    2562:	af 90       	pop	r10
    2564:	9f 90       	pop	r9
    2566:	8f 90       	pop	r8
    2568:	7f 90       	pop	r7
    256a:	6f 90       	pop	r6
    256c:	5f 90       	pop	r5
    256e:	4f 90       	pop	r4
    2570:	3f 90       	pop	r3
    2572:	2f 90       	pop	r2
    2574:	08 95       	ret

00002576 <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv>:

void PIDController::cyclicLateralInnerLoopUpdate()
{
    2576:	2f 92       	push	r2
    2578:	3f 92       	push	r3
    257a:	4f 92       	push	r4
    257c:	5f 92       	push	r5
    257e:	6f 92       	push	r6
    2580:	7f 92       	push	r7
    2582:	8f 92       	push	r8
    2584:	9f 92       	push	r9
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	2e 97       	sbiw	r28, 0x0e	; 14
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	9a 87       	std	Y+10, r25	; 0x0a
    25ac:	89 87       	std	Y+9, r24	; 0x09
	if (model->OperationalState() == SystemModel::AutoPilot)
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	fc 01       	movw	r30, r24
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>
    25bc:	98 2f       	mov	r25, r24
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	91 30       	cpi	r25, 0x01	; 1
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv+0x50>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	88 23       	and	r24, r24
    25c8:	09 f4       	brne	.+2      	; 0x25cc <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv+0x56>
    25ca:	8d c0       	rjmp	.+282    	; 0x26e6 <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv+0x170>
	{
		float yLateralInnerLoopControlBeforeServoLimits = calculateInnerLoopControlValue(model->YLateralOuterLoopSetpoint(), model->PhiRollDegrees(), lateralInnerLoopGain, model->RollAngularVelocityRadsPerSecond(), rollAngularVelocityGain);
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	ce 96       	adiw	r24, 0x3e	; 62
    25d2:	fc 01       	movw	r30, r24
    25d4:	c0 80       	ld	r12, Z
    25d6:	d1 80       	ldd	r13, Z+1	; 0x01
    25d8:	e2 80       	ldd	r14, Z+2	; 0x02
    25da:	f3 80       	ldd	r15, Z+3	; 0x03
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	fc 01       	movw	r30, r24
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZNK10helicopter5model11SystemModel32RollAngularVelocityRadsPerSecondEv>
    25ea:	6b 87       	std	Y+11, r22	; 0x0b
    25ec:	7c 87       	std	Y+12, r23	; 0x0c
    25ee:	8d 87       	std	Y+13, r24	; 0x0d
    25f0:	9e 87       	std	Y+14, r25	; 0x0e
    25f2:	89 85       	ldd	r24, Y+9	; 0x09
    25f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f6:	fc 01       	movw	r30, r24
    25f8:	22 ac       	ldd	r2, Z+58	; 0x3a
    25fa:	33 ac       	ldd	r3, Z+59	; 0x3b
    25fc:	44 ac       	ldd	r4, Z+60	; 0x3c
    25fe:	55 ac       	ldd	r5, Z+61	; 0x3d
    2600:	89 85       	ldd	r24, Y+9	; 0x09
    2602:	9a 85       	ldd	r25, Y+10	; 0x0a
    2604:	fc 01       	movw	r30, r24
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZNK10helicopter5model11SystemModel14PhiRollDegreesEv>
    260e:	3b 01       	movw	r6, r22
    2610:	4c 01       	movw	r8, r24
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	fc 01       	movw	r30, r24
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZNK10helicopter5model11SystemModel25YLateralOuterLoopSetpointEv>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	2f 2d       	mov	r18, r15
    2626:	2f 93       	push	r18
    2628:	2e 2d       	mov	r18, r14
    262a:	2f 93       	push	r18
    262c:	2d 2d       	mov	r18, r13
    262e:	2f 93       	push	r18
    2630:	2c 2d       	mov	r18, r12
    2632:	2f 93       	push	r18
    2634:	ab 84       	ldd	r10, Y+11	; 0x0b
    2636:	bc 84       	ldd	r11, Y+12	; 0x0c
    2638:	cd 84       	ldd	r12, Y+13	; 0x0d
    263a:	de 84       	ldd	r13, Y+14	; 0x0e
    263c:	82 01       	movw	r16, r4
    263e:	71 01       	movw	r14, r2
    2640:	a4 01       	movw	r20, r8
    2642:	93 01       	movw	r18, r6
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_Z30calculateInnerLoopControlValuefffff>
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	ab 83       	std	Y+3, r26	; 0x03
    265e:	bc 83       	std	Y+4, r27	; 0x04
		
		float yLateralInnerLoopControl = adjustControlForServoLimits(yLateralInnerLoopControlBeforeServoLimits, minLateralServoControlValue, maxLateralServoControlValue);
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	8a 59       	subi	r24, 0x9A	; 154
    2666:	9f 4f       	sbci	r25, 0xFF	; 255
    2668:	fc 01       	movw	r30, r24
    266a:	e0 80       	ld	r14, Z
    266c:	f1 80       	ldd	r15, Z+1	; 0x01
    266e:	02 81       	ldd	r16, Z+2	; 0x02
    2670:	13 81       	ldd	r17, Z+3	; 0x03
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	8e 59       	subi	r24, 0x9E	; 158
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
    267a:	fc 01       	movw	r30, r24
    267c:	20 81       	ld	r18, Z
    267e:	31 81       	ldd	r19, Z+1	; 0x01
    2680:	42 81       	ldd	r20, Z+2	; 0x02
    2682:	53 81       	ldd	r21, Z+3	; 0x03
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	ab 81       	ldd	r26, Y+3	; 0x03
    268a:	bc 81       	ldd	r27, Y+4	; 0x04
    268c:	e9 85       	ldd	r30, Y+9	; 0x09
    268e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2690:	67 01       	movw	r12, r14
    2692:	78 01       	movw	r14, r16
    2694:	89 01       	movw	r16, r18
    2696:	9a 01       	movw	r18, r20
    2698:	ac 01       	movw	r20, r24
    269a:	bd 01       	movw	r22, r26
    269c:	cf 01       	movw	r24, r30
    269e:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	af 83       	std	Y+7, r26	; 0x07
    26ac:	b8 87       	std	Y+8, r27	; 0x08
		
		model->LateralControlBeforeServoLimitsAdjustment(yLateralInnerLoopControlBeforeServoLimits);
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b2:	fc 01       	movw	r30, r24
    26b4:	20 81       	ld	r18, Z
    26b6:	31 81       	ldd	r19, Z+1	; 0x01
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	ab 81       	ldd	r26, Y+3	; 0x03
    26be:	bc 81       	ldd	r27, Y+4	; 0x04
    26c0:	ac 01       	movw	r20, r24
    26c2:	bd 01       	movw	r22, r26
    26c4:	c9 01       	movw	r24, r18
    26c6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN10helicopter5model11SystemModel41LateralControlBeforeServoLimitsAdjustmentEf>
		
		model->LateralControl(yLateralInnerLoopControl);		
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	fc 01       	movw	r30, r24
    26d0:	20 81       	ld	r18, Z
    26d2:	31 81       	ldd	r19, Z+1	; 0x01
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	af 81       	ldd	r26, Y+7	; 0x07
    26da:	b8 85       	ldd	r27, Y+8	; 0x08
    26dc:	ac 01       	movw	r20, r24
    26de:	bd 01       	movw	r22, r26
    26e0:	c9 01       	movw	r24, r18
    26e2:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN10helicopter5model11SystemModel14LateralControlEf>
	}
}
    26e6:	2e 96       	adiw	r28, 0x0e	; 14
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	ff 90       	pop	r15
    26fc:	ef 90       	pop	r14
    26fe:	df 90       	pop	r13
    2700:	cf 90       	pop	r12
    2702:	bf 90       	pop	r11
    2704:	af 90       	pop	r10
    2706:	9f 90       	pop	r9
    2708:	8f 90       	pop	r8
    270a:	7f 90       	pop	r7
    270c:	6f 90       	pop	r6
    270e:	5f 90       	pop	r5
    2710:	4f 90       	pop	r4
    2712:	3f 90       	pop	r3
    2714:	2f 90       	pop	r2
    2716:	08 95       	ret

00002718 <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	1f 92       	push	r1
    271e:	1f 92       	push	r1
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
				{
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	2a e0       	ldi	r18, 0x0A	; 10
    272e:	32 e0       	ldi	r19, 0x02	; 2
    2730:	fc 01       	movw	r30, r24
    2732:	31 83       	std	Z+1, r19	; 0x01
    2734:	20 83       	st	Z, r18
					
				}
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	81 70       	andi	r24, 0x01	; 1
    273c:	99 27       	eor	r25, r25
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	21 f0       	breq	.+8      	; 0x274a <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	1f 92       	push	r1
    275a:	1f 92       	push	r1
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN10helicopter7drivers12SerialDriverD1Ev>
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	08 95       	ret

0000277e <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "CommonHeader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	00 d0       	rcall	.+0      	; 0x2784 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
    2784:	1f 92       	push	r1
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	9c 83       	std	Y+4, r25	; 0x04
    278c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
    278e:	1a 82       	std	Y+2, r1	; 0x02
    2790:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	fc 01       	movw	r30, r24
    2798:	87 81       	ldd	r24, Z+7	; 0x07
    279a:	88 23       	and	r24, r24
    279c:	b9 f1       	breq	.+110    	; 0x280c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	fc 01       	movw	r30, r24
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	a4 81       	ldd	r26, Z+4	; 0x04
    27aa:	b5 81       	ldd	r27, Z+5	; 0x05
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	aa 1f       	adc	r26, r26
    27b2:	bb 1f       	adc	r27, r27
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	aa 1f       	adc	r26, r26
    27ba:	bb 1f       	adc	r27, r27
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	aa 1f       	adc	r26, r26
    27c2:	bb 1f       	adc	r27, r27
    27c4:	9c 01       	movw	r18, r24
    27c6:	ad 01       	movw	r20, r26
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	94 e2       	ldi	r25, 0x24	; 36
    27cc:	a4 ef       	ldi	r26, 0xF4	; 244
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 40 58 	call	0xb080	; 0xb080 <__udivmodsi4>
    27d8:	da 01       	movw	r26, r20
    27da:	c9 01       	movw	r24, r18
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	a1 09       	sbc	r26, r1
    27e0:	b1 09       	sbc	r27, r1
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatunsisf>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <floor>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9a 83       	std	Y+2, r25	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	3a c0       	rjmp	.+116    	; 0x2880 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	fc 01       	movw	r30, r24
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	a4 81       	ldd	r26, Z+4	; 0x04
    2818:	b5 81       	ldd	r27, Z+5	; 0x05
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	aa 1f       	adc	r26, r26
    2820:	bb 1f       	adc	r27, r27
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	aa 1f       	adc	r26, r26
    2828:	bb 1f       	adc	r27, r27
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	aa 1f       	adc	r26, r26
    2830:	bb 1f       	adc	r27, r27
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	aa 1f       	adc	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	9c 01       	movw	r18, r24
    283c:	ad 01       	movw	r20, r26
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	94 e2       	ldi	r25, 0x24	; 36
    2842:	a4 ef       	ldi	r26, 0xF4	; 244
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 40 58 	call	0xb080	; 0xb080 <__udivmodsi4>
    284e:	da 01       	movw	r26, r20
    2850:	c9 01       	movw	r24, r18
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	a1 09       	sbc	r26, r1
    2856:	b1 09       	sbc	r27, r1
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 d0 54 	call	0xa9a0	; 0xa9a0 <__floatunsisf>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 0d 55 	call	0xaa1a	; 0xaa1a <floor>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	fc 01       	movw	r30, r24
    2886:	86 81       	ldd	r24, Z+6	; 0x06
    2888:	88 23       	and	r24, r24
    288a:	41 f5       	brne	.+80     	; 0x28dc <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
    288c:	84 ec       	ldi	r24, 0xC4	; 196
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	29 81       	ldd	r18, Y+1	; 0x01
    2892:	3a 81       	ldd	r19, Y+2	; 0x02
    2894:	fc 01       	movw	r30, r24
    2896:	31 83       	std	Z+1, r19	; 0x01
    2898:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    289a:	82 ec       	ldi	r24, 0xC2	; 194
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	22 ec       	ldi	r18, 0xC2	; 194
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	f9 01       	movw	r30, r18
    28a4:	20 81       	ld	r18, Z
    28a6:	26 60       	ori	r18, 0x06	; 6
    28a8:	fc 01       	movw	r30, r24
    28aa:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	fc 01       	movw	r30, r24
    28b2:	87 81       	ldd	r24, Z+7	; 0x07
    28b4:	88 23       	and	r24, r24
    28b6:	49 f0       	breq	.+18     	; 0x28ca <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
    28b8:	80 ec       	ldi	r24, 0xC0	; 192
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	20 ec       	ldi	r18, 0xC0	; 192
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	f9 01       	movw	r30, r18
    28c2:	20 81       	ld	r18, Z
    28c4:	22 60       	ori	r18, 0x02	; 2
    28c6:	fc 01       	movw	r30, r24
    28c8:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
    28ca:	81 ec       	ldi	r24, 0xC1	; 193
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	21 ec       	ldi	r18, 0xC1	; 193
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	f9 01       	movw	r30, r18
    28d4:	20 81       	ld	r18, Z
    28d6:	28 61       	ori	r18, 0x18	; 24
    28d8:	fc 01       	movw	r30, r24
    28da:	20 83       	st	Z, r18
	}
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	08 95       	ret

000028ea <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE>:

int SerialDriver::transmitByte(byte byteToSend, Timer *timer)
{
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	27 97       	sbiw	r28, 0x07	; 7
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	9c 83       	std	Y+4, r25	; 0x04
    2900:	8b 83       	std	Y+3, r24	; 0x03
    2902:	6d 83       	std	Y+5, r22	; 0x05
    2904:	5f 83       	std	Y+7, r21	; 0x07
    2906:	4e 83       	std	Y+6, r20	; 0x06
	int status = 0;
    2908:	1a 82       	std	Y+2, r1	; 0x02
    290a:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	fc 01       	movw	r30, r24
    2912:	86 81       	ldd	r24, Z+6	; 0x06
    2914:	88 23       	and	r24, r24
    2916:	19 f5       	brne	.+70     	; 0x295e <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE+0x74>
	{

		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    2918:	0b c0       	rjmp	.+22     	; 0x2930 <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE+0x46>
		{
			//Check for timeout
			if (timer->hasTimedout())
    291a:	8e 81       	ldd	r24, Y+6	; 0x06
    291c:	9f 81       	ldd	r25, Y+7	; 0x07
    291e:	0e 94 92 53 	call	0xa724	; 0xa724 <_ZN10helicopter4util5Timer11hasTimedoutEv>
    2922:	88 23       	and	r24, r24
    2924:	29 f0       	breq	.+10     	; 0x2930 <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE+0x46>
			{
				status = -1;
    2926:	8f ef       	ldi	r24, 0xFF	; 255
    2928:	9f ef       	ldi	r25, 0xFF	; 255
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
				break;
    292e:	0e c0       	rjmp	.+28     	; 0x294c <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE+0x62>
	
	if (uartPort == Zero)
	{

		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    2930:	80 ec       	ldi	r24, 0xC0	; 192
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	fc 01       	movw	r30, r24
    2936:	80 81       	ld	r24, Z
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	80 72       	andi	r24, 0x20	; 32
    293e:	99 27       	eor	r25, r25
    2940:	21 e0       	ldi	r18, 0x01	; 1
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	09 f0       	breq	.+2      	; 0x2948 <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE+0x5e>
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	22 23       	and	r18, r18
    294a:	39 f7       	brne	.-50     	; 0x291a <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE+0x30>
				status = -1;
				break;
			}
		}
				
		if (status == 0)
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	29 f4       	brne	.+10     	; 0x295e <_ZN10helicopter7drivers12SerialDriver12transmitByteEhPNS_4util5TimerE+0x74>
		{
			/* Put data into buffer, sends the data */
			UDR0 = byteToSend;			
    2954:	86 ec       	ldi	r24, 0xC6	; 198
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	2d 81       	ldd	r18, Y+5	; 0x05
    295a:	fc 01       	movw	r30, r24
    295c:	20 83       	st	Z, r18
		}

	}
	
	return status;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2962:	27 96       	adiw	r28, 0x07	; 7
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	08 95       	ret

00002974 <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE>:

int SerialDriver::receiveByte(byte &receivedByte, Timer *timer)
{
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	28 97       	sbiw	r28, 0x08	; 8
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	9c 83       	std	Y+4, r25	; 0x04
    298a:	8b 83       	std	Y+3, r24	; 0x03
    298c:	7e 83       	std	Y+6, r23	; 0x06
    298e:	6d 83       	std	Y+5, r22	; 0x05
    2990:	58 87       	std	Y+8, r21	; 0x08
    2992:	4f 83       	std	Y+7, r20	; 0x07
	int status = 0;
    2994:	1a 82       	std	Y+2, r1	; 0x02
    2996:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	fc 01       	movw	r30, r24
    299e:	86 81       	ldd	r24, Z+6	; 0x06
    29a0:	88 23       	and	r24, r24
    29a2:	a1 f5       	brne	.+104    	; 0x2a0c <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x98>
	{
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)))
    29a4:	0b c0       	rjmp	.+22     	; 0x29bc <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x48>
		{
			if (timer->hasTimedout())
    29a6:	8f 81       	ldd	r24, Y+7	; 0x07
    29a8:	98 85       	ldd	r25, Y+8	; 0x08
    29aa:	0e 94 92 53 	call	0xa724	; 0xa724 <_ZN10helicopter4util5Timer11hasTimedoutEv>
    29ae:	88 23       	and	r24, r24
    29b0:	29 f0       	breq	.+10     	; 0x29bc <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x48>
			{
				status = -1;
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	9f ef       	ldi	r25, 0xFF	; 255
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
				break;
    29ba:	0a c0       	rjmp	.+20     	; 0x29d0 <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x5c>
	
	if (uartPort == Zero)
	{
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)))
    29bc:	80 ec       	ldi	r24, 0xC0	; 192
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	fc 01       	movw	r30, r24
    29c2:	80 81       	ld	r24, Z
    29c4:	80 95       	com	r24
    29c6:	88 1f       	adc	r24, r24
    29c8:	88 27       	eor	r24, r24
    29ca:	88 1f       	adc	r24, r24
    29cc:	88 23       	and	r24, r24
    29ce:	59 f7       	brne	.-42     	; 0x29a6 <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x32>
				status = -1;
				break;
			}
		}
		
		if (status == 0)
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	d1 f4       	brne	.+52     	; 0x2a0c <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x98>
		{
			//determine if there has been a data overrun.
			if ((UCSR0A & (1 << DOR0)) != 0)
    29d8:	80 ec       	ldi	r24, 0xC0	; 192
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	fc 01       	movw	r30, r24
    29de:	80 81       	ld	r24, Z
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	88 70       	andi	r24, 0x08	; 8
    29e6:	99 27       	eor	r25, r25
    29e8:	21 e0       	ldi	r18, 0x01	; 1
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x7c>
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	22 23       	and	r18, r18
    29f2:	21 f0       	breq	.+8      	; 0x29fc <_ZN10helicopter7drivers12SerialDriver11receiveByteERhPNS_4util5TimerE+0x88>
			{
				status = -2;
    29f4:	8e ef       	ldi	r24, 0xFE	; 254
    29f6:	9f ef       	ldi	r25, 0xFF	; 255
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
			}
		
			/* Read the data from the serial port buffer, even if the buffer was overrun */
			receivedByte = UDR0;
    29fc:	86 ec       	ldi	r24, 0xC6	; 198
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	fc 01       	movw	r30, r24
    2a02:	20 81       	ld	r18, Z
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	fc 01       	movw	r30, r24
    2a0a:	20 83       	st	Z, r18
		}
	}

	return status;
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	28 96       	adiw	r28, 0x08	; 8
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	08 95       	ret

00002a22 <_ZN10helicopter7drivers9SPIDriver4initEv>:
 * MOSI | PB2 | DDB2 | Master Out Slave In - If this device is the master, used for this device to send data to other devices
 * SCK  | PB1 | DDB1 | SPI Clock - 
 * SS   | PB0 | DDB0 | Slave Select
 */
void SPIDriver::init()
{
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	1f 92       	push	r1
    2a28:	1f 92       	push	r1
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
	/**
	 * Configure the MOSI (DDB2) pin, SCK (DDB1), and SS (DDB0) pins
	 * as output
	 */
	DDRB = (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
    2a32:	84 e2       	ldi	r24, 0x24	; 36
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	27 e0       	ldi	r18, 0x07	; 7
    2a38:	fc 01       	movw	r30, r24
    2a3a:	20 83       	st	Z, r18
	
	
	//wHAT IS THE BELOW CODE FOR? WHY SET SS HIGH, THEN WRITE 0, AND WHAT IS PB1? i think it should be pb2, pb1
	//Set the Slave Select line high, 'freeing' up the SPI line. (This would otherwise default to 0, making this device
	//hold onto the SPI line).
	PORTB |= (1<<DDB0); //Set SS as high /// THIS WAS HERE BUT I DON'T THINK I NEED IT
    2a3c:	85 e2       	ldi	r24, 0x25	; 37
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	25 e2       	ldi	r18, 0x25	; 37
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	f9 01       	movw	r30, r18
    2a46:	20 81       	ld	r18, Z
    2a48:	21 60       	ori	r18, 0x01	; 1
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	20 83       	st	Z, r18
	//Put the port in a definitive state of 'low' so they can't be 'floating'. MOSI, SPI Clock
	PORTB &= ~((1<<DDB2) | (1<<PB1)); ///THIS WAS THERE BUT I DON'T THINK WE NEED IT.
    2a4e:	85 e2       	ldi	r24, 0x25	; 37
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	25 e2       	ldi	r18, 0x25	; 37
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	f9 01       	movw	r30, r18
    2a58:	20 81       	ld	r18, Z
    2a5a:	29 7f       	andi	r18, 0xF9	; 249
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	20 83       	st	Z, r18
	
	//The barometer can hold the SPI bus, so we stop it so that we
	//can communicate with the target device.
	//(Only really needs to be executed once - not per init()).
	DDRG |= (1<<DDG1);
    2a60:	83 e3       	ldi	r24, 0x33	; 51
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	23 e3       	ldi	r18, 0x33	; 51
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	f9 01       	movw	r30, r18
    2a6a:	20 81       	ld	r18, Z
    2a6c:	22 60       	ori	r18, 0x02	; 2
    2a6e:	fc 01       	movw	r30, r24
    2a70:	20 83       	st	Z, r18
	PORTG |= (1<<DDG1);
    2a72:	84 e3       	ldi	r24, 0x34	; 52
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	24 e3       	ldi	r18, 0x34	; 52
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	f9 01       	movw	r30, r18
    2a7c:	20 81       	ld	r18, Z
    2a7e:	22 60       	ori	r18, 0x02	; 2
    2a80:	fc 01       	movw	r30, r24
    2a82:	20 83       	st	Z, r18
	 * SPI Control Register (SPCR)
	 * Enable SPI (1<<SPE)
	 * Set this device as the master device on the SPI line (1<<MSTR)
	 * Set clock frequency to Fosc / 16 (1<<SPR0) (clock speed divided by 16)
	 */
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    2a84:	8c e4       	ldi	r24, 0x4C	; 76
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	2c e4       	ldi	r18, 0x4C	; 76
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	20 81       	ld	r18, Z
    2a90:	21 65       	ori	r18, 0x51	; 81
    2a92:	fc 01       	movw	r30, r24
    2a94:	20 83       	st	Z, r18
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	08 95       	ret

00002aa0 <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>:

void SPIDriver::beginTransaction()
{
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	1f 92       	push	r1
    2aa6:	1f 92       	push	r1
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
	/**
	 * Set the Slave Select to 0 indicating that the master will be sending
	 * data across the SPI line.
	 */
	PORTB &= ~(1<<PB0);
    2ab0:	85 e2       	ldi	r24, 0x25	; 37
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	25 e2       	ldi	r18, 0x25	; 37
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	f9 01       	movw	r30, r18
    2aba:	20 81       	ld	r18, Z
    2abc:	2e 7f       	andi	r18, 0xFE	; 254
    2abe:	fc 01       	movw	r30, r24
    2ac0:	20 83       	st	Z, r18
}
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	08 95       	ret

00002acc <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>:


void SPIDriver::endTransaction()
{
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	1f 92       	push	r1
    2ad2:	1f 92       	push	r1
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	89 83       	std	Y+1, r24	; 0x01
	/**
	 * Set the Slave Select line to 1 indicating that the master
	 * is finished communicating (release the SPI line)
	 */
	PORTB |= (1<<PB0);	
    2adc:	85 e2       	ldi	r24, 0x25	; 37
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	25 e2       	ldi	r18, 0x25	; 37
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	f9 01       	movw	r30, r18
    2ae6:	20 81       	ld	r18, Z
    2ae8:	21 60       	ori	r18, 0x01	; 1
    2aea:	fc 01       	movw	r30, r24
    2aec:	20 83       	st	Z, r18
}
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <_ZN10helicopter7drivers9SPIDriver5writeEh>:

void SPIDriver::write( byte data )
{
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <_ZN10helicopter7drivers9SPIDriver5writeEh+0x6>
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9a 83       	std	Y+2, r25	; 0x02
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	6b 83       	std	Y+3, r22	; 0x03
	/**
	 * Write the byte to SPI Data Register
	 */
	SPDR = data;
    2b08:	8e e4       	ldi	r24, 0x4E	; 78
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b0e:	fc 01       	movw	r30, r24
    2b10:	20 83       	st	Z, r18
	 * Wait until the SPI Status Register's
	 * SPI Interrupt flag to be set which is set
	 * when data transfer is complete, and is cleared
	 * when the SPSR register is read.
	 */
	while(!(SPSR & (1<<SPIF)));
    2b12:	00 00       	nop
    2b14:	8d e4       	ldi	r24, 0x4D	; 77
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	fc 01       	movw	r30, r24
    2b1a:	80 81       	ld	r24, Z
    2b1c:	80 95       	com	r24
    2b1e:	88 1f       	adc	r24, r24
    2b20:	88 27       	eor	r24, r24
    2b22:	88 1f       	adc	r24, r24
    2b24:	88 23       	and	r24, r24
    2b26:	b1 f7       	brne	.-20     	; 0x2b14 <_ZN10helicopter7drivers9SPIDriver5writeEh+0x1c>
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	08 95       	ret

00002b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>:

int SPIDriver::readInt16()
{
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <_ZN10helicopter7drivers9SPIDriver9readInt16Ev+0x6>
    2b3a:	1f 92       	push	r1
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	9c 83       	std	Y+4, r25	; 0x04
    2b42:	8b 83       	std	Y+3, r24	; 0x03
	byte highByte = readByte();
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <_ZN10helicopter7drivers9SPIDriver8readByteEv>
    2b4c:	89 83       	std	Y+1, r24	; 0x01
	byte lowByte = readByte();
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <_ZN10helicopter7drivers9SPIDriver8readByteEv>
    2b56:	8a 83       	std	Y+2, r24	; 0x02

	return ((int) highByte<<8) | lowByte;
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	88 2f       	mov	r24, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	38 2f       	mov	r19, r24
    2b60:	22 27       	eor	r18, r18
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	88 2f       	mov	r24, r24
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	82 2b       	or	r24, r18
    2b6a:	93 2b       	or	r25, r19
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <_ZN10helicopter7drivers9SPIDriver8readByteEv>:

byte SPIDriver::readByte()
{
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	1f 92       	push	r1
    2b80:	1f 92       	push	r1
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
	 * we are communicating with, uses the same clock cycles that are used
	 * to push each bit in the message we put into the register, to send
	 * this device data. 1 clock cycle used to push data to the device
	 * is also used to push data to THIS device.
	 */
	SPDR = 0;
    2b8a:	8e e4       	ldi	r24, 0x4E	; 78
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	fc 01       	movw	r30, r24
    2b90:	10 82       	st	Z, r1
	 * Wait until the SPI Status Register's
	 * SPI Interrupt flag to be set which is set
	 * when data transfer is complete, and is cleared
	 * when the SPSR register is read.
	 */
	while(!(SPSR & (1<<SPIF)));
    2b92:	00 00       	nop
    2b94:	8d e4       	ldi	r24, 0x4D	; 77
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	fc 01       	movw	r30, r24
    2b9a:	80 81       	ld	r24, Z
    2b9c:	80 95       	com	r24
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	88 27       	eor	r24, r24
    2ba2:	88 1f       	adc	r24, r24
    2ba4:	88 23       	and	r24, r24
    2ba6:	b1 f7       	brne	.-20     	; 0x2b94 <_ZN10helicopter7drivers9SPIDriver8readByteEv+0x1a>
	
	/**
	 * Return the value of SPDR because now the data register
	 * contains the data that was sent to us by the device.
	 */
	return SPDR;
    2ba8:	8e e4       	ldi	r24, 0x4E	; 78
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	fc 01       	movw	r30, r24
    2bae:	80 81       	ld	r24, Z
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	08 95       	ret

00002bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>:


void SPIDriver::write( byte commandAddress, byte commandValue )
{
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <_ZN10helicopter7drivers9SPIDriver5writeEhh+0x6>
    2bc0:	1f 92       	push	r1
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	6b 83       	std	Y+3, r22	; 0x03
    2bcc:	4c 83       	std	Y+4, r20	; 0x04
	write(commandAddress);
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	6b 81       	ldd	r22, Y+3	; 0x03
    2bd4:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <_ZN10helicopter7drivers9SPIDriver5writeEh>
	write(commandValue);
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	6c 81       	ldd	r22, Y+4	; 0x04
    2bde:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <_ZN10helicopter7drivers9SPIDriver5writeEh>
}
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	1f 92       	push	r1
    2bf6:	1f 92       	push	r1
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	20 e9       	ldi	r18, 0x90	; 144
    2c06:	32 e0       	ldi	r19, 0x02	; 2
    2c08:	fc 01       	movw	r30, r24
    2c0a:	31 83       	std	Z+1, r19	; 0x01
    2c0c:	20 83       	st	Z, r18
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	81 70       	andi	r24, 0x01	; 1
    2c14:	99 27       	eor	r25, r25
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	21 f0       	breq	.+8      	; 0x2c22 <_ZN10helicopter5tasks4TaskD1Ev+0x32>
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	08 95       	ret

00002c2c <_ZN10helicopter5tasks4TaskD0Ev>:
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	1f 92       	push	r1
    2c32:	1f 92       	push	r1
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	08 95       	ret

00002c56 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>:
					
				int ledToBlink;
				
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	28 97       	sbiw	r28, 0x08	; 8
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	9a 83       	std	Y+2, r25	; 0x02
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	7c 83       	std	Y+4, r23	; 0x04
    2c70:	6b 83       	std	Y+3, r22	; 0x03
    2c72:	5e 83       	std	Y+6, r21	; 0x06
    2c74:	4d 83       	std	Y+5, r20	; 0x05
    2c76:	38 87       	std	Y+8, r19	; 0x08
    2c78:	2f 83       	std	Y+7, r18	; 0x07
				Task(delay, period),
				isOff(false),
				ledToBlink(ledToBlink)
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	4d 81       	ldd	r20, Y+5	; 0x05
    2c80:	5e 81       	ldd	r21, Y+6	; 0x06
    2c82:	2b 81       	ldd	r18, Y+3	; 0x03
    2c84:	3c 81       	ldd	r19, Y+4	; 0x04
    2c86:	b9 01       	movw	r22, r18
    2c88:	0e 94 96 49 	call	0x932c	; 0x932c <_ZN10helicopter5tasks4TaskC1Eii>
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	28 e1       	ldi	r18, 0x18	; 24
    2c92:	32 e0       	ldi	r19, 0x02	; 2
    2c94:	fc 01       	movw	r30, r24
    2c96:	31 83       	std	Z+1, r19	; 0x01
    2c98:	20 83       	st	Z, r18
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	17 82       	std	Z+7, r1	; 0x07
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ca8:	38 85       	ldd	r19, Y+8	; 0x08
    2caa:	fc 01       	movw	r30, r24
    2cac:	31 87       	std	Z+9, r19	; 0x09
    2cae:	20 87       	std	Z+8, r18	; 0x08
			{
					
			}
    2cb0:	28 96       	adiw	r28, 0x08	; 8
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	08 95       	ret

00002cc2 <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
	
			void init()
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	1f 92       	push	r1
    2cc8:	1f 92       	push	r1
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
			{
				DDRA |= (1<<ledToBlink);
    2cd2:	81 e2       	ldi	r24, 0x21	; 33
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	21 e2       	ldi	r18, 0x21	; 33
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	f9 01       	movw	r30, r18
    2cdc:	20 81       	ld	r18, Z
    2cde:	62 2f       	mov	r22, r18
    2ce0:	29 81       	ldd	r18, Y+1	; 0x01
    2ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce4:	f9 01       	movw	r30, r18
    2ce6:	40 85       	ldd	r20, Z+8	; 0x08
    2ce8:	51 85       	ldd	r21, Z+9	; 0x09
    2cea:	21 e0       	ldi	r18, 0x01	; 1
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	04 2e       	mov	r0, r20
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x34>
    2cf2:	22 0f       	add	r18, r18
    2cf4:	33 1f       	adc	r19, r19
    2cf6:	0a 94       	dec	r0
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x30>
    2cfa:	26 2b       	or	r18, r22
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	20 83       	st	Z, r18
			}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	1f 92       	push	r1
    2d10:	1f 92       	push	r1
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
				if (isOff)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	fc 01       	movw	r30, r24
    2d20:	87 81       	ldd	r24, Z+7	; 0x07
    2d22:	88 23       	and	r24, r24
    2d24:	e9 f0       	breq	.+58     	; 0x2d60 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x56>
				{
					//Turn On the LED
					PORTA &= ~(1<<ledToBlink);
    2d26:	82 e2       	ldi	r24, 0x22	; 34
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	22 e2       	ldi	r18, 0x22	; 34
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	f9 01       	movw	r30, r18
    2d30:	20 81       	ld	r18, Z
    2d32:	62 2f       	mov	r22, r18
    2d34:	29 81       	ldd	r18, Y+1	; 0x01
    2d36:	3a 81       	ldd	r19, Y+2	; 0x02
    2d38:	f9 01       	movw	r30, r18
    2d3a:	40 85       	ldd	r20, Z+8	; 0x08
    2d3c:	51 85       	ldd	r21, Z+9	; 0x09
    2d3e:	21 e0       	ldi	r18, 0x01	; 1
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	04 2e       	mov	r0, r20
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x40>
    2d46:	22 0f       	add	r18, r18
    2d48:	33 1f       	adc	r19, r19
    2d4a:	0a 94       	dec	r0
    2d4c:	e2 f7       	brpl	.-8      	; 0x2d46 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x3c>
    2d4e:	20 95       	com	r18
    2d50:	26 23       	and	r18, r22
    2d52:	fc 01       	movw	r30, r24
    2d54:	20 83       	st	Z, r18
					isOff = false;
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	17 82       	std	Z+7, r1	; 0x07
    2d5e:	1c c0       	rjmp	.+56     	; 0x2d98 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x8e>
				}else
				{
					//Turn Off the LED
					PORTA |= (1<<ledToBlink);
    2d60:	82 e2       	ldi	r24, 0x22	; 34
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	22 e2       	ldi	r18, 0x22	; 34
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	f9 01       	movw	r30, r18
    2d6a:	20 81       	ld	r18, Z
    2d6c:	62 2f       	mov	r22, r18
    2d6e:	29 81       	ldd	r18, Y+1	; 0x01
    2d70:	3a 81       	ldd	r19, Y+2	; 0x02
    2d72:	f9 01       	movw	r30, r18
    2d74:	40 85       	ldd	r20, Z+8	; 0x08
    2d76:	51 85       	ldd	r21, Z+9	; 0x09
    2d78:	21 e0       	ldi	r18, 0x01	; 1
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	04 2e       	mov	r0, r20
    2d7e:	02 c0       	rjmp	.+4      	; 0x2d84 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x7a>
    2d80:	22 0f       	add	r18, r18
    2d82:	33 1f       	adc	r19, r19
    2d84:	0a 94       	dec	r0
    2d86:	e2 f7       	brpl	.-8      	; 0x2d80 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x76>
    2d88:	26 2b       	or	r18, r22
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	20 83       	st	Z, r18
					isOff = true;
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	21 e0       	ldi	r18, 0x01	; 1
    2d94:	fc 01       	movw	r30, r24
    2d96:	27 83       	std	Z+7, r18	; 0x07
				}
			}
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	08 95       	ret

00002da2 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEv>:
				 * Detects if the processing was completed before the next scheduler triggered.
				 * @return True if the scheduler timer triggered again before the tasks were fully processes,
				 * False if all the tasks were finished processing (i.e. the dispatch method finished) before
				 * the timer triggered again.
				 */
				bool hasBlownFrame()
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	1f 92       	push	r1
    2da8:	1f 92       	push	r1
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
				{
					return blowFrameDetected;
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	fc 01       	movw	r30, r24
    2db8:	82 8d       	ldd	r24, Z+26	; 0x1a
				}
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	08 95       	ret

00002dc4 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>:
				 * @timeoutMilliseconds the milliseconds that should go by before the
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
    2dc4:	ef 92       	push	r14
    2dc6:	ff 92       	push	r15
    2dc8:	0f 93       	push	r16
    2dca:	1f 93       	push	r17
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	2c 97       	sbiw	r28, 0x0c	; 12
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	4b 83       	std	Y+3, r20	; 0x03
    2de6:	5c 83       	std	Y+4, r21	; 0x04
    2de8:	6d 83       	std	Y+5, r22	; 0x05
    2dea:	7e 83       	std	Y+6, r23	; 0x06
    2dec:	38 87       	std	Y+8, r19	; 0x08
    2dee:	2f 83       	std	Y+7, r18	; 0x07
    2df0:	e9 86       	std	Y+9, r14	; 0x09
    2df2:	fa 86       	std	Y+10, r15	; 0x0a
    2df4:	0b 87       	std	Y+11, r16	; 0x0b
    2df6:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
    2df8:	29 81       	ldd	r18, Y+1	; 0x01
    2dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	ad 81       	ldd	r26, Y+5	; 0x05
    2e02:	be 81       	ldd	r27, Y+6	; 0x06
    2e04:	f9 01       	movw	r30, r18
    2e06:	80 83       	st	Z, r24
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	a2 83       	std	Z+2, r26	; 0x02
    2e0c:	b3 83       	std	Z+3, r27	; 0x03
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	2f 81       	ldd	r18, Y+7	; 0x07
    2e14:	38 85       	ldd	r19, Y+8	; 0x08
    2e16:	fc 01       	movw	r30, r24
    2e18:	35 83       	std	Z+5, r19	; 0x05
    2e1a:	24 83       	std	Z+4, r18	; 0x04
    2e1c:	29 85       	ldd	r18, Y+9	; 0x09
    2e1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	fc 01       	movw	r30, r24
    2e26:	37 83       	std	Z+7, r19	; 0x07
    2e28:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
    2e2a:	2c 96       	adiw	r28, 0x0c	; 12
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	ff 90       	pop	r15
    2e40:	ef 90       	pop	r14
    2e42:	08 95       	ret

00002e44 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEb>:
				 * @param useDoubleSpeedMode A flag indicating if double speed mode should
				 * be used when calculating the baud rate configurations. This is useful for
				 * using the radio interface because it seems to have issues if double speed
				 * mode isn't set to true.
				 */		
				SerialDriver(
    2e44:	0f 93       	push	r16
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	28 97       	sbiw	r28, 0x08	; 8
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	4b 83       	std	Y+3, r20	; 0x03
    2e60:	5c 83       	std	Y+4, r21	; 0x04
    2e62:	6d 83       	std	Y+5, r22	; 0x05
    2e64:	7e 83       	std	Y+6, r23	; 0x06
    2e66:	2f 83       	std	Y+7, r18	; 0x07
    2e68:	08 87       	std	Y+8, r16	; 0x08
					unsigned long baudRate, 
					UartPort uartPort,
					bool useDoubleSpeedMode = true) :
				baudRate(baudRate),
				uartPort(uartPort),
				useDoubleSpeedMode(useDoubleSpeedMode)
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	2a e0       	ldi	r18, 0x0A	; 10
    2e70:	32 e0       	ldi	r19, 0x02	; 2
    2e72:	fc 01       	movw	r30, r24
    2e74:	31 83       	std	Z+1, r19	; 0x01
    2e76:	20 83       	st	Z, r18
    2e78:	29 81       	ldd	r18, Y+1	; 0x01
    2e7a:	3a 81       	ldd	r19, Y+2	; 0x02
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	ad 81       	ldd	r26, Y+5	; 0x05
    2e82:	be 81       	ldd	r27, Y+6	; 0x06
    2e84:	f9 01       	movw	r30, r18
    2e86:	82 83       	std	Z+2, r24	; 0x02
    2e88:	93 83       	std	Z+3, r25	; 0x03
    2e8a:	a4 83       	std	Z+4, r26	; 0x04
    2e8c:	b5 83       	std	Z+5, r27	; 0x05
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	2f 81       	ldd	r18, Y+7	; 0x07
    2e94:	fc 01       	movw	r30, r24
    2e96:	26 83       	std	Z+6, r18	; 0x06
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	28 85       	ldd	r18, Y+8	; 0x08
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	27 83       	std	Z+7, r18	; 0x07
				{
					
				}
    2ea2:	28 96       	adiw	r28, 0x08	; 8
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	0f 91       	pop	r16
    2eb4:	08 95       	ret

00002eb6 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverEPNS_4util5TimerEb>:
				 * data or receiving data.
				 * @param enableTimeout A flag indicating if the timer should be used to determine if the system should
				 * timeout when sending and receiving data. If false, the system will wait indefiniately for data.
				 * if true, the system will only wait a short period of time (specified by the timer) before continuing on.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver, Timer *timer, bool enableTimeout = true):
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	27 97       	sbiw	r28, 0x07	; 7
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	9a 83       	std	Y+2, r25	; 0x02
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	7c 83       	std	Y+4, r23	; 0x04
    2ed0:	6b 83       	std	Y+3, r22	; 0x03
    2ed2:	5e 83       	std	Y+6, r21	; 0x06
    2ed4:	4d 83       	std	Y+5, r20	; 0x05
    2ed6:	2f 83       	std	Y+7, r18	; 0x07
					serialDriver(serialDriver),
					timer(timer),
					enableTimeout(enableTimeout)
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ede:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	31 83       	std	Z+1, r19	; 0x01
    2ee4:	20 83       	st	Z, r18
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eea:	2d 81       	ldd	r18, Y+5	; 0x05
    2eec:	3e 81       	ldd	r19, Y+6	; 0x06
    2eee:	fc 01       	movw	r30, r24
    2ef0:	33 83       	std	Z+3, r19	; 0x03
    2ef2:	22 83       	std	Z+2, r18	; 0x02
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	2f 81       	ldd	r18, Y+7	; 0x07
    2efa:	fc 01       	movw	r30, r24
    2efc:	24 83       	std	Z+4, r18	; 0x04
					{}
    2efe:	27 96       	adiw	r28, 0x07	; 7
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <_ZN10helicopter5model11SystemModelC1Ev>:
			
			public:
			
			float EcefToLocalNEDRotationMatrix[3][3];
			
			SystemModel():
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	1f 92       	push	r1
    2f16:	1f 92       	push	r1
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
				numOfFramesBlown(0),
				serialCommunicationBufferOverruns(0),
				
				initialXPositionEcef(0),
				initialYPositionEcef(0),
				initialZPositionEcef(0)
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	fc 01       	movw	r30, r24
    2f26:	10 82       	st	Z, r1
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	11 82       	std	Z+1, r1	; 0x01
    2f30:	12 82       	std	Z+2, r1	; 0x02
    2f32:	13 82       	std	Z+3, r1	; 0x03
    2f34:	14 82       	std	Z+4, r1	; 0x04
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	15 82       	std	Z+5, r1	; 0x05
    2f3e:	16 82       	std	Z+6, r1	; 0x06
    2f40:	17 82       	std	Z+7, r1	; 0x07
    2f42:	10 86       	std	Z+8, r1	; 0x08
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	9a 81       	ldd	r25, Y+2	; 0x02
    2f48:	fc 01       	movw	r30, r24
    2f4a:	11 86       	std	Z+9, r1	; 0x09
    2f4c:	12 86       	std	Z+10, r1	; 0x0a
    2f4e:	13 86       	std	Z+11, r1	; 0x0b
    2f50:	14 86       	std	Z+12, r1	; 0x0c
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	fc 01       	movw	r30, r24
    2f58:	15 86       	std	Z+13, r1	; 0x0d
    2f5a:	16 86       	std	Z+14, r1	; 0x0e
    2f5c:	17 86       	std	Z+15, r1	; 0x0f
    2f5e:	10 8a       	std	Z+16, r1	; 0x10
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	fc 01       	movw	r30, r24
    2f66:	11 8a       	std	Z+17, r1	; 0x11
    2f68:	12 8a       	std	Z+18, r1	; 0x12
    2f6a:	13 8a       	std	Z+19, r1	; 0x13
    2f6c:	14 8a       	std	Z+20, r1	; 0x14
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	fc 01       	movw	r30, r24
    2f74:	15 8a       	std	Z+21, r1	; 0x15
    2f76:	16 8a       	std	Z+22, r1	; 0x16
    2f78:	17 8a       	std	Z+23, r1	; 0x17
    2f7a:	10 8e       	std	Z+24, r1	; 0x18
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f80:	fc 01       	movw	r30, r24
    2f82:	11 8e       	std	Z+25, r1	; 0x19
    2f84:	12 8e       	std	Z+26, r1	; 0x1a
    2f86:	13 8e       	std	Z+27, r1	; 0x1b
    2f88:	14 8e       	std	Z+28, r1	; 0x1c
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	fc 01       	movw	r30, r24
    2f90:	15 8e       	std	Z+29, r1	; 0x1d
    2f92:	16 8e       	std	Z+30, r1	; 0x1e
    2f94:	17 8e       	std	Z+31, r1	; 0x1f
    2f96:	10 a2       	std	Z+32, r1	; 0x20
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	11 a2       	std	Z+33, r1	; 0x21
    2fa0:	12 a2       	std	Z+34, r1	; 0x22
    2fa2:	13 a2       	std	Z+35, r1	; 0x23
    2fa4:	14 a2       	std	Z+36, r1	; 0x24
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2faa:	fc 01       	movw	r30, r24
    2fac:	15 a2       	std	Z+37, r1	; 0x25
    2fae:	16 a2       	std	Z+38, r1	; 0x26
    2fb0:	17 a2       	std	Z+39, r1	; 0x27
    2fb2:	10 a6       	std	Z+40, r1	; 0x28
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	fc 01       	movw	r30, r24
    2fba:	11 a6       	std	Z+41, r1	; 0x29
    2fbc:	12 a6       	std	Z+42, r1	; 0x2a
    2fbe:	13 a6       	std	Z+43, r1	; 0x2b
    2fc0:	14 a6       	std	Z+44, r1	; 0x2c
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	15 a6       	std	Z+45, r1	; 0x2d
    2fca:	16 a6       	std	Z+46, r1	; 0x2e
    2fcc:	17 a6       	std	Z+47, r1	; 0x2f
    2fce:	10 aa       	std	Z+48, r1	; 0x30
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	11 aa       	std	Z+49, r1	; 0x31
    2fd8:	12 aa       	std	Z+50, r1	; 0x32
    2fda:	13 aa       	std	Z+51, r1	; 0x33
    2fdc:	14 aa       	std	Z+52, r1	; 0x34
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	15 aa       	std	Z+53, r1	; 0x35
    2fe6:	16 aa       	std	Z+54, r1	; 0x36
    2fe8:	17 aa       	std	Z+55, r1	; 0x37
    2fea:	10 ae       	std	Z+56, r1	; 0x38
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	11 ae       	std	Z+57, r1	; 0x39
    2ff4:	12 ae       	std	Z+58, r1	; 0x3a
    2ff6:	13 ae       	std	Z+59, r1	; 0x3b
    2ff8:	14 ae       	std	Z+60, r1	; 0x3c
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffe:	cd 96       	adiw	r24, 0x3d	; 61
    3000:	fc 01       	movw	r30, r24
    3002:	10 82       	st	Z, r1
    3004:	11 82       	std	Z+1, r1	; 0x01
    3006:	12 82       	std	Z+2, r1	; 0x02
    3008:	13 82       	std	Z+3, r1	; 0x03
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	9a 81       	ldd	r25, Y+2	; 0x02
    300e:	8f 5b       	subi	r24, 0xBF	; 191
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	fc 01       	movw	r30, r24
    3014:	10 82       	st	Z, r1
    3016:	11 82       	std	Z+1, r1	; 0x01
    3018:	12 82       	std	Z+2, r1	; 0x02
    301a:	13 82       	std	Z+3, r1	; 0x03
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	8b 5b       	subi	r24, 0xBB	; 187
    3022:	9f 4f       	sbci	r25, 0xFF	; 255
    3024:	fc 01       	movw	r30, r24
    3026:	10 82       	st	Z, r1
    3028:	11 82       	std	Z+1, r1	; 0x01
    302a:	12 82       	std	Z+2, r1	; 0x02
    302c:	13 82       	std	Z+3, r1	; 0x03
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	9a 81       	ldd	r25, Y+2	; 0x02
    3032:	87 5b       	subi	r24, 0xB7	; 183
    3034:	9f 4f       	sbci	r25, 0xFF	; 255
    3036:	fc 01       	movw	r30, r24
    3038:	10 82       	st	Z, r1
    303a:	11 82       	std	Z+1, r1	; 0x01
    303c:	12 82       	std	Z+2, r1	; 0x02
    303e:	13 82       	std	Z+3, r1	; 0x03
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	83 5b       	subi	r24, 0xB3	; 179
    3046:	9f 4f       	sbci	r25, 0xFF	; 255
    3048:	fc 01       	movw	r30, r24
    304a:	10 82       	st	Z, r1
    304c:	11 82       	std	Z+1, r1	; 0x01
    304e:	12 82       	std	Z+2, r1	; 0x02
    3050:	13 82       	std	Z+3, r1	; 0x03
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	9a 81       	ldd	r25, Y+2	; 0x02
    3056:	8f 5a       	subi	r24, 0xAF	; 175
    3058:	9f 4f       	sbci	r25, 0xFF	; 255
    305a:	fc 01       	movw	r30, r24
    305c:	10 82       	st	Z, r1
    305e:	11 82       	std	Z+1, r1	; 0x01
    3060:	12 82       	std	Z+2, r1	; 0x02
    3062:	13 82       	std	Z+3, r1	; 0x03
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	8b 5a       	subi	r24, 0xAB	; 171
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	fc 01       	movw	r30, r24
    306e:	10 82       	st	Z, r1
    3070:	11 82       	std	Z+1, r1	; 0x01
    3072:	12 82       	std	Z+2, r1	; 0x02
    3074:	13 82       	std	Z+3, r1	; 0x03
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	87 5a       	subi	r24, 0xA7	; 167
    307c:	9f 4f       	sbci	r25, 0xFF	; 255
    307e:	fc 01       	movw	r30, r24
    3080:	10 82       	st	Z, r1
    3082:	11 82       	std	Z+1, r1	; 0x01
    3084:	12 82       	std	Z+2, r1	; 0x02
    3086:	13 82       	std	Z+3, r1	; 0x03
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	83 5a       	subi	r24, 0xA3	; 163
    308e:	9f 4f       	sbci	r25, 0xFF	; 255
    3090:	fc 01       	movw	r30, r24
    3092:	10 82       	st	Z, r1
    3094:	11 82       	std	Z+1, r1	; 0x01
    3096:	12 82       	std	Z+2, r1	; 0x02
    3098:	13 82       	std	Z+3, r1	; 0x03
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	8f 59       	subi	r24, 0x9F	; 159
    30a0:	9f 4f       	sbci	r25, 0xFF	; 255
    30a2:	fc 01       	movw	r30, r24
    30a4:	10 82       	st	Z, r1
    30a6:	11 82       	std	Z+1, r1	; 0x01
    30a8:	12 82       	std	Z+2, r1	; 0x02
    30aa:	13 82       	std	Z+3, r1	; 0x03
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	8b 59       	subi	r24, 0x9B	; 155
    30b2:	9f 4f       	sbci	r25, 0xFF	; 255
    30b4:	fc 01       	movw	r30, r24
    30b6:	10 82       	st	Z, r1
    30b8:	11 82       	std	Z+1, r1	; 0x01
    30ba:	12 82       	std	Z+2, r1	; 0x02
    30bc:	13 82       	std	Z+3, r1	; 0x03
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	9a 81       	ldd	r25, Y+2	; 0x02
    30c2:	87 59       	subi	r24, 0x97	; 151
    30c4:	9f 4f       	sbci	r25, 0xFF	; 255
    30c6:	fc 01       	movw	r30, r24
    30c8:	10 82       	st	Z, r1
    30ca:	11 82       	std	Z+1, r1	; 0x01
    30cc:	12 82       	std	Z+2, r1	; 0x02
    30ce:	13 82       	std	Z+3, r1	; 0x03
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	9a 81       	ldd	r25, Y+2	; 0x02
    30d4:	83 59       	subi	r24, 0x93	; 147
    30d6:	9f 4f       	sbci	r25, 0xFF	; 255
    30d8:	fc 01       	movw	r30, r24
    30da:	10 82       	st	Z, r1
    30dc:	11 82       	std	Z+1, r1	; 0x01
    30de:	12 82       	std	Z+2, r1	; 0x02
    30e0:	13 82       	std	Z+3, r1	; 0x03
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	9a 81       	ldd	r25, Y+2	; 0x02
    30e6:	8f 58       	subi	r24, 0x8F	; 143
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	fc 01       	movw	r30, r24
    30ec:	10 82       	st	Z, r1
    30ee:	11 82       	std	Z+1, r1	; 0x01
    30f0:	12 82       	std	Z+2, r1	; 0x02
    30f2:	13 82       	std	Z+3, r1	; 0x03
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	8b 58       	subi	r24, 0x8B	; 139
    30fa:	9f 4f       	sbci	r25, 0xFF	; 255
    30fc:	fc 01       	movw	r30, r24
    30fe:	10 82       	st	Z, r1
    3100:	11 82       	std	Z+1, r1	; 0x01
    3102:	12 82       	std	Z+2, r1	; 0x02
    3104:	13 82       	std	Z+3, r1	; 0x03
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	87 58       	subi	r24, 0x87	; 135
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	fc 01       	movw	r30, r24
    3110:	10 82       	st	Z, r1
    3112:	11 82       	std	Z+1, r1	; 0x01
    3114:	12 82       	std	Z+2, r1	; 0x02
    3116:	13 82       	std	Z+3, r1	; 0x03
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	83 58       	subi	r24, 0x83	; 131
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	fc 01       	movw	r30, r24
    3122:	10 82       	st	Z, r1
    3124:	11 82       	std	Z+1, r1	; 0x01
    3126:	12 82       	std	Z+2, r1	; 0x02
    3128:	13 82       	std	Z+3, r1	; 0x03
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	9a 81       	ldd	r25, Y+2	; 0x02
    312e:	8f 57       	subi	r24, 0x7F	; 127
    3130:	9f 4f       	sbci	r25, 0xFF	; 255
    3132:	fc 01       	movw	r30, r24
    3134:	10 82       	st	Z, r1
    3136:	11 82       	std	Z+1, r1	; 0x01
    3138:	12 82       	std	Z+2, r1	; 0x02
    313a:	13 82       	std	Z+3, r1	; 0x03
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	9a 81       	ldd	r25, Y+2	; 0x02
    3140:	8b 57       	subi	r24, 0x7B	; 123
    3142:	9f 4f       	sbci	r25, 0xFF	; 255
    3144:	fc 01       	movw	r30, r24
    3146:	10 82       	st	Z, r1
    3148:	11 82       	std	Z+1, r1	; 0x01
    314a:	12 82       	std	Z+2, r1	; 0x02
    314c:	13 82       	std	Z+3, r1	; 0x03
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	9a 81       	ldd	r25, Y+2	; 0x02
    3152:	87 57       	subi	r24, 0x77	; 119
    3154:	9f 4f       	sbci	r25, 0xFF	; 255
    3156:	fc 01       	movw	r30, r24
    3158:	10 82       	st	Z, r1
    315a:	11 82       	std	Z+1, r1	; 0x01
    315c:	12 82       	std	Z+2, r1	; 0x02
    315e:	13 82       	std	Z+3, r1	; 0x03
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	83 57       	subi	r24, 0x73	; 115
    3166:	9f 4f       	sbci	r25, 0xFF	; 255
    3168:	fc 01       	movw	r30, r24
    316a:	10 82       	st	Z, r1
    316c:	11 82       	std	Z+1, r1	; 0x01
    316e:	12 82       	std	Z+2, r1	; 0x02
    3170:	13 82       	std	Z+3, r1	; 0x03
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	8f 56       	subi	r24, 0x6F	; 111
    3178:	9f 4f       	sbci	r25, 0xFF	; 255
    317a:	fc 01       	movw	r30, r24
    317c:	10 82       	st	Z, r1
    317e:	11 82       	std	Z+1, r1	; 0x01
    3180:	12 82       	std	Z+2, r1	; 0x02
    3182:	13 82       	std	Z+3, r1	; 0x03
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	8b 56       	subi	r24, 0x6B	; 107
    318a:	9f 4f       	sbci	r25, 0xFF	; 255
    318c:	fc 01       	movw	r30, r24
    318e:	10 82       	st	Z, r1
    3190:	11 82       	std	Z+1, r1	; 0x01
    3192:	12 82       	std	Z+2, r1	; 0x02
    3194:	13 82       	std	Z+3, r1	; 0x03
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	87 56       	subi	r24, 0x67	; 103
    319c:	9f 4f       	sbci	r25, 0xFF	; 255
    319e:	fc 01       	movw	r30, r24
    31a0:	10 82       	st	Z, r1
    31a2:	11 82       	std	Z+1, r1	; 0x01
    31a4:	12 82       	std	Z+2, r1	; 0x02
    31a6:	13 82       	std	Z+3, r1	; 0x03
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	9a 81       	ldd	r25, Y+2	; 0x02
    31ac:	83 56       	subi	r24, 0x63	; 99
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	fc 01       	movw	r30, r24
    31b2:	10 82       	st	Z, r1
    31b4:	11 82       	std	Z+1, r1	; 0x01
    31b6:	12 82       	std	Z+2, r1	; 0x02
    31b8:	13 82       	std	Z+3, r1	; 0x03
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	9a 81       	ldd	r25, Y+2	; 0x02
    31be:	8f 55       	subi	r24, 0x5F	; 95
    31c0:	9f 4f       	sbci	r25, 0xFF	; 255
    31c2:	fc 01       	movw	r30, r24
    31c4:	10 82       	st	Z, r1
    31c6:	11 82       	std	Z+1, r1	; 0x01
    31c8:	12 82       	std	Z+2, r1	; 0x02
    31ca:	13 82       	std	Z+3, r1	; 0x03
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	8b 55       	subi	r24, 0x5B	; 91
    31d2:	9f 4f       	sbci	r25, 0xFF	; 255
    31d4:	fc 01       	movw	r30, r24
    31d6:	10 82       	st	Z, r1
    31d8:	11 82       	std	Z+1, r1	; 0x01
    31da:	12 82       	std	Z+2, r1	; 0x02
    31dc:	13 82       	std	Z+3, r1	; 0x03
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	9a 81       	ldd	r25, Y+2	; 0x02
    31e2:	87 55       	subi	r24, 0x57	; 87
    31e4:	9f 4f       	sbci	r25, 0xFF	; 255
    31e6:	fc 01       	movw	r30, r24
    31e8:	10 82       	st	Z, r1
    31ea:	11 82       	std	Z+1, r1	; 0x01
    31ec:	12 82       	std	Z+2, r1	; 0x02
    31ee:	13 82       	std	Z+3, r1	; 0x03
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	9a 81       	ldd	r25, Y+2	; 0x02
    31f4:	83 55       	subi	r24, 0x53	; 83
    31f6:	9f 4f       	sbci	r25, 0xFF	; 255
    31f8:	fc 01       	movw	r30, r24
    31fa:	10 82       	st	Z, r1
    31fc:	11 82       	std	Z+1, r1	; 0x01
    31fe:	12 82       	std	Z+2, r1	; 0x02
    3200:	13 82       	std	Z+3, r1	; 0x03
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	9a 81       	ldd	r25, Y+2	; 0x02
    3206:	8f 54       	subi	r24, 0x4F	; 79
    3208:	9f 4f       	sbci	r25, 0xFF	; 255
    320a:	fc 01       	movw	r30, r24
    320c:	10 82       	st	Z, r1
    320e:	11 82       	std	Z+1, r1	; 0x01
    3210:	12 82       	std	Z+2, r1	; 0x02
    3212:	13 82       	std	Z+3, r1	; 0x03
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	9a 81       	ldd	r25, Y+2	; 0x02
    3218:	8b 54       	subi	r24, 0x4B	; 75
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
    321c:	fc 01       	movw	r30, r24
    321e:	10 82       	st	Z, r1
    3220:	11 82       	std	Z+1, r1	; 0x01
    3222:	12 82       	std	Z+2, r1	; 0x02
    3224:	13 82       	std	Z+3, r1	; 0x03
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	9a 81       	ldd	r25, Y+2	; 0x02
    322a:	87 54       	subi	r24, 0x47	; 71
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	fc 01       	movw	r30, r24
    3230:	10 82       	st	Z, r1
    3232:	11 82       	std	Z+1, r1	; 0x01
    3234:	12 82       	std	Z+2, r1	; 0x02
    3236:	13 82       	std	Z+3, r1	; 0x03
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
    323c:	83 54       	subi	r24, 0x43	; 67
    323e:	9f 4f       	sbci	r25, 0xFF	; 255
    3240:	fc 01       	movw	r30, r24
    3242:	10 82       	st	Z, r1
    3244:	11 82       	std	Z+1, r1	; 0x01
    3246:	12 82       	std	Z+2, r1	; 0x02
    3248:	13 82       	std	Z+3, r1	; 0x03
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	8f 53       	subi	r24, 0x3F	; 63
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	fc 01       	movw	r30, r24
    3254:	10 82       	st	Z, r1
    3256:	11 82       	std	Z+1, r1	; 0x01
    3258:	12 82       	std	Z+2, r1	; 0x02
    325a:	13 82       	std	Z+3, r1	; 0x03
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	8b 53       	subi	r24, 0x3B	; 59
    3262:	9f 4f       	sbci	r25, 0xFF	; 255
    3264:	fc 01       	movw	r30, r24
    3266:	10 82       	st	Z, r1
    3268:	11 82       	std	Z+1, r1	; 0x01
    326a:	12 82       	std	Z+2, r1	; 0x02
    326c:	13 82       	std	Z+3, r1	; 0x03
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	9a 81       	ldd	r25, Y+2	; 0x02
    3272:	87 53       	subi	r24, 0x37	; 55
    3274:	9f 4f       	sbci	r25, 0xFF	; 255
    3276:	fc 01       	movw	r30, r24
    3278:	10 82       	st	Z, r1
    327a:	11 82       	std	Z+1, r1	; 0x01
    327c:	12 82       	std	Z+2, r1	; 0x02
    327e:	13 82       	std	Z+3, r1	; 0x03
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	9a 81       	ldd	r25, Y+2	; 0x02
    3284:	83 53       	subi	r24, 0x33	; 51
    3286:	9f 4f       	sbci	r25, 0xFF	; 255
    3288:	fc 01       	movw	r30, r24
    328a:	10 82       	st	Z, r1
    328c:	11 82       	std	Z+1, r1	; 0x01
    328e:	12 82       	std	Z+2, r1	; 0x02
    3290:	13 82       	std	Z+3, r1	; 0x03
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	8f 52       	subi	r24, 0x2F	; 47
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	fc 01       	movw	r30, r24
    329c:	10 82       	st	Z, r1
    329e:	11 82       	std	Z+1, r1	; 0x01
    32a0:	12 82       	std	Z+2, r1	; 0x02
    32a2:	13 82       	std	Z+3, r1	; 0x03
			{
				EcefToLocalNEDRotationMatrix[0][0] = 0;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	8b 52       	subi	r24, 0x2B	; 43
    32aa:	9f 4f       	sbci	r25, 0xFF	; 255
    32ac:	fc 01       	movw	r30, r24
    32ae:	10 82       	st	Z, r1
    32b0:	11 82       	std	Z+1, r1	; 0x01
    32b2:	12 82       	std	Z+2, r1	; 0x02
    32b4:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[0][1] = 0;
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ba:	87 52       	subi	r24, 0x27	; 39
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	fc 01       	movw	r30, r24
    32c0:	10 82       	st	Z, r1
    32c2:	11 82       	std	Z+1, r1	; 0x01
    32c4:	12 82       	std	Z+2, r1	; 0x02
    32c6:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[0][2] = 0;
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	9a 81       	ldd	r25, Y+2	; 0x02
    32cc:	83 52       	subi	r24, 0x23	; 35
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	fc 01       	movw	r30, r24
    32d2:	10 82       	st	Z, r1
    32d4:	11 82       	std	Z+1, r1	; 0x01
    32d6:	12 82       	std	Z+2, r1	; 0x02
    32d8:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[1][0] = 0;
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	8f 51       	subi	r24, 0x1F	; 31
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	fc 01       	movw	r30, r24
    32e4:	10 82       	st	Z, r1
    32e6:	11 82       	std	Z+1, r1	; 0x01
    32e8:	12 82       	std	Z+2, r1	; 0x02
    32ea:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[1][1] = 0;
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	8b 51       	subi	r24, 0x1B	; 27
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	fc 01       	movw	r30, r24
    32f6:	10 82       	st	Z, r1
    32f8:	11 82       	std	Z+1, r1	; 0x01
    32fa:	12 82       	std	Z+2, r1	; 0x02
    32fc:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[1][2] = 0;
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	9a 81       	ldd	r25, Y+2	; 0x02
    3302:	87 51       	subi	r24, 0x17	; 23
    3304:	9f 4f       	sbci	r25, 0xFF	; 255
    3306:	fc 01       	movw	r30, r24
    3308:	10 82       	st	Z, r1
    330a:	11 82       	std	Z+1, r1	; 0x01
    330c:	12 82       	std	Z+2, r1	; 0x02
    330e:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[2][0] = 0;
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	83 51       	subi	r24, 0x13	; 19
    3316:	9f 4f       	sbci	r25, 0xFF	; 255
    3318:	fc 01       	movw	r30, r24
    331a:	10 82       	st	Z, r1
    331c:	11 82       	std	Z+1, r1	; 0x01
    331e:	12 82       	std	Z+2, r1	; 0x02
    3320:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[2][1] = 0;
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	8f 50       	subi	r24, 0x0F	; 15
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	fc 01       	movw	r30, r24
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[2][2] = 0;								
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	8b 50       	subi	r24, 0x0B	; 11
    333a:	9f 4f       	sbci	r25, 0xFF	; 255
    333c:	fc 01       	movw	r30, r24
    333e:	10 82       	st	Z, r1
    3340:	11 82       	std	Z+1, r1	; 0x01
    3342:	12 82       	std	Z+2, r1	; 0x02
    3344:	13 82       	std	Z+3, r1	; 0x03
			}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	08 95       	ret

00003350 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEf>:
			void MagYawDegrees(float val) { magYawDegrees = val; }	
				
				
				
			float ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(float val) { referenceMagYawDegrees = val;}
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	00 d0       	rcall	.+0      	; 0x3356 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEf+0x6>
    3356:	00 d0       	rcall	.+0      	; 0x3358 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEf+0x8>
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	4b 83       	std	Y+3, r20	; 0x03
    3362:	5c 83       	std	Y+4, r21	; 0x04
    3364:	6d 83       	std	Y+5, r22	; 0x05
    3366:	7e 83       	std	Y+6, r23	; 0x06
    3368:	29 81       	ldd	r18, Y+1	; 0x01
    336a:	3a 81       	ldd	r19, Y+2	; 0x02
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	9c 81       	ldd	r25, Y+4	; 0x04
    3370:	ad 81       	ldd	r26, Y+5	; 0x05
    3372:	be 81       	ldd	r27, Y+6	; 0x06
    3374:	f9 01       	movw	r30, r18
    3376:	85 83       	std	Z+5, r24	; 0x05
    3378:	96 83       	std	Z+6, r25	; 0x06
    337a:	a7 83       	std	Z+7, r26	; 0x07
    337c:	b0 87       	std	Z+8, r27	; 0x08
    337e:	26 96       	adiw	r28, 0x06	; 6
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	08 95       	ret

00003390 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEf>:
				
			float YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(float val) { yawVelocityDegreesPerSecond = val;}
				
			float ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(float val) { referenceYawVelocityDegreesPerSecond = val;}
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	00 d0       	rcall	.+0      	; 0x3396 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEf+0x6>
    3396:	00 d0       	rcall	.+0      	; 0x3398 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEf+0x8>
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	9a 83       	std	Y+2, r25	; 0x02
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	4b 83       	std	Y+3, r20	; 0x03
    33a2:	5c 83       	std	Y+4, r21	; 0x04
    33a4:	6d 83       	std	Y+5, r22	; 0x05
    33a6:	7e 83       	std	Y+6, r23	; 0x06
    33a8:	29 81       	ldd	r18, Y+1	; 0x01
    33aa:	3a 81       	ldd	r19, Y+2	; 0x02
    33ac:	8b 81       	ldd	r24, Y+3	; 0x03
    33ae:	9c 81       	ldd	r25, Y+4	; 0x04
    33b0:	ad 81       	ldd	r26, Y+5	; 0x05
    33b2:	be 81       	ldd	r27, Y+6	; 0x06
    33b4:	f9 01       	movw	r30, r18
    33b6:	85 8b       	std	Z+21, r24	; 0x15
    33b8:	96 8b       	std	Z+22, r25	; 0x16
    33ba:	a7 8b       	std	Z+23, r26	; 0x17
    33bc:	b0 8f       	std	Z+24, r27	; 0x18
    33be:	26 96       	adiw	r28, 0x06	; 6
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	08 95       	ret

000033d0 <_ZN10helicopter5model11SystemModel22ReferenceXNEDBodyFrameEf>:
		
			float XNEDBodyFrame() const {return xNEDBodyFrame;}
			void XNEDBodyFrame(float val) { xNEDBodyFrame = val;}
						
			float ReferenceXNEDBodyFrame() const {return referenceXNEDBodyFrame;}
			void ReferenceXNEDBodyFrame(float val) { referenceXNEDBodyFrame = val;}
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <_ZN10helicopter5model11SystemModel22ReferenceXNEDBodyFrameEf+0x6>
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <_ZN10helicopter5model11SystemModel22ReferenceXNEDBodyFrameEf+0x8>
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	9a 83       	std	Y+2, r25	; 0x02
    33de:	89 83       	std	Y+1, r24	; 0x01
    33e0:	4b 83       	std	Y+3, r20	; 0x03
    33e2:	5c 83       	std	Y+4, r21	; 0x04
    33e4:	6d 83       	std	Y+5, r22	; 0x05
    33e6:	7e 83       	std	Y+6, r23	; 0x06
    33e8:	29 81       	ldd	r18, Y+1	; 0x01
    33ea:	3a 81       	ldd	r19, Y+2	; 0x02
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	ad 81       	ldd	r26, Y+5	; 0x05
    33f2:	be 81       	ldd	r27, Y+6	; 0x06
    33f4:	f9 01       	movw	r30, r18
    33f6:	81 a7       	std	Z+41, r24	; 0x29
    33f8:	92 a7       	std	Z+42, r25	; 0x2a
    33fa:	a3 a7       	std	Z+43, r26	; 0x2b
    33fc:	b4 a7       	std	Z+44, r27	; 0x2c
    33fe:	26 96       	adiw	r28, 0x06	; 6
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	08 95       	ret

00003410 <_ZN10helicopter5model11SystemModel33ReferenceXVelocityMetersPerSecondEf>:
				
			float XVelocityMetersPerSecond() const {return xVelocityMetersPerSecond;}
			void XVelocityMetersPerSecond(float val) { xVelocityMetersPerSecond = val;}
				
			float ReferenceXVelocityMetersPerSecond() const {return referenceXVelocityMetersPerSecond;}
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	00 d0       	rcall	.+0      	; 0x3416 <_ZN10helicopter5model11SystemModel33ReferenceXVelocityMetersPerSecondEf+0x6>
    3416:	00 d0       	rcall	.+0      	; 0x3418 <_ZN10helicopter5model11SystemModel33ReferenceXVelocityMetersPerSecondEf+0x8>
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
    341c:	9a 83       	std	Y+2, r25	; 0x02
    341e:	89 83       	std	Y+1, r24	; 0x01
    3420:	4b 83       	std	Y+3, r20	; 0x03
    3422:	5c 83       	std	Y+4, r21	; 0x04
    3424:	6d 83       	std	Y+5, r22	; 0x05
    3426:	7e 83       	std	Y+6, r23	; 0x06
    3428:	29 81       	ldd	r18, Y+1	; 0x01
    342a:	3a 81       	ldd	r19, Y+2	; 0x02
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	9c 81       	ldd	r25, Y+4	; 0x04
    3430:	ad 81       	ldd	r26, Y+5	; 0x05
    3432:	be 81       	ldd	r27, Y+6	; 0x06
    3434:	f9 01       	movw	r30, r18
    3436:	81 af       	std	Z+57, r24	; 0x39
    3438:	92 af       	std	Z+58, r25	; 0x3a
    343a:	a3 af       	std	Z+59, r26	; 0x3b
    343c:	b4 af       	std	Z+60, r27	; 0x3c
    343e:	26 96       	adiw	r28, 0x06	; 6
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	08 95       	ret

00003450 <_ZN10helicopter5model11SystemModel22ReferenceYNEDBodyFrameEf>:

			float YNEDBodyFrame() const {return yNEDBodyFrame;}
			void YNEDBodyFrame(float val) { yNEDBodyFrame = val;}

			float ReferenceYNEDBodyFrame() const {return referenceYNEDBodyFrame;}
			void ReferenceYNEDBodyFrame(float val) { referenceYNEDBodyFrame = val;}
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	00 d0       	rcall	.+0      	; 0x3456 <_ZN10helicopter5model11SystemModel22ReferenceYNEDBodyFrameEf+0x6>
    3456:	00 d0       	rcall	.+0      	; 0x3458 <_ZN10helicopter5model11SystemModel22ReferenceYNEDBodyFrameEf+0x8>
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	89 83       	std	Y+1, r24	; 0x01
    3460:	4b 83       	std	Y+3, r20	; 0x03
    3462:	5c 83       	std	Y+4, r21	; 0x04
    3464:	6d 83       	std	Y+5, r22	; 0x05
    3466:	7e 83       	std	Y+6, r23	; 0x06
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	9c 01       	movw	r18, r24
    346e:	27 5a       	subi	r18, 0xA7	; 167
    3470:	3f 4f       	sbci	r19, 0xFF	; 255
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	ad 81       	ldd	r26, Y+5	; 0x05
    3478:	be 81       	ldd	r27, Y+6	; 0x06
    347a:	f9 01       	movw	r30, r18
    347c:	80 83       	st	Z, r24
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	a2 83       	std	Z+2, r26	; 0x02
    3482:	b3 83       	std	Z+3, r27	; 0x03
    3484:	26 96       	adiw	r28, 0x06	; 6
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	df 91       	pop	r29
    3492:	cf 91       	pop	r28
    3494:	08 95       	ret

00003496 <_ZN10helicopter5model11SystemModel33ReferenceYVelocityMetersPerSecondEf>:

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}

			float ReferenceYVelocityMetersPerSecond() const {return referenceYVelocityMetersPerSecond;}
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	00 d0       	rcall	.+0      	; 0x349c <_ZN10helicopter5model11SystemModel33ReferenceYVelocityMetersPerSecondEf+0x6>
    349c:	00 d0       	rcall	.+0      	; 0x349e <_ZN10helicopter5model11SystemModel33ReferenceYVelocityMetersPerSecondEf+0x8>
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	4b 83       	std	Y+3, r20	; 0x03
    34a8:	5c 83       	std	Y+4, r21	; 0x04
    34aa:	6d 83       	std	Y+5, r22	; 0x05
    34ac:	7e 83       	std	Y+6, r23	; 0x06
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	9a 81       	ldd	r25, Y+2	; 0x02
    34b2:	9c 01       	movw	r18, r24
    34b4:	27 59       	subi	r18, 0x97	; 151
    34b6:	3f 4f       	sbci	r19, 0xFF	; 255
    34b8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ba:	9c 81       	ldd	r25, Y+4	; 0x04
    34bc:	ad 81       	ldd	r26, Y+5	; 0x05
    34be:	be 81       	ldd	r27, Y+6	; 0x06
    34c0:	f9 01       	movw	r30, r18
    34c2:	80 83       	st	Z, r24
    34c4:	91 83       	std	Z+1, r25	; 0x01
    34c6:	a2 83       	std	Z+2, r26	; 0x02
    34c8:	b3 83       	std	Z+3, r27	; 0x03
    34ca:	26 96       	adiw	r28, 0x06	; 6
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	08 95       	ret

000034dc <_ZNK10helicopter5model11SystemModel15AltitudeFeetAglEv>:
						
						
						
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	1f 92       	push	r1
    34e2:	1f 92       	push	r1
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	9a 83       	std	Y+2, r25	; 0x02
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
    34f0:	8b 57       	subi	r24, 0x7B	; 123
    34f2:	9f 4f       	sbci	r25, 0xFF	; 255
    34f4:	fc 01       	movw	r30, r24
    34f6:	80 81       	ld	r24, Z
    34f8:	91 81       	ldd	r25, Z+1	; 0x01
    34fa:	a2 81       	ldd	r26, Z+2	; 0x02
    34fc:	b3 81       	ldd	r27, Z+3	; 0x03
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	08 95       	ret

0000350c <_ZN10helicopter5model11SystemModel26ReferenceZNEDBodyFrameFeetEf>:
			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
			void ZNEDBodyFrame(float val) { zNEDBodyFrame = val; }


			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
			void ReferenceZNEDBodyFrameFeet(float val) { referenceAltitudeFeet = val;}
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	00 d0       	rcall	.+0      	; 0x3512 <_ZN10helicopter5model11SystemModel26ReferenceZNEDBodyFrameFeetEf+0x6>
    3512:	00 d0       	rcall	.+0      	; 0x3514 <_ZN10helicopter5model11SystemModel26ReferenceZNEDBodyFrameFeetEf+0x8>
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	9a 83       	std	Y+2, r25	; 0x02
    351a:	89 83       	std	Y+1, r24	; 0x01
    351c:	4b 83       	std	Y+3, r20	; 0x03
    351e:	5c 83       	std	Y+4, r21	; 0x04
    3520:	6d 83       	std	Y+5, r22	; 0x05
    3522:	7e 83       	std	Y+6, r23	; 0x06
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	9c 01       	movw	r18, r24
    352a:	23 57       	subi	r18, 0x73	; 115
    352c:	3f 4f       	sbci	r19, 0xFF	; 255
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	ad 81       	ldd	r26, Y+5	; 0x05
    3534:	be 81       	ldd	r27, Y+6	; 0x06
    3536:	f9 01       	movw	r30, r18
    3538:	80 83       	st	Z, r24
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	a2 83       	std	Z+2, r26	; 0x02
    353e:	b3 83       	std	Z+3, r27	; 0x03
    3540:	26 96       	adiw	r28, 0x06	; 6
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	08 95       	ret

00003552 <_ZN10helicopter5model11SystemModel31ReferenceZVelocityFeetPerSecondEf>:

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}

			float ReferenceZVelocityFeetPerSecond() const {return referenceZVelocityFeetPerSecond;}
			void ReferenceZVelocityFeetPerSecond(float val) { referenceZVelocityFeetPerSecond = val;}
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	00 d0       	rcall	.+0      	; 0x3558 <_ZN10helicopter5model11SystemModel31ReferenceZVelocityFeetPerSecondEf+0x6>
    3558:	00 d0       	rcall	.+0      	; 0x355a <_ZN10helicopter5model11SystemModel31ReferenceZVelocityFeetPerSecondEf+0x8>
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	9a 83       	std	Y+2, r25	; 0x02
    3560:	89 83       	std	Y+1, r24	; 0x01
    3562:	4b 83       	std	Y+3, r20	; 0x03
    3564:	5c 83       	std	Y+4, r21	; 0x04
    3566:	6d 83       	std	Y+5, r22	; 0x05
    3568:	7e 83       	std	Y+6, r23	; 0x06
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	9a 81       	ldd	r25, Y+2	; 0x02
    356e:	9c 01       	movw	r18, r24
    3570:	23 56       	subi	r18, 0x63	; 99
    3572:	3f 4f       	sbci	r19, 0xFF	; 255
    3574:	8b 81       	ldd	r24, Y+3	; 0x03
    3576:	9c 81       	ldd	r25, Y+4	; 0x04
    3578:	ad 81       	ldd	r26, Y+5	; 0x05
    357a:	be 81       	ldd	r27, Y+6	; 0x06
    357c:	f9 01       	movw	r30, r18
    357e:	80 83       	st	Z, r24
    3580:	91 83       	std	Z+1, r25	; 0x01
    3582:	a2 83       	std	Z+2, r26	; 0x02
    3584:	b3 83       	std	Z+3, r27	; 0x03
    3586:	26 96       	adiw	r28, 0x06	; 6
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	08 95       	ret

00003598 <_ZNK10helicopter5model11SystemModel15LatitudeDegreesEv>:

			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	1f 92       	push	r1
    359e:	1f 92       	push	r1
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	9a 83       	std	Y+2, r25	; 0x02
    35a6:	89 83       	std	Y+1, r24	; 0x01
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	9a 81       	ldd	r25, Y+2	; 0x02
    35ac:	83 55       	subi	r24, 0x53	; 83
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	fc 01       	movw	r30, r24
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	a2 81       	ldd	r26, Z+2	; 0x02
    35b8:	b3 81       	ldd	r27, Z+3	; 0x03
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	df 91       	pop	r29
    35c4:	cf 91       	pop	r28
    35c6:	08 95       	ret

000035c8 <_ZNK10helicopter5model11SystemModel16LongitudeDegreesEv>:
			void LatitudeDegrees(float val) { latitudeDegrees = val;}						

			float LongitudeDegrees() const {return longitudeDegrees;}
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	1f 92       	push	r1
    35ce:	1f 92       	push	r1
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	8f 54       	subi	r24, 0x4F	; 79
    35de:	9f 4f       	sbci	r25, 0xFF	; 255
    35e0:	fc 01       	movw	r30, r24
    35e2:	80 81       	ld	r24, Z
    35e4:	91 81       	ldd	r25, Z+1	; 0x01
    35e6:	a2 81       	ldd	r26, Z+2	; 0x02
    35e8:	b3 81       	ldd	r27, Z+3	; 0x03
    35ea:	bc 01       	movw	r22, r24
    35ec:	cd 01       	movw	r24, r26
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	08 95       	ret

000035f8 <_ZN10helicopter5model11SystemModel20InitialXPositionEcefEl>:
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
			void SerialCommunicationBufferOverruns( long val ) { serialCommunicationBufferOverruns = val;}				

			long  InitialXPositionEcef() const {return initialXPositionEcef;}
			void InitialXPositionEcef( long val ) { initialXPositionEcef = val;}			
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <_ZN10helicopter5model11SystemModel20InitialXPositionEcefEl+0x6>
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <_ZN10helicopter5model11SystemModel20InitialXPositionEcefEl+0x8>
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	9a 83       	std	Y+2, r25	; 0x02
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	4b 83       	std	Y+3, r20	; 0x03
    360a:	5c 83       	std	Y+4, r21	; 0x04
    360c:	6d 83       	std	Y+5, r22	; 0x05
    360e:	7e 83       	std	Y+6, r23	; 0x06
    3610:	6b 81       	ldd	r22, Y+3	; 0x03
    3612:	7c 81       	ldd	r23, Y+4	; 0x04
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	29 81       	ldd	r18, Y+1	; 0x01
    3622:	3a 81       	ldd	r19, Y+2	; 0x02
    3624:	27 53       	subi	r18, 0x37	; 55
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	f9 01       	movw	r30, r18
    362a:	80 83       	st	Z, r24
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	a2 83       	std	Z+2, r26	; 0x02
    3630:	b3 83       	std	Z+3, r27	; 0x03
    3632:	26 96       	adiw	r28, 0x06	; 6
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	08 95       	ret

00003644 <_ZN10helicopter5model11SystemModel20InitialYPositionEcefEl>:

			long  InitialYPositionEcef() const {return initialYPositionEcef;}
			void InitialYPositionEcef( long val ) { initialYPositionEcef = val;}
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	00 d0       	rcall	.+0      	; 0x364a <_ZN10helicopter5model11SystemModel20InitialYPositionEcefEl+0x6>
    364a:	00 d0       	rcall	.+0      	; 0x364c <_ZN10helicopter5model11SystemModel20InitialYPositionEcefEl+0x8>
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	9a 83       	std	Y+2, r25	; 0x02
    3652:	89 83       	std	Y+1, r24	; 0x01
    3654:	4b 83       	std	Y+3, r20	; 0x03
    3656:	5c 83       	std	Y+4, r21	; 0x04
    3658:	6d 83       	std	Y+5, r22	; 0x05
    365a:	7e 83       	std	Y+6, r23	; 0x06
    365c:	6b 81       	ldd	r22, Y+3	; 0x03
    365e:	7c 81       	ldd	r23, Y+4	; 0x04
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	29 81       	ldd	r18, Y+1	; 0x01
    366e:	3a 81       	ldd	r19, Y+2	; 0x02
    3670:	23 53       	subi	r18, 0x33	; 51
    3672:	3f 4f       	sbci	r19, 0xFF	; 255
    3674:	f9 01       	movw	r30, r18
    3676:	80 83       	st	Z, r24
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	a2 83       	std	Z+2, r26	; 0x02
    367c:	b3 83       	std	Z+3, r27	; 0x03
    367e:	26 96       	adiw	r28, 0x06	; 6
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	de bf       	out	0x3e, r29	; 62
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	08 95       	ret

00003690 <_ZN10helicopter5model11SystemModel20InitialZPositionEcefEl>:

			long  InitialZPositionEcef() const {return initialZPositionEcef;}
			void InitialZPositionEcef( long val ) { initialZPositionEcef = val;}			
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
    3694:	00 d0       	rcall	.+0      	; 0x3696 <_ZN10helicopter5model11SystemModel20InitialZPositionEcefEl+0x6>
    3696:	00 d0       	rcall	.+0      	; 0x3698 <_ZN10helicopter5model11SystemModel20InitialZPositionEcefEl+0x8>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	4b 83       	std	Y+3, r20	; 0x03
    36a2:	5c 83       	std	Y+4, r21	; 0x04
    36a4:	6d 83       	std	Y+5, r22	; 0x05
    36a6:	7e 83       	std	Y+6, r23	; 0x06
    36a8:	6b 81       	ldd	r22, Y+3	; 0x03
    36aa:	7c 81       	ldd	r23, Y+4	; 0x04
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	29 81       	ldd	r18, Y+1	; 0x01
    36ba:	3a 81       	ldd	r19, Y+2	; 0x02
    36bc:	2f 52       	subi	r18, 0x2F	; 47
    36be:	3f 4f       	sbci	r19, 0xFF	; 255
    36c0:	f9 01       	movw	r30, r18
    36c2:	80 83       	st	Z, r24
    36c4:	91 83       	std	Z+1, r25	; 0x01
    36c6:	a2 83       	std	Z+2, r26	; 0x02
    36c8:	b3 83       	std	Z+3, r27	; 0x03
    36ca:	26 96       	adiw	r28, 0x06	; 6
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	08 95       	ret

000036dc <_ZN10helicopter5model11SystemModel16OperationalStateENS1_14OperatingStateE>:
			/*
			float **  EcefToLocalNEDRotationMatrix() const {return ecefToLocalNEDRotationMatrix;}
			void EcefToLocalNEDRotationMatrix( long val ) { ecefToLocalNEDRotationMatrix = val;}*/
				
			OperatingState  OperationalState() const {return operationalState;}
			void OperationalState( OperatingState val ) { operationalState = val;}
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <_ZN10helicopter5model11SystemModel16OperationalStateENS1_14OperatingStateE+0x6>
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
    36ea:	6b 83       	std	Y+3, r22	; 0x03
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	2b 81       	ldd	r18, Y+3	; 0x03
    36f2:	fc 01       	movw	r30, r24
    36f4:	20 83       	st	Z, r18
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	08 95       	ret

00003702 <_ZN10helicopter10controller13PIDController16setXIntegralGainEf>:
			public:
				PIDController (SystemModel *model);
					
				~PIDController();
				
				void setXIntegralGain(float val)
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	00 d0       	rcall	.+0      	; 0x3708 <_ZN10helicopter10controller13PIDController16setXIntegralGainEf+0x6>
    3708:	00 d0       	rcall	.+0      	; 0x370a <_ZN10helicopter10controller13PIDController16setXIntegralGainEf+0x8>
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	9a 83       	std	Y+2, r25	; 0x02
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	4b 83       	std	Y+3, r20	; 0x03
    3714:	5c 83       	std	Y+4, r21	; 0x04
    3716:	6d 83       	std	Y+5, r22	; 0x05
    3718:	7e 83       	std	Y+6, r23	; 0x06
				{
					xIntegralGain = val;
    371a:	29 81       	ldd	r18, Y+1	; 0x01
    371c:	3a 81       	ldd	r19, Y+2	; 0x02
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	9c 81       	ldd	r25, Y+4	; 0x04
    3722:	ad 81       	ldd	r26, Y+5	; 0x05
    3724:	be 81       	ldd	r27, Y+6	; 0x06
    3726:	f9 01       	movw	r30, r18
    3728:	82 8b       	std	Z+18, r24	; 0x12
    372a:	93 8b       	std	Z+19, r25	; 0x13
    372c:	a4 8b       	std	Z+20, r26	; 0x14
    372e:	b5 8b       	std	Z+21, r27	; 0x15
				}
    3730:	26 96       	adiw	r28, 0x06	; 6
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	08 95       	ret

00003742 <_ZN10helicopter10controller13PIDController18setXDerivativeGainEf>:
				
				void setXDerivativeGain(float val)
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	00 d0       	rcall	.+0      	; 0x3748 <_ZN10helicopter10controller13PIDController18setXDerivativeGainEf+0x6>
    3748:	00 d0       	rcall	.+0      	; 0x374a <_ZN10helicopter10controller13PIDController18setXDerivativeGainEf+0x8>
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	9a 83       	std	Y+2, r25	; 0x02
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	4b 83       	std	Y+3, r20	; 0x03
    3754:	5c 83       	std	Y+4, r21	; 0x04
    3756:	6d 83       	std	Y+5, r22	; 0x05
    3758:	7e 83       	std	Y+6, r23	; 0x06
				{
					xDerivativeGain = val;
    375a:	29 81       	ldd	r18, Y+1	; 0x01
    375c:	3a 81       	ldd	r19, Y+2	; 0x02
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	9c 81       	ldd	r25, Y+4	; 0x04
    3762:	ad 81       	ldd	r26, Y+5	; 0x05
    3764:	be 81       	ldd	r27, Y+6	; 0x06
    3766:	f9 01       	movw	r30, r18
    3768:	86 8b       	std	Z+22, r24	; 0x16
    376a:	97 8b       	std	Z+23, r25	; 0x17
    376c:	a0 8f       	std	Z+24, r26	; 0x18
    376e:	b1 8f       	std	Z+25, r27	; 0x19
				}
    3770:	26 96       	adiw	r28, 0x06	; 6
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	08 95       	ret

00003782 <_ZN10helicopter10controller13PIDController20setXProportionalGainEf>:
				
				void setXProportionalGain(float val)
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	00 d0       	rcall	.+0      	; 0x3788 <_ZN10helicopter10controller13PIDController20setXProportionalGainEf+0x6>
    3788:	00 d0       	rcall	.+0      	; 0x378a <_ZN10helicopter10controller13PIDController20setXProportionalGainEf+0x8>
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62
    378e:	9a 83       	std	Y+2, r25	; 0x02
    3790:	89 83       	std	Y+1, r24	; 0x01
    3792:	4b 83       	std	Y+3, r20	; 0x03
    3794:	5c 83       	std	Y+4, r21	; 0x04
    3796:	6d 83       	std	Y+5, r22	; 0x05
    3798:	7e 83       	std	Y+6, r23	; 0x06
				{
					xProportionalGain = val;
    379a:	29 81       	ldd	r18, Y+1	; 0x01
    379c:	3a 81       	ldd	r19, Y+2	; 0x02
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	9c 81       	ldd	r25, Y+4	; 0x04
    37a2:	ad 81       	ldd	r26, Y+5	; 0x05
    37a4:	be 81       	ldd	r27, Y+6	; 0x06
    37a6:	f9 01       	movw	r30, r18
    37a8:	82 8f       	std	Z+26, r24	; 0x1a
    37aa:	93 8f       	std	Z+27, r25	; 0x1b
    37ac:	a4 8f       	std	Z+28, r26	; 0x1c
    37ae:	b5 8f       	std	Z+29, r27	; 0x1d
				}
    37b0:	26 96       	adiw	r28, 0x06	; 6
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	df 91       	pop	r29
    37be:	cf 91       	pop	r28
    37c0:	08 95       	ret

000037c2 <_ZN10helicopter10controller13PIDController18setXAntiWindupGainEf>:
				
				void setXAntiWindupGain(float val)
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	00 d0       	rcall	.+0      	; 0x37c8 <_ZN10helicopter10controller13PIDController18setXAntiWindupGainEf+0x6>
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <_ZN10helicopter10controller13PIDController18setXAntiWindupGainEf+0x8>
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	4b 83       	std	Y+3, r20	; 0x03
    37d4:	5c 83       	std	Y+4, r21	; 0x04
    37d6:	6d 83       	std	Y+5, r22	; 0x05
    37d8:	7e 83       	std	Y+6, r23	; 0x06
				{
					xAntiWindupGain = val;
    37da:	29 81       	ldd	r18, Y+1	; 0x01
    37dc:	3a 81       	ldd	r19, Y+2	; 0x02
    37de:	8b 81       	ldd	r24, Y+3	; 0x03
    37e0:	9c 81       	ldd	r25, Y+4	; 0x04
    37e2:	ad 81       	ldd	r26, Y+5	; 0x05
    37e4:	be 81       	ldd	r27, Y+6	; 0x06
    37e6:	f9 01       	movw	r30, r18
    37e8:	86 8f       	std	Z+30, r24	; 0x1e
    37ea:	97 8f       	std	Z+31, r25	; 0x1f
    37ec:	a0 a3       	std	Z+32, r26	; 0x20
    37ee:	b1 a3       	std	Z+33, r27	; 0x21
				}
    37f0:	26 96       	adiw	r28, 0x06	; 6
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <_ZN10helicopter10controller13PIDController25setLongitudeInnerLoopGainEf>:
				
				void setLongitudeInnerLoopGain(float val)
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	00 d0       	rcall	.+0      	; 0x3808 <_ZN10helicopter10controller13PIDController25setLongitudeInnerLoopGainEf+0x6>
    3808:	00 d0       	rcall	.+0      	; 0x380a <_ZN10helicopter10controller13PIDController25setLongitudeInnerLoopGainEf+0x8>
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	9a 83       	std	Y+2, r25	; 0x02
    3810:	89 83       	std	Y+1, r24	; 0x01
    3812:	4b 83       	std	Y+3, r20	; 0x03
    3814:	5c 83       	std	Y+4, r21	; 0x04
    3816:	6d 83       	std	Y+5, r22	; 0x05
    3818:	7e 83       	std	Y+6, r23	; 0x06
				{
					longitudeInnerLoopGain = val;
    381a:	29 81       	ldd	r18, Y+1	; 0x01
    381c:	3a 81       	ldd	r19, Y+2	; 0x02
    381e:	8b 81       	ldd	r24, Y+3	; 0x03
    3820:	9c 81       	ldd	r25, Y+4	; 0x04
    3822:	ad 81       	ldd	r26, Y+5	; 0x05
    3824:	be 81       	ldd	r27, Y+6	; 0x06
    3826:	f9 01       	movw	r30, r18
    3828:	82 a3       	std	Z+34, r24	; 0x22
    382a:	93 a3       	std	Z+35, r25	; 0x23
    382c:	a4 a3       	std	Z+36, r26	; 0x24
    382e:	b5 a3       	std	Z+37, r27	; 0x25
				}
    3830:	26 96       	adiw	r28, 0x06	; 6
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	08 95       	ret

00003842 <_ZN10helicopter10controller13PIDController27setPitchAngularVelocityGainEf>:
				
				void setPitchAngularVelocityGain(float val)
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
    3846:	00 d0       	rcall	.+0      	; 0x3848 <_ZN10helicopter10controller13PIDController27setPitchAngularVelocityGainEf+0x6>
    3848:	00 d0       	rcall	.+0      	; 0x384a <_ZN10helicopter10controller13PIDController27setPitchAngularVelocityGainEf+0x8>
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	4b 83       	std	Y+3, r20	; 0x03
    3854:	5c 83       	std	Y+4, r21	; 0x04
    3856:	6d 83       	std	Y+5, r22	; 0x05
    3858:	7e 83       	std	Y+6, r23	; 0x06
				{
					pitchAngularVelocityGain = val;
    385a:	29 81       	ldd	r18, Y+1	; 0x01
    385c:	3a 81       	ldd	r19, Y+2	; 0x02
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	9c 81       	ldd	r25, Y+4	; 0x04
    3862:	ad 81       	ldd	r26, Y+5	; 0x05
    3864:	be 81       	ldd	r27, Y+6	; 0x06
    3866:	f9 01       	movw	r30, r18
    3868:	86 a3       	std	Z+38, r24	; 0x26
    386a:	97 a3       	std	Z+39, r25	; 0x27
    386c:	a0 a7       	std	Z+40, r26	; 0x28
    386e:	b1 a7       	std	Z+41, r27	; 0x29
				}
    3870:	26 96       	adiw	r28, 0x06	; 6
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	08 95       	ret

00003882 <_ZN10helicopter10controller13PIDController32setMinLongitudeServoControlValueEf>:
				
				void setMinLongitudeServoControlValue(float val)
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	00 d0       	rcall	.+0      	; 0x3888 <_ZN10helicopter10controller13PIDController32setMinLongitudeServoControlValueEf+0x6>
    3888:	00 d0       	rcall	.+0      	; 0x388a <_ZN10helicopter10controller13PIDController32setMinLongitudeServoControlValueEf+0x8>
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	9a 83       	std	Y+2, r25	; 0x02
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	4b 83       	std	Y+3, r20	; 0x03
    3894:	5c 83       	std	Y+4, r21	; 0x04
    3896:	6d 83       	std	Y+5, r22	; 0x05
    3898:	7e 83       	std	Y+6, r23	; 0x06
				{
					minLongitudeServoControlValue = val;
    389a:	89 81       	ldd	r24, Y+1	; 0x01
    389c:	9a 81       	ldd	r25, Y+2	; 0x02
    389e:	9c 01       	movw	r18, r24
    38a0:	26 5a       	subi	r18, 0xA6	; 166
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	8b 81       	ldd	r24, Y+3	; 0x03
    38a6:	9c 81       	ldd	r25, Y+4	; 0x04
    38a8:	ad 81       	ldd	r26, Y+5	; 0x05
    38aa:	be 81       	ldd	r27, Y+6	; 0x06
    38ac:	f9 01       	movw	r30, r18
    38ae:	80 83       	st	Z, r24
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	a2 83       	std	Z+2, r26	; 0x02
    38b4:	b3 83       	std	Z+3, r27	; 0x03
				}
    38b6:	26 96       	adiw	r28, 0x06	; 6
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	08 95       	ret

000038c8 <_ZN10helicopter10controller13PIDController32setMaxLongitudeServoControlValueEf>:
				
				void setMaxLongitudeServoControlValue(float val)
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <_ZN10helicopter10controller13PIDController32setMaxLongitudeServoControlValueEf+0x6>
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <_ZN10helicopter10controller13PIDController32setMaxLongitudeServoControlValueEf+0x8>
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
    38d4:	9a 83       	std	Y+2, r25	; 0x02
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	4b 83       	std	Y+3, r20	; 0x03
    38da:	5c 83       	std	Y+4, r21	; 0x04
    38dc:	6d 83       	std	Y+5, r22	; 0x05
    38de:	7e 83       	std	Y+6, r23	; 0x06
				{
					maxLongitudeServoControlValue = val;
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	9c 01       	movw	r18, r24
    38e6:	22 5a       	subi	r18, 0xA2	; 162
    38e8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	9c 81       	ldd	r25, Y+4	; 0x04
    38ee:	ad 81       	ldd	r26, Y+5	; 0x05
    38f0:	be 81       	ldd	r27, Y+6	; 0x06
    38f2:	f9 01       	movw	r30, r18
    38f4:	80 83       	st	Z, r24
    38f6:	91 83       	std	Z+1, r25	; 0x01
    38f8:	a2 83       	std	Z+2, r26	; 0x02
    38fa:	b3 83       	std	Z+3, r27	; 0x03
				}
    38fc:	26 96       	adiw	r28, 0x06	; 6
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

0000390e <_ZN10helicopter10controller13PIDController16setYIntegralGainEf>:
						
				
				
				
				
				void setYIntegralGain(float val)
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	00 d0       	rcall	.+0      	; 0x3914 <_ZN10helicopter10controller13PIDController16setYIntegralGainEf+0x6>
    3914:	00 d0       	rcall	.+0      	; 0x3916 <_ZN10helicopter10controller13PIDController16setYIntegralGainEf+0x8>
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	9a 83       	std	Y+2, r25	; 0x02
    391c:	89 83       	std	Y+1, r24	; 0x01
    391e:	4b 83       	std	Y+3, r20	; 0x03
    3920:	5c 83       	std	Y+4, r21	; 0x04
    3922:	6d 83       	std	Y+5, r22	; 0x05
    3924:	7e 83       	std	Y+6, r23	; 0x06
				{
					yIntegralGain = val;
    3926:	29 81       	ldd	r18, Y+1	; 0x01
    3928:	3a 81       	ldd	r19, Y+2	; 0x02
    392a:	8b 81       	ldd	r24, Y+3	; 0x03
    392c:	9c 81       	ldd	r25, Y+4	; 0x04
    392e:	ad 81       	ldd	r26, Y+5	; 0x05
    3930:	be 81       	ldd	r27, Y+6	; 0x06
    3932:	f9 01       	movw	r30, r18
    3934:	82 a7       	std	Z+42, r24	; 0x2a
    3936:	93 a7       	std	Z+43, r25	; 0x2b
    3938:	a4 a7       	std	Z+44, r26	; 0x2c
    393a:	b5 a7       	std	Z+45, r27	; 0x2d
				}
    393c:	26 96       	adiw	r28, 0x06	; 6
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	08 95       	ret

0000394e <_ZN10helicopter10controller13PIDController18setYDerivativeGainEf>:
				
				void setYDerivativeGain(float val)
    394e:	cf 93       	push	r28
    3950:	df 93       	push	r29
    3952:	00 d0       	rcall	.+0      	; 0x3954 <_ZN10helicopter10controller13PIDController18setYDerivativeGainEf+0x6>
    3954:	00 d0       	rcall	.+0      	; 0x3956 <_ZN10helicopter10controller13PIDController18setYDerivativeGainEf+0x8>
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	9a 83       	std	Y+2, r25	; 0x02
    395c:	89 83       	std	Y+1, r24	; 0x01
    395e:	4b 83       	std	Y+3, r20	; 0x03
    3960:	5c 83       	std	Y+4, r21	; 0x04
    3962:	6d 83       	std	Y+5, r22	; 0x05
    3964:	7e 83       	std	Y+6, r23	; 0x06
				{
					yDerivativeGain = val;
    3966:	29 81       	ldd	r18, Y+1	; 0x01
    3968:	3a 81       	ldd	r19, Y+2	; 0x02
    396a:	8b 81       	ldd	r24, Y+3	; 0x03
    396c:	9c 81       	ldd	r25, Y+4	; 0x04
    396e:	ad 81       	ldd	r26, Y+5	; 0x05
    3970:	be 81       	ldd	r27, Y+6	; 0x06
    3972:	f9 01       	movw	r30, r18
    3974:	86 a7       	std	Z+46, r24	; 0x2e
    3976:	97 a7       	std	Z+47, r25	; 0x2f
    3978:	a0 ab       	std	Z+48, r26	; 0x30
    397a:	b1 ab       	std	Z+49, r27	; 0x31
				}
    397c:	26 96       	adiw	r28, 0x06	; 6
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	df 91       	pop	r29
    398a:	cf 91       	pop	r28
    398c:	08 95       	ret

0000398e <_ZN10helicopter10controller13PIDController20setYProportionalGainEf>:
				
				void setYProportionalGain(float val)
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	00 d0       	rcall	.+0      	; 0x3994 <_ZN10helicopter10controller13PIDController20setYProportionalGainEf+0x6>
    3994:	00 d0       	rcall	.+0      	; 0x3996 <_ZN10helicopter10controller13PIDController20setYProportionalGainEf+0x8>
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	9a 83       	std	Y+2, r25	; 0x02
    399c:	89 83       	std	Y+1, r24	; 0x01
    399e:	4b 83       	std	Y+3, r20	; 0x03
    39a0:	5c 83       	std	Y+4, r21	; 0x04
    39a2:	6d 83       	std	Y+5, r22	; 0x05
    39a4:	7e 83       	std	Y+6, r23	; 0x06
				{
					yProportionalGain = val;
    39a6:	29 81       	ldd	r18, Y+1	; 0x01
    39a8:	3a 81       	ldd	r19, Y+2	; 0x02
    39aa:	8b 81       	ldd	r24, Y+3	; 0x03
    39ac:	9c 81       	ldd	r25, Y+4	; 0x04
    39ae:	ad 81       	ldd	r26, Y+5	; 0x05
    39b0:	be 81       	ldd	r27, Y+6	; 0x06
    39b2:	f9 01       	movw	r30, r18
    39b4:	82 ab       	std	Z+50, r24	; 0x32
    39b6:	93 ab       	std	Z+51, r25	; 0x33
    39b8:	a4 ab       	std	Z+52, r26	; 0x34
    39ba:	b5 ab       	std	Z+53, r27	; 0x35
				}
    39bc:	26 96       	adiw	r28, 0x06	; 6
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	08 95       	ret

000039ce <_ZN10helicopter10controller13PIDController18setYAntiWindupGainEf>:
				
				void setYAntiWindupGain(float val)
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	00 d0       	rcall	.+0      	; 0x39d4 <_ZN10helicopter10controller13PIDController18setYAntiWindupGainEf+0x6>
    39d4:	00 d0       	rcall	.+0      	; 0x39d6 <_ZN10helicopter10controller13PIDController18setYAntiWindupGainEf+0x8>
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
    39da:	9a 83       	std	Y+2, r25	; 0x02
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	4b 83       	std	Y+3, r20	; 0x03
    39e0:	5c 83       	std	Y+4, r21	; 0x04
    39e2:	6d 83       	std	Y+5, r22	; 0x05
    39e4:	7e 83       	std	Y+6, r23	; 0x06
				{
					yAntiWindupGain = val;
    39e6:	29 81       	ldd	r18, Y+1	; 0x01
    39e8:	3a 81       	ldd	r19, Y+2	; 0x02
    39ea:	8b 81       	ldd	r24, Y+3	; 0x03
    39ec:	9c 81       	ldd	r25, Y+4	; 0x04
    39ee:	ad 81       	ldd	r26, Y+5	; 0x05
    39f0:	be 81       	ldd	r27, Y+6	; 0x06
    39f2:	f9 01       	movw	r30, r18
    39f4:	86 ab       	std	Z+54, r24	; 0x36
    39f6:	97 ab       	std	Z+55, r25	; 0x37
    39f8:	a0 af       	std	Z+56, r26	; 0x38
    39fa:	b1 af       	std	Z+57, r27	; 0x39
				}
    39fc:	26 96       	adiw	r28, 0x06	; 6
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	08 95       	ret

00003a0e <_ZN10helicopter10controller13PIDController23setLateralInnerLoopGainEf>:
				
				void setLateralInnerLoopGain(float val)
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <_ZN10helicopter10controller13PIDController23setLateralInnerLoopGainEf+0x6>
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <_ZN10helicopter10controller13PIDController23setLateralInnerLoopGainEf+0x8>
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	9a 83       	std	Y+2, r25	; 0x02
    3a1c:	89 83       	std	Y+1, r24	; 0x01
    3a1e:	4b 83       	std	Y+3, r20	; 0x03
    3a20:	5c 83       	std	Y+4, r21	; 0x04
    3a22:	6d 83       	std	Y+5, r22	; 0x05
    3a24:	7e 83       	std	Y+6, r23	; 0x06
				{
					lateralInnerLoopGain = val;
    3a26:	29 81       	ldd	r18, Y+1	; 0x01
    3a28:	3a 81       	ldd	r19, Y+2	; 0x02
    3a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2e:	ad 81       	ldd	r26, Y+5	; 0x05
    3a30:	be 81       	ldd	r27, Y+6	; 0x06
    3a32:	f9 01       	movw	r30, r18
    3a34:	82 af       	std	Z+58, r24	; 0x3a
    3a36:	93 af       	std	Z+59, r25	; 0x3b
    3a38:	a4 af       	std	Z+60, r26	; 0x3c
    3a3a:	b5 af       	std	Z+61, r27	; 0x3d
				}
    3a3c:	26 96       	adiw	r28, 0x06	; 6
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	08 95       	ret

00003a4e <_ZN10helicopter10controller13PIDController26setRollAngularVelocityGainEf>:
				
				void setRollAngularVelocityGain(float val)
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	00 d0       	rcall	.+0      	; 0x3a54 <_ZN10helicopter10controller13PIDController26setRollAngularVelocityGainEf+0x6>
    3a54:	00 d0       	rcall	.+0      	; 0x3a56 <_ZN10helicopter10controller13PIDController26setRollAngularVelocityGainEf+0x8>
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	9a 83       	std	Y+2, r25	; 0x02
    3a5c:	89 83       	std	Y+1, r24	; 0x01
    3a5e:	4b 83       	std	Y+3, r20	; 0x03
    3a60:	5c 83       	std	Y+4, r21	; 0x04
    3a62:	6d 83       	std	Y+5, r22	; 0x05
    3a64:	7e 83       	std	Y+6, r23	; 0x06
				{
					rollAngularVelocityGain = val;
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6a:	9c 01       	movw	r18, r24
    3a6c:	22 5c       	subi	r18, 0xC2	; 194
    3a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	9c 81       	ldd	r25, Y+4	; 0x04
    3a74:	ad 81       	ldd	r26, Y+5	; 0x05
    3a76:	be 81       	ldd	r27, Y+6	; 0x06
    3a78:	f9 01       	movw	r30, r18
    3a7a:	80 83       	st	Z, r24
    3a7c:	91 83       	std	Z+1, r25	; 0x01
    3a7e:	a2 83       	std	Z+2, r26	; 0x02
    3a80:	b3 83       	std	Z+3, r27	; 0x03
				}
    3a82:	26 96       	adiw	r28, 0x06	; 6
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	cd bf       	out	0x3d, r28	; 61
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	08 95       	ret

00003a94 <_ZN10helicopter10controller13PIDController30setMinLateralServoControlValueEf>:
				
				void setMinLateralServoControlValue(float val)
    3a94:	cf 93       	push	r28
    3a96:	df 93       	push	r29
    3a98:	00 d0       	rcall	.+0      	; 0x3a9a <_ZN10helicopter10controller13PIDController30setMinLateralServoControlValueEf+0x6>
    3a9a:	00 d0       	rcall	.+0      	; 0x3a9c <_ZN10helicopter10controller13PIDController30setMinLateralServoControlValueEf+0x8>
    3a9c:	cd b7       	in	r28, 0x3d	; 61
    3a9e:	de b7       	in	r29, 0x3e	; 62
    3aa0:	9a 83       	std	Y+2, r25	; 0x02
    3aa2:	89 83       	std	Y+1, r24	; 0x01
    3aa4:	4b 83       	std	Y+3, r20	; 0x03
    3aa6:	5c 83       	std	Y+4, r21	; 0x04
    3aa8:	6d 83       	std	Y+5, r22	; 0x05
    3aaa:	7e 83       	std	Y+6, r23	; 0x06
				{
					minLateralServoControlValue = val;
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	9c 01       	movw	r18, r24
    3ab2:	2e 59       	subi	r18, 0x9E	; 158
    3ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	ad 81       	ldd	r26, Y+5	; 0x05
    3abc:	be 81       	ldd	r27, Y+6	; 0x06
    3abe:	f9 01       	movw	r30, r18
    3ac0:	80 83       	st	Z, r24
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	a2 83       	std	Z+2, r26	; 0x02
    3ac6:	b3 83       	std	Z+3, r27	; 0x03
				}
    3ac8:	26 96       	adiw	r28, 0x06	; 6
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	08 95       	ret

00003ada <_ZN10helicopter10controller13PIDController30setMaxLateralServoControlValueEf>:
				
				void setMaxLateralServoControlValue(float val)
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <_ZN10helicopter10controller13PIDController30setMaxLateralServoControlValueEf+0x6>
    3ae0:	00 d0       	rcall	.+0      	; 0x3ae2 <_ZN10helicopter10controller13PIDController30setMaxLateralServoControlValueEf+0x8>
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
    3ae6:	9a 83       	std	Y+2, r25	; 0x02
    3ae8:	89 83       	std	Y+1, r24	; 0x01
    3aea:	4b 83       	std	Y+3, r20	; 0x03
    3aec:	5c 83       	std	Y+4, r21	; 0x04
    3aee:	6d 83       	std	Y+5, r22	; 0x05
    3af0:	7e 83       	std	Y+6, r23	; 0x06
				{
					maxLateralServoControlValue = val;
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	9c 01       	movw	r18, r24
    3af8:	2a 59       	subi	r18, 0x9A	; 154
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
    3afc:	8b 81       	ldd	r24, Y+3	; 0x03
    3afe:	9c 81       	ldd	r25, Y+4	; 0x04
    3b00:	ad 81       	ldd	r26, Y+5	; 0x05
    3b02:	be 81       	ldd	r27, Y+6	; 0x06
    3b04:	f9 01       	movw	r30, r18
    3b06:	80 83       	st	Z, r24
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	a2 83       	std	Z+2, r26	; 0x02
    3b0c:	b3 83       	std	Z+3, r27	; 0x03
				}
    3b0e:	26 96       	adiw	r28, 0x06	; 6
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	08 95       	ret

00003b20 <_ZN10helicopter10controller13PIDController32setMinMainRotorServoControlValueEf>:
				void setZAntiWindupGain(float val)
				{
					zAntiWindupGain = val;
				}
				
				void setMinMainRotorServoControlValue(float val)
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	00 d0       	rcall	.+0      	; 0x3b26 <_ZN10helicopter10controller13PIDController32setMinMainRotorServoControlValueEf+0x6>
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <_ZN10helicopter10controller13PIDController32setMinMainRotorServoControlValueEf+0x8>
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	9a 83       	std	Y+2, r25	; 0x02
    3b2e:	89 83       	std	Y+1, r24	; 0x01
    3b30:	4b 83       	std	Y+3, r20	; 0x03
    3b32:	5c 83       	std	Y+4, r21	; 0x04
    3b34:	6d 83       	std	Y+5, r22	; 0x05
    3b36:	7e 83       	std	Y+6, r23	; 0x06
				{
					minMainRotorServoControlValue = val;
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3c:	9c 01       	movw	r18, r24
    3b3e:	26 59       	subi	r18, 0x96	; 150
    3b40:	3f 4f       	sbci	r19, 0xFF	; 255
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	9c 81       	ldd	r25, Y+4	; 0x04
    3b46:	ad 81       	ldd	r26, Y+5	; 0x05
    3b48:	be 81       	ldd	r27, Y+6	; 0x06
    3b4a:	f9 01       	movw	r30, r18
    3b4c:	80 83       	st	Z, r24
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	a2 83       	std	Z+2, r26	; 0x02
    3b52:	b3 83       	std	Z+3, r27	; 0x03
				}
    3b54:	26 96       	adiw	r28, 0x06	; 6
    3b56:	0f b6       	in	r0, 0x3f	; 63
    3b58:	f8 94       	cli
    3b5a:	de bf       	out	0x3e, r29	; 62
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	cd bf       	out	0x3d, r28	; 61
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <_ZN10helicopter10controller13PIDController32setMaxMainRotorServoControlValueEf>:
				
				void setMaxMainRotorServoControlValue(float val)
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	00 d0       	rcall	.+0      	; 0x3b6c <_ZN10helicopter10controller13PIDController32setMaxMainRotorServoControlValueEf+0x6>
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <_ZN10helicopter10controller13PIDController32setMaxMainRotorServoControlValueEf+0x8>
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	9a 83       	std	Y+2, r25	; 0x02
    3b74:	89 83       	std	Y+1, r24	; 0x01
    3b76:	4b 83       	std	Y+3, r20	; 0x03
    3b78:	5c 83       	std	Y+4, r21	; 0x04
    3b7a:	6d 83       	std	Y+5, r22	; 0x05
    3b7c:	7e 83       	std	Y+6, r23	; 0x06
				{
					maxMainRotorServoControlValue = val;
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	9a 81       	ldd	r25, Y+2	; 0x02
    3b82:	9c 01       	movw	r18, r24
    3b84:	22 59       	subi	r18, 0x92	; 146
    3b86:	3f 4f       	sbci	r19, 0xFF	; 255
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8c:	ad 81       	ldd	r26, Y+5	; 0x05
    3b8e:	be 81       	ldd	r27, Y+6	; 0x06
    3b90:	f9 01       	movw	r30, r18
    3b92:	80 83       	st	Z, r24
    3b94:	91 83       	std	Z+1, r25	; 0x01
    3b96:	a2 83       	std	Z+2, r26	; 0x02
    3b98:	b3 83       	std	Z+3, r27	; 0x03
				}
    3b9a:	26 96       	adiw	r28, 0x06	; 6
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	de bf       	out	0x3e, r29	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	df 91       	pop	r29
    3ba8:	cf 91       	pop	r28
    3baa:	08 95       	ret

00003bac <_ZN10helicopter10controller13PIDController25setMaxRollSetpointDegreesEf>:


				void setMaxRollSetpointDegrees(float val)
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <_ZN10helicopter10controller13PIDController25setMaxRollSetpointDegreesEf+0x6>
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <_ZN10helicopter10controller13PIDController25setMaxRollSetpointDegreesEf+0x8>
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	9a 83       	std	Y+2, r25	; 0x02
    3bba:	89 83       	std	Y+1, r24	; 0x01
    3bbc:	4b 83       	std	Y+3, r20	; 0x03
    3bbe:	5c 83       	std	Y+4, r21	; 0x04
    3bc0:	6d 83       	std	Y+5, r22	; 0x05
    3bc2:	7e 83       	std	Y+6, r23	; 0x06
				{
					maxRollSetpointDegrees = val;
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc8:	9c 01       	movw	r18, r24
    3bca:	22 58       	subi	r18, 0x82	; 130
    3bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd2:	ad 81       	ldd	r26, Y+5	; 0x05
    3bd4:	be 81       	ldd	r27, Y+6	; 0x06
    3bd6:	f9 01       	movw	r30, r18
    3bd8:	80 83       	st	Z, r24
    3bda:	91 83       	std	Z+1, r25	; 0x01
    3bdc:	a2 83       	std	Z+2, r26	; 0x02
    3bde:	b3 83       	std	Z+3, r27	; 0x03
				}
    3be0:	26 96       	adiw	r28, 0x06	; 6
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	08 95       	ret

00003bf2 <_ZN10helicopter10controller13PIDController25setMinRollSetpointDegreesEf>:
				
				void setMinRollSetpointDegrees(float val)
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29
    3bf6:	00 d0       	rcall	.+0      	; 0x3bf8 <_ZN10helicopter10controller13PIDController25setMinRollSetpointDegreesEf+0x6>
    3bf8:	00 d0       	rcall	.+0      	; 0x3bfa <_ZN10helicopter10controller13PIDController25setMinRollSetpointDegreesEf+0x8>
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
    3bfe:	9a 83       	std	Y+2, r25	; 0x02
    3c00:	89 83       	std	Y+1, r24	; 0x01
    3c02:	4b 83       	std	Y+3, r20	; 0x03
    3c04:	5c 83       	std	Y+4, r21	; 0x04
    3c06:	6d 83       	std	Y+5, r22	; 0x05
    3c08:	7e 83       	std	Y+6, r23	; 0x06
				{
					minRollSetpointDegrees = val;
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	9c 01       	movw	r18, r24
    3c10:	26 58       	subi	r18, 0x86	; 134
    3c12:	3f 4f       	sbci	r19, 0xFF	; 255
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	9c 81       	ldd	r25, Y+4	; 0x04
    3c18:	ad 81       	ldd	r26, Y+5	; 0x05
    3c1a:	be 81       	ldd	r27, Y+6	; 0x06
    3c1c:	f9 01       	movw	r30, r18
    3c1e:	80 83       	st	Z, r24
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	a2 83       	std	Z+2, r26	; 0x02
    3c24:	b3 83       	std	Z+3, r27	; 0x03
				}
    3c26:	26 96       	adiw	r28, 0x06	; 6
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	df 91       	pop	r29
    3c34:	cf 91       	pop	r28
    3c36:	08 95       	ret

00003c38 <_ZN10helicopter10controller13PIDController26setMaxPitchSetpointDegreesEf>:
				
				void setMaxPitchSetpointDegrees(float val)
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	00 d0       	rcall	.+0      	; 0x3c3e <_ZN10helicopter10controller13PIDController26setMaxPitchSetpointDegreesEf+0x6>
    3c3e:	00 d0       	rcall	.+0      	; 0x3c40 <_ZN10helicopter10controller13PIDController26setMaxPitchSetpointDegreesEf+0x8>
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    3c44:	9a 83       	std	Y+2, r25	; 0x02
    3c46:	89 83       	std	Y+1, r24	; 0x01
    3c48:	4b 83       	std	Y+3, r20	; 0x03
    3c4a:	5c 83       	std	Y+4, r21	; 0x04
    3c4c:	6d 83       	std	Y+5, r22	; 0x05
    3c4e:	7e 83       	std	Y+6, r23	; 0x06
				{
					maxPitchSetpointDegrees = val;
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	9a 81       	ldd	r25, Y+2	; 0x02
    3c54:	9c 01       	movw	r18, r24
    3c56:	2a 58       	subi	r18, 0x8A	; 138
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5e:	ad 81       	ldd	r26, Y+5	; 0x05
    3c60:	be 81       	ldd	r27, Y+6	; 0x06
    3c62:	f9 01       	movw	r30, r18
    3c64:	80 83       	st	Z, r24
    3c66:	91 83       	std	Z+1, r25	; 0x01
    3c68:	a2 83       	std	Z+2, r26	; 0x02
    3c6a:	b3 83       	std	Z+3, r27	; 0x03
				}
    3c6c:	26 96       	adiw	r28, 0x06	; 6
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	f8 94       	cli
    3c72:	de bf       	out	0x3e, r29	; 62
    3c74:	0f be       	out	0x3f, r0	; 63
    3c76:	cd bf       	out	0x3d, r28	; 61
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	08 95       	ret

00003c7e <_ZN10helicopter10controller13PIDController26setMinPitchSetpointDegreesEf>:
				
				void setMinPitchSetpointDegrees(float val)
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	00 d0       	rcall	.+0      	; 0x3c84 <_ZN10helicopter10controller13PIDController26setMinPitchSetpointDegreesEf+0x6>
    3c84:	00 d0       	rcall	.+0      	; 0x3c86 <_ZN10helicopter10controller13PIDController26setMinPitchSetpointDegreesEf+0x8>
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    3c8e:	4b 83       	std	Y+3, r20	; 0x03
    3c90:	5c 83       	std	Y+4, r21	; 0x04
    3c92:	6d 83       	std	Y+5, r22	; 0x05
    3c94:	7e 83       	std	Y+6, r23	; 0x06
				{	
					minPitchSetpointDegrees = val;
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9a:	9c 01       	movw	r18, r24
    3c9c:	2e 58       	subi	r18, 0x8E	; 142
    3c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca4:	ad 81       	ldd	r26, Y+5	; 0x05
    3ca6:	be 81       	ldd	r27, Y+6	; 0x06
    3ca8:	f9 01       	movw	r30, r18
    3caa:	80 83       	st	Z, r24
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	a2 83       	std	Z+2, r26	; 0x02
    3cb0:	b3 83       	std	Z+3, r27	; 0x03
				}				
    3cb2:	26 96       	adiw	r28, 0x06	; 6
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	de bf       	out	0x3e, r29	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	08 95       	ret

00003cc4 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEf>:
				
				
				/**
				 * Gain value applied to the yaw proportional error
				 */
				void setYawProportionalGain(float yawProportionalGain)
    3cc4:	cf 93       	push	r28
    3cc6:	df 93       	push	r29
    3cc8:	00 d0       	rcall	.+0      	; 0x3cca <_ZN10helicopter10controller13PIDController22setYawProportionalGainEf+0x6>
    3cca:	00 d0       	rcall	.+0      	; 0x3ccc <_ZN10helicopter10controller13PIDController22setYawProportionalGainEf+0x8>
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
    3cd0:	9a 83       	std	Y+2, r25	; 0x02
    3cd2:	89 83       	std	Y+1, r24	; 0x01
    3cd4:	4b 83       	std	Y+3, r20	; 0x03
    3cd6:	5c 83       	std	Y+4, r21	; 0x04
    3cd8:	6d 83       	std	Y+5, r22	; 0x05
    3cda:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawProportionalGain = yawProportionalGain;
    3cdc:	29 81       	ldd	r18, Y+1	; 0x01
    3cde:	3a 81       	ldd	r19, Y+2	; 0x02
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	ad 81       	ldd	r26, Y+5	; 0x05
    3ce6:	be 81       	ldd	r27, Y+6	; 0x06
    3ce8:	f9 01       	movw	r30, r18
    3cea:	82 87       	std	Z+10, r24	; 0x0a
    3cec:	93 87       	std	Z+11, r25	; 0x0b
    3cee:	a4 87       	std	Z+12, r26	; 0x0c
    3cf0:	b5 87       	std	Z+13, r27	; 0x0d
				}
    3cf2:	26 96       	adiw	r28, 0x06	; 6
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	08 95       	ret

00003d04 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEf>:
				
				/**
				 * Gain value applied to the yaw integral
				 */
				void setYawIntegralGain(float yawIntegralGain)
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <_ZN10helicopter10controller13PIDController18setYawIntegralGainEf+0x6>
    3d0a:	00 d0       	rcall	.+0      	; 0x3d0c <_ZN10helicopter10controller13PIDController18setYawIntegralGainEf+0x8>
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
    3d10:	9a 83       	std	Y+2, r25	; 0x02
    3d12:	89 83       	std	Y+1, r24	; 0x01
    3d14:	4b 83       	std	Y+3, r20	; 0x03
    3d16:	5c 83       	std	Y+4, r21	; 0x04
    3d18:	6d 83       	std	Y+5, r22	; 0x05
    3d1a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawIntegralGain = yawIntegralGain;
    3d1c:	29 81       	ldd	r18, Y+1	; 0x01
    3d1e:	3a 81       	ldd	r19, Y+2	; 0x02
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	9c 81       	ldd	r25, Y+4	; 0x04
    3d24:	ad 81       	ldd	r26, Y+5	; 0x05
    3d26:	be 81       	ldd	r27, Y+6	; 0x06
    3d28:	f9 01       	movw	r30, r18
    3d2a:	82 83       	std	Z+2, r24	; 0x02
    3d2c:	93 83       	std	Z+3, r25	; 0x03
    3d2e:	a4 83       	std	Z+4, r26	; 0x04
    3d30:	b5 83       	std	Z+5, r27	; 0x05
				}
    3d32:	26 96       	adiw	r28, 0x06	; 6
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	df 91       	pop	r29
    3d40:	cf 91       	pop	r28
    3d42:	08 95       	ret

00003d44 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEf>:
				
				/**
				 * Gain value applied to the derivative
				 */
				void setYawDerivativeGain(float yawDerivativeGain)
    3d44:	cf 93       	push	r28
    3d46:	df 93       	push	r29
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEf+0x6>
    3d4a:	00 d0       	rcall	.+0      	; 0x3d4c <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEf+0x8>
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01
    3d54:	4b 83       	std	Y+3, r20	; 0x03
    3d56:	5c 83       	std	Y+4, r21	; 0x04
    3d58:	6d 83       	std	Y+5, r22	; 0x05
    3d5a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawDerivativeGain = yawDerivativeGain;
    3d5c:	29 81       	ldd	r18, Y+1	; 0x01
    3d5e:	3a 81       	ldd	r19, Y+2	; 0x02
    3d60:	8b 81       	ldd	r24, Y+3	; 0x03
    3d62:	9c 81       	ldd	r25, Y+4	; 0x04
    3d64:	ad 81       	ldd	r26, Y+5	; 0x05
    3d66:	be 81       	ldd	r27, Y+6	; 0x06
    3d68:	f9 01       	movw	r30, r18
    3d6a:	86 83       	std	Z+6, r24	; 0x06
    3d6c:	97 83       	std	Z+7, r25	; 0x07
    3d6e:	a0 87       	std	Z+8, r26	; 0x08
    3d70:	b1 87       	std	Z+9, r27	; 0x09
				}
    3d72:	26 96       	adiw	r28, 0x06	; 6
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	f8 94       	cli
    3d78:	de bf       	out	0x3e, r29	; 62
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	cd bf       	out	0x3d, r28	; 61
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	08 95       	ret

00003d84 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEf>:
				
				/**
				 * The number of seconds between pid controller updates. This number
				 * should generally be less than 1. Like .05 for a 20 hz rate.
				 */
				void setIntervalPeriodSecs(float intervalPeriodSecs)
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	00 d0       	rcall	.+0      	; 0x3d8a <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEf+0x6>
    3d8a:	00 d0       	rcall	.+0      	; 0x3d8c <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEf+0x8>
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	4b 83       	std	Y+3, r20	; 0x03
    3d96:	5c 83       	std	Y+4, r21	; 0x04
    3d98:	6d 83       	std	Y+5, r22	; 0x05
    3d9a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->intervalPeriodSecs = intervalPeriodSecs;
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3da0:	9c 01       	movw	r18, r24
    3da2:	2e 57       	subi	r18, 0x7E	; 126
    3da4:	3f 4f       	sbci	r19, 0xFF	; 255
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	ad 81       	ldd	r26, Y+5	; 0x05
    3dac:	be 81       	ldd	r27, Y+6	; 0x06
    3dae:	f9 01       	movw	r30, r18
    3db0:	80 83       	st	Z, r24
    3db2:	91 83       	std	Z+1, r25	; 0x01
    3db4:	a2 83       	std	Z+2, r26	; 0x02
    3db6:	b3 83       	std	Z+3, r27	; 0x03
				}
    3db8:	26 96       	adiw	r28, 0x06	; 6
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	08 95       	ret

00003dca <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEf>:
				 * keeps increasing despite the helicopter already at the maximum possible control values.
				 * @param yawAntiWindupGain The gain value which represents how fast the integral will
				 * go back to 0 when the servos are saturated.
				 * Some simple rule that have been suggested for the tracking time are ~ Tt = TiTd and Tt = (Ti + Td)/2.
				 */
				void setYawAntiWindupGain(float yawAntiWindupGain)
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEf+0x6>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEf+0x8>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    3dda:	4b 83       	std	Y+3, r20	; 0x03
    3ddc:	5c 83       	std	Y+4, r21	; 0x04
    3dde:	6d 83       	std	Y+5, r22	; 0x05
    3de0:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawAntiWindupGain = yawAntiWindupGain;
    3de2:	29 81       	ldd	r18, Y+1	; 0x01
    3de4:	3a 81       	ldd	r19, Y+2	; 0x02
    3de6:	8b 81       	ldd	r24, Y+3	; 0x03
    3de8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dea:	ad 81       	ldd	r26, Y+5	; 0x05
    3dec:	be 81       	ldd	r27, Y+6	; 0x06
    3dee:	f9 01       	movw	r30, r18
    3df0:	86 87       	std	Z+14, r24	; 0x0e
    3df2:	97 87       	std	Z+15, r25	; 0x0f
    3df4:	a0 8b       	std	Z+16, r26	; 0x10
    3df6:	b1 8b       	std	Z+17, r27	; 0x11
				}
    3df8:	26 96       	adiw	r28, 0x06	; 6
    3dfa:	0f b6       	in	r0, 0x3f	; 63
    3dfc:	f8 94       	cli
    3dfe:	de bf       	out	0x3e, r29	; 62
    3e00:	0f be       	out	0x3f, r0	; 63
    3e02:	cd bf       	out	0x3d, r28	; 61
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	08 95       	ret

00003e0a <_ZN10helicopter10controller13PIDController21setMinYawServoControlEf>:
				/**
				 * The minimum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no smaller than the controlMinValue (e.g. no less than -1)
				 */
				void setMinYawServoControl(float minYawServoControlValue)
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	00 d0       	rcall	.+0      	; 0x3e10 <_ZN10helicopter10controller13PIDController21setMinYawServoControlEf+0x6>
    3e10:	00 d0       	rcall	.+0      	; 0x3e12 <_ZN10helicopter10controller13PIDController21setMinYawServoControlEf+0x8>
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	89 83       	std	Y+1, r24	; 0x01
    3e1a:	4b 83       	std	Y+3, r20	; 0x03
    3e1c:	5c 83       	std	Y+4, r21	; 0x04
    3e1e:	6d 83       	std	Y+5, r22	; 0x05
    3e20:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->minYawServoControlValue = minYawServoControlValue;
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	9a 81       	ldd	r25, Y+2	; 0x02
    3e26:	9c 01       	movw	r18, r24
    3e28:	2e 5a       	subi	r18, 0xAE	; 174
    3e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e30:	ad 81       	ldd	r26, Y+5	; 0x05
    3e32:	be 81       	ldd	r27, Y+6	; 0x06
    3e34:	f9 01       	movw	r30, r18
    3e36:	80 83       	st	Z, r24
    3e38:	91 83       	std	Z+1, r25	; 0x01
    3e3a:	a2 83       	std	Z+2, r26	; 0x02
    3e3c:	b3 83       	std	Z+3, r27	; 0x03
				}
    3e3e:	26 96       	adiw	r28, 0x06	; 6
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	f8 94       	cli
    3e44:	de bf       	out	0x3e, r29	; 62
    3e46:	0f be       	out	0x3f, r0	; 63
    3e48:	cd bf       	out	0x3d, r28	; 61
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	08 95       	ret

00003e50 <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEf>:
				/**
				 * The maximum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no larger than the controlMaxValue (e.g. no greater than 1)
				 */
				void setMaxYawServoControl(float maxYawServoControlValue)
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEf+0x6>
    3e56:	00 d0       	rcall	.+0      	; 0x3e58 <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEf+0x8>
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
    3e5c:	9a 83       	std	Y+2, r25	; 0x02
    3e5e:	89 83       	std	Y+1, r24	; 0x01
    3e60:	4b 83       	std	Y+3, r20	; 0x03
    3e62:	5c 83       	std	Y+4, r21	; 0x04
    3e64:	6d 83       	std	Y+5, r22	; 0x05
    3e66:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->maxYawServoControlValue = maxYawServoControlValue;
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6c:	9c 01       	movw	r18, r24
    3e6e:	2a 5a       	subi	r18, 0xAA	; 170
    3e70:	3f 4f       	sbci	r19, 0xFF	; 255
    3e72:	8b 81       	ldd	r24, Y+3	; 0x03
    3e74:	9c 81       	ldd	r25, Y+4	; 0x04
    3e76:	ad 81       	ldd	r26, Y+5	; 0x05
    3e78:	be 81       	ldd	r27, Y+6	; 0x06
    3e7a:	f9 01       	movw	r30, r18
    3e7c:	80 83       	st	Z, r24
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	a2 83       	std	Z+2, r26	; 0x02
    3e82:	b3 83       	std	Z+3, r27	; 0x03
				}
    3e84:	26 96       	adiw	r28, 0x06	; 6
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	f8 94       	cli
    3e8a:	de bf       	out	0x3e, r29	; 62
    3e8c:	0f be       	out	0x3f, r0	; 63
    3e8e:	cd bf       	out	0x3d, r28	; 61
    3e90:	df 91       	pop	r29
    3e92:	cf 91       	pop	r28
    3e94:	08 95       	ret

00003e96 <_ZN10helicopter10controller13PIDController18setControlMaxValueEf>:
				
				/**
				 * This is the maximum possible output value for a control signal.
				 * Generally, this should be set to 1.
				 */
				void setControlMaxValue(float controlMaxValue)
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	00 d0       	rcall	.+0      	; 0x3e9c <_ZN10helicopter10controller13PIDController18setControlMaxValueEf+0x6>
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <_ZN10helicopter10controller13PIDController18setControlMaxValueEf+0x8>
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	9a 83       	std	Y+2, r25	; 0x02
    3ea4:	89 83       	std	Y+1, r24	; 0x01
    3ea6:	4b 83       	std	Y+3, r20	; 0x03
    3ea8:	5c 83       	std	Y+4, r21	; 0x04
    3eaa:	6d 83       	std	Y+5, r22	; 0x05
    3eac:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMaxValue = controlMaxValue;
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb2:	9c 01       	movw	r18, r24
    3eb4:	2a 57       	subi	r18, 0x7A	; 122
    3eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eba:	9c 81       	ldd	r25, Y+4	; 0x04
    3ebc:	ad 81       	ldd	r26, Y+5	; 0x05
    3ebe:	be 81       	ldd	r27, Y+6	; 0x06
    3ec0:	f9 01       	movw	r30, r18
    3ec2:	80 83       	st	Z, r24
    3ec4:	91 83       	std	Z+1, r25	; 0x01
    3ec6:	a2 83       	std	Z+2, r26	; 0x02
    3ec8:	b3 83       	std	Z+3, r27	; 0x03
				}
    3eca:	26 96       	adiw	r28, 0x06	; 6
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	08 95       	ret

00003edc <_ZN10helicopter10controller13PIDController18setControlMinValueEf>:
				
				/**
				 * This is the minimum possible value for a control signal.
				 * Generally, this should be set to -1.
				 */
				void setControlMinValue(float controlMinValue)
    3edc:	cf 93       	push	r28
    3ede:	df 93       	push	r29
    3ee0:	00 d0       	rcall	.+0      	; 0x3ee2 <_ZN10helicopter10controller13PIDController18setControlMinValueEf+0x6>
    3ee2:	00 d0       	rcall	.+0      	; 0x3ee4 <_ZN10helicopter10controller13PIDController18setControlMinValueEf+0x8>
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	9a 83       	std	Y+2, r25	; 0x02
    3eea:	89 83       	std	Y+1, r24	; 0x01
    3eec:	4b 83       	std	Y+3, r20	; 0x03
    3eee:	5c 83       	std	Y+4, r21	; 0x04
    3ef0:	6d 83       	std	Y+5, r22	; 0x05
    3ef2:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMinValue = controlMinValue;
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	9c 01       	movw	r18, r24
    3efa:	26 57       	subi	r18, 0x76	; 118
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	8b 81       	ldd	r24, Y+3	; 0x03
    3f00:	9c 81       	ldd	r25, Y+4	; 0x04
    3f02:	ad 81       	ldd	r26, Y+5	; 0x05
    3f04:	be 81       	ldd	r27, Y+6	; 0x06
    3f06:	f9 01       	movw	r30, r18
    3f08:	80 83       	st	Z, r24
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	a2 83       	std	Z+2, r26	; 0x02
    3f0e:	b3 83       	std	Z+3, r27	; 0x03
				}			
    3f10:	26 96       	adiw	r28, 0x06	; 6
    3f12:	0f b6       	in	r0, 0x3f	; 63
    3f14:	f8 94       	cli
    3f16:	de bf       	out	0x3e, r29	; 62
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	cd bf       	out	0x3d, r28	; 61
    3f1c:	df 91       	pop	r29
    3f1e:	cf 91       	pop	r28
    3f20:	08 95       	ret

00003f22 <_ZN10helicopter10interfaces24RadioControllerInterface14SetSystemModelEPNS_5model11SystemModelE>:
					
				int ServoChannelIndex() const { return servoChannelIndex; }
				void ServoChannelIndex(int val) { servoChannelIndex = val; }
					
				SystemModel * GetSystemModel() const { return systemModel; }
				void SetSystemModel(SystemModel *val) { systemModel = val; }		
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	00 d0       	rcall	.+0      	; 0x3f28 <_ZN10helicopter10interfaces24RadioControllerInterface14SetSystemModelEPNS_5model11SystemModelE+0x6>
    3f28:	1f 92       	push	r1
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	9a 83       	std	Y+2, r25	; 0x02
    3f30:	89 83       	std	Y+1, r24	; 0x01
    3f32:	7c 83       	std	Y+4, r23	; 0x04
    3f34:	6b 83       	std	Y+3, r22	; 0x03
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    3f3c:	3c 81       	ldd	r19, Y+4	; 0x04
    3f3e:	fc 01       	movw	r30, r24
    3f40:	37 83       	std	Z+7, r19	; 0x07
    3f42:	26 83       	std	Z+6, r18	; 0x06
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	df 91       	pop	r29
    3f4e:	cf 91       	pop	r28
    3f50:	08 95       	ret

00003f52 <_ZN10helicopter7sensors9IMUSensorC1EPNS_7drivers9SPIDriverE>:
				/**
				 * Constructs the accel sensor.
				 * @param driver The SPI driver used to communicate with the
				 * MPU6000's accelerometer sensor via the SPI protocol.
				 */
				IMUSensor(SPIDriver *spiDriver): 
    3f52:	cf 92       	push	r12
    3f54:	df 92       	push	r13
    3f56:	ef 92       	push	r14
    3f58:	ff 92       	push	r15
    3f5a:	0f 93       	push	r16
    3f5c:	1f 93       	push	r17
    3f5e:	cf 93       	push	r28
    3f60:	df 93       	push	r29
    3f62:	00 d0       	rcall	.+0      	; 0x3f64 <_ZN10helicopter7sensors9IMUSensorC1EPNS_7drivers9SPIDriverE+0x12>
    3f64:	1f 92       	push	r1
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	9a 83       	std	Y+2, r25	; 0x02
    3f6c:	89 83       	std	Y+1, r24	; 0x01
    3f6e:	7c 83       	std	Y+4, r23	; 0x04
    3f70:	6b 83       	std	Y+3, r22	; 0x03
					rawGyroX(0),
					rawGyroY(0),
					rawGyroZ(0),
					frdAccX(0),
					frdAccY(0),
					frdAccZ(0)
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	9a 81       	ldd	r25, Y+2	; 0x02
    3f76:	2b 81       	ldd	r18, Y+3	; 0x03
    3f78:	3c 81       	ldd	r19, Y+4	; 0x04
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	35 a3       	std	Z+37, r19	; 0x25
    3f7e:	24 a3       	std	Z+36, r18	; 0x24
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	fc 01       	movw	r30, r24
    3f86:	17 a2       	std	Z+39, r1	; 0x27
    3f88:	16 a2       	std	Z+38, r1	; 0x26
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8e:	fc 01       	movw	r30, r24
    3f90:	11 a6       	std	Z+41, r1	; 0x29
    3f92:	10 a6       	std	Z+40, r1	; 0x28
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	9a 81       	ldd	r25, Y+2	; 0x02
    3f98:	fc 01       	movw	r30, r24
    3f9a:	13 a6       	std	Z+43, r1	; 0x2b
    3f9c:	12 a6       	std	Z+42, r1	; 0x2a
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	15 a6       	std	Z+45, r1	; 0x2d
    3fa6:	14 a6       	std	Z+44, r1	; 0x2c
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	9a 81       	ldd	r25, Y+2	; 0x02
    3fac:	fc 01       	movw	r30, r24
    3fae:	17 a6       	std	Z+47, r1	; 0x2f
    3fb0:	16 a6       	std	Z+46, r1	; 0x2e
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
    3fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	11 aa       	std	Z+49, r1	; 0x31
    3fba:	10 aa       	std	Z+48, r1	; 0x30
    3fbc:	89 81       	ldd	r24, Y+1	; 0x01
    3fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc0:	fc 01       	movw	r30, r24
    3fc2:	12 aa       	std	Z+50, r1	; 0x32
    3fc4:	13 aa       	std	Z+51, r1	; 0x33
    3fc6:	14 aa       	std	Z+52, r1	; 0x34
    3fc8:	15 aa       	std	Z+53, r1	; 0x35
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fce:	fc 01       	movw	r30, r24
    3fd0:	16 aa       	std	Z+54, r1	; 0x36
    3fd2:	17 aa       	std	Z+55, r1	; 0x37
    3fd4:	10 ae       	std	Z+56, r1	; 0x38
    3fd6:	11 ae       	std	Z+57, r1	; 0x39
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	fc 01       	movw	r30, r24
    3fde:	12 ae       	std	Z+58, r1	; 0x3a
    3fe0:	13 ae       	std	Z+59, r1	; 0x3b
    3fe2:	14 ae       	std	Z+60, r1	; 0x3c
    3fe4:	15 ae       	std	Z+61, r1	; 0x3d
					/**
					 * Create a rotation matrix to rotate the accelerometer sensor data by
					 * 180 degrees on the x axis, then 0 degrees on the y axis, then 90 degrees 
					 * clockwise on the Z axis.
					 */
					memset(accelRFUToFRDRotationMatrix,0,sizeof(float)*9);
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	44 e2       	ldi	r20, 0x24	; 36
    3fec:	50 e0       	ldi	r21, 0x00	; 0
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	70 e0       	ldi	r23, 0x00	; 0
    3ff2:	0e 94 b9 59 	call	0xb372	; 0xb372 <memset>
					
					MatrixUtil::CreateRotationMatrix(M_PI, 0.0f, (M_PI/2), accelRFUToFRDRotationMatrix);
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffa:	6c 01       	movw	r12, r24
    3ffc:	1b ed       	ldi	r17, 0xDB	; 219
    3ffe:	e1 2e       	mov	r14, r17
    4000:	1f e0       	ldi	r17, 0x0F	; 15
    4002:	f1 2e       	mov	r15, r17
    4004:	09 ec       	ldi	r16, 0xC9	; 201
    4006:	1f e3       	ldi	r17, 0x3F	; 63
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	a9 01       	movw	r20, r18
    400e:	6b ed       	ldi	r22, 0xDB	; 219
    4010:	7f e0       	ldi	r23, 0x0F	; 15
    4012:	89 e4       	ldi	r24, 0x49	; 73
    4014:	90 e4       	ldi	r25, 0x40	; 64
    4016:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <_ZN10helicopter4util10MatrixUtil20CreateRotationMatrixEfffPA3_f>
				}
    401a:	0f 90       	pop	r0
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	df 90       	pop	r13
    4030:	cf 90       	pop	r12
    4032:	08 95       	ret

00004034 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>:
using namespace helicopter::controller;
using namespace helicopter::util;
using namespace helicopter::sensors;

void setupDefaultsandReferencePosition(SystemModel *model, PIDController *pidController)
{	
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	00 d0       	rcall	.+0      	; 0x403a <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE+0x6>
    403a:	1f 92       	push	r1
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	89 83       	std	Y+1, r24	; 0x01
    4044:	7c 83       	std	Y+4, r23	; 0x04
    4046:	6b 83       	std	Y+3, r22	; 0x03
	/**
	 * Set reference position of the helicopter.
	 * These are the setpoints that the helicopter to navigate/orient to.
	 * This includes the final location that the helicopter should travel to.
	 */
	model->ReferenceMagYawDegrees(0.0); //point north
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	40 e0       	ldi	r20, 0x00	; 0
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	ba 01       	movw	r22, r20
    4052:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEf>
	model->ReferenceYawVelocityDegreesPerSecond(0.0);
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	9a 81       	ldd	r25, Y+2	; 0x02
    405a:	40 e0       	ldi	r20, 0x00	; 0
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	ba 01       	movw	r22, r20
    4060:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEf>
	
	//Negative values because positive values are 'down' in NED. So we want a negative altitude setpoint.
	model->ReferenceZNEDBodyFrameFeet(-100);
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	9a 81       	ldd	r25, Y+2	; 0x02
    4068:	40 e0       	ldi	r20, 0x00	; 0
    406a:	50 e0       	ldi	r21, 0x00	; 0
    406c:	68 ec       	ldi	r22, 0xC8	; 200
    406e:	72 ec       	ldi	r23, 0xC2	; 194
    4070:	0e 94 86 1a 	call	0x350c	; 0x350c <_ZN10helicopter5model11SystemModel26ReferenceZNEDBodyFrameFeetEf>
	model->ReferenceZVelocityFeetPerSecond(0);
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	9a 81       	ldd	r25, Y+2	; 0x02
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	ba 01       	movw	r22, r20
    407e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN10helicopter5model11SystemModel31ReferenceZVelocityFeetPerSecondEf>
	model->ReferenceXNEDBodyFrame(0);
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	9a 81       	ldd	r25, Y+2	; 0x02
    4086:	40 e0       	ldi	r20, 0x00	; 0
    4088:	50 e0       	ldi	r21, 0x00	; 0
    408a:	ba 01       	movw	r22, r20
    408c:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN10helicopter5model11SystemModel22ReferenceXNEDBodyFrameEf>
	model->ReferenceXVelocityMetersPerSecond(0);
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	9a 81       	ldd	r25, Y+2	; 0x02
    4094:	40 e0       	ldi	r20, 0x00	; 0
    4096:	50 e0       	ldi	r21, 0x00	; 0
    4098:	ba 01       	movw	r22, r20
    409a:	0e 94 08 1a 	call	0x3410	; 0x3410 <_ZN10helicopter5model11SystemModel33ReferenceXVelocityMetersPerSecondEf>
	model->ReferenceYNEDBodyFrame(0);
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	9a 81       	ldd	r25, Y+2	; 0x02
    40a2:	40 e0       	ldi	r20, 0x00	; 0
    40a4:	50 e0       	ldi	r21, 0x00	; 0
    40a6:	ba 01       	movw	r22, r20
    40a8:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN10helicopter5model11SystemModel22ReferenceYNEDBodyFrameEf>
	model->ReferenceYVelocityMetersPerSecond(0);
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	9a 81       	ldd	r25, Y+2	; 0x02
    40b0:	40 e0       	ldi	r20, 0x00	; 0
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	ba 01       	movw	r22, r20
    40b6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN10helicopter5model11SystemModel33ReferenceYVelocityMetersPerSecondEf>
	
	
	pidController->setYawProportionalGain(3.0);
    40ba:	8b 81       	ldd	r24, Y+3	; 0x03
    40bc:	9c 81       	ldd	r25, Y+4	; 0x04
    40be:	40 e0       	ldi	r20, 0x00	; 0
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	60 e4       	ldi	r22, 0x40	; 64
    40c4:	70 e4       	ldi	r23, 0x40	; 64
    40c6:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEf>
	pidController->setYawIntegralGain(.008);
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	9c 81       	ldd	r25, Y+4	; 0x04
    40ce:	4f e6       	ldi	r20, 0x6F	; 111
    40d0:	52 e1       	ldi	r21, 0x12	; 18
    40d2:	63 e0       	ldi	r22, 0x03	; 3
    40d4:	7c e3       	ldi	r23, 0x3C	; 60
    40d6:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEf>
	pidController->setYawDerivativeGain(.85);
    40da:	8b 81       	ldd	r24, Y+3	; 0x03
    40dc:	9c 81       	ldd	r25, Y+4	; 0x04
    40de:	4a e9       	ldi	r20, 0x9A	; 154
    40e0:	59 e9       	ldi	r21, 0x99	; 153
    40e2:	69 e5       	ldi	r22, 0x59	; 89
    40e4:	7f e3       	ldi	r23, 0x3F	; 63
    40e6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEf>
	pidController->setYawAntiWindupGain(.1);
    40ea:	8b 81       	ldd	r24, Y+3	; 0x03
    40ec:	9c 81       	ldd	r25, Y+4	; 0x04
    40ee:	4d ec       	ldi	r20, 0xCD	; 205
    40f0:	5c ec       	ldi	r21, 0xCC	; 204
    40f2:	6c ec       	ldi	r22, 0xCC	; 204
    40f4:	7d e3       	ldi	r23, 0x3D	; 61
    40f6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEf>
	
	pidController->setXProportionalGain(.289);
    40fa:	8b 81       	ldd	r24, Y+3	; 0x03
    40fc:	9c 81       	ldd	r25, Y+4	; 0x04
    40fe:	4f ec       	ldi	r20, 0xCF	; 207
    4100:	57 ef       	ldi	r21, 0xF7	; 247
    4102:	63 e9       	ldi	r22, 0x93	; 147
    4104:	7e e3       	ldi	r23, 0x3E	; 62
    4106:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN10helicopter10controller13PIDController20setXProportionalGainEf>
	pidController->setXIntegralGain(0);
    410a:	8b 81       	ldd	r24, Y+3	; 0x03
    410c:	9c 81       	ldd	r25, Y+4	; 0x04
    410e:	40 e0       	ldi	r20, 0x00	; 0
    4110:	50 e0       	ldi	r21, 0x00	; 0
    4112:	ba 01       	movw	r22, r20
    4114:	0e 94 81 1b 	call	0x3702	; 0x3702 <_ZN10helicopter10controller13PIDController16setXIntegralGainEf>
	pidController->setXDerivativeGain(1.859);
    4118:	8b 81       	ldd	r24, Y+3	; 0x03
    411a:	9c 81       	ldd	r25, Y+4	; 0x04
    411c:	46 eb       	ldi	r20, 0xB6	; 182
    411e:	53 ef       	ldi	r21, 0xF3	; 243
    4120:	6d ee       	ldi	r22, 0xED	; 237
    4122:	7f e3       	ldi	r23, 0x3F	; 63
    4124:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_ZN10helicopter10controller13PIDController18setXDerivativeGainEf>
	pidController->setXAntiWindupGain(0);
    4128:	8b 81       	ldd	r24, Y+3	; 0x03
    412a:	9c 81       	ldd	r25, Y+4	; 0x04
    412c:	40 e0       	ldi	r20, 0x00	; 0
    412e:	50 e0       	ldi	r21, 0x00	; 0
    4130:	ba 01       	movw	r22, r20
    4132:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN10helicopter10controller13PIDController18setXAntiWindupGainEf>
	pidController->setLongitudeInnerLoopGain(.031);
    4136:	8b 81       	ldd	r24, Y+3	; 0x03
    4138:	9c 81       	ldd	r25, Y+4	; 0x04
    413a:	46 eb       	ldi	r20, 0xB6	; 182
    413c:	53 ef       	ldi	r21, 0xF3	; 243
    413e:	6d ef       	ldi	r22, 0xFD	; 253
    4140:	7c e3       	ldi	r23, 0x3C	; 60
    4142:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN10helicopter10controller13PIDController25setLongitudeInnerLoopGainEf>
	pidController->setPitchAngularVelocityGain(.03);
    4146:	8b 81       	ldd	r24, Y+3	; 0x03
    4148:	9c 81       	ldd	r25, Y+4	; 0x04
    414a:	4f e8       	ldi	r20, 0x8F	; 143
    414c:	52 ec       	ldi	r21, 0xC2	; 194
    414e:	65 ef       	ldi	r22, 0xF5	; 245
    4150:	7c e3       	ldi	r23, 0x3C	; 60
    4152:	0e 94 21 1c 	call	0x3842	; 0x3842 <_ZN10helicopter10controller13PIDController27setPitchAngularVelocityGainEf>
	
	pidController->setYProportionalGain(1.437);
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	9c 81       	ldd	r25, Y+4	; 0x04
    415a:	4e e9       	ldi	r20, 0x9E	; 158
    415c:	5f ee       	ldi	r21, 0xEF	; 239
    415e:	67 eb       	ldi	r22, 0xB7	; 183
    4160:	7f e3       	ldi	r23, 0x3F	; 63
    4162:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN10helicopter10controller13PIDController20setYProportionalGainEf>
	pidController->setYIntegralGain(0);
    4166:	8b 81       	ldd	r24, Y+3	; 0x03
    4168:	9c 81       	ldd	r25, Y+4	; 0x04
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	ba 01       	movw	r22, r20
    4170:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN10helicopter10controller13PIDController16setYIntegralGainEf>
	pidController->setYDerivativeGain(2.8363);
    4174:	8b 81       	ldd	r24, Y+3	; 0x03
    4176:	9c 81       	ldd	r25, Y+4	; 0x04
    4178:	40 ef       	ldi	r20, 0xF0	; 240
    417a:	55 e8       	ldi	r21, 0x85	; 133
    417c:	65 e3       	ldi	r22, 0x35	; 53
    417e:	70 e4       	ldi	r23, 0x40	; 64
    4180:	0e 94 a7 1c 	call	0x394e	; 0x394e <_ZN10helicopter10controller13PIDController18setYDerivativeGainEf>
	pidController->setYAntiWindupGain(0);
    4184:	8b 81       	ldd	r24, Y+3	; 0x03
    4186:	9c 81       	ldd	r25, Y+4	; 0x04
    4188:	40 e0       	ldi	r20, 0x00	; 0
    418a:	50 e0       	ldi	r21, 0x00	; 0
    418c:	ba 01       	movw	r22, r20
    418e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN10helicopter10controller13PIDController18setYAntiWindupGainEf>
	pidController->setLateralInnerLoopGain(.092);	
    4192:	8b 81       	ldd	r24, Y+3	; 0x03
    4194:	9c 81       	ldd	r25, Y+4	; 0x04
    4196:	4f e7       	ldi	r20, 0x7F	; 127
    4198:	5a e6       	ldi	r21, 0x6A	; 106
    419a:	6c eb       	ldi	r22, 0xBC	; 188
    419c:	7d e3       	ldi	r23, 0x3D	; 61
    419e:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN10helicopter10controller13PIDController23setLateralInnerLoopGainEf>
	pidController->setRollAngularVelocityGain(.048);
    41a2:	8b 81       	ldd	r24, Y+3	; 0x03
    41a4:	9c 81       	ldd	r25, Y+4	; 0x04
    41a6:	46 ea       	ldi	r20, 0xA6	; 166
    41a8:	5b e9       	ldi	r21, 0x9B	; 155
    41aa:	64 e4       	ldi	r22, 0x44	; 68
    41ac:	7d e3       	ldi	r23, 0x3D	; 61
    41ae:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <_ZN10helicopter10controller13PIDController26setRollAngularVelocityGainEf>
	
	//TODO: Don't forget that there is a difference between how often the sensors
	//are read and how often the control algorithm runs. 
	pidController->setIntervalPeriodSecs(PID_OUTER_LOOP_PERIOD);
    41b2:	8b 81       	ldd	r24, Y+3	; 0x03
    41b4:	9c 81       	ldd	r25, Y+4	; 0x04
    41b6:	4d ec       	ldi	r20, 0xCD	; 205
    41b8:	5c ec       	ldi	r21, 0xCC	; 204
    41ba:	6c e4       	ldi	r22, 0x4C	; 76
    41bc:	7d e3       	ldi	r23, 0x3D	; 61
    41be:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEf>
//pidController->setMinYawServoControl (-10);
//pidController->setMaxYawServoControl(10);



	pidController->setControlMaxValue(1.0d);
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	9c 81       	ldd	r25, Y+4	; 0x04
    41c6:	40 e0       	ldi	r20, 0x00	; 0
    41c8:	50 e0       	ldi	r21, 0x00	; 0
    41ca:	60 e8       	ldi	r22, 0x80	; 128
    41cc:	7f e3       	ldi	r23, 0x3F	; 63
    41ce:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <_ZN10helicopter10controller13PIDController18setControlMaxValueEf>
	pidController->setControlMinValue(-1.0d);
    41d2:	8b 81       	ldd	r24, Y+3	; 0x03
    41d4:	9c 81       	ldd	r25, Y+4	; 0x04
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	60 e8       	ldi	r22, 0x80	; 128
    41dc:	7f eb       	ldi	r23, 0xBF	; 191
    41de:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <_ZN10helicopter10controller13PIDController18setControlMinValueEf>
	
	pidController->setMinYawServoControl (-.96d);
    41e2:	8b 81       	ldd	r24, Y+3	; 0x03
    41e4:	9c 81       	ldd	r25, Y+4	; 0x04
    41e6:	4f e8       	ldi	r20, 0x8F	; 143
    41e8:	52 ec       	ldi	r21, 0xC2	; 194
    41ea:	65 e7       	ldi	r22, 0x75	; 117
    41ec:	7f eb       	ldi	r23, 0xBF	; 191
    41ee:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN10helicopter10controller13PIDController21setMinYawServoControlEf>
	pidController->setMaxYawServoControl (.96d);
    41f2:	8b 81       	ldd	r24, Y+3	; 0x03
    41f4:	9c 81       	ldd	r25, Y+4	; 0x04
    41f6:	4f e8       	ldi	r20, 0x8F	; 143
    41f8:	52 ec       	ldi	r21, 0xC2	; 194
    41fa:	65 e7       	ldi	r22, 0x75	; 117
    41fc:	7f e3       	ldi	r23, 0x3F	; 63
    41fe:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEf>
	
	pidController->setMaxLongitudeServoControlValue(1.0d);
    4202:	8b 81       	ldd	r24, Y+3	; 0x03
    4204:	9c 81       	ldd	r25, Y+4	; 0x04
    4206:	40 e0       	ldi	r20, 0x00	; 0
    4208:	50 e0       	ldi	r21, 0x00	; 0
    420a:	60 e8       	ldi	r22, 0x80	; 128
    420c:	7f e3       	ldi	r23, 0x3F	; 63
    420e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <_ZN10helicopter10controller13PIDController32setMaxLongitudeServoControlValueEf>
	pidController->setMinLongitudeServoControlValue(-1.0d);
    4212:	8b 81       	ldd	r24, Y+3	; 0x03
    4214:	9c 81       	ldd	r25, Y+4	; 0x04
    4216:	40 e0       	ldi	r20, 0x00	; 0
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	60 e8       	ldi	r22, 0x80	; 128
    421c:	7f eb       	ldi	r23, 0xBF	; 191
    421e:	0e 94 41 1c 	call	0x3882	; 0x3882 <_ZN10helicopter10controller13PIDController32setMinLongitudeServoControlValueEf>
	
	pidController->setMaxLateralServoControlValue(1.0d);
    4222:	8b 81       	ldd	r24, Y+3	; 0x03
    4224:	9c 81       	ldd	r25, Y+4	; 0x04
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	60 e8       	ldi	r22, 0x80	; 128
    422c:	7f e3       	ldi	r23, 0x3F	; 63
    422e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <_ZN10helicopter10controller13PIDController30setMaxLateralServoControlValueEf>
	pidController->setMinLateralServoControlValue(-1.0d);
    4232:	8b 81       	ldd	r24, Y+3	; 0x03
    4234:	9c 81       	ldd	r25, Y+4	; 0x04
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	50 e0       	ldi	r21, 0x00	; 0
    423a:	60 e8       	ldi	r22, 0x80	; 128
    423c:	7f eb       	ldi	r23, 0xBF	; 191
    423e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN10helicopter10controller13PIDController30setMinLateralServoControlValueEf>
	
	//just changed
	pidController->setMaxMainRotorServoControlValue(.5d);
    4242:	8b 81       	ldd	r24, Y+3	; 0x03
    4244:	9c 81       	ldd	r25, Y+4	; 0x04
    4246:	40 e0       	ldi	r20, 0x00	; 0
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	60 e0       	ldi	r22, 0x00	; 0
    424c:	7f e3       	ldi	r23, 0x3F	; 63
    424e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <_ZN10helicopter10controller13PIDController32setMaxMainRotorServoControlValueEf>
	pidController->setMinMainRotorServoControlValue(0.0d);
    4252:	8b 81       	ldd	r24, Y+3	; 0x03
    4254:	9c 81       	ldd	r25, Y+4	; 0x04
    4256:	40 e0       	ldi	r20, 0x00	; 0
    4258:	50 e0       	ldi	r21, 0x00	; 0
    425a:	ba 01       	movw	r22, r20
    425c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_ZN10helicopter10controller13PIDController32setMinMainRotorServoControlValueEf>
	
	pidController->setMaxRollSetpointDegrees(5);
    4260:	8b 81       	ldd	r24, Y+3	; 0x03
    4262:	9c 81       	ldd	r25, Y+4	; 0x04
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	50 e0       	ldi	r21, 0x00	; 0
    4268:	60 ea       	ldi	r22, 0xA0	; 160
    426a:	70 e4       	ldi	r23, 0x40	; 64
    426c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <_ZN10helicopter10controller13PIDController25setMaxRollSetpointDegreesEf>
	pidController->setMinRollSetpointDegrees(-5);
    4270:	8b 81       	ldd	r24, Y+3	; 0x03
    4272:	9c 81       	ldd	r25, Y+4	; 0x04
    4274:	40 e0       	ldi	r20, 0x00	; 0
    4276:	50 e0       	ldi	r21, 0x00	; 0
    4278:	60 ea       	ldi	r22, 0xA0	; 160
    427a:	70 ec       	ldi	r23, 0xC0	; 192
    427c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <_ZN10helicopter10controller13PIDController25setMinRollSetpointDegreesEf>
	
	pidController->setMaxPitchSetpointDegrees(13);
    4280:	8b 81       	ldd	r24, Y+3	; 0x03
    4282:	9c 81       	ldd	r25, Y+4	; 0x04
    4284:	40 e0       	ldi	r20, 0x00	; 0
    4286:	50 e0       	ldi	r21, 0x00	; 0
    4288:	60 e5       	ldi	r22, 0x50	; 80
    428a:	71 e4       	ldi	r23, 0x41	; 65
    428c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN10helicopter10controller13PIDController26setMaxPitchSetpointDegreesEf>
	pidController->setMinPitchSetpointDegrees(-13);
    4290:	8b 81       	ldd	r24, Y+3	; 0x03
    4292:	9c 81       	ldd	r25, Y+4	; 0x04
    4294:	40 e0       	ldi	r20, 0x00	; 0
    4296:	50 e0       	ldi	r21, 0x00	; 0
    4298:	60 e5       	ldi	r22, 0x50	; 80
    429a:	71 ec       	ldi	r23, 0xC1	; 193
    429c:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <_ZN10helicopter10controller13PIDController26setMinPitchSetpointDegreesEf>
}
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	df 91       	pop	r29
    42aa:	cf 91       	pop	r28
    42ac:	08 95       	ret

000042ae <main>:


int main(void)
{	
    42ae:	4f 92       	push	r4
    42b0:	5f 92       	push	r5
    42b2:	6f 92       	push	r6
    42b4:	7f 92       	push	r7
    42b6:	8f 92       	push	r8
    42b8:	9f 92       	push	r9
    42ba:	af 92       	push	r10
    42bc:	bf 92       	push	r11
    42be:	cf 92       	push	r12
    42c0:	df 92       	push	r13
    42c2:	ef 92       	push	r14
    42c4:	ff 92       	push	r15
    42c6:	0f 93       	push	r16
    42c8:	1f 93       	push	r17
    42ca:	cf 93       	push	r28
    42cc:	df 93       	push	r29
    42ce:	cd b7       	in	r28, 0x3d	; 61
    42d0:	de b7       	in	r29, 0x3e	; 62
    42d2:	ef 97       	sbiw	r28, 0x3f	; 63
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	f8 94       	cli
    42d8:	de bf       	out	0x3e, r29	; 62
    42da:	0f be       	out	0x3f, r0	; 63
    42dc:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
    42de:	89 ef       	ldi	r24, 0xF9	; 249
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    42e6:	8c 01       	movw	r16, r24
    42e8:	c8 01       	movw	r24, r16
    42ea:	0e 94 88 17 	call	0x2f10	; 0x2f10 <_ZN10helicopter5model11SystemModelC1Ev>
    42ee:	1b 83       	std	Y+3, r17	; 0x03
    42f0:	0a 83       	std	Y+2, r16	; 0x02
	
	PIDController *pidController = new PIDController(model);
    42f2:	8e e8       	ldi	r24, 0x8E	; 142
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    42fa:	8c 01       	movw	r16, r24
    42fc:	8a 81       	ldd	r24, Y+2	; 0x02
    42fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4300:	bc 01       	movw	r22, r24
    4302:	c8 01       	movw	r24, r16
    4304:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelE>
    4308:	1d 83       	std	Y+5, r17	; 0x05
    430a:	0c 83       	std	Y+4, r16	; 0x04
	
	
	
	setupDefaultsandReferencePosition(model, pidController);
    430c:	2c 81       	ldd	r18, Y+4	; 0x04
    430e:	3d 81       	ldd	r19, Y+5	; 0x05
    4310:	8a 81       	ldd	r24, Y+2	; 0x02
    4312:	9b 81       	ldd	r25, Y+3	; 0x03
    4314:	b9 01       	movw	r22, r18
    4316:	0e 94 1a 20 	call	0x4034	; 0x4034 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 100); //Good timeout when using the USB
    431a:	88 e0       	ldi	r24, 0x08	; 8
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    4322:	6c 01       	movw	r12, r24
    4324:	14 e6       	ldi	r17, 0x64	; 100
    4326:	e1 2e       	mov	r14, r17
    4328:	f1 2c       	mov	r15, r1
    432a:	00 e0       	ldi	r16, 0x00	; 0
    432c:	10 e0       	ldi	r17, 0x00	; 0
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	34 e0       	ldi	r19, 0x04	; 4
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	54 e2       	ldi	r21, 0x24	; 36
    4336:	64 ef       	ldi	r22, 0xF4	; 244
    4338:	70 e0       	ldi	r23, 0x00	; 0
    433a:	c6 01       	movw	r24, r12
    433c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>
    4340:	df 82       	std	Y+7, r13	; 0x07
    4342:	ce 82       	std	Y+6, r12	; 0x06
	
	//Create a driver for communicating with the Ground Control Station (GCS).
	//SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);  
	//SerialDriver *serialDriver = new SerialDriver(76800, SerialDriver::Zero, true);  
	SerialDriver *serialDriver = new SerialDriver(250000, SerialDriver::Zero, true);  
    4344:	88 e0       	ldi	r24, 0x08	; 8
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    434c:	7c 01       	movw	r14, r24
    434e:	01 e0       	ldi	r16, 0x01	; 1
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	40 e9       	ldi	r20, 0x90	; 144
    4354:	50 ed       	ldi	r21, 0xD0	; 208
    4356:	63 e0       	ldi	r22, 0x03	; 3
    4358:	70 e0       	ldi	r23, 0x00	; 0
    435a:	c7 01       	movw	r24, r14
    435c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEb>
    4360:	f9 86       	std	Y+9, r15	; 0x09
    4362:	e8 86       	std	Y+8, r14	; 0x08
	serialDriver->initialize();
    4364:	88 85       	ldd	r24, Y+8	; 0x08
    4366:	99 85       	ldd	r25, Y+9	; 0x09
    4368:	fc 01       	movw	r30, r24
    436a:	80 81       	ld	r24, Z
    436c:	91 81       	ldd	r25, Z+1	; 0x01
    436e:	04 96       	adiw	r24, 0x04	; 4
    4370:	fc 01       	movw	r30, r24
    4372:	20 81       	ld	r18, Z
    4374:	31 81       	ldd	r19, Z+1	; 0x01
    4376:	88 85       	ldd	r24, Y+8	; 0x08
    4378:	99 85       	ldd	r25, Y+9	; 0x09
    437a:	f9 01       	movw	r30, r18
    437c:	19 95       	eicall
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver, timer, true);
    437e:	85 e0       	ldi	r24, 0x05	; 5
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    4386:	8c 01       	movw	r16, r24
    4388:	4e 81       	ldd	r20, Y+6	; 0x06
    438a:	5f 81       	ldd	r21, Y+7	; 0x07
    438c:	88 85       	ldd	r24, Y+8	; 0x08
    438e:	99 85       	ldd	r25, Y+9	; 0x09
    4390:	21 e0       	ldi	r18, 0x01	; 1
    4392:	bc 01       	movw	r22, r24
    4394:	c8 01       	movw	r24, r16
    4396:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverEPNS_4util5TimerEb>
    439a:	1b 87       	std	Y+11, r17	; 0x0b
    439c:	0a 87       	std	Y+10, r16	; 0x0a
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 20 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 20 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, pidController,0, 4);//starting at tick 0, execute 50 times a second
    439e:	8d e0       	ldi	r24, 0x0D	; 13
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    43a6:	6c 01       	movw	r12, r24
    43a8:	2c 81       	ldd	r18, Y+4	; 0x04
    43aa:	3d 81       	ldd	r19, Y+5	; 0x05
    43ac:	4a 81       	ldd	r20, Y+2	; 0x02
    43ae:	5b 81       	ldd	r21, Y+3	; 0x03
    43b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    43b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    43b4:	68 94       	set
    43b6:	ee 24       	eor	r14, r14
    43b8:	e2 f8       	bld	r14, 2
    43ba:	f1 2c       	mov	r15, r1
    43bc:	00 e0       	ldi	r16, 0x00	; 0
    43be:	10 e0       	ldi	r17, 0x00	; 0
    43c0:	bc 01       	movw	r22, r24
    43c2:	c6 01       	movw	r24, r12
    43c4:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEPNS_10controller13PIDControllerEii>
    43c8:	dd 86       	std	Y+13, r13	; 0x0d
    43ca:	cc 86       	std	Y+12, r12	; 0x0c
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
    43cc:	8b e0       	ldi	r24, 0x0B	; 11
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    43d4:	7c 01       	movw	r14, r24
    43d6:	4a 81       	ldd	r20, Y+2	; 0x02
    43d8:	5b 81       	ldd	r21, Y+3	; 0x03
    43da:	8a 85       	ldd	r24, Y+10	; 0x0a
    43dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    43de:	04 e0       	ldi	r16, 0x04	; 4
    43e0:	10 e0       	ldi	r17, 0x00	; 0
    43e2:	21 e0       	ldi	r18, 0x01	; 1
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	bc 01       	movw	r22, r24
    43e8:	c7 01       	movw	r24, r14
    43ea:	0e 94 df 49 	call	0x93be	; 0x93be <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    43ee:	ff 86       	std	Y+15, r15	; 0x0f
    43f0:	ee 86       	std	Y+14, r14	; 0x0e
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
    43f2:	8a e0       	ldi	r24, 0x0A	; 10
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    43fa:	8c 01       	movw	r16, r24
    43fc:	23 e0       	ldi	r18, 0x03	; 3
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	46 e4       	ldi	r20, 0x46	; 70
    4402:	50 e0       	ldi	r21, 0x00	; 0
    4404:	62 e0       	ldi	r22, 0x02	; 2
    4406:	70 e0       	ldi	r23, 0x00	; 0
    4408:	c8 01       	movw	r24, r16
    440a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>
    440e:	19 8b       	std	Y+17, r17	; 0x11
    4410:	08 8b       	std	Y+16, r16	; 0x10
		
		
	SensorProcessingTask *sensorProcessingTask = new SensorProcessingTask(model, 5, 4);
    4412:	89 e0       	ldi	r24, 0x09	; 9
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    441a:	8c 01       	movw	r16, r24
    441c:	8a 81       	ldd	r24, Y+2	; 0x02
    441e:	9b 81       	ldd	r25, Y+3	; 0x03
    4420:	24 e0       	ldi	r18, 0x04	; 4
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	45 e0       	ldi	r20, 0x05	; 5
    4426:	50 e0       	ldi	r21, 0x00	; 0
    4428:	bc 01       	movw	r22, r24
    442a:	c8 01       	movw	r24, r16
    442c:	0e 94 9f 44 	call	0x893e	; 0x893e <_ZN10helicopter5tasks20SensorProcessingTaskC1EPNS_5model11SystemModelEii>
    4430:	1b 8b       	std	Y+19, r17	; 0x13
    4432:	0a 8b       	std	Y+18, r16	; 0x12
		
	//execute the pid outer loop at the PID_OUTER_LOOP_PERIOD rate. The division is to convert the period into ticks for the scheduler.
	PIDOuterLoopTask *pidOuterLoop = new PIDOuterLoopTask(pidController, 3, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    4434:	89 e0       	ldi	r24, 0x09	; 9
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    443c:	8c 01       	movw	r16, r24
    443e:	8c 81       	ldd	r24, Y+4	; 0x04
    4440:	9d 81       	ldd	r25, Y+5	; 0x05
    4442:	23 e0       	ldi	r18, 0x03	; 3
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	43 e0       	ldi	r20, 0x03	; 3
    4448:	50 e0       	ldi	r21, 0x00	; 0
    444a:	bc 01       	movw	r22, r24
    444c:	c8 01       	movw	r24, r16
    444e:	0e 94 c8 41 	call	0x8390	; 0x8390 <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>
    4452:	1d 8b       	std	Y+21, r17	; 0x15
    4454:	0c 8b       	std	Y+20, r16	; 0x14
	PIDInnerLoopTask *pidInnerLoop = new PIDInnerLoopTask(pidController, 4, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    4456:	89 e0       	ldi	r24, 0x09	; 9
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    445e:	8c 01       	movw	r16, r24
    4460:	8c 81       	ldd	r24, Y+4	; 0x04
    4462:	9d 81       	ldd	r25, Y+5	; 0x05
    4464:	23 e0       	ldi	r18, 0x03	; 3
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	44 e0       	ldi	r20, 0x04	; 4
    446a:	50 e0       	ldi	r21, 0x00	; 0
    446c:	bc 01       	movw	r22, r24
    446e:	c8 01       	movw	r24, r16
    4470:	0e 94 44 41 	call	0x8288	; 0x8288 <_ZN10helicopter5tasks16PIDInnerLoopTaskC1EPNS_10controller13PIDControllerEii>
    4474:	1f 8b       	std	Y+23, r17	; 0x17
    4476:	0e 8b       	std	Y+22, r16	; 0x16
	
	SPIDriver *spiDriver = new SPIDriver();
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    4480:	99 8f       	std	Y+25, r25	; 0x19
    4482:	88 8f       	std	Y+24, r24	; 0x18
	spiDriver->init();
    4484:	88 8d       	ldd	r24, Y+24	; 0x18
    4486:	99 8d       	ldd	r25, Y+25	; 0x19
    4488:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN10helicopter7drivers9SPIDriver4initEv>
	
	IMUSensor *imuSensor = new IMUSensor(spiDriver);
    448c:	8a e4       	ldi	r24, 0x4A	; 74
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    4494:	8c 01       	movw	r16, r24
    4496:	88 8d       	ldd	r24, Y+24	; 0x18
    4498:	99 8d       	ldd	r25, Y+25	; 0x19
    449a:	bc 01       	movw	r22, r24
    449c:	c8 01       	movw	r24, r16
    449e:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <_ZN10helicopter7sensors9IMUSensorC1EPNS_7drivers9SPIDriverE>
    44a2:	1b 8f       	std	Y+27, r17	; 0x1b
    44a4:	0a 8f       	std	Y+26, r16	; 0x1a
	imuSensor->init();
    44a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    44a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    44aa:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <_ZN10helicopter7sensors9IMUSensor4initEv>
	
	ReadIMUSensorTask *imuSensorTask = new ReadIMUSensorTask(model, imuSensor, 6, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    44ae:	8b e0       	ldi	r24, 0x0B	; 11
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    44b6:	7c 01       	movw	r14, r24
    44b8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    44ba:	5b 8d       	ldd	r21, Y+27	; 0x1b
    44bc:	8a 81       	ldd	r24, Y+2	; 0x02
    44be:	9b 81       	ldd	r25, Y+3	; 0x03
    44c0:	03 e0       	ldi	r16, 0x03	; 3
    44c2:	10 e0       	ldi	r17, 0x00	; 0
    44c4:	26 e0       	ldi	r18, 0x06	; 6
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	bc 01       	movw	r22, r24
    44ca:	c7 01       	movw	r24, r14
    44cc:	0e 94 49 43 	call	0x8692	; 0x8692 <_ZN10helicopter5tasks17ReadIMUSensorTaskC1EPNS_5model11SystemModelEPNS_7sensors9IMUSensorEii>
    44d0:	fd 8e       	std	Y+29, r15	; 0x1d
    44d2:	ec 8e       	std	Y+28, r14	; 0x1c
	

	RadioControllerInterface *rcInterface = RadioControllerInterface::getRadioControllerInterface();
    44d4:	0e 94 f7 29 	call	0x53ee	; 0x53ee <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv>
    44d8:	9f 8f       	std	Y+31, r25	; 0x1f
    44da:	8e 8f       	std	Y+30, r24	; 0x1e
	
	rcInterface->SetSystemModel(model);
    44dc:	2a 81       	ldd	r18, Y+2	; 0x02
    44de:	3b 81       	ldd	r19, Y+3	; 0x03
    44e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    44e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    44e4:	b9 01       	movw	r22, r18
    44e6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_ZN10helicopter10interfaces24RadioControllerInterface14SetSystemModelEPNS_5model11SystemModelE>


	Scheduler *scheduler = Scheduler::getScheduler();
    44ea:	0e 94 1c 3c 	call	0x7838	; 0x7838 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    44ee:	99 a3       	std	Y+33, r25	; 0x21
    44f0:	88 a3       	std	Y+32, r24	; 0x20
	
	scheduler->addTask(flashTask);
    44f2:	28 89       	ldd	r18, Y+16	; 0x10
    44f4:	39 89       	ldd	r19, Y+17	; 0x11
    44f6:	88 a1       	ldd	r24, Y+32	; 0x20
    44f8:	99 a1       	ldd	r25, Y+33	; 0x21
    44fa:	b9 01       	movw	r22, r18
    44fc:	0e 94 ac 3c 	call	0x7958	; 0x7958 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
    4500:	2c 85       	ldd	r18, Y+12	; 0x0c
    4502:	3d 85       	ldd	r19, Y+13	; 0x0d
    4504:	88 a1       	ldd	r24, Y+32	; 0x20
    4506:	99 a1       	ldd	r25, Y+33	; 0x21
    4508:	b9 01       	movw	r22, r18
    450a:	0e 94 ac 3c 	call	0x7958	; 0x7958 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
    450e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4510:	3f 85       	ldd	r19, Y+15	; 0x0f
    4512:	88 a1       	ldd	r24, Y+32	; 0x20
    4514:	99 a1       	ldd	r25, Y+33	; 0x21
    4516:	b9 01       	movw	r22, r18
    4518:	0e 94 ac 3c 	call	0x7958	; 0x7958 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidOuterLoop);
    451c:	2c 89       	ldd	r18, Y+20	; 0x14
    451e:	3d 89       	ldd	r19, Y+21	; 0x15
    4520:	88 a1       	ldd	r24, Y+32	; 0x20
    4522:	99 a1       	ldd	r25, Y+33	; 0x21
    4524:	b9 01       	movw	r22, r18
    4526:	0e 94 ac 3c 	call	0x7958	; 0x7958 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidInnerLoop);
    452a:	2e 89       	ldd	r18, Y+22	; 0x16
    452c:	3f 89       	ldd	r19, Y+23	; 0x17
    452e:	88 a1       	ldd	r24, Y+32	; 0x20
    4530:	99 a1       	ldd	r25, Y+33	; 0x21
    4532:	b9 01       	movw	r22, r18
    4534:	0e 94 ac 3c 	call	0x7958	; 0x7958 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(sensorProcessingTask);
    4538:	2a 89       	ldd	r18, Y+18	; 0x12
    453a:	3b 89       	ldd	r19, Y+19	; 0x13
    453c:	88 a1       	ldd	r24, Y+32	; 0x20
    453e:	99 a1       	ldd	r25, Y+33	; 0x21
    4540:	b9 01       	movw	r22, r18
    4542:	0e 94 ac 3c 	call	0x7958	; 0x7958 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
//	scheduler->addTask(imuSensorTask);
	
	
	//Wait until we receive location data before starting the scheduler
	//TODO rework this
	bool isInitialized = false;
    4546:	19 82       	std	Y+1, r1	; 0x01
	
	while (!isInitialized)
    4548:	2e c1       	rjmp	.+604    	; 0x47a6 <main+0x4f8>
	{
		simTelemTask->runTaskImpl();
    454a:	8c 85       	ldd	r24, Y+12	; 0x0c
    454c:	9d 85       	ldd	r25, Y+13	; 0x0d
    454e:	fc 01       	movw	r30, r24
    4550:	80 81       	ld	r24, Z
    4552:	91 81       	ldd	r25, Z+1	; 0x01
    4554:	fc 01       	movw	r30, r24
    4556:	20 81       	ld	r18, Z
    4558:	31 81       	ldd	r19, Z+1	; 0x01
    455a:	8c 85       	ldd	r24, Y+12	; 0x0c
    455c:	9d 85       	ldd	r25, Y+13	; 0x0d
    455e:	f9 01       	movw	r30, r18
    4560:	19 95       	eicall
		
		if (model->LatitudeDegrees() != 0 && model->LongitudeDegrees() != 0)
    4562:	8a 81       	ldd	r24, Y+2	; 0x02
    4564:	9b 81       	ldd	r25, Y+3	; 0x03
    4566:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZNK10helicopter5model11SystemModel15LatitudeDegreesEv>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	a9 01       	movw	r20, r18
    4574:	bc 01       	movw	r22, r24
    4576:	cd 01       	movw	r24, r26
    4578:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    457c:	88 23       	and	r24, r24
    457e:	89 f0       	breq	.+34     	; 0x45a2 <main+0x2f4>
    4580:	8a 81       	ldd	r24, Y+2	; 0x02
    4582:	9b 81       	ldd	r25, Y+3	; 0x03
    4584:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZNK10helicopter5model11SystemModel16LongitudeDegreesEv>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	a9 01       	movw	r20, r18
    4592:	bc 01       	movw	r22, r24
    4594:	cd 01       	movw	r24, r26
    4596:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    459a:	88 23       	and	r24, r24
    459c:	11 f0       	breq	.+4      	; 0x45a2 <main+0x2f4>
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	01 c0       	rjmp	.+2      	; 0x45a4 <main+0x2f6>
    45a2:	80 e0       	ldi	r24, 0x00	; 0
    45a4:	88 23       	and	r24, r24
    45a6:	09 f4       	brne	.+2      	; 0x45aa <main+0x2fc>
    45a8:	82 c0       	rjmp	.+260    	; 0x46ae <main+0x400>
		{
			isInitialized = true;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	89 83       	std	Y+1, r24	; 0x01
			
			//ecefReferenceX, ecefReferenceY, ecefReferenceZ,ecefToLocalNEDRotationMatrix,
			CoordinateUtil::CalculateECEFToLocalNEDRotationMatrix(model->LatitudeDegrees(), model->LongitudeDegrees(), model->EcefToLocalNEDRotationMatrix);
    45ae:	8a 81       	ldd	r24, Y+2	; 0x02
    45b0:	9b 81       	ldd	r25, Y+3	; 0x03
    45b2:	8c 01       	movw	r16, r24
    45b4:	0b 52       	subi	r16, 0x2B	; 43
    45b6:	1f 4f       	sbci	r17, 0xFF	; 255
    45b8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ba:	9b 81       	ldd	r25, Y+3	; 0x03
    45bc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZNK10helicopter5model11SystemModel16LongitudeDegreesEv>
    45c0:	6b 01       	movw	r12, r22
    45c2:	7c 01       	movw	r14, r24
    45c4:	8a 81       	ldd	r24, Y+2	; 0x02
    45c6:	9b 81       	ldd	r25, Y+3	; 0x03
    45c8:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZNK10helicopter5model11SystemModel15LatitudeDegreesEv>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	a7 01       	movw	r20, r14
    45d2:	96 01       	movw	r18, r12
    45d4:	bc 01       	movw	r22, r24
    45d6:	cd 01       	movw	r24, r26
    45d8:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <_ZN10helicopter4util14CoordinateUtil37CalculateECEFToLocalNEDRotationMatrixEffPA3_f>
	
			float initialXPositionEcef = 0;
    45dc:	18 aa       	std	Y+48, r1	; 0x30
    45de:	19 aa       	std	Y+49, r1	; 0x31
    45e0:	1a aa       	std	Y+50, r1	; 0x32
    45e2:	1b aa       	std	Y+51, r1	; 0x33
			float initialYPositionEcef = 0;
    45e4:	1c aa       	std	Y+52, r1	; 0x34
    45e6:	1d aa       	std	Y+53, r1	; 0x35
    45e8:	1e aa       	std	Y+54, r1	; 0x36
    45ea:	1f aa       	std	Y+55, r1	; 0x37
			float initialZPositionEcef = 0;
    45ec:	18 ae       	std	Y+56, r1	; 0x38
    45ee:	19 ae       	std	Y+57, r1	; 0x39
    45f0:	1a ae       	std	Y+58, r1	; 0x3a
    45f2:	1b ae       	std	Y+59, r1	; 0x3b
			CoordinateUtil::ConvertFromGeodeticToECEF(model->LatitudeDegrees(), model->LongitudeDegrees(), model->AltitudeFeetAgl(), initialXPositionEcef, initialYPositionEcef, initialZPositionEcef);
    45f4:	8a 81       	ldd	r24, Y+2	; 0x02
    45f6:	9b 81       	ldd	r25, Y+3	; 0x03
    45f8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZNK10helicopter5model11SystemModel15AltitudeFeetAglEv>
    45fc:	6c af       	std	Y+60, r22	; 0x3c
    45fe:	7d af       	std	Y+61, r23	; 0x3d
    4600:	8e af       	std	Y+62, r24	; 0x3e
    4602:	9f af       	std	Y+63, r25	; 0x3f
    4604:	8a 81       	ldd	r24, Y+2	; 0x02
    4606:	9b 81       	ldd	r25, Y+3	; 0x03
    4608:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZNK10helicopter5model11SystemModel16LongitudeDegreesEv>
    460c:	2b 01       	movw	r4, r22
    460e:	3c 01       	movw	r6, r24
    4610:	8a 81       	ldd	r24, Y+2	; 0x02
    4612:	9b 81       	ldd	r25, Y+3	; 0x03
    4614:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZNK10helicopter5model11SystemModel15LatitudeDegreesEv>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	be 01       	movw	r22, r28
    461e:	68 5c       	subi	r22, 0xC8	; 200
    4620:	7f 4f       	sbci	r23, 0xFF	; 255
    4622:	ae 01       	movw	r20, r28
    4624:	4c 5c       	subi	r20, 0xCC	; 204
    4626:	5f 4f       	sbci	r21, 0xFF	; 255
    4628:	9e 01       	movw	r18, r28
    462a:	20 5d       	subi	r18, 0xD0	; 208
    462c:	3f 4f       	sbci	r19, 0xFF	; 255
    462e:	4b 01       	movw	r8, r22
    4630:	5a 01       	movw	r10, r20
    4632:	69 01       	movw	r12, r18
    4634:	ec ac       	ldd	r14, Y+60	; 0x3c
    4636:	fd ac       	ldd	r15, Y+61	; 0x3d
    4638:	0e ad       	ldd	r16, Y+62	; 0x3e
    463a:	1f ad       	ldd	r17, Y+63	; 0x3f
    463c:	a3 01       	movw	r20, r6
    463e:	92 01       	movw	r18, r4
    4640:	bc 01       	movw	r22, r24
    4642:	cd 01       	movw	r24, r26
    4644:	0e 94 a2 4c 	call	0x9944	; 0x9944 <_ZN10helicopter4util14CoordinateUtil25ConvertFromGeodeticToECEFEfffRfS2_S2_>
			
			model->InitialXPositionEcef(initialXPositionEcef);
    4648:	88 a9       	ldd	r24, Y+48	; 0x30
    464a:	99 a9       	ldd	r25, Y+49	; 0x31
    464c:	aa a9       	ldd	r26, Y+50	; 0x32
    464e:	bb a9       	ldd	r27, Y+51	; 0x33
    4650:	bc 01       	movw	r22, r24
    4652:	cd 01       	movw	r24, r26
    4654:	0e 94 9f 54 	call	0xa93e	; 0xa93e <__fixsfsi>
    4658:	dc 01       	movw	r26, r24
    465a:	cb 01       	movw	r24, r22
    465c:	2a 81       	ldd	r18, Y+2	; 0x02
    465e:	3b 81       	ldd	r19, Y+3	; 0x03
    4660:	ac 01       	movw	r20, r24
    4662:	bd 01       	movw	r22, r26
    4664:	c9 01       	movw	r24, r18
    4666:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN10helicopter5model11SystemModel20InitialXPositionEcefEl>
			model->InitialYPositionEcef(initialYPositionEcef);
    466a:	8c a9       	ldd	r24, Y+52	; 0x34
    466c:	9d a9       	ldd	r25, Y+53	; 0x35
    466e:	ae a9       	ldd	r26, Y+54	; 0x36
    4670:	bf a9       	ldd	r27, Y+55	; 0x37
    4672:	bc 01       	movw	r22, r24
    4674:	cd 01       	movw	r24, r26
    4676:	0e 94 9f 54 	call	0xa93e	; 0xa93e <__fixsfsi>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	2a 81       	ldd	r18, Y+2	; 0x02
    4680:	3b 81       	ldd	r19, Y+3	; 0x03
    4682:	ac 01       	movw	r20, r24
    4684:	bd 01       	movw	r22, r26
    4686:	c9 01       	movw	r24, r18
    4688:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN10helicopter5model11SystemModel20InitialYPositionEcefEl>
			model->InitialZPositionEcef(initialZPositionEcef);
    468c:	88 ad       	ldd	r24, Y+56	; 0x38
    468e:	99 ad       	ldd	r25, Y+57	; 0x39
    4690:	aa ad       	ldd	r26, Y+58	; 0x3a
    4692:	bb ad       	ldd	r27, Y+59	; 0x3b
    4694:	bc 01       	movw	r22, r24
    4696:	cd 01       	movw	r24, r26
    4698:	0e 94 9f 54 	call	0xa93e	; 0xa93e <__fixsfsi>
    469c:	dc 01       	movw	r26, r24
    469e:	cb 01       	movw	r24, r22
    46a0:	2a 81       	ldd	r18, Y+2	; 0x02
    46a2:	3b 81       	ldd	r19, Y+3	; 0x03
    46a4:	ac 01       	movw	r20, r24
    46a6:	bd 01       	movw	r22, r26
    46a8:	c9 01       	movw	r24, r18
    46aa:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN10helicopter5model11SystemModel20InitialZPositionEcefEl>
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	a8 ec       	ldi	r26, 0xC8	; 200
    46b4:	b2 e4       	ldi	r27, 0x42	; 66
    46b6:	8a a3       	std	Y+34, r24	; 0x22
    46b8:	9b a3       	std	Y+35, r25	; 0x23
    46ba:	ac a3       	std	Y+36, r26	; 0x24
    46bc:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	4a e7       	ldi	r20, 0x7A	; 122
    46c4:	55 e4       	ldi	r21, 0x45	; 69
    46c6:	6a a1       	ldd	r22, Y+34	; 0x22
    46c8:	7b a1       	ldd	r23, Y+35	; 0x23
    46ca:	8c a1       	ldd	r24, Y+36	; 0x24
    46cc:	9d a1       	ldd	r25, Y+37	; 0x25
    46ce:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	8e a3       	std	Y+38, r24	; 0x26
    46d8:	9f a3       	std	Y+39, r25	; 0x27
    46da:	a8 a7       	std	Y+40, r26	; 0x28
    46dc:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	40 e8       	ldi	r20, 0x80	; 128
    46e4:	5f e3       	ldi	r21, 0x3F	; 63
    46e6:	6e a1       	ldd	r22, Y+38	; 0x26
    46e8:	7f a1       	ldd	r23, Y+39	; 0x27
    46ea:	88 a5       	ldd	r24, Y+40	; 0x28
    46ec:	99 a5       	ldd	r25, Y+41	; 0x29
    46ee:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    46f2:	88 23       	and	r24, r24
    46f4:	2c f4       	brge	.+10     	; 0x4700 <main+0x452>
		__ticks = 1;
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	9b a7       	std	Y+43, r25	; 0x2b
    46fc:	8a a7       	std	Y+42, r24	; 0x2a
    46fe:	46 c0       	rjmp	.+140    	; 0x478c <main+0x4de>
	else if (__tmp > 65535)
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	3f ef       	ldi	r19, 0xFF	; 255
    4704:	4f e7       	ldi	r20, 0x7F	; 127
    4706:	57 e4       	ldi	r21, 0x47	; 71
    4708:	6e a1       	ldd	r22, Y+38	; 0x26
    470a:	7f a1       	ldd	r23, Y+39	; 0x27
    470c:	88 a5       	ldd	r24, Y+40	; 0x28
    470e:	99 a5       	ldd	r25, Y+41	; 0x29
    4710:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    4714:	18 16       	cp	r1, r24
    4716:	84 f5       	brge	.+96     	; 0x4778 <main+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	40 e2       	ldi	r20, 0x20	; 32
    471e:	51 e4       	ldi	r21, 0x41	; 65
    4720:	6a a1       	ldd	r22, Y+34	; 0x22
    4722:	7b a1       	ldd	r23, Y+35	; 0x23
    4724:	8c a1       	ldd	r24, Y+36	; 0x24
    4726:	9d a1       	ldd	r25, Y+37	; 0x25
    4728:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	bc 01       	movw	r22, r24
    4732:	cd 01       	movw	r24, r26
    4734:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	9b a7       	std	Y+43, r25	; 0x2b
    473e:	8a a7       	std	Y+42, r24	; 0x2a
    4740:	12 c0       	rjmp	.+36     	; 0x4766 <main+0x4b8>
    4742:	80 e9       	ldi	r24, 0x90	; 144
    4744:	91 e0       	ldi	r25, 0x01	; 1
    4746:	9d a7       	std	Y+45, r25	; 0x2d
    4748:	8c a7       	std	Y+44, r24	; 0x2c
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    474a:	8c a5       	ldd	r24, Y+44	; 0x2c
    474c:	9d a5       	ldd	r25, Y+45	; 0x2d
    474e:	8c 01       	movw	r16, r24
    4750:	c8 01       	movw	r24, r16
    4752:	01 97       	sbiw	r24, 0x01	; 1
    4754:	f1 f7       	brne	.-4      	; 0x4752 <main+0x4a4>
    4756:	8c 01       	movw	r16, r24
    4758:	1d a7       	std	Y+45, r17	; 0x2d
    475a:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475c:	8a a5       	ldd	r24, Y+42	; 0x2a
    475e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4760:	01 97       	sbiw	r24, 0x01	; 1
    4762:	9b a7       	std	Y+43, r25	; 0x2b
    4764:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4766:	21 e0       	ldi	r18, 0x01	; 1
    4768:	8a a5       	ldd	r24, Y+42	; 0x2a
    476a:	9b a5       	ldd	r25, Y+43	; 0x2b
    476c:	00 97       	sbiw	r24, 0x00	; 0
    476e:	09 f4       	brne	.+2      	; 0x4772 <main+0x4c4>
    4770:	20 e0       	ldi	r18, 0x00	; 0
    4772:	22 23       	and	r18, r18
    4774:	31 f7       	brne	.-52     	; 0x4742 <main+0x494>
    4776:	17 c0       	rjmp	.+46     	; 0x47a6 <main+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4778:	6e a1       	ldd	r22, Y+38	; 0x26
    477a:	7f a1       	ldd	r23, Y+39	; 0x27
    477c:	88 a5       	ldd	r24, Y+40	; 0x28
    477e:	99 a5       	ldd	r25, Y+41	; 0x29
    4780:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	9b a7       	std	Y+43, r25	; 0x2b
    478a:	8a a7       	std	Y+42, r24	; 0x2a
    478c:	8a a5       	ldd	r24, Y+42	; 0x2a
    478e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4790:	9f a7       	std	Y+47, r25	; 0x2f
    4792:	8e a7       	std	Y+46, r24	; 0x2e
    4794:	8e a5       	ldd	r24, Y+46	; 0x2e
    4796:	9f a5       	ldd	r25, Y+47	; 0x2f
    4798:	8c 01       	movw	r16, r24
    479a:	f8 01       	movw	r30, r16
    479c:	31 97       	sbiw	r30, 0x01	; 1
    479e:	f1 f7       	brne	.-4      	; 0x479c <main+0x4ee>
    47a0:	8f 01       	movw	r16, r30
    47a2:	1f a7       	std	Y+47, r17	; 0x2f
    47a4:	0e a7       	std	Y+46, r16	; 0x2e
	
	//Wait until we receive location data before starting the scheduler
	//TODO rework this
	bool isInitialized = false;
	
	while (!isInitialized)
    47a6:	99 81       	ldd	r25, Y+1	; 0x01
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	89 27       	eor	r24, r25
    47ac:	88 23       	and	r24, r24
    47ae:	09 f0       	breq	.+2      	; 0x47b2 <main+0x504>
    47b0:	cc ce       	rjmp	.-616    	; 0x454a <main+0x29c>
		_delay_ms(100);
	}
	
	
	//TODO set this to manual by default and have some sort of flag for what build we are making to know if it should be autopilot or not.
	model->OperationalState(SystemModel::AutoPilot);
    47b2:	8a 81       	ldd	r24, Y+2	; 0x02
    47b4:	9b 81       	ldd	r25, Y+3	; 0x03
    47b6:	61 e0       	ldi	r22, 0x01	; 1
    47b8:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN10helicopter5model11SystemModel16OperationalStateENS1_14OperatingStateE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
    47bc:	88 a1       	ldd	r24, Y+32	; 0x20
    47be:	99 a1       	ldd	r25, Y+33	; 0x21
    47c0:	0e 94 e7 3c 	call	0x79ce	; 0x79ce <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
    47c4:	88 a1       	ldd	r24, Y+32	; 0x20
    47c6:	99 a1       	ldd	r25, Y+33	; 0x21
    47c8:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	rcInterface->init();
    47cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    47d0:	0e 94 18 2a 	call	0x5430	; 0x5430 <_ZN10helicopter10interfaces24RadioControllerInterface4initEv>
	
	rcInterface->start();
    47d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    47d8:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN10helicopter10interfaces24RadioControllerInterface5startEv>
    47dc:	01 c0       	rjmp	.+2      	; 0x47e0 <main+0x532>
	
	
	while(1)
    47de:	00 00       	nop
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
    47e0:	88 a1       	ldd	r24, Y+32	; 0x20
    47e2:	99 a1       	ldd	r25, Y+33	; 0x21
    47e4:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
		
		/**
		 * Determine if the last processing frame was blown.
		 */
		if (scheduler->hasBlownFrame())
    47e8:	88 a1       	ldd	r24, Y+32	; 0x20
    47ea:	99 a1       	ldd	r25, Y+33	; 0x21
    47ec:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEv>
    47f0:	88 23       	and	r24, r24
    47f2:	a9 f3       	breq	.-22     	; 0x47de <main+0x530>
		{
			pidController->addBlownFrame();
    47f4:	8c 81       	ldd	r24, Y+4	; 0x04
    47f6:	9d 81       	ldd	r25, Y+5	; 0x05
    47f8:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN10helicopter10controller13PIDController13addBlownFrameEv>
	rcInterface->init();
	
	rcInterface->start();
	
	
	while(1)
    47fc:	f0 cf       	rjmp	.-32     	; 0x47de <main+0x530>

000047fe <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	1f 92       	push	r1
    4804:	1f 92       	push	r1
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
    480a:	9a 83       	std	Y+2, r25	; 0x02
    480c:	89 83       	std	Y+1, r24	; 0x01
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	28 e1       	ldi	r18, 0x18	; 24
    4814:	32 e0       	ldi	r19, 0x02	; 2
    4816:	fc 01       	movw	r30, r24
    4818:	31 83       	std	Z+1, r19	; 0x01
    481a:	20 83       	st	Z, r18
    481c:	89 81       	ldd	r24, Y+1	; 0x01
    481e:	9a 81       	ldd	r25, Y+2	; 0x02
    4820:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	81 70       	andi	r24, 0x01	; 1
    482a:	99 27       	eor	r25, r25
    482c:	00 97       	sbiw	r24, 0x00	; 0
    482e:	21 f0       	breq	.+8      	; 0x4838 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev+0x3a>
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	9a 81       	ldd	r25, Y+2	; 0x02
    4834:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    4838:	0f 90       	pop	r0
    483a:	0f 90       	pop	r0
    483c:	df 91       	pop	r29
    483e:	cf 91       	pop	r28
    4840:	08 95       	ret

00004842 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	1f 92       	push	r1
    4848:	1f 92       	push	r1
    484a:	cd b7       	in	r28, 0x3d	; 61
    484c:	de b7       	in	r29, 0x3e	; 62
    484e:	9a 83       	std	Y+2, r25	; 0x02
    4850:	89 83       	std	Y+1, r24	; 0x01
    4852:	89 81       	ldd	r24, Y+1	; 0x01
    4854:	9a 81       	ldd	r25, Y+2	; 0x02
    4856:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    4862:	0f 90       	pop	r0
    4864:	0f 90       	pop	r0
    4866:	df 91       	pop	r29
    4868:	cf 91       	pop	r28
    486a:	08 95       	ret

0000486c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
    486c:	0f 93       	push	r16
    486e:	1f 93       	push	r17
    4870:	cf 93       	push	r28
    4872:	df 93       	push	r29
    4874:	cd b7       	in	r28, 0x3d	; 61
    4876:	de b7       	in	r29, 0x3e	; 62
    4878:	2d 97       	sbiw	r28, 0x0d	; 13
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	9d 83       	std	Y+5, r25	; 0x05
    4886:	8c 83       	std	Y+4, r24	; 0x04
    4888:	7f 83       	std	Y+7, r23	; 0x07
    488a:	6e 83       	std	Y+6, r22	; 0x06
    488c:	59 87       	std	Y+9, r21	; 0x09
    488e:	48 87       	std	Y+8, r20	; 0x08
    4890:	3b 87       	std	Y+11, r19	; 0x0b
    4892:	2a 87       	std	Y+10, r18	; 0x0a
    4894:	1d 87       	std	Y+13, r17	; 0x0d
    4896:	0c 87       	std	Y+12, r16	; 0x0c
	for (int i = 0; i < payloadSize; i++)
    4898:	1a 82       	std	Y+2, r1	; 0x02
    489a:	19 82       	std	Y+1, r1	; 0x01
    489c:	26 c0       	rjmp	.+76     	; 0x48ea <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x7e>
	{
		byte b = msgPayload[i];
    489e:	89 81       	ldd	r24, Y+1	; 0x01
    48a0:	9a 81       	ldd	r25, Y+2	; 0x02
    48a2:	2e 81       	ldd	r18, Y+6	; 0x06
    48a4:	3f 81       	ldd	r19, Y+7	; 0x07
    48a6:	82 0f       	add	r24, r18
    48a8:	93 1f       	adc	r25, r19
    48aa:	fc 01       	movw	r30, r24
    48ac:	80 81       	ld	r24, Z
    48ae:	8b 83       	std	Y+3, r24	; 0x03
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
    48b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    48b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    48b4:	fc 01       	movw	r30, r24
    48b6:	90 81       	ld	r25, Z
    48b8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ba:	29 2f       	mov	r18, r25
    48bc:	28 0f       	add	r18, r24
    48be:	8a 85       	ldd	r24, Y+10	; 0x0a
    48c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    48c2:	fc 01       	movw	r30, r24
    48c4:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
    48c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    48c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    48ca:	fc 01       	movw	r30, r24
    48cc:	20 81       	ld	r18, Z
    48ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    48d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    48d2:	fc 01       	movw	r30, r24
    48d4:	80 81       	ld	r24, Z
    48d6:	28 0f       	add	r18, r24
    48d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    48da:	9d 85       	ldd	r25, Y+13	; 0x0d
    48dc:	fc 01       	movw	r30, r24
    48de:	20 83       	st	Z, r18
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
    48e0:	89 81       	ldd	r24, Y+1	; 0x01
    48e2:	9a 81       	ldd	r25, Y+2	; 0x02
    48e4:	01 96       	adiw	r24, 0x01	; 1
    48e6:	9a 83       	std	Y+2, r25	; 0x02
    48e8:	89 83       	std	Y+1, r24	; 0x01
    48ea:	41 e0       	ldi	r20, 0x01	; 1
    48ec:	29 81       	ldd	r18, Y+1	; 0x01
    48ee:	3a 81       	ldd	r19, Y+2	; 0x02
    48f0:	88 85       	ldd	r24, Y+8	; 0x08
    48f2:	99 85       	ldd	r25, Y+9	; 0x09
    48f4:	28 17       	cp	r18, r24
    48f6:	39 07       	cpc	r19, r25
    48f8:	0c f0       	brlt	.+2      	; 0x48fc <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x90>
    48fa:	40 e0       	ldi	r20, 0x00	; 0
    48fc:	44 23       	and	r20, r20
    48fe:	79 f6       	brne	.-98     	; 0x489e <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x32>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
    4900:	2d 96       	adiw	r28, 0x0d	; 13
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	f8 94       	cli
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	cd bf       	out	0x3d, r28	; 61
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28
    4910:	1f 91       	pop	r17
    4912:	0f 91       	pop	r16
    4914:	08 95       	ret

00004916 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
    4916:	cf 92       	push	r12
    4918:	df 92       	push	r13
    491a:	ef 92       	push	r14
    491c:	ff 92       	push	r15
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	64 97       	sbiw	r28, 0x14	; 20
    492c:	0f b6       	in	r0, 0x3f	; 63
    492e:	f8 94       	cli
    4930:	de bf       	out	0x3e, r29	; 62
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	cd bf       	out	0x3d, r28	; 61
    4936:	9a 8b       	std	Y+18, r25	; 0x12
    4938:	89 8b       	std	Y+17, r24	; 0x11
    493a:	7c 8b       	std	Y+20, r23	; 0x14
    493c:	6b 8b       	std	Y+19, r22	; 0x13
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
    493e:	ed b6       	in	r14, 0x3d	; 61
    4940:	fe b6       	in	r15, 0x3e	; 62
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
    4942:	1a 82       	std	Y+2, r1	; 0x02
    4944:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
    4946:	8b 89       	ldd	r24, Y+19	; 0x13
    4948:	9c 89       	ldd	r25, Y+20	; 0x14
    494a:	00 97       	sbiw	r24, 0x00	; 0
    494c:	09 f4       	brne	.+2      	; 0x4950 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3a>
    494e:	cb c0       	rjmp	.+406    	; 0x4ae6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1d0>
    4950:	8d b7       	in	r24, 0x3d	; 61
    4952:	9e b7       	in	r25, 0x3e	; 62
    4954:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
    4956:	8b 89       	ldd	r24, Y+19	; 0x13
    4958:	9c 89       	ldd	r25, Y+20	; 0x14
    495a:	fc 01       	movw	r30, r24
    495c:	80 81       	ld	r24, Z
    495e:	91 81       	ldd	r25, Z+1	; 0x01
    4960:	04 96       	adiw	r24, 0x04	; 4
    4962:	fc 01       	movw	r30, r24
    4964:	20 81       	ld	r18, Z
    4966:	31 81       	ldd	r19, Z+1	; 0x01
    4968:	8b 89       	ldd	r24, Y+19	; 0x13
    496a:	9c 89       	ldd	r25, Y+20	; 0x14
    496c:	f9 01       	movw	r30, r18
    496e:	19 95       	eicall
    4970:	9e 83       	std	Y+6, r25	; 0x06
    4972:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
    4974:	8b 89       	ldd	r24, Y+19	; 0x13
    4976:	9c 89       	ldd	r25, Y+20	; 0x14
    4978:	0e 94 9b 2a 	call	0x5536	; 0x5536 <_ZN10helicopter8messages7Message14getMessageSizeEv>
    497c:	98 87       	std	Y+8, r25	; 0x08
    497e:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
    4980:	8f 81       	ldd	r24, Y+7	; 0x07
    4982:	98 85       	ldd	r25, Y+8	; 0x08
    4984:	05 96       	adiw	r24, 0x05	; 5
    4986:	9a 87       	std	Y+10, r25	; 0x0a
    4988:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
    498a:	89 85       	ldd	r24, Y+9	; 0x09
    498c:	9a 85       	ldd	r25, Y+10	; 0x0a
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	9c 87       	std	Y+12, r25	; 0x0c
    4992:	8b 87       	std	Y+11, r24	; 0x0b
    4994:	01 96       	adiw	r24, 0x01	; 1
    4996:	2d b7       	in	r18, 0x3d	; 61
    4998:	3e b7       	in	r19, 0x3e	; 62
    499a:	28 1b       	sub	r18, r24
    499c:	39 0b       	sbc	r19, r25
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	f8 94       	cli
    49a2:	3e bf       	out	0x3e, r19	; 62
    49a4:	0f be       	out	0x3f, r0	; 63
    49a6:	2d bf       	out	0x3d, r18	; 61
    49a8:	8d b7       	in	r24, 0x3d	; 61
    49aa:	9e b7       	in	r25, 0x3e	; 62
    49ac:	01 96       	adiw	r24, 0x01	; 1
    49ae:	9e 87       	std	Y+14, r25	; 0x0e
    49b0:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
    49b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    49b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    49b6:	25 eb       	ldi	r18, 0xB5	; 181
    49b8:	fc 01       	movw	r30, r24
    49ba:	20 83       	st	Z, r18
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
    49bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    49be:	9e 85       	ldd	r25, Y+14	; 0x0e
    49c0:	22 e6       	ldi	r18, 0x62	; 98
    49c2:	fc 01       	movw	r30, r24
    49c4:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
    49c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ca:	27 ed       	ldi	r18, 0xD7	; 215
    49cc:	fc 01       	movw	r30, r24
    49ce:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
    49d0:	4f 81       	ldd	r20, Y+7	; 0x07
    49d2:	58 85       	ldd	r21, Y+8	; 0x08
    49d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49d8:	03 96       	adiw	r24, 0x03	; 3
    49da:	2d 81       	ldd	r18, Y+5	; 0x05
    49dc:	3e 81       	ldd	r19, Y+6	; 0x06
    49de:	b9 01       	movw	r22, r18
    49e0:	0e 94 b0 59 	call	0xb360	; 0xb360 <memcpy>
		
		byte checksumA = 0;
    49e4:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
    49e6:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
    49e8:	fe 01       	movw	r30, r28
    49ea:	70 96       	adiw	r30, 0x10	; 16
    49ec:	9e 01       	movw	r18, r28
    49ee:	21 5f       	subi	r18, 0xF1	; 241
    49f0:	3f 4f       	sbci	r19, 0xFF	; 255
    49f2:	4f 81       	ldd	r20, Y+7	; 0x07
    49f4:	58 85       	ldd	r21, Y+8	; 0x08
    49f6:	6d 81       	ldd	r22, Y+5	; 0x05
    49f8:	7e 81       	ldd	r23, Y+6	; 0x06
    49fa:	89 89       	ldd	r24, Y+17	; 0x11
    49fc:	9a 89       	ldd	r25, Y+18	; 0x12
    49fe:	8f 01       	movw	r16, r30
    4a00:	0e 94 36 24 	call	0x486c	; 0x486c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
    4a04:	89 85       	ldd	r24, Y+9	; 0x09
    4a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a08:	02 97       	sbiw	r24, 0x02	; 2
    4a0a:	4f 85       	ldd	r20, Y+15	; 0x0f
    4a0c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a0e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a10:	82 0f       	add	r24, r18
    4a12:	93 1f       	adc	r25, r19
    4a14:	fc 01       	movw	r30, r24
    4a16:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
    4a18:	89 85       	ldd	r24, Y+9	; 0x09
    4a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1c:	01 97       	sbiw	r24, 0x01	; 1
    4a1e:	48 89       	ldd	r20, Y+16	; 0x10
    4a20:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a22:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a24:	82 0f       	add	r24, r18
    4a26:	93 1f       	adc	r25, r19
    4a28:	fc 01       	movw	r30, r24
    4a2a:	40 83       	st	Z, r20
		
		if (enableTimeout)
    4a2c:	89 89       	ldd	r24, Y+17	; 0x11
    4a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    4a30:	fc 01       	movw	r30, r24
    4a32:	84 81       	ldd	r24, Z+4	; 0x04
    4a34:	88 23       	and	r24, r24
    4a36:	39 f0       	breq	.+14     	; 0x4a46 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x130>
		{
			timer->startTimer();
    4a38:	89 89       	ldd	r24, Y+17	; 0x11
    4a3a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a3c:	fc 01       	movw	r30, r24
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	93 81       	ldd	r25, Z+3	; 0x03
    4a42:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    4a46:	1c 82       	std	Y+4, r1	; 0x04
    4a48:	1b 82       	std	Y+3, r1	; 0x03
    4a4a:	27 c0       	rjmp	.+78     	; 0x4a9a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x184>
		{
			status = serialDriver->transmitByte(completeMsg[i], timer);
    4a4c:	89 89       	ldd	r24, Y+17	; 0x11
    4a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    4a50:	fc 01       	movw	r30, r24
    4a52:	80 81       	ld	r24, Z
    4a54:	91 81       	ldd	r25, Z+1	; 0x01
    4a56:	fc 01       	movw	r30, r24
    4a58:	80 81       	ld	r24, Z
    4a5a:	91 81       	ldd	r25, Z+1	; 0x01
    4a5c:	06 96       	adiw	r24, 0x06	; 6
    4a5e:	fc 01       	movw	r30, r24
    4a60:	20 81       	ld	r18, Z
    4a62:	31 81       	ldd	r19, Z+1	; 0x01
    4a64:	89 89       	ldd	r24, Y+17	; 0x11
    4a66:	9a 89       	ldd	r25, Y+18	; 0x12
    4a68:	fc 01       	movw	r30, r24
    4a6a:	42 81       	ldd	r20, Z+2	; 0x02
    4a6c:	53 81       	ldd	r21, Z+3	; 0x03
    4a6e:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a70:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a72:	8b 81       	ldd	r24, Y+3	; 0x03
    4a74:	9c 81       	ldd	r25, Y+4	; 0x04
    4a76:	86 0f       	add	r24, r22
    4a78:	97 1f       	adc	r25, r23
    4a7a:	fc 01       	movw	r30, r24
    4a7c:	60 81       	ld	r22, Z
    4a7e:	89 89       	ldd	r24, Y+17	; 0x11
    4a80:	9a 89       	ldd	r25, Y+18	; 0x12
    4a82:	fc 01       	movw	r30, r24
    4a84:	80 81       	ld	r24, Z
    4a86:	91 81       	ldd	r25, Z+1	; 0x01
    4a88:	f9 01       	movw	r30, r18
    4a8a:	19 95       	eicall
    4a8c:	9a 83       	std	Y+2, r25	; 0x02
    4a8e:	89 83       	std	Y+1, r24	; 0x01
		{
			timer->startTimer();
		}
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    4a90:	8b 81       	ldd	r24, Y+3	; 0x03
    4a92:	9c 81       	ldd	r25, Y+4	; 0x04
    4a94:	01 96       	adiw	r24, 0x01	; 1
    4a96:	9c 83       	std	Y+4, r25	; 0x04
    4a98:	8b 83       	std	Y+3, r24	; 0x03
    4a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    4a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    4a9e:	89 85       	ldd	r24, Y+9	; 0x09
    4aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa2:	28 17       	cp	r18, r24
    4aa4:	39 07       	cpc	r19, r25
    4aa6:	34 f4       	brge	.+12     	; 0x4ab4 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x19e>
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	11 f4       	brne	.+4      	; 0x4ab4 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x19e>
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	01 c0       	rjmp	.+2      	; 0x4ab6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1a0>
    4ab4:	80 e0       	ldi	r24, 0x00	; 0
    4ab6:	88 23       	and	r24, r24
    4ab8:	49 f6       	brne	.-110    	; 0x4a4c <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x136>
		{
			status = serialDriver->transmitByte(completeMsg[i], timer);
		}
		
		timer->stopTimer();
    4aba:	89 89       	ldd	r24, Y+17	; 0x11
    4abc:	9a 89       	ldd	r25, Y+18	; 0x12
    4abe:	fc 01       	movw	r30, r24
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	0e 94 ac 53 	call	0xa758	; 0xa758 <_ZN10helicopter4util5Timer9stopTimerEv>
		
		delete [] msgPayload;
    4ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    4aca:	9e 81       	ldd	r25, Y+6	; 0x06
    4acc:	00 97       	sbiw	r24, 0x00	; 0
    4ace:	21 f0       	breq	.+8      	; 0x4ad8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1c2>
    4ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad4:	0e 94 bf 4a 	call	0x957e	; 0x957e <_ZdaPv>
		msgPayload = NULL;
    4ad8:	1e 82       	std	Y+6, r1	; 0x06
    4ada:	1d 82       	std	Y+5, r1	; 0x05
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	de be       	out	0x3e, r13	; 62
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
    4ae6:	89 81       	ldd	r24, Y+1	; 0x01
    4ae8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	fe be       	out	0x3e, r15	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	ed be       	out	0x3d, r14	; 61
    4af4:	64 96       	adiw	r28, 0x14	; 20
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	f8 94       	cli
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	cd bf       	out	0x3d, r28	; 61
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	1f 91       	pop	r17
    4b06:	0f 91       	pop	r16
    4b08:	ff 90       	pop	r15
    4b0a:	ef 90       	pop	r14
    4b0c:	df 90       	pop	r13
    4b0e:	cf 90       	pop	r12
    4b10:	08 95       	ret

00004b12 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
    4b12:	cf 92       	push	r12
    4b14:	df 92       	push	r13
    4b16:	ef 92       	push	r14
    4b18:	ff 92       	push	r15
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
    4b1e:	cf 93       	push	r28
    4b20:	df 93       	push	r29
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	66 97       	sbiw	r28, 0x16	; 22
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	f8 94       	cli
    4b2c:	de bf       	out	0x3e, r29	; 62
    4b2e:	0f be       	out	0x3f, r0	; 63
    4b30:	cd bf       	out	0x3d, r28	; 61
    4b32:	9c 8b       	std	Y+20, r25	; 0x14
    4b34:	8b 8b       	std	Y+19, r24	; 0x13
    4b36:	7e 8b       	std	Y+22, r23	; 0x16
    4b38:	6d 8b       	std	Y+21, r22	; 0x15
	}
	
	timer->stopTimer();
	
	return status;
    4b3a:	ed b6       	in	r14, 0x3d	; 61
    4b3c:	fe b6       	in	r15, 0x3e	; 62
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
    4b3e:	1a 82       	std	Y+2, r1	; 0x02
    4b40:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
    4b42:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
    4b44:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
    4b46:	1d 86       	std	Y+13, r1	; 0x0d
	
	if (enableTimeout)
    4b48:	8b 89       	ldd	r24, Y+19	; 0x13
    4b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	84 81       	ldd	r24, Z+4	; 0x04
    4b50:	88 23       	and	r24, r24
    4b52:	49 f1       	breq	.+82     	; 0x4ba6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x94>
	{
		timer->startTimer();
    4b54:	8b 89       	ldd	r24, Y+19	; 0x13
    4b56:	9c 89       	ldd	r25, Y+20	; 0x14
    4b58:	fc 01       	movw	r30, r24
    4b5a:	82 81       	ldd	r24, Z+2	; 0x02
    4b5c:	93 81       	ldd	r25, Z+3	; 0x03
    4b5e:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <_ZN10helicopter4util5Timer10startTimerEv>
	}

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    4b62:	21 c0       	rjmp	.+66     	; 0x4ba6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x94>
	{
		firstSyncByte = secondSyncByte;
    4b64:	8c 81       	ldd	r24, Y+4	; 0x04
    4b66:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
    4b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b6a:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte, timer);
    4b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    4b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    4b70:	fc 01       	movw	r30, r24
    4b72:	80 81       	ld	r24, Z
    4b74:	91 81       	ldd	r25, Z+1	; 0x01
    4b76:	fc 01       	movw	r30, r24
    4b78:	80 81       	ld	r24, Z
    4b7a:	91 81       	ldd	r25, Z+1	; 0x01
    4b7c:	08 96       	adiw	r24, 0x08	; 8
    4b7e:	fc 01       	movw	r30, r24
    4b80:	20 81       	ld	r18, Z
    4b82:	31 81       	ldd	r19, Z+1	; 0x01
    4b84:	8b 89       	ldd	r24, Y+19	; 0x13
    4b86:	9c 89       	ldd	r25, Y+20	; 0x14
    4b88:	fc 01       	movw	r30, r24
    4b8a:	42 81       	ldd	r20, Z+2	; 0x02
    4b8c:	53 81       	ldd	r21, Z+3	; 0x03
    4b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b90:	9c 89       	ldd	r25, Y+20	; 0x14
    4b92:	fc 01       	movw	r30, r24
    4b94:	80 81       	ld	r24, Z
    4b96:	91 81       	ldd	r25, Z+1	; 0x01
    4b98:	be 01       	movw	r22, r28
    4b9a:	63 5f       	subi	r22, 0xF3	; 243
    4b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9e:	f9 01       	movw	r30, r18
    4ba0:	19 95       	eicall
    4ba2:	9a 83       	std	Y+2, r25	; 0x02
    4ba4:	89 83       	std	Y+1, r24	; 0x01
		timer->startTimer();
	}

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    4ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba8:	85 3b       	cpi	r24, 0xB5	; 181
    4baa:	31 f4       	brne	.+12     	; 0x4bb8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa6>
    4bac:	8c 81       	ldd	r24, Y+4	; 0x04
    4bae:	82 36       	cpi	r24, 0x62	; 98
    4bb0:	19 f4       	brne	.+6      	; 0x4bb8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa6>
    4bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb4:	87 3d       	cpi	r24, 0xD7	; 215
    4bb6:	31 f0       	breq	.+12     	; 0x4bc4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xb2>
    4bb8:	89 81       	ldd	r24, Y+1	; 0x01
    4bba:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbc:	00 97       	sbiw	r24, 0x00	; 0
    4bbe:	11 f4       	brne	.+4      	; 0x4bc4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xb2>
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	01 c0       	rjmp	.+2      	; 0x4bc6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xb4>
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	88 23       	and	r24, r24
    4bc8:	69 f6       	brne	.-102    	; 0x4b64 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x52>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receiveByte(thirdSyncByte, timer);
	}
	
	if (status == 0)
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bce:	00 97       	sbiw	r24, 0x00	; 0
    4bd0:	09 f0       	breq	.+2      	; 0x4bd4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xc2>
    4bd2:	09 c1       	rjmp	.+530    	; 0x4de6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2d4>
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
    4bd4:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType, timer);
    4bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    4bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    4bda:	fc 01       	movw	r30, r24
    4bdc:	80 81       	ld	r24, Z
    4bde:	91 81       	ldd	r25, Z+1	; 0x01
    4be0:	fc 01       	movw	r30, r24
    4be2:	80 81       	ld	r24, Z
    4be4:	91 81       	ldd	r25, Z+1	; 0x01
    4be6:	08 96       	adiw	r24, 0x08	; 8
    4be8:	fc 01       	movw	r30, r24
    4bea:	20 81       	ld	r18, Z
    4bec:	31 81       	ldd	r19, Z+1	; 0x01
    4bee:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf2:	fc 01       	movw	r30, r24
    4bf4:	42 81       	ldd	r20, Z+2	; 0x02
    4bf6:	53 81       	ldd	r21, Z+3	; 0x03
    4bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	80 81       	ld	r24, Z
    4c00:	91 81       	ldd	r25, Z+1	; 0x01
    4c02:	be 01       	movw	r22, r28
    4c04:	62 5f       	subi	r22, 0xF2	; 242
    4c06:	7f 4f       	sbci	r23, 0xFF	; 255
    4c08:	f9 01       	movw	r30, r18
    4c0a:	19 95       	eicall
    4c0c:	9a 83       	std	Y+2, r25	; 0x02
    4c0e:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	9a 81       	ldd	r25, Y+2	; 0x02
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	09 f0       	breq	.+2      	; 0x4c1a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x108>
    4c18:	e6 c0       	rjmp	.+460    	; 0x4de6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2d4>
		{
			int msgSize = 0;
    4c1a:	1e 82       	std	Y+6, r1	; 0x06
    4c1c:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
    4c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c20:	88 2f       	mov	r24, r24
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	82 30       	cpi	r24, 0x02	; 2
    4c26:	91 05       	cpc	r25, r1
    4c28:	29 f4       	brne	.+10     	; 0x4c34 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x122>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
    4c2a:	89 ee       	ldi	r24, 0xE9	; 233
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	9e 83       	std	Y+6, r25	; 0x06
    4c30:	8d 83       	std	Y+5, r24	; 0x05
					break;
    4c32:	05 c0       	rjmp	.+10     	; 0x4c3e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x12c>
				default:
					//unrecognized message type.
					status = -3;
    4c34:	8d ef       	ldi	r24, 0xFD	; 253
    4c36:	9f ef       	ldi	r25, 0xFF	; 255
    4c38:	9a 83       	std	Y+2, r25	; 0x02
    4c3a:	89 83       	std	Y+1, r24	; 0x01
					break;
    4c3c:	00 00       	nop
			}
			
			if (status == 0)
    4c3e:	89 81       	ldd	r24, Y+1	; 0x01
    4c40:	9a 81       	ldd	r25, Y+2	; 0x02
    4c42:	00 97       	sbiw	r24, 0x00	; 0
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x136>
    4c46:	cf c0       	rjmp	.+414    	; 0x4de6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2d4>
    4c48:	8d b7       	in	r24, 0x3d	; 61
    4c4a:	9e b7       	in	r25, 0x3e	; 62
    4c4c:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
    4c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c50:	9e 81       	ldd	r25, Y+6	; 0x06
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	9a 87       	std	Y+10, r25	; 0x0a
    4c56:	89 87       	std	Y+9, r24	; 0x09
    4c58:	01 96       	adiw	r24, 0x01	; 1
    4c5a:	2d b7       	in	r18, 0x3d	; 61
    4c5c:	3e b7       	in	r19, 0x3e	; 62
    4c5e:	28 1b       	sub	r18, r24
    4c60:	39 0b       	sbc	r19, r25
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	f8 94       	cli
    4c66:	3e bf       	out	0x3e, r19	; 62
    4c68:	0f be       	out	0x3f, r0	; 63
    4c6a:	2d bf       	out	0x3d, r18	; 61
    4c6c:	8d b7       	in	r24, 0x3d	; 61
    4c6e:	9e b7       	in	r25, 0x3e	; 62
    4c70:	01 96       	adiw	r24, 0x01	; 1
    4c72:	9c 87       	std	Y+12, r25	; 0x0c
    4c74:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
    4c76:	2e 85       	ldd	r18, Y+14	; 0x0e
    4c78:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	20 83       	st	Z, r18
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    4c80:	81 e0       	ldi	r24, 0x01	; 1
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	98 87       	std	Y+8, r25	; 0x08
    4c86:	8f 83       	std	Y+7, r24	; 0x07
    4c88:	25 c0       	rjmp	.+74     	; 0x4cd4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1c2>
				{
					status = serialDriver->receiveByte(messagePayload[i], timer);
    4c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c8e:	fc 01       	movw	r30, r24
    4c90:	80 81       	ld	r24, Z
    4c92:	91 81       	ldd	r25, Z+1	; 0x01
    4c94:	fc 01       	movw	r30, r24
    4c96:	80 81       	ld	r24, Z
    4c98:	91 81       	ldd	r25, Z+1	; 0x01
    4c9a:	08 96       	adiw	r24, 0x08	; 8
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	20 81       	ld	r18, Z
    4ca0:	31 81       	ldd	r19, Z+1	; 0x01
    4ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ca6:	fc 01       	movw	r30, r24
    4ca8:	42 81       	ldd	r20, Z+2	; 0x02
    4caa:	53 81       	ldd	r21, Z+3	; 0x03
    4cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    4cb2:	98 85       	ldd	r25, Y+8	; 0x08
    4cb4:	68 0f       	add	r22, r24
    4cb6:	79 1f       	adc	r23, r25
    4cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    4cba:	9c 89       	ldd	r25, Y+20	; 0x14
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	80 81       	ld	r24, Z
    4cc0:	91 81       	ldd	r25, Z+1	; 0x01
    4cc2:	f9 01       	movw	r30, r18
    4cc4:	19 95       	eicall
    4cc6:	9a 83       	std	Y+2, r25	; 0x02
    4cc8:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    4cca:	8f 81       	ldd	r24, Y+7	; 0x07
    4ccc:	98 85       	ldd	r25, Y+8	; 0x08
    4cce:	01 96       	adiw	r24, 0x01	; 1
    4cd0:	98 87       	std	Y+8, r25	; 0x08
    4cd2:	8f 83       	std	Y+7, r24	; 0x07
    4cd4:	2f 81       	ldd	r18, Y+7	; 0x07
    4cd6:	38 85       	ldd	r19, Y+8	; 0x08
    4cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cda:	9e 81       	ldd	r25, Y+6	; 0x06
    4cdc:	28 17       	cp	r18, r24
    4cde:	39 07       	cpc	r19, r25
    4ce0:	34 f4       	brge	.+12     	; 0x4cee <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1dc>
    4ce2:	89 81       	ldd	r24, Y+1	; 0x01
    4ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce6:	00 97       	sbiw	r24, 0x00	; 0
    4ce8:	11 f4       	brne	.+4      	; 0x4cee <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1dc>
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	01 c0       	rjmp	.+2      	; 0x4cf0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1de>
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	88 23       	and	r24, r24
    4cf2:	59 f6       	brne	.-106    	; 0x4c8a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x178>
				{
					status = serialDriver->receiveByte(messagePayload[i], timer);
				}
							
				if (status == 0)
    4cf4:	89 81       	ldd	r24, Y+1	; 0x01
    4cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf8:	00 97       	sbiw	r24, 0x00	; 0
    4cfa:	09 f0       	breq	.+2      	; 0x4cfe <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ec>
    4cfc:	6f c0       	rjmp	.+222    	; 0x4ddc <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2ca>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
    4cfe:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
    4d00:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
    4d02:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
    4d04:	1a 8a       	std	Y+18, r1	; 0x12
								
					status = serialDriver->receiveByte(messageChecksumA, timer);
    4d06:	8b 89       	ldd	r24, Y+19	; 0x13
    4d08:	9c 89       	ldd	r25, Y+20	; 0x14
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	80 81       	ld	r24, Z
    4d0e:	91 81       	ldd	r25, Z+1	; 0x01
    4d10:	fc 01       	movw	r30, r24
    4d12:	80 81       	ld	r24, Z
    4d14:	91 81       	ldd	r25, Z+1	; 0x01
    4d16:	08 96       	adiw	r24, 0x08	; 8
    4d18:	fc 01       	movw	r30, r24
    4d1a:	20 81       	ld	r18, Z
    4d1c:	31 81       	ldd	r19, Z+1	; 0x01
    4d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d20:	9c 89       	ldd	r25, Y+20	; 0x14
    4d22:	fc 01       	movw	r30, r24
    4d24:	42 81       	ldd	r20, Z+2	; 0x02
    4d26:	53 81       	ldd	r21, Z+3	; 0x03
    4d28:	8b 89       	ldd	r24, Y+19	; 0x13
    4d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	80 81       	ld	r24, Z
    4d30:	91 81       	ldd	r25, Z+1	; 0x01
    4d32:	be 01       	movw	r22, r28
    4d34:	61 5f       	subi	r22, 0xF1	; 241
    4d36:	7f 4f       	sbci	r23, 0xFF	; 255
    4d38:	f9 01       	movw	r30, r18
    4d3a:	19 95       	eicall
    4d3c:	9a 83       	std	Y+2, r25	; 0x02
    4d3e:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB, timer);
    4d40:	8b 89       	ldd	r24, Y+19	; 0x13
    4d42:	9c 89       	ldd	r25, Y+20	; 0x14
    4d44:	fc 01       	movw	r30, r24
    4d46:	80 81       	ld	r24, Z
    4d48:	91 81       	ldd	r25, Z+1	; 0x01
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	80 81       	ld	r24, Z
    4d4e:	91 81       	ldd	r25, Z+1	; 0x01
    4d50:	08 96       	adiw	r24, 0x08	; 8
    4d52:	fc 01       	movw	r30, r24
    4d54:	20 81       	ld	r18, Z
    4d56:	31 81       	ldd	r19, Z+1	; 0x01
    4d58:	8b 89       	ldd	r24, Y+19	; 0x13
    4d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	42 81       	ldd	r20, Z+2	; 0x02
    4d60:	53 81       	ldd	r21, Z+3	; 0x03
    4d62:	8b 89       	ldd	r24, Y+19	; 0x13
    4d64:	9c 89       	ldd	r25, Y+20	; 0x14
    4d66:	fc 01       	movw	r30, r24
    4d68:	80 81       	ld	r24, Z
    4d6a:	91 81       	ldd	r25, Z+1	; 0x01
    4d6c:	be 01       	movw	r22, r28
    4d6e:	60 5f       	subi	r22, 0xF0	; 240
    4d70:	7f 4f       	sbci	r23, 0xFF	; 255
    4d72:	f9 01       	movw	r30, r18
    4d74:	19 95       	eicall
    4d76:	9a 83       	std	Y+2, r25	; 0x02
    4d78:	89 83       	std	Y+1, r24	; 0x01
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
    4d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d7e:	fe 01       	movw	r30, r28
    4d80:	72 96       	adiw	r30, 0x12	; 18
    4d82:	9e 01       	movw	r18, r28
    4d84:	2f 5e       	subi	r18, 0xEF	; 239
    4d86:	3f 4f       	sbci	r19, 0xFF	; 255
    4d88:	4d 81       	ldd	r20, Y+5	; 0x05
    4d8a:	5e 81       	ldd	r21, Y+6	; 0x06
    4d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4d90:	8f 01       	movw	r16, r30
    4d92:	0e 94 36 24 	call	0x486c	; 0x486c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
    4d96:	99 89       	ldd	r25, Y+17	; 0x11
    4d98:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d9a:	98 17       	cp	r25, r24
    4d9c:	d9 f4       	brne	.+54     	; 0x4dd4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2c2>
    4d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    4da0:	88 89       	ldd	r24, Y+16	; 0x10
    4da2:	98 17       	cp	r25, r24
    4da4:	b9 f4       	brne	.+46     	; 0x4dd4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2c2>
					{
						//build the message
						switch(msgType)
    4da6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4da8:	88 2f       	mov	r24, r24
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	82 30       	cpi	r24, 0x02	; 2
    4dae:	91 05       	cpc	r25, r1
    4db0:	59 f4       	brne	.+22     	; 0x4dc8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2b6>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
    4db2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4db4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4db6:	0e 94 2a 38 	call	0x7054	; 0x7054 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
    4dba:	9c 01       	movw	r18, r24
    4dbc:	8d 89       	ldd	r24, Y+21	; 0x15
    4dbe:	9e 89       	ldd	r25, Y+22	; 0x16
    4dc0:	fc 01       	movw	r30, r24
    4dc2:	31 83       	std	Z+1, r19	; 0x01
    4dc4:	20 83       	st	Z, r18
							break;
    4dc6:	05 c0       	rjmp	.+10     	; 0x4dd2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2c0>
							default:
								//unrecognized message type.
								status = -3;
    4dc8:	8d ef       	ldi	r24, 0xFD	; 253
    4dca:	9f ef       	ldi	r25, 0xFF	; 255
    4dcc:	9a 83       	std	Y+2, r25	; 0x02
    4dce:	89 83       	std	Y+1, r24	; 0x01
							break;
    4dd0:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
    4dd2:	04 c0       	rjmp	.+8      	; 0x4ddc <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2ca>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -4;
    4dd4:	8c ef       	ldi	r24, 0xFC	; 252
    4dd6:	9f ef       	ldi	r25, 0xFF	; 255
    4dd8:	9a 83       	std	Y+2, r25	; 0x02
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	f8 94       	cli
    4de0:	de be       	out	0x3e, r13	; 62
    4de2:	0f be       	out	0x3f, r0	; 63
    4de4:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
    4de6:	89 81       	ldd	r24, Y+1	; 0x01
    4de8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dea:	00 97       	sbiw	r24, 0x00	; 0
    4dec:	29 f0       	breq	.+10     	; 0x4df8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2e6>
	{
		receivedMessage = NULL;
    4dee:	8d 89       	ldd	r24, Y+21	; 0x15
    4df0:	9e 89       	ldd	r25, Y+22	; 0x16
    4df2:	fc 01       	movw	r30, r24
    4df4:	11 82       	std	Z+1, r1	; 0x01
    4df6:	10 82       	st	Z, r1
	}
	
	timer->stopTimer();
    4df8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	82 81       	ldd	r24, Z+2	; 0x02
    4e00:	93 81       	ldd	r25, Z+3	; 0x03
    4e02:	0e 94 ac 53 	call	0xa758	; 0xa758 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return status;
    4e06:	89 81       	ldd	r24, Y+1	; 0x01
    4e08:	9a 81       	ldd	r25, Y+2	; 0x02
    4e0a:	0f b6       	in	r0, 0x3f	; 63
    4e0c:	f8 94       	cli
    4e0e:	fe be       	out	0x3e, r15	; 62
    4e10:	0f be       	out	0x3f, r0	; 63
    4e12:	ed be       	out	0x3d, r14	; 61
    4e14:	66 96       	adiw	r28, 0x16	; 22
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	f8 94       	cli
    4e1a:	de bf       	out	0x3e, r29	; 62
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	cd bf       	out	0x3d, r28	; 61
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	df 90       	pop	r13
    4e2e:	cf 90       	pop	r12
    4e30:	08 95       	ret

00004e32 <_ZN10helicopter10interfaces24RadioControllerInterfaceC1Ev>:
				 */
				float servoChannelValues[MAX_CHANNELS];

				static RadioControllerInterface *radioControllerInterface;
			
				RadioControllerInterface():
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	1f 92       	push	r1
    4e38:	1f 92       	push	r1
    4e3a:	cd b7       	in	r28, 0x3d	; 61
    4e3c:	de b7       	in	r29, 0x3e	; 62
    4e3e:	9a 83       	std	Y+2, r25	; 0x02
    4e40:	89 83       	std	Y+1, r24	; 0x01
				systemModel (NULL)
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	9a 81       	ldd	r25, Y+2	; 0x02
    4e46:	fc 01       	movw	r30, r24
    4e48:	17 82       	std	Z+7, r1	; 0x07
    4e4a:	16 82       	std	Z+6, r1	; 0x06
				{
					memset(servoChannelValues, 0, sizeof(servoChannelValues));
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	08 96       	adiw	r24, 0x08	; 8
    4e52:	40 e2       	ldi	r20, 0x20	; 32
    4e54:	50 e0       	ldi	r21, 0x00	; 0
    4e56:	60 e0       	ldi	r22, 0x00	; 0
    4e58:	70 e0       	ldi	r23, 0x00	; 0
    4e5a:	0e 94 b9 59 	call	0xb372	; 0xb372 <memset>
					
					previousInputCaptureRegisterValue = 0;
    4e5e:	89 81       	ldd	r24, Y+1	; 0x01
    4e60:	9a 81       	ldd	r25, Y+2	; 0x02
    4e62:	fc 01       	movw	r30, r24
    4e64:	10 82       	st	Z, r1
    4e66:	11 82       	std	Z+1, r1	; 0x01
    4e68:	12 82       	std	Z+2, r1	; 0x02
    4e6a:	13 82       	std	Z+3, r1	; 0x03
					
					servoChannelIndex = 0;
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e70:	fc 01       	movw	r30, r24
    4e72:	15 82       	std	Z+5, r1	; 0x05
    4e74:	14 82       	std	Z+4, r1	; 0x04
				}
    4e76:	0f 90       	pop	r0
    4e78:	0f 90       	pop	r0
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	08 95       	ret

00004e80 <_ZNK10helicopter10interfaces24RadioControllerInterface33PreviousInputCaptureRegisterValueEv>:
				 * the scope of this class, so the handlers need a static reference to
				 * this class.
				 */
				static RadioControllerInterface  *getRadioControllerInterface();
				
				long PreviousInputCaptureRegisterValue() const { return previousInputCaptureRegisterValue; }
    4e80:	cf 93       	push	r28
    4e82:	df 93       	push	r29
    4e84:	1f 92       	push	r1
    4e86:	1f 92       	push	r1
    4e88:	cd b7       	in	r28, 0x3d	; 61
    4e8a:	de b7       	in	r29, 0x3e	; 62
    4e8c:	9a 83       	std	Y+2, r25	; 0x02
    4e8e:	89 83       	std	Y+1, r24	; 0x01
    4e90:	89 81       	ldd	r24, Y+1	; 0x01
    4e92:	9a 81       	ldd	r25, Y+2	; 0x02
    4e94:	fc 01       	movw	r30, r24
    4e96:	80 81       	ld	r24, Z
    4e98:	91 81       	ldd	r25, Z+1	; 0x01
    4e9a:	a2 81       	ldd	r26, Z+2	; 0x02
    4e9c:	b3 81       	ldd	r27, Z+3	; 0x03
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	0f 90       	pop	r0
    4ea4:	0f 90       	pop	r0
    4ea6:	df 91       	pop	r29
    4ea8:	cf 91       	pop	r28
    4eaa:	08 95       	ret

00004eac <_ZN10helicopter10interfaces24RadioControllerInterface33PreviousInputCaptureRegisterValueEl>:
				void PreviousInputCaptureRegisterValue(long val) { previousInputCaptureRegisterValue = val; }
    4eac:	cf 93       	push	r28
    4eae:	df 93       	push	r29
    4eb0:	00 d0       	rcall	.+0      	; 0x4eb2 <_ZN10helicopter10interfaces24RadioControllerInterface33PreviousInputCaptureRegisterValueEl+0x6>
    4eb2:	00 d0       	rcall	.+0      	; 0x4eb4 <_ZN10helicopter10interfaces24RadioControllerInterface33PreviousInputCaptureRegisterValueEl+0x8>
    4eb4:	cd b7       	in	r28, 0x3d	; 61
    4eb6:	de b7       	in	r29, 0x3e	; 62
    4eb8:	9a 83       	std	Y+2, r25	; 0x02
    4eba:	89 83       	std	Y+1, r24	; 0x01
    4ebc:	4b 83       	std	Y+3, r20	; 0x03
    4ebe:	5c 83       	std	Y+4, r21	; 0x04
    4ec0:	6d 83       	std	Y+5, r22	; 0x05
    4ec2:	7e 83       	std	Y+6, r23	; 0x06
    4ec4:	29 81       	ldd	r18, Y+1	; 0x01
    4ec6:	3a 81       	ldd	r19, Y+2	; 0x02
    4ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ecc:	ad 81       	ldd	r26, Y+5	; 0x05
    4ece:	be 81       	ldd	r27, Y+6	; 0x06
    4ed0:	f9 01       	movw	r30, r18
    4ed2:	80 83       	st	Z, r24
    4ed4:	91 83       	std	Z+1, r25	; 0x01
    4ed6:	a2 83       	std	Z+2, r26	; 0x02
    4ed8:	b3 83       	std	Z+3, r27	; 0x03
    4eda:	26 96       	adiw	r28, 0x06	; 6
    4edc:	0f b6       	in	r0, 0x3f	; 63
    4ede:	f8 94       	cli
    4ee0:	de bf       	out	0x3e, r29	; 62
    4ee2:	0f be       	out	0x3f, r0	; 63
    4ee4:	cd bf       	out	0x3d, r28	; 61
    4ee6:	df 91       	pop	r29
    4ee8:	cf 91       	pop	r28
    4eea:	08 95       	ret

00004eec <_ZNK10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEv>:
					
				int ServoChannelIndex() const { return servoChannelIndex; }
    4eec:	cf 93       	push	r28
    4eee:	df 93       	push	r29
    4ef0:	1f 92       	push	r1
    4ef2:	1f 92       	push	r1
    4ef4:	cd b7       	in	r28, 0x3d	; 61
    4ef6:	de b7       	in	r29, 0x3e	; 62
    4ef8:	9a 83       	std	Y+2, r25	; 0x02
    4efa:	89 83       	std	Y+1, r24	; 0x01
    4efc:	89 81       	ldd	r24, Y+1	; 0x01
    4efe:	9a 81       	ldd	r25, Y+2	; 0x02
    4f00:	fc 01       	movw	r30, r24
    4f02:	84 81       	ldd	r24, Z+4	; 0x04
    4f04:	95 81       	ldd	r25, Z+5	; 0x05
    4f06:	0f 90       	pop	r0
    4f08:	0f 90       	pop	r0
    4f0a:	df 91       	pop	r29
    4f0c:	cf 91       	pop	r28
    4f0e:	08 95       	ret

00004f10 <_ZN10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEi>:
				void ServoChannelIndex(int val) { servoChannelIndex = val; }
    4f10:	cf 93       	push	r28
    4f12:	df 93       	push	r29
    4f14:	00 d0       	rcall	.+0      	; 0x4f16 <_ZN10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEi+0x6>
    4f16:	1f 92       	push	r1
    4f18:	cd b7       	in	r28, 0x3d	; 61
    4f1a:	de b7       	in	r29, 0x3e	; 62
    4f1c:	9a 83       	std	Y+2, r25	; 0x02
    4f1e:	89 83       	std	Y+1, r24	; 0x01
    4f20:	7c 83       	std	Y+4, r23	; 0x04
    4f22:	6b 83       	std	Y+3, r22	; 0x03
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	9a 81       	ldd	r25, Y+2	; 0x02
    4f28:	2b 81       	ldd	r18, Y+3	; 0x03
    4f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    4f2c:	fc 01       	movw	r30, r24
    4f2e:	35 83       	std	Z+5, r19	; 0x05
    4f30:	24 83       	std	Z+4, r18	; 0x04
    4f32:	0f 90       	pop	r0
    4f34:	0f 90       	pop	r0
    4f36:	0f 90       	pop	r0
    4f38:	0f 90       	pop	r0
    4f3a:	df 91       	pop	r29
    4f3c:	cf 91       	pop	r28
    4f3e:	08 95       	ret

00004f40 <_ZNK10helicopter10interfaces24RadioControllerInterface14GetSystemModelEv>:
					
				SystemModel * GetSystemModel() const { return systemModel; }
    4f40:	cf 93       	push	r28
    4f42:	df 93       	push	r29
    4f44:	1f 92       	push	r1
    4f46:	1f 92       	push	r1
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	9a 83       	std	Y+2, r25	; 0x02
    4f4e:	89 83       	std	Y+1, r24	; 0x01
    4f50:	89 81       	ldd	r24, Y+1	; 0x01
    4f52:	9a 81       	ldd	r25, Y+2	; 0x02
    4f54:	fc 01       	movw	r30, r24
    4f56:	86 81       	ldd	r24, Z+6	; 0x06
    4f58:	97 81       	ldd	r25, Z+7	; 0x07
    4f5a:	0f 90       	pop	r0
    4f5c:	0f 90       	pop	r0
    4f5e:	df 91       	pop	r29
    4f60:	cf 91       	pop	r28
    4f62:	08 95       	ret

00004f64 <_ZN10helicopter10interfaces24RadioControllerInterface20SetServoChannelValueEif>:
				void SetSystemModel(SystemModel *val) { systemModel = val; }		
					
				void SetServoChannelValue(int index, float value) 
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
    4f68:	cd b7       	in	r28, 0x3d	; 61
    4f6a:	de b7       	in	r29, 0x3e	; 62
    4f6c:	28 97       	sbiw	r28, 0x08	; 8
    4f6e:	0f b6       	in	r0, 0x3f	; 63
    4f70:	f8 94       	cli
    4f72:	de bf       	out	0x3e, r29	; 62
    4f74:	0f be       	out	0x3f, r0	; 63
    4f76:	cd bf       	out	0x3d, r28	; 61
    4f78:	9a 83       	std	Y+2, r25	; 0x02
    4f7a:	89 83       	std	Y+1, r24	; 0x01
    4f7c:	7c 83       	std	Y+4, r23	; 0x04
    4f7e:	6b 83       	std	Y+3, r22	; 0x03
    4f80:	2d 83       	std	Y+5, r18	; 0x05
    4f82:	3e 83       	std	Y+6, r19	; 0x06
    4f84:	4f 83       	std	Y+7, r20	; 0x07
    4f86:	58 87       	std	Y+8, r21	; 0x08
				{ 
					if (index < MAX_CHANNELS)
    4f88:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f8c:	88 30       	cpi	r24, 0x08	; 8
    4f8e:	91 05       	cpc	r25, r1
    4f90:	a4 f4       	brge	.+40     	; 0x4fba <_ZN10helicopter10interfaces24RadioControllerInterface20SetServoChannelValueEif+0x56>
					{
						servoChannelValues[index] = value;
    4f92:	29 81       	ldd	r18, Y+1	; 0x01
    4f94:	3a 81       	ldd	r19, Y+2	; 0x02
    4f96:	8b 81       	ldd	r24, Y+3	; 0x03
    4f98:	9c 81       	ldd	r25, Y+4	; 0x04
    4f9a:	02 96       	adiw	r24, 0x02	; 2
    4f9c:	88 0f       	add	r24, r24
    4f9e:	99 1f       	adc	r25, r25
    4fa0:	88 0f       	add	r24, r24
    4fa2:	99 1f       	adc	r25, r25
    4fa4:	28 0f       	add	r18, r24
    4fa6:	39 1f       	adc	r19, r25
    4fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    4faa:	9e 81       	ldd	r25, Y+6	; 0x06
    4fac:	af 81       	ldd	r26, Y+7	; 0x07
    4fae:	b8 85       	ldd	r27, Y+8	; 0x08
    4fb0:	f9 01       	movw	r30, r18
    4fb2:	80 83       	st	Z, r24
    4fb4:	91 83       	std	Z+1, r25	; 0x01
    4fb6:	a2 83       	std	Z+2, r26	; 0x02
    4fb8:	b3 83       	std	Z+3, r27	; 0x03
					}
				}		
    4fba:	28 96       	adiw	r28, 0x08	; 8
    4fbc:	0f b6       	in	r0, 0x3f	; 63
    4fbe:	f8 94       	cli
    4fc0:	de bf       	out	0x3e, r29	; 62
    4fc2:	0f be       	out	0x3f, r0	; 63
    4fc4:	cd bf       	out	0x3d, r28	; 61
    4fc6:	df 91       	pop	r29
    4fc8:	cf 91       	pop	r28
    4fca:	08 95       	ret

00004fcc <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi>:
				
				float GetServoChannelValue(int index) const
    4fcc:	cf 93       	push	r28
    4fce:	df 93       	push	r29
    4fd0:	00 d0       	rcall	.+0      	; 0x4fd2 <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi+0x6>
    4fd2:	1f 92       	push	r1
    4fd4:	cd b7       	in	r28, 0x3d	; 61
    4fd6:	de b7       	in	r29, 0x3e	; 62
    4fd8:	9a 83       	std	Y+2, r25	; 0x02
    4fda:	89 83       	std	Y+1, r24	; 0x01
    4fdc:	7c 83       	std	Y+4, r23	; 0x04
    4fde:	6b 83       	std	Y+3, r22	; 0x03
				{
					if (index < MAX_CHANNELS)
    4fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe4:	88 30       	cpi	r24, 0x08	; 8
    4fe6:	91 05       	cpc	r25, r1
    4fe8:	8c f4       	brge	.+34     	; 0x500c <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi+0x40>
					{
						return servoChannelValues[index];
    4fea:	29 81       	ldd	r18, Y+1	; 0x01
    4fec:	3a 81       	ldd	r19, Y+2	; 0x02
    4fee:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ff2:	02 96       	adiw	r24, 0x02	; 2
    4ff4:	88 0f       	add	r24, r24
    4ff6:	99 1f       	adc	r25, r25
    4ff8:	88 0f       	add	r24, r24
    4ffa:	99 1f       	adc	r25, r25
    4ffc:	82 0f       	add	r24, r18
    4ffe:	93 1f       	adc	r25, r19
    5000:	fc 01       	movw	r30, r24
    5002:	80 81       	ld	r24, Z
    5004:	91 81       	ldd	r25, Z+1	; 0x01
    5006:	a2 81       	ldd	r26, Z+2	; 0x02
    5008:	b3 81       	ldd	r27, Z+3	; 0x03
    500a:	03 c0       	rjmp	.+6      	; 0x5012 <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi+0x46>
					}else
					{
						return 0;
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	dc 01       	movw	r26, r24
					}
				}						
    5012:	bc 01       	movw	r22, r24
    5014:	cd 01       	movw	r24, r26
    5016:	0f 90       	pop	r0
    5018:	0f 90       	pop	r0
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	df 91       	pop	r29
    5020:	cf 91       	pop	r28
    5022:	08 95       	ret

00005024 <_Z10ScaleValuei>:

RadioControllerInterface* RadioControllerInterface::radioControllerInterface = NULL;


float ScaleValue(int servoChannelPulseWidth) 
{
    5024:	cf 93       	push	r28
    5026:	df 93       	push	r29
    5028:	00 d0       	rcall	.+0      	; 0x502a <_Z10ScaleValuei+0x6>
    502a:	00 d0       	rcall	.+0      	; 0x502c <_Z10ScaleValuei+0x8>
    502c:	cd b7       	in	r28, 0x3d	; 61
    502e:	de b7       	in	r29, 0x3e	; 62
    5030:	9e 83       	std	Y+6, r25	; 0x06
    5032:	8d 83       	std	Y+5, r24	; 0x05
	float scaledValue = (1.0f - -1.0f) / (4000.0f - 2000.0f) * (servoChannelPulseWidth - 2000.0f) + -1.0f;
    5034:	8d 81       	ldd	r24, Y+5	; 0x05
    5036:	9e 81       	ldd	r25, Y+6	; 0x06
    5038:	aa 27       	eor	r26, r26
    503a:	97 fd       	sbrc	r25, 7
    503c:	a0 95       	com	r26
    503e:	ba 2f       	mov	r27, r26
    5040:	bc 01       	movw	r22, r24
    5042:	cd 01       	movw	r24, r26
    5044:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    5048:	dc 01       	movw	r26, r24
    504a:	cb 01       	movw	r24, r22
    504c:	20 e0       	ldi	r18, 0x00	; 0
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	4a ef       	ldi	r20, 0xFA	; 250
    5052:	54 e4       	ldi	r21, 0x44	; 68
    5054:	bc 01       	movw	r22, r24
    5056:	cd 01       	movw	r24, r26
    5058:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	2f e6       	ldi	r18, 0x6F	; 111
    5062:	32 e1       	ldi	r19, 0x12	; 18
    5064:	43 e8       	ldi	r20, 0x83	; 131
    5066:	5a e3       	ldi	r21, 0x3A	; 58
    5068:	bc 01       	movw	r22, r24
    506a:	cd 01       	movw	r24, r26
    506c:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    5070:	dc 01       	movw	r26, r24
    5072:	cb 01       	movw	r24, r22
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	40 e8       	ldi	r20, 0x80	; 128
    507a:	5f e3       	ldi	r21, 0x3F	; 63
    507c:	bc 01       	movw	r22, r24
    507e:	cd 01       	movw	r24, r26
    5080:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	89 83       	std	Y+1, r24	; 0x01
    508a:	9a 83       	std	Y+2, r25	; 0x02
    508c:	ab 83       	std	Y+3, r26	; 0x03
    508e:	bc 83       	std	Y+4, r27	; 0x04
			
	if (scaledValue > 1.0f)
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	40 e8       	ldi	r20, 0x80	; 128
    5096:	5f e3       	ldi	r21, 0x3F	; 63
    5098:	69 81       	ldd	r22, Y+1	; 0x01
    509a:	7a 81       	ldd	r23, Y+2	; 0x02
    509c:	8b 81       	ldd	r24, Y+3	; 0x03
    509e:	9c 81       	ldd	r25, Y+4	; 0x04
    50a0:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    50a4:	18 16       	cp	r1, r24
    50a6:	4c f4       	brge	.+18     	; 0x50ba <_Z10ScaleValuei+0x96>
	{
		scaledValue = 1.0f;
    50a8:	80 e0       	ldi	r24, 0x00	; 0
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	a0 e8       	ldi	r26, 0x80	; 128
    50ae:	bf e3       	ldi	r27, 0x3F	; 63
    50b0:	89 83       	std	Y+1, r24	; 0x01
    50b2:	9a 83       	std	Y+2, r25	; 0x02
    50b4:	ab 83       	std	Y+3, r26	; 0x03
    50b6:	bc 83       	std	Y+4, r27	; 0x04
    50b8:	14 c0       	rjmp	.+40     	; 0x50e2 <_Z10ScaleValuei+0xbe>
	}else if (scaledValue < -1.0f)
    50ba:	20 e0       	ldi	r18, 0x00	; 0
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	40 e8       	ldi	r20, 0x80	; 128
    50c0:	5f eb       	ldi	r21, 0xBF	; 191
    50c2:	69 81       	ldd	r22, Y+1	; 0x01
    50c4:	7a 81       	ldd	r23, Y+2	; 0x02
    50c6:	8b 81       	ldd	r24, Y+3	; 0x03
    50c8:	9c 81       	ldd	r25, Y+4	; 0x04
    50ca:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    50ce:	88 23       	and	r24, r24
    50d0:	44 f4       	brge	.+16     	; 0x50e2 <_Z10ScaleValuei+0xbe>
	{
		scaledValue = -1.0f;
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	a0 e8       	ldi	r26, 0x80	; 128
    50d8:	bf eb       	ldi	r27, 0xBF	; 191
    50da:	89 83       	std	Y+1, r24	; 0x01
    50dc:	9a 83       	std	Y+2, r25	; 0x02
    50de:	ab 83       	std	Y+3, r26	; 0x03
    50e0:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return scaledValue;
    50e2:	89 81       	ldd	r24, Y+1	; 0x01
    50e4:	9a 81       	ldd	r25, Y+2	; 0x02
    50e6:	ab 81       	ldd	r26, Y+3	; 0x03
    50e8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    50ea:	bc 01       	movw	r22, r24
    50ec:	cd 01       	movw	r24, r26
    50ee:	26 96       	adiw	r28, 0x06	; 6
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	de bf       	out	0x3e, r29	; 62
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	cd bf       	out	0x3d, r28	; 61
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	08 95       	ret

00005100 <__vector_46>:
/**
 * Interrupt service routine which is called when a PPM signal's rising edge is detected
 * on the PL1 pin.
 */
ISR(TIMER5_CAPT_vect)
{
    5100:	1f 92       	push	r1
    5102:	0f 92       	push	r0
    5104:	00 90 5f 00 	lds	r0, 0x005F
    5108:	0f 92       	push	r0
    510a:	11 24       	eor	r1, r1
    510c:	00 90 5b 00 	lds	r0, 0x005B
    5110:	0f 92       	push	r0
    5112:	ef 92       	push	r14
    5114:	ff 92       	push	r15
    5116:	0f 93       	push	r16
    5118:	1f 93       	push	r17
    511a:	2f 93       	push	r18
    511c:	3f 93       	push	r19
    511e:	4f 93       	push	r20
    5120:	5f 93       	push	r21
    5122:	6f 93       	push	r22
    5124:	7f 93       	push	r23
    5126:	8f 93       	push	r24
    5128:	9f 93       	push	r25
    512a:	af 93       	push	r26
    512c:	bf 93       	push	r27
    512e:	ef 93       	push	r30
    5130:	ff 93       	push	r31
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
    513a:	66 97       	sbiw	r28, 0x16	; 22
    513c:	de bf       	out	0x3e, r29	; 62
    513e:	cd bf       	out	0x3d, r28	; 61
	RadioControllerInterface *rcInterface = RadioControllerInterface::getRadioControllerInterface();
    5140:	0e 94 f7 29 	call	0x53ee	; 0x53ee <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv>
    5144:	9e 83       	std	Y+6, r25	; 0x06
    5146:	8d 83       	std	Y+5, r24	; 0x05
	
	//Disable interrupts while reading a 16 bit register to avoid
	//an interrupt happening inbetween reading the two bytes. 
	cli(); 
    5148:	f8 94       	cli
	
	//The Input Capture Register is set to the value of the timer when the
	//input signal was received.
	long currentInputCaptureRegisterValue = ICR5;
    514a:	86 e2       	ldi	r24, 0x26	; 38
    514c:	91 e0       	ldi	r25, 0x01	; 1
    514e:	fc 01       	movw	r30, r24
    5150:	80 81       	ld	r24, Z
    5152:	91 81       	ldd	r25, Z+1	; 0x01
    5154:	cc 01       	movw	r24, r24
    5156:	a0 e0       	ldi	r26, 0x00	; 0
    5158:	b0 e0       	ldi	r27, 0x00	; 0
    515a:	8f 83       	std	Y+7, r24	; 0x07
    515c:	98 87       	std	Y+8, r25	; 0x08
    515e:	a9 87       	std	Y+9, r26	; 0x09
    5160:	ba 87       	std	Y+10, r27	; 0x0a
	
	sei();
    5162:	78 94       	sei
	
	long servoChannelPulseWidth = 0;
    5164:	19 82       	std	Y+1, r1	; 0x01
    5166:	1a 82       	std	Y+2, r1	; 0x02
    5168:	1b 82       	std	Y+3, r1	; 0x03
    516a:	1c 82       	std	Y+4, r1	; 0x04
	
	long previousInputCaptureRegisterValue = rcInterface->PreviousInputCaptureRegisterValue();
    516c:	8d 81       	ldd	r24, Y+5	; 0x05
    516e:	9e 81       	ldd	r25, Y+6	; 0x06
    5170:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_ZNK10helicopter10interfaces24RadioControllerInterface33PreviousInputCaptureRegisterValueEv>
    5174:	dc 01       	movw	r26, r24
    5176:	cb 01       	movw	r24, r22
    5178:	8b 87       	std	Y+11, r24	; 0x0b
    517a:	9c 87       	std	Y+12, r25	; 0x0c
    517c:	ad 87       	std	Y+13, r26	; 0x0d
    517e:	be 87       	std	Y+14, r27	; 0x0e
	
	//If the current value was less, then the timer has overflowed since the last
	//time we received a pulse
	if (currentInputCaptureRegisterValue < previousInputCaptureRegisterValue)
    5180:	2f 81       	ldd	r18, Y+7	; 0x07
    5182:	38 85       	ldd	r19, Y+8	; 0x08
    5184:	49 85       	ldd	r20, Y+9	; 0x09
    5186:	5a 85       	ldd	r21, Y+10	; 0x0a
    5188:	8b 85       	ldd	r24, Y+11	; 0x0b
    518a:	9c 85       	ldd	r25, Y+12	; 0x0c
    518c:	ad 85       	ldd	r26, Y+13	; 0x0d
    518e:	be 85       	ldd	r27, Y+14	; 0x0e
    5190:	28 17       	cp	r18, r24
    5192:	39 07       	cpc	r19, r25
    5194:	4a 07       	cpc	r20, r26
    5196:	5b 07       	cpc	r21, r27
    5198:	dc f4       	brge	.+54     	; 0x51d0 <__vector_46+0xd0>
	{
		servoChannelPulseWidth = (currentInputCaptureRegisterValue + RadioControllerInterface::MAX_PPM_TIMER_VALUE) - previousInputCaptureRegisterValue;
    519a:	8f 81       	ldd	r24, Y+7	; 0x07
    519c:	98 85       	ldd	r25, Y+8	; 0x08
    519e:	a9 85       	ldd	r26, Y+9	; 0x09
    51a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    51a2:	9c 01       	movw	r18, r24
    51a4:	ad 01       	movw	r20, r26
    51a6:	20 5c       	subi	r18, 0xC0	; 192
    51a8:	33 46       	sbci	r19, 0x63	; 99
    51aa:	4f 4f       	sbci	r20, 0xFF	; 255
    51ac:	5f 4f       	sbci	r21, 0xFF	; 255
    51ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    51b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    51b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    51b4:	be 85       	ldd	r27, Y+14	; 0x0e
    51b6:	79 01       	movw	r14, r18
    51b8:	8a 01       	movw	r16, r20
    51ba:	e8 1a       	sub	r14, r24
    51bc:	f9 0a       	sbc	r15, r25
    51be:	0a 0b       	sbc	r16, r26
    51c0:	1b 0b       	sbc	r17, r27
    51c2:	d8 01       	movw	r26, r16
    51c4:	c7 01       	movw	r24, r14
    51c6:	89 83       	std	Y+1, r24	; 0x01
    51c8:	9a 83       	std	Y+2, r25	; 0x02
    51ca:	ab 83       	std	Y+3, r26	; 0x03
    51cc:	bc 83       	std	Y+4, r27	; 0x04
    51ce:	14 c0       	rjmp	.+40     	; 0x51f8 <__vector_46+0xf8>
	}else
	{
		//Calculate the width of the pulse.
		servoChannelPulseWidth = currentInputCaptureRegisterValue - previousInputCaptureRegisterValue;
    51d0:	2f 81       	ldd	r18, Y+7	; 0x07
    51d2:	38 85       	ldd	r19, Y+8	; 0x08
    51d4:	49 85       	ldd	r20, Y+9	; 0x09
    51d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    51d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51da:	9c 85       	ldd	r25, Y+12	; 0x0c
    51dc:	ad 85       	ldd	r26, Y+13	; 0x0d
    51de:	be 85       	ldd	r27, Y+14	; 0x0e
    51e0:	79 01       	movw	r14, r18
    51e2:	8a 01       	movw	r16, r20
    51e4:	e8 1a       	sub	r14, r24
    51e6:	f9 0a       	sbc	r15, r25
    51e8:	0a 0b       	sbc	r16, r26
    51ea:	1b 0b       	sbc	r17, r27
    51ec:	d8 01       	movw	r26, r16
    51ee:	c7 01       	movw	r24, r14
    51f0:	89 83       	std	Y+1, r24	; 0x01
    51f2:	9a 83       	std	Y+2, r25	; 0x02
    51f4:	ab 83       	std	Y+3, r26	; 0x03
    51f6:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	rcInterface->PreviousInputCaptureRegisterValue(currentInputCaptureRegisterValue);
    51f8:	8f 81       	ldd	r24, Y+7	; 0x07
    51fa:	98 85       	ldd	r25, Y+8	; 0x08
    51fc:	a9 85       	ldd	r26, Y+9	; 0x09
    51fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    5200:	2d 81       	ldd	r18, Y+5	; 0x05
    5202:	3e 81       	ldd	r19, Y+6	; 0x06
    5204:	ac 01       	movw	r20, r24
    5206:	bd 01       	movw	r22, r26
    5208:	c9 01       	movw	r24, r18
    520a:	0e 94 56 27 	call	0x4eac	; 0x4eac <_ZN10helicopter10interfaces24RadioControllerInterface33PreviousInputCaptureRegisterValueEl>
	
	//Once all the servo channels values have been sent, a sync pulse is sent indicating
	//a restart back to the first channel.
	//Detect if it's a sync pulse and rest as appropriate
	if (servoChannelPulseWidth > RadioControllerInterface::SYNCH_PULSE_WIDTH)
    520e:	89 81       	ldd	r24, Y+1	; 0x01
    5210:	9a 81       	ldd	r25, Y+2	; 0x02
    5212:	ab 81       	ldd	r26, Y+3	; 0x03
    5214:	bc 81       	ldd	r27, Y+4	; 0x04
    5216:	81 34       	cpi	r24, 0x41	; 65
    5218:	0f e1       	ldi	r16, 0x1F	; 31
    521a:	90 07       	cpc	r25, r16
    521c:	a1 05       	cpc	r26, r1
    521e:	b1 05       	cpc	r27, r1
    5220:	3c f0       	brlt	.+14     	; 0x5230 <__vector_46+0x130>
	{
		rcInterface->ServoChannelIndex(0);
    5222:	8d 81       	ldd	r24, Y+5	; 0x05
    5224:	9e 81       	ldd	r25, Y+6	; 0x06
    5226:	60 e0       	ldi	r22, 0x00	; 0
    5228:	70 e0       	ldi	r23, 0x00	; 0
    522a:	0e 94 88 27 	call	0x4f10	; 0x4f10 <_ZN10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEi>
    522e:	be c0       	rjmp	.+380    	; 0x53ac <__vector_46+0x2ac>
	}else
	{
		if (servoChannelPulseWidth < RadioControllerInterface::MAX_USEABLE_PULSE_WIDTH && 
    5230:	89 81       	ldd	r24, Y+1	; 0x01
    5232:	9a 81       	ldd	r25, Y+2	; 0x02
    5234:	ab 81       	ldd	r26, Y+3	; 0x03
    5236:	bc 81       	ldd	r27, Y+4	; 0x04
    5238:	8a 3a       	cpi	r24, 0xAA	; 170
    523a:	1f e0       	ldi	r17, 0x0F	; 15
    523c:	91 07       	cpc	r25, r17
    523e:	a1 05       	cpc	r26, r1
    5240:	b1 05       	cpc	r27, r1
    5242:	0c f0       	brlt	.+2      	; 0x5246 <__vector_46+0x146>
    5244:	a7 c0       	rjmp	.+334    	; 0x5394 <__vector_46+0x294>
    5246:	89 81       	ldd	r24, Y+1	; 0x01
    5248:	9a 81       	ldd	r25, Y+2	; 0x02
    524a:	ab 81       	ldd	r26, Y+3	; 0x03
    524c:	bc 81       	ldd	r27, Y+4	; 0x04
    524e:	87 3c       	cpi	r24, 0xC7	; 199
    5250:	27 e0       	ldi	r18, 0x07	; 7
    5252:	92 07       	cpc	r25, r18
    5254:	a1 05       	cpc	r26, r1
    5256:	b1 05       	cpc	r27, r1
    5258:	0c f4       	brge	.+2      	; 0x525c <__vector_46+0x15c>
    525a:	9c c0       	rjmp	.+312    	; 0x5394 <__vector_46+0x294>
			servoChannelPulseWidth > RadioControllerInterface::MIN_USEABLE_PULSE_WIDTH)
		{
			int servoChannelIndex = rcInterface->ServoChannelIndex();
    525c:	8d 81       	ldd	r24, Y+5	; 0x05
    525e:	9e 81       	ldd	r25, Y+6	; 0x06
    5260:	0e 94 76 27 	call	0x4eec	; 0x4eec <_ZNK10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEv>
    5264:	98 8b       	std	Y+16, r25	; 0x10
    5266:	8f 87       	std	Y+15, r24	; 0x0f
		
			if (servoChannelIndex < RadioControllerInterface::MAX_CHANNELS)
    5268:	8f 85       	ldd	r24, Y+15	; 0x0f
    526a:	98 89       	ldd	r25, Y+16	; 0x10
    526c:	88 30       	cpi	r24, 0x08	; 8
    526e:	91 05       	cpc	r25, r1
    5270:	0c f0       	brlt	.+2      	; 0x5274 <__vector_46+0x174>
    5272:	90 c0       	rjmp	.+288    	; 0x5394 <__vector_46+0x294>
			{
				SystemModel *model = rcInterface->GetSystemModel();
    5274:	8d 81       	ldd	r24, Y+5	; 0x05
    5276:	9e 81       	ldd	r25, Y+6	; 0x06
    5278:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <_ZNK10helicopter10interfaces24RadioControllerInterface14GetSystemModelEv>
    527c:	9a 8b       	std	Y+18, r25	; 0x12
    527e:	89 8b       	std	Y+17, r24	; 0x11
				
				//Scale the servo channel pulse widths to between
				//-1, and 1 which is what the system uses for servo control.
				//-1 is 1.0 milliseconds, and 1 is 2.0 milliseconds (0 is 1.5 milliseconds)
				//new_v = (new_max - new_min) / (old_max - old_min) * (v - old_min) + new_min
				float servoControlValue = ScaleValue(servoChannelPulseWidth);
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	9a 81       	ldd	r25, Y+2	; 0x02
    5284:	0e 94 12 28 	call	0x5024	; 0x5024 <_Z10ScaleValuei>
    5288:	dc 01       	movw	r26, r24
    528a:	cb 01       	movw	r24, r22
    528c:	8b 8b       	std	Y+19, r24	; 0x13
    528e:	9c 8b       	std	Y+20, r25	; 0x14
    5290:	ad 8b       	std	Y+21, r26	; 0x15
    5292:	be 8b       	std	Y+22, r27	; 0x16

				rcInterface->SetServoChannelValue(servoChannelIndex, servoControlValue);
    5294:	8b 89       	ldd	r24, Y+19	; 0x13
    5296:	9c 89       	ldd	r25, Y+20	; 0x14
    5298:	ad 89       	ldd	r26, Y+21	; 0x15
    529a:	be 89       	ldd	r27, Y+22	; 0x16
    529c:	6f 85       	ldd	r22, Y+15	; 0x0f
    529e:	78 89       	ldd	r23, Y+16	; 0x10
    52a0:	ed 81       	ldd	r30, Y+5	; 0x05
    52a2:	fe 81       	ldd	r31, Y+6	; 0x06
    52a4:	9c 01       	movw	r18, r24
    52a6:	ad 01       	movw	r20, r26
    52a8:	cf 01       	movw	r24, r30
    52aa:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN10helicopter10interfaces24RadioControllerInterface20SetServoChannelValueEif>
				 * there are some channels not plugged in, it will cause the 
				 * servo channel index to reset back to 0, and re-write the
				 * existing servo value. This could cause a servo control value
				 * to get sent to the wrong servo. 
				 */
				if (servoChannelIndex >= RadioControllerInterface::MIN_RECEIVED_CHANNELS)
    52ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    52b0:	98 89       	ldd	r25, Y+16	; 0x10
    52b2:	85 30       	cpi	r24, 0x05	; 5
    52b4:	91 05       	cpc	r25, r1
    52b6:	0c f4       	brge	.+2      	; 0x52ba <__vector_46+0x1ba>
    52b8:	6d c0       	rjmp	.+218    	; 0x5394 <__vector_46+0x294>
				{
					//Manual mode
					if (rcInterface->GetServoChannelValue(RadioControllerInterface::FLIGHT_MODE_AUX_CHANNEL)
    52ba:	8d 81       	ldd	r24, Y+5	; 0x05
    52bc:	9e 81       	ldd	r25, Y+6	; 0x06
    52be:	64 e0       	ldi	r22, 0x04	; 4
    52c0:	70 e0       	ldi	r23, 0x00	; 0
    52c2:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi>
    52c6:	dc 01       	movw	r26, r24
    52c8:	cb 01       	movw	r24, r22
    52ca:	11 e0       	ldi	r17, 0x01	; 1
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	a9 01       	movw	r20, r18
    52d2:	bc 01       	movw	r22, r24
    52d4:	cd 01       	movw	r24, r26
    52d6:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    52da:	88 23       	and	r24, r24
    52dc:	0c f0       	brlt	.+2      	; 0x52e0 <__vector_46+0x1e0>
    52de:	10 e0       	ldi	r17, 0x00	; 0
    52e0:	11 23       	and	r17, r17
    52e2:	31 f0       	breq	.+12     	; 0x52f0 <__vector_46+0x1f0>
						 < RadioControllerInterface::MANUAL_MODE_THRESHOLD)
					{
						model->OperationalState(SystemModel::ManualControl);
    52e4:	89 89       	ldd	r24, Y+17	; 0x11
    52e6:	9a 89       	ldd	r25, Y+18	; 0x12
    52e8:	60 e0       	ldi	r22, 0x00	; 0
    52ea:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN10helicopter5model11SystemModel16OperationalStateENS1_14OperatingStateE>
    52ee:	05 c0       	rjmp	.+10     	; 0x52fa <__vector_46+0x1fa>
					}else
					{
						model->OperationalState(SystemModel::AutoPilot);
    52f0:	89 89       	ldd	r24, Y+17	; 0x11
    52f2:	9a 89       	ldd	r25, Y+18	; 0x12
    52f4:	61 e0       	ldi	r22, 0x01	; 1
    52f6:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN10helicopter5model11SystemModel16OperationalStateENS1_14OperatingStateE>
					}

					//If in Manual Control, set the servo control values.
					if (model->OperationalState() == SystemModel::ManualControl)
    52fa:	89 89       	ldd	r24, Y+17	; 0x11
    52fc:	9a 89       	ldd	r25, Y+18	; 0x12
    52fe:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZNK10helicopter5model11SystemModel16OperationalStateEv>
    5302:	98 2f       	mov	r25, r24
    5304:	81 e0       	ldi	r24, 0x01	; 1
    5306:	99 23       	and	r25, r25
    5308:	09 f0       	breq	.+2      	; 0x530c <__vector_46+0x20c>
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	88 23       	and	r24, r24
    530e:	e1 f1       	breq	.+120    	; 0x5388 <__vector_46+0x288>
					{
						model->LateralControl(rcInterface->GetServoChannelValue(RadioControllerInterface::AILERON_CHANNEL));
    5310:	8d 81       	ldd	r24, Y+5	; 0x05
    5312:	9e 81       	ldd	r25, Y+6	; 0x06
    5314:	60 e0       	ldi	r22, 0x00	; 0
    5316:	70 e0       	ldi	r23, 0x00	; 0
    5318:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi>
    531c:	dc 01       	movw	r26, r24
    531e:	cb 01       	movw	r24, r22
    5320:	29 89       	ldd	r18, Y+17	; 0x11
    5322:	3a 89       	ldd	r19, Y+18	; 0x12
    5324:	ac 01       	movw	r20, r24
    5326:	bd 01       	movw	r22, r26
    5328:	c9 01       	movw	r24, r18
    532a:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN10helicopter5model11SystemModel14LateralControlEf>
						model->LongitudeControl(rcInterface->GetServoChannelValue(RadioControllerInterface::ELEVATOR_CHANNEL));
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	61 e0       	ldi	r22, 0x01	; 1
    5334:	70 e0       	ldi	r23, 0x00	; 0
    5336:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi>
    533a:	dc 01       	movw	r26, r24
    533c:	cb 01       	movw	r24, r22
    533e:	29 89       	ldd	r18, Y+17	; 0x11
    5340:	3a 89       	ldd	r19, Y+18	; 0x12
    5342:	ac 01       	movw	r20, r24
    5344:	bd 01       	movw	r22, r26
    5346:	c9 01       	movw	r24, r18
    5348:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN10helicopter5model11SystemModel16LongitudeControlEf>
						model->MainRotorCollectiveControl(rcInterface->GetServoChannelValue(RadioControllerInterface::THROTTLE_CHANNEL));
    534c:	8d 81       	ldd	r24, Y+5	; 0x05
    534e:	9e 81       	ldd	r25, Y+6	; 0x06
    5350:	62 e0       	ldi	r22, 0x02	; 2
    5352:	70 e0       	ldi	r23, 0x00	; 0
    5354:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi>
    5358:	dc 01       	movw	r26, r24
    535a:	cb 01       	movw	r24, r22
    535c:	29 89       	ldd	r18, Y+17	; 0x11
    535e:	3a 89       	ldd	r19, Y+18	; 0x12
    5360:	ac 01       	movw	r20, r24
    5362:	bd 01       	movw	r22, r26
    5364:	c9 01       	movw	r24, r18
    5366:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN10helicopter5model11SystemModel26MainRotorCollectiveControlEf>
						model->YawControl(rcInterface->GetServoChannelValue(RadioControllerInterface::RUDDER_CHANNEL));
    536a:	8d 81       	ldd	r24, Y+5	; 0x05
    536c:	9e 81       	ldd	r25, Y+6	; 0x06
    536e:	63 e0       	ldi	r22, 0x03	; 3
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <_ZNK10helicopter10interfaces24RadioControllerInterface20GetServoChannelValueEi>
    5376:	dc 01       	movw	r26, r24
    5378:	cb 01       	movw	r24, r22
    537a:	29 89       	ldd	r18, Y+17	; 0x11
    537c:	3a 89       	ldd	r19, Y+18	; 0x12
    537e:	ac 01       	movw	r20, r24
    5380:	bd 01       	movw	r22, r26
    5382:	c9 01       	movw	r24, r18
    5384:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN10helicopter5model11SystemModel10YawControlEf>
					}
					
					rcInterface->ServoChannelIndex(0);
    5388:	8d 81       	ldd	r24, Y+5	; 0x05
    538a:	9e 81       	ldd	r25, Y+6	; 0x06
    538c:	60 e0       	ldi	r22, 0x00	; 0
    538e:	70 e0       	ldi	r23, 0x00	; 0
    5390:	0e 94 88 27 	call	0x4f10	; 0x4f10 <_ZN10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEi>
				}			
			}
		}

		rcInterface->ServoChannelIndex(rcInterface->ServoChannelIndex() + 1);
    5394:	8d 81       	ldd	r24, Y+5	; 0x05
    5396:	9e 81       	ldd	r25, Y+6	; 0x06
    5398:	0e 94 76 27 	call	0x4eec	; 0x4eec <_ZNK10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEv>
    539c:	9c 01       	movw	r18, r24
    539e:	2f 5f       	subi	r18, 0xFF	; 255
    53a0:	3f 4f       	sbci	r19, 0xFF	; 255
    53a2:	8d 81       	ldd	r24, Y+5	; 0x05
    53a4:	9e 81       	ldd	r25, Y+6	; 0x06
    53a6:	b9 01       	movw	r22, r18
    53a8:	0e 94 88 27 	call	0x4f10	; 0x4f10 <_ZN10helicopter10interfaces24RadioControllerInterface17ServoChannelIndexEi>
	}
	
}
    53ac:	66 96       	adiw	r28, 0x16	; 22
    53ae:	0f b6       	in	r0, 0x3f	; 63
    53b0:	f8 94       	cli
    53b2:	de bf       	out	0x3e, r29	; 62
    53b4:	0f be       	out	0x3f, r0	; 63
    53b6:	cd bf       	out	0x3d, r28	; 61
    53b8:	df 91       	pop	r29
    53ba:	cf 91       	pop	r28
    53bc:	ff 91       	pop	r31
    53be:	ef 91       	pop	r30
    53c0:	bf 91       	pop	r27
    53c2:	af 91       	pop	r26
    53c4:	9f 91       	pop	r25
    53c6:	8f 91       	pop	r24
    53c8:	7f 91       	pop	r23
    53ca:	6f 91       	pop	r22
    53cc:	5f 91       	pop	r21
    53ce:	4f 91       	pop	r20
    53d0:	3f 91       	pop	r19
    53d2:	2f 91       	pop	r18
    53d4:	1f 91       	pop	r17
    53d6:	0f 91       	pop	r16
    53d8:	ff 90       	pop	r15
    53da:	ef 90       	pop	r14
    53dc:	0f 90       	pop	r0
    53de:	00 92 5b 00 	sts	0x005B, r0
    53e2:	0f 90       	pop	r0
    53e4:	00 92 5f 00 	sts	0x005F, r0
    53e8:	0f 90       	pop	r0
    53ea:	1f 90       	pop	r1
    53ec:	18 95       	reti

000053ee <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv>:



RadioControllerInterface* RadioControllerInterface::getRadioControllerInterface()
{
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
	if (radioControllerInterface == NULL)
    53fa:	80 91 a8 02 	lds	r24, 0x02A8
    53fe:	90 91 a9 02 	lds	r25, 0x02A9
    5402:	00 97       	sbiw	r24, 0x00	; 0
    5404:	61 f4       	brne	.+24     	; 0x541e <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv+0x30>
	{
		radioControllerInterface = new RadioControllerInterface();
    5406:	88 e2       	ldi	r24, 0x28	; 40
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    540e:	8c 01       	movw	r16, r24
    5410:	c8 01       	movw	r24, r16
    5412:	0e 94 19 27 	call	0x4e32	; 0x4e32 <_ZN10helicopter10interfaces24RadioControllerInterfaceC1Ev>
    5416:	10 93 a9 02 	sts	0x02A9, r17
    541a:	00 93 a8 02 	sts	0x02A8, r16
	}

	return radioControllerInterface;
    541e:	80 91 a8 02 	lds	r24, 0x02A8
    5422:	90 91 a9 02 	lds	r25, 0x02A9
}
    5426:	df 91       	pop	r29
    5428:	cf 91       	pop	r28
    542a:	1f 91       	pop	r17
    542c:	0f 91       	pop	r16
    542e:	08 95       	ret

00005430 <_ZN10helicopter10interfaces24RadioControllerInterface4initEv>:
 * This counter will be used to measure the time intervals between the PPM pulses
 * to calculate the value of the control signal from the radio being sent to the servos.
 * See page 148 of atmelAVR2560_datasheet.pdf
 */
void RadioControllerInterface::init()
{
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	1f 92       	push	r1
    5436:	1f 92       	push	r1
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
    543c:	9a 83       	std	Y+2, r25	; 0x02
    543e:	89 83       	std	Y+1, r24	; 0x01
	//set PL1 pin to input. This will receive the
	//pulse position modulation signal from the pwm-ppm encoder
	DDRL &= ~(1<<PL1);
    5440:	8a e0       	ldi	r24, 0x0A	; 10
    5442:	91 e0       	ldi	r25, 0x01	; 1
    5444:	2a e0       	ldi	r18, 0x0A	; 10
    5446:	31 e0       	ldi	r19, 0x01	; 1
    5448:	f9 01       	movw	r30, r18
    544a:	20 81       	ld	r18, Z
    544c:	2d 7f       	andi	r18, 0xFD	; 253
    544e:	fc 01       	movw	r30, r24
    5450:	20 83       	st	Z, r18
	//Setup timer for Fast Pulse Width Modulation where the top
	//of the timer (when the timer resets) is set to the 
	//value given to the OCR5A register.
	//Timer Counter Overflow (TOV) flag is set when the timer reaches the TOP
	//
	TCCR5A = (1<<WGM50)|(1<<WGM51);
    5452:	80 e2       	ldi	r24, 0x20	; 32
    5454:	91 e0       	ldi	r25, 0x01	; 1
    5456:	23 e0       	ldi	r18, 0x03	; 3
    5458:	fc 01       	movw	r30, r24
    545a:	20 83       	st	Z, r18
	TCCR5B = (1<<WGM52)|(1<<WGM53);
    545c:	81 e2       	ldi	r24, 0x21	; 33
    545e:	91 e0       	ldi	r25, 0x01	; 1
    5460:	28 e1       	ldi	r18, 0x18	; 24
    5462:	fc 01       	movw	r30, r24
    5464:	20 83       	st	Z, r18
	
	//ICES5 is the input capture edge select pin. when set to 1, it triggers a capture event on a rising edge.
	TCCR5B |= (1<<ICES5); 
    5466:	81 e2       	ldi	r24, 0x21	; 33
    5468:	91 e0       	ldi	r25, 0x01	; 1
    546a:	21 e2       	ldi	r18, 0x21	; 33
    546c:	31 e0       	ldi	r19, 0x01	; 1
    546e:	f9 01       	movw	r30, r18
    5470:	20 81       	ld	r18, Z
    5472:	20 64       	ori	r18, 0x40	; 64
    5474:	fc 01       	movw	r30, r24
    5476:	20 83       	st	Z, r18
	
	//Setup the timer to reset once it reaches the MAX_PPM_TIMER_VALUE value 
	// (i.e. the timer will reset 50 times a second because the timer will reach 40,000 in 1/50th of a second)
	OCR5A = MAX_PPM_TIMER_VALUE; 
    5478:	88 e2       	ldi	r24, 0x28	; 40
    547a:	91 e0       	ldi	r25, 0x01	; 1
    547c:	20 e4       	ldi	r18, 0x40	; 64
    547e:	3c e9       	ldi	r19, 0x9C	; 156
    5480:	fc 01       	movw	r30, r24
    5482:	31 83       	std	Z+1, r19	; 0x01
    5484:	20 83       	st	Z, r18

	//Enable global interrupts
	sei();
    5486:	78 94       	sei
	
	// Enable Input Capture interrupt so the interrupt will fire when a PPM signal is received.
	TIMSK5 |= (1<<ICIE5);
    5488:	83 e7       	ldi	r24, 0x73	; 115
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	23 e7       	ldi	r18, 0x73	; 115
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	f9 01       	movw	r30, r18
    5492:	20 81       	ld	r18, Z
    5494:	20 62       	ori	r18, 0x20	; 32
    5496:	fc 01       	movw	r30, r24
    5498:	20 83       	st	Z, r18
}
    549a:	0f 90       	pop	r0
    549c:	0f 90       	pop	r0
    549e:	df 91       	pop	r29
    54a0:	cf 91       	pop	r28
    54a2:	08 95       	ret

000054a4 <_ZN10helicopter10interfaces24RadioControllerInterface5startEv>:

void RadioControllerInterface::start()
{
    54a4:	cf 93       	push	r28
    54a6:	df 93       	push	r29
    54a8:	1f 92       	push	r1
    54aa:	1f 92       	push	r1
    54ac:	cd b7       	in	r28, 0x3d	; 61
    54ae:	de b7       	in	r29, 0x3e	; 62
    54b0:	9a 83       	std	Y+2, r25	; 0x02
    54b2:	89 83       	std	Y+1, r24	; 0x01
	//Set the timer prescaler to 8. (CS = Clock Select) which starts the timer.
	TCCR5B |= (1<<CS51);	
    54b4:	81 e2       	ldi	r24, 0x21	; 33
    54b6:	91 e0       	ldi	r25, 0x01	; 1
    54b8:	21 e2       	ldi	r18, 0x21	; 33
    54ba:	31 e0       	ldi	r19, 0x01	; 1
    54bc:	f9 01       	movw	r30, r18
    54be:	20 81       	ld	r18, Z
    54c0:	22 60       	ori	r18, 0x02	; 2
    54c2:	fc 01       	movw	r30, r24
    54c4:	20 83       	st	Z, r18
}
    54c6:	0f 90       	pop	r0
    54c8:	0f 90       	pop	r0
    54ca:	df 91       	pop	r29
    54cc:	cf 91       	pop	r28
    54ce:	08 95       	ret

000054d0 <_ZN10helicopter8messages7MessageD1Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    54d0:	cf 93       	push	r28
    54d2:	df 93       	push	r29
    54d4:	1f 92       	push	r1
    54d6:	1f 92       	push	r1
    54d8:	cd b7       	in	r28, 0x3d	; 61
    54da:	de b7       	in	r29, 0x3e	; 62
    54dc:	9a 83       	std	Y+2, r25	; 0x02
    54de:	89 83       	std	Y+1, r24	; 0x01
				{
    54e0:	89 81       	ldd	r24, Y+1	; 0x01
    54e2:	9a 81       	ldd	r25, Y+2	; 0x02
    54e4:	26 e2       	ldi	r18, 0x26	; 38
    54e6:	32 e0       	ldi	r19, 0x02	; 2
    54e8:	fc 01       	movw	r30, r24
    54ea:	31 83       	std	Z+1, r19	; 0x01
    54ec:	20 83       	st	Z, r18
					
				}
    54ee:	80 e0       	ldi	r24, 0x00	; 0
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	81 70       	andi	r24, 0x01	; 1
    54f4:	99 27       	eor	r25, r25
    54f6:	00 97       	sbiw	r24, 0x00	; 0
    54f8:	21 f0       	breq	.+8      	; 0x5502 <_ZN10helicopter8messages7MessageD1Ev+0x32>
    54fa:	89 81       	ldd	r24, Y+1	; 0x01
    54fc:	9a 81       	ldd	r25, Y+2	; 0x02
    54fe:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    5502:	0f 90       	pop	r0
    5504:	0f 90       	pop	r0
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	08 95       	ret

0000550c <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    550c:	cf 93       	push	r28
    550e:	df 93       	push	r29
    5510:	1f 92       	push	r1
    5512:	1f 92       	push	r1
    5514:	cd b7       	in	r28, 0x3d	; 61
    5516:	de b7       	in	r29, 0x3e	; 62
    5518:	9a 83       	std	Y+2, r25	; 0x02
    551a:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    551c:	89 81       	ldd	r24, Y+1	; 0x01
    551e:	9a 81       	ldd	r25, Y+2	; 0x02
    5520:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN10helicopter8messages7MessageD1Ev>
    5524:	89 81       	ldd	r24, Y+1	; 0x01
    5526:	9a 81       	ldd	r25, Y+2	; 0x02
    5528:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    552c:	0f 90       	pop	r0
    552e:	0f 90       	pop	r0
    5530:	df 91       	pop	r29
    5532:	cf 91       	pop	r28
    5534:	08 95       	ret

00005536 <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
    5536:	cf 93       	push	r28
    5538:	df 93       	push	r29
    553a:	1f 92       	push	r1
    553c:	1f 92       	push	r1
    553e:	cd b7       	in	r28, 0x3d	; 61
    5540:	de b7       	in	r29, 0x3e	; 62
    5542:	9a 83       	std	Y+2, r25	; 0x02
    5544:	89 83       	std	Y+1, r24	; 0x01
	return msgSize;
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	9a 81       	ldd	r25, Y+2	; 0x02
    554a:	fc 01       	movw	r30, r24
    554c:	83 81       	ldd	r24, Z+3	; 0x03
    554e:	94 81       	ldd	r25, Z+4	; 0x04
}
    5550:	0f 90       	pop	r0
    5552:	0f 90       	pop	r0
    5554:	df 91       	pop	r29
    5556:	cf 91       	pop	r28
    5558:	08 95       	ret

0000555a <_ZN10helicopter8messages7Message8getBytesEv>:
				
/**
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
    555a:	cf 93       	push	r28
    555c:	df 93       	push	r29
    555e:	1f 92       	push	r1
    5560:	1f 92       	push	r1
    5562:	cd b7       	in	r28, 0x3d	; 61
    5564:	de b7       	in	r29, 0x3e	; 62
    5566:	9a 83       	std	Y+2, r25	; 0x02
    5568:	89 83       	std	Y+1, r24	; 0x01
	return NULL;
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	90 e0       	ldi	r25, 0x00	; 0
}
    556e:	0f 90       	pop	r0
    5570:	0f 90       	pop	r0
    5572:	df 91       	pop	r29
    5574:	cf 91       	pop	r28
    5576:	08 95       	ret

00005578 <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    5578:	cf 93       	push	r28
    557a:	df 93       	push	r29
    557c:	00 d0       	rcall	.+0      	; 0x557e <_ZN10helicopter8messages7Message12buildMessageEPh+0x6>
    557e:	1f 92       	push	r1
    5580:	cd b7       	in	r28, 0x3d	; 61
    5582:	de b7       	in	r29, 0x3e	; 62
    5584:	9a 83       	std	Y+2, r25	; 0x02
    5586:	89 83       	std	Y+1, r24	; 0x01
    5588:	7c 83       	std	Y+4, r23	; 0x04
    558a:	6b 83       	std	Y+3, r22	; 0x03
	//noop. subclass should implement this.
    558c:	0f 90       	pop	r0
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	df 91       	pop	r29
    5596:	cf 91       	pop	r28
    5598:	08 95       	ret

0000559a <_ZN10helicopter8messages7MessageC1Ehi>:
			
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
    559a:	cf 93       	push	r28
    559c:	df 93       	push	r29
    559e:	00 d0       	rcall	.+0      	; 0x55a0 <_ZN10helicopter8messages7MessageC1Ehi+0x6>
    55a0:	1f 92       	push	r1
    55a2:	1f 92       	push	r1
    55a4:	cd b7       	in	r28, 0x3d	; 61
    55a6:	de b7       	in	r29, 0x3e	; 62
    55a8:	9a 83       	std	Y+2, r25	; 0x02
    55aa:	89 83       	std	Y+1, r24	; 0x01
    55ac:	6b 83       	std	Y+3, r22	; 0x03
    55ae:	5d 83       	std	Y+5, r21	; 0x05
    55b0:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
    55b2:	89 81       	ldd	r24, Y+1	; 0x01
    55b4:	9a 81       	ldd	r25, Y+2	; 0x02
    55b6:	26 e2       	ldi	r18, 0x26	; 38
    55b8:	32 e0       	ldi	r19, 0x02	; 2
    55ba:	fc 01       	movw	r30, r24
    55bc:	31 83       	std	Z+1, r19	; 0x01
    55be:	20 83       	st	Z, r18
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	9a 81       	ldd	r25, Y+2	; 0x02
    55c4:	2b 81       	ldd	r18, Y+3	; 0x03
    55c6:	fc 01       	movw	r30, r24
    55c8:	22 83       	std	Z+2, r18	; 0x02
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	9a 81       	ldd	r25, Y+2	; 0x02
    55ce:	2c 81       	ldd	r18, Y+4	; 0x04
    55d0:	3d 81       	ldd	r19, Y+5	; 0x05
    55d2:	fc 01       	movw	r30, r24
    55d4:	34 83       	std	Z+4, r19	; 0x04
    55d6:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	0f 90       	pop	r0
    55de:	0f 90       	pop	r0
    55e0:	0f 90       	pop	r0
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	08 95       	ret

000055e8 <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    55e8:	cf 93       	push	r28
    55ea:	df 93       	push	r29
    55ec:	1f 92       	push	r1
    55ee:	1f 92       	push	r1
    55f0:	cd b7       	in	r28, 0x3d	; 61
    55f2:	de b7       	in	r29, 0x3e	; 62
    55f4:	9a 83       	std	Y+2, r25	; 0x02
    55f6:	89 83       	std	Y+1, r24	; 0x01
    55f8:	89 81       	ldd	r24, Y+1	; 0x01
    55fa:	9a 81       	ldd	r25, Y+2	; 0x02
    55fc:	41 e0       	ldi	r20, 0x01	; 1
    55fe:	50 e0       	ldi	r21, 0x00	; 0
    5600:	63 e0       	ldi	r22, 0x03	; 3
    5602:	0e 94 cd 2a 	call	0x559a	; 0x559a <_ZN10helicopter8messages7MessageC1Ehi>
    5606:	89 81       	ldd	r24, Y+1	; 0x01
    5608:	9a 81       	ldd	r25, Y+2	; 0x02
    560a:	22 e3       	ldi	r18, 0x32	; 50
    560c:	32 e0       	ldi	r19, 0x02	; 2
    560e:	fc 01       	movw	r30, r24
    5610:	31 83       	std	Z+1, r19	; 0x01
    5612:	20 83       	st	Z, r18
				{
								
				}
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	df 91       	pop	r29
    561a:	cf 91       	pop	r28
    561c:	08 95       	ret

0000561e <_ZN10helicopter8messages11SyncMessageD1Ev>:
				
				~SyncMessage()
    561e:	cf 93       	push	r28
    5620:	df 93       	push	r29
    5622:	1f 92       	push	r1
    5624:	1f 92       	push	r1
    5626:	cd b7       	in	r28, 0x3d	; 61
    5628:	de b7       	in	r29, 0x3e	; 62
    562a:	9a 83       	std	Y+2, r25	; 0x02
    562c:	89 83       	std	Y+1, r24	; 0x01
				{
    562e:	89 81       	ldd	r24, Y+1	; 0x01
    5630:	9a 81       	ldd	r25, Y+2	; 0x02
    5632:	22 e3       	ldi	r18, 0x32	; 50
    5634:	32 e0       	ldi	r19, 0x02	; 2
    5636:	fc 01       	movw	r30, r24
    5638:	31 83       	std	Z+1, r19	; 0x01
    563a:	20 83       	st	Z, r18
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	9a 81       	ldd	r25, Y+2	; 0x02
    5640:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN10helicopter8messages7MessageD1Ev>
					
				}
    5644:	80 e0       	ldi	r24, 0x00	; 0
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	81 70       	andi	r24, 0x01	; 1
    564a:	99 27       	eor	r25, r25
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	21 f0       	breq	.+8      	; 0x5658 <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
    5650:	89 81       	ldd	r24, Y+1	; 0x01
    5652:	9a 81       	ldd	r25, Y+2	; 0x02
    5654:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    5658:	0f 90       	pop	r0
    565a:	0f 90       	pop	r0
    565c:	df 91       	pop	r29
    565e:	cf 91       	pop	r28
    5660:	08 95       	ret

00005662 <_ZN10helicopter8messages11SyncMessageD0Ev>:
				SyncMessage(): Message(MessageType,MessageSize)
				{
								
				}
				
				~SyncMessage()
    5662:	cf 93       	push	r28
    5664:	df 93       	push	r29
    5666:	1f 92       	push	r1
    5668:	1f 92       	push	r1
    566a:	cd b7       	in	r28, 0x3d	; 61
    566c:	de b7       	in	r29, 0x3e	; 62
    566e:	9a 83       	std	Y+2, r25	; 0x02
    5670:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    5672:	89 81       	ldd	r24, Y+1	; 0x01
    5674:	9a 81       	ldd	r25, Y+2	; 0x02
    5676:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN10helicopter8messages11SyncMessageD1Ev>
    567a:	89 81       	ldd	r24, Y+1	; 0x01
    567c:	9a 81       	ldd	r25, Y+2	; 0x02
    567e:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	df 91       	pop	r29
    5688:	cf 91       	pop	r28
    568a:	08 95       	ret

0000568c <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    568c:	cf 93       	push	r28
    568e:	df 93       	push	r29
    5690:	00 d0       	rcall	.+0      	; 0x5692 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
    5692:	00 d0       	rcall	.+0      	; 0x5694 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
    5698:	9e 83       	std	Y+6, r25	; 0x06
    569a:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    569c:	81 e0       	ldi	r24, 0x01	; 1
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	0e 94 ae 4a 	call	0x955c	; 0x955c <_Znaj>
    56a4:	9a 83       	std	Y+2, r25	; 0x02
    56a6:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    56a8:	89 81       	ldd	r24, Y+1	; 0x01
    56aa:	9a 81       	ldd	r25, Y+2	; 0x02
    56ac:	9c 83       	std	Y+4, r25	; 0x04
    56ae:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    56b0:	8d 81       	ldd	r24, Y+5	; 0x05
    56b2:	9e 81       	ldd	r25, Y+6	; 0x06
    56b4:	fc 01       	movw	r30, r24
    56b6:	22 81       	ldd	r18, Z+2	; 0x02
    56b8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ba:	9c 81       	ldd	r25, Y+4	; 0x04
    56bc:	fc 01       	movw	r30, r24
    56be:	20 83       	st	Z, r18
	
	return msg;
    56c0:	89 81       	ldd	r24, Y+1	; 0x01
    56c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    56c4:	26 96       	adiw	r28, 0x06	; 6
    56c6:	0f b6       	in	r0, 0x3f	; 63
    56c8:	f8 94       	cli
    56ca:	de bf       	out	0x3e, r29	; 62
    56cc:	0f be       	out	0x3f, r0	; 63
    56ce:	cd bf       	out	0x3d, r28	; 61
    56d0:	df 91       	pop	r29
    56d2:	cf 91       	pop	r28
    56d4:	08 95       	ret

000056d6 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:

void SyncMessage::buildMessage(byte *message)
{
    56d6:	cf 93       	push	r28
    56d8:	df 93       	push	r29
    56da:	00 d0       	rcall	.+0      	; 0x56dc <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x6>
    56dc:	1f 92       	push	r1
    56de:	cd b7       	in	r28, 0x3d	; 61
    56e0:	de b7       	in	r29, 0x3e	; 62
    56e2:	9a 83       	std	Y+2, r25	; 0x02
    56e4:	89 83       	std	Y+1, r24	; 0x01
    56e6:	7c 83       	std	Y+4, r23	; 0x04
    56e8:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    56ea:	8b 81       	ldd	r24, Y+3	; 0x03
    56ec:	9c 81       	ldd	r25, Y+4	; 0x04
    56ee:	00 97       	sbiw	r24, 0x00	; 0
    56f0:	41 f0       	breq	.+16     	; 0x5702 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x2c>
	{
		msgType = message[0];
    56f2:	8b 81       	ldd	r24, Y+3	; 0x03
    56f4:	9c 81       	ldd	r25, Y+4	; 0x04
    56f6:	fc 01       	movw	r30, r24
    56f8:	20 81       	ld	r18, Z
    56fa:	89 81       	ldd	r24, Y+1	; 0x01
    56fc:	9a 81       	ldd	r25, Y+2	; 0x02
    56fe:	fc 01       	movw	r30, r24
    5700:	22 83       	std	Z+2, r18	; 0x02
	}
}
    5702:	0f 90       	pop	r0
    5704:	0f 90       	pop	r0
    5706:	0f 90       	pop	r0
    5708:	0f 90       	pop	r0
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	08 95       	ret

00005710 <_ZN10helicopter8messages7Message6encodeERPhRl>:
				
				/**
				 * Mem copies the value into the buffer pointer then increments
				 * the pointer location by the size of the value copied.
				 */
				void encode (byte *&buffPtr, long &val)
    5710:	cf 93       	push	r28
    5712:	df 93       	push	r29
    5714:	00 d0       	rcall	.+0      	; 0x5716 <_ZN10helicopter8messages7Message6encodeERPhRl+0x6>
    5716:	00 d0       	rcall	.+0      	; 0x5718 <_ZN10helicopter8messages7Message6encodeERPhRl+0x8>
    5718:	cd b7       	in	r28, 0x3d	; 61
    571a:	de b7       	in	r29, 0x3e	; 62
    571c:	9a 83       	std	Y+2, r25	; 0x02
    571e:	89 83       	std	Y+1, r24	; 0x01
    5720:	7c 83       	std	Y+4, r23	; 0x04
    5722:	6b 83       	std	Y+3, r22	; 0x03
    5724:	5e 83       	std	Y+6, r21	; 0x06
    5726:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    5728:	8b 81       	ldd	r24, Y+3	; 0x03
    572a:	9c 81       	ldd	r25, Y+4	; 0x04
    572c:	fc 01       	movw	r30, r24
    572e:	80 81       	ld	r24, Z
    5730:	91 81       	ldd	r25, Z+1	; 0x01
    5732:	2d 81       	ldd	r18, Y+5	; 0x05
    5734:	3e 81       	ldd	r19, Y+6	; 0x06
    5736:	44 e0       	ldi	r20, 0x04	; 4
    5738:	50 e0       	ldi	r21, 0x00	; 0
    573a:	b9 01       	movw	r22, r18
    573c:	0e 94 b0 59 	call	0xb360	; 0xb360 <memcpy>
					buffPtr += sizeof(val);
    5740:	8b 81       	ldd	r24, Y+3	; 0x03
    5742:	9c 81       	ldd	r25, Y+4	; 0x04
    5744:	fc 01       	movw	r30, r24
    5746:	80 81       	ld	r24, Z
    5748:	91 81       	ldd	r25, Z+1	; 0x01
    574a:	9c 01       	movw	r18, r24
    574c:	2c 5f       	subi	r18, 0xFC	; 252
    574e:	3f 4f       	sbci	r19, 0xFF	; 255
    5750:	8b 81       	ldd	r24, Y+3	; 0x03
    5752:	9c 81       	ldd	r25, Y+4	; 0x04
    5754:	fc 01       	movw	r30, r24
    5756:	31 83       	std	Z+1, r19	; 0x01
    5758:	20 83       	st	Z, r18
				}
    575a:	26 96       	adiw	r28, 0x06	; 6
    575c:	0f b6       	in	r0, 0x3f	; 63
    575e:	f8 94       	cli
    5760:	de bf       	out	0x3e, r29	; 62
    5762:	0f be       	out	0x3f, r0	; 63
    5764:	cd bf       	out	0x3d, r28	; 61
    5766:	df 91       	pop	r29
    5768:	cf 91       	pop	r28
    576a:	08 95       	ret

0000576c <_ZN10helicopter8messages7Message6encodeERPhRf>:
				
				void encode (byte *&buffPtr, float &val)
    576c:	cf 93       	push	r28
    576e:	df 93       	push	r29
    5770:	00 d0       	rcall	.+0      	; 0x5772 <_ZN10helicopter8messages7Message6encodeERPhRf+0x6>
    5772:	00 d0       	rcall	.+0      	; 0x5774 <_ZN10helicopter8messages7Message6encodeERPhRf+0x8>
    5774:	cd b7       	in	r28, 0x3d	; 61
    5776:	de b7       	in	r29, 0x3e	; 62
    5778:	9a 83       	std	Y+2, r25	; 0x02
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	7c 83       	std	Y+4, r23	; 0x04
    577e:	6b 83       	std	Y+3, r22	; 0x03
    5780:	5e 83       	std	Y+6, r21	; 0x06
    5782:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    5784:	8b 81       	ldd	r24, Y+3	; 0x03
    5786:	9c 81       	ldd	r25, Y+4	; 0x04
    5788:	fc 01       	movw	r30, r24
    578a:	80 81       	ld	r24, Z
    578c:	91 81       	ldd	r25, Z+1	; 0x01
    578e:	2d 81       	ldd	r18, Y+5	; 0x05
    5790:	3e 81       	ldd	r19, Y+6	; 0x06
    5792:	44 e0       	ldi	r20, 0x04	; 4
    5794:	50 e0       	ldi	r21, 0x00	; 0
    5796:	b9 01       	movw	r22, r18
    5798:	0e 94 b0 59 	call	0xb360	; 0xb360 <memcpy>
					buffPtr += sizeof(val);
    579c:	8b 81       	ldd	r24, Y+3	; 0x03
    579e:	9c 81       	ldd	r25, Y+4	; 0x04
    57a0:	fc 01       	movw	r30, r24
    57a2:	80 81       	ld	r24, Z
    57a4:	91 81       	ldd	r25, Z+1	; 0x01
    57a6:	9c 01       	movw	r18, r24
    57a8:	2c 5f       	subi	r18, 0xFC	; 252
    57aa:	3f 4f       	sbci	r19, 0xFF	; 255
    57ac:	8b 81       	ldd	r24, Y+3	; 0x03
    57ae:	9c 81       	ldd	r25, Y+4	; 0x04
    57b0:	fc 01       	movw	r30, r24
    57b2:	31 83       	std	Z+1, r19	; 0x01
    57b4:	20 83       	st	Z, r18
				}				
    57b6:	26 96       	adiw	r28, 0x06	; 6
    57b8:	0f b6       	in	r0, 0x3f	; 63
    57ba:	f8 94       	cli
    57bc:	de bf       	out	0x3e, r29	; 62
    57be:	0f be       	out	0x3f, r0	; 63
    57c0:	cd bf       	out	0x3d, r28	; 61
    57c2:	df 91       	pop	r29
    57c4:	cf 91       	pop	r28
    57c6:	08 95       	ret

000057c8 <_ZN10helicopter8messages7Message6encodeERPhRh>:
				{
					memcpy(buffPtr, &val, sizeof(val));
					buffPtr += sizeof(val);
				}		
				
				void encode (byte *&buffPtr, byte &val)
    57c8:	cf 93       	push	r28
    57ca:	df 93       	push	r29
    57cc:	00 d0       	rcall	.+0      	; 0x57ce <_ZN10helicopter8messages7Message6encodeERPhRh+0x6>
    57ce:	00 d0       	rcall	.+0      	; 0x57d0 <_ZN10helicopter8messages7Message6encodeERPhRh+0x8>
    57d0:	cd b7       	in	r28, 0x3d	; 61
    57d2:	de b7       	in	r29, 0x3e	; 62
    57d4:	9a 83       	std	Y+2, r25	; 0x02
    57d6:	89 83       	std	Y+1, r24	; 0x01
    57d8:	7c 83       	std	Y+4, r23	; 0x04
    57da:	6b 83       	std	Y+3, r22	; 0x03
    57dc:	5e 83       	std	Y+6, r21	; 0x06
    57de:	4d 83       	std	Y+5, r20	; 0x05
				{
					*buffPtr = val;
    57e0:	8b 81       	ldd	r24, Y+3	; 0x03
    57e2:	9c 81       	ldd	r25, Y+4	; 0x04
    57e4:	fc 01       	movw	r30, r24
    57e6:	80 81       	ld	r24, Z
    57e8:	91 81       	ldd	r25, Z+1	; 0x01
    57ea:	2d 81       	ldd	r18, Y+5	; 0x05
    57ec:	3e 81       	ldd	r19, Y+6	; 0x06
    57ee:	f9 01       	movw	r30, r18
    57f0:	20 81       	ld	r18, Z
    57f2:	fc 01       	movw	r30, r24
    57f4:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    57f6:	8b 81       	ldd	r24, Y+3	; 0x03
    57f8:	9c 81       	ldd	r25, Y+4	; 0x04
    57fa:	fc 01       	movw	r30, r24
    57fc:	80 81       	ld	r24, Z
    57fe:	91 81       	ldd	r25, Z+1	; 0x01
    5800:	9c 01       	movw	r18, r24
    5802:	2f 5f       	subi	r18, 0xFF	; 255
    5804:	3f 4f       	sbci	r19, 0xFF	; 255
    5806:	8b 81       	ldd	r24, Y+3	; 0x03
    5808:	9c 81       	ldd	r25, Y+4	; 0x04
    580a:	fc 01       	movw	r30, r24
    580c:	31 83       	std	Z+1, r19	; 0x01
    580e:	20 83       	st	Z, r18
				}
    5810:	26 96       	adiw	r28, 0x06	; 6
    5812:	0f b6       	in	r0, 0x3f	; 63
    5814:	f8 94       	cli
    5816:	de bf       	out	0x3e, r29	; 62
    5818:	0f be       	out	0x3f, r0	; 63
    581a:	cd bf       	out	0x3d, r28	; 61
    581c:	df 91       	pop	r29
    581e:	cf 91       	pop	r28
    5820:	08 95       	ret

00005822 <_ZN10helicopter8messages7Message6decodeERPhRh>:
				
				/**
				 * Copies the the value at the buff pointer location into the given val parameter and
				 * increments the buffer by the sizeof(val)
				 */
				void decode (byte *&buffPtr, byte &val)
    5822:	cf 93       	push	r28
    5824:	df 93       	push	r29
    5826:	00 d0       	rcall	.+0      	; 0x5828 <_ZN10helicopter8messages7Message6decodeERPhRh+0x6>
    5828:	00 d0       	rcall	.+0      	; 0x582a <_ZN10helicopter8messages7Message6decodeERPhRh+0x8>
    582a:	cd b7       	in	r28, 0x3d	; 61
    582c:	de b7       	in	r29, 0x3e	; 62
    582e:	9a 83       	std	Y+2, r25	; 0x02
    5830:	89 83       	std	Y+1, r24	; 0x01
    5832:	7c 83       	std	Y+4, r23	; 0x04
    5834:	6b 83       	std	Y+3, r22	; 0x03
    5836:	5e 83       	std	Y+6, r21	; 0x06
    5838:	4d 83       	std	Y+5, r20	; 0x05
				{
					val = *buffPtr;
    583a:	8b 81       	ldd	r24, Y+3	; 0x03
    583c:	9c 81       	ldd	r25, Y+4	; 0x04
    583e:	fc 01       	movw	r30, r24
    5840:	80 81       	ld	r24, Z
    5842:	91 81       	ldd	r25, Z+1	; 0x01
    5844:	fc 01       	movw	r30, r24
    5846:	20 81       	ld	r18, Z
    5848:	8d 81       	ldd	r24, Y+5	; 0x05
    584a:	9e 81       	ldd	r25, Y+6	; 0x06
    584c:	fc 01       	movw	r30, r24
    584e:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    5850:	8b 81       	ldd	r24, Y+3	; 0x03
    5852:	9c 81       	ldd	r25, Y+4	; 0x04
    5854:	fc 01       	movw	r30, r24
    5856:	80 81       	ld	r24, Z
    5858:	91 81       	ldd	r25, Z+1	; 0x01
    585a:	9c 01       	movw	r18, r24
    585c:	2f 5f       	subi	r18, 0xFF	; 255
    585e:	3f 4f       	sbci	r19, 0xFF	; 255
    5860:	8b 81       	ldd	r24, Y+3	; 0x03
    5862:	9c 81       	ldd	r25, Y+4	; 0x04
    5864:	fc 01       	movw	r30, r24
    5866:	31 83       	std	Z+1, r19	; 0x01
    5868:	20 83       	st	Z, r18
				}
    586a:	26 96       	adiw	r28, 0x06	; 6
    586c:	0f b6       	in	r0, 0x3f	; 63
    586e:	f8 94       	cli
    5870:	de bf       	out	0x3e, r29	; 62
    5872:	0f be       	out	0x3f, r0	; 63
    5874:	cd bf       	out	0x3d, r28	; 61
    5876:	df 91       	pop	r29
    5878:	cf 91       	pop	r28
    587a:	08 95       	ret

0000587c <_ZN10helicopter8messages7Message6decodeERPhRl>:
				
				void decode (byte *&buffPtr, long &val)
    587c:	cf 93       	push	r28
    587e:	df 93       	push	r29
    5880:	00 d0       	rcall	.+0      	; 0x5882 <_ZN10helicopter8messages7Message6decodeERPhRl+0x6>
    5882:	00 d0       	rcall	.+0      	; 0x5884 <_ZN10helicopter8messages7Message6decodeERPhRl+0x8>
    5884:	cd b7       	in	r28, 0x3d	; 61
    5886:	de b7       	in	r29, 0x3e	; 62
    5888:	9a 83       	std	Y+2, r25	; 0x02
    588a:	89 83       	std	Y+1, r24	; 0x01
    588c:	7c 83       	std	Y+4, r23	; 0x04
    588e:	6b 83       	std	Y+3, r22	; 0x03
    5890:	5e 83       	std	Y+6, r21	; 0x06
    5892:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    5894:	8b 81       	ldd	r24, Y+3	; 0x03
    5896:	9c 81       	ldd	r25, Y+4	; 0x04
    5898:	fc 01       	movw	r30, r24
    589a:	20 81       	ld	r18, Z
    589c:	31 81       	ldd	r19, Z+1	; 0x01
    589e:	8d 81       	ldd	r24, Y+5	; 0x05
    58a0:	9e 81       	ldd	r25, Y+6	; 0x06
    58a2:	44 e0       	ldi	r20, 0x04	; 4
    58a4:	50 e0       	ldi	r21, 0x00	; 0
    58a6:	b9 01       	movw	r22, r18
    58a8:	0e 94 b0 59 	call	0xb360	; 0xb360 <memcpy>
					buffPtr += sizeof(val);
    58ac:	8b 81       	ldd	r24, Y+3	; 0x03
    58ae:	9c 81       	ldd	r25, Y+4	; 0x04
    58b0:	fc 01       	movw	r30, r24
    58b2:	80 81       	ld	r24, Z
    58b4:	91 81       	ldd	r25, Z+1	; 0x01
    58b6:	9c 01       	movw	r18, r24
    58b8:	2c 5f       	subi	r18, 0xFC	; 252
    58ba:	3f 4f       	sbci	r19, 0xFF	; 255
    58bc:	8b 81       	ldd	r24, Y+3	; 0x03
    58be:	9c 81       	ldd	r25, Y+4	; 0x04
    58c0:	fc 01       	movw	r30, r24
    58c2:	31 83       	std	Z+1, r19	; 0x01
    58c4:	20 83       	st	Z, r18
				}
    58c6:	26 96       	adiw	r28, 0x06	; 6
    58c8:	0f b6       	in	r0, 0x3f	; 63
    58ca:	f8 94       	cli
    58cc:	de bf       	out	0x3e, r29	; 62
    58ce:	0f be       	out	0x3f, r0	; 63
    58d0:	cd bf       	out	0x3d, r28	; 61
    58d2:	df 91       	pop	r29
    58d4:	cf 91       	pop	r28
    58d6:	08 95       	ret

000058d8 <_ZN10helicopter8messages7Message6decodeERPhRf>:
				
				void decode (byte *&buffPtr, float &val)
    58d8:	cf 93       	push	r28
    58da:	df 93       	push	r29
    58dc:	00 d0       	rcall	.+0      	; 0x58de <_ZN10helicopter8messages7Message6decodeERPhRf+0x6>
    58de:	00 d0       	rcall	.+0      	; 0x58e0 <_ZN10helicopter8messages7Message6decodeERPhRf+0x8>
    58e0:	cd b7       	in	r28, 0x3d	; 61
    58e2:	de b7       	in	r29, 0x3e	; 62
    58e4:	9a 83       	std	Y+2, r25	; 0x02
    58e6:	89 83       	std	Y+1, r24	; 0x01
    58e8:	7c 83       	std	Y+4, r23	; 0x04
    58ea:	6b 83       	std	Y+3, r22	; 0x03
    58ec:	5e 83       	std	Y+6, r21	; 0x06
    58ee:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    58f0:	8b 81       	ldd	r24, Y+3	; 0x03
    58f2:	9c 81       	ldd	r25, Y+4	; 0x04
    58f4:	fc 01       	movw	r30, r24
    58f6:	20 81       	ld	r18, Z
    58f8:	31 81       	ldd	r19, Z+1	; 0x01
    58fa:	8d 81       	ldd	r24, Y+5	; 0x05
    58fc:	9e 81       	ldd	r25, Y+6	; 0x06
    58fe:	44 e0       	ldi	r20, 0x04	; 4
    5900:	50 e0       	ldi	r21, 0x00	; 0
    5902:	b9 01       	movw	r22, r18
    5904:	0e 94 b0 59 	call	0xb360	; 0xb360 <memcpy>
					buffPtr += sizeof(val);
    5908:	8b 81       	ldd	r24, Y+3	; 0x03
    590a:	9c 81       	ldd	r25, Y+4	; 0x04
    590c:	fc 01       	movw	r30, r24
    590e:	80 81       	ld	r24, Z
    5910:	91 81       	ldd	r25, Z+1	; 0x01
    5912:	9c 01       	movw	r18, r24
    5914:	2c 5f       	subi	r18, 0xFC	; 252
    5916:	3f 4f       	sbci	r19, 0xFF	; 255
    5918:	8b 81       	ldd	r24, Y+3	; 0x03
    591a:	9c 81       	ldd	r25, Y+4	; 0x04
    591c:	fc 01       	movw	r30, r24
    591e:	31 83       	std	Z+1, r19	; 0x01
    5920:	20 83       	st	Z, r18
				}
    5922:	26 96       	adiw	r28, 0x06	; 6
    5924:	0f b6       	in	r0, 0x3f	; 63
    5926:	f8 94       	cli
    5928:	de bf       	out	0x3e, r29	; 62
    592a:	0f be       	out	0x3f, r0	; 63
    592c:	cd bf       	out	0x3d, r28	; 61
    592e:	df 91       	pop	r29
    5930:	cf 91       	pop	r28
    5932:	08 95       	ret

00005934 <_ZN10helicopter5model11SystemModel13MagYawDegreesEf>:
			 * Z axis is pointing up out of the FC
			 */
			

			float MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(float val) { magYawDegrees = val; }	
    5934:	cf 93       	push	r28
    5936:	df 93       	push	r29
    5938:	00 d0       	rcall	.+0      	; 0x593a <_ZN10helicopter5model11SystemModel13MagYawDegreesEf+0x6>
    593a:	00 d0       	rcall	.+0      	; 0x593c <_ZN10helicopter5model11SystemModel13MagYawDegreesEf+0x8>
    593c:	cd b7       	in	r28, 0x3d	; 61
    593e:	de b7       	in	r29, 0x3e	; 62
    5940:	9a 83       	std	Y+2, r25	; 0x02
    5942:	89 83       	std	Y+1, r24	; 0x01
    5944:	4b 83       	std	Y+3, r20	; 0x03
    5946:	5c 83       	std	Y+4, r21	; 0x04
    5948:	6d 83       	std	Y+5, r22	; 0x05
    594a:	7e 83       	std	Y+6, r23	; 0x06
    594c:	29 81       	ldd	r18, Y+1	; 0x01
    594e:	3a 81       	ldd	r19, Y+2	; 0x02
    5950:	8b 81       	ldd	r24, Y+3	; 0x03
    5952:	9c 81       	ldd	r25, Y+4	; 0x04
    5954:	ad 81       	ldd	r26, Y+5	; 0x05
    5956:	be 81       	ldd	r27, Y+6	; 0x06
    5958:	f9 01       	movw	r30, r18
    595a:	81 83       	std	Z+1, r24	; 0x01
    595c:	92 83       	std	Z+2, r25	; 0x02
    595e:	a3 83       	std	Z+3, r26	; 0x03
    5960:	b4 83       	std	Z+4, r27	; 0x04
    5962:	26 96       	adiw	r28, 0x06	; 6
    5964:	0f b6       	in	r0, 0x3f	; 63
    5966:	f8 94       	cli
    5968:	de bf       	out	0x3e, r29	; 62
    596a:	0f be       	out	0x3f, r0	; 63
    596c:	cd bf       	out	0x3d, r28	; 61
    596e:	df 91       	pop	r29
    5970:	cf 91       	pop	r28
    5972:	08 95       	ret

00005974 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEf>:
				
			float YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(float val) { yawControlBeforeServoLimitsAdjustment = val;}
				
			float YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(float val) { yawVelocityDegreesPerSecond = val;}
    5974:	cf 93       	push	r28
    5976:	df 93       	push	r29
    5978:	00 d0       	rcall	.+0      	; 0x597a <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEf+0x6>
    597a:	00 d0       	rcall	.+0      	; 0x597c <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEf+0x8>
    597c:	cd b7       	in	r28, 0x3d	; 61
    597e:	de b7       	in	r29, 0x3e	; 62
    5980:	9a 83       	std	Y+2, r25	; 0x02
    5982:	89 83       	std	Y+1, r24	; 0x01
    5984:	4b 83       	std	Y+3, r20	; 0x03
    5986:	5c 83       	std	Y+4, r21	; 0x04
    5988:	6d 83       	std	Y+5, r22	; 0x05
    598a:	7e 83       	std	Y+6, r23	; 0x06
    598c:	29 81       	ldd	r18, Y+1	; 0x01
    598e:	3a 81       	ldd	r19, Y+2	; 0x02
    5990:	8b 81       	ldd	r24, Y+3	; 0x03
    5992:	9c 81       	ldd	r25, Y+4	; 0x04
    5994:	ad 81       	ldd	r26, Y+5	; 0x05
    5996:	be 81       	ldd	r27, Y+6	; 0x06
    5998:	f9 01       	movw	r30, r18
    599a:	81 8b       	std	Z+17, r24	; 0x11
    599c:	92 8b       	std	Z+18, r25	; 0x12
    599e:	a3 8b       	std	Z+19, r26	; 0x13
    59a0:	b4 8b       	std	Z+20, r27	; 0x14
    59a2:	26 96       	adiw	r28, 0x06	; 6
    59a4:	0f b6       	in	r0, 0x3f	; 63
    59a6:	f8 94       	cli
    59a8:	de bf       	out	0x3e, r29	; 62
    59aa:	0f be       	out	0x3f, r0	; 63
    59ac:	cd bf       	out	0x3d, r28	; 61
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	08 95       	ret

000059b4 <_ZNK10helicopter5model11SystemModel15YawProportionalEv>:
			void ReferenceYawVelocityDegreesPerSecond(float val) { referenceYawVelocityDegreesPerSecond = val;}
				
			float YawIntegral() const {return yawIntegral;}
			void YawIntegral(float val) { yawIntegral = val;}

			float YawProportional() const {return yawProportional;}
    59b4:	cf 93       	push	r28
    59b6:	df 93       	push	r29
    59b8:	1f 92       	push	r1
    59ba:	1f 92       	push	r1
    59bc:	cd b7       	in	r28, 0x3d	; 61
    59be:	de b7       	in	r29, 0x3e	; 62
    59c0:	9a 83       	std	Y+2, r25	; 0x02
    59c2:	89 83       	std	Y+1, r24	; 0x01
    59c4:	89 81       	ldd	r24, Y+1	; 0x01
    59c6:	9a 81       	ldd	r25, Y+2	; 0x02
    59c8:	fc 01       	movw	r30, r24
    59ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    59cc:	96 8d       	ldd	r25, Z+30	; 0x1e
    59ce:	a7 8d       	ldd	r26, Z+31	; 0x1f
    59d0:	b0 a1       	ldd	r27, Z+32	; 0x20
    59d2:	bc 01       	movw	r22, r24
    59d4:	cd 01       	movw	r24, r26
    59d6:	0f 90       	pop	r0
    59d8:	0f 90       	pop	r0
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	08 95       	ret

000059e0 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>:
			void YawProportional(float val) { yawProportional = val;}

			float YawDerivativeError() const {return yawDerivativeError;}
    59e0:	cf 93       	push	r28
    59e2:	df 93       	push	r29
    59e4:	1f 92       	push	r1
    59e6:	1f 92       	push	r1
    59e8:	cd b7       	in	r28, 0x3d	; 61
    59ea:	de b7       	in	r29, 0x3e	; 62
    59ec:	9a 83       	std	Y+2, r25	; 0x02
    59ee:	89 83       	std	Y+1, r24	; 0x01
    59f0:	89 81       	ldd	r24, Y+1	; 0x01
    59f2:	9a 81       	ldd	r25, Y+2	; 0x02
    59f4:	fc 01       	movw	r30, r24
    59f6:	81 a1       	ldd	r24, Z+33	; 0x21
    59f8:	92 a1       	ldd	r25, Z+34	; 0x22
    59fa:	a3 a1       	ldd	r26, Z+35	; 0x23
    59fc:	b4 a1       	ldd	r27, Z+36	; 0x24
    59fe:	bc 01       	movw	r22, r24
    5a00:	cd 01       	movw	r24, r26
    5a02:	0f 90       	pop	r0
    5a04:	0f 90       	pop	r0
    5a06:	df 91       	pop	r29
    5a08:	cf 91       	pop	r28
    5a0a:	08 95       	ret

00005a0c <_ZN10helicopter5model11SystemModel24XVelocityMetersPerSecondEf>:

			float LongitudeControl() const {return longitudeControl;}
			void LongitudeControl(float val) { longitudeControl = val;}
				
			float XVelocityMetersPerSecond() const {return xVelocityMetersPerSecond;}
			void XVelocityMetersPerSecond(float val) { xVelocityMetersPerSecond = val;}
    5a0c:	cf 93       	push	r28
    5a0e:	df 93       	push	r29
    5a10:	00 d0       	rcall	.+0      	; 0x5a12 <_ZN10helicopter5model11SystemModel24XVelocityMetersPerSecondEf+0x6>
    5a12:	00 d0       	rcall	.+0      	; 0x5a14 <_ZN10helicopter5model11SystemModel24XVelocityMetersPerSecondEf+0x8>
    5a14:	cd b7       	in	r28, 0x3d	; 61
    5a16:	de b7       	in	r29, 0x3e	; 62
    5a18:	9a 83       	std	Y+2, r25	; 0x02
    5a1a:	89 83       	std	Y+1, r24	; 0x01
    5a1c:	4b 83       	std	Y+3, r20	; 0x03
    5a1e:	5c 83       	std	Y+4, r21	; 0x04
    5a20:	6d 83       	std	Y+5, r22	; 0x05
    5a22:	7e 83       	std	Y+6, r23	; 0x06
    5a24:	29 81       	ldd	r18, Y+1	; 0x01
    5a26:	3a 81       	ldd	r19, Y+2	; 0x02
    5a28:	8b 81       	ldd	r24, Y+3	; 0x03
    5a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a2c:	ad 81       	ldd	r26, Y+5	; 0x05
    5a2e:	be 81       	ldd	r27, Y+6	; 0x06
    5a30:	f9 01       	movw	r30, r18
    5a32:	85 ab       	std	Z+53, r24	; 0x35
    5a34:	96 ab       	std	Z+54, r25	; 0x36
    5a36:	a7 ab       	std	Z+55, r26	; 0x37
    5a38:	b0 af       	std	Z+56, r27	; 0x38
    5a3a:	26 96       	adiw	r28, 0x06	; 6
    5a3c:	0f b6       	in	r0, 0x3f	; 63
    5a3e:	f8 94       	cli
    5a40:	de bf       	out	0x3e, r29	; 62
    5a42:	0f be       	out	0x3f, r0	; 63
    5a44:	cd bf       	out	0x3d, r28	; 61
    5a46:	df 91       	pop	r29
    5a48:	cf 91       	pop	r28
    5a4a:	08 95       	ret

00005a4c <_ZNK10helicopter5model11SystemModel13XProportionalEv>:
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
				
			float XLongitudeOuterLoopSetpoint() const {return xLongitudeOuterLoopSetpoint;}
			void XLongitudeOuterLoopSetpoint(float val) { xLongitudeOuterLoopSetpoint = val;}
				
			float XProportional() const {return xProportional;}
    5a4c:	cf 93       	push	r28
    5a4e:	df 93       	push	r29
    5a50:	1f 92       	push	r1
    5a52:	1f 92       	push	r1
    5a54:	cd b7       	in	r28, 0x3d	; 61
    5a56:	de b7       	in	r29, 0x3e	; 62
    5a58:	9a 83       	std	Y+2, r25	; 0x02
    5a5a:	89 83       	std	Y+1, r24	; 0x01
    5a5c:	89 81       	ldd	r24, Y+1	; 0x01
    5a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a60:	8f 5b       	subi	r24, 0xBF	; 191
    5a62:	9f 4f       	sbci	r25, 0xFF	; 255
    5a64:	fc 01       	movw	r30, r24
    5a66:	80 81       	ld	r24, Z
    5a68:	91 81       	ldd	r25, Z+1	; 0x01
    5a6a:	a2 81       	ldd	r26, Z+2	; 0x02
    5a6c:	b3 81       	ldd	r27, Z+3	; 0x03
    5a6e:	bc 01       	movw	r22, r24
    5a70:	cd 01       	movw	r24, r26
    5a72:	0f 90       	pop	r0
    5a74:	0f 90       	pop	r0
    5a76:	df 91       	pop	r29
    5a78:	cf 91       	pop	r28
    5a7a:	08 95       	ret

00005a7c <_ZNK10helicopter5model11SystemModel16XDerivativeErrorEv>:
			void XProportional(float val) { xProportional = val;}
				
			float XIntegral() const {return xIntegral;}
			void XIntegral(float val) { xIntegral = val;}
				
			float XDerivativeError() const {return xDerivativeError;}
    5a7c:	cf 93       	push	r28
    5a7e:	df 93       	push	r29
    5a80:	1f 92       	push	r1
    5a82:	1f 92       	push	r1
    5a84:	cd b7       	in	r28, 0x3d	; 61
    5a86:	de b7       	in	r29, 0x3e	; 62
    5a88:	9a 83       	std	Y+2, r25	; 0x02
    5a8a:	89 83       	std	Y+1, r24	; 0x01
    5a8c:	89 81       	ldd	r24, Y+1	; 0x01
    5a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a90:	87 5b       	subi	r24, 0xB7	; 183
    5a92:	9f 4f       	sbci	r25, 0xFF	; 255
    5a94:	fc 01       	movw	r30, r24
    5a96:	80 81       	ld	r24, Z
    5a98:	91 81       	ldd	r25, Z+1	; 0x01
    5a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    5a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    5a9e:	bc 01       	movw	r22, r24
    5aa0:	cd 01       	movw	r24, r26
    5aa2:	0f 90       	pop	r0
    5aa4:	0f 90       	pop	r0
    5aa6:	df 91       	pop	r29
    5aa8:	cf 91       	pop	r28
    5aaa:	08 95       	ret

00005aac <_ZN10helicopter5model11SystemModel17ThetaPitchDegreesEf>:
			void XDerivativeError(float val) { xDerivativeError = val;}
				
		
			float ThetaPitchDegrees() const {return thetaPitchDegrees;}
			void ThetaPitchDegrees(float val) {thetaPitchDegrees = val;}
    5aac:	cf 93       	push	r28
    5aae:	df 93       	push	r29
    5ab0:	00 d0       	rcall	.+0      	; 0x5ab2 <_ZN10helicopter5model11SystemModel17ThetaPitchDegreesEf+0x6>
    5ab2:	00 d0       	rcall	.+0      	; 0x5ab4 <_ZN10helicopter5model11SystemModel17ThetaPitchDegreesEf+0x8>
    5ab4:	cd b7       	in	r28, 0x3d	; 61
    5ab6:	de b7       	in	r29, 0x3e	; 62
    5ab8:	9a 83       	std	Y+2, r25	; 0x02
    5aba:	89 83       	std	Y+1, r24	; 0x01
    5abc:	4b 83       	std	Y+3, r20	; 0x03
    5abe:	5c 83       	std	Y+4, r21	; 0x04
    5ac0:	6d 83       	std	Y+5, r22	; 0x05
    5ac2:	7e 83       	std	Y+6, r23	; 0x06
    5ac4:	89 81       	ldd	r24, Y+1	; 0x01
    5ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac8:	9c 01       	movw	r18, r24
    5aca:	23 5b       	subi	r18, 0xB3	; 179
    5acc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ace:	8b 81       	ldd	r24, Y+3	; 0x03
    5ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ad2:	ad 81       	ldd	r26, Y+5	; 0x05
    5ad4:	be 81       	ldd	r27, Y+6	; 0x06
    5ad6:	f9 01       	movw	r30, r18
    5ad8:	80 83       	st	Z, r24
    5ada:	91 83       	std	Z+1, r25	; 0x01
    5adc:	a2 83       	std	Z+2, r26	; 0x02
    5ade:	b3 83       	std	Z+3, r27	; 0x03
    5ae0:	26 96       	adiw	r28, 0x06	; 6
    5ae2:	0f b6       	in	r0, 0x3f	; 63
    5ae4:	f8 94       	cli
    5ae6:	de bf       	out	0x3e, r29	; 62
    5ae8:	0f be       	out	0x3f, r0	; 63
    5aea:	cd bf       	out	0x3d, r28	; 61
    5aec:	df 91       	pop	r29
    5aee:	cf 91       	pop	r28
    5af0:	08 95       	ret

00005af2 <_ZN10helicopter5model11SystemModel33PitchAngularVelocityRadsPerSecondEf>:
		
			float PitchAngularVelocityRadsPerSecond() const {return pitchAngularVelocityRadsPerSecond;}
			void PitchAngularVelocityRadsPerSecond(float val) {pitchAngularVelocityRadsPerSecond = val;}
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	00 d0       	rcall	.+0      	; 0x5af8 <_ZN10helicopter5model11SystemModel33PitchAngularVelocityRadsPerSecondEf+0x6>
    5af8:	00 d0       	rcall	.+0      	; 0x5afa <_ZN10helicopter5model11SystemModel33PitchAngularVelocityRadsPerSecondEf+0x8>
    5afa:	cd b7       	in	r28, 0x3d	; 61
    5afc:	de b7       	in	r29, 0x3e	; 62
    5afe:	9a 83       	std	Y+2, r25	; 0x02
    5b00:	89 83       	std	Y+1, r24	; 0x01
    5b02:	4b 83       	std	Y+3, r20	; 0x03
    5b04:	5c 83       	std	Y+4, r21	; 0x04
    5b06:	6d 83       	std	Y+5, r22	; 0x05
    5b08:	7e 83       	std	Y+6, r23	; 0x06
    5b0a:	89 81       	ldd	r24, Y+1	; 0x01
    5b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b0e:	9c 01       	movw	r18, r24
    5b10:	2f 5a       	subi	r18, 0xAF	; 175
    5b12:	3f 4f       	sbci	r19, 0xFF	; 255
    5b14:	8b 81       	ldd	r24, Y+3	; 0x03
    5b16:	9c 81       	ldd	r25, Y+4	; 0x04
    5b18:	ad 81       	ldd	r26, Y+5	; 0x05
    5b1a:	be 81       	ldd	r27, Y+6	; 0x06
    5b1c:	f9 01       	movw	r30, r18
    5b1e:	80 83       	st	Z, r24
    5b20:	91 83       	std	Z+1, r25	; 0x01
    5b22:	a2 83       	std	Z+2, r26	; 0x02
    5b24:	b3 83       	std	Z+3, r27	; 0x03
    5b26:	26 96       	adiw	r28, 0x06	; 6
    5b28:	0f b6       	in	r0, 0x3f	; 63
    5b2a:	f8 94       	cli
    5b2c:	de bf       	out	0x3e, r29	; 62
    5b2e:	0f be       	out	0x3f, r0	; 63
    5b30:	cd bf       	out	0x3d, r28	; 61
    5b32:	df 91       	pop	r29
    5b34:	cf 91       	pop	r28
    5b36:	08 95       	ret

00005b38 <_ZN10helicopter5model11SystemModel24YVelocityMetersPerSecondEf>:

			float LateralControl() const {return lateralControl;}
			void LateralControl(float val) { lateralControl = val;}

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}
    5b38:	cf 93       	push	r28
    5b3a:	df 93       	push	r29
    5b3c:	00 d0       	rcall	.+0      	; 0x5b3e <_ZN10helicopter5model11SystemModel24YVelocityMetersPerSecondEf+0x6>
    5b3e:	00 d0       	rcall	.+0      	; 0x5b40 <_ZN10helicopter5model11SystemModel24YVelocityMetersPerSecondEf+0x8>
    5b40:	cd b7       	in	r28, 0x3d	; 61
    5b42:	de b7       	in	r29, 0x3e	; 62
    5b44:	9a 83       	std	Y+2, r25	; 0x02
    5b46:	89 83       	std	Y+1, r24	; 0x01
    5b48:	4b 83       	std	Y+3, r20	; 0x03
    5b4a:	5c 83       	std	Y+4, r21	; 0x04
    5b4c:	6d 83       	std	Y+5, r22	; 0x05
    5b4e:	7e 83       	std	Y+6, r23	; 0x06
    5b50:	89 81       	ldd	r24, Y+1	; 0x01
    5b52:	9a 81       	ldd	r25, Y+2	; 0x02
    5b54:	9c 01       	movw	r18, r24
    5b56:	2b 59       	subi	r18, 0x9B	; 155
    5b58:	3f 4f       	sbci	r19, 0xFF	; 255
    5b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5b5e:	ad 81       	ldd	r26, Y+5	; 0x05
    5b60:	be 81       	ldd	r27, Y+6	; 0x06
    5b62:	f9 01       	movw	r30, r18
    5b64:	80 83       	st	Z, r24
    5b66:	91 83       	std	Z+1, r25	; 0x01
    5b68:	a2 83       	std	Z+2, r26	; 0x02
    5b6a:	b3 83       	std	Z+3, r27	; 0x03
    5b6c:	26 96       	adiw	r28, 0x06	; 6
    5b6e:	0f b6       	in	r0, 0x3f	; 63
    5b70:	f8 94       	cli
    5b72:	de bf       	out	0x3e, r29	; 62
    5b74:	0f be       	out	0x3f, r0	; 63
    5b76:	cd bf       	out	0x3d, r28	; 61
    5b78:	df 91       	pop	r29
    5b7a:	cf 91       	pop	r28
    5b7c:	08 95       	ret

00005b7e <_ZNK10helicopter5model11SystemModel13YProportionalEv>:
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}

			float YLateralOuterLoopSetpoint() const {return yLateralOuterLoopSetpoint;}
			void YLateralOuterLoopSetpoint(float val) { yLateralOuterLoopSetpoint = val;}

			float YProportional() const {return yProportional;}
    5b7e:	cf 93       	push	r28
    5b80:	df 93       	push	r29
    5b82:	1f 92       	push	r1
    5b84:	1f 92       	push	r1
    5b86:	cd b7       	in	r28, 0x3d	; 61
    5b88:	de b7       	in	r29, 0x3e	; 62
    5b8a:	9a 83       	std	Y+2, r25	; 0x02
    5b8c:	89 83       	std	Y+1, r24	; 0x01
    5b8e:	89 81       	ldd	r24, Y+1	; 0x01
    5b90:	9a 81       	ldd	r25, Y+2	; 0x02
    5b92:	8f 58       	subi	r24, 0x8F	; 143
    5b94:	9f 4f       	sbci	r25, 0xFF	; 255
    5b96:	fc 01       	movw	r30, r24
    5b98:	80 81       	ld	r24, Z
    5b9a:	91 81       	ldd	r25, Z+1	; 0x01
    5b9c:	a2 81       	ldd	r26, Z+2	; 0x02
    5b9e:	b3 81       	ldd	r27, Z+3	; 0x03
    5ba0:	bc 01       	movw	r22, r24
    5ba2:	cd 01       	movw	r24, r26
    5ba4:	0f 90       	pop	r0
    5ba6:	0f 90       	pop	r0
    5ba8:	df 91       	pop	r29
    5baa:	cf 91       	pop	r28
    5bac:	08 95       	ret

00005bae <_ZNK10helicopter5model11SystemModel16YDerivativeErrorEv>:
			void YProportional(float val) { yProportional = val;}

			float YIntegral() const {return yIntegral;}
			void YIntegral(float val) { yIntegral = val;}

			float YDerivativeError() const {return yDerivativeError;}
    5bae:	cf 93       	push	r28
    5bb0:	df 93       	push	r29
    5bb2:	1f 92       	push	r1
    5bb4:	1f 92       	push	r1
    5bb6:	cd b7       	in	r28, 0x3d	; 61
    5bb8:	de b7       	in	r29, 0x3e	; 62
    5bba:	9a 83       	std	Y+2, r25	; 0x02
    5bbc:	89 83       	std	Y+1, r24	; 0x01
    5bbe:	89 81       	ldd	r24, Y+1	; 0x01
    5bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5bc2:	87 58       	subi	r24, 0x87	; 135
    5bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc6:	fc 01       	movw	r30, r24
    5bc8:	80 81       	ld	r24, Z
    5bca:	91 81       	ldd	r25, Z+1	; 0x01
    5bcc:	a2 81       	ldd	r26, Z+2	; 0x02
    5bce:	b3 81       	ldd	r27, Z+3	; 0x03
    5bd0:	bc 01       	movw	r22, r24
    5bd2:	cd 01       	movw	r24, r26
    5bd4:	0f 90       	pop	r0
    5bd6:	0f 90       	pop	r0
    5bd8:	df 91       	pop	r29
    5bda:	cf 91       	pop	r28
    5bdc:	08 95       	ret

00005bde <_ZN10helicopter5model11SystemModel14PhiRollDegreesEf>:
			void YDerivativeError(float val) { yDerivativeError = val;}


			float PhiRollDegrees() const {return phiRollDegrees;}
			void PhiRollDegrees(float val) {phiRollDegrees = val;}
    5bde:	cf 93       	push	r28
    5be0:	df 93       	push	r29
    5be2:	00 d0       	rcall	.+0      	; 0x5be4 <_ZN10helicopter5model11SystemModel14PhiRollDegreesEf+0x6>
    5be4:	00 d0       	rcall	.+0      	; 0x5be6 <_ZN10helicopter5model11SystemModel14PhiRollDegreesEf+0x8>
    5be6:	cd b7       	in	r28, 0x3d	; 61
    5be8:	de b7       	in	r29, 0x3e	; 62
    5bea:	9a 83       	std	Y+2, r25	; 0x02
    5bec:	89 83       	std	Y+1, r24	; 0x01
    5bee:	4b 83       	std	Y+3, r20	; 0x03
    5bf0:	5c 83       	std	Y+4, r21	; 0x04
    5bf2:	6d 83       	std	Y+5, r22	; 0x05
    5bf4:	7e 83       	std	Y+6, r23	; 0x06
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfa:	9c 01       	movw	r18, r24
    5bfc:	23 58       	subi	r18, 0x83	; 131
    5bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    5c00:	8b 81       	ldd	r24, Y+3	; 0x03
    5c02:	9c 81       	ldd	r25, Y+4	; 0x04
    5c04:	ad 81       	ldd	r26, Y+5	; 0x05
    5c06:	be 81       	ldd	r27, Y+6	; 0x06
    5c08:	f9 01       	movw	r30, r18
    5c0a:	80 83       	st	Z, r24
    5c0c:	91 83       	std	Z+1, r25	; 0x01
    5c0e:	a2 83       	std	Z+2, r26	; 0x02
    5c10:	b3 83       	std	Z+3, r27	; 0x03
    5c12:	26 96       	adiw	r28, 0x06	; 6
    5c14:	0f b6       	in	r0, 0x3f	; 63
    5c16:	f8 94       	cli
    5c18:	de bf       	out	0x3e, r29	; 62
    5c1a:	0f be       	out	0x3f, r0	; 63
    5c1c:	cd bf       	out	0x3d, r28	; 61
    5c1e:	df 91       	pop	r29
    5c20:	cf 91       	pop	r28
    5c22:	08 95       	ret

00005c24 <_ZN10helicopter5model11SystemModel32RollAngularVelocityRadsPerSecondEf>:

			float RollAngularVelocityRadsPerSecond() const {return rollAngularVelocityRadsPerSecond;}
			void RollAngularVelocityRadsPerSecond(float val) {rollAngularVelocityRadsPerSecond = val;}
    5c24:	cf 93       	push	r28
    5c26:	df 93       	push	r29
    5c28:	00 d0       	rcall	.+0      	; 0x5c2a <_ZN10helicopter5model11SystemModel32RollAngularVelocityRadsPerSecondEf+0x6>
    5c2a:	00 d0       	rcall	.+0      	; 0x5c2c <_ZN10helicopter5model11SystemModel32RollAngularVelocityRadsPerSecondEf+0x8>
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	9a 83       	std	Y+2, r25	; 0x02
    5c32:	89 83       	std	Y+1, r24	; 0x01
    5c34:	4b 83       	std	Y+3, r20	; 0x03
    5c36:	5c 83       	std	Y+4, r21	; 0x04
    5c38:	6d 83       	std	Y+5, r22	; 0x05
    5c3a:	7e 83       	std	Y+6, r23	; 0x06
    5c3c:	89 81       	ldd	r24, Y+1	; 0x01
    5c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c40:	9c 01       	movw	r18, r24
    5c42:	2f 57       	subi	r18, 0x7F	; 127
    5c44:	3f 4f       	sbci	r19, 0xFF	; 255
    5c46:	8b 81       	ldd	r24, Y+3	; 0x03
    5c48:	9c 81       	ldd	r25, Y+4	; 0x04
    5c4a:	ad 81       	ldd	r26, Y+5	; 0x05
    5c4c:	be 81       	ldd	r27, Y+6	; 0x06
    5c4e:	f9 01       	movw	r30, r18
    5c50:	80 83       	st	Z, r24
    5c52:	91 83       	std	Z+1, r25	; 0x01
    5c54:	a2 83       	std	Z+2, r26	; 0x02
    5c56:	b3 83       	std	Z+3, r27	; 0x03
    5c58:	26 96       	adiw	r28, 0x06	; 6
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	08 95       	ret

00005c6a <_ZN10helicopter5model11SystemModel15AltitudeFeetAglEf>:
						
						
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
			void AltitudeFeetAgl(float val) { altitudeFeetAgl = val; }
    5c6a:	cf 93       	push	r28
    5c6c:	df 93       	push	r29
    5c6e:	00 d0       	rcall	.+0      	; 0x5c70 <_ZN10helicopter5model11SystemModel15AltitudeFeetAglEf+0x6>
    5c70:	00 d0       	rcall	.+0      	; 0x5c72 <_ZN10helicopter5model11SystemModel15AltitudeFeetAglEf+0x8>
    5c72:	cd b7       	in	r28, 0x3d	; 61
    5c74:	de b7       	in	r29, 0x3e	; 62
    5c76:	9a 83       	std	Y+2, r25	; 0x02
    5c78:	89 83       	std	Y+1, r24	; 0x01
    5c7a:	4b 83       	std	Y+3, r20	; 0x03
    5c7c:	5c 83       	std	Y+4, r21	; 0x04
    5c7e:	6d 83       	std	Y+5, r22	; 0x05
    5c80:	7e 83       	std	Y+6, r23	; 0x06
    5c82:	89 81       	ldd	r24, Y+1	; 0x01
    5c84:	9a 81       	ldd	r25, Y+2	; 0x02
    5c86:	9c 01       	movw	r18, r24
    5c88:	2b 57       	subi	r18, 0x7B	; 123
    5c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c90:	ad 81       	ldd	r26, Y+5	; 0x05
    5c92:	be 81       	ldd	r27, Y+6	; 0x06
    5c94:	f9 01       	movw	r30, r18
    5c96:	80 83       	st	Z, r24
    5c98:	91 83       	std	Z+1, r25	; 0x01
    5c9a:	a2 83       	std	Z+2, r26	; 0x02
    5c9c:	b3 83       	std	Z+3, r27	; 0x03
    5c9e:	26 96       	adiw	r28, 0x06	; 6
    5ca0:	0f b6       	in	r0, 0x3f	; 63
    5ca2:	f8 94       	cli
    5ca4:	de bf       	out	0x3e, r29	; 62
    5ca6:	0f be       	out	0x3f, r0	; 63
    5ca8:	cd bf       	out	0x3d, r28	; 61
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	08 95       	ret

00005cb0 <_ZN10helicopter5model11SystemModel22ZVelocityFeetPerSecondEf>:

			float MainRotorControlBeforeServoLimitsAdjustment() const {return mainRotorControlBeforeServoLimitsAdjustment;}
			void MainRotorControlBeforeServoLimitsAdjustment(float val) { mainRotorControlBeforeServoLimitsAdjustment = val;}

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}
    5cb0:	cf 93       	push	r28
    5cb2:	df 93       	push	r29
    5cb4:	00 d0       	rcall	.+0      	; 0x5cb6 <_ZN10helicopter5model11SystemModel22ZVelocityFeetPerSecondEf+0x6>
    5cb6:	00 d0       	rcall	.+0      	; 0x5cb8 <_ZN10helicopter5model11SystemModel22ZVelocityFeetPerSecondEf+0x8>
    5cb8:	cd b7       	in	r28, 0x3d	; 61
    5cba:	de b7       	in	r29, 0x3e	; 62
    5cbc:	9a 83       	std	Y+2, r25	; 0x02
    5cbe:	89 83       	std	Y+1, r24	; 0x01
    5cc0:	4b 83       	std	Y+3, r20	; 0x03
    5cc2:	5c 83       	std	Y+4, r21	; 0x04
    5cc4:	6d 83       	std	Y+5, r22	; 0x05
    5cc6:	7e 83       	std	Y+6, r23	; 0x06
    5cc8:	89 81       	ldd	r24, Y+1	; 0x01
    5cca:	9a 81       	ldd	r25, Y+2	; 0x02
    5ccc:	9c 01       	movw	r18, r24
    5cce:	27 56       	subi	r18, 0x67	; 103
    5cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    5cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd6:	ad 81       	ldd	r26, Y+5	; 0x05
    5cd8:	be 81       	ldd	r27, Y+6	; 0x06
    5cda:	f9 01       	movw	r30, r18
    5cdc:	80 83       	st	Z, r24
    5cde:	91 83       	std	Z+1, r25	; 0x01
    5ce0:	a2 83       	std	Z+2, r26	; 0x02
    5ce2:	b3 83       	std	Z+3, r27	; 0x03
    5ce4:	26 96       	adiw	r28, 0x06	; 6
    5ce6:	0f b6       	in	r0, 0x3f	; 63
    5ce8:	f8 94       	cli
    5cea:	de bf       	out	0x3e, r29	; 62
    5cec:	0f be       	out	0x3f, r0	; 63
    5cee:	cd bf       	out	0x3d, r28	; 61
    5cf0:	df 91       	pop	r29
    5cf2:	cf 91       	pop	r28
    5cf4:	08 95       	ret

00005cf6 <_ZNK10helicopter5model11SystemModel13ZProportionalEv>:
			void ReferenceZVelocityFeetPerSecond(float val) { referenceZVelocityFeetPerSecond = val;}

			float ZIntegral() const {return zIntegral;}
			void ZIntegral(float val) { zIntegral = val;}

			float ZProportional() const {return zProportional;}
    5cf6:	cf 93       	push	r28
    5cf8:	df 93       	push	r29
    5cfa:	1f 92       	push	r1
    5cfc:	1f 92       	push	r1
    5cfe:	cd b7       	in	r28, 0x3d	; 61
    5d00:	de b7       	in	r29, 0x3e	; 62
    5d02:	9a 83       	std	Y+2, r25	; 0x02
    5d04:	89 83       	std	Y+1, r24	; 0x01
    5d06:	89 81       	ldd	r24, Y+1	; 0x01
    5d08:	9a 81       	ldd	r25, Y+2	; 0x02
    5d0a:	8b 55       	subi	r24, 0x5B	; 91
    5d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0e:	fc 01       	movw	r30, r24
    5d10:	80 81       	ld	r24, Z
    5d12:	91 81       	ldd	r25, Z+1	; 0x01
    5d14:	a2 81       	ldd	r26, Z+2	; 0x02
    5d16:	b3 81       	ldd	r27, Z+3	; 0x03
    5d18:	bc 01       	movw	r22, r24
    5d1a:	cd 01       	movw	r24, r26
    5d1c:	0f 90       	pop	r0
    5d1e:	0f 90       	pop	r0
    5d20:	df 91       	pop	r29
    5d22:	cf 91       	pop	r28
    5d24:	08 95       	ret

00005d26 <_ZNK10helicopter5model11SystemModel16ZDerivativeErrorEv>:
			void ZProportional(float val) { zProportional = val;}

			float ZDerivativeError() const {return zDerivativeError;}
    5d26:	cf 93       	push	r28
    5d28:	df 93       	push	r29
    5d2a:	1f 92       	push	r1
    5d2c:	1f 92       	push	r1
    5d2e:	cd b7       	in	r28, 0x3d	; 61
    5d30:	de b7       	in	r29, 0x3e	; 62
    5d32:	9a 83       	std	Y+2, r25	; 0x02
    5d34:	89 83       	std	Y+1, r24	; 0x01
    5d36:	89 81       	ldd	r24, Y+1	; 0x01
    5d38:	9a 81       	ldd	r25, Y+2	; 0x02
    5d3a:	87 55       	subi	r24, 0x57	; 87
    5d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3e:	fc 01       	movw	r30, r24
    5d40:	80 81       	ld	r24, Z
    5d42:	91 81       	ldd	r25, Z+1	; 0x01
    5d44:	a2 81       	ldd	r26, Z+2	; 0x02
    5d46:	b3 81       	ldd	r27, Z+3	; 0x03
    5d48:	bc 01       	movw	r22, r24
    5d4a:	cd 01       	movw	r24, r26
    5d4c:	0f 90       	pop	r0
    5d4e:	0f 90       	pop	r0
    5d50:	df 91       	pop	r29
    5d52:	cf 91       	pop	r28
    5d54:	08 95       	ret

00005d56 <_ZN10helicopter5model11SystemModel15LatitudeDegreesEf>:
			void ZDerivativeError(float val) { zDerivativeError = val;}						
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
			void LatitudeDegrees(float val) { latitudeDegrees = val;}						
    5d56:	cf 93       	push	r28
    5d58:	df 93       	push	r29
    5d5a:	00 d0       	rcall	.+0      	; 0x5d5c <_ZN10helicopter5model11SystemModel15LatitudeDegreesEf+0x6>
    5d5c:	00 d0       	rcall	.+0      	; 0x5d5e <_ZN10helicopter5model11SystemModel15LatitudeDegreesEf+0x8>
    5d5e:	cd b7       	in	r28, 0x3d	; 61
    5d60:	de b7       	in	r29, 0x3e	; 62
    5d62:	9a 83       	std	Y+2, r25	; 0x02
    5d64:	89 83       	std	Y+1, r24	; 0x01
    5d66:	4b 83       	std	Y+3, r20	; 0x03
    5d68:	5c 83       	std	Y+4, r21	; 0x04
    5d6a:	6d 83       	std	Y+5, r22	; 0x05
    5d6c:	7e 83       	std	Y+6, r23	; 0x06
    5d6e:	89 81       	ldd	r24, Y+1	; 0x01
    5d70:	9a 81       	ldd	r25, Y+2	; 0x02
    5d72:	9c 01       	movw	r18, r24
    5d74:	23 55       	subi	r18, 0x53	; 83
    5d76:	3f 4f       	sbci	r19, 0xFF	; 255
    5d78:	8b 81       	ldd	r24, Y+3	; 0x03
    5d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d7c:	ad 81       	ldd	r26, Y+5	; 0x05
    5d7e:	be 81       	ldd	r27, Y+6	; 0x06
    5d80:	f9 01       	movw	r30, r18
    5d82:	80 83       	st	Z, r24
    5d84:	91 83       	std	Z+1, r25	; 0x01
    5d86:	a2 83       	std	Z+2, r26	; 0x02
    5d88:	b3 83       	std	Z+3, r27	; 0x03
    5d8a:	26 96       	adiw	r28, 0x06	; 6
    5d8c:	0f b6       	in	r0, 0x3f	; 63
    5d8e:	f8 94       	cli
    5d90:	de bf       	out	0x3e, r29	; 62
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	cd bf       	out	0x3d, r28	; 61
    5d96:	df 91       	pop	r29
    5d98:	cf 91       	pop	r28
    5d9a:	08 95       	ret

00005d9c <_ZN10helicopter5model11SystemModel16LongitudeDegreesEf>:

			float LongitudeDegrees() const {return longitudeDegrees;}
			void LongitudeDegrees(float val) { longitudeDegrees = val;}						
    5d9c:	cf 93       	push	r28
    5d9e:	df 93       	push	r29
    5da0:	00 d0       	rcall	.+0      	; 0x5da2 <_ZN10helicopter5model11SystemModel16LongitudeDegreesEf+0x6>
    5da2:	00 d0       	rcall	.+0      	; 0x5da4 <_ZN10helicopter5model11SystemModel16LongitudeDegreesEf+0x8>
    5da4:	cd b7       	in	r28, 0x3d	; 61
    5da6:	de b7       	in	r29, 0x3e	; 62
    5da8:	9a 83       	std	Y+2, r25	; 0x02
    5daa:	89 83       	std	Y+1, r24	; 0x01
    5dac:	4b 83       	std	Y+3, r20	; 0x03
    5dae:	5c 83       	std	Y+4, r21	; 0x04
    5db0:	6d 83       	std	Y+5, r22	; 0x05
    5db2:	7e 83       	std	Y+6, r23	; 0x06
    5db4:	89 81       	ldd	r24, Y+1	; 0x01
    5db6:	9a 81       	ldd	r25, Y+2	; 0x02
    5db8:	9c 01       	movw	r18, r24
    5dba:	2f 54       	subi	r18, 0x4F	; 79
    5dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    5dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    5dc2:	ad 81       	ldd	r26, Y+5	; 0x05
    5dc4:	be 81       	ldd	r27, Y+6	; 0x06
    5dc6:	f9 01       	movw	r30, r18
    5dc8:	80 83       	st	Z, r24
    5dca:	91 83       	std	Z+1, r25	; 0x01
    5dcc:	a2 83       	std	Z+2, r26	; 0x02
    5dce:	b3 83       	std	Z+3, r27	; 0x03
    5dd0:	26 96       	adiw	r28, 0x06	; 6
    5dd2:	0f b6       	in	r0, 0x3f	; 63
    5dd4:	f8 94       	cli
    5dd6:	de bf       	out	0x3e, r29	; 62
    5dd8:	0f be       	out	0x3f, r0	; 63
    5dda:	cd bf       	out	0x3d, r28	; 61
    5ddc:	df 91       	pop	r29
    5dde:	cf 91       	pop	r28
    5de0:	08 95       	ret

00005de2 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>:
						
						
			long Timeouts() const {return timeouts; }
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	1f 92       	push	r1
    5de8:	1f 92       	push	r1
    5dea:	cd b7       	in	r28, 0x3d	; 61
    5dec:	de b7       	in	r29, 0x3e	; 62
    5dee:	9a 83       	std	Y+2, r25	; 0x02
    5df0:	89 83       	std	Y+1, r24	; 0x01
    5df2:	89 81       	ldd	r24, Y+1	; 0x01
    5df4:	9a 81       	ldd	r25, Y+2	; 0x02
    5df6:	8b 54       	subi	r24, 0x4B	; 75
    5df8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfa:	fc 01       	movw	r30, r24
    5dfc:	80 81       	ld	r24, Z
    5dfe:	91 81       	ldd	r25, Z+1	; 0x01
    5e00:	a2 81       	ldd	r26, Z+2	; 0x02
    5e02:	b3 81       	ldd	r27, Z+3	; 0x03
    5e04:	bc 01       	movw	r22, r24
    5e06:	cd 01       	movw	r24, r26
    5e08:	0f 90       	pop	r0
    5e0a:	0f 90       	pop	r0
    5e0c:	df 91       	pop	r29
    5e0e:	cf 91       	pop	r28
    5e10:	08 95       	ret

00005e12 <_ZN10helicopter5model11SystemModel8TimeoutsEl>:
			void Timeouts(long val) { timeouts = val; }
    5e12:	cf 93       	push	r28
    5e14:	df 93       	push	r29
    5e16:	00 d0       	rcall	.+0      	; 0x5e18 <_ZN10helicopter5model11SystemModel8TimeoutsEl+0x6>
    5e18:	00 d0       	rcall	.+0      	; 0x5e1a <_ZN10helicopter5model11SystemModel8TimeoutsEl+0x8>
    5e1a:	cd b7       	in	r28, 0x3d	; 61
    5e1c:	de b7       	in	r29, 0x3e	; 62
    5e1e:	9a 83       	std	Y+2, r25	; 0x02
    5e20:	89 83       	std	Y+1, r24	; 0x01
    5e22:	4b 83       	std	Y+3, r20	; 0x03
    5e24:	5c 83       	std	Y+4, r21	; 0x04
    5e26:	6d 83       	std	Y+5, r22	; 0x05
    5e28:	7e 83       	std	Y+6, r23	; 0x06
    5e2a:	89 81       	ldd	r24, Y+1	; 0x01
    5e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e2e:	9c 01       	movw	r18, r24
    5e30:	2b 54       	subi	r18, 0x4B	; 75
    5e32:	3f 4f       	sbci	r19, 0xFF	; 255
    5e34:	8b 81       	ldd	r24, Y+3	; 0x03
    5e36:	9c 81       	ldd	r25, Y+4	; 0x04
    5e38:	ad 81       	ldd	r26, Y+5	; 0x05
    5e3a:	be 81       	ldd	r27, Y+6	; 0x06
    5e3c:	f9 01       	movw	r30, r18
    5e3e:	80 83       	st	Z, r24
    5e40:	91 83       	std	Z+1, r25	; 0x01
    5e42:	a2 83       	std	Z+2, r26	; 0x02
    5e44:	b3 83       	std	Z+3, r27	; 0x03
    5e46:	26 96       	adiw	r28, 0x06	; 6
    5e48:	0f b6       	in	r0, 0x3f	; 63
    5e4a:	f8 94       	cli
    5e4c:	de bf       	out	0x3e, r29	; 62
    5e4e:	0f be       	out	0x3f, r0	; 63
    5e50:	cd bf       	out	0x3d, r28	; 61
    5e52:	df 91       	pop	r29
    5e54:	cf 91       	pop	r28
    5e56:	08 95       	ret

00005e58 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>:
			
			long UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    5e58:	cf 93       	push	r28
    5e5a:	df 93       	push	r29
    5e5c:	1f 92       	push	r1
    5e5e:	1f 92       	push	r1
    5e60:	cd b7       	in	r28, 0x3d	; 61
    5e62:	de b7       	in	r29, 0x3e	; 62
    5e64:	9a 83       	std	Y+2, r25	; 0x02
    5e66:	89 83       	std	Y+1, r24	; 0x01
    5e68:	89 81       	ldd	r24, Y+1	; 0x01
    5e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e6c:	87 54       	subi	r24, 0x47	; 71
    5e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e70:	fc 01       	movw	r30, r24
    5e72:	80 81       	ld	r24, Z
    5e74:	91 81       	ldd	r25, Z+1	; 0x01
    5e76:	a2 81       	ldd	r26, Z+2	; 0x02
    5e78:	b3 81       	ldd	r27, Z+3	; 0x03
    5e7a:	bc 01       	movw	r22, r24
    5e7c:	cd 01       	movw	r24, r26
    5e7e:	0f 90       	pop	r0
    5e80:	0f 90       	pop	r0
    5e82:	df 91       	pop	r29
    5e84:	cf 91       	pop	r28
    5e86:	08 95       	ret

00005e88 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl>:
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
    5e88:	cf 93       	push	r28
    5e8a:	df 93       	push	r29
    5e8c:	00 d0       	rcall	.+0      	; 0x5e8e <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl+0x6>
    5e8e:	00 d0       	rcall	.+0      	; 0x5e90 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl+0x8>
    5e90:	cd b7       	in	r28, 0x3d	; 61
    5e92:	de b7       	in	r29, 0x3e	; 62
    5e94:	9a 83       	std	Y+2, r25	; 0x02
    5e96:	89 83       	std	Y+1, r24	; 0x01
    5e98:	4b 83       	std	Y+3, r20	; 0x03
    5e9a:	5c 83       	std	Y+4, r21	; 0x04
    5e9c:	6d 83       	std	Y+5, r22	; 0x05
    5e9e:	7e 83       	std	Y+6, r23	; 0x06
    5ea0:	89 81       	ldd	r24, Y+1	; 0x01
    5ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ea4:	9c 01       	movw	r18, r24
    5ea6:	27 54       	subi	r18, 0x47	; 71
    5ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    5eac:	9c 81       	ldd	r25, Y+4	; 0x04
    5eae:	ad 81       	ldd	r26, Y+5	; 0x05
    5eb0:	be 81       	ldd	r27, Y+6	; 0x06
    5eb2:	f9 01       	movw	r30, r18
    5eb4:	80 83       	st	Z, r24
    5eb6:	91 83       	std	Z+1, r25	; 0x01
    5eb8:	a2 83       	std	Z+2, r26	; 0x02
    5eba:	b3 83       	std	Z+3, r27	; 0x03
    5ebc:	26 96       	adiw	r28, 0x06	; 6
    5ebe:	0f b6       	in	r0, 0x3f	; 63
    5ec0:	f8 94       	cli
    5ec2:	de bf       	out	0x3e, r29	; 62
    5ec4:	0f be       	out	0x3f, r0	; 63
    5ec6:	cd bf       	out	0x3d, r28	; 61
    5ec8:	df 91       	pop	r29
    5eca:	cf 91       	pop	r28
    5ecc:	08 95       	ret

00005ece <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>:
			
			long ChecksumErrors() const {return checksumErrors; }
    5ece:	cf 93       	push	r28
    5ed0:	df 93       	push	r29
    5ed2:	1f 92       	push	r1
    5ed4:	1f 92       	push	r1
    5ed6:	cd b7       	in	r28, 0x3d	; 61
    5ed8:	de b7       	in	r29, 0x3e	; 62
    5eda:	9a 83       	std	Y+2, r25	; 0x02
    5edc:	89 83       	std	Y+1, r24	; 0x01
    5ede:	89 81       	ldd	r24, Y+1	; 0x01
    5ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ee2:	83 54       	subi	r24, 0x43	; 67
    5ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ee6:	fc 01       	movw	r30, r24
    5ee8:	80 81       	ld	r24, Z
    5eea:	91 81       	ldd	r25, Z+1	; 0x01
    5eec:	a2 81       	ldd	r26, Z+2	; 0x02
    5eee:	b3 81       	ldd	r27, Z+3	; 0x03
    5ef0:	bc 01       	movw	r22, r24
    5ef2:	cd 01       	movw	r24, r26
    5ef4:	0f 90       	pop	r0
    5ef6:	0f 90       	pop	r0
    5ef8:	df 91       	pop	r29
    5efa:	cf 91       	pop	r28
    5efc:	08 95       	ret

00005efe <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl>:
			void ChecksumErrors(long val) { checksumErrors = val; }
    5efe:	cf 93       	push	r28
    5f00:	df 93       	push	r29
    5f02:	00 d0       	rcall	.+0      	; 0x5f04 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl+0x6>
    5f04:	00 d0       	rcall	.+0      	; 0x5f06 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl+0x8>
    5f06:	cd b7       	in	r28, 0x3d	; 61
    5f08:	de b7       	in	r29, 0x3e	; 62
    5f0a:	9a 83       	std	Y+2, r25	; 0x02
    5f0c:	89 83       	std	Y+1, r24	; 0x01
    5f0e:	4b 83       	std	Y+3, r20	; 0x03
    5f10:	5c 83       	std	Y+4, r21	; 0x04
    5f12:	6d 83       	std	Y+5, r22	; 0x05
    5f14:	7e 83       	std	Y+6, r23	; 0x06
    5f16:	89 81       	ldd	r24, Y+1	; 0x01
    5f18:	9a 81       	ldd	r25, Y+2	; 0x02
    5f1a:	9c 01       	movw	r18, r24
    5f1c:	23 54       	subi	r18, 0x43	; 67
    5f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f20:	8b 81       	ldd	r24, Y+3	; 0x03
    5f22:	9c 81       	ldd	r25, Y+4	; 0x04
    5f24:	ad 81       	ldd	r26, Y+5	; 0x05
    5f26:	be 81       	ldd	r27, Y+6	; 0x06
    5f28:	f9 01       	movw	r30, r18
    5f2a:	80 83       	st	Z, r24
    5f2c:	91 83       	std	Z+1, r25	; 0x01
    5f2e:	a2 83       	std	Z+2, r26	; 0x02
    5f30:	b3 83       	std	Z+3, r27	; 0x03
    5f32:	26 96       	adiw	r28, 0x06	; 6
    5f34:	0f b6       	in	r0, 0x3f	; 63
    5f36:	f8 94       	cli
    5f38:	de bf       	out	0x3e, r29	; 62
    5f3a:	0f be       	out	0x3f, r0	; 63
    5f3c:	cd bf       	out	0x3d, r28	; 61
    5f3e:	df 91       	pop	r29
    5f40:	cf 91       	pop	r28
    5f42:	08 95       	ret

00005f44 <_ZNK10helicopter5model11SystemModel33SerialCommunicationBufferOverrunsEv>:
			
			long BlownFrames() const {return numOfFramesBlown;}
			void BlownFrames( long val ) { numOfFramesBlown = val;}
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
    5f44:	cf 93       	push	r28
    5f46:	df 93       	push	r29
    5f48:	1f 92       	push	r1
    5f4a:	1f 92       	push	r1
    5f4c:	cd b7       	in	r28, 0x3d	; 61
    5f4e:	de b7       	in	r29, 0x3e	; 62
    5f50:	9a 83       	std	Y+2, r25	; 0x02
    5f52:	89 83       	std	Y+1, r24	; 0x01
    5f54:	89 81       	ldd	r24, Y+1	; 0x01
    5f56:	9a 81       	ldd	r25, Y+2	; 0x02
    5f58:	8b 53       	subi	r24, 0x3B	; 59
    5f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f5c:	fc 01       	movw	r30, r24
    5f5e:	80 81       	ld	r24, Z
    5f60:	91 81       	ldd	r25, Z+1	; 0x01
    5f62:	a2 81       	ldd	r26, Z+2	; 0x02
    5f64:	b3 81       	ldd	r27, Z+3	; 0x03
    5f66:	bc 01       	movw	r22, r24
    5f68:	cd 01       	movw	r24, r26
    5f6a:	0f 90       	pop	r0
    5f6c:	0f 90       	pop	r0
    5f6e:	df 91       	pop	r29
    5f70:	cf 91       	pop	r28
    5f72:	08 95       	ret

00005f74 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(ChecksumErrors) + 
				sizeof(NumOfBlownFrames) + 
				sizeof(SerialCommunicationBufferOverruns);

			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    5f74:	cf 93       	push	r28
    5f76:	df 93       	push	r29
    5f78:	1f 92       	push	r1
    5f7a:	1f 92       	push	r1
    5f7c:	cd b7       	in	r28, 0x3d	; 61
    5f7e:	de b7       	in	r29, 0x3e	; 62
    5f80:	9a 83       	std	Y+2, r25	; 0x02
    5f82:	89 83       	std	Y+1, r24	; 0x01
														
					Timeouts(0),
					UnrecognizedMsgTypes(0),
					ChecksumErrors(0),
					NumOfBlownFrames(0), 
					SerialCommunicationBufferOverruns(0)
    5f84:	89 81       	ldd	r24, Y+1	; 0x01
    5f86:	9a 81       	ldd	r25, Y+2	; 0x02
    5f88:	49 ee       	ldi	r20, 0xE9	; 233
    5f8a:	50 e0       	ldi	r21, 0x00	; 0
    5f8c:	62 e0       	ldi	r22, 0x02	; 2
    5f8e:	0e 94 cd 2a 	call	0x559a	; 0x559a <_ZN10helicopter8messages7MessageC1Ehi>
    5f92:	89 81       	ldd	r24, Y+1	; 0x01
    5f94:	9a 81       	ldd	r25, Y+2	; 0x02
    5f96:	2e e3       	ldi	r18, 0x3E	; 62
    5f98:	32 e0       	ldi	r19, 0x02	; 2
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	31 83       	std	Z+1, r19	; 0x01
    5f9e:	20 83       	st	Z, r18
    5fa0:	89 81       	ldd	r24, Y+1	; 0x01
    5fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa4:	fc 01       	movw	r30, r24
    5fa6:	15 82       	std	Z+5, r1	; 0x05
    5fa8:	16 82       	std	Z+6, r1	; 0x06
    5faa:	17 82       	std	Z+7, r1	; 0x07
    5fac:	10 86       	std	Z+8, r1	; 0x08
    5fae:	89 81       	ldd	r24, Y+1	; 0x01
    5fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    5fb2:	fc 01       	movw	r30, r24
    5fb4:	11 86       	std	Z+9, r1	; 0x09
    5fb6:	12 86       	std	Z+10, r1	; 0x0a
    5fb8:	13 86       	std	Z+11, r1	; 0x0b
    5fba:	14 86       	std	Z+12, r1	; 0x0c
    5fbc:	89 81       	ldd	r24, Y+1	; 0x01
    5fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc0:	fc 01       	movw	r30, r24
    5fc2:	15 86       	std	Z+13, r1	; 0x0d
    5fc4:	16 86       	std	Z+14, r1	; 0x0e
    5fc6:	17 86       	std	Z+15, r1	; 0x0f
    5fc8:	10 8a       	std	Z+16, r1	; 0x10
    5fca:	89 81       	ldd	r24, Y+1	; 0x01
    5fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    5fce:	fc 01       	movw	r30, r24
    5fd0:	11 8a       	std	Z+17, r1	; 0x11
    5fd2:	12 8a       	std	Z+18, r1	; 0x12
    5fd4:	13 8a       	std	Z+19, r1	; 0x13
    5fd6:	14 8a       	std	Z+20, r1	; 0x14
    5fd8:	89 81       	ldd	r24, Y+1	; 0x01
    5fda:	9a 81       	ldd	r25, Y+2	; 0x02
    5fdc:	fc 01       	movw	r30, r24
    5fde:	15 8a       	std	Z+21, r1	; 0x15
    5fe0:	16 8a       	std	Z+22, r1	; 0x16
    5fe2:	17 8a       	std	Z+23, r1	; 0x17
    5fe4:	10 8e       	std	Z+24, r1	; 0x18
    5fe6:	89 81       	ldd	r24, Y+1	; 0x01
    5fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    5fea:	fc 01       	movw	r30, r24
    5fec:	11 8e       	std	Z+25, r1	; 0x19
    5fee:	12 8e       	std	Z+26, r1	; 0x1a
    5ff0:	13 8e       	std	Z+27, r1	; 0x1b
    5ff2:	14 8e       	std	Z+28, r1	; 0x1c
    5ff4:	89 81       	ldd	r24, Y+1	; 0x01
    5ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	15 8e       	std	Z+29, r1	; 0x1d
    5ffc:	16 8e       	std	Z+30, r1	; 0x1e
    5ffe:	17 8e       	std	Z+31, r1	; 0x1f
    6000:	10 a2       	std	Z+32, r1	; 0x20
    6002:	89 81       	ldd	r24, Y+1	; 0x01
    6004:	9a 81       	ldd	r25, Y+2	; 0x02
    6006:	fc 01       	movw	r30, r24
    6008:	11 a2       	std	Z+33, r1	; 0x21
    600a:	12 a2       	std	Z+34, r1	; 0x22
    600c:	13 a2       	std	Z+35, r1	; 0x23
    600e:	14 a2       	std	Z+36, r1	; 0x24
    6010:	89 81       	ldd	r24, Y+1	; 0x01
    6012:	9a 81       	ldd	r25, Y+2	; 0x02
    6014:	fc 01       	movw	r30, r24
    6016:	15 a2       	std	Z+37, r1	; 0x25
    6018:	16 a2       	std	Z+38, r1	; 0x26
    601a:	17 a2       	std	Z+39, r1	; 0x27
    601c:	10 a6       	std	Z+40, r1	; 0x28
    601e:	89 81       	ldd	r24, Y+1	; 0x01
    6020:	9a 81       	ldd	r25, Y+2	; 0x02
    6022:	fc 01       	movw	r30, r24
    6024:	11 a6       	std	Z+41, r1	; 0x29
    6026:	12 a6       	std	Z+42, r1	; 0x2a
    6028:	13 a6       	std	Z+43, r1	; 0x2b
    602a:	14 a6       	std	Z+44, r1	; 0x2c
    602c:	89 81       	ldd	r24, Y+1	; 0x01
    602e:	9a 81       	ldd	r25, Y+2	; 0x02
    6030:	fc 01       	movw	r30, r24
    6032:	15 a6       	std	Z+45, r1	; 0x2d
    6034:	16 a6       	std	Z+46, r1	; 0x2e
    6036:	17 a6       	std	Z+47, r1	; 0x2f
    6038:	10 aa       	std	Z+48, r1	; 0x30
    603a:	89 81       	ldd	r24, Y+1	; 0x01
    603c:	9a 81       	ldd	r25, Y+2	; 0x02
    603e:	fc 01       	movw	r30, r24
    6040:	11 aa       	std	Z+49, r1	; 0x31
    6042:	12 aa       	std	Z+50, r1	; 0x32
    6044:	13 aa       	std	Z+51, r1	; 0x33
    6046:	14 aa       	std	Z+52, r1	; 0x34
    6048:	89 81       	ldd	r24, Y+1	; 0x01
    604a:	9a 81       	ldd	r25, Y+2	; 0x02
    604c:	fc 01       	movw	r30, r24
    604e:	15 aa       	std	Z+53, r1	; 0x35
    6050:	16 aa       	std	Z+54, r1	; 0x36
    6052:	17 aa       	std	Z+55, r1	; 0x37
    6054:	10 ae       	std	Z+56, r1	; 0x38
    6056:	89 81       	ldd	r24, Y+1	; 0x01
    6058:	9a 81       	ldd	r25, Y+2	; 0x02
    605a:	fc 01       	movw	r30, r24
    605c:	11 ae       	std	Z+57, r1	; 0x39
    605e:	12 ae       	std	Z+58, r1	; 0x3a
    6060:	13 ae       	std	Z+59, r1	; 0x3b
    6062:	14 ae       	std	Z+60, r1	; 0x3c
    6064:	89 81       	ldd	r24, Y+1	; 0x01
    6066:	9a 81       	ldd	r25, Y+2	; 0x02
    6068:	cd 96       	adiw	r24, 0x3d	; 61
    606a:	fc 01       	movw	r30, r24
    606c:	10 82       	st	Z, r1
    606e:	11 82       	std	Z+1, r1	; 0x01
    6070:	12 82       	std	Z+2, r1	; 0x02
    6072:	13 82       	std	Z+3, r1	; 0x03
    6074:	89 81       	ldd	r24, Y+1	; 0x01
    6076:	9a 81       	ldd	r25, Y+2	; 0x02
    6078:	8f 5b       	subi	r24, 0xBF	; 191
    607a:	9f 4f       	sbci	r25, 0xFF	; 255
    607c:	fc 01       	movw	r30, r24
    607e:	10 82       	st	Z, r1
    6080:	11 82       	std	Z+1, r1	; 0x01
    6082:	12 82       	std	Z+2, r1	; 0x02
    6084:	13 82       	std	Z+3, r1	; 0x03
    6086:	89 81       	ldd	r24, Y+1	; 0x01
    6088:	9a 81       	ldd	r25, Y+2	; 0x02
    608a:	8b 5b       	subi	r24, 0xBB	; 187
    608c:	9f 4f       	sbci	r25, 0xFF	; 255
    608e:	fc 01       	movw	r30, r24
    6090:	10 82       	st	Z, r1
    6092:	11 82       	std	Z+1, r1	; 0x01
    6094:	12 82       	std	Z+2, r1	; 0x02
    6096:	13 82       	std	Z+3, r1	; 0x03
    6098:	89 81       	ldd	r24, Y+1	; 0x01
    609a:	9a 81       	ldd	r25, Y+2	; 0x02
    609c:	87 5b       	subi	r24, 0xB7	; 183
    609e:	9f 4f       	sbci	r25, 0xFF	; 255
    60a0:	fc 01       	movw	r30, r24
    60a2:	10 82       	st	Z, r1
    60a4:	11 82       	std	Z+1, r1	; 0x01
    60a6:	12 82       	std	Z+2, r1	; 0x02
    60a8:	13 82       	std	Z+3, r1	; 0x03
    60aa:	89 81       	ldd	r24, Y+1	; 0x01
    60ac:	9a 81       	ldd	r25, Y+2	; 0x02
    60ae:	83 5b       	subi	r24, 0xB3	; 179
    60b0:	9f 4f       	sbci	r25, 0xFF	; 255
    60b2:	fc 01       	movw	r30, r24
    60b4:	10 82       	st	Z, r1
    60b6:	11 82       	std	Z+1, r1	; 0x01
    60b8:	12 82       	std	Z+2, r1	; 0x02
    60ba:	13 82       	std	Z+3, r1	; 0x03
    60bc:	89 81       	ldd	r24, Y+1	; 0x01
    60be:	9a 81       	ldd	r25, Y+2	; 0x02
    60c0:	8f 5a       	subi	r24, 0xAF	; 175
    60c2:	9f 4f       	sbci	r25, 0xFF	; 255
    60c4:	fc 01       	movw	r30, r24
    60c6:	10 82       	st	Z, r1
    60c8:	11 82       	std	Z+1, r1	; 0x01
    60ca:	12 82       	std	Z+2, r1	; 0x02
    60cc:	13 82       	std	Z+3, r1	; 0x03
    60ce:	89 81       	ldd	r24, Y+1	; 0x01
    60d0:	9a 81       	ldd	r25, Y+2	; 0x02
    60d2:	8b 5a       	subi	r24, 0xAB	; 171
    60d4:	9f 4f       	sbci	r25, 0xFF	; 255
    60d6:	fc 01       	movw	r30, r24
    60d8:	10 82       	st	Z, r1
    60da:	11 82       	std	Z+1, r1	; 0x01
    60dc:	12 82       	std	Z+2, r1	; 0x02
    60de:	13 82       	std	Z+3, r1	; 0x03
    60e0:	89 81       	ldd	r24, Y+1	; 0x01
    60e2:	9a 81       	ldd	r25, Y+2	; 0x02
    60e4:	87 5a       	subi	r24, 0xA7	; 167
    60e6:	9f 4f       	sbci	r25, 0xFF	; 255
    60e8:	fc 01       	movw	r30, r24
    60ea:	10 82       	st	Z, r1
    60ec:	11 82       	std	Z+1, r1	; 0x01
    60ee:	12 82       	std	Z+2, r1	; 0x02
    60f0:	13 82       	std	Z+3, r1	; 0x03
    60f2:	89 81       	ldd	r24, Y+1	; 0x01
    60f4:	9a 81       	ldd	r25, Y+2	; 0x02
    60f6:	83 5a       	subi	r24, 0xA3	; 163
    60f8:	9f 4f       	sbci	r25, 0xFF	; 255
    60fa:	fc 01       	movw	r30, r24
    60fc:	10 82       	st	Z, r1
    60fe:	11 82       	std	Z+1, r1	; 0x01
    6100:	12 82       	std	Z+2, r1	; 0x02
    6102:	13 82       	std	Z+3, r1	; 0x03
    6104:	89 81       	ldd	r24, Y+1	; 0x01
    6106:	9a 81       	ldd	r25, Y+2	; 0x02
    6108:	8f 59       	subi	r24, 0x9F	; 159
    610a:	9f 4f       	sbci	r25, 0xFF	; 255
    610c:	fc 01       	movw	r30, r24
    610e:	10 82       	st	Z, r1
    6110:	11 82       	std	Z+1, r1	; 0x01
    6112:	12 82       	std	Z+2, r1	; 0x02
    6114:	13 82       	std	Z+3, r1	; 0x03
    6116:	89 81       	ldd	r24, Y+1	; 0x01
    6118:	9a 81       	ldd	r25, Y+2	; 0x02
    611a:	8b 59       	subi	r24, 0x9B	; 155
    611c:	9f 4f       	sbci	r25, 0xFF	; 255
    611e:	fc 01       	movw	r30, r24
    6120:	10 82       	st	Z, r1
    6122:	11 82       	std	Z+1, r1	; 0x01
    6124:	12 82       	std	Z+2, r1	; 0x02
    6126:	13 82       	std	Z+3, r1	; 0x03
    6128:	89 81       	ldd	r24, Y+1	; 0x01
    612a:	9a 81       	ldd	r25, Y+2	; 0x02
    612c:	87 59       	subi	r24, 0x97	; 151
    612e:	9f 4f       	sbci	r25, 0xFF	; 255
    6130:	fc 01       	movw	r30, r24
    6132:	10 82       	st	Z, r1
    6134:	11 82       	std	Z+1, r1	; 0x01
    6136:	12 82       	std	Z+2, r1	; 0x02
    6138:	13 82       	std	Z+3, r1	; 0x03
    613a:	89 81       	ldd	r24, Y+1	; 0x01
    613c:	9a 81       	ldd	r25, Y+2	; 0x02
    613e:	83 59       	subi	r24, 0x93	; 147
    6140:	9f 4f       	sbci	r25, 0xFF	; 255
    6142:	fc 01       	movw	r30, r24
    6144:	10 82       	st	Z, r1
    6146:	11 82       	std	Z+1, r1	; 0x01
    6148:	12 82       	std	Z+2, r1	; 0x02
    614a:	13 82       	std	Z+3, r1	; 0x03
    614c:	89 81       	ldd	r24, Y+1	; 0x01
    614e:	9a 81       	ldd	r25, Y+2	; 0x02
    6150:	8f 58       	subi	r24, 0x8F	; 143
    6152:	9f 4f       	sbci	r25, 0xFF	; 255
    6154:	fc 01       	movw	r30, r24
    6156:	10 82       	st	Z, r1
    6158:	11 82       	std	Z+1, r1	; 0x01
    615a:	12 82       	std	Z+2, r1	; 0x02
    615c:	13 82       	std	Z+3, r1	; 0x03
    615e:	89 81       	ldd	r24, Y+1	; 0x01
    6160:	9a 81       	ldd	r25, Y+2	; 0x02
    6162:	8b 58       	subi	r24, 0x8B	; 139
    6164:	9f 4f       	sbci	r25, 0xFF	; 255
    6166:	fc 01       	movw	r30, r24
    6168:	10 82       	st	Z, r1
    616a:	11 82       	std	Z+1, r1	; 0x01
    616c:	12 82       	std	Z+2, r1	; 0x02
    616e:	13 82       	std	Z+3, r1	; 0x03
    6170:	89 81       	ldd	r24, Y+1	; 0x01
    6172:	9a 81       	ldd	r25, Y+2	; 0x02
    6174:	87 58       	subi	r24, 0x87	; 135
    6176:	9f 4f       	sbci	r25, 0xFF	; 255
    6178:	fc 01       	movw	r30, r24
    617a:	10 82       	st	Z, r1
    617c:	11 82       	std	Z+1, r1	; 0x01
    617e:	12 82       	std	Z+2, r1	; 0x02
    6180:	13 82       	std	Z+3, r1	; 0x03
    6182:	89 81       	ldd	r24, Y+1	; 0x01
    6184:	9a 81       	ldd	r25, Y+2	; 0x02
    6186:	83 58       	subi	r24, 0x83	; 131
    6188:	9f 4f       	sbci	r25, 0xFF	; 255
    618a:	fc 01       	movw	r30, r24
    618c:	10 82       	st	Z, r1
    618e:	11 82       	std	Z+1, r1	; 0x01
    6190:	12 82       	std	Z+2, r1	; 0x02
    6192:	13 82       	std	Z+3, r1	; 0x03
    6194:	89 81       	ldd	r24, Y+1	; 0x01
    6196:	9a 81       	ldd	r25, Y+2	; 0x02
    6198:	8f 57       	subi	r24, 0x7F	; 127
    619a:	9f 4f       	sbci	r25, 0xFF	; 255
    619c:	fc 01       	movw	r30, r24
    619e:	10 82       	st	Z, r1
    61a0:	11 82       	std	Z+1, r1	; 0x01
    61a2:	12 82       	std	Z+2, r1	; 0x02
    61a4:	13 82       	std	Z+3, r1	; 0x03
    61a6:	89 81       	ldd	r24, Y+1	; 0x01
    61a8:	9a 81       	ldd	r25, Y+2	; 0x02
    61aa:	8b 57       	subi	r24, 0x7B	; 123
    61ac:	9f 4f       	sbci	r25, 0xFF	; 255
    61ae:	fc 01       	movw	r30, r24
    61b0:	10 82       	st	Z, r1
    61b2:	11 82       	std	Z+1, r1	; 0x01
    61b4:	12 82       	std	Z+2, r1	; 0x02
    61b6:	13 82       	std	Z+3, r1	; 0x03
    61b8:	89 81       	ldd	r24, Y+1	; 0x01
    61ba:	9a 81       	ldd	r25, Y+2	; 0x02
    61bc:	87 57       	subi	r24, 0x77	; 119
    61be:	9f 4f       	sbci	r25, 0xFF	; 255
    61c0:	fc 01       	movw	r30, r24
    61c2:	10 82       	st	Z, r1
    61c4:	11 82       	std	Z+1, r1	; 0x01
    61c6:	12 82       	std	Z+2, r1	; 0x02
    61c8:	13 82       	std	Z+3, r1	; 0x03
    61ca:	89 81       	ldd	r24, Y+1	; 0x01
    61cc:	9a 81       	ldd	r25, Y+2	; 0x02
    61ce:	83 57       	subi	r24, 0x73	; 115
    61d0:	9f 4f       	sbci	r25, 0xFF	; 255
    61d2:	fc 01       	movw	r30, r24
    61d4:	10 82       	st	Z, r1
    61d6:	11 82       	std	Z+1, r1	; 0x01
    61d8:	12 82       	std	Z+2, r1	; 0x02
    61da:	13 82       	std	Z+3, r1	; 0x03
    61dc:	89 81       	ldd	r24, Y+1	; 0x01
    61de:	9a 81       	ldd	r25, Y+2	; 0x02
    61e0:	8f 56       	subi	r24, 0x6F	; 111
    61e2:	9f 4f       	sbci	r25, 0xFF	; 255
    61e4:	fc 01       	movw	r30, r24
    61e6:	10 82       	st	Z, r1
    61e8:	11 82       	std	Z+1, r1	; 0x01
    61ea:	12 82       	std	Z+2, r1	; 0x02
    61ec:	13 82       	std	Z+3, r1	; 0x03
    61ee:	89 81       	ldd	r24, Y+1	; 0x01
    61f0:	9a 81       	ldd	r25, Y+2	; 0x02
    61f2:	8b 56       	subi	r24, 0x6B	; 107
    61f4:	9f 4f       	sbci	r25, 0xFF	; 255
    61f6:	fc 01       	movw	r30, r24
    61f8:	10 82       	st	Z, r1
    61fa:	11 82       	std	Z+1, r1	; 0x01
    61fc:	12 82       	std	Z+2, r1	; 0x02
    61fe:	13 82       	std	Z+3, r1	; 0x03
    6200:	89 81       	ldd	r24, Y+1	; 0x01
    6202:	9a 81       	ldd	r25, Y+2	; 0x02
    6204:	87 56       	subi	r24, 0x67	; 103
    6206:	9f 4f       	sbci	r25, 0xFF	; 255
    6208:	fc 01       	movw	r30, r24
    620a:	10 82       	st	Z, r1
    620c:	11 82       	std	Z+1, r1	; 0x01
    620e:	12 82       	std	Z+2, r1	; 0x02
    6210:	13 82       	std	Z+3, r1	; 0x03
    6212:	89 81       	ldd	r24, Y+1	; 0x01
    6214:	9a 81       	ldd	r25, Y+2	; 0x02
    6216:	83 56       	subi	r24, 0x63	; 99
    6218:	9f 4f       	sbci	r25, 0xFF	; 255
    621a:	fc 01       	movw	r30, r24
    621c:	10 82       	st	Z, r1
    621e:	11 82       	std	Z+1, r1	; 0x01
    6220:	12 82       	std	Z+2, r1	; 0x02
    6222:	13 82       	std	Z+3, r1	; 0x03
    6224:	89 81       	ldd	r24, Y+1	; 0x01
    6226:	9a 81       	ldd	r25, Y+2	; 0x02
    6228:	8f 55       	subi	r24, 0x5F	; 95
    622a:	9f 4f       	sbci	r25, 0xFF	; 255
    622c:	fc 01       	movw	r30, r24
    622e:	10 82       	st	Z, r1
    6230:	11 82       	std	Z+1, r1	; 0x01
    6232:	12 82       	std	Z+2, r1	; 0x02
    6234:	13 82       	std	Z+3, r1	; 0x03
    6236:	89 81       	ldd	r24, Y+1	; 0x01
    6238:	9a 81       	ldd	r25, Y+2	; 0x02
    623a:	8b 55       	subi	r24, 0x5B	; 91
    623c:	9f 4f       	sbci	r25, 0xFF	; 255
    623e:	fc 01       	movw	r30, r24
    6240:	10 82       	st	Z, r1
    6242:	11 82       	std	Z+1, r1	; 0x01
    6244:	12 82       	std	Z+2, r1	; 0x02
    6246:	13 82       	std	Z+3, r1	; 0x03
    6248:	89 81       	ldd	r24, Y+1	; 0x01
    624a:	9a 81       	ldd	r25, Y+2	; 0x02
    624c:	87 55       	subi	r24, 0x57	; 87
    624e:	9f 4f       	sbci	r25, 0xFF	; 255
    6250:	fc 01       	movw	r30, r24
    6252:	10 82       	st	Z, r1
    6254:	11 82       	std	Z+1, r1	; 0x01
    6256:	12 82       	std	Z+2, r1	; 0x02
    6258:	13 82       	std	Z+3, r1	; 0x03
    625a:	89 81       	ldd	r24, Y+1	; 0x01
    625c:	9a 81       	ldd	r25, Y+2	; 0x02
    625e:	83 55       	subi	r24, 0x53	; 83
    6260:	9f 4f       	sbci	r25, 0xFF	; 255
    6262:	fc 01       	movw	r30, r24
    6264:	10 82       	st	Z, r1
    6266:	11 82       	std	Z+1, r1	; 0x01
    6268:	12 82       	std	Z+2, r1	; 0x02
    626a:	13 82       	std	Z+3, r1	; 0x03
    626c:	89 81       	ldd	r24, Y+1	; 0x01
    626e:	9a 81       	ldd	r25, Y+2	; 0x02
    6270:	8f 54       	subi	r24, 0x4F	; 79
    6272:	9f 4f       	sbci	r25, 0xFF	; 255
    6274:	fc 01       	movw	r30, r24
    6276:	10 82       	st	Z, r1
    6278:	11 82       	std	Z+1, r1	; 0x01
    627a:	12 82       	std	Z+2, r1	; 0x02
    627c:	13 82       	std	Z+3, r1	; 0x03
    627e:	89 81       	ldd	r24, Y+1	; 0x01
    6280:	9a 81       	ldd	r25, Y+2	; 0x02
    6282:	8b 54       	subi	r24, 0x4B	; 75
    6284:	9f 4f       	sbci	r25, 0xFF	; 255
    6286:	fc 01       	movw	r30, r24
    6288:	10 82       	st	Z, r1
    628a:	11 82       	std	Z+1, r1	; 0x01
    628c:	12 82       	std	Z+2, r1	; 0x02
    628e:	13 82       	std	Z+3, r1	; 0x03
    6290:	89 81       	ldd	r24, Y+1	; 0x01
    6292:	9a 81       	ldd	r25, Y+2	; 0x02
    6294:	87 54       	subi	r24, 0x47	; 71
    6296:	9f 4f       	sbci	r25, 0xFF	; 255
    6298:	fc 01       	movw	r30, r24
    629a:	10 82       	st	Z, r1
    629c:	11 82       	std	Z+1, r1	; 0x01
    629e:	12 82       	std	Z+2, r1	; 0x02
    62a0:	13 82       	std	Z+3, r1	; 0x03
    62a2:	89 81       	ldd	r24, Y+1	; 0x01
    62a4:	9a 81       	ldd	r25, Y+2	; 0x02
    62a6:	83 54       	subi	r24, 0x43	; 67
    62a8:	9f 4f       	sbci	r25, 0xFF	; 255
    62aa:	fc 01       	movw	r30, r24
    62ac:	10 82       	st	Z, r1
    62ae:	11 82       	std	Z+1, r1	; 0x01
    62b0:	12 82       	std	Z+2, r1	; 0x02
    62b2:	13 82       	std	Z+3, r1	; 0x03
    62b4:	89 81       	ldd	r24, Y+1	; 0x01
    62b6:	9a 81       	ldd	r25, Y+2	; 0x02
    62b8:	8f 53       	subi	r24, 0x3F	; 63
    62ba:	9f 4f       	sbci	r25, 0xFF	; 255
    62bc:	fc 01       	movw	r30, r24
    62be:	10 82       	st	Z, r1
    62c0:	11 82       	std	Z+1, r1	; 0x01
    62c2:	12 82       	std	Z+2, r1	; 0x02
    62c4:	13 82       	std	Z+3, r1	; 0x03
    62c6:	89 81       	ldd	r24, Y+1	; 0x01
    62c8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ca:	8b 53       	subi	r24, 0x3B	; 59
    62cc:	9f 4f       	sbci	r25, 0xFF	; 255
    62ce:	fc 01       	movw	r30, r24
    62d0:	10 82       	st	Z, r1
    62d2:	11 82       	std	Z+1, r1	; 0x01
    62d4:	12 82       	std	Z+2, r1	; 0x02
    62d6:	13 82       	std	Z+3, r1	; 0x03
    62d8:	89 81       	ldd	r24, Y+1	; 0x01
    62da:	9a 81       	ldd	r25, Y+2	; 0x02
    62dc:	87 53       	subi	r24, 0x37	; 55
    62de:	9f 4f       	sbci	r25, 0xFF	; 255
    62e0:	fc 01       	movw	r30, r24
    62e2:	10 82       	st	Z, r1
    62e4:	11 82       	std	Z+1, r1	; 0x01
    62e6:	12 82       	std	Z+2, r1	; 0x02
    62e8:	13 82       	std	Z+3, r1	; 0x03
    62ea:	89 81       	ldd	r24, Y+1	; 0x01
    62ec:	9a 81       	ldd	r25, Y+2	; 0x02
    62ee:	83 53       	subi	r24, 0x33	; 51
    62f0:	9f 4f       	sbci	r25, 0xFF	; 255
    62f2:	fc 01       	movw	r30, r24
    62f4:	10 82       	st	Z, r1
    62f6:	11 82       	std	Z+1, r1	; 0x01
    62f8:	12 82       	std	Z+2, r1	; 0x02
    62fa:	13 82       	std	Z+3, r1	; 0x03
    62fc:	89 81       	ldd	r24, Y+1	; 0x01
    62fe:	9a 81       	ldd	r25, Y+2	; 0x02
    6300:	8f 52       	subi	r24, 0x2F	; 47
    6302:	9f 4f       	sbci	r25, 0xFF	; 255
    6304:	fc 01       	movw	r30, r24
    6306:	10 82       	st	Z, r1
    6308:	11 82       	std	Z+1, r1	; 0x01
    630a:	12 82       	std	Z+2, r1	; 0x02
    630c:	13 82       	std	Z+3, r1	; 0x03
    630e:	89 81       	ldd	r24, Y+1	; 0x01
    6310:	9a 81       	ldd	r25, Y+2	; 0x02
    6312:	8b 52       	subi	r24, 0x2B	; 43
    6314:	9f 4f       	sbci	r25, 0xFF	; 255
    6316:	fc 01       	movw	r30, r24
    6318:	10 82       	st	Z, r1
    631a:	11 82       	std	Z+1, r1	; 0x01
    631c:	12 82       	std	Z+2, r1	; 0x02
    631e:	13 82       	std	Z+3, r1	; 0x03
    6320:	89 81       	ldd	r24, Y+1	; 0x01
    6322:	9a 81       	ldd	r25, Y+2	; 0x02
    6324:	87 52       	subi	r24, 0x27	; 39
    6326:	9f 4f       	sbci	r25, 0xFF	; 255
    6328:	fc 01       	movw	r30, r24
    632a:	10 82       	st	Z, r1
    632c:	11 82       	std	Z+1, r1	; 0x01
    632e:	12 82       	std	Z+2, r1	; 0x02
    6330:	13 82       	std	Z+3, r1	; 0x03
    6332:	89 81       	ldd	r24, Y+1	; 0x01
    6334:	9a 81       	ldd	r25, Y+2	; 0x02
    6336:	83 52       	subi	r24, 0x23	; 35
    6338:	9f 4f       	sbci	r25, 0xFF	; 255
    633a:	fc 01       	movw	r30, r24
    633c:	10 82       	st	Z, r1
    633e:	11 82       	std	Z+1, r1	; 0x01
    6340:	12 82       	std	Z+2, r1	; 0x02
    6342:	13 82       	std	Z+3, r1	; 0x03
    6344:	89 81       	ldd	r24, Y+1	; 0x01
    6346:	9a 81       	ldd	r25, Y+2	; 0x02
    6348:	8f 51       	subi	r24, 0x1F	; 31
    634a:	9f 4f       	sbci	r25, 0xFF	; 255
    634c:	fc 01       	movw	r30, r24
    634e:	10 82       	st	Z, r1
    6350:	11 82       	std	Z+1, r1	; 0x01
    6352:	12 82       	std	Z+2, r1	; 0x02
    6354:	13 82       	std	Z+3, r1	; 0x03
    6356:	89 81       	ldd	r24, Y+1	; 0x01
    6358:	9a 81       	ldd	r25, Y+2	; 0x02
    635a:	8b 51       	subi	r24, 0x1B	; 27
    635c:	9f 4f       	sbci	r25, 0xFF	; 255
    635e:	fc 01       	movw	r30, r24
    6360:	10 82       	st	Z, r1
    6362:	11 82       	std	Z+1, r1	; 0x01
    6364:	12 82       	std	Z+2, r1	; 0x02
    6366:	13 82       	std	Z+3, r1	; 0x03
    6368:	89 81       	ldd	r24, Y+1	; 0x01
    636a:	9a 81       	ldd	r25, Y+2	; 0x02
    636c:	87 51       	subi	r24, 0x17	; 23
    636e:	9f 4f       	sbci	r25, 0xFF	; 255
    6370:	fc 01       	movw	r30, r24
    6372:	10 82       	st	Z, r1
    6374:	11 82       	std	Z+1, r1	; 0x01
    6376:	12 82       	std	Z+2, r1	; 0x02
    6378:	13 82       	std	Z+3, r1	; 0x03
				{
				
				}
    637a:	0f 90       	pop	r0
    637c:	0f 90       	pop	r0
    637e:	df 91       	pop	r29
    6380:	cf 91       	pop	r28
    6382:	08 95       	ret

00006384 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    6384:	cf 93       	push	r28
    6386:	df 93       	push	r29
    6388:	1f 92       	push	r1
    638a:	1f 92       	push	r1
    638c:	cd b7       	in	r28, 0x3d	; 61
    638e:	de b7       	in	r29, 0x3e	; 62
    6390:	9a 83       	std	Y+2, r25	; 0x02
    6392:	89 83       	std	Y+1, r24	; 0x01
    6394:	89 81       	ldd	r24, Y+1	; 0x01
    6396:	9a 81       	ldd	r25, Y+2	; 0x02
    6398:	2e e3       	ldi	r18, 0x3E	; 62
    639a:	32 e0       	ldi	r19, 0x02	; 2
    639c:	fc 01       	movw	r30, r24
    639e:	31 83       	std	Z+1, r19	; 0x01
    63a0:	20 83       	st	Z, r18
    63a2:	89 81       	ldd	r24, Y+1	; 0x01
    63a4:	9a 81       	ldd	r25, Y+2	; 0x02
    63a6:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN10helicopter8messages7MessageD1Ev>
    63aa:	80 e0       	ldi	r24, 0x00	; 0
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	81 70       	andi	r24, 0x01	; 1
    63b0:	99 27       	eor	r25, r25
    63b2:	00 97       	sbiw	r24, 0x00	; 0
    63b4:	21 f0       	breq	.+8      	; 0x63be <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    63b6:	89 81       	ldd	r24, Y+1	; 0x01
    63b8:	9a 81       	ldd	r25, Y+2	; 0x02
    63ba:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    63be:	0f 90       	pop	r0
    63c0:	0f 90       	pop	r0
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	08 95       	ret

000063c8 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    63c8:	cf 93       	push	r28
    63ca:	df 93       	push	r29
    63cc:	1f 92       	push	r1
    63ce:	1f 92       	push	r1
    63d0:	cd b7       	in	r28, 0x3d	; 61
    63d2:	de b7       	in	r29, 0x3e	; 62
    63d4:	9a 83       	std	Y+2, r25	; 0x02
    63d6:	89 83       	std	Y+1, r24	; 0x01
    63d8:	89 81       	ldd	r24, Y+1	; 0x01
    63da:	9a 81       	ldd	r25, Y+2	; 0x02
    63dc:	0e 94 c2 31 	call	0x6384	; 0x6384 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    63e0:	89 81       	ldd	r24, Y+1	; 0x01
    63e2:	9a 81       	ldd	r25, Y+2	; 0x02
    63e4:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    63e8:	0f 90       	pop	r0
    63ea:	0f 90       	pop	r0
    63ec:	df 91       	pop	r29
    63ee:	cf 91       	pop	r28
    63f0:	08 95       	ret

000063f2 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    63f2:	cf 93       	push	r28
    63f4:	df 93       	push	r29
    63f6:	00 d0       	rcall	.+0      	; 0x63f8 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    63f8:	00 d0       	rcall	.+0      	; 0x63fa <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    63fa:	cd b7       	in	r28, 0x3d	; 61
    63fc:	de b7       	in	r29, 0x3e	; 62
    63fe:	9e 83       	std	Y+6, r25	; 0x06
    6400:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    6402:	89 ee       	ldi	r24, 0xE9	; 233
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	0e 94 ae 4a 	call	0x955c	; 0x955c <_Znaj>
    640a:	9a 83       	std	Y+2, r25	; 0x02
    640c:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    640e:	89 81       	ldd	r24, Y+1	; 0x01
    6410:	9a 81       	ldd	r25, Y+2	; 0x02
    6412:	9c 83       	std	Y+4, r25	; 0x04
    6414:	8b 83       	std	Y+3, r24	; 0x03
	
	encode (msgPtr, msgType);
    6416:	8d 81       	ldd	r24, Y+5	; 0x05
    6418:	9e 81       	ldd	r25, Y+6	; 0x06
    641a:	ac 01       	movw	r20, r24
    641c:	4e 5f       	subi	r20, 0xFE	; 254
    641e:	5f 4f       	sbci	r21, 0xFF	; 255
    6420:	8d 81       	ldd	r24, Y+5	; 0x05
    6422:	9e 81       	ldd	r25, Y+6	; 0x06
    6424:	9e 01       	movw	r18, r28
    6426:	2d 5f       	subi	r18, 0xFD	; 253
    6428:	3f 4f       	sbci	r19, 0xFF	; 255
    642a:	b9 01       	movw	r22, r18
    642c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <_ZN10helicopter8messages7Message6encodeERPhRh>
	encode (msgPtr, MagYaw);
    6430:	8d 81       	ldd	r24, Y+5	; 0x05
    6432:	9e 81       	ldd	r25, Y+6	; 0x06
    6434:	ac 01       	movw	r20, r24
    6436:	4b 5f       	subi	r20, 0xFB	; 251
    6438:	5f 4f       	sbci	r21, 0xFF	; 255
    643a:	8d 81       	ldd	r24, Y+5	; 0x05
    643c:	9e 81       	ldd	r25, Y+6	; 0x06
    643e:	9e 01       	movw	r18, r28
    6440:	2d 5f       	subi	r18, 0xFD	; 253
    6442:	3f 4f       	sbci	r19, 0xFF	; 255
    6444:	b9 01       	movw	r22, r18
    6446:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawVelocityDegreesPerSecond);
    644a:	8d 81       	ldd	r24, Y+5	; 0x05
    644c:	9e 81       	ldd	r25, Y+6	; 0x06
    644e:	ac 01       	movw	r20, r24
    6450:	47 5f       	subi	r20, 0xF7	; 247
    6452:	5f 4f       	sbci	r21, 0xFF	; 255
    6454:	8d 81       	ldd	r24, Y+5	; 0x05
    6456:	9e 81       	ldd	r25, Y+6	; 0x06
    6458:	9e 01       	movw	r18, r28
    645a:	2d 5f       	subi	r18, 0xFD	; 253
    645c:	3f 4f       	sbci	r19, 0xFF	; 255
    645e:	b9 01       	movw	r22, r18
    6460:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawIntegral);
    6464:	8d 81       	ldd	r24, Y+5	; 0x05
    6466:	9e 81       	ldd	r25, Y+6	; 0x06
    6468:	ac 01       	movw	r20, r24
    646a:	43 5f       	subi	r20, 0xF3	; 243
    646c:	5f 4f       	sbci	r21, 0xFF	; 255
    646e:	8d 81       	ldd	r24, Y+5	; 0x05
    6470:	9e 81       	ldd	r25, Y+6	; 0x06
    6472:	9e 01       	movw	r18, r28
    6474:	2d 5f       	subi	r18, 0xFD	; 253
    6476:	3f 4f       	sbci	r19, 0xFF	; 255
    6478:	b9 01       	movw	r22, r18
    647a:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawProportional);
    647e:	8d 81       	ldd	r24, Y+5	; 0x05
    6480:	9e 81       	ldd	r25, Y+6	; 0x06
    6482:	ac 01       	movw	r20, r24
    6484:	4f 5e       	subi	r20, 0xEF	; 239
    6486:	5f 4f       	sbci	r21, 0xFF	; 255
    6488:	8d 81       	ldd	r24, Y+5	; 0x05
    648a:	9e 81       	ldd	r25, Y+6	; 0x06
    648c:	9e 01       	movw	r18, r28
    648e:	2d 5f       	subi	r18, 0xFD	; 253
    6490:	3f 4f       	sbci	r19, 0xFF	; 255
    6492:	b9 01       	movw	r22, r18
    6494:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawDerivativeError);
    6498:	8d 81       	ldd	r24, Y+5	; 0x05
    649a:	9e 81       	ldd	r25, Y+6	; 0x06
    649c:	ac 01       	movw	r20, r24
    649e:	4b 5e       	subi	r20, 0xEB	; 235
    64a0:	5f 4f       	sbci	r21, 0xFF	; 255
    64a2:	8d 81       	ldd	r24, Y+5	; 0x05
    64a4:	9e 81       	ldd	r25, Y+6	; 0x06
    64a6:	9e 01       	movw	r18, r28
    64a8:	2d 5f       	subi	r18, 0xFD	; 253
    64aa:	3f 4f       	sbci	r19, 0xFF	; 255
    64ac:	b9 01       	movw	r22, r18
    64ae:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawControl);
    64b2:	8d 81       	ldd	r24, Y+5	; 0x05
    64b4:	9e 81       	ldd	r25, Y+6	; 0x06
    64b6:	ac 01       	movw	r20, r24
    64b8:	47 5e       	subi	r20, 0xE7	; 231
    64ba:	5f 4f       	sbci	r21, 0xFF	; 255
    64bc:	8d 81       	ldd	r24, Y+5	; 0x05
    64be:	9e 81       	ldd	r25, Y+6	; 0x06
    64c0:	9e 01       	movw	r18, r28
    64c2:	2d 5f       	subi	r18, 0xFD	; 253
    64c4:	3f 4f       	sbci	r19, 0xFF	; 255
    64c6:	b9 01       	movw	r22, r18
    64c8:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawIntegralGain);
    64cc:	8d 81       	ldd	r24, Y+5	; 0x05
    64ce:	9e 81       	ldd	r25, Y+6	; 0x06
    64d0:	ac 01       	movw	r20, r24
    64d2:	43 5e       	subi	r20, 0xE3	; 227
    64d4:	5f 4f       	sbci	r21, 0xFF	; 255
    64d6:	8d 81       	ldd	r24, Y+5	; 0x05
    64d8:	9e 81       	ldd	r25, Y+6	; 0x06
    64da:	9e 01       	movw	r18, r28
    64dc:	2d 5f       	subi	r18, 0xFD	; 253
    64de:	3f 4f       	sbci	r19, 0xFF	; 255
    64e0:	b9 01       	movw	r22, r18
    64e2:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawDerivativeGain);
    64e6:	8d 81       	ldd	r24, Y+5	; 0x05
    64e8:	9e 81       	ldd	r25, Y+6	; 0x06
    64ea:	ac 01       	movw	r20, r24
    64ec:	4f 5d       	subi	r20, 0xDF	; 223
    64ee:	5f 4f       	sbci	r21, 0xFF	; 255
    64f0:	8d 81       	ldd	r24, Y+5	; 0x05
    64f2:	9e 81       	ldd	r25, Y+6	; 0x06
    64f4:	9e 01       	movw	r18, r28
    64f6:	2d 5f       	subi	r18, 0xFD	; 253
    64f8:	3f 4f       	sbci	r19, 0xFF	; 255
    64fa:	b9 01       	movw	r22, r18
    64fc:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawProportionalGain);
    6500:	8d 81       	ldd	r24, Y+5	; 0x05
    6502:	9e 81       	ldd	r25, Y+6	; 0x06
    6504:	ac 01       	movw	r20, r24
    6506:	4b 5d       	subi	r20, 0xDB	; 219
    6508:	5f 4f       	sbci	r21, 0xFF	; 255
    650a:	8d 81       	ldd	r24, Y+5	; 0x05
    650c:	9e 81       	ldd	r25, Y+6	; 0x06
    650e:	9e 01       	movw	r18, r28
    6510:	2d 5f       	subi	r18, 0xFD	; 253
    6512:	3f 4f       	sbci	r19, 0xFF	; 255
    6514:	b9 01       	movw	r22, r18
    6516:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YawAntiWindupGain);
    651a:	8d 81       	ldd	r24, Y+5	; 0x05
    651c:	9e 81       	ldd	r25, Y+6	; 0x06
    651e:	ac 01       	movw	r20, r24
    6520:	47 5d       	subi	r20, 0xD7	; 215
    6522:	5f 4f       	sbci	r21, 0xFF	; 255
    6524:	8d 81       	ldd	r24, Y+5	; 0x05
    6526:	9e 81       	ldd	r25, Y+6	; 0x06
    6528:	9e 01       	movw	r18, r28
    652a:	2d 5f       	subi	r18, 0xFD	; 253
    652c:	3f 4f       	sbci	r19, 0xFF	; 255
    652e:	b9 01       	movw	r22, r18
    6530:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	


	encode (msgPtr, XNEDBodyFrame);
    6534:	8d 81       	ldd	r24, Y+5	; 0x05
    6536:	9e 81       	ldd	r25, Y+6	; 0x06
    6538:	ac 01       	movw	r20, r24
    653a:	43 5d       	subi	r20, 0xD3	; 211
    653c:	5f 4f       	sbci	r21, 0xFF	; 255
    653e:	8d 81       	ldd	r24, Y+5	; 0x05
    6540:	9e 81       	ldd	r25, Y+6	; 0x06
    6542:	9e 01       	movw	r18, r28
    6544:	2d 5f       	subi	r18, 0xFD	; 253
    6546:	3f 4f       	sbci	r19, 0xFF	; 255
    6548:	b9 01       	movw	r22, r18
    654a:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XVelocityMetersPerSecond);
    654e:	8d 81       	ldd	r24, Y+5	; 0x05
    6550:	9e 81       	ldd	r25, Y+6	; 0x06
    6552:	ac 01       	movw	r20, r24
    6554:	4f 5c       	subi	r20, 0xCF	; 207
    6556:	5f 4f       	sbci	r21, 0xFF	; 255
    6558:	8d 81       	ldd	r24, Y+5	; 0x05
    655a:	9e 81       	ldd	r25, Y+6	; 0x06
    655c:	9e 01       	movw	r18, r28
    655e:	2d 5f       	subi	r18, 0xFD	; 253
    6560:	3f 4f       	sbci	r19, 0xFF	; 255
    6562:	b9 01       	movw	r22, r18
    6564:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ThetaPitchDegrees);	
    6568:	8d 81       	ldd	r24, Y+5	; 0x05
    656a:	9e 81       	ldd	r25, Y+6	; 0x06
    656c:	ac 01       	movw	r20, r24
    656e:	4b 5c       	subi	r20, 0xCB	; 203
    6570:	5f 4f       	sbci	r21, 0xFF	; 255
    6572:	8d 81       	ldd	r24, Y+5	; 0x05
    6574:	9e 81       	ldd	r25, Y+6	; 0x06
    6576:	9e 01       	movw	r18, r28
    6578:	2d 5f       	subi	r18, 0xFD	; 253
    657a:	3f 4f       	sbci	r19, 0xFF	; 255
    657c:	b9 01       	movw	r22, r18
    657e:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XIntegral);
    6582:	8d 81       	ldd	r24, Y+5	; 0x05
    6584:	9e 81       	ldd	r25, Y+6	; 0x06
    6586:	ac 01       	movw	r20, r24
    6588:	47 5c       	subi	r20, 0xC7	; 199
    658a:	5f 4f       	sbci	r21, 0xFF	; 255
    658c:	8d 81       	ldd	r24, Y+5	; 0x05
    658e:	9e 81       	ldd	r25, Y+6	; 0x06
    6590:	9e 01       	movw	r18, r28
    6592:	2d 5f       	subi	r18, 0xFD	; 253
    6594:	3f 4f       	sbci	r19, 0xFF	; 255
    6596:	b9 01       	movw	r22, r18
    6598:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XProportional);
    659c:	8d 81       	ldd	r24, Y+5	; 0x05
    659e:	9e 81       	ldd	r25, Y+6	; 0x06
    65a0:	ac 01       	movw	r20, r24
    65a2:	43 5c       	subi	r20, 0xC3	; 195
    65a4:	5f 4f       	sbci	r21, 0xFF	; 255
    65a6:	8d 81       	ldd	r24, Y+5	; 0x05
    65a8:	9e 81       	ldd	r25, Y+6	; 0x06
    65aa:	9e 01       	movw	r18, r28
    65ac:	2d 5f       	subi	r18, 0xFD	; 253
    65ae:	3f 4f       	sbci	r19, 0xFF	; 255
    65b0:	b9 01       	movw	r22, r18
    65b2:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XDerivativeError);
    65b6:	8d 81       	ldd	r24, Y+5	; 0x05
    65b8:	9e 81       	ldd	r25, Y+6	; 0x06
    65ba:	ac 01       	movw	r20, r24
    65bc:	4f 5b       	subi	r20, 0xBF	; 191
    65be:	5f 4f       	sbci	r21, 0xFF	; 255
    65c0:	8d 81       	ldd	r24, Y+5	; 0x05
    65c2:	9e 81       	ldd	r25, Y+6	; 0x06
    65c4:	9e 01       	movw	r18, r28
    65c6:	2d 5f       	subi	r18, 0xFD	; 253
    65c8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ca:	b9 01       	movw	r22, r18
    65cc:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, LongitudeControl);
    65d0:	8d 81       	ldd	r24, Y+5	; 0x05
    65d2:	9e 81       	ldd	r25, Y+6	; 0x06
    65d4:	ac 01       	movw	r20, r24
    65d6:	4b 5b       	subi	r20, 0xBB	; 187
    65d8:	5f 4f       	sbci	r21, 0xFF	; 255
    65da:	8d 81       	ldd	r24, Y+5	; 0x05
    65dc:	9e 81       	ldd	r25, Y+6	; 0x06
    65de:	9e 01       	movw	r18, r28
    65e0:	2d 5f       	subi	r18, 0xFD	; 253
    65e2:	3f 4f       	sbci	r19, 0xFF	; 255
    65e4:	b9 01       	movw	r22, r18
    65e6:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XIntegralGain);
    65ea:	8d 81       	ldd	r24, Y+5	; 0x05
    65ec:	9e 81       	ldd	r25, Y+6	; 0x06
    65ee:	ac 01       	movw	r20, r24
    65f0:	47 5b       	subi	r20, 0xB7	; 183
    65f2:	5f 4f       	sbci	r21, 0xFF	; 255
    65f4:	8d 81       	ldd	r24, Y+5	; 0x05
    65f6:	9e 81       	ldd	r25, Y+6	; 0x06
    65f8:	9e 01       	movw	r18, r28
    65fa:	2d 5f       	subi	r18, 0xFD	; 253
    65fc:	3f 4f       	sbci	r19, 0xFF	; 255
    65fe:	b9 01       	movw	r22, r18
    6600:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XDerivativeGain);
    6604:	8d 81       	ldd	r24, Y+5	; 0x05
    6606:	9e 81       	ldd	r25, Y+6	; 0x06
    6608:	ac 01       	movw	r20, r24
    660a:	43 5b       	subi	r20, 0xB3	; 179
    660c:	5f 4f       	sbci	r21, 0xFF	; 255
    660e:	8d 81       	ldd	r24, Y+5	; 0x05
    6610:	9e 81       	ldd	r25, Y+6	; 0x06
    6612:	9e 01       	movw	r18, r28
    6614:	2d 5f       	subi	r18, 0xFD	; 253
    6616:	3f 4f       	sbci	r19, 0xFF	; 255
    6618:	b9 01       	movw	r22, r18
    661a:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XProportionalGain);
    661e:	8d 81       	ldd	r24, Y+5	; 0x05
    6620:	9e 81       	ldd	r25, Y+6	; 0x06
    6622:	ac 01       	movw	r20, r24
    6624:	4f 5a       	subi	r20, 0xAF	; 175
    6626:	5f 4f       	sbci	r21, 0xFF	; 255
    6628:	8d 81       	ldd	r24, Y+5	; 0x05
    662a:	9e 81       	ldd	r25, Y+6	; 0x06
    662c:	9e 01       	movw	r18, r28
    662e:	2d 5f       	subi	r18, 0xFD	; 253
    6630:	3f 4f       	sbci	r19, 0xFF	; 255
    6632:	b9 01       	movw	r22, r18
    6634:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XAntiWindupGain);	
    6638:	8d 81       	ldd	r24, Y+5	; 0x05
    663a:	9e 81       	ldd	r25, Y+6	; 0x06
    663c:	ac 01       	movw	r20, r24
    663e:	4b 5a       	subi	r20, 0xAB	; 171
    6640:	5f 4f       	sbci	r21, 0xFF	; 255
    6642:	8d 81       	ldd	r24, Y+5	; 0x05
    6644:	9e 81       	ldd	r25, Y+6	; 0x06
    6646:	9e 01       	movw	r18, r28
    6648:	2d 5f       	subi	r18, 0xFD	; 253
    664a:	3f 4f       	sbci	r19, 0xFF	; 255
    664c:	b9 01       	movw	r22, r18
    664e:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, LongitudeInnerLoopGain);	
    6652:	8d 81       	ldd	r24, Y+5	; 0x05
    6654:	9e 81       	ldd	r25, Y+6	; 0x06
    6656:	ac 01       	movw	r20, r24
    6658:	47 5a       	subi	r20, 0xA7	; 167
    665a:	5f 4f       	sbci	r21, 0xFF	; 255
    665c:	8d 81       	ldd	r24, Y+5	; 0x05
    665e:	9e 81       	ldd	r25, Y+6	; 0x06
    6660:	9e 01       	movw	r18, r28
    6662:	2d 5f       	subi	r18, 0xFD	; 253
    6664:	3f 4f       	sbci	r19, 0xFF	; 255
    6666:	b9 01       	movw	r22, r18
    6668:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, XLongitudeOuterLoopSetpoint);
    666c:	8d 81       	ldd	r24, Y+5	; 0x05
    666e:	9e 81       	ldd	r25, Y+6	; 0x06
    6670:	ac 01       	movw	r20, r24
    6672:	43 5a       	subi	r20, 0xA3	; 163
    6674:	5f 4f       	sbci	r21, 0xFF	; 255
    6676:	8d 81       	ldd	r24, Y+5	; 0x05
    6678:	9e 81       	ldd	r25, Y+6	; 0x06
    667a:	9e 01       	movw	r18, r28
    667c:	2d 5f       	subi	r18, 0xFD	; 253
    667e:	3f 4f       	sbci	r19, 0xFF	; 255
    6680:	b9 01       	movw	r22, r18
    6682:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, PitchAngularVelocityRadsPerSecond);
    6686:	8d 81       	ldd	r24, Y+5	; 0x05
    6688:	9e 81       	ldd	r25, Y+6	; 0x06
    668a:	ac 01       	movw	r20, r24
    668c:	4f 59       	subi	r20, 0x9F	; 159
    668e:	5f 4f       	sbci	r21, 0xFF	; 255
    6690:	8d 81       	ldd	r24, Y+5	; 0x05
    6692:	9e 81       	ldd	r25, Y+6	; 0x06
    6694:	9e 01       	movw	r18, r28
    6696:	2d 5f       	subi	r18, 0xFD	; 253
    6698:	3f 4f       	sbci	r19, 0xFF	; 255
    669a:	b9 01       	movw	r22, r18
    669c:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, PitchAngularVelocityGain);
    66a0:	8d 81       	ldd	r24, Y+5	; 0x05
    66a2:	9e 81       	ldd	r25, Y+6	; 0x06
    66a4:	ac 01       	movw	r20, r24
    66a6:	4b 59       	subi	r20, 0x9B	; 155
    66a8:	5f 4f       	sbci	r21, 0xFF	; 255
    66aa:	8d 81       	ldd	r24, Y+5	; 0x05
    66ac:	9e 81       	ldd	r25, Y+6	; 0x06
    66ae:	9e 01       	movw	r18, r28
    66b0:	2d 5f       	subi	r18, 0xFD	; 253
    66b2:	3f 4f       	sbci	r19, 0xFF	; 255
    66b4:	b9 01       	movw	r22, r18
    66b6:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	
	encode (msgPtr, YNEDBodyFrame);
    66ba:	8d 81       	ldd	r24, Y+5	; 0x05
    66bc:	9e 81       	ldd	r25, Y+6	; 0x06
    66be:	ac 01       	movw	r20, r24
    66c0:	47 59       	subi	r20, 0x97	; 151
    66c2:	5f 4f       	sbci	r21, 0xFF	; 255
    66c4:	8d 81       	ldd	r24, Y+5	; 0x05
    66c6:	9e 81       	ldd	r25, Y+6	; 0x06
    66c8:	9e 01       	movw	r18, r28
    66ca:	2d 5f       	subi	r18, 0xFD	; 253
    66cc:	3f 4f       	sbci	r19, 0xFF	; 255
    66ce:	b9 01       	movw	r22, r18
    66d0:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YVelocityMetersPerSecond);
    66d4:	8d 81       	ldd	r24, Y+5	; 0x05
    66d6:	9e 81       	ldd	r25, Y+6	; 0x06
    66d8:	ac 01       	movw	r20, r24
    66da:	43 59       	subi	r20, 0x93	; 147
    66dc:	5f 4f       	sbci	r21, 0xFF	; 255
    66de:	8d 81       	ldd	r24, Y+5	; 0x05
    66e0:	9e 81       	ldd	r25, Y+6	; 0x06
    66e2:	9e 01       	movw	r18, r28
    66e4:	2d 5f       	subi	r18, 0xFD	; 253
    66e6:	3f 4f       	sbci	r19, 0xFF	; 255
    66e8:	b9 01       	movw	r22, r18
    66ea:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, PhiRollDegrees);
    66ee:	8d 81       	ldd	r24, Y+5	; 0x05
    66f0:	9e 81       	ldd	r25, Y+6	; 0x06
    66f2:	ac 01       	movw	r20, r24
    66f4:	4f 58       	subi	r20, 0x8F	; 143
    66f6:	5f 4f       	sbci	r21, 0xFF	; 255
    66f8:	8d 81       	ldd	r24, Y+5	; 0x05
    66fa:	9e 81       	ldd	r25, Y+6	; 0x06
    66fc:	9e 01       	movw	r18, r28
    66fe:	2d 5f       	subi	r18, 0xFD	; 253
    6700:	3f 4f       	sbci	r19, 0xFF	; 255
    6702:	b9 01       	movw	r22, r18
    6704:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YIntegral);
    6708:	8d 81       	ldd	r24, Y+5	; 0x05
    670a:	9e 81       	ldd	r25, Y+6	; 0x06
    670c:	ac 01       	movw	r20, r24
    670e:	4b 58       	subi	r20, 0x8B	; 139
    6710:	5f 4f       	sbci	r21, 0xFF	; 255
    6712:	8d 81       	ldd	r24, Y+5	; 0x05
    6714:	9e 81       	ldd	r25, Y+6	; 0x06
    6716:	9e 01       	movw	r18, r28
    6718:	2d 5f       	subi	r18, 0xFD	; 253
    671a:	3f 4f       	sbci	r19, 0xFF	; 255
    671c:	b9 01       	movw	r22, r18
    671e:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YProportional);
    6722:	8d 81       	ldd	r24, Y+5	; 0x05
    6724:	9e 81       	ldd	r25, Y+6	; 0x06
    6726:	ac 01       	movw	r20, r24
    6728:	47 58       	subi	r20, 0x87	; 135
    672a:	5f 4f       	sbci	r21, 0xFF	; 255
    672c:	8d 81       	ldd	r24, Y+5	; 0x05
    672e:	9e 81       	ldd	r25, Y+6	; 0x06
    6730:	9e 01       	movw	r18, r28
    6732:	2d 5f       	subi	r18, 0xFD	; 253
    6734:	3f 4f       	sbci	r19, 0xFF	; 255
    6736:	b9 01       	movw	r22, r18
    6738:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YDerivativeError);
    673c:	8d 81       	ldd	r24, Y+5	; 0x05
    673e:	9e 81       	ldd	r25, Y+6	; 0x06
    6740:	ac 01       	movw	r20, r24
    6742:	43 58       	subi	r20, 0x83	; 131
    6744:	5f 4f       	sbci	r21, 0xFF	; 255
    6746:	8d 81       	ldd	r24, Y+5	; 0x05
    6748:	9e 81       	ldd	r25, Y+6	; 0x06
    674a:	9e 01       	movw	r18, r28
    674c:	2d 5f       	subi	r18, 0xFD	; 253
    674e:	3f 4f       	sbci	r19, 0xFF	; 255
    6750:	b9 01       	movw	r22, r18
    6752:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, LateralControl);
    6756:	8d 81       	ldd	r24, Y+5	; 0x05
    6758:	9e 81       	ldd	r25, Y+6	; 0x06
    675a:	ac 01       	movw	r20, r24
    675c:	4f 57       	subi	r20, 0x7F	; 127
    675e:	5f 4f       	sbci	r21, 0xFF	; 255
    6760:	8d 81       	ldd	r24, Y+5	; 0x05
    6762:	9e 81       	ldd	r25, Y+6	; 0x06
    6764:	9e 01       	movw	r18, r28
    6766:	2d 5f       	subi	r18, 0xFD	; 253
    6768:	3f 4f       	sbci	r19, 0xFF	; 255
    676a:	b9 01       	movw	r22, r18
    676c:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YIntegralGain);
    6770:	8d 81       	ldd	r24, Y+5	; 0x05
    6772:	9e 81       	ldd	r25, Y+6	; 0x06
    6774:	ac 01       	movw	r20, r24
    6776:	4b 57       	subi	r20, 0x7B	; 123
    6778:	5f 4f       	sbci	r21, 0xFF	; 255
    677a:	8d 81       	ldd	r24, Y+5	; 0x05
    677c:	9e 81       	ldd	r25, Y+6	; 0x06
    677e:	9e 01       	movw	r18, r28
    6780:	2d 5f       	subi	r18, 0xFD	; 253
    6782:	3f 4f       	sbci	r19, 0xFF	; 255
    6784:	b9 01       	movw	r22, r18
    6786:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YDerivativeGain);
    678a:	8d 81       	ldd	r24, Y+5	; 0x05
    678c:	9e 81       	ldd	r25, Y+6	; 0x06
    678e:	ac 01       	movw	r20, r24
    6790:	47 57       	subi	r20, 0x77	; 119
    6792:	5f 4f       	sbci	r21, 0xFF	; 255
    6794:	8d 81       	ldd	r24, Y+5	; 0x05
    6796:	9e 81       	ldd	r25, Y+6	; 0x06
    6798:	9e 01       	movw	r18, r28
    679a:	2d 5f       	subi	r18, 0xFD	; 253
    679c:	3f 4f       	sbci	r19, 0xFF	; 255
    679e:	b9 01       	movw	r22, r18
    67a0:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YProportionalGain);
    67a4:	8d 81       	ldd	r24, Y+5	; 0x05
    67a6:	9e 81       	ldd	r25, Y+6	; 0x06
    67a8:	ac 01       	movw	r20, r24
    67aa:	43 57       	subi	r20, 0x73	; 115
    67ac:	5f 4f       	sbci	r21, 0xFF	; 255
    67ae:	8d 81       	ldd	r24, Y+5	; 0x05
    67b0:	9e 81       	ldd	r25, Y+6	; 0x06
    67b2:	9e 01       	movw	r18, r28
    67b4:	2d 5f       	subi	r18, 0xFD	; 253
    67b6:	3f 4f       	sbci	r19, 0xFF	; 255
    67b8:	b9 01       	movw	r22, r18
    67ba:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YAntiWindupGain);
    67be:	8d 81       	ldd	r24, Y+5	; 0x05
    67c0:	9e 81       	ldd	r25, Y+6	; 0x06
    67c2:	ac 01       	movw	r20, r24
    67c4:	4f 56       	subi	r20, 0x6F	; 111
    67c6:	5f 4f       	sbci	r21, 0xFF	; 255
    67c8:	8d 81       	ldd	r24, Y+5	; 0x05
    67ca:	9e 81       	ldd	r25, Y+6	; 0x06
    67cc:	9e 01       	movw	r18, r28
    67ce:	2d 5f       	subi	r18, 0xFD	; 253
    67d0:	3f 4f       	sbci	r19, 0xFF	; 255
    67d2:	b9 01       	movw	r22, r18
    67d4:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, LateralInnerLoopGain);	
    67d8:	8d 81       	ldd	r24, Y+5	; 0x05
    67da:	9e 81       	ldd	r25, Y+6	; 0x06
    67dc:	ac 01       	movw	r20, r24
    67de:	4b 56       	subi	r20, 0x6B	; 107
    67e0:	5f 4f       	sbci	r21, 0xFF	; 255
    67e2:	8d 81       	ldd	r24, Y+5	; 0x05
    67e4:	9e 81       	ldd	r25, Y+6	; 0x06
    67e6:	9e 01       	movw	r18, r28
    67e8:	2d 5f       	subi	r18, 0xFD	; 253
    67ea:	3f 4f       	sbci	r19, 0xFF	; 255
    67ec:	b9 01       	movw	r22, r18
    67ee:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, YLateralOuterLoopSetpoint);
    67f2:	8d 81       	ldd	r24, Y+5	; 0x05
    67f4:	9e 81       	ldd	r25, Y+6	; 0x06
    67f6:	ac 01       	movw	r20, r24
    67f8:	47 56       	subi	r20, 0x67	; 103
    67fa:	5f 4f       	sbci	r21, 0xFF	; 255
    67fc:	8d 81       	ldd	r24, Y+5	; 0x05
    67fe:	9e 81       	ldd	r25, Y+6	; 0x06
    6800:	9e 01       	movw	r18, r28
    6802:	2d 5f       	subi	r18, 0xFD	; 253
    6804:	3f 4f       	sbci	r19, 0xFF	; 255
    6806:	b9 01       	movw	r22, r18
    6808:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, RollAngularVelocityRadsPerSecond);
    680c:	8d 81       	ldd	r24, Y+5	; 0x05
    680e:	9e 81       	ldd	r25, Y+6	; 0x06
    6810:	ac 01       	movw	r20, r24
    6812:	43 56       	subi	r20, 0x63	; 99
    6814:	5f 4f       	sbci	r21, 0xFF	; 255
    6816:	8d 81       	ldd	r24, Y+5	; 0x05
    6818:	9e 81       	ldd	r25, Y+6	; 0x06
    681a:	9e 01       	movw	r18, r28
    681c:	2d 5f       	subi	r18, 0xFD	; 253
    681e:	3f 4f       	sbci	r19, 0xFF	; 255
    6820:	b9 01       	movw	r22, r18
    6822:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, RollAngularVelocityGain);
    6826:	8d 81       	ldd	r24, Y+5	; 0x05
    6828:	9e 81       	ldd	r25, Y+6	; 0x06
    682a:	ac 01       	movw	r20, r24
    682c:	4f 55       	subi	r20, 0x5F	; 95
    682e:	5f 4f       	sbci	r21, 0xFF	; 255
    6830:	8d 81       	ldd	r24, Y+5	; 0x05
    6832:	9e 81       	ldd	r25, Y+6	; 0x06
    6834:	9e 01       	movw	r18, r28
    6836:	2d 5f       	subi	r18, 0xFD	; 253
    6838:	3f 4f       	sbci	r19, 0xFF	; 255
    683a:	b9 01       	movw	r22, r18
    683c:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	

	encode (msgPtr, AltitudeFeetAgl);
    6840:	8d 81       	ldd	r24, Y+5	; 0x05
    6842:	9e 81       	ldd	r25, Y+6	; 0x06
    6844:	ac 01       	movw	r20, r24
    6846:	4b 55       	subi	r20, 0x5B	; 91
    6848:	5f 4f       	sbci	r21, 0xFF	; 255
    684a:	8d 81       	ldd	r24, Y+5	; 0x05
    684c:	9e 81       	ldd	r25, Y+6	; 0x06
    684e:	9e 01       	movw	r18, r28
    6850:	2d 5f       	subi	r18, 0xFD	; 253
    6852:	3f 4f       	sbci	r19, 0xFF	; 255
    6854:	b9 01       	movw	r22, r18
    6856:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZVelocityMetersPerSecond);
    685a:	8d 81       	ldd	r24, Y+5	; 0x05
    685c:	9e 81       	ldd	r25, Y+6	; 0x06
    685e:	ac 01       	movw	r20, r24
    6860:	47 55       	subi	r20, 0x57	; 87
    6862:	5f 4f       	sbci	r21, 0xFF	; 255
    6864:	8d 81       	ldd	r24, Y+5	; 0x05
    6866:	9e 81       	ldd	r25, Y+6	; 0x06
    6868:	9e 01       	movw	r18, r28
    686a:	2d 5f       	subi	r18, 0xFD	; 253
    686c:	3f 4f       	sbci	r19, 0xFF	; 255
    686e:	b9 01       	movw	r22, r18
    6870:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZIntegral);
    6874:	8d 81       	ldd	r24, Y+5	; 0x05
    6876:	9e 81       	ldd	r25, Y+6	; 0x06
    6878:	ac 01       	movw	r20, r24
    687a:	43 55       	subi	r20, 0x53	; 83
    687c:	5f 4f       	sbci	r21, 0xFF	; 255
    687e:	8d 81       	ldd	r24, Y+5	; 0x05
    6880:	9e 81       	ldd	r25, Y+6	; 0x06
    6882:	9e 01       	movw	r18, r28
    6884:	2d 5f       	subi	r18, 0xFD	; 253
    6886:	3f 4f       	sbci	r19, 0xFF	; 255
    6888:	b9 01       	movw	r22, r18
    688a:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZProportional);
    688e:	8d 81       	ldd	r24, Y+5	; 0x05
    6890:	9e 81       	ldd	r25, Y+6	; 0x06
    6892:	ac 01       	movw	r20, r24
    6894:	4f 54       	subi	r20, 0x4F	; 79
    6896:	5f 4f       	sbci	r21, 0xFF	; 255
    6898:	8d 81       	ldd	r24, Y+5	; 0x05
    689a:	9e 81       	ldd	r25, Y+6	; 0x06
    689c:	9e 01       	movw	r18, r28
    689e:	2d 5f       	subi	r18, 0xFD	; 253
    68a0:	3f 4f       	sbci	r19, 0xFF	; 255
    68a2:	b9 01       	movw	r22, r18
    68a4:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZDerivativeError);
    68a8:	8d 81       	ldd	r24, Y+5	; 0x05
    68aa:	9e 81       	ldd	r25, Y+6	; 0x06
    68ac:	ac 01       	movw	r20, r24
    68ae:	4b 54       	subi	r20, 0x4B	; 75
    68b0:	5f 4f       	sbci	r21, 0xFF	; 255
    68b2:	8d 81       	ldd	r24, Y+5	; 0x05
    68b4:	9e 81       	ldd	r25, Y+6	; 0x06
    68b6:	9e 01       	movw	r18, r28
    68b8:	2d 5f       	subi	r18, 0xFD	; 253
    68ba:	3f 4f       	sbci	r19, 0xFF	; 255
    68bc:	b9 01       	movw	r22, r18
    68be:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, MainRotorCollectiveControl);
    68c2:	8d 81       	ldd	r24, Y+5	; 0x05
    68c4:	9e 81       	ldd	r25, Y+6	; 0x06
    68c6:	ac 01       	movw	r20, r24
    68c8:	47 54       	subi	r20, 0x47	; 71
    68ca:	5f 4f       	sbci	r21, 0xFF	; 255
    68cc:	8d 81       	ldd	r24, Y+5	; 0x05
    68ce:	9e 81       	ldd	r25, Y+6	; 0x06
    68d0:	9e 01       	movw	r18, r28
    68d2:	2d 5f       	subi	r18, 0xFD	; 253
    68d4:	3f 4f       	sbci	r19, 0xFF	; 255
    68d6:	b9 01       	movw	r22, r18
    68d8:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZIntegralGain);
    68dc:	8d 81       	ldd	r24, Y+5	; 0x05
    68de:	9e 81       	ldd	r25, Y+6	; 0x06
    68e0:	ac 01       	movw	r20, r24
    68e2:	43 54       	subi	r20, 0x43	; 67
    68e4:	5f 4f       	sbci	r21, 0xFF	; 255
    68e6:	8d 81       	ldd	r24, Y+5	; 0x05
    68e8:	9e 81       	ldd	r25, Y+6	; 0x06
    68ea:	9e 01       	movw	r18, r28
    68ec:	2d 5f       	subi	r18, 0xFD	; 253
    68ee:	3f 4f       	sbci	r19, 0xFF	; 255
    68f0:	b9 01       	movw	r22, r18
    68f2:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZDerivativeGain);
    68f6:	8d 81       	ldd	r24, Y+5	; 0x05
    68f8:	9e 81       	ldd	r25, Y+6	; 0x06
    68fa:	ac 01       	movw	r20, r24
    68fc:	4f 53       	subi	r20, 0x3F	; 63
    68fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6900:	8d 81       	ldd	r24, Y+5	; 0x05
    6902:	9e 81       	ldd	r25, Y+6	; 0x06
    6904:	9e 01       	movw	r18, r28
    6906:	2d 5f       	subi	r18, 0xFD	; 253
    6908:	3f 4f       	sbci	r19, 0xFF	; 255
    690a:	b9 01       	movw	r22, r18
    690c:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZProportionalGain);
    6910:	8d 81       	ldd	r24, Y+5	; 0x05
    6912:	9e 81       	ldd	r25, Y+6	; 0x06
    6914:	ac 01       	movw	r20, r24
    6916:	4b 53       	subi	r20, 0x3B	; 59
    6918:	5f 4f       	sbci	r21, 0xFF	; 255
    691a:	8d 81       	ldd	r24, Y+5	; 0x05
    691c:	9e 81       	ldd	r25, Y+6	; 0x06
    691e:	9e 01       	movw	r18, r28
    6920:	2d 5f       	subi	r18, 0xFD	; 253
    6922:	3f 4f       	sbci	r19, 0xFF	; 255
    6924:	b9 01       	movw	r22, r18
    6926:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZAntiWindupGain);
    692a:	8d 81       	ldd	r24, Y+5	; 0x05
    692c:	9e 81       	ldd	r25, Y+6	; 0x06
    692e:	ac 01       	movw	r20, r24
    6930:	47 53       	subi	r20, 0x37	; 55
    6932:	5f 4f       	sbci	r21, 0xFF	; 255
    6934:	8d 81       	ldd	r24, Y+5	; 0x05
    6936:	9e 81       	ldd	r25, Y+6	; 0x06
    6938:	9e 01       	movw	r18, r28
    693a:	2d 5f       	subi	r18, 0xFD	; 253
    693c:	3f 4f       	sbci	r19, 0xFF	; 255
    693e:	b9 01       	movw	r22, r18
    6940:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode (msgPtr, ZNEDBodyFrame);
    6944:	8d 81       	ldd	r24, Y+5	; 0x05
    6946:	9e 81       	ldd	r25, Y+6	; 0x06
    6948:	ac 01       	movw	r20, r24
    694a:	43 53       	subi	r20, 0x33	; 51
    694c:	5f 4f       	sbci	r21, 0xFF	; 255
    694e:	8d 81       	ldd	r24, Y+5	; 0x05
    6950:	9e 81       	ldd	r25, Y+6	; 0x06
    6952:	9e 01       	movw	r18, r28
    6954:	2d 5f       	subi	r18, 0xFD	; 253
    6956:	3f 4f       	sbci	r19, 0xFF	; 255
    6958:	b9 01       	movw	r22, r18
    695a:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
		
	
	encode(msgPtr, LatitudeDegrees);
    695e:	8d 81       	ldd	r24, Y+5	; 0x05
    6960:	9e 81       	ldd	r25, Y+6	; 0x06
    6962:	ac 01       	movw	r20, r24
    6964:	4f 52       	subi	r20, 0x2F	; 47
    6966:	5f 4f       	sbci	r21, 0xFF	; 255
    6968:	8d 81       	ldd	r24, Y+5	; 0x05
    696a:	9e 81       	ldd	r25, Y+6	; 0x06
    696c:	9e 01       	movw	r18, r28
    696e:	2d 5f       	subi	r18, 0xFD	; 253
    6970:	3f 4f       	sbci	r19, 0xFF	; 255
    6972:	b9 01       	movw	r22, r18
    6974:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	encode(msgPtr, LongitudeDegrees);
    6978:	8d 81       	ldd	r24, Y+5	; 0x05
    697a:	9e 81       	ldd	r25, Y+6	; 0x06
    697c:	ac 01       	movw	r20, r24
    697e:	4b 52       	subi	r20, 0x2B	; 43
    6980:	5f 4f       	sbci	r21, 0xFF	; 255
    6982:	8d 81       	ldd	r24, Y+5	; 0x05
    6984:	9e 81       	ldd	r25, Y+6	; 0x06
    6986:	9e 01       	movw	r18, r28
    6988:	2d 5f       	subi	r18, 0xFD	; 253
    698a:	3f 4f       	sbci	r19, 0xFF	; 255
    698c:	b9 01       	movw	r22, r18
    698e:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN10helicopter8messages7Message6encodeERPhRf>
	
	encode (msgPtr, Timeouts);
    6992:	8d 81       	ldd	r24, Y+5	; 0x05
    6994:	9e 81       	ldd	r25, Y+6	; 0x06
    6996:	ac 01       	movw	r20, r24
    6998:	47 52       	subi	r20, 0x27	; 39
    699a:	5f 4f       	sbci	r21, 0xFF	; 255
    699c:	8d 81       	ldd	r24, Y+5	; 0x05
    699e:	9e 81       	ldd	r25, Y+6	; 0x06
    69a0:	9e 01       	movw	r18, r28
    69a2:	2d 5f       	subi	r18, 0xFD	; 253
    69a4:	3f 4f       	sbci	r19, 0xFF	; 255
    69a6:	b9 01       	movw	r22, r18
    69a8:	0e 94 88 2b 	call	0x5710	; 0x5710 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, UnrecognizedMsgTypes);
    69ac:	8d 81       	ldd	r24, Y+5	; 0x05
    69ae:	9e 81       	ldd	r25, Y+6	; 0x06
    69b0:	ac 01       	movw	r20, r24
    69b2:	43 52       	subi	r20, 0x23	; 35
    69b4:	5f 4f       	sbci	r21, 0xFF	; 255
    69b6:	8d 81       	ldd	r24, Y+5	; 0x05
    69b8:	9e 81       	ldd	r25, Y+6	; 0x06
    69ba:	9e 01       	movw	r18, r28
    69bc:	2d 5f       	subi	r18, 0xFD	; 253
    69be:	3f 4f       	sbci	r19, 0xFF	; 255
    69c0:	b9 01       	movw	r22, r18
    69c2:	0e 94 88 2b 	call	0x5710	; 0x5710 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, ChecksumErrors);
    69c6:	8d 81       	ldd	r24, Y+5	; 0x05
    69c8:	9e 81       	ldd	r25, Y+6	; 0x06
    69ca:	ac 01       	movw	r20, r24
    69cc:	4f 51       	subi	r20, 0x1F	; 31
    69ce:	5f 4f       	sbci	r21, 0xFF	; 255
    69d0:	8d 81       	ldd	r24, Y+5	; 0x05
    69d2:	9e 81       	ldd	r25, Y+6	; 0x06
    69d4:	9e 01       	movw	r18, r28
    69d6:	2d 5f       	subi	r18, 0xFD	; 253
    69d8:	3f 4f       	sbci	r19, 0xFF	; 255
    69da:	b9 01       	movw	r22, r18
    69dc:	0e 94 88 2b 	call	0x5710	; 0x5710 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, NumOfBlownFrames);
    69e0:	8d 81       	ldd	r24, Y+5	; 0x05
    69e2:	9e 81       	ldd	r25, Y+6	; 0x06
    69e4:	ac 01       	movw	r20, r24
    69e6:	4b 51       	subi	r20, 0x1B	; 27
    69e8:	5f 4f       	sbci	r21, 0xFF	; 255
    69ea:	8d 81       	ldd	r24, Y+5	; 0x05
    69ec:	9e 81       	ldd	r25, Y+6	; 0x06
    69ee:	9e 01       	movw	r18, r28
    69f0:	2d 5f       	subi	r18, 0xFD	; 253
    69f2:	3f 4f       	sbci	r19, 0xFF	; 255
    69f4:	b9 01       	movw	r22, r18
    69f6:	0e 94 88 2b 	call	0x5710	; 0x5710 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, SerialCommunicationBufferOverruns);
    69fa:	8d 81       	ldd	r24, Y+5	; 0x05
    69fc:	9e 81       	ldd	r25, Y+6	; 0x06
    69fe:	ac 01       	movw	r20, r24
    6a00:	47 51       	subi	r20, 0x17	; 23
    6a02:	5f 4f       	sbci	r21, 0xFF	; 255
    6a04:	8d 81       	ldd	r24, Y+5	; 0x05
    6a06:	9e 81       	ldd	r25, Y+6	; 0x06
    6a08:	9e 01       	movw	r18, r28
    6a0a:	2d 5f       	subi	r18, 0xFD	; 253
    6a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a0e:	b9 01       	movw	r22, r18
    6a10:	0e 94 88 2b 	call	0x5710	; 0x5710 <_ZN10helicopter8messages7Message6encodeERPhRl>
				
	return msg;
    6a14:	89 81       	ldd	r24, Y+1	; 0x01
    6a16:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6a18:	26 96       	adiw	r28, 0x06	; 6
    6a1a:	0f b6       	in	r0, 0x3f	; 63
    6a1c:	f8 94       	cli
    6a1e:	de bf       	out	0x3e, r29	; 62
    6a20:	0f be       	out	0x3f, r0	; 63
    6a22:	cd bf       	out	0x3d, r28	; 61
    6a24:	df 91       	pop	r29
    6a26:	cf 91       	pop	r28
    6a28:	08 95       	ret

00006a2a <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    6a2a:	cf 93       	push	r28
    6a2c:	df 93       	push	r29
    6a2e:	00 d0       	rcall	.+0      	; 0x6a30 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x6>
    6a30:	1f 92       	push	r1
    6a32:	cd b7       	in	r28, 0x3d	; 61
    6a34:	de b7       	in	r29, 0x3e	; 62
    6a36:	9a 83       	std	Y+2, r25	; 0x02
    6a38:	89 83       	std	Y+1, r24	; 0x01
    6a3a:	7c 83       	std	Y+4, r23	; 0x04
    6a3c:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    6a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a40:	9c 81       	ldd	r25, Y+4	; 0x04
    6a42:	00 97       	sbiw	r24, 0x00	; 0
    6a44:	09 f4       	brne	.+2      	; 0x6a48 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1e>
    6a46:	ff c2       	rjmp	.+1534   	; 0x7046 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x61c>
	{
		decode (message,msgType);
    6a48:	89 81       	ldd	r24, Y+1	; 0x01
    6a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a4c:	ac 01       	movw	r20, r24
    6a4e:	4e 5f       	subi	r20, 0xFE	; 254
    6a50:	5f 4f       	sbci	r21, 0xFF	; 255
    6a52:	89 81       	ldd	r24, Y+1	; 0x01
    6a54:	9a 81       	ldd	r25, Y+2	; 0x02
    6a56:	9e 01       	movw	r18, r28
    6a58:	2d 5f       	subi	r18, 0xFD	; 253
    6a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a5c:	b9 01       	movw	r22, r18
    6a5e:	0e 94 11 2c 	call	0x5822	; 0x5822 <_ZN10helicopter8messages7Message6decodeERPhRh>
		decode (message,MagYaw);
    6a62:	89 81       	ldd	r24, Y+1	; 0x01
    6a64:	9a 81       	ldd	r25, Y+2	; 0x02
    6a66:	ac 01       	movw	r20, r24
    6a68:	4b 5f       	subi	r20, 0xFB	; 251
    6a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a6c:	89 81       	ldd	r24, Y+1	; 0x01
    6a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a70:	9e 01       	movw	r18, r28
    6a72:	2d 5f       	subi	r18, 0xFD	; 253
    6a74:	3f 4f       	sbci	r19, 0xFF	; 255
    6a76:	b9 01       	movw	r22, r18
    6a78:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawVelocityDegreesPerSecond);
    6a7c:	89 81       	ldd	r24, Y+1	; 0x01
    6a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a80:	ac 01       	movw	r20, r24
    6a82:	47 5f       	subi	r20, 0xF7	; 247
    6a84:	5f 4f       	sbci	r21, 0xFF	; 255
    6a86:	89 81       	ldd	r24, Y+1	; 0x01
    6a88:	9a 81       	ldd	r25, Y+2	; 0x02
    6a8a:	9e 01       	movw	r18, r28
    6a8c:	2d 5f       	subi	r18, 0xFD	; 253
    6a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a90:	b9 01       	movw	r22, r18
    6a92:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawIntegral);
    6a96:	89 81       	ldd	r24, Y+1	; 0x01
    6a98:	9a 81       	ldd	r25, Y+2	; 0x02
    6a9a:	ac 01       	movw	r20, r24
    6a9c:	43 5f       	subi	r20, 0xF3	; 243
    6a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    6aa0:	89 81       	ldd	r24, Y+1	; 0x01
    6aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    6aa4:	9e 01       	movw	r18, r28
    6aa6:	2d 5f       	subi	r18, 0xFD	; 253
    6aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aaa:	b9 01       	movw	r22, r18
    6aac:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawProportional);
    6ab0:	89 81       	ldd	r24, Y+1	; 0x01
    6ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ab4:	ac 01       	movw	r20, r24
    6ab6:	4f 5e       	subi	r20, 0xEF	; 239
    6ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    6aba:	89 81       	ldd	r24, Y+1	; 0x01
    6abc:	9a 81       	ldd	r25, Y+2	; 0x02
    6abe:	9e 01       	movw	r18, r28
    6ac0:	2d 5f       	subi	r18, 0xFD	; 253
    6ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ac4:	b9 01       	movw	r22, r18
    6ac6:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawDerivativeError);	
    6aca:	89 81       	ldd	r24, Y+1	; 0x01
    6acc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ace:	ac 01       	movw	r20, r24
    6ad0:	4b 5e       	subi	r20, 0xEB	; 235
    6ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ad4:	89 81       	ldd	r24, Y+1	; 0x01
    6ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ad8:	9e 01       	movw	r18, r28
    6ada:	2d 5f       	subi	r18, 0xFD	; 253
    6adc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ade:	b9 01       	movw	r22, r18
    6ae0:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawControl);	
    6ae4:	89 81       	ldd	r24, Y+1	; 0x01
    6ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae8:	ac 01       	movw	r20, r24
    6aea:	47 5e       	subi	r20, 0xE7	; 231
    6aec:	5f 4f       	sbci	r21, 0xFF	; 255
    6aee:	89 81       	ldd	r24, Y+1	; 0x01
    6af0:	9a 81       	ldd	r25, Y+2	; 0x02
    6af2:	9e 01       	movw	r18, r28
    6af4:	2d 5f       	subi	r18, 0xFD	; 253
    6af6:	3f 4f       	sbci	r19, 0xFF	; 255
    6af8:	b9 01       	movw	r22, r18
    6afa:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawIntegralGain);
    6afe:	89 81       	ldd	r24, Y+1	; 0x01
    6b00:	9a 81       	ldd	r25, Y+2	; 0x02
    6b02:	ac 01       	movw	r20, r24
    6b04:	43 5e       	subi	r20, 0xE3	; 227
    6b06:	5f 4f       	sbci	r21, 0xFF	; 255
    6b08:	89 81       	ldd	r24, Y+1	; 0x01
    6b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    6b0c:	9e 01       	movw	r18, r28
    6b0e:	2d 5f       	subi	r18, 0xFD	; 253
    6b10:	3f 4f       	sbci	r19, 0xFF	; 255
    6b12:	b9 01       	movw	r22, r18
    6b14:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawDerivativeGain);
    6b18:	89 81       	ldd	r24, Y+1	; 0x01
    6b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    6b1c:	ac 01       	movw	r20, r24
    6b1e:	4f 5d       	subi	r20, 0xDF	; 223
    6b20:	5f 4f       	sbci	r21, 0xFF	; 255
    6b22:	89 81       	ldd	r24, Y+1	; 0x01
    6b24:	9a 81       	ldd	r25, Y+2	; 0x02
    6b26:	9e 01       	movw	r18, r28
    6b28:	2d 5f       	subi	r18, 0xFD	; 253
    6b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b2c:	b9 01       	movw	r22, r18
    6b2e:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawProportionalGain);
    6b32:	89 81       	ldd	r24, Y+1	; 0x01
    6b34:	9a 81       	ldd	r25, Y+2	; 0x02
    6b36:	ac 01       	movw	r20, r24
    6b38:	4b 5d       	subi	r20, 0xDB	; 219
    6b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    6b3c:	89 81       	ldd	r24, Y+1	; 0x01
    6b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b40:	9e 01       	movw	r18, r28
    6b42:	2d 5f       	subi	r18, 0xFD	; 253
    6b44:	3f 4f       	sbci	r19, 0xFF	; 255
    6b46:	b9 01       	movw	r22, r18
    6b48:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YawAntiWindupGain);
    6b4c:	89 81       	ldd	r24, Y+1	; 0x01
    6b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b50:	ac 01       	movw	r20, r24
    6b52:	47 5d       	subi	r20, 0xD7	; 215
    6b54:	5f 4f       	sbci	r21, 0xFF	; 255
    6b56:	89 81       	ldd	r24, Y+1	; 0x01
    6b58:	9a 81       	ldd	r25, Y+2	; 0x02
    6b5a:	9e 01       	movw	r18, r28
    6b5c:	2d 5f       	subi	r18, 0xFD	; 253
    6b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b60:	b9 01       	movw	r22, r18
    6b62:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		
		
		

		decode (message, XNEDBodyFrame);
    6b66:	89 81       	ldd	r24, Y+1	; 0x01
    6b68:	9a 81       	ldd	r25, Y+2	; 0x02
    6b6a:	ac 01       	movw	r20, r24
    6b6c:	43 5d       	subi	r20, 0xD3	; 211
    6b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b70:	89 81       	ldd	r24, Y+1	; 0x01
    6b72:	9a 81       	ldd	r25, Y+2	; 0x02
    6b74:	9e 01       	movw	r18, r28
    6b76:	2d 5f       	subi	r18, 0xFD	; 253
    6b78:	3f 4f       	sbci	r19, 0xFF	; 255
    6b7a:	b9 01       	movw	r22, r18
    6b7c:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XVelocityMetersPerSecond);
    6b80:	89 81       	ldd	r24, Y+1	; 0x01
    6b82:	9a 81       	ldd	r25, Y+2	; 0x02
    6b84:	ac 01       	movw	r20, r24
    6b86:	4f 5c       	subi	r20, 0xCF	; 207
    6b88:	5f 4f       	sbci	r21, 0xFF	; 255
    6b8a:	89 81       	ldd	r24, Y+1	; 0x01
    6b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b8e:	9e 01       	movw	r18, r28
    6b90:	2d 5f       	subi	r18, 0xFD	; 253
    6b92:	3f 4f       	sbci	r19, 0xFF	; 255
    6b94:	b9 01       	movw	r22, r18
    6b96:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ThetaPitchDegrees);
    6b9a:	89 81       	ldd	r24, Y+1	; 0x01
    6b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b9e:	ac 01       	movw	r20, r24
    6ba0:	4b 5c       	subi	r20, 0xCB	; 203
    6ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ba4:	89 81       	ldd	r24, Y+1	; 0x01
    6ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ba8:	9e 01       	movw	r18, r28
    6baa:	2d 5f       	subi	r18, 0xFD	; 253
    6bac:	3f 4f       	sbci	r19, 0xFF	; 255
    6bae:	b9 01       	movw	r22, r18
    6bb0:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XIntegral);
    6bb4:	89 81       	ldd	r24, Y+1	; 0x01
    6bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bb8:	ac 01       	movw	r20, r24
    6bba:	47 5c       	subi	r20, 0xC7	; 199
    6bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    6bbe:	89 81       	ldd	r24, Y+1	; 0x01
    6bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    6bc2:	9e 01       	movw	r18, r28
    6bc4:	2d 5f       	subi	r18, 0xFD	; 253
    6bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    6bc8:	b9 01       	movw	r22, r18
    6bca:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XProportional);
    6bce:	89 81       	ldd	r24, Y+1	; 0x01
    6bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd2:	ac 01       	movw	r20, r24
    6bd4:	43 5c       	subi	r20, 0xC3	; 195
    6bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    6bd8:	89 81       	ldd	r24, Y+1	; 0x01
    6bda:	9a 81       	ldd	r25, Y+2	; 0x02
    6bdc:	9e 01       	movw	r18, r28
    6bde:	2d 5f       	subi	r18, 0xFD	; 253
    6be0:	3f 4f       	sbci	r19, 0xFF	; 255
    6be2:	b9 01       	movw	r22, r18
    6be4:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XDerivativeError);
    6be8:	89 81       	ldd	r24, Y+1	; 0x01
    6bea:	9a 81       	ldd	r25, Y+2	; 0x02
    6bec:	ac 01       	movw	r20, r24
    6bee:	4f 5b       	subi	r20, 0xBF	; 191
    6bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    6bf2:	89 81       	ldd	r24, Y+1	; 0x01
    6bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    6bf6:	9e 01       	movw	r18, r28
    6bf8:	2d 5f       	subi	r18, 0xFD	; 253
    6bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    6bfc:	b9 01       	movw	r22, r18
    6bfe:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, LongitudeControl);
    6c02:	89 81       	ldd	r24, Y+1	; 0x01
    6c04:	9a 81       	ldd	r25, Y+2	; 0x02
    6c06:	ac 01       	movw	r20, r24
    6c08:	4b 5b       	subi	r20, 0xBB	; 187
    6c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    6c0c:	89 81       	ldd	r24, Y+1	; 0x01
    6c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    6c10:	9e 01       	movw	r18, r28
    6c12:	2d 5f       	subi	r18, 0xFD	; 253
    6c14:	3f 4f       	sbci	r19, 0xFF	; 255
    6c16:	b9 01       	movw	r22, r18
    6c18:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XIntegralGain);
    6c1c:	89 81       	ldd	r24, Y+1	; 0x01
    6c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    6c20:	ac 01       	movw	r20, r24
    6c22:	47 5b       	subi	r20, 0xB7	; 183
    6c24:	5f 4f       	sbci	r21, 0xFF	; 255
    6c26:	89 81       	ldd	r24, Y+1	; 0x01
    6c28:	9a 81       	ldd	r25, Y+2	; 0x02
    6c2a:	9e 01       	movw	r18, r28
    6c2c:	2d 5f       	subi	r18, 0xFD	; 253
    6c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c30:	b9 01       	movw	r22, r18
    6c32:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XDerivativeGain);
    6c36:	89 81       	ldd	r24, Y+1	; 0x01
    6c38:	9a 81       	ldd	r25, Y+2	; 0x02
    6c3a:	ac 01       	movw	r20, r24
    6c3c:	43 5b       	subi	r20, 0xB3	; 179
    6c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c40:	89 81       	ldd	r24, Y+1	; 0x01
    6c42:	9a 81       	ldd	r25, Y+2	; 0x02
    6c44:	9e 01       	movw	r18, r28
    6c46:	2d 5f       	subi	r18, 0xFD	; 253
    6c48:	3f 4f       	sbci	r19, 0xFF	; 255
    6c4a:	b9 01       	movw	r22, r18
    6c4c:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XProportionalGain);
    6c50:	89 81       	ldd	r24, Y+1	; 0x01
    6c52:	9a 81       	ldd	r25, Y+2	; 0x02
    6c54:	ac 01       	movw	r20, r24
    6c56:	4f 5a       	subi	r20, 0xAF	; 175
    6c58:	5f 4f       	sbci	r21, 0xFF	; 255
    6c5a:	89 81       	ldd	r24, Y+1	; 0x01
    6c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c5e:	9e 01       	movw	r18, r28
    6c60:	2d 5f       	subi	r18, 0xFD	; 253
    6c62:	3f 4f       	sbci	r19, 0xFF	; 255
    6c64:	b9 01       	movw	r22, r18
    6c66:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XAntiWindupGain);
    6c6a:	89 81       	ldd	r24, Y+1	; 0x01
    6c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c6e:	ac 01       	movw	r20, r24
    6c70:	4b 5a       	subi	r20, 0xAB	; 171
    6c72:	5f 4f       	sbci	r21, 0xFF	; 255
    6c74:	89 81       	ldd	r24, Y+1	; 0x01
    6c76:	9a 81       	ldd	r25, Y+2	; 0x02
    6c78:	9e 01       	movw	r18, r28
    6c7a:	2d 5f       	subi	r18, 0xFD	; 253
    6c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c7e:	b9 01       	movw	r22, r18
    6c80:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, LongitudeInnerLoopGain);
    6c84:	89 81       	ldd	r24, Y+1	; 0x01
    6c86:	9a 81       	ldd	r25, Y+2	; 0x02
    6c88:	ac 01       	movw	r20, r24
    6c8a:	47 5a       	subi	r20, 0xA7	; 167
    6c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    6c8e:	89 81       	ldd	r24, Y+1	; 0x01
    6c90:	9a 81       	ldd	r25, Y+2	; 0x02
    6c92:	9e 01       	movw	r18, r28
    6c94:	2d 5f       	subi	r18, 0xFD	; 253
    6c96:	3f 4f       	sbci	r19, 0xFF	; 255
    6c98:	b9 01       	movw	r22, r18
    6c9a:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, XLongitudeOuterLoopSetpoint);
    6c9e:	89 81       	ldd	r24, Y+1	; 0x01
    6ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ca2:	ac 01       	movw	r20, r24
    6ca4:	43 5a       	subi	r20, 0xA3	; 163
    6ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ca8:	89 81       	ldd	r24, Y+1	; 0x01
    6caa:	9a 81       	ldd	r25, Y+2	; 0x02
    6cac:	9e 01       	movw	r18, r28
    6cae:	2d 5f       	subi	r18, 0xFD	; 253
    6cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cb2:	b9 01       	movw	r22, r18
    6cb4:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, PitchAngularVelocityRadsPerSecond);
    6cb8:	89 81       	ldd	r24, Y+1	; 0x01
    6cba:	9a 81       	ldd	r25, Y+2	; 0x02
    6cbc:	ac 01       	movw	r20, r24
    6cbe:	4f 59       	subi	r20, 0x9F	; 159
    6cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    6cc2:	89 81       	ldd	r24, Y+1	; 0x01
    6cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    6cc6:	9e 01       	movw	r18, r28
    6cc8:	2d 5f       	subi	r18, 0xFD	; 253
    6cca:	3f 4f       	sbci	r19, 0xFF	; 255
    6ccc:	b9 01       	movw	r22, r18
    6cce:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, PitchAngularVelocityGain);
    6cd2:	89 81       	ldd	r24, Y+1	; 0x01
    6cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    6cd6:	ac 01       	movw	r20, r24
    6cd8:	4b 59       	subi	r20, 0x9B	; 155
    6cda:	5f 4f       	sbci	r21, 0xFF	; 255
    6cdc:	89 81       	ldd	r24, Y+1	; 0x01
    6cde:	9a 81       	ldd	r25, Y+2	; 0x02
    6ce0:	9e 01       	movw	r18, r28
    6ce2:	2d 5f       	subi	r18, 0xFD	; 253
    6ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ce6:	b9 01       	movw	r22, r18
    6ce8:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>

		decode (message, YNEDBodyFrame);
    6cec:	89 81       	ldd	r24, Y+1	; 0x01
    6cee:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf0:	ac 01       	movw	r20, r24
    6cf2:	47 59       	subi	r20, 0x97	; 151
    6cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    6cf6:	89 81       	ldd	r24, Y+1	; 0x01
    6cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    6cfa:	9e 01       	movw	r18, r28
    6cfc:	2d 5f       	subi	r18, 0xFD	; 253
    6cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    6d00:	b9 01       	movw	r22, r18
    6d02:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YVelocityMetersPerSecond);
    6d06:	89 81       	ldd	r24, Y+1	; 0x01
    6d08:	9a 81       	ldd	r25, Y+2	; 0x02
    6d0a:	ac 01       	movw	r20, r24
    6d0c:	43 59       	subi	r20, 0x93	; 147
    6d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    6d10:	89 81       	ldd	r24, Y+1	; 0x01
    6d12:	9a 81       	ldd	r25, Y+2	; 0x02
    6d14:	9e 01       	movw	r18, r28
    6d16:	2d 5f       	subi	r18, 0xFD	; 253
    6d18:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1a:	b9 01       	movw	r22, r18
    6d1c:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, PhiRollDegrees);
    6d20:	89 81       	ldd	r24, Y+1	; 0x01
    6d22:	9a 81       	ldd	r25, Y+2	; 0x02
    6d24:	ac 01       	movw	r20, r24
    6d26:	4f 58       	subi	r20, 0x8F	; 143
    6d28:	5f 4f       	sbci	r21, 0xFF	; 255
    6d2a:	89 81       	ldd	r24, Y+1	; 0x01
    6d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    6d2e:	9e 01       	movw	r18, r28
    6d30:	2d 5f       	subi	r18, 0xFD	; 253
    6d32:	3f 4f       	sbci	r19, 0xFF	; 255
    6d34:	b9 01       	movw	r22, r18
    6d36:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YIntegral);
    6d3a:	89 81       	ldd	r24, Y+1	; 0x01
    6d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    6d3e:	ac 01       	movw	r20, r24
    6d40:	4b 58       	subi	r20, 0x8B	; 139
    6d42:	5f 4f       	sbci	r21, 0xFF	; 255
    6d44:	89 81       	ldd	r24, Y+1	; 0x01
    6d46:	9a 81       	ldd	r25, Y+2	; 0x02
    6d48:	9e 01       	movw	r18, r28
    6d4a:	2d 5f       	subi	r18, 0xFD	; 253
    6d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d4e:	b9 01       	movw	r22, r18
    6d50:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YProportional);
    6d54:	89 81       	ldd	r24, Y+1	; 0x01
    6d56:	9a 81       	ldd	r25, Y+2	; 0x02
    6d58:	ac 01       	movw	r20, r24
    6d5a:	47 58       	subi	r20, 0x87	; 135
    6d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    6d5e:	89 81       	ldd	r24, Y+1	; 0x01
    6d60:	9a 81       	ldd	r25, Y+2	; 0x02
    6d62:	9e 01       	movw	r18, r28
    6d64:	2d 5f       	subi	r18, 0xFD	; 253
    6d66:	3f 4f       	sbci	r19, 0xFF	; 255
    6d68:	b9 01       	movw	r22, r18
    6d6a:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YDerivativeError);
    6d6e:	89 81       	ldd	r24, Y+1	; 0x01
    6d70:	9a 81       	ldd	r25, Y+2	; 0x02
    6d72:	ac 01       	movw	r20, r24
    6d74:	43 58       	subi	r20, 0x83	; 131
    6d76:	5f 4f       	sbci	r21, 0xFF	; 255
    6d78:	89 81       	ldd	r24, Y+1	; 0x01
    6d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d7c:	9e 01       	movw	r18, r28
    6d7e:	2d 5f       	subi	r18, 0xFD	; 253
    6d80:	3f 4f       	sbci	r19, 0xFF	; 255
    6d82:	b9 01       	movw	r22, r18
    6d84:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, LateralControl);
    6d88:	89 81       	ldd	r24, Y+1	; 0x01
    6d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d8c:	ac 01       	movw	r20, r24
    6d8e:	4f 57       	subi	r20, 0x7F	; 127
    6d90:	5f 4f       	sbci	r21, 0xFF	; 255
    6d92:	89 81       	ldd	r24, Y+1	; 0x01
    6d94:	9a 81       	ldd	r25, Y+2	; 0x02
    6d96:	9e 01       	movw	r18, r28
    6d98:	2d 5f       	subi	r18, 0xFD	; 253
    6d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d9c:	b9 01       	movw	r22, r18
    6d9e:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YIntegralGain);
    6da2:	89 81       	ldd	r24, Y+1	; 0x01
    6da4:	9a 81       	ldd	r25, Y+2	; 0x02
    6da6:	ac 01       	movw	r20, r24
    6da8:	4b 57       	subi	r20, 0x7B	; 123
    6daa:	5f 4f       	sbci	r21, 0xFF	; 255
    6dac:	89 81       	ldd	r24, Y+1	; 0x01
    6dae:	9a 81       	ldd	r25, Y+2	; 0x02
    6db0:	9e 01       	movw	r18, r28
    6db2:	2d 5f       	subi	r18, 0xFD	; 253
    6db4:	3f 4f       	sbci	r19, 0xFF	; 255
    6db6:	b9 01       	movw	r22, r18
    6db8:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YDerivativeGain);
    6dbc:	89 81       	ldd	r24, Y+1	; 0x01
    6dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    6dc0:	ac 01       	movw	r20, r24
    6dc2:	47 57       	subi	r20, 0x77	; 119
    6dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    6dc6:	89 81       	ldd	r24, Y+1	; 0x01
    6dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    6dca:	9e 01       	movw	r18, r28
    6dcc:	2d 5f       	subi	r18, 0xFD	; 253
    6dce:	3f 4f       	sbci	r19, 0xFF	; 255
    6dd0:	b9 01       	movw	r22, r18
    6dd2:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YProportionalGain);
    6dd6:	89 81       	ldd	r24, Y+1	; 0x01
    6dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    6dda:	ac 01       	movw	r20, r24
    6ddc:	43 57       	subi	r20, 0x73	; 115
    6dde:	5f 4f       	sbci	r21, 0xFF	; 255
    6de0:	89 81       	ldd	r24, Y+1	; 0x01
    6de2:	9a 81       	ldd	r25, Y+2	; 0x02
    6de4:	9e 01       	movw	r18, r28
    6de6:	2d 5f       	subi	r18, 0xFD	; 253
    6de8:	3f 4f       	sbci	r19, 0xFF	; 255
    6dea:	b9 01       	movw	r22, r18
    6dec:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YAntiWindupGain);
    6df0:	89 81       	ldd	r24, Y+1	; 0x01
    6df2:	9a 81       	ldd	r25, Y+2	; 0x02
    6df4:	ac 01       	movw	r20, r24
    6df6:	4f 56       	subi	r20, 0x6F	; 111
    6df8:	5f 4f       	sbci	r21, 0xFF	; 255
    6dfa:	89 81       	ldd	r24, Y+1	; 0x01
    6dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    6dfe:	9e 01       	movw	r18, r28
    6e00:	2d 5f       	subi	r18, 0xFD	; 253
    6e02:	3f 4f       	sbci	r19, 0xFF	; 255
    6e04:	b9 01       	movw	r22, r18
    6e06:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, LateralInnerLoopGain);
    6e0a:	89 81       	ldd	r24, Y+1	; 0x01
    6e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    6e0e:	ac 01       	movw	r20, r24
    6e10:	4b 56       	subi	r20, 0x6B	; 107
    6e12:	5f 4f       	sbci	r21, 0xFF	; 255
    6e14:	89 81       	ldd	r24, Y+1	; 0x01
    6e16:	9a 81       	ldd	r25, Y+2	; 0x02
    6e18:	9e 01       	movw	r18, r28
    6e1a:	2d 5f       	subi	r18, 0xFD	; 253
    6e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6e1e:	b9 01       	movw	r22, r18
    6e20:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, YLateralOuterLoopSetpoint);
    6e24:	89 81       	ldd	r24, Y+1	; 0x01
    6e26:	9a 81       	ldd	r25, Y+2	; 0x02
    6e28:	ac 01       	movw	r20, r24
    6e2a:	47 56       	subi	r20, 0x67	; 103
    6e2c:	5f 4f       	sbci	r21, 0xFF	; 255
    6e2e:	89 81       	ldd	r24, Y+1	; 0x01
    6e30:	9a 81       	ldd	r25, Y+2	; 0x02
    6e32:	9e 01       	movw	r18, r28
    6e34:	2d 5f       	subi	r18, 0xFD	; 253
    6e36:	3f 4f       	sbci	r19, 0xFF	; 255
    6e38:	b9 01       	movw	r22, r18
    6e3a:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, RollAngularVelocityRadsPerSecond);
    6e3e:	89 81       	ldd	r24, Y+1	; 0x01
    6e40:	9a 81       	ldd	r25, Y+2	; 0x02
    6e42:	ac 01       	movw	r20, r24
    6e44:	43 56       	subi	r20, 0x63	; 99
    6e46:	5f 4f       	sbci	r21, 0xFF	; 255
    6e48:	89 81       	ldd	r24, Y+1	; 0x01
    6e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e4c:	9e 01       	movw	r18, r28
    6e4e:	2d 5f       	subi	r18, 0xFD	; 253
    6e50:	3f 4f       	sbci	r19, 0xFF	; 255
    6e52:	b9 01       	movw	r22, r18
    6e54:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, RollAngularVelocityGain);
    6e58:	89 81       	ldd	r24, Y+1	; 0x01
    6e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e5c:	ac 01       	movw	r20, r24
    6e5e:	4f 55       	subi	r20, 0x5F	; 95
    6e60:	5f 4f       	sbci	r21, 0xFF	; 255
    6e62:	89 81       	ldd	r24, Y+1	; 0x01
    6e64:	9a 81       	ldd	r25, Y+2	; 0x02
    6e66:	9e 01       	movw	r18, r28
    6e68:	2d 5f       	subi	r18, 0xFD	; 253
    6e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e6c:	b9 01       	movw	r22, r18
    6e6e:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		

		decode (message, AltitudeFeetAgl);
    6e72:	89 81       	ldd	r24, Y+1	; 0x01
    6e74:	9a 81       	ldd	r25, Y+2	; 0x02
    6e76:	ac 01       	movw	r20, r24
    6e78:	4b 55       	subi	r20, 0x5B	; 91
    6e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    6e7c:	89 81       	ldd	r24, Y+1	; 0x01
    6e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e80:	9e 01       	movw	r18, r28
    6e82:	2d 5f       	subi	r18, 0xFD	; 253
    6e84:	3f 4f       	sbci	r19, 0xFF	; 255
    6e86:	b9 01       	movw	r22, r18
    6e88:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZVelocityMetersPerSecond);
    6e8c:	89 81       	ldd	r24, Y+1	; 0x01
    6e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e90:	ac 01       	movw	r20, r24
    6e92:	47 55       	subi	r20, 0x57	; 87
    6e94:	5f 4f       	sbci	r21, 0xFF	; 255
    6e96:	89 81       	ldd	r24, Y+1	; 0x01
    6e98:	9a 81       	ldd	r25, Y+2	; 0x02
    6e9a:	9e 01       	movw	r18, r28
    6e9c:	2d 5f       	subi	r18, 0xFD	; 253
    6e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6ea0:	b9 01       	movw	r22, r18
    6ea2:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZIntegral);
    6ea6:	89 81       	ldd	r24, Y+1	; 0x01
    6ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    6eaa:	ac 01       	movw	r20, r24
    6eac:	43 55       	subi	r20, 0x53	; 83
    6eae:	5f 4f       	sbci	r21, 0xFF	; 255
    6eb0:	89 81       	ldd	r24, Y+1	; 0x01
    6eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    6eb4:	9e 01       	movw	r18, r28
    6eb6:	2d 5f       	subi	r18, 0xFD	; 253
    6eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eba:	b9 01       	movw	r22, r18
    6ebc:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZProportional);
    6ec0:	89 81       	ldd	r24, Y+1	; 0x01
    6ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ec4:	ac 01       	movw	r20, r24
    6ec6:	4f 54       	subi	r20, 0x4F	; 79
    6ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    6eca:	89 81       	ldd	r24, Y+1	; 0x01
    6ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ece:	9e 01       	movw	r18, r28
    6ed0:	2d 5f       	subi	r18, 0xFD	; 253
    6ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ed4:	b9 01       	movw	r22, r18
    6ed6:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZDerivativeError);
    6eda:	89 81       	ldd	r24, Y+1	; 0x01
    6edc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ede:	ac 01       	movw	r20, r24
    6ee0:	4b 54       	subi	r20, 0x4B	; 75
    6ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ee4:	89 81       	ldd	r24, Y+1	; 0x01
    6ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee8:	9e 01       	movw	r18, r28
    6eea:	2d 5f       	subi	r18, 0xFD	; 253
    6eec:	3f 4f       	sbci	r19, 0xFF	; 255
    6eee:	b9 01       	movw	r22, r18
    6ef0:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, MainRotorCollectiveControl);
    6ef4:	89 81       	ldd	r24, Y+1	; 0x01
    6ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ef8:	ac 01       	movw	r20, r24
    6efa:	47 54       	subi	r20, 0x47	; 71
    6efc:	5f 4f       	sbci	r21, 0xFF	; 255
    6efe:	89 81       	ldd	r24, Y+1	; 0x01
    6f00:	9a 81       	ldd	r25, Y+2	; 0x02
    6f02:	9e 01       	movw	r18, r28
    6f04:	2d 5f       	subi	r18, 0xFD	; 253
    6f06:	3f 4f       	sbci	r19, 0xFF	; 255
    6f08:	b9 01       	movw	r22, r18
    6f0a:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZIntegralGain);
    6f0e:	89 81       	ldd	r24, Y+1	; 0x01
    6f10:	9a 81       	ldd	r25, Y+2	; 0x02
    6f12:	ac 01       	movw	r20, r24
    6f14:	43 54       	subi	r20, 0x43	; 67
    6f16:	5f 4f       	sbci	r21, 0xFF	; 255
    6f18:	89 81       	ldd	r24, Y+1	; 0x01
    6f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f1c:	9e 01       	movw	r18, r28
    6f1e:	2d 5f       	subi	r18, 0xFD	; 253
    6f20:	3f 4f       	sbci	r19, 0xFF	; 255
    6f22:	b9 01       	movw	r22, r18
    6f24:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZDerivativeGain);
    6f28:	89 81       	ldd	r24, Y+1	; 0x01
    6f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f2c:	ac 01       	movw	r20, r24
    6f2e:	4f 53       	subi	r20, 0x3F	; 63
    6f30:	5f 4f       	sbci	r21, 0xFF	; 255
    6f32:	89 81       	ldd	r24, Y+1	; 0x01
    6f34:	9a 81       	ldd	r25, Y+2	; 0x02
    6f36:	9e 01       	movw	r18, r28
    6f38:	2d 5f       	subi	r18, 0xFD	; 253
    6f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    6f3c:	b9 01       	movw	r22, r18
    6f3e:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZProportionalGain);
    6f42:	89 81       	ldd	r24, Y+1	; 0x01
    6f44:	9a 81       	ldd	r25, Y+2	; 0x02
    6f46:	ac 01       	movw	r20, r24
    6f48:	4b 53       	subi	r20, 0x3B	; 59
    6f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    6f4c:	89 81       	ldd	r24, Y+1	; 0x01
    6f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    6f50:	9e 01       	movw	r18, r28
    6f52:	2d 5f       	subi	r18, 0xFD	; 253
    6f54:	3f 4f       	sbci	r19, 0xFF	; 255
    6f56:	b9 01       	movw	r22, r18
    6f58:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZAntiWindupGain);
    6f5c:	89 81       	ldd	r24, Y+1	; 0x01
    6f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    6f60:	ac 01       	movw	r20, r24
    6f62:	47 53       	subi	r20, 0x37	; 55
    6f64:	5f 4f       	sbci	r21, 0xFF	; 255
    6f66:	89 81       	ldd	r24, Y+1	; 0x01
    6f68:	9a 81       	ldd	r25, Y+2	; 0x02
    6f6a:	9e 01       	movw	r18, r28
    6f6c:	2d 5f       	subi	r18, 0xFD	; 253
    6f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f70:	b9 01       	movw	r22, r18
    6f72:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, ZNEDBodyFrame);
    6f76:	89 81       	ldd	r24, Y+1	; 0x01
    6f78:	9a 81       	ldd	r25, Y+2	; 0x02
    6f7a:	ac 01       	movw	r20, r24
    6f7c:	43 53       	subi	r20, 0x33	; 51
    6f7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6f80:	89 81       	ldd	r24, Y+1	; 0x01
    6f82:	9a 81       	ldd	r25, Y+2	; 0x02
    6f84:	9e 01       	movw	r18, r28
    6f86:	2d 5f       	subi	r18, 0xFD	; 253
    6f88:	3f 4f       	sbci	r19, 0xFF	; 255
    6f8a:	b9 01       	movw	r22, r18
    6f8c:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		
	
		decode (message, LatitudeDegrees);
    6f90:	89 81       	ldd	r24, Y+1	; 0x01
    6f92:	9a 81       	ldd	r25, Y+2	; 0x02
    6f94:	ac 01       	movw	r20, r24
    6f96:	4f 52       	subi	r20, 0x2F	; 47
    6f98:	5f 4f       	sbci	r21, 0xFF	; 255
    6f9a:	89 81       	ldd	r24, Y+1	; 0x01
    6f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f9e:	9e 01       	movw	r18, r28
    6fa0:	2d 5f       	subi	r18, 0xFD	; 253
    6fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fa4:	b9 01       	movw	r22, r18
    6fa6:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
		decode (message, LongitudeDegrees);
    6faa:	89 81       	ldd	r24, Y+1	; 0x01
    6fac:	9a 81       	ldd	r25, Y+2	; 0x02
    6fae:	ac 01       	movw	r20, r24
    6fb0:	4b 52       	subi	r20, 0x2B	; 43
    6fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    6fb4:	89 81       	ldd	r24, Y+1	; 0x01
    6fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    6fb8:	9e 01       	movw	r18, r28
    6fba:	2d 5f       	subi	r18, 0xFD	; 253
    6fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    6fbe:	b9 01       	movw	r22, r18
    6fc0:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN10helicopter8messages7Message6decodeERPhRf>
						
		decode (message, Timeouts);
    6fc4:	89 81       	ldd	r24, Y+1	; 0x01
    6fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    6fc8:	ac 01       	movw	r20, r24
    6fca:	47 52       	subi	r20, 0x27	; 39
    6fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    6fce:	89 81       	ldd	r24, Y+1	; 0x01
    6fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fd2:	9e 01       	movw	r18, r28
    6fd4:	2d 5f       	subi	r18, 0xFD	; 253
    6fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd8:	b9 01       	movw	r22, r18
    6fda:	0e 94 3e 2c 	call	0x587c	; 0x587c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, UnrecognizedMsgTypes);
    6fde:	89 81       	ldd	r24, Y+1	; 0x01
    6fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fe2:	ac 01       	movw	r20, r24
    6fe4:	43 52       	subi	r20, 0x23	; 35
    6fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fe8:	89 81       	ldd	r24, Y+1	; 0x01
    6fea:	9a 81       	ldd	r25, Y+2	; 0x02
    6fec:	9e 01       	movw	r18, r28
    6fee:	2d 5f       	subi	r18, 0xFD	; 253
    6ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ff2:	b9 01       	movw	r22, r18
    6ff4:	0e 94 3e 2c 	call	0x587c	; 0x587c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, ChecksumErrors);
    6ff8:	89 81       	ldd	r24, Y+1	; 0x01
    6ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    6ffc:	ac 01       	movw	r20, r24
    6ffe:	4f 51       	subi	r20, 0x1F	; 31
    7000:	5f 4f       	sbci	r21, 0xFF	; 255
    7002:	89 81       	ldd	r24, Y+1	; 0x01
    7004:	9a 81       	ldd	r25, Y+2	; 0x02
    7006:	9e 01       	movw	r18, r28
    7008:	2d 5f       	subi	r18, 0xFD	; 253
    700a:	3f 4f       	sbci	r19, 0xFF	; 255
    700c:	b9 01       	movw	r22, r18
    700e:	0e 94 3e 2c 	call	0x587c	; 0x587c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, NumOfBlownFrames);
    7012:	89 81       	ldd	r24, Y+1	; 0x01
    7014:	9a 81       	ldd	r25, Y+2	; 0x02
    7016:	ac 01       	movw	r20, r24
    7018:	4b 51       	subi	r20, 0x1B	; 27
    701a:	5f 4f       	sbci	r21, 0xFF	; 255
    701c:	89 81       	ldd	r24, Y+1	; 0x01
    701e:	9a 81       	ldd	r25, Y+2	; 0x02
    7020:	9e 01       	movw	r18, r28
    7022:	2d 5f       	subi	r18, 0xFD	; 253
    7024:	3f 4f       	sbci	r19, 0xFF	; 255
    7026:	b9 01       	movw	r22, r18
    7028:	0e 94 3e 2c 	call	0x587c	; 0x587c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, SerialCommunicationBufferOverruns);
    702c:	89 81       	ldd	r24, Y+1	; 0x01
    702e:	9a 81       	ldd	r25, Y+2	; 0x02
    7030:	ac 01       	movw	r20, r24
    7032:	47 51       	subi	r20, 0x17	; 23
    7034:	5f 4f       	sbci	r21, 0xFF	; 255
    7036:	89 81       	ldd	r24, Y+1	; 0x01
    7038:	9a 81       	ldd	r25, Y+2	; 0x02
    703a:	9e 01       	movw	r18, r28
    703c:	2d 5f       	subi	r18, 0xFD	; 253
    703e:	3f 4f       	sbci	r19, 0xFF	; 255
    7040:	b9 01       	movw	r22, r18
    7042:	0e 94 3e 2c 	call	0x587c	; 0x587c <_ZN10helicopter8messages7Message6decodeERPhRl>
	}
}
    7046:	0f 90       	pop	r0
    7048:	0f 90       	pop	r0
    704a:	0f 90       	pop	r0
    704c:	0f 90       	pop	r0
    704e:	df 91       	pop	r29
    7050:	cf 91       	pop	r28
    7052:	08 95       	ret

00007054 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    7054:	0f 93       	push	r16
    7056:	1f 93       	push	r17
    7058:	cf 93       	push	r28
    705a:	df 93       	push	r29
    705c:	00 d0       	rcall	.+0      	; 0x705e <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh+0xa>
    705e:	1f 92       	push	r1
    7060:	cd b7       	in	r28, 0x3d	; 61
    7062:	de b7       	in	r29, 0x3e	; 62
    7064:	9c 83       	std	Y+4, r25	; 0x04
    7066:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    7068:	8d ee       	ldi	r24, 0xED	; 237
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    7070:	8c 01       	movw	r16, r24
    7072:	c8 01       	movw	r24, r16
    7074:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    7078:	1a 83       	std	Y+2, r17	; 0x02
    707a:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    707c:	89 81       	ldd	r24, Y+1	; 0x01
    707e:	9a 81       	ldd	r25, Y+2	; 0x02
    7080:	fc 01       	movw	r30, r24
    7082:	80 81       	ld	r24, Z
    7084:	91 81       	ldd	r25, Z+1	; 0x01
    7086:	06 96       	adiw	r24, 0x06	; 6
    7088:	fc 01       	movw	r30, r24
    708a:	20 81       	ld	r18, Z
    708c:	31 81       	ldd	r19, Z+1	; 0x01
    708e:	4b 81       	ldd	r20, Y+3	; 0x03
    7090:	5c 81       	ldd	r21, Y+4	; 0x04
    7092:	89 81       	ldd	r24, Y+1	; 0x01
    7094:	9a 81       	ldd	r25, Y+2	; 0x02
    7096:	ba 01       	movw	r22, r20
    7098:	f9 01       	movw	r30, r18
    709a:	19 95       	eicall
	
	return msg;
    709c:	89 81       	ldd	r24, Y+1	; 0x01
    709e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    70a0:	0f 90       	pop	r0
    70a2:	0f 90       	pop	r0
    70a4:	0f 90       	pop	r0
    70a6:	0f 90       	pop	r0
    70a8:	df 91       	pop	r29
    70aa:	cf 91       	pop	r28
    70ac:	1f 91       	pop	r17
    70ae:	0f 91       	pop	r16
    70b0:	08 95       	ret

000070b2 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>:

SystemTelemetryMessage * SystemTelemetryMessage::buildMessageFromModel(SystemModel *model)
{
    70b2:	0f 93       	push	r16
    70b4:	1f 93       	push	r17
    70b6:	cf 93       	push	r28
    70b8:	df 93       	push	r29
    70ba:	00 d0       	rcall	.+0      	; 0x70bc <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE+0xa>
    70bc:	1f 92       	push	r1
    70be:	cd b7       	in	r28, 0x3d	; 61
    70c0:	de b7       	in	r29, 0x3e	; 62
    70c2:	9c 83       	std	Y+4, r25	; 0x04
    70c4:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    70c6:	8d ee       	ldi	r24, 0xED	; 237
    70c8:	90 e0       	ldi	r25, 0x00	; 0
    70ca:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    70ce:	8c 01       	movw	r16, r24
    70d0:	c8 01       	movw	r24, r16
    70d2:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    70d6:	1a 83       	std	Y+2, r17	; 0x02
    70d8:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagYaw = model->MagYawDegrees();
    70da:	8b 81       	ldd	r24, Y+3	; 0x03
    70dc:	9c 81       	ldd	r25, Y+4	; 0x04
    70de:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
    70e2:	dc 01       	movw	r26, r24
    70e4:	cb 01       	movw	r24, r22
    70e6:	29 81       	ldd	r18, Y+1	; 0x01
    70e8:	3a 81       	ldd	r19, Y+2	; 0x02
    70ea:	f9 01       	movw	r30, r18
    70ec:	85 83       	std	Z+5, r24	; 0x05
    70ee:	96 83       	std	Z+6, r25	; 0x06
    70f0:	a7 83       	std	Z+7, r26	; 0x07
    70f2:	b0 87       	std	Z+8, r27	; 0x08
	message->YawDerivativeError = model->YawDerivativeError();
    70f4:	8b 81       	ldd	r24, Y+3	; 0x03
    70f6:	9c 81       	ldd	r25, Y+4	; 0x04
    70f8:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>
    70fc:	dc 01       	movw	r26, r24
    70fe:	cb 01       	movw	r24, r22
    7100:	29 81       	ldd	r18, Y+1	; 0x01
    7102:	3a 81       	ldd	r19, Y+2	; 0x02
    7104:	f9 01       	movw	r30, r18
    7106:	85 8b       	std	Z+21, r24	; 0x15
    7108:	96 8b       	std	Z+22, r25	; 0x16
    710a:	a7 8b       	std	Z+23, r26	; 0x17
    710c:	b0 8f       	std	Z+24, r27	; 0x18
	message->YawIntegral = model->YawIntegral();
    710e:	8b 81       	ldd	r24, Y+3	; 0x03
    7110:	9c 81       	ldd	r25, Y+4	; 0x04
    7112:	0e 94 01 02 	call	0x402	; 0x402 <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
    7116:	dc 01       	movw	r26, r24
    7118:	cb 01       	movw	r24, r22
    711a:	29 81       	ldd	r18, Y+1	; 0x01
    711c:	3a 81       	ldd	r19, Y+2	; 0x02
    711e:	f9 01       	movw	r30, r18
    7120:	85 87       	std	Z+13, r24	; 0x0d
    7122:	96 87       	std	Z+14, r25	; 0x0e
    7124:	a7 87       	std	Z+15, r26	; 0x0f
    7126:	b0 8b       	std	Z+16, r27	; 0x10
	message->YawProportional = model->YawProportional();
    7128:	8b 81       	ldd	r24, Y+3	; 0x03
    712a:	9c 81       	ldd	r25, Y+4	; 0x04
    712c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZNK10helicopter5model11SystemModel15YawProportionalEv>
    7130:	dc 01       	movw	r26, r24
    7132:	cb 01       	movw	r24, r22
    7134:	29 81       	ldd	r18, Y+1	; 0x01
    7136:	3a 81       	ldd	r19, Y+2	; 0x02
    7138:	f9 01       	movw	r30, r18
    713a:	81 8b       	std	Z+17, r24	; 0x11
    713c:	92 8b       	std	Z+18, r25	; 0x12
    713e:	a3 8b       	std	Z+19, r26	; 0x13
    7140:	b4 8b       	std	Z+20, r27	; 0x14
	message->YawVelocityDegreesPerSecond = model->YawVelocityDegreesPerSecond();
    7142:	8b 81       	ldd	r24, Y+3	; 0x03
    7144:	9c 81       	ldd	r25, Y+4	; 0x04
    7146:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
    714a:	dc 01       	movw	r26, r24
    714c:	cb 01       	movw	r24, r22
    714e:	29 81       	ldd	r18, Y+1	; 0x01
    7150:	3a 81       	ldd	r19, Y+2	; 0x02
    7152:	f9 01       	movw	r30, r18
    7154:	81 87       	std	Z+9, r24	; 0x09
    7156:	92 87       	std	Z+10, r25	; 0x0a
    7158:	a3 87       	std	Z+11, r26	; 0x0b
    715a:	b4 87       	std	Z+12, r27	; 0x0c
	message->YawControl = model->YawControl();
    715c:	8b 81       	ldd	r24, Y+3	; 0x03
    715e:	9c 81       	ldd	r25, Y+4	; 0x04
    7160:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZNK10helicopter5model11SystemModel10YawControlEv>
    7164:	dc 01       	movw	r26, r24
    7166:	cb 01       	movw	r24, r22
    7168:	29 81       	ldd	r18, Y+1	; 0x01
    716a:	3a 81       	ldd	r19, Y+2	; 0x02
    716c:	f9 01       	movw	r30, r18
    716e:	81 8f       	std	Z+25, r24	; 0x19
    7170:	92 8f       	std	Z+26, r25	; 0x1a
    7172:	a3 8f       	std	Z+27, r26	; 0x1b
    7174:	b4 8f       	std	Z+28, r27	; 0x1c
	

	message->ThetaPitchDegrees = model->ThetaPitchDegrees();
    7176:	8b 81       	ldd	r24, Y+3	; 0x03
    7178:	9c 81       	ldd	r25, Y+4	; 0x04
    717a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZNK10helicopter5model11SystemModel17ThetaPitchDegreesEv>
    717e:	dc 01       	movw	r26, r24
    7180:	cb 01       	movw	r24, r22
    7182:	29 81       	ldd	r18, Y+1	; 0x01
    7184:	3a 81       	ldd	r19, Y+2	; 0x02
    7186:	f9 01       	movw	r30, r18
    7188:	85 ab       	std	Z+53, r24	; 0x35
    718a:	96 ab       	std	Z+54, r25	; 0x36
    718c:	a7 ab       	std	Z+55, r26	; 0x37
    718e:	b0 af       	std	Z+56, r27	; 0x38
	message->XNEDBodyFrame = model->XNEDBodyFrame();
    7190:	8b 81       	ldd	r24, Y+3	; 0x03
    7192:	9c 81       	ldd	r25, Y+4	; 0x04
    7194:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZNK10helicopter5model11SystemModel13XNEDBodyFrameEv>
    7198:	dc 01       	movw	r26, r24
    719a:	cb 01       	movw	r24, r22
    719c:	29 81       	ldd	r18, Y+1	; 0x01
    719e:	3a 81       	ldd	r19, Y+2	; 0x02
    71a0:	f9 01       	movw	r30, r18
    71a2:	85 a7       	std	Z+45, r24	; 0x2d
    71a4:	96 a7       	std	Z+46, r25	; 0x2e
    71a6:	a7 a7       	std	Z+47, r26	; 0x2f
    71a8:	b0 ab       	std	Z+48, r27	; 0x30
	message->XDerivativeError = model->XDerivativeError();
    71aa:	8b 81       	ldd	r24, Y+3	; 0x03
    71ac:	9c 81       	ldd	r25, Y+4	; 0x04
    71ae:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <_ZNK10helicopter5model11SystemModel16XDerivativeErrorEv>
    71b2:	dc 01       	movw	r26, r24
    71b4:	cb 01       	movw	r24, r22
    71b6:	29 81       	ldd	r18, Y+1	; 0x01
    71b8:	3a 81       	ldd	r19, Y+2	; 0x02
    71ba:	2f 5b       	subi	r18, 0xBF	; 191
    71bc:	3f 4f       	sbci	r19, 0xFF	; 255
    71be:	f9 01       	movw	r30, r18
    71c0:	80 83       	st	Z, r24
    71c2:	91 83       	std	Z+1, r25	; 0x01
    71c4:	a2 83       	std	Z+2, r26	; 0x02
    71c6:	b3 83       	std	Z+3, r27	; 0x03
	message->XIntegral = model->XIntegral();
    71c8:	8b 81       	ldd	r24, Y+3	; 0x03
    71ca:	9c 81       	ldd	r25, Y+4	; 0x04
    71cc:	0e 94 98 03 	call	0x730	; 0x730 <_ZNK10helicopter5model11SystemModel9XIntegralEv>
    71d0:	dc 01       	movw	r26, r24
    71d2:	cb 01       	movw	r24, r22
    71d4:	29 81       	ldd	r18, Y+1	; 0x01
    71d6:	3a 81       	ldd	r19, Y+2	; 0x02
    71d8:	f9 01       	movw	r30, r18
    71da:	81 af       	std	Z+57, r24	; 0x39
    71dc:	92 af       	std	Z+58, r25	; 0x3a
    71de:	a3 af       	std	Z+59, r26	; 0x3b
    71e0:	b4 af       	std	Z+60, r27	; 0x3c
	message->XProportional = model->XProportional();
    71e2:	8b 81       	ldd	r24, Y+3	; 0x03
    71e4:	9c 81       	ldd	r25, Y+4	; 0x04
    71e6:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZNK10helicopter5model11SystemModel13XProportionalEv>
    71ea:	dc 01       	movw	r26, r24
    71ec:	cb 01       	movw	r24, r22
    71ee:	29 81       	ldd	r18, Y+1	; 0x01
    71f0:	3a 81       	ldd	r19, Y+2	; 0x02
    71f2:	23 5c       	subi	r18, 0xC3	; 195
    71f4:	3f 4f       	sbci	r19, 0xFF	; 255
    71f6:	f9 01       	movw	r30, r18
    71f8:	80 83       	st	Z, r24
    71fa:	91 83       	std	Z+1, r25	; 0x01
    71fc:	a2 83       	std	Z+2, r26	; 0x02
    71fe:	b3 83       	std	Z+3, r27	; 0x03
	message->XVelocityMetersPerSecond = model->XVelocityMetersPerSecond();
    7200:	8b 81       	ldd	r24, Y+3	; 0x03
    7202:	9c 81       	ldd	r25, Y+4	; 0x04
    7204:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZNK10helicopter5model11SystemModel24XVelocityMetersPerSecondEv>
    7208:	dc 01       	movw	r26, r24
    720a:	cb 01       	movw	r24, r22
    720c:	29 81       	ldd	r18, Y+1	; 0x01
    720e:	3a 81       	ldd	r19, Y+2	; 0x02
    7210:	f9 01       	movw	r30, r18
    7212:	81 ab       	std	Z+49, r24	; 0x31
    7214:	92 ab       	std	Z+50, r25	; 0x32
    7216:	a3 ab       	std	Z+51, r26	; 0x33
    7218:	b4 ab       	std	Z+52, r27	; 0x34
	message->LongitudeControl = model->LongitudeControl();
    721a:	8b 81       	ldd	r24, Y+3	; 0x03
    721c:	9c 81       	ldd	r25, Y+4	; 0x04
    721e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZNK10helicopter5model11SystemModel16LongitudeControlEv>
    7222:	dc 01       	movw	r26, r24
    7224:	cb 01       	movw	r24, r22
    7226:	29 81       	ldd	r18, Y+1	; 0x01
    7228:	3a 81       	ldd	r19, Y+2	; 0x02
    722a:	2b 5b       	subi	r18, 0xBB	; 187
    722c:	3f 4f       	sbci	r19, 0xFF	; 255
    722e:	f9 01       	movw	r30, r18
    7230:	80 83       	st	Z, r24
    7232:	91 83       	std	Z+1, r25	; 0x01
    7234:	a2 83       	std	Z+2, r26	; 0x02
    7236:	b3 83       	std	Z+3, r27	; 0x03
	message->XLongitudeOuterLoopSetpoint = model->XLongitudeOuterLoopSetpoint();
    7238:	8b 81       	ldd	r24, Y+3	; 0x03
    723a:	9c 81       	ldd	r25, Y+4	; 0x04
    723c:	0e 94 3b 03 	call	0x676	; 0x676 <_ZNK10helicopter5model11SystemModel27XLongitudeOuterLoopSetpointEv>
    7240:	dc 01       	movw	r26, r24
    7242:	cb 01       	movw	r24, r22
    7244:	29 81       	ldd	r18, Y+1	; 0x01
    7246:	3a 81       	ldd	r19, Y+2	; 0x02
    7248:	23 5a       	subi	r18, 0xA3	; 163
    724a:	3f 4f       	sbci	r19, 0xFF	; 255
    724c:	f9 01       	movw	r30, r18
    724e:	80 83       	st	Z, r24
    7250:	91 83       	std	Z+1, r25	; 0x01
    7252:	a2 83       	std	Z+2, r26	; 0x02
    7254:	b3 83       	std	Z+3, r27	; 0x03
	message->PitchAngularVelocityRadsPerSecond = model->PitchAngularVelocityRadsPerSecond();
    7256:	8b 81       	ldd	r24, Y+3	; 0x03
    7258:	9c 81       	ldd	r25, Y+4	; 0x04
    725a:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZNK10helicopter5model11SystemModel33PitchAngularVelocityRadsPerSecondEv>
    725e:	dc 01       	movw	r26, r24
    7260:	cb 01       	movw	r24, r22
    7262:	29 81       	ldd	r18, Y+1	; 0x01
    7264:	3a 81       	ldd	r19, Y+2	; 0x02
    7266:	2f 59       	subi	r18, 0x9F	; 159
    7268:	3f 4f       	sbci	r19, 0xFF	; 255
    726a:	f9 01       	movw	r30, r18
    726c:	80 83       	st	Z, r24
    726e:	91 83       	std	Z+1, r25	; 0x01
    7270:	a2 83       	std	Z+2, r26	; 0x02
    7272:	b3 83       	std	Z+3, r27	; 0x03

	
	message->PhiRollDegrees = model->PhiRollDegrees();
    7274:	8b 81       	ldd	r24, Y+3	; 0x03
    7276:	9c 81       	ldd	r25, Y+4	; 0x04
    7278:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZNK10helicopter5model11SystemModel14PhiRollDegreesEv>
    727c:	dc 01       	movw	r26, r24
    727e:	cb 01       	movw	r24, r22
    7280:	29 81       	ldd	r18, Y+1	; 0x01
    7282:	3a 81       	ldd	r19, Y+2	; 0x02
    7284:	2f 58       	subi	r18, 0x8F	; 143
    7286:	3f 4f       	sbci	r19, 0xFF	; 255
    7288:	f9 01       	movw	r30, r18
    728a:	80 83       	st	Z, r24
    728c:	91 83       	std	Z+1, r25	; 0x01
    728e:	a2 83       	std	Z+2, r26	; 0x02
    7290:	b3 83       	std	Z+3, r27	; 0x03
	message->YNEDBodyFrame = model->YNEDBodyFrame();
    7292:	8b 81       	ldd	r24, Y+3	; 0x03
    7294:	9c 81       	ldd	r25, Y+4	; 0x04
    7296:	0e 94 26 04 	call	0x84c	; 0x84c <_ZNK10helicopter5model11SystemModel13YNEDBodyFrameEv>
    729a:	dc 01       	movw	r26, r24
    729c:	cb 01       	movw	r24, r22
    729e:	29 81       	ldd	r18, Y+1	; 0x01
    72a0:	3a 81       	ldd	r19, Y+2	; 0x02
    72a2:	27 59       	subi	r18, 0x97	; 151
    72a4:	3f 4f       	sbci	r19, 0xFF	; 255
    72a6:	f9 01       	movw	r30, r18
    72a8:	80 83       	st	Z, r24
    72aa:	91 83       	std	Z+1, r25	; 0x01
    72ac:	a2 83       	std	Z+2, r26	; 0x02
    72ae:	b3 83       	std	Z+3, r27	; 0x03
	message->YDerivativeError = model->YDerivativeError();
    72b0:	8b 81       	ldd	r24, Y+3	; 0x03
    72b2:	9c 81       	ldd	r25, Y+4	; 0x04
    72b4:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <_ZNK10helicopter5model11SystemModel16YDerivativeErrorEv>
    72b8:	dc 01       	movw	r26, r24
    72ba:	cb 01       	movw	r24, r22
    72bc:	29 81       	ldd	r18, Y+1	; 0x01
    72be:	3a 81       	ldd	r19, Y+2	; 0x02
    72c0:	23 58       	subi	r18, 0x83	; 131
    72c2:	3f 4f       	sbci	r19, 0xFF	; 255
    72c4:	f9 01       	movw	r30, r18
    72c6:	80 83       	st	Z, r24
    72c8:	91 83       	std	Z+1, r25	; 0x01
    72ca:	a2 83       	std	Z+2, r26	; 0x02
    72cc:	b3 83       	std	Z+3, r27	; 0x03
	message->YIntegral = model->YIntegral();
    72ce:	8b 81       	ldd	r24, Y+3	; 0x03
    72d0:	9c 81       	ldd	r25, Y+4	; 0x04
    72d2:	0e 94 5a 05 	call	0xab4	; 0xab4 <_ZNK10helicopter5model11SystemModel9YIntegralEv>
    72d6:	dc 01       	movw	r26, r24
    72d8:	cb 01       	movw	r24, r22
    72da:	29 81       	ldd	r18, Y+1	; 0x01
    72dc:	3a 81       	ldd	r19, Y+2	; 0x02
    72de:	2b 58       	subi	r18, 0x8B	; 139
    72e0:	3f 4f       	sbci	r19, 0xFF	; 255
    72e2:	f9 01       	movw	r30, r18
    72e4:	80 83       	st	Z, r24
    72e6:	91 83       	std	Z+1, r25	; 0x01
    72e8:	a2 83       	std	Z+2, r26	; 0x02
    72ea:	b3 83       	std	Z+3, r27	; 0x03
	message->YProportional = model->YProportional();
    72ec:	8b 81       	ldd	r24, Y+3	; 0x03
    72ee:	9c 81       	ldd	r25, Y+4	; 0x04
    72f0:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZNK10helicopter5model11SystemModel13YProportionalEv>
    72f4:	dc 01       	movw	r26, r24
    72f6:	cb 01       	movw	r24, r22
    72f8:	29 81       	ldd	r18, Y+1	; 0x01
    72fa:	3a 81       	ldd	r19, Y+2	; 0x02
    72fc:	27 58       	subi	r18, 0x87	; 135
    72fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7300:	f9 01       	movw	r30, r18
    7302:	80 83       	st	Z, r24
    7304:	91 83       	std	Z+1, r25	; 0x01
    7306:	a2 83       	std	Z+2, r26	; 0x02
    7308:	b3 83       	std	Z+3, r27	; 0x03
	message->YVelocityMetersPerSecond = model->YVelocityMetersPerSecond();
    730a:	8b 81       	ldd	r24, Y+3	; 0x03
    730c:	9c 81       	ldd	r25, Y+4	; 0x04
    730e:	0e 94 cc 04 	call	0x998	; 0x998 <_ZNK10helicopter5model11SystemModel24YVelocityMetersPerSecondEv>
    7312:	dc 01       	movw	r26, r24
    7314:	cb 01       	movw	r24, r22
    7316:	29 81       	ldd	r18, Y+1	; 0x01
    7318:	3a 81       	ldd	r19, Y+2	; 0x02
    731a:	23 59       	subi	r18, 0x93	; 147
    731c:	3f 4f       	sbci	r19, 0xFF	; 255
    731e:	f9 01       	movw	r30, r18
    7320:	80 83       	st	Z, r24
    7322:	91 83       	std	Z+1, r25	; 0x01
    7324:	a2 83       	std	Z+2, r26	; 0x02
    7326:	b3 83       	std	Z+3, r27	; 0x03
	message->LateralControl = model->LateralControl();
    7328:	8b 81       	ldd	r24, Y+3	; 0x03
    732a:	9c 81       	ldd	r25, Y+4	; 0x04
    732c:	0e 94 91 04 	call	0x922	; 0x922 <_ZNK10helicopter5model11SystemModel14LateralControlEv>
    7330:	dc 01       	movw	r26, r24
    7332:	cb 01       	movw	r24, r22
    7334:	29 81       	ldd	r18, Y+1	; 0x01
    7336:	3a 81       	ldd	r19, Y+2	; 0x02
    7338:	2f 57       	subi	r18, 0x7F	; 127
    733a:	3f 4f       	sbci	r19, 0xFF	; 255
    733c:	f9 01       	movw	r30, r18
    733e:	80 83       	st	Z, r24
    7340:	91 83       	std	Z+1, r25	; 0x01
    7342:	a2 83       	std	Z+2, r26	; 0x02
    7344:	b3 83       	std	Z+3, r27	; 0x03
	message->YLateralOuterLoopSetpoint = model->YLateralOuterLoopSetpoint();
    7346:	8b 81       	ldd	r24, Y+3	; 0x03
    7348:	9c 81       	ldd	r25, Y+4	; 0x04
    734a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZNK10helicopter5model11SystemModel25YLateralOuterLoopSetpointEv>
    734e:	dc 01       	movw	r26, r24
    7350:	cb 01       	movw	r24, r22
    7352:	29 81       	ldd	r18, Y+1	; 0x01
    7354:	3a 81       	ldd	r19, Y+2	; 0x02
    7356:	27 56       	subi	r18, 0x67	; 103
    7358:	3f 4f       	sbci	r19, 0xFF	; 255
    735a:	f9 01       	movw	r30, r18
    735c:	80 83       	st	Z, r24
    735e:	91 83       	std	Z+1, r25	; 0x01
    7360:	a2 83       	std	Z+2, r26	; 0x02
    7362:	b3 83       	std	Z+3, r27	; 0x03
	message->RollAngularVelocityRadsPerSecond = model->RollAngularVelocityRadsPerSecond();	
    7364:	8b 81       	ldd	r24, Y+3	; 0x03
    7366:	9c 81       	ldd	r25, Y+4	; 0x04
    7368:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZNK10helicopter5model11SystemModel32RollAngularVelocityRadsPerSecondEv>
    736c:	dc 01       	movw	r26, r24
    736e:	cb 01       	movw	r24, r22
    7370:	29 81       	ldd	r18, Y+1	; 0x01
    7372:	3a 81       	ldd	r19, Y+2	; 0x02
    7374:	23 56       	subi	r18, 0x63	; 99
    7376:	3f 4f       	sbci	r19, 0xFF	; 255
    7378:	f9 01       	movw	r30, r18
    737a:	80 83       	st	Z, r24
    737c:	91 83       	std	Z+1, r25	; 0x01
    737e:	a2 83       	std	Z+2, r26	; 0x02
    7380:	b3 83       	std	Z+3, r27	; 0x03
	
	
	message->AltitudeFeetAgl = model->AltitudeFeetAgl();
    7382:	8b 81       	ldd	r24, Y+3	; 0x03
    7384:	9c 81       	ldd	r25, Y+4	; 0x04
    7386:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZNK10helicopter5model11SystemModel15AltitudeFeetAglEv>
    738a:	dc 01       	movw	r26, r24
    738c:	cb 01       	movw	r24, r22
    738e:	29 81       	ldd	r18, Y+1	; 0x01
    7390:	3a 81       	ldd	r19, Y+2	; 0x02
    7392:	2b 55       	subi	r18, 0x5B	; 91
    7394:	3f 4f       	sbci	r19, 0xFF	; 255
    7396:	f9 01       	movw	r30, r18
    7398:	80 83       	st	Z, r24
    739a:	91 83       	std	Z+1, r25	; 0x01
    739c:	a2 83       	std	Z+2, r26	; 0x02
    739e:	b3 83       	std	Z+3, r27	; 0x03
	message->ZDerivativeError = model->ZDerivativeError();
    73a0:	8b 81       	ldd	r24, Y+3	; 0x03
    73a2:	9c 81       	ldd	r25, Y+4	; 0x04
    73a4:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <_ZNK10helicopter5model11SystemModel16ZDerivativeErrorEv>
    73a8:	dc 01       	movw	r26, r24
    73aa:	cb 01       	movw	r24, r22
    73ac:	29 81       	ldd	r18, Y+1	; 0x01
    73ae:	3a 81       	ldd	r19, Y+2	; 0x02
    73b0:	2b 54       	subi	r18, 0x4B	; 75
    73b2:	3f 4f       	sbci	r19, 0xFF	; 255
    73b4:	f9 01       	movw	r30, r18
    73b6:	80 83       	st	Z, r24
    73b8:	91 83       	std	Z+1, r25	; 0x01
    73ba:	a2 83       	std	Z+2, r26	; 0x02
    73bc:	b3 83       	std	Z+3, r27	; 0x03
	message->ZIntegral = model->ZIntegral();
    73be:	8b 81       	ldd	r24, Y+3	; 0x03
    73c0:	9c 81       	ldd	r25, Y+4	; 0x04
    73c2:	0e 94 be 06 	call	0xd7c	; 0xd7c <_ZNK10helicopter5model11SystemModel9ZIntegralEv>
    73c6:	dc 01       	movw	r26, r24
    73c8:	cb 01       	movw	r24, r22
    73ca:	29 81       	ldd	r18, Y+1	; 0x01
    73cc:	3a 81       	ldd	r19, Y+2	; 0x02
    73ce:	23 55       	subi	r18, 0x53	; 83
    73d0:	3f 4f       	sbci	r19, 0xFF	; 255
    73d2:	f9 01       	movw	r30, r18
    73d4:	80 83       	st	Z, r24
    73d6:	91 83       	std	Z+1, r25	; 0x01
    73d8:	a2 83       	std	Z+2, r26	; 0x02
    73da:	b3 83       	std	Z+3, r27	; 0x03
	message->ZProportional = model->ZProportional();
    73dc:	8b 81       	ldd	r24, Y+3	; 0x03
    73de:	9c 81       	ldd	r25, Y+4	; 0x04
    73e0:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZNK10helicopter5model11SystemModel13ZProportionalEv>
    73e4:	dc 01       	movw	r26, r24
    73e6:	cb 01       	movw	r24, r22
    73e8:	29 81       	ldd	r18, Y+1	; 0x01
    73ea:	3a 81       	ldd	r19, Y+2	; 0x02
    73ec:	2f 54       	subi	r18, 0x4F	; 79
    73ee:	3f 4f       	sbci	r19, 0xFF	; 255
    73f0:	f9 01       	movw	r30, r18
    73f2:	80 83       	st	Z, r24
    73f4:	91 83       	std	Z+1, r25	; 0x01
    73f6:	a2 83       	std	Z+2, r26	; 0x02
    73f8:	b3 83       	std	Z+3, r27	; 0x03
	message->ZVelocityMetersPerSecond = (model->ZVelocityFeetPerSecond() / 3.2804f);
    73fa:	8b 81       	ldd	r24, Y+3	; 0x03
    73fc:	9c 81       	ldd	r25, Y+4	; 0x04
    73fe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZNK10helicopter5model11SystemModel22ZVelocityFeetPerSecondEv>
    7402:	dc 01       	movw	r26, r24
    7404:	cb 01       	movw	r24, r22
    7406:	23 e1       	ldi	r18, 0x13	; 19
    7408:	32 ef       	ldi	r19, 0xF2	; 242
    740a:	41 e5       	ldi	r20, 0x51	; 81
    740c:	50 e4       	ldi	r21, 0x40	; 64
    740e:	bc 01       	movw	r22, r24
    7410:	cd 01       	movw	r24, r26
    7412:	0e 94 37 54 	call	0xa86e	; 0xa86e <__divsf3>
    7416:	dc 01       	movw	r26, r24
    7418:	cb 01       	movw	r24, r22
    741a:	29 81       	ldd	r18, Y+1	; 0x01
    741c:	3a 81       	ldd	r19, Y+2	; 0x02
    741e:	27 55       	subi	r18, 0x57	; 87
    7420:	3f 4f       	sbci	r19, 0xFF	; 255
    7422:	f9 01       	movw	r30, r18
    7424:	80 83       	st	Z, r24
    7426:	91 83       	std	Z+1, r25	; 0x01
    7428:	a2 83       	std	Z+2, r26	; 0x02
    742a:	b3 83       	std	Z+3, r27	; 0x03
	message->MainRotorCollectiveControl = model->MainRotorCollectiveControl();
    742c:	8b 81       	ldd	r24, Y+3	; 0x03
    742e:	9c 81       	ldd	r25, Y+4	; 0x04
    7430:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZNK10helicopter5model11SystemModel26MainRotorCollectiveControlEv>
    7434:	dc 01       	movw	r26, r24
    7436:	cb 01       	movw	r24, r22
    7438:	29 81       	ldd	r18, Y+1	; 0x01
    743a:	3a 81       	ldd	r19, Y+2	; 0x02
    743c:	27 54       	subi	r18, 0x47	; 71
    743e:	3f 4f       	sbci	r19, 0xFF	; 255
    7440:	f9 01       	movw	r30, r18
    7442:	80 83       	st	Z, r24
    7444:	91 83       	std	Z+1, r25	; 0x01
    7446:	a2 83       	std	Z+2, r26	; 0x02
    7448:	b3 83       	std	Z+3, r27	; 0x03
	message->ZNEDBodyFrame = model->ZNEDBodyFrame();
    744a:	8b 81       	ldd	r24, Y+3	; 0x03
    744c:	9c 81       	ldd	r25, Y+4	; 0x04
    744e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZNK10helicopter5model11SystemModel13ZNEDBodyFrameEv>
    7452:	dc 01       	movw	r26, r24
    7454:	cb 01       	movw	r24, r22
    7456:	29 81       	ldd	r18, Y+1	; 0x01
    7458:	3a 81       	ldd	r19, Y+2	; 0x02
    745a:	23 53       	subi	r18, 0x33	; 51
    745c:	3f 4f       	sbci	r19, 0xFF	; 255
    745e:	f9 01       	movw	r30, r18
    7460:	80 83       	st	Z, r24
    7462:	91 83       	std	Z+1, r25	; 0x01
    7464:	a2 83       	std	Z+2, r26	; 0x02
    7466:	b3 83       	std	Z+3, r27	; 0x03
	
	
	
	message->ChecksumErrors = model->ChecksumErrors();
    7468:	8b 81       	ldd	r24, Y+3	; 0x03
    746a:	9c 81       	ldd	r25, Y+4	; 0x04
    746c:	0e 94 67 2f 	call	0x5ece	; 0x5ece <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    7470:	dc 01       	movw	r26, r24
    7472:	cb 01       	movw	r24, r22
    7474:	29 81       	ldd	r18, Y+1	; 0x01
    7476:	3a 81       	ldd	r19, Y+2	; 0x02
    7478:	2f 51       	subi	r18, 0x1F	; 31
    747a:	3f 4f       	sbci	r19, 0xFF	; 255
    747c:	f9 01       	movw	r30, r18
    747e:	80 83       	st	Z, r24
    7480:	91 83       	std	Z+1, r25	; 0x01
    7482:	a2 83       	std	Z+2, r26	; 0x02
    7484:	b3 83       	std	Z+3, r27	; 0x03
	message->Timeouts = model->Timeouts();
    7486:	8b 81       	ldd	r24, Y+3	; 0x03
    7488:	9c 81       	ldd	r25, Y+4	; 0x04
    748a:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    748e:	dc 01       	movw	r26, r24
    7490:	cb 01       	movw	r24, r22
    7492:	29 81       	ldd	r18, Y+1	; 0x01
    7494:	3a 81       	ldd	r19, Y+2	; 0x02
    7496:	27 52       	subi	r18, 0x27	; 39
    7498:	3f 4f       	sbci	r19, 0xFF	; 255
    749a:	f9 01       	movw	r30, r18
    749c:	80 83       	st	Z, r24
    749e:	91 83       	std	Z+1, r25	; 0x01
    74a0:	a2 83       	std	Z+2, r26	; 0x02
    74a2:	b3 83       	std	Z+3, r27	; 0x03
	message->UnrecognizedMsgTypes = model->UnrecognizedMsgTypes();
    74a4:	8b 81       	ldd	r24, Y+3	; 0x03
    74a6:	9c 81       	ldd	r25, Y+4	; 0x04
    74a8:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    74ac:	dc 01       	movw	r26, r24
    74ae:	cb 01       	movw	r24, r22
    74b0:	29 81       	ldd	r18, Y+1	; 0x01
    74b2:	3a 81       	ldd	r19, Y+2	; 0x02
    74b4:	23 52       	subi	r18, 0x23	; 35
    74b6:	3f 4f       	sbci	r19, 0xFF	; 255
    74b8:	f9 01       	movw	r30, r18
    74ba:	80 83       	st	Z, r24
    74bc:	91 83       	std	Z+1, r25	; 0x01
    74be:	a2 83       	std	Z+2, r26	; 0x02
    74c0:	b3 83       	std	Z+3, r27	; 0x03
	message->NumOfBlownFrames = model->BlownFrames();
    74c2:	8b 81       	ldd	r24, Y+3	; 0x03
    74c4:	9c 81       	ldd	r25, Y+4	; 0x04
    74c6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZNK10helicopter5model11SystemModel11BlownFramesEv>
    74ca:	dc 01       	movw	r26, r24
    74cc:	cb 01       	movw	r24, r22
    74ce:	29 81       	ldd	r18, Y+1	; 0x01
    74d0:	3a 81       	ldd	r19, Y+2	; 0x02
    74d2:	2b 51       	subi	r18, 0x1B	; 27
    74d4:	3f 4f       	sbci	r19, 0xFF	; 255
    74d6:	f9 01       	movw	r30, r18
    74d8:	80 83       	st	Z, r24
    74da:	91 83       	std	Z+1, r25	; 0x01
    74dc:	a2 83       	std	Z+2, r26	; 0x02
    74de:	b3 83       	std	Z+3, r27	; 0x03
	message->SerialCommunicationBufferOverruns = model->SerialCommunicationBufferOverruns();
    74e0:	8b 81       	ldd	r24, Y+3	; 0x03
    74e2:	9c 81       	ldd	r25, Y+4	; 0x04
    74e4:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <_ZNK10helicopter5model11SystemModel33SerialCommunicationBufferOverrunsEv>
    74e8:	dc 01       	movw	r26, r24
    74ea:	cb 01       	movw	r24, r22
    74ec:	29 81       	ldd	r18, Y+1	; 0x01
    74ee:	3a 81       	ldd	r19, Y+2	; 0x02
    74f0:	27 51       	subi	r18, 0x17	; 23
    74f2:	3f 4f       	sbci	r19, 0xFF	; 255
    74f4:	f9 01       	movw	r30, r18
    74f6:	80 83       	st	Z, r24
    74f8:	91 83       	std	Z+1, r25	; 0x01
    74fa:	a2 83       	std	Z+2, r26	; 0x02
    74fc:	b3 83       	std	Z+3, r27	; 0x03
	
	return message;
    74fe:	89 81       	ldd	r24, Y+1	; 0x01
    7500:	9a 81       	ldd	r25, Y+2	; 0x02
}
    7502:	0f 90       	pop	r0
    7504:	0f 90       	pop	r0
    7506:	0f 90       	pop	r0
    7508:	0f 90       	pop	r0
    750a:	df 91       	pop	r29
    750c:	cf 91       	pop	r28
    750e:	1f 91       	pop	r17
    7510:	0f 91       	pop	r16
    7512:	08 95       	ret

00007514 <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>:
	model->ChecksumErrors(this->ChecksumErrors);
	model->BlownFrames(this->NumOfBlownFrames);
}

void SystemTelemetryMessage::updateModelFromMessageFromSimulator (SystemModel *model)
{
    7514:	cf 93       	push	r28
    7516:	df 93       	push	r29
    7518:	00 d0       	rcall	.+0      	; 0x751a <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE+0x6>
    751a:	1f 92       	push	r1
    751c:	cd b7       	in	r28, 0x3d	; 61
    751e:	de b7       	in	r29, 0x3e	; 62
    7520:	9a 83       	std	Y+2, r25	; 0x02
    7522:	89 83       	std	Y+1, r24	; 0x01
    7524:	7c 83       	std	Y+4, r23	; 0x04
    7526:	6b 83       	std	Y+3, r22	; 0x03
	//These values are sensor readings from the simulator that are used for flight
	//control calculations. The real helicopter algorithms will read these values
	//from actual sensors, but when running off of the simulator, these sensor
	//readings come from the simulator itself.
	
	model->MagYawDegrees(this->MagYaw);
    7528:	89 81       	ldd	r24, Y+1	; 0x01
    752a:	9a 81       	ldd	r25, Y+2	; 0x02
    752c:	fc 01       	movw	r30, r24
    752e:	85 81       	ldd	r24, Z+5	; 0x05
    7530:	96 81       	ldd	r25, Z+6	; 0x06
    7532:	a7 81       	ldd	r26, Z+7	; 0x07
    7534:	b0 85       	ldd	r27, Z+8	; 0x08
    7536:	2b 81       	ldd	r18, Y+3	; 0x03
    7538:	3c 81       	ldd	r19, Y+4	; 0x04
    753a:	ac 01       	movw	r20, r24
    753c:	bd 01       	movw	r22, r26
    753e:	c9 01       	movw	r24, r18
    7540:	0e 94 9a 2c 	call	0x5934	; 0x5934 <_ZN10helicopter5model11SystemModel13MagYawDegreesEf>
	model->YawVelocityDegreesPerSecond(this->YawVelocityDegreesPerSecond);
    7544:	89 81       	ldd	r24, Y+1	; 0x01
    7546:	9a 81       	ldd	r25, Y+2	; 0x02
    7548:	fc 01       	movw	r30, r24
    754a:	81 85       	ldd	r24, Z+9	; 0x09
    754c:	92 85       	ldd	r25, Z+10	; 0x0a
    754e:	a3 85       	ldd	r26, Z+11	; 0x0b
    7550:	b4 85       	ldd	r27, Z+12	; 0x0c
    7552:	2b 81       	ldd	r18, Y+3	; 0x03
    7554:	3c 81       	ldd	r19, Y+4	; 0x04
    7556:	ac 01       	movw	r20, r24
    7558:	bd 01       	movw	r22, r26
    755a:	c9 01       	movw	r24, r18
    755c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEf>
	
	//model->XNEDBodyFrame((double) this->XNEDBodyFrame / 100);//not supposed to be here since this is a calculated value, not a sensor reading.
	model->XVelocityMetersPerSecond(this->XVelocityMetersPerSecond);
    7560:	89 81       	ldd	r24, Y+1	; 0x01
    7562:	9a 81       	ldd	r25, Y+2	; 0x02
    7564:	fc 01       	movw	r30, r24
    7566:	81 a9       	ldd	r24, Z+49	; 0x31
    7568:	92 a9       	ldd	r25, Z+50	; 0x32
    756a:	a3 a9       	ldd	r26, Z+51	; 0x33
    756c:	b4 a9       	ldd	r27, Z+52	; 0x34
    756e:	2b 81       	ldd	r18, Y+3	; 0x03
    7570:	3c 81       	ldd	r19, Y+4	; 0x04
    7572:	ac 01       	movw	r20, r24
    7574:	bd 01       	movw	r22, r26
    7576:	c9 01       	movw	r24, r18
    7578:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <_ZN10helicopter5model11SystemModel24XVelocityMetersPerSecondEf>
	model->ThetaPitchDegrees(this->ThetaPitchDegrees);
    757c:	89 81       	ldd	r24, Y+1	; 0x01
    757e:	9a 81       	ldd	r25, Y+2	; 0x02
    7580:	fc 01       	movw	r30, r24
    7582:	85 a9       	ldd	r24, Z+53	; 0x35
    7584:	96 a9       	ldd	r25, Z+54	; 0x36
    7586:	a7 a9       	ldd	r26, Z+55	; 0x37
    7588:	b0 ad       	ldd	r27, Z+56	; 0x38
    758a:	2b 81       	ldd	r18, Y+3	; 0x03
    758c:	3c 81       	ldd	r19, Y+4	; 0x04
    758e:	ac 01       	movw	r20, r24
    7590:	bd 01       	movw	r22, r26
    7592:	c9 01       	movw	r24, r18
    7594:	0e 94 56 2d 	call	0x5aac	; 0x5aac <_ZN10helicopter5model11SystemModel17ThetaPitchDegreesEf>
	model->PitchAngularVelocityRadsPerSecond(this->PitchAngularVelocityRadsPerSecond);
    7598:	89 81       	ldd	r24, Y+1	; 0x01
    759a:	9a 81       	ldd	r25, Y+2	; 0x02
    759c:	8f 59       	subi	r24, 0x9F	; 159
    759e:	9f 4f       	sbci	r25, 0xFF	; 255
    75a0:	fc 01       	movw	r30, r24
    75a2:	80 81       	ld	r24, Z
    75a4:	91 81       	ldd	r25, Z+1	; 0x01
    75a6:	a2 81       	ldd	r26, Z+2	; 0x02
    75a8:	b3 81       	ldd	r27, Z+3	; 0x03
    75aa:	2b 81       	ldd	r18, Y+3	; 0x03
    75ac:	3c 81       	ldd	r19, Y+4	; 0x04
    75ae:	ac 01       	movw	r20, r24
    75b0:	bd 01       	movw	r22, r26
    75b2:	c9 01       	movw	r24, r18
    75b4:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <_ZN10helicopter5model11SystemModel33PitchAngularVelocityRadsPerSecondEf>
	
	//model->YNEDBodyFrame((double) this->YNEDBodyFrame / 100);
	model->YVelocityMetersPerSecond(this->YVelocityMetersPerSecond);
    75b8:	89 81       	ldd	r24, Y+1	; 0x01
    75ba:	9a 81       	ldd	r25, Y+2	; 0x02
    75bc:	83 59       	subi	r24, 0x93	; 147
    75be:	9f 4f       	sbci	r25, 0xFF	; 255
    75c0:	fc 01       	movw	r30, r24
    75c2:	80 81       	ld	r24, Z
    75c4:	91 81       	ldd	r25, Z+1	; 0x01
    75c6:	a2 81       	ldd	r26, Z+2	; 0x02
    75c8:	b3 81       	ldd	r27, Z+3	; 0x03
    75ca:	2b 81       	ldd	r18, Y+3	; 0x03
    75cc:	3c 81       	ldd	r19, Y+4	; 0x04
    75ce:	ac 01       	movw	r20, r24
    75d0:	bd 01       	movw	r22, r26
    75d2:	c9 01       	movw	r24, r18
    75d4:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <_ZN10helicopter5model11SystemModel24YVelocityMetersPerSecondEf>
	model->PhiRollDegrees(this->PhiRollDegrees);
    75d8:	89 81       	ldd	r24, Y+1	; 0x01
    75da:	9a 81       	ldd	r25, Y+2	; 0x02
    75dc:	8f 58       	subi	r24, 0x8F	; 143
    75de:	9f 4f       	sbci	r25, 0xFF	; 255
    75e0:	fc 01       	movw	r30, r24
    75e2:	80 81       	ld	r24, Z
    75e4:	91 81       	ldd	r25, Z+1	; 0x01
    75e6:	a2 81       	ldd	r26, Z+2	; 0x02
    75e8:	b3 81       	ldd	r27, Z+3	; 0x03
    75ea:	2b 81       	ldd	r18, Y+3	; 0x03
    75ec:	3c 81       	ldd	r19, Y+4	; 0x04
    75ee:	ac 01       	movw	r20, r24
    75f0:	bd 01       	movw	r22, r26
    75f2:	c9 01       	movw	r24, r18
    75f4:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <_ZN10helicopter5model11SystemModel14PhiRollDegreesEf>
	model->RollAngularVelocityRadsPerSecond(this->RollAngularVelocityRadsPerSecond);
    75f8:	89 81       	ldd	r24, Y+1	; 0x01
    75fa:	9a 81       	ldd	r25, Y+2	; 0x02
    75fc:	83 56       	subi	r24, 0x63	; 99
    75fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7600:	fc 01       	movw	r30, r24
    7602:	80 81       	ld	r24, Z
    7604:	91 81       	ldd	r25, Z+1	; 0x01
    7606:	a2 81       	ldd	r26, Z+2	; 0x02
    7608:	b3 81       	ldd	r27, Z+3	; 0x03
    760a:	2b 81       	ldd	r18, Y+3	; 0x03
    760c:	3c 81       	ldd	r19, Y+4	; 0x04
    760e:	ac 01       	movw	r20, r24
    7610:	bd 01       	movw	r22, r26
    7612:	c9 01       	movw	r24, r18
    7614:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <_ZN10helicopter5model11SystemModel32RollAngularVelocityRadsPerSecondEf>
	
	model->AltitudeFeetAgl(this->AltitudeFeetAgl);
    7618:	89 81       	ldd	r24, Y+1	; 0x01
    761a:	9a 81       	ldd	r25, Y+2	; 0x02
    761c:	8b 55       	subi	r24, 0x5B	; 91
    761e:	9f 4f       	sbci	r25, 0xFF	; 255
    7620:	fc 01       	movw	r30, r24
    7622:	80 81       	ld	r24, Z
    7624:	91 81       	ldd	r25, Z+1	; 0x01
    7626:	a2 81       	ldd	r26, Z+2	; 0x02
    7628:	b3 81       	ldd	r27, Z+3	; 0x03
    762a:	2b 81       	ldd	r18, Y+3	; 0x03
    762c:	3c 81       	ldd	r19, Y+4	; 0x04
    762e:	ac 01       	movw	r20, r24
    7630:	bd 01       	movw	r22, r26
    7632:	c9 01       	movw	r24, r18
    7634:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN10helicopter5model11SystemModel15AltitudeFeetAglEf>
	
	//Convert from meters per sec, to foot per sec.
	
	model->ZVelocityFeetPerSecond(this->ZVelocityMetersPerSecond * 3.28084d); 
    7638:	89 81       	ldd	r24, Y+1	; 0x01
    763a:	9a 81       	ldd	r25, Y+2	; 0x02
    763c:	87 55       	subi	r24, 0x57	; 87
    763e:	9f 4f       	sbci	r25, 0xFF	; 255
    7640:	fc 01       	movw	r30, r24
    7642:	80 81       	ld	r24, Z
    7644:	91 81       	ldd	r25, Z+1	; 0x01
    7646:	a2 81       	ldd	r26, Z+2	; 0x02
    7648:	b3 81       	ldd	r27, Z+3	; 0x03
    764a:	28 e4       	ldi	r18, 0x48	; 72
    764c:	39 ef       	ldi	r19, 0xF9	; 249
    764e:	41 e5       	ldi	r20, 0x51	; 81
    7650:	50 e4       	ldi	r21, 0x40	; 64
    7652:	bc 01       	movw	r22, r24
    7654:	cd 01       	movw	r24, r26
    7656:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    765a:	dc 01       	movw	r26, r24
    765c:	cb 01       	movw	r24, r22
    765e:	2b 81       	ldd	r18, Y+3	; 0x03
    7660:	3c 81       	ldd	r19, Y+4	; 0x04
    7662:	ac 01       	movw	r20, r24
    7664:	bd 01       	movw	r22, r26
    7666:	c9 01       	movw	r24, r18
    7668:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <_ZN10helicopter5model11SystemModel22ZVelocityFeetPerSecondEf>
	
	model->LatitudeDegrees(this->LatitudeDegrees);
    766c:	89 81       	ldd	r24, Y+1	; 0x01
    766e:	9a 81       	ldd	r25, Y+2	; 0x02
    7670:	8f 52       	subi	r24, 0x2F	; 47
    7672:	9f 4f       	sbci	r25, 0xFF	; 255
    7674:	fc 01       	movw	r30, r24
    7676:	80 81       	ld	r24, Z
    7678:	91 81       	ldd	r25, Z+1	; 0x01
    767a:	a2 81       	ldd	r26, Z+2	; 0x02
    767c:	b3 81       	ldd	r27, Z+3	; 0x03
    767e:	2b 81       	ldd	r18, Y+3	; 0x03
    7680:	3c 81       	ldd	r19, Y+4	; 0x04
    7682:	ac 01       	movw	r20, r24
    7684:	bd 01       	movw	r22, r26
    7686:	c9 01       	movw	r24, r18
    7688:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <_ZN10helicopter5model11SystemModel15LatitudeDegreesEf>
	model->LongitudeDegrees(this->LongitudeDegrees);
    768c:	89 81       	ldd	r24, Y+1	; 0x01
    768e:	9a 81       	ldd	r25, Y+2	; 0x02
    7690:	8b 52       	subi	r24, 0x2B	; 43
    7692:	9f 4f       	sbci	r25, 0xFF	; 255
    7694:	fc 01       	movw	r30, r24
    7696:	80 81       	ld	r24, Z
    7698:	91 81       	ldd	r25, Z+1	; 0x01
    769a:	a2 81       	ldd	r26, Z+2	; 0x02
    769c:	b3 81       	ldd	r27, Z+3	; 0x03
    769e:	2b 81       	ldd	r18, Y+3	; 0x03
    76a0:	3c 81       	ldd	r19, Y+4	; 0x04
    76a2:	ac 01       	movw	r20, r24
    76a4:	bd 01       	movw	r22, r26
    76a6:	c9 01       	movw	r24, r18
    76a8:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN10helicopter5model11SystemModel16LongitudeDegreesEf>
    76ac:	0f 90       	pop	r0
    76ae:	0f 90       	pop	r0
    76b0:	0f 90       	pop	r0
    76b2:	0f 90       	pop	r0
    76b4:	df 91       	pop	r29
    76b6:	cf 91       	pop	r28
    76b8:	08 95       	ret

000076ba <_ZN10helicopter5tasks4Task8getDelayEv>:
				 * subclasses runTaskImpl to execute the actual task logic.
				 */
				virtual void runTask();
				
					
				int getDelay()
    76ba:	cf 93       	push	r28
    76bc:	df 93       	push	r29
    76be:	1f 92       	push	r1
    76c0:	1f 92       	push	r1
    76c2:	cd b7       	in	r28, 0x3d	; 61
    76c4:	de b7       	in	r29, 0x3e	; 62
    76c6:	9a 83       	std	Y+2, r25	; 0x02
    76c8:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    76ca:	89 81       	ldd	r24, Y+1	; 0x01
    76cc:	9a 81       	ldd	r25, Y+2	; 0x02
    76ce:	fc 01       	movw	r30, r24
    76d0:	82 81       	ldd	r24, Z+2	; 0x02
    76d2:	93 81       	ldd	r25, Z+3	; 0x03
				}
    76d4:	0f 90       	pop	r0
    76d6:	0f 90       	pop	r0
    76d8:	df 91       	pop	r29
    76da:	cf 91       	pop	r28
    76dc:	08 95       	ret

000076de <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    76de:	cf 93       	push	r28
    76e0:	df 93       	push	r29
    76e2:	1f 92       	push	r1
    76e4:	1f 92       	push	r1
    76e6:	cd b7       	in	r28, 0x3d	; 61
    76e8:	de b7       	in	r29, 0x3e	; 62
    76ea:	9a 83       	std	Y+2, r25	; 0x02
    76ec:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    76ee:	89 81       	ldd	r24, Y+1	; 0x01
    76f0:	9a 81       	ldd	r25, Y+2	; 0x02
    76f2:	fc 01       	movw	r30, r24
    76f4:	84 81       	ldd	r24, Z+4	; 0x04
    76f6:	95 81       	ldd	r25, Z+5	; 0x05
				}
    76f8:	0f 90       	pop	r0
    76fa:	0f 90       	pop	r0
    76fc:	df 91       	pop	r29
    76fe:	cf 91       	pop	r28
    7700:	08 95       	ret

00007702 <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    7702:	cf 93       	push	r28
    7704:	df 93       	push	r29
    7706:	00 d0       	rcall	.+0      	; 0x7708 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    7708:	1f 92       	push	r1
    770a:	cd b7       	in	r28, 0x3d	; 61
    770c:	de b7       	in	r29, 0x3e	; 62
    770e:	9a 83       	std	Y+2, r25	; 0x02
    7710:	89 83       	std	Y+1, r24	; 0x01
    7712:	7c 83       	std	Y+4, r23	; 0x04
    7714:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    7716:	89 81       	ldd	r24, Y+1	; 0x01
    7718:	9a 81       	ldd	r25, Y+2	; 0x02
    771a:	2b 81       	ldd	r18, Y+3	; 0x03
    771c:	3c 81       	ldd	r19, Y+4	; 0x04
    771e:	fc 01       	movw	r30, r24
    7720:	33 83       	std	Z+3, r19	; 0x03
    7722:	22 83       	std	Z+2, r18	; 0x02
				}
    7724:	0f 90       	pop	r0
    7726:	0f 90       	pop	r0
    7728:	0f 90       	pop	r0
    772a:	0f 90       	pop	r0
    772c:	df 91       	pop	r29
    772e:	cf 91       	pop	r28
    7730:	08 95       	ret

00007732 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    7732:	cf 93       	push	r28
    7734:	df 93       	push	r29
    7736:	1f 92       	push	r1
    7738:	1f 92       	push	r1
    773a:	cd b7       	in	r28, 0x3d	; 61
    773c:	de b7       	in	r29, 0x3e	; 62
    773e:	9a 83       	std	Y+2, r25	; 0x02
    7740:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    7742:	89 81       	ldd	r24, Y+1	; 0x01
    7744:	9a 81       	ldd	r25, Y+2	; 0x02
    7746:	fc 01       	movw	r30, r24
    7748:	86 81       	ldd	r24, Z+6	; 0x06
				}
    774a:	0f 90       	pop	r0
    774c:	0f 90       	pop	r0
    774e:	df 91       	pop	r29
    7750:	cf 91       	pop	r28
    7752:	08 95       	ret

00007754 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    7754:	cf 93       	push	r28
    7756:	df 93       	push	r29
    7758:	00 d0       	rcall	.+0      	; 0x775a <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    775a:	cd b7       	in	r28, 0x3d	; 61
    775c:	de b7       	in	r29, 0x3e	; 62
    775e:	9a 83       	std	Y+2, r25	; 0x02
    7760:	89 83       	std	Y+1, r24	; 0x01
    7762:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    7764:	89 81       	ldd	r24, Y+1	; 0x01
    7766:	9a 81       	ldd	r25, Y+2	; 0x02
    7768:	2b 81       	ldd	r18, Y+3	; 0x03
    776a:	fc 01       	movw	r30, r24
    776c:	26 83       	std	Z+6, r18	; 0x06
				}
    776e:	0f 90       	pop	r0
    7770:	0f 90       	pop	r0
    7772:	0f 90       	pop	r0
    7774:	df 91       	pop	r29
    7776:	cf 91       	pop	r28
    7778:	08 95       	ret

0000777a <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
    777a:	cf 93       	push	r28
    777c:	df 93       	push	r29
    777e:	1f 92       	push	r1
    7780:	1f 92       	push	r1
    7782:	cd b7       	in	r28, 0x3d	; 61
    7784:	de b7       	in	r29, 0x3e	; 62
    7786:	9a 83       	std	Y+2, r25	; 0x02
    7788:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    778a:	89 81       	ldd	r24, Y+1	; 0x01
    778c:	9a 81       	ldd	r25, Y+2	; 0x02
    778e:	fc 01       	movw	r30, r24
    7790:	82 81       	ldd	r24, Z+2	; 0x02
    7792:	93 81       	ldd	r25, Z+3	; 0x03
    7794:	9c 01       	movw	r18, r24
    7796:	21 50       	subi	r18, 0x01	; 1
    7798:	31 09       	sbc	r19, r1
    779a:	89 81       	ldd	r24, Y+1	; 0x01
    779c:	9a 81       	ldd	r25, Y+2	; 0x02
    779e:	fc 01       	movw	r30, r24
    77a0:	33 83       	std	Z+3, r19	; 0x03
    77a2:	22 83       	std	Z+2, r18	; 0x02
				}
    77a4:	0f 90       	pop	r0
    77a6:	0f 90       	pop	r0
    77a8:	df 91       	pop	r29
    77aa:	cf 91       	pop	r28
    77ac:	08 95       	ret

000077ae <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for determining which tasks are ready to run.
				*/
				void start();
				
				int getNumOfTasks()
    77ae:	cf 93       	push	r28
    77b0:	df 93       	push	r29
    77b2:	1f 92       	push	r1
    77b4:	1f 92       	push	r1
    77b6:	cd b7       	in	r28, 0x3d	; 61
    77b8:	de b7       	in	r29, 0x3e	; 62
    77ba:	9a 83       	std	Y+2, r25	; 0x02
    77bc:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    77be:	89 81       	ldd	r24, Y+1	; 0x01
    77c0:	9a 81       	ldd	r25, Y+2	; 0x02
    77c2:	fc 01       	movw	r30, r24
    77c4:	84 89       	ldd	r24, Z+20	; 0x14
    77c6:	95 89       	ldd	r25, Z+21	; 0x15
				}
    77c8:	0f 90       	pop	r0
    77ca:	0f 90       	pop	r0
    77cc:	df 91       	pop	r29
    77ce:	cf 91       	pop	r28
    77d0:	08 95       	ret

000077d2 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    77d2:	cf 93       	push	r28
    77d4:	df 93       	push	r29
    77d6:	1f 92       	push	r1
    77d8:	1f 92       	push	r1
    77da:	cd b7       	in	r28, 0x3d	; 61
    77dc:	de b7       	in	r29, 0x3e	; 62
    77de:	9a 83       	std	Y+2, r25	; 0x02
    77e0:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    77e2:	89 81       	ldd	r24, Y+1	; 0x01
    77e4:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    77e6:	0f 90       	pop	r0
    77e8:	0f 90       	pop	r0
    77ea:	df 91       	pop	r29
    77ec:	cf 91       	pop	r28
    77ee:	08 95       	ret

000077f0 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb>:
				/**
				 * Sets whether a blown frame was detected. (I.e. the dispatcher didn't finish before
				 * the scheduler timmer was triggered again)
				 * @param blownFrameDetected true if a frame was blown, false otherwise.
				 */
				void hasBlownFrame(bool blowFrameDetected)
    77f0:	cf 93       	push	r28
    77f2:	df 93       	push	r29
    77f4:	00 d0       	rcall	.+0      	; 0x77f6 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb+0x6>
    77f6:	cd b7       	in	r28, 0x3d	; 61
    77f8:	de b7       	in	r29, 0x3e	; 62
    77fa:	9a 83       	std	Y+2, r25	; 0x02
    77fc:	89 83       	std	Y+1, r24	; 0x01
    77fe:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->blowFrameDetected = blowFrameDetected;
    7800:	89 81       	ldd	r24, Y+1	; 0x01
    7802:	9a 81       	ldd	r25, Y+2	; 0x02
    7804:	2b 81       	ldd	r18, Y+3	; 0x03
    7806:	fc 01       	movw	r30, r24
    7808:	22 8f       	std	Z+26, r18	; 0x1a
				}
    780a:	0f 90       	pop	r0
    780c:	0f 90       	pop	r0
    780e:	0f 90       	pop	r0
    7810:	df 91       	pop	r29
    7812:	cf 91       	pop	r28
    7814:	08 95       	ret

00007816 <_ZN10helicopter9scheduler9Scheduler20hasCompletedDispatchEv>:
				/**
				 * Returns a flag indicating that the dispatch method has completed. This is for
				 * use by the scheduler to determine if the dispatcher blew a frame.
				 * @return true if the dispatch method completed, false otherwise. 
				 */
				bool hasCompletedDispatch()
    7816:	cf 93       	push	r28
    7818:	df 93       	push	r29
    781a:	1f 92       	push	r1
    781c:	1f 92       	push	r1
    781e:	cd b7       	in	r28, 0x3d	; 61
    7820:	de b7       	in	r29, 0x3e	; 62
    7822:	9a 83       	std	Y+2, r25	; 0x02
    7824:	89 83       	std	Y+1, r24	; 0x01
				{
					return completedDispatch;
    7826:	89 81       	ldd	r24, Y+1	; 0x01
    7828:	9a 81       	ldd	r25, Y+2	; 0x02
    782a:	fc 01       	movw	r30, r24
    782c:	83 8d       	ldd	r24, Z+27	; 0x1b
				}
    782e:	0f 90       	pop	r0
    7830:	0f 90       	pop	r0
    7832:	df 91       	pop	r29
    7834:	cf 91       	pop	r28
    7836:	08 95       	ret

00007838 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    7838:	ef 92       	push	r14
    783a:	ff 92       	push	r15
    783c:	0f 93       	push	r16
    783e:	1f 93       	push	r17
    7840:	cf 93       	push	r28
    7842:	df 93       	push	r29
    7844:	cd b7       	in	r28, 0x3d	; 61
    7846:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    7848:	80 91 aa 02 	lds	r24, 0x02AA
    784c:	90 91 ab 02 	lds	r25, 0x02AB
    7850:	00 97       	sbiw	r24, 0x00	; 0
    7852:	a1 f4       	brne	.+40     	; 0x787c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x44>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    7854:	8c e1       	ldi	r24, 0x1C	; 28
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	0e 94 88 4a 	call	0x9510	; 0x9510 <_Znwj>
    785c:	7c 01       	movw	r14, r24
    785e:	06 e4       	ldi	r16, 0x46	; 70
    7860:	10 e0       	ldi	r17, 0x00	; 0
    7862:	20 e4       	ldi	r18, 0x40	; 64
    7864:	30 e0       	ldi	r19, 0x00	; 0
    7866:	40 e0       	ldi	r20, 0x00	; 0
    7868:	54 e2       	ldi	r21, 0x24	; 36
    786a:	64 ef       	ldi	r22, 0xF4	; 244
    786c:	70 e0       	ldi	r23, 0x00	; 0
    786e:	c7 01       	movw	r24, r14
    7870:	0e 94 49 3c 	call	0x7892	; 0x7892 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    7874:	f0 92 ab 02 	sts	0x02AB, r15
    7878:	e0 92 aa 02 	sts	0x02AA, r14
	}

	return scheduler;
    787c:	80 91 aa 02 	lds	r24, 0x02AA
    7880:	90 91 ab 02 	lds	r25, 0x02AB
}
    7884:	df 91       	pop	r29
    7886:	cf 91       	pop	r28
    7888:	1f 91       	pop	r17
    788a:	0f 91       	pop	r16
    788c:	ff 90       	pop	r15
    788e:	ef 90       	pop	r14
    7890:	08 95       	ret

00007892 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    7892:	0f 93       	push	r16
    7894:	1f 93       	push	r17
    7896:	cf 93       	push	r28
    7898:	df 93       	push	r29
    789a:	cd b7       	in	r28, 0x3d	; 61
    789c:	de b7       	in	r29, 0x3e	; 62
    789e:	2a 97       	sbiw	r28, 0x0a	; 10
    78a0:	0f b6       	in	r0, 0x3f	; 63
    78a2:	f8 94       	cli
    78a4:	de bf       	out	0x3e, r29	; 62
    78a6:	0f be       	out	0x3f, r0	; 63
    78a8:	cd bf       	out	0x3d, r28	; 61
    78aa:	9a 83       	std	Y+2, r25	; 0x02
    78ac:	89 83       	std	Y+1, r24	; 0x01
    78ae:	4b 83       	std	Y+3, r20	; 0x03
    78b0:	5c 83       	std	Y+4, r21	; 0x04
    78b2:	6d 83       	std	Y+5, r22	; 0x05
    78b4:	7e 83       	std	Y+6, r23	; 0x06
    78b6:	38 87       	std	Y+8, r19	; 0x08
    78b8:	2f 83       	std	Y+7, r18	; 0x07
    78ba:	1a 87       	std	Y+10, r17	; 0x0a
    78bc:	09 87       	std	Y+9, r16	; 0x09
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    78be:	8f 81       	ldd	r24, Y+7	; 0x07
    78c0:	98 85       	ldd	r25, Y+8	; 0x08
    78c2:	9c 01       	movw	r18, r24
    78c4:	44 27       	eor	r20, r20
    78c6:	37 fd       	sbrc	r19, 7
    78c8:	40 95       	com	r20
    78ca:	54 2f       	mov	r21, r20
    78cc:	8b 81       	ldd	r24, Y+3	; 0x03
    78ce:	9c 81       	ldd	r25, Y+4	; 0x04
    78d0:	ad 81       	ldd	r26, Y+5	; 0x05
    78d2:	be 81       	ldd	r27, Y+6	; 0x06
    78d4:	bc 01       	movw	r22, r24
    78d6:	cd 01       	movw	r24, r26
    78d8:	0e 94 40 58 	call	0xb080	; 0xb080 <__udivmodsi4>
    78dc:	da 01       	movw	r26, r20
    78de:	c9 01       	movw	r24, r18
    78e0:	29 85       	ldd	r18, Y+9	; 0x09
    78e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    78e4:	44 27       	eor	r20, r20
    78e6:	37 fd       	sbrc	r19, 7
    78e8:	40 95       	com	r20
    78ea:	54 2f       	mov	r21, r20
    78ec:	bc 01       	movw	r22, r24
    78ee:	cd 01       	movw	r24, r26
    78f0:	0e 94 40 58 	call	0xb080	; 0xb080 <__udivmodsi4>
    78f4:	da 01       	movw	r26, r20
    78f6:	c9 01       	movw	r24, r18
    78f8:	9c 01       	movw	r18, r24
    78fa:	89 81       	ldd	r24, Y+1	; 0x01
    78fc:	9a 81       	ldd	r25, Y+2	; 0x02
    78fe:	fc 01       	movw	r30, r24
    7900:	37 8b       	std	Z+23, r19	; 0x17
    7902:	26 8b       	std	Z+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    7904:	89 81       	ldd	r24, Y+1	; 0x01
    7906:	9a 81       	ldd	r25, Y+2	; 0x02
    7908:	fc 01       	movw	r30, r24
    790a:	26 89       	ldd	r18, Z+22	; 0x16
    790c:	37 89       	ldd	r19, Z+23	; 0x17
    790e:	89 81       	ldd	r24, Y+1	; 0x01
    7910:	9a 81       	ldd	r25, Y+2	; 0x02
    7912:	fc 01       	movw	r30, r24
    7914:	37 8b       	std	Z+23, r19	; 0x17
    7916:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescaler;
    7918:	89 81       	ldd	r24, Y+1	; 0x01
    791a:	9a 81       	ldd	r25, Y+2	; 0x02
    791c:	2f 81       	ldd	r18, Y+7	; 0x07
    791e:	38 85       	ldd	r19, Y+8	; 0x08
    7920:	fc 01       	movw	r30, r24
    7922:	31 8f       	std	Z+25, r19	; 0x19
    7924:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    7926:	89 81       	ldd	r24, Y+1	; 0x01
    7928:	9a 81       	ldd	r25, Y+2	; 0x02
    792a:	fc 01       	movw	r30, r24
    792c:	15 8a       	std	Z+21, r1	; 0x15
    792e:	14 8a       	std	Z+20, r1	; 0x14
	
	blowFrameDetected = false;
    7930:	89 81       	ldd	r24, Y+1	; 0x01
    7932:	9a 81       	ldd	r25, Y+2	; 0x02
    7934:	fc 01       	movw	r30, r24
    7936:	12 8e       	std	Z+26, r1	; 0x1a
	
	completedDispatch = true;
    7938:	89 81       	ldd	r24, Y+1	; 0x01
    793a:	9a 81       	ldd	r25, Y+2	; 0x02
    793c:	21 e0       	ldi	r18, 0x01	; 1
    793e:	fc 01       	movw	r30, r24
    7940:	23 8f       	std	Z+27, r18	; 0x1b
}
    7942:	2a 96       	adiw	r28, 0x0a	; 10
    7944:	0f b6       	in	r0, 0x3f	; 63
    7946:	f8 94       	cli
    7948:	de bf       	out	0x3e, r29	; 62
    794a:	0f be       	out	0x3f, r0	; 63
    794c:	cd bf       	out	0x3d, r28	; 61
    794e:	df 91       	pop	r29
    7950:	cf 91       	pop	r28
    7952:	1f 91       	pop	r17
    7954:	0f 91       	pop	r16
    7956:	08 95       	ret

00007958 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
    7958:	cf 93       	push	r28
    795a:	df 93       	push	r29
    795c:	00 d0       	rcall	.+0      	; 0x795e <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    795e:	1f 92       	push	r1
    7960:	cd b7       	in	r28, 0x3d	; 61
    7962:	de b7       	in	r29, 0x3e	; 62
    7964:	9a 83       	std	Y+2, r25	; 0x02
    7966:	89 83       	std	Y+1, r24	; 0x01
    7968:	7c 83       	std	Y+4, r23	; 0x04
    796a:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    796c:	89 81       	ldd	r24, Y+1	; 0x01
    796e:	9a 81       	ldd	r25, Y+2	; 0x02
    7970:	fc 01       	movw	r30, r24
    7972:	84 89       	ldd	r24, Z+20	; 0x14
    7974:	95 89       	ldd	r25, Z+21	; 0x15
    7976:	8a 30       	cpi	r24, 0x0A	; 10
    7978:	91 05       	cpc	r25, r1
    797a:	04 f5       	brge	.+64     	; 0x79bc <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    797c:	89 81       	ldd	r24, Y+1	; 0x01
    797e:	9a 81       	ldd	r25, Y+2	; 0x02
    7980:	fc 01       	movw	r30, r24
    7982:	84 89       	ldd	r24, Z+20	; 0x14
    7984:	95 89       	ldd	r25, Z+21	; 0x15
    7986:	29 81       	ldd	r18, Y+1	; 0x01
    7988:	3a 81       	ldd	r19, Y+2	; 0x02
    798a:	88 0f       	add	r24, r24
    798c:	99 1f       	adc	r25, r25
    798e:	82 0f       	add	r24, r18
    7990:	93 1f       	adc	r25, r19
    7992:	2b 81       	ldd	r18, Y+3	; 0x03
    7994:	3c 81       	ldd	r19, Y+4	; 0x04
    7996:	fc 01       	movw	r30, r24
    7998:	31 83       	std	Z+1, r19	; 0x01
    799a:	20 83       	st	Z, r18
		numOfTasks++;
    799c:	89 81       	ldd	r24, Y+1	; 0x01
    799e:	9a 81       	ldd	r25, Y+2	; 0x02
    79a0:	fc 01       	movw	r30, r24
    79a2:	84 89       	ldd	r24, Z+20	; 0x14
    79a4:	95 89       	ldd	r25, Z+21	; 0x15
    79a6:	9c 01       	movw	r18, r24
    79a8:	2f 5f       	subi	r18, 0xFF	; 255
    79aa:	3f 4f       	sbci	r19, 0xFF	; 255
    79ac:	89 81       	ldd	r24, Y+1	; 0x01
    79ae:	9a 81       	ldd	r25, Y+2	; 0x02
    79b0:	fc 01       	movw	r30, r24
    79b2:	35 8b       	std	Z+21, r19	; 0x15
    79b4:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    79b6:	80 e0       	ldi	r24, 0x00	; 0
    79b8:	90 e0       	ldi	r25, 0x00	; 0
    79ba:	02 c0       	rjmp	.+4      	; 0x79c0 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    79bc:	8f ef       	ldi	r24, 0xFF	; 255
    79be:	9f ef       	ldi	r25, 0xFF	; 255
}
    79c0:	0f 90       	pop	r0
    79c2:	0f 90       	pop	r0
    79c4:	0f 90       	pop	r0
    79c6:	0f 90       	pop	r0
    79c8:	df 91       	pop	r29
    79ca:	cf 91       	pop	r28
    79cc:	08 95       	ret

000079ce <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    79ce:	cf 93       	push	r28
    79d0:	df 93       	push	r29
    79d2:	00 d0       	rcall	.+0      	; 0x79d4 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    79d4:	1f 92       	push	r1
    79d6:	cd b7       	in	r28, 0x3d	; 61
    79d8:	de b7       	in	r29, 0x3e	; 62
    79da:	9c 83       	std	Y+4, r25	; 0x04
    79dc:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    79de:	1a 82       	std	Y+2, r1	; 0x02
    79e0:	19 82       	std	Y+1, r1	; 0x01
    79e2:	24 c0       	rjmp	.+72     	; 0x7a2c <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    79e4:	2b 81       	ldd	r18, Y+3	; 0x03
    79e6:	3c 81       	ldd	r19, Y+4	; 0x04
    79e8:	89 81       	ldd	r24, Y+1	; 0x01
    79ea:	9a 81       	ldd	r25, Y+2	; 0x02
    79ec:	88 0f       	add	r24, r24
    79ee:	99 1f       	adc	r25, r25
    79f0:	82 0f       	add	r24, r18
    79f2:	93 1f       	adc	r25, r19
    79f4:	fc 01       	movw	r30, r24
    79f6:	80 81       	ld	r24, Z
    79f8:	91 81       	ldd	r25, Z+1	; 0x01
    79fa:	fc 01       	movw	r30, r24
    79fc:	80 81       	ld	r24, Z
    79fe:	91 81       	ldd	r25, Z+1	; 0x01
    7a00:	06 96       	adiw	r24, 0x06	; 6
    7a02:	fc 01       	movw	r30, r24
    7a04:	20 81       	ld	r18, Z
    7a06:	31 81       	ldd	r19, Z+1	; 0x01
    7a08:	4b 81       	ldd	r20, Y+3	; 0x03
    7a0a:	5c 81       	ldd	r21, Y+4	; 0x04
    7a0c:	89 81       	ldd	r24, Y+1	; 0x01
    7a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    7a10:	88 0f       	add	r24, r24
    7a12:	99 1f       	adc	r25, r25
    7a14:	84 0f       	add	r24, r20
    7a16:	95 1f       	adc	r25, r21
    7a18:	fc 01       	movw	r30, r24
    7a1a:	80 81       	ld	r24, Z
    7a1c:	91 81       	ldd	r25, Z+1	; 0x01
    7a1e:	f9 01       	movw	r30, r18
    7a20:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    7a22:	89 81       	ldd	r24, Y+1	; 0x01
    7a24:	9a 81       	ldd	r25, Y+2	; 0x02
    7a26:	01 96       	adiw	r24, 0x01	; 1
    7a28:	9a 83       	std	Y+2, r25	; 0x02
    7a2a:	89 83       	std	Y+1, r24	; 0x01
    7a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    7a30:	fc 01       	movw	r30, r24
    7a32:	24 89       	ldd	r18, Z+20	; 0x14
    7a34:	35 89       	ldd	r19, Z+21	; 0x15
    7a36:	41 e0       	ldi	r20, 0x01	; 1
    7a38:	89 81       	ldd	r24, Y+1	; 0x01
    7a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    7a3c:	82 17       	cp	r24, r18
    7a3e:	93 07       	cpc	r25, r19
    7a40:	0c f0       	brlt	.+2      	; 0x7a44 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    7a42:	40 e0       	ldi	r20, 0x00	; 0
    7a44:	44 23       	and	r20, r20
    7a46:	71 f6       	brne	.-100    	; 0x79e4 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    7a48:	88 e8       	ldi	r24, 0x88	; 136
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    7a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    7a50:	f9 01       	movw	r30, r18
    7a52:	26 89       	ldd	r18, Z+22	; 0x16
    7a54:	37 89       	ldd	r19, Z+23	; 0x17
    7a56:	fc 01       	movw	r30, r24
    7a58:	31 83       	std	Z+1, r19	; 0x01
    7a5a:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    7a5c:	81 e8       	ldi	r24, 0x81	; 129
    7a5e:	90 e0       	ldi	r25, 0x00	; 0
    7a60:	21 e8       	ldi	r18, 0x81	; 129
    7a62:	30 e0       	ldi	r19, 0x00	; 0
    7a64:	f9 01       	movw	r30, r18
    7a66:	20 81       	ld	r18, Z
    7a68:	28 60       	ori	r18, 0x08	; 8
    7a6a:	fc 01       	movw	r30, r24
    7a6c:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    7a6e:	8f e6       	ldi	r24, 0x6F	; 111
    7a70:	90 e0       	ldi	r25, 0x00	; 0
    7a72:	2f e6       	ldi	r18, 0x6F	; 111
    7a74:	30 e0       	ldi	r19, 0x00	; 0
    7a76:	f9 01       	movw	r30, r18
    7a78:	20 81       	ld	r18, Z
    7a7a:	22 60       	ori	r18, 0x02	; 2
    7a7c:	fc 01       	movw	r30, r24
    7a7e:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    7a80:	78 94       	sei
}
    7a82:	0f 90       	pop	r0
    7a84:	0f 90       	pop	r0
    7a86:	0f 90       	pop	r0
    7a88:	0f 90       	pop	r0
    7a8a:	df 91       	pop	r29
    7a8c:	cf 91       	pop	r28
    7a8e:	08 95       	ret

00007a90 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    7a90:	cf 93       	push	r28
    7a92:	df 93       	push	r29
    7a94:	00 d0       	rcall	.+0      	; 0x7a96 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    7a96:	00 d0       	rcall	.+0      	; 0x7a98 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    7a98:	cd b7       	in	r28, 0x3d	; 61
    7a9a:	de b7       	in	r29, 0x3e	; 62
    7a9c:	9e 83       	std	Y+6, r25	; 0x06
    7a9e:	8d 83       	std	Y+5, r24	; 0x05
	completedDispatch = false;
    7aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    7aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    7aa4:	fc 01       	movw	r30, r24
    7aa6:	13 8e       	std	Z+27, r1	; 0x1b
	blowFrameDetected = false;
    7aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    7aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    7aac:	fc 01       	movw	r30, r24
    7aae:	12 8e       	std	Z+26, r1	; 0x1a
	
	Task *task = NULL;
    7ab0:	1c 82       	std	Y+4, r1	; 0x04
    7ab2:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    7ab4:	1a 82       	std	Y+2, r1	; 0x02
    7ab6:	19 82       	std	Y+1, r1	; 0x01
    7ab8:	2a c0       	rjmp	.+84     	; 0x7b0e <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x7e>
	{
		task = tasks[i];
    7aba:	2d 81       	ldd	r18, Y+5	; 0x05
    7abc:	3e 81       	ldd	r19, Y+6	; 0x06
    7abe:	89 81       	ldd	r24, Y+1	; 0x01
    7ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    7ac2:	88 0f       	add	r24, r24
    7ac4:	99 1f       	adc	r25, r25
    7ac6:	82 0f       	add	r24, r18
    7ac8:	93 1f       	adc	r25, r19
    7aca:	fc 01       	movw	r30, r24
    7acc:	80 81       	ld	r24, Z
    7ace:	91 81       	ldd	r25, Z+1	; 0x01
    7ad0:	9c 83       	std	Y+4, r25	; 0x04
    7ad2:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    7ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    7ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    7ad8:	0e 94 99 3b 	call	0x7732	; 0x7732 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    7adc:	88 23       	and	r24, r24
    7ade:	91 f0       	breq	.+36     	; 0x7b04 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x74>
		{
			task->setIsReadyToRun(false);
    7ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    7ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    7ae4:	60 e0       	ldi	r22, 0x00	; 0
    7ae6:	0e 94 aa 3b 	call	0x7754	; 0x7754 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    7aea:	8b 81       	ldd	r24, Y+3	; 0x03
    7aec:	9c 81       	ldd	r25, Y+4	; 0x04
    7aee:	fc 01       	movw	r30, r24
    7af0:	80 81       	ld	r24, Z
    7af2:	91 81       	ldd	r25, Z+1	; 0x01
    7af4:	08 96       	adiw	r24, 0x08	; 8
    7af6:	fc 01       	movw	r30, r24
    7af8:	20 81       	ld	r18, Z
    7afa:	31 81       	ldd	r19, Z+1	; 0x01
    7afc:	8b 81       	ldd	r24, Y+3	; 0x03
    7afe:	9c 81       	ldd	r25, Y+4	; 0x04
    7b00:	f9 01       	movw	r30, r18
    7b02:	19 95       	eicall
	completedDispatch = false;
	blowFrameDetected = false;
	
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    7b04:	89 81       	ldd	r24, Y+1	; 0x01
    7b06:	9a 81       	ldd	r25, Y+2	; 0x02
    7b08:	01 96       	adiw	r24, 0x01	; 1
    7b0a:	9a 83       	std	Y+2, r25	; 0x02
    7b0c:	89 83       	std	Y+1, r24	; 0x01
    7b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    7b10:	9e 81       	ldd	r25, Y+6	; 0x06
    7b12:	fc 01       	movw	r30, r24
    7b14:	24 89       	ldd	r18, Z+20	; 0x14
    7b16:	35 89       	ldd	r19, Z+21	; 0x15
    7b18:	41 e0       	ldi	r20, 0x01	; 1
    7b1a:	89 81       	ldd	r24, Y+1	; 0x01
    7b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    7b1e:	82 17       	cp	r24, r18
    7b20:	93 07       	cpc	r25, r19
    7b22:	0c f0       	brlt	.+2      	; 0x7b26 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x96>
    7b24:	40 e0       	ldi	r20, 0x00	; 0
    7b26:	44 23       	and	r20, r20
    7b28:	41 f6       	brne	.-112    	; 0x7aba <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x2a>
	/*if ((TIFR1 & (1<<OCF1A)) != 0)
	{
		model->SystemModel->
	}*/
	
	completedDispatch = true;
    7b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    7b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    7b2e:	21 e0       	ldi	r18, 0x01	; 1
    7b30:	fc 01       	movw	r30, r24
    7b32:	23 8f       	std	Z+27, r18	; 0x1b
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    7b34:	83 e5       	ldi	r24, 0x53	; 83
    7b36:	90 e0       	ldi	r25, 0x00	; 0
    7b38:	23 e5       	ldi	r18, 0x53	; 83
    7b3a:	30 e0       	ldi	r19, 0x00	; 0
    7b3c:	f9 01       	movw	r30, r18
    7b3e:	20 81       	ld	r18, Z
    7b40:	21 7f       	andi	r18, 0xF1	; 241
    7b42:	fc 01       	movw	r30, r24
    7b44:	20 83       	st	Z, r18
	sleep_mode();
    7b46:	83 e5       	ldi	r24, 0x53	; 83
    7b48:	90 e0       	ldi	r25, 0x00	; 0
    7b4a:	23 e5       	ldi	r18, 0x53	; 83
    7b4c:	30 e0       	ldi	r19, 0x00	; 0
    7b4e:	f9 01       	movw	r30, r18
    7b50:	20 81       	ld	r18, Z
    7b52:	21 60       	ori	r18, 0x01	; 1
    7b54:	fc 01       	movw	r30, r24
    7b56:	20 83       	st	Z, r18
    7b58:	88 95       	sleep
    7b5a:	83 e5       	ldi	r24, 0x53	; 83
    7b5c:	90 e0       	ldi	r25, 0x00	; 0
    7b5e:	23 e5       	ldi	r18, 0x53	; 83
    7b60:	30 e0       	ldi	r19, 0x00	; 0
    7b62:	f9 01       	movw	r30, r18
    7b64:	20 81       	ld	r18, Z
    7b66:	2e 7f       	andi	r18, 0xFE	; 254
    7b68:	fc 01       	movw	r30, r24
    7b6a:	20 83       	st	Z, r18
}
    7b6c:	26 96       	adiw	r28, 0x06	; 6
    7b6e:	0f b6       	in	r0, 0x3f	; 63
    7b70:	f8 94       	cli
    7b72:	de bf       	out	0x3e, r29	; 62
    7b74:	0f be       	out	0x3f, r0	; 63
    7b76:	cd bf       	out	0x3d, r28	; 61
    7b78:	df 91       	pop	r29
    7b7a:	cf 91       	pop	r28
    7b7c:	08 95       	ret

00007b7e <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    7b7e:	cf 93       	push	r28
    7b80:	df 93       	push	r29
    7b82:	1f 92       	push	r1
    7b84:	1f 92       	push	r1
    7b86:	cd b7       	in	r28, 0x3d	; 61
    7b88:	de b7       	in	r29, 0x3e	; 62
    7b8a:	9a 83       	std	Y+2, r25	; 0x02
    7b8c:	89 83       	std	Y+1, r24	; 0x01
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    7b8e:	89 81       	ldd	r24, Y+1	; 0x01
    7b90:	9a 81       	ldd	r25, Y+2	; 0x02
    7b92:	fc 01       	movw	r30, r24
    7b94:	80 8d       	ldd	r24, Z+24	; 0x18
    7b96:	91 8d       	ldd	r25, Z+25	; 0x19
    7b98:	80 34       	cpi	r24, 0x40	; 64
    7b9a:	91 05       	cpc	r25, r1
    7b9c:	39 f1       	breq	.+78     	; 0x7bec <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    7b9e:	81 34       	cpi	r24, 0x41	; 65
    7ba0:	91 05       	cpc	r25, r1
    7ba2:	3c f4       	brge	.+14     	; 0x7bb2 <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    7ba4:	81 30       	cpi	r24, 0x01	; 1
    7ba6:	91 05       	cpc	r25, r1
    7ba8:	69 f0       	breq	.+26     	; 0x7bc4 <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    7baa:	88 30       	cpi	r24, 0x08	; 8
    7bac:	91 05       	cpc	r25, r1
    7bae:	a1 f0       	breq	.+40     	; 0x7bd8 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    7bb0:	3b c0       	rjmp	.+118    	; 0x7c28 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    7bb2:	81 15       	cp	r24, r1
    7bb4:	f1 e0       	ldi	r31, 0x01	; 1
    7bb6:	9f 07       	cpc	r25, r31
    7bb8:	19 f1       	breq	.+70     	; 0x7c00 <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    7bba:	81 15       	cp	r24, r1
    7bbc:	24 e0       	ldi	r18, 0x04	; 4
    7bbe:	92 07       	cpc	r25, r18
    7bc0:	49 f1       	breq	.+82     	; 0x7c14 <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    7bc2:	32 c0       	rjmp	.+100    	; 0x7c28 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    7bc4:	81 e8       	ldi	r24, 0x81	; 129
    7bc6:	90 e0       	ldi	r25, 0x00	; 0
    7bc8:	21 e8       	ldi	r18, 0x81	; 129
    7bca:	30 e0       	ldi	r19, 0x00	; 0
    7bcc:	f9 01       	movw	r30, r18
    7bce:	20 81       	ld	r18, Z
    7bd0:	21 60       	ori	r18, 0x01	; 1
    7bd2:	fc 01       	movw	r30, r24
    7bd4:	20 83       	st	Z, r18
			break;
    7bd6:	31 c0       	rjmp	.+98     	; 0x7c3a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    7bd8:	81 e8       	ldi	r24, 0x81	; 129
    7bda:	90 e0       	ldi	r25, 0x00	; 0
    7bdc:	21 e8       	ldi	r18, 0x81	; 129
    7bde:	30 e0       	ldi	r19, 0x00	; 0
    7be0:	f9 01       	movw	r30, r18
    7be2:	20 81       	ld	r18, Z
    7be4:	22 60       	ori	r18, 0x02	; 2
    7be6:	fc 01       	movw	r30, r24
    7be8:	20 83       	st	Z, r18
			break;
    7bea:	27 c0       	rjmp	.+78     	; 0x7c3a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    7bec:	81 e8       	ldi	r24, 0x81	; 129
    7bee:	90 e0       	ldi	r25, 0x00	; 0
    7bf0:	21 e8       	ldi	r18, 0x81	; 129
    7bf2:	30 e0       	ldi	r19, 0x00	; 0
    7bf4:	f9 01       	movw	r30, r18
    7bf6:	20 81       	ld	r18, Z
    7bf8:	23 60       	ori	r18, 0x03	; 3
    7bfa:	fc 01       	movw	r30, r24
    7bfc:	20 83       	st	Z, r18
			break;
    7bfe:	1d c0       	rjmp	.+58     	; 0x7c3a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    7c00:	81 e8       	ldi	r24, 0x81	; 129
    7c02:	90 e0       	ldi	r25, 0x00	; 0
    7c04:	21 e8       	ldi	r18, 0x81	; 129
    7c06:	30 e0       	ldi	r19, 0x00	; 0
    7c08:	f9 01       	movw	r30, r18
    7c0a:	20 81       	ld	r18, Z
    7c0c:	24 60       	ori	r18, 0x04	; 4
    7c0e:	fc 01       	movw	r30, r24
    7c10:	20 83       	st	Z, r18
			break;
    7c12:	13 c0       	rjmp	.+38     	; 0x7c3a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    7c14:	81 e8       	ldi	r24, 0x81	; 129
    7c16:	90 e0       	ldi	r25, 0x00	; 0
    7c18:	21 e8       	ldi	r18, 0x81	; 129
    7c1a:	30 e0       	ldi	r19, 0x00	; 0
    7c1c:	f9 01       	movw	r30, r18
    7c1e:	20 81       	ld	r18, Z
    7c20:	25 60       	ori	r18, 0x05	; 5
    7c22:	fc 01       	movw	r30, r24
    7c24:	20 83       	st	Z, r18
			break;
    7c26:	09 c0       	rjmp	.+18     	; 0x7c3a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    7c28:	81 e8       	ldi	r24, 0x81	; 129
    7c2a:	90 e0       	ldi	r25, 0x00	; 0
    7c2c:	21 e8       	ldi	r18, 0x81	; 129
    7c2e:	30 e0       	ldi	r19, 0x00	; 0
    7c30:	f9 01       	movw	r30, r18
    7c32:	20 81       	ld	r18, Z
    7c34:	21 60       	ori	r18, 0x01	; 1
    7c36:	fc 01       	movw	r30, r24
    7c38:	20 83       	st	Z, r18
	}
}
    7c3a:	0f 90       	pop	r0
    7c3c:	0f 90       	pop	r0
    7c3e:	df 91       	pop	r29
    7c40:	cf 91       	pop	r28
    7c42:	08 95       	ret

00007c44 <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    7c44:	1f 92       	push	r1
    7c46:	0f 92       	push	r0
    7c48:	00 90 5f 00 	lds	r0, 0x005F
    7c4c:	0f 92       	push	r0
    7c4e:	11 24       	eor	r1, r1
    7c50:	00 90 5b 00 	lds	r0, 0x005B
    7c54:	0f 92       	push	r0
    7c56:	2f 93       	push	r18
    7c58:	3f 93       	push	r19
    7c5a:	4f 93       	push	r20
    7c5c:	5f 93       	push	r21
    7c5e:	6f 93       	push	r22
    7c60:	7f 93       	push	r23
    7c62:	8f 93       	push	r24
    7c64:	9f 93       	push	r25
    7c66:	af 93       	push	r26
    7c68:	bf 93       	push	r27
    7c6a:	ef 93       	push	r30
    7c6c:	ff 93       	push	r31
    7c6e:	cf 93       	push	r28
    7c70:	df 93       	push	r29
    7c72:	00 d0       	rcall	.+0      	; 0x7c74 <__vector_17+0x30>
    7c74:	00 d0       	rcall	.+0      	; 0x7c76 <__vector_17+0x32>
    7c76:	cd b7       	in	r28, 0x3d	; 61
    7c78:	de b7       	in	r29, 0x3e	; 62
	//TODO do we want to stop interrupts in this method?
	Scheduler *scheduler = Scheduler::getScheduler();
    7c7a:	0e 94 1c 3c 	call	0x7838	; 0x7838 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    7c7e:	9c 83       	std	Y+4, r25	; 0x04
    7c80:	8b 83       	std	Y+3, r24	; 0x03
	
	//Detect if the scheduler blew a frame
	if (!scheduler->hasCompletedDispatch())
    7c82:	8b 81       	ldd	r24, Y+3	; 0x03
    7c84:	9c 81       	ldd	r25, Y+4	; 0x04
    7c86:	0e 94 0b 3c 	call	0x7816	; 0x7816 <_ZN10helicopter9scheduler9Scheduler20hasCompletedDispatchEv>
    7c8a:	98 2f       	mov	r25, r24
    7c8c:	81 e0       	ldi	r24, 0x01	; 1
    7c8e:	89 27       	eor	r24, r25
    7c90:	88 23       	and	r24, r24
    7c92:	29 f0       	breq	.+10     	; 0x7c9e <__vector_17+0x5a>
	{
		scheduler->hasBlownFrame(true);
    7c94:	8b 81       	ldd	r24, Y+3	; 0x03
    7c96:	9c 81       	ldd	r25, Y+4	; 0x04
    7c98:	61 e0       	ldi	r22, 0x01	; 1
    7c9a:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb>
	}
	
	Task *task = NULL;
    7c9e:	1e 82       	std	Y+6, r1	; 0x06
    7ca0:	1d 82       	std	Y+5, r1	; 0x05
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    7ca2:	1a 82       	std	Y+2, r1	; 0x02
    7ca4:	19 82       	std	Y+1, r1	; 0x01
    7ca6:	33 c0       	rjmp	.+102    	; 0x7d0e <__vector_17+0xca>
	{
		task = scheduler->getTasks()[i];
    7ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    7caa:	9c 81       	ldd	r25, Y+4	; 0x04
    7cac:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    7cb0:	9c 01       	movw	r18, r24
    7cb2:	89 81       	ldd	r24, Y+1	; 0x01
    7cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    7cb6:	88 0f       	add	r24, r24
    7cb8:	99 1f       	adc	r25, r25
    7cba:	82 0f       	add	r24, r18
    7cbc:	93 1f       	adc	r25, r19
    7cbe:	fc 01       	movw	r30, r24
    7cc0:	80 81       	ld	r24, Z
    7cc2:	91 81       	ldd	r25, Z+1	; 0x01
    7cc4:	9e 83       	std	Y+6, r25	; 0x06
    7cc6:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    7cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    7cca:	9e 81       	ldd	r25, Y+6	; 0x06
    7ccc:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <_ZN10helicopter5tasks4Task8getDelayEv>
    7cd0:	21 e0       	ldi	r18, 0x01	; 1
    7cd2:	00 97       	sbiw	r24, 0x00	; 0
    7cd4:	09 f0       	breq	.+2      	; 0x7cd8 <__vector_17+0x94>
    7cd6:	20 e0       	ldi	r18, 0x00	; 0
    7cd8:	22 23       	and	r18, r18
    7cda:	81 f0       	breq	.+32     	; 0x7cfc <__vector_17+0xb8>
		{
			//Mark the task as ready to run
			task->setIsReadyToRun(true);
    7cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    7cde:	9e 81       	ldd	r25, Y+6	; 0x06
    7ce0:	61 e0       	ldi	r22, 0x01	; 1
    7ce2:	0e 94 aa 3b 	call	0x7754	; 0x7754 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    7ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    7ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    7cea:	0e 94 6f 3b 	call	0x76de	; 0x76de <_ZN10helicopter5tasks4Task9getPeriodEv>
    7cee:	9c 01       	movw	r18, r24
    7cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    7cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    7cf4:	b9 01       	movw	r22, r18
    7cf6:	0e 94 81 3b 	call	0x7702	; 0x7702 <_ZN10helicopter5tasks4Task8setDelayEi>
    7cfa:	04 c0       	rjmp	.+8      	; 0x7d04 <__vector_17+0xc0>
		}else
		{
			task->reduceDelay();
    7cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    7cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    7d00:	0e 94 bd 3b 	call	0x777a	; 0x777a <_ZN10helicopter5tasks4Task11reduceDelayEv>
	
	Task *task = NULL;
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    7d04:	89 81       	ldd	r24, Y+1	; 0x01
    7d06:	9a 81       	ldd	r25, Y+2	; 0x02
    7d08:	01 96       	adiw	r24, 0x01	; 1
    7d0a:	9a 83       	std	Y+2, r25	; 0x02
    7d0c:	89 83       	std	Y+1, r24	; 0x01
    7d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    7d10:	9c 81       	ldd	r25, Y+4	; 0x04
    7d12:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    7d16:	9c 01       	movw	r18, r24
    7d18:	41 e0       	ldi	r20, 0x01	; 1
    7d1a:	89 81       	ldd	r24, Y+1	; 0x01
    7d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d1e:	82 17       	cp	r24, r18
    7d20:	93 07       	cpc	r25, r19
    7d22:	0c f0       	brlt	.+2      	; 0x7d26 <__vector_17+0xe2>
    7d24:	40 e0       	ldi	r20, 0x00	; 0
    7d26:	44 23       	and	r20, r20
    7d28:	09 f0       	breq	.+2      	; 0x7d2c <__vector_17+0xe8>
    7d2a:	be cf       	rjmp	.-132    	; 0x7ca8 <__vector_17+0x64>
		}else
		{
			task->reduceDelay();
		}
	}
}
    7d2c:	26 96       	adiw	r28, 0x06	; 6
    7d2e:	0f b6       	in	r0, 0x3f	; 63
    7d30:	f8 94       	cli
    7d32:	de bf       	out	0x3e, r29	; 62
    7d34:	0f be       	out	0x3f, r0	; 63
    7d36:	cd bf       	out	0x3d, r28	; 61
    7d38:	df 91       	pop	r29
    7d3a:	cf 91       	pop	r28
    7d3c:	ff 91       	pop	r31
    7d3e:	ef 91       	pop	r30
    7d40:	bf 91       	pop	r27
    7d42:	af 91       	pop	r26
    7d44:	9f 91       	pop	r25
    7d46:	8f 91       	pop	r24
    7d48:	7f 91       	pop	r23
    7d4a:	6f 91       	pop	r22
    7d4c:	5f 91       	pop	r21
    7d4e:	4f 91       	pop	r20
    7d50:	3f 91       	pop	r19
    7d52:	2f 91       	pop	r18
    7d54:	0f 90       	pop	r0
    7d56:	00 92 5b 00 	sts	0x005B, r0
    7d5a:	0f 90       	pop	r0
    7d5c:	00 92 5f 00 	sts	0x005F, r0
    7d60:	0f 90       	pop	r0
    7d62:	1f 90       	pop	r1
    7d64:	18 95       	reti

00007d66 <_ZN10helicopter7sensors9IMUSensor4initEv>:
#include "IMUSensor.h"

using namespace helicopter::sensors;

void IMUSensor::init()
{
    7d66:	0f 93       	push	r16
    7d68:	1f 93       	push	r17
    7d6a:	cf 93       	push	r28
    7d6c:	df 93       	push	r29
    7d6e:	cd b7       	in	r28, 0x3d	; 61
    7d70:	de b7       	in	r29, 0x3e	; 62
    7d72:	6e 97       	sbiw	r28, 0x1e	; 30
    7d74:	0f b6       	in	r0, 0x3f	; 63
    7d76:	f8 94       	cli
    7d78:	de bf       	out	0x3e, r29	; 62
    7d7a:	0f be       	out	0x3f, r0	; 63
    7d7c:	cd bf       	out	0x3d, r28	; 61
    7d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    7d80:	8d 8f       	std	Y+29, r24	; 0x1d
	
	//Reset the sensor in case of a soft reset the sensor
	//might still have had power and thus not reset.
	spiDriver->beginTransaction();
    7d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7d86:	fc 01       	movw	r30, r24
    7d88:	84 a1       	ldd	r24, Z+36	; 0x24
    7d8a:	95 a1       	ldd	r25, Z+37	; 0x25
    7d8c:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>
	spiDriver->write(REG_PWR_MGMT_1,BITS_DEVICE_RESET);
    7d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7d92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7d94:	fc 01       	movw	r30, r24
    7d96:	84 a1       	ldd	r24, Z+36	; 0x24
    7d98:	95 a1       	ldd	r25, Z+37	; 0x25
    7d9a:	40 e8       	ldi	r20, 0x80	; 128
    7d9c:	6b e6       	ldi	r22, 0x6B	; 107
    7d9e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>

	//End the transaction. If I don't close and restart a new
	//transaction, accelerometer data doesn't seem to be able to be read.
	spiDriver->endTransaction();
    7da2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7da4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7da6:	fc 01       	movw	r30, r24
    7da8:	84 a1       	ldd	r24, Z+36	; 0x24
    7daa:	95 a1       	ldd	r25, Z+37	; 0x25
    7dac:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>
    7db0:	80 e0       	ldi	r24, 0x00	; 0
    7db2:	90 e0       	ldi	r25, 0x00	; 0
    7db4:	a8 ec       	ldi	r26, 0xC8	; 200
    7db6:	b2 e4       	ldi	r27, 0x42	; 66
    7db8:	89 83       	std	Y+1, r24	; 0x01
    7dba:	9a 83       	std	Y+2, r25	; 0x02
    7dbc:	ab 83       	std	Y+3, r26	; 0x03
    7dbe:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7dc0:	20 e0       	ldi	r18, 0x00	; 0
    7dc2:	30 e0       	ldi	r19, 0x00	; 0
    7dc4:	4a e7       	ldi	r20, 0x7A	; 122
    7dc6:	53 e4       	ldi	r21, 0x43	; 67
    7dc8:	69 81       	ldd	r22, Y+1	; 0x01
    7dca:	7a 81       	ldd	r23, Y+2	; 0x02
    7dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    7dce:	9c 81       	ldd	r25, Y+4	; 0x04
    7dd0:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    7dd4:	dc 01       	movw	r26, r24
    7dd6:	cb 01       	movw	r24, r22
    7dd8:	8d 83       	std	Y+5, r24	; 0x05
    7dda:	9e 83       	std	Y+6, r25	; 0x06
    7ddc:	af 83       	std	Y+7, r26	; 0x07
    7dde:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    7de0:	20 e0       	ldi	r18, 0x00	; 0
    7de2:	30 e0       	ldi	r19, 0x00	; 0
    7de4:	40 e8       	ldi	r20, 0x80	; 128
    7de6:	5f e3       	ldi	r21, 0x3F	; 63
    7de8:	6d 81       	ldd	r22, Y+5	; 0x05
    7dea:	7e 81       	ldd	r23, Y+6	; 0x06
    7dec:	8f 81       	ldd	r24, Y+7	; 0x07
    7dee:	98 85       	ldd	r25, Y+8	; 0x08
    7df0:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    7df4:	88 23       	and	r24, r24
    7df6:	2c f4       	brge	.+10     	; 0x7e02 <_ZN10helicopter7sensors9IMUSensor4initEv+0x9c>
		__ticks = 1;
    7df8:	81 e0       	ldi	r24, 0x01	; 1
    7dfa:	90 e0       	ldi	r25, 0x00	; 0
    7dfc:	9a 87       	std	Y+10, r25	; 0x0a
    7dfe:	89 87       	std	Y+9, r24	; 0x09
    7e00:	46 c0       	rjmp	.+140    	; 0x7e8e <_ZN10helicopter7sensors9IMUSensor4initEv+0x128>
	else if (__tmp > 65535)
    7e02:	20 e0       	ldi	r18, 0x00	; 0
    7e04:	3f ef       	ldi	r19, 0xFF	; 255
    7e06:	4f e7       	ldi	r20, 0x7F	; 127
    7e08:	57 e4       	ldi	r21, 0x47	; 71
    7e0a:	6d 81       	ldd	r22, Y+5	; 0x05
    7e0c:	7e 81       	ldd	r23, Y+6	; 0x06
    7e0e:	8f 81       	ldd	r24, Y+7	; 0x07
    7e10:	98 85       	ldd	r25, Y+8	; 0x08
    7e12:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    7e16:	18 16       	cp	r1, r24
    7e18:	84 f5       	brge	.+96     	; 0x7e7a <_ZN10helicopter7sensors9IMUSensor4initEv+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e1a:	20 e0       	ldi	r18, 0x00	; 0
    7e1c:	30 e0       	ldi	r19, 0x00	; 0
    7e1e:	40 e2       	ldi	r20, 0x20	; 32
    7e20:	51 e4       	ldi	r21, 0x41	; 65
    7e22:	69 81       	ldd	r22, Y+1	; 0x01
    7e24:	7a 81       	ldd	r23, Y+2	; 0x02
    7e26:	8b 81       	ldd	r24, Y+3	; 0x03
    7e28:	9c 81       	ldd	r25, Y+4	; 0x04
    7e2a:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    7e2e:	dc 01       	movw	r26, r24
    7e30:	cb 01       	movw	r24, r22
    7e32:	bc 01       	movw	r22, r24
    7e34:	cd 01       	movw	r24, r26
    7e36:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    7e3a:	dc 01       	movw	r26, r24
    7e3c:	cb 01       	movw	r24, r22
    7e3e:	9a 87       	std	Y+10, r25	; 0x0a
    7e40:	89 87       	std	Y+9, r24	; 0x09
    7e42:	12 c0       	rjmp	.+36     	; 0x7e68 <_ZN10helicopter7sensors9IMUSensor4initEv+0x102>
    7e44:	89 e1       	ldi	r24, 0x19	; 25
    7e46:	90 e0       	ldi	r25, 0x00	; 0
    7e48:	9c 87       	std	Y+12, r25	; 0x0c
    7e4a:	8b 87       	std	Y+11, r24	; 0x0b
    7e4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    7e4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7e50:	8c 01       	movw	r16, r24
    7e52:	c8 01       	movw	r24, r16
    7e54:	01 97       	sbiw	r24, 0x01	; 1
    7e56:	f1 f7       	brne	.-4      	; 0x7e54 <_ZN10helicopter7sensors9IMUSensor4initEv+0xee>
    7e58:	8c 01       	movw	r16, r24
    7e5a:	1c 87       	std	Y+12, r17	; 0x0c
    7e5c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e5e:	89 85       	ldd	r24, Y+9	; 0x09
    7e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e62:	01 97       	sbiw	r24, 0x01	; 1
    7e64:	9a 87       	std	Y+10, r25	; 0x0a
    7e66:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e68:	21 e0       	ldi	r18, 0x01	; 1
    7e6a:	89 85       	ldd	r24, Y+9	; 0x09
    7e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e6e:	00 97       	sbiw	r24, 0x00	; 0
    7e70:	09 f4       	brne	.+2      	; 0x7e74 <_ZN10helicopter7sensors9IMUSensor4initEv+0x10e>
    7e72:	20 e0       	ldi	r18, 0x00	; 0
    7e74:	22 23       	and	r18, r18
    7e76:	31 f7       	brne	.-52     	; 0x7e44 <_ZN10helicopter7sensors9IMUSensor4initEv+0xde>
    7e78:	17 c0       	rjmp	.+46     	; 0x7ea8 <_ZN10helicopter7sensors9IMUSensor4initEv+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e7a:	6d 81       	ldd	r22, Y+5	; 0x05
    7e7c:	7e 81       	ldd	r23, Y+6	; 0x06
    7e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    7e80:	98 85       	ldd	r25, Y+8	; 0x08
    7e82:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    7e86:	dc 01       	movw	r26, r24
    7e88:	cb 01       	movw	r24, r22
    7e8a:	9a 87       	std	Y+10, r25	; 0x0a
    7e8c:	89 87       	std	Y+9, r24	; 0x09
    7e8e:	89 85       	ldd	r24, Y+9	; 0x09
    7e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e92:	9e 87       	std	Y+14, r25	; 0x0e
    7e94:	8d 87       	std	Y+13, r24	; 0x0d
    7e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    7e9a:	8c 01       	movw	r16, r24
    7e9c:	f8 01       	movw	r30, r16
    7e9e:	31 97       	sbiw	r30, 0x01	; 1
    7ea0:	f1 f7       	brne	.-4      	; 0x7e9e <_ZN10helicopter7sensors9IMUSensor4initEv+0x138>
    7ea2:	8f 01       	movw	r16, r30
    7ea4:	1e 87       	std	Y+14, r17	; 0x0e
    7ea6:	0d 87       	std	Y+13, r16	; 0x0d
	
	//wait for device reset
	_delay_ms(100);

	spiDriver->beginTransaction();
    7ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7eac:	fc 01       	movw	r30, r24
    7eae:	84 a1       	ldd	r24, Z+36	; 0x24
    7eb0:	95 a1       	ldd	r25, Z+37	; 0x25
    7eb2:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>

	//Select Gyro Z as the reference clock. Selecting a gyro clock
	//is recommended in pag 41 of RM-MPU-6000A.pdf for improved stability.
	spiDriver->write(REG_PWR_MGMT_1,BITS_CLKSEL_GYROZ);
    7eb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7eb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7eba:	fc 01       	movw	r30, r24
    7ebc:	84 a1       	ldd	r24, Z+36	; 0x24
    7ebe:	95 a1       	ldd	r25, Z+37	; 0x25
    7ec0:	43 e0       	ldi	r20, 0x03	; 3
    7ec2:	6b e6       	ldi	r22, 0x6B	; 107
    7ec4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>
    7ec8:	80 e0       	ldi	r24, 0x00	; 0
    7eca:	90 e0       	ldi	r25, 0x00	; 0
    7ecc:	a8 ec       	ldi	r26, 0xC8	; 200
    7ece:	b2 e4       	ldi	r27, 0x42	; 66
    7ed0:	8f 87       	std	Y+15, r24	; 0x0f
    7ed2:	98 8b       	std	Y+16, r25	; 0x10
    7ed4:	a9 8b       	std	Y+17, r26	; 0x11
    7ed6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7ed8:	20 e0       	ldi	r18, 0x00	; 0
    7eda:	30 e0       	ldi	r19, 0x00	; 0
    7edc:	4a e7       	ldi	r20, 0x7A	; 122
    7ede:	53 e4       	ldi	r21, 0x43	; 67
    7ee0:	6f 85       	ldd	r22, Y+15	; 0x0f
    7ee2:	78 89       	ldd	r23, Y+16	; 0x10
    7ee4:	89 89       	ldd	r24, Y+17	; 0x11
    7ee6:	9a 89       	ldd	r25, Y+18	; 0x12
    7ee8:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    7eec:	dc 01       	movw	r26, r24
    7eee:	cb 01       	movw	r24, r22
    7ef0:	8b 8b       	std	Y+19, r24	; 0x13
    7ef2:	9c 8b       	std	Y+20, r25	; 0x14
    7ef4:	ad 8b       	std	Y+21, r26	; 0x15
    7ef6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    7ef8:	20 e0       	ldi	r18, 0x00	; 0
    7efa:	30 e0       	ldi	r19, 0x00	; 0
    7efc:	40 e8       	ldi	r20, 0x80	; 128
    7efe:	5f e3       	ldi	r21, 0x3F	; 63
    7f00:	6b 89       	ldd	r22, Y+19	; 0x13
    7f02:	7c 89       	ldd	r23, Y+20	; 0x14
    7f04:	8d 89       	ldd	r24, Y+21	; 0x15
    7f06:	9e 89       	ldd	r25, Y+22	; 0x16
    7f08:	0e 94 30 54 	call	0xa860	; 0xa860 <__cmpsf2>
    7f0c:	88 23       	and	r24, r24
    7f0e:	2c f4       	brge	.+10     	; 0x7f1a <_ZN10helicopter7sensors9IMUSensor4initEv+0x1b4>
		__ticks = 1;
    7f10:	81 e0       	ldi	r24, 0x01	; 1
    7f12:	90 e0       	ldi	r25, 0x00	; 0
    7f14:	98 8f       	std	Y+24, r25	; 0x18
    7f16:	8f 8b       	std	Y+23, r24	; 0x17
    7f18:	46 c0       	rjmp	.+140    	; 0x7fa6 <_ZN10helicopter7sensors9IMUSensor4initEv+0x240>
	else if (__tmp > 65535)
    7f1a:	20 e0       	ldi	r18, 0x00	; 0
    7f1c:	3f ef       	ldi	r19, 0xFF	; 255
    7f1e:	4f e7       	ldi	r20, 0x7F	; 127
    7f20:	57 e4       	ldi	r21, 0x47	; 71
    7f22:	6b 89       	ldd	r22, Y+19	; 0x13
    7f24:	7c 89       	ldd	r23, Y+20	; 0x14
    7f26:	8d 89       	ldd	r24, Y+21	; 0x15
    7f28:	9e 89       	ldd	r25, Y+22	; 0x16
    7f2a:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__gesf2>
    7f2e:	18 16       	cp	r1, r24
    7f30:	84 f5       	brge	.+96     	; 0x7f92 <_ZN10helicopter7sensors9IMUSensor4initEv+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f32:	20 e0       	ldi	r18, 0x00	; 0
    7f34:	30 e0       	ldi	r19, 0x00	; 0
    7f36:	40 e2       	ldi	r20, 0x20	; 32
    7f38:	51 e4       	ldi	r21, 0x41	; 65
    7f3a:	6f 85       	ldd	r22, Y+15	; 0x0f
    7f3c:	78 89       	ldd	r23, Y+16	; 0x10
    7f3e:	89 89       	ldd	r24, Y+17	; 0x11
    7f40:	9a 89       	ldd	r25, Y+18	; 0x12
    7f42:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    7f46:	dc 01       	movw	r26, r24
    7f48:	cb 01       	movw	r24, r22
    7f4a:	bc 01       	movw	r22, r24
    7f4c:	cd 01       	movw	r24, r26
    7f4e:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    7f52:	dc 01       	movw	r26, r24
    7f54:	cb 01       	movw	r24, r22
    7f56:	98 8f       	std	Y+24, r25	; 0x18
    7f58:	8f 8b       	std	Y+23, r24	; 0x17
    7f5a:	12 c0       	rjmp	.+36     	; 0x7f80 <_ZN10helicopter7sensors9IMUSensor4initEv+0x21a>
    7f5c:	89 e1       	ldi	r24, 0x19	; 25
    7f5e:	90 e0       	ldi	r25, 0x00	; 0
    7f60:	9a 8f       	std	Y+26, r25	; 0x1a
    7f62:	89 8f       	std	Y+25, r24	; 0x19
    7f64:	89 8d       	ldd	r24, Y+25	; 0x19
    7f66:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7f68:	8c 01       	movw	r16, r24
    7f6a:	c8 01       	movw	r24, r16
    7f6c:	01 97       	sbiw	r24, 0x01	; 1
    7f6e:	f1 f7       	brne	.-4      	; 0x7f6c <_ZN10helicopter7sensors9IMUSensor4initEv+0x206>
    7f70:	8c 01       	movw	r16, r24
    7f72:	1a 8f       	std	Y+26, r17	; 0x1a
    7f74:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f76:	8f 89       	ldd	r24, Y+23	; 0x17
    7f78:	98 8d       	ldd	r25, Y+24	; 0x18
    7f7a:	01 97       	sbiw	r24, 0x01	; 1
    7f7c:	98 8f       	std	Y+24, r25	; 0x18
    7f7e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f80:	21 e0       	ldi	r18, 0x01	; 1
    7f82:	8f 89       	ldd	r24, Y+23	; 0x17
    7f84:	98 8d       	ldd	r25, Y+24	; 0x18
    7f86:	00 97       	sbiw	r24, 0x00	; 0
    7f88:	09 f4       	brne	.+2      	; 0x7f8c <_ZN10helicopter7sensors9IMUSensor4initEv+0x226>
    7f8a:	20 e0       	ldi	r18, 0x00	; 0
    7f8c:	22 23       	and	r18, r18
    7f8e:	31 f7       	brne	.-52     	; 0x7f5c <_ZN10helicopter7sensors9IMUSensor4initEv+0x1f6>
    7f90:	17 c0       	rjmp	.+46     	; 0x7fc0 <_ZN10helicopter7sensors9IMUSensor4initEv+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f92:	6b 89       	ldd	r22, Y+19	; 0x13
    7f94:	7c 89       	ldd	r23, Y+20	; 0x14
    7f96:	8d 89       	ldd	r24, Y+21	; 0x15
    7f98:	9e 89       	ldd	r25, Y+22	; 0x16
    7f9a:	0e 94 a4 54 	call	0xa948	; 0xa948 <__fixunssfsi>
    7f9e:	dc 01       	movw	r26, r24
    7fa0:	cb 01       	movw	r24, r22
    7fa2:	98 8f       	std	Y+24, r25	; 0x18
    7fa4:	8f 8b       	std	Y+23, r24	; 0x17
    7fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    7fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    7faa:	9c 8f       	std	Y+28, r25	; 0x1c
    7fac:	8b 8f       	std	Y+27, r24	; 0x1b
    7fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7fb2:	8c 01       	movw	r16, r24
    7fb4:	f8 01       	movw	r30, r16
    7fb6:	31 97       	sbiw	r30, 0x01	; 1
    7fb8:	f1 f7       	brne	.-4      	; 0x7fb6 <_ZN10helicopter7sensors9IMUSensor4initEv+0x250>
    7fba:	8f 01       	movw	r16, r30
    7fbc:	1c 8f       	std	Y+28, r17	; 0x1c
    7fbe:	0b 8f       	std	Y+27, r16	; 0x1b
	//takes a long time and reading accelerometer data
	//returns 0 unless this is done.
	_delay_ms(100);

	//Enable SPI Interface / disable i2c.
	spiDriver->write(REG_USER_CTRL,BITS_I2C_IF_DIS);
    7fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7fc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7fc4:	fc 01       	movw	r30, r24
    7fc6:	84 a1       	ldd	r24, Z+36	; 0x24
    7fc8:	95 a1       	ldd	r25, Z+37	; 0x25
    7fca:	40 e1       	ldi	r20, 0x10	; 16
    7fcc:	6a e6       	ldi	r22, 0x6A	; 106
    7fce:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//Set the sampling rate to 1kHz.
	spiDriver->write(REG_SMPLRT_DIV,BITS_SMPLRT_DIV);
    7fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7fd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7fd6:	fc 01       	movw	r30, r24
    7fd8:	84 a1       	ldd	r24, Z+36	; 0x24
    7fda:	95 a1       	ldd	r25, Z+37	; 0x25
    7fdc:	40 e0       	ldi	r20, 0x00	; 0
    7fde:	69 e1       	ldi	r22, 0x19	; 25
    7fe0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//Configures the Digital Low Pass Filter. This is how frequently the sensor readings are updated
	//for accelerometers and gyroscopes.
	spiDriver->write(REG_CONFIG,BITS_DLPF_CFG);
    7fe4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7fe6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7fe8:	fc 01       	movw	r30, r24
    7fea:	84 a1       	ldd	r24, Z+36	; 0x24
    7fec:	95 a1       	ldd	r25, Z+37	; 0x25
    7fee:	42 e0       	ldi	r20, 0x02	; 2
    7ff0:	6a e1       	ldi	r22, 0x1A	; 26
    7ff2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//Configures the sensitivity / scale range of the gyroscope
	spiDriver->write(REG_GYRO_CONFIG,BITS_FS_SEL);
    7ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7ff8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7ffa:	fc 01       	movw	r30, r24
    7ffc:	84 a1       	ldd	r24, Z+36	; 0x24
    7ffe:	95 a1       	ldd	r25, Z+37	; 0x25
    8000:	48 e1       	ldi	r20, 0x18	; 24
    8002:	6b e1       	ldi	r22, 0x1B	; 27
    8004:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//configure the sensitivity / scale range of the accelerometer
	spiDriver->write(REG_ACCEL_CONFIG,BITS_AFS_SEL);
    8008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    800a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    800c:	fc 01       	movw	r30, r24
    800e:	84 a1       	ldd	r24, Z+36	; 0x24
    8010:	95 a1       	ldd	r25, Z+37	; 0x25
    8012:	40 e0       	ldi	r20, 0x00	; 0
    8014:	6c e1       	ldi	r22, 0x1C	; 28
    8016:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	spiDriver->endTransaction();
    801a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    801c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    801e:	fc 01       	movw	r30, r24
    8020:	84 a1       	ldd	r24, Z+36	; 0x24
    8022:	95 a1       	ldd	r25, Z+37	; 0x25
    8024:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>
	
}
    8028:	6e 96       	adiw	r28, 0x1e	; 30
    802a:	0f b6       	in	r0, 0x3f	; 63
    802c:	f8 94       	cli
    802e:	de bf       	out	0x3e, r29	; 62
    8030:	0f be       	out	0x3f, r0	; 63
    8032:	cd bf       	out	0x3d, r28	; 61
    8034:	df 91       	pop	r29
    8036:	cf 91       	pop	r28
    8038:	1f 91       	pop	r17
    803a:	0f 91       	pop	r16
    803c:	08 95       	ret

0000803e <_ZN10helicopter7sensors9IMUSensor10readSensorEv>:

void IMUSensor::readSensor()
{
    803e:	cf 93       	push	r28
    8040:	df 93       	push	r29
    8042:	cd b7       	in	r28, 0x3d	; 61
    8044:	de b7       	in	r29, 0x3e	; 62
    8046:	a6 97       	sbiw	r28, 0x26	; 38
    8048:	0f b6       	in	r0, 0x3f	; 63
    804a:	f8 94       	cli
    804c:	de bf       	out	0x3e, r29	; 62
    804e:	0f be       	out	0x3f, r0	; 63
    8050:	cd bf       	out	0x3d, r28	; 61
    8052:	9e a3       	std	Y+38, r25	; 0x26
    8054:	8d a3       	std	Y+37, r24	; 0x25
	//indicate that this device is about to begin communicating with the sensor.
	spiDriver->beginTransaction();
    8056:	8d a1       	ldd	r24, Y+37	; 0x25
    8058:	9e a1       	ldd	r25, Y+38	; 0x26
    805a:	fc 01       	movw	r30, r24
    805c:	84 a1       	ldd	r24, Z+36	; 0x24
    805e:	95 a1       	ldd	r25, Z+37	; 0x25
    8060:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>
	 * is now pointing to.
	 * The address is 'or'ed by the 'readcommand' to indicate to the
	 * sensor that the subsequent commands should read data
	 * from the sensor.
	 */	
	spiDriver->write(REG_ACCEL_XOUT_H | readCommand);
    8064:	8d a1       	ldd	r24, Y+37	; 0x25
    8066:	9e a1       	ldd	r25, Y+38	; 0x26
    8068:	fc 01       	movw	r30, r24
    806a:	84 a1       	ldd	r24, Z+36	; 0x24
    806c:	95 a1       	ldd	r25, Z+37	; 0x25
    806e:	6b eb       	ldi	r22, 0xBB	; 187
    8070:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <_ZN10helicopter7drivers9SPIDriver5writeEh>

	rawAccX = spiDriver->readInt16();
    8074:	8d a1       	ldd	r24, Y+37	; 0x25
    8076:	9e a1       	ldd	r25, Y+38	; 0x26
    8078:	fc 01       	movw	r30, r24
    807a:	84 a1       	ldd	r24, Z+36	; 0x24
    807c:	95 a1       	ldd	r25, Z+37	; 0x25
    807e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>
    8082:	9c 01       	movw	r18, r24
    8084:	8d a1       	ldd	r24, Y+37	; 0x25
    8086:	9e a1       	ldd	r25, Y+38	; 0x26
    8088:	fc 01       	movw	r30, r24
    808a:	37 a3       	std	Z+39, r19	; 0x27
    808c:	26 a3       	std	Z+38, r18	; 0x26
	rawAccY = spiDriver->readInt16();
    808e:	8d a1       	ldd	r24, Y+37	; 0x25
    8090:	9e a1       	ldd	r25, Y+38	; 0x26
    8092:	fc 01       	movw	r30, r24
    8094:	84 a1       	ldd	r24, Z+36	; 0x24
    8096:	95 a1       	ldd	r25, Z+37	; 0x25
    8098:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>
    809c:	9c 01       	movw	r18, r24
    809e:	8d a1       	ldd	r24, Y+37	; 0x25
    80a0:	9e a1       	ldd	r25, Y+38	; 0x26
    80a2:	fc 01       	movw	r30, r24
    80a4:	31 a7       	std	Z+41, r19	; 0x29
    80a6:	20 a7       	std	Z+40, r18	; 0x28
	rawAccZ = spiDriver->readInt16();
    80a8:	8d a1       	ldd	r24, Y+37	; 0x25
    80aa:	9e a1       	ldd	r25, Y+38	; 0x26
    80ac:	fc 01       	movw	r30, r24
    80ae:	84 a1       	ldd	r24, Z+36	; 0x24
    80b0:	95 a1       	ldd	r25, Z+37	; 0x25
    80b2:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>
    80b6:	9c 01       	movw	r18, r24
    80b8:	8d a1       	ldd	r24, Y+37	; 0x25
    80ba:	9e a1       	ldd	r25, Y+38	; 0x26
    80bc:	fc 01       	movw	r30, r24
    80be:	33 a7       	std	Z+43, r19	; 0x2b
    80c0:	22 a7       	std	Z+42, r18	; 0x2a
	
	//read the temp data, and ignore it since it isn't used.
	spiDriver->readInt16();
    80c2:	8d a1       	ldd	r24, Y+37	; 0x25
    80c4:	9e a1       	ldd	r25, Y+38	; 0x26
    80c6:	fc 01       	movw	r30, r24
    80c8:	84 a1       	ldd	r24, Z+36	; 0x24
    80ca:	95 a1       	ldd	r25, Z+37	; 0x25
    80cc:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>
	
	rawGyroX = spiDriver->readInt16();
    80d0:	8d a1       	ldd	r24, Y+37	; 0x25
    80d2:	9e a1       	ldd	r25, Y+38	; 0x26
    80d4:	fc 01       	movw	r30, r24
    80d6:	84 a1       	ldd	r24, Z+36	; 0x24
    80d8:	95 a1       	ldd	r25, Z+37	; 0x25
    80da:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>
    80de:	9c 01       	movw	r18, r24
    80e0:	8d a1       	ldd	r24, Y+37	; 0x25
    80e2:	9e a1       	ldd	r25, Y+38	; 0x26
    80e4:	fc 01       	movw	r30, r24
    80e6:	35 a7       	std	Z+45, r19	; 0x2d
    80e8:	24 a7       	std	Z+44, r18	; 0x2c
	rawGyroY = spiDriver->readInt16();
    80ea:	8d a1       	ldd	r24, Y+37	; 0x25
    80ec:	9e a1       	ldd	r25, Y+38	; 0x26
    80ee:	fc 01       	movw	r30, r24
    80f0:	84 a1       	ldd	r24, Z+36	; 0x24
    80f2:	95 a1       	ldd	r25, Z+37	; 0x25
    80f4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>
    80f8:	9c 01       	movw	r18, r24
    80fa:	8d a1       	ldd	r24, Y+37	; 0x25
    80fc:	9e a1       	ldd	r25, Y+38	; 0x26
    80fe:	fc 01       	movw	r30, r24
    8100:	37 a7       	std	Z+47, r19	; 0x2f
    8102:	26 a7       	std	Z+46, r18	; 0x2e
	rawGyroZ = spiDriver->readInt16();
    8104:	8d a1       	ldd	r24, Y+37	; 0x25
    8106:	9e a1       	ldd	r25, Y+38	; 0x26
    8108:	fc 01       	movw	r30, r24
    810a:	84 a1       	ldd	r24, Z+36	; 0x24
    810c:	95 a1       	ldd	r25, Z+37	; 0x25
    810e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN10helicopter7drivers9SPIDriver9readInt16Ev>
    8112:	9c 01       	movw	r18, r24
    8114:	8d a1       	ldd	r24, Y+37	; 0x25
    8116:	9e a1       	ldd	r25, Y+38	; 0x26
    8118:	fc 01       	movw	r30, r24
    811a:	31 ab       	std	Z+49, r19	; 0x31
    811c:	20 ab       	std	Z+48, r18	; 0x30
	
	/**
	 * The master (this CPU) then pulls the slave select line low indicating
	 * that it is done communicating.
	 */
	spiDriver->endTransaction();
    811e:	8d a1       	ldd	r24, Y+37	; 0x25
    8120:	9e a1       	ldd	r25, Y+38	; 0x26
    8122:	fc 01       	movw	r30, r24
    8124:	84 a1       	ldd	r24, Z+36	; 0x24
    8126:	95 a1       	ldd	r25, Z+37	; 0x25
    8128:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>
	
	//Convert the raw values to FRD values.
	float rotatedValues[3] = {0};
    812c:	2c e0       	ldi	r18, 0x0C	; 12
    812e:	ce 01       	movw	r24, r28
    8130:	01 96       	adiw	r24, 0x01	; 1
    8132:	fc 01       	movw	r30, r24
    8134:	32 2f       	mov	r19, r18
    8136:	11 92       	st	Z+, r1
    8138:	3a 95       	dec	r19
    813a:	e9 f7       	brne	.-6      	; 0x8136 <_ZN10helicopter7sensors9IMUSensor10readSensorEv+0xf8>
	float rotatedValues2[3] = {0};
    813c:	2c e0       	ldi	r18, 0x0C	; 12
    813e:	ce 01       	movw	r24, r28
    8140:	0d 96       	adiw	r24, 0x0d	; 13
    8142:	fc 01       	movw	r30, r24
    8144:	32 2f       	mov	r19, r18
    8146:	11 92       	st	Z+, r1
    8148:	3a 95       	dec	r19
    814a:	e9 f7       	brne	.-6      	; 0x8146 <_ZN10helicopter7sensors9IMUSensor10readSensorEv+0x108>
		
	int values[3] = {rawAccX, rawAccY, rawAccZ};
    814c:	8d a1       	ldd	r24, Y+37	; 0x25
    814e:	9e a1       	ldd	r25, Y+38	; 0x26
    8150:	fc 01       	movw	r30, r24
    8152:	86 a1       	ldd	r24, Z+38	; 0x26
    8154:	97 a1       	ldd	r25, Z+39	; 0x27
    8156:	9a 8f       	std	Y+26, r25	; 0x1a
    8158:	89 8f       	std	Y+25, r24	; 0x19
    815a:	8d a1       	ldd	r24, Y+37	; 0x25
    815c:	9e a1       	ldd	r25, Y+38	; 0x26
    815e:	fc 01       	movw	r30, r24
    8160:	80 a5       	ldd	r24, Z+40	; 0x28
    8162:	91 a5       	ldd	r25, Z+41	; 0x29
    8164:	9c 8f       	std	Y+28, r25	; 0x1c
    8166:	8b 8f       	std	Y+27, r24	; 0x1b
    8168:	8d a1       	ldd	r24, Y+37	; 0x25
    816a:	9e a1       	ldd	r25, Y+38	; 0x26
    816c:	fc 01       	movw	r30, r24
    816e:	82 a5       	ldd	r24, Z+42	; 0x2a
    8170:	93 a5       	ldd	r25, Z+43	; 0x2b
    8172:	9e 8f       	std	Y+30, r25	; 0x1e
    8174:	8d 8f       	std	Y+29, r24	; 0x1d
	int values2[3] = {rawGyroX, rawGyroY, rawGyroZ};
    8176:	8d a1       	ldd	r24, Y+37	; 0x25
    8178:	9e a1       	ldd	r25, Y+38	; 0x26
    817a:	fc 01       	movw	r30, r24
    817c:	84 a5       	ldd	r24, Z+44	; 0x2c
    817e:	95 a5       	ldd	r25, Z+45	; 0x2d
    8180:	98 a3       	std	Y+32, r25	; 0x20
    8182:	8f 8f       	std	Y+31, r24	; 0x1f
    8184:	8d a1       	ldd	r24, Y+37	; 0x25
    8186:	9e a1       	ldd	r25, Y+38	; 0x26
    8188:	fc 01       	movw	r30, r24
    818a:	86 a5       	ldd	r24, Z+46	; 0x2e
    818c:	97 a5       	ldd	r25, Z+47	; 0x2f
    818e:	9a a3       	std	Y+34, r25	; 0x22
    8190:	89 a3       	std	Y+33, r24	; 0x21
    8192:	8d a1       	ldd	r24, Y+37	; 0x25
    8194:	9e a1       	ldd	r25, Y+38	; 0x26
    8196:	fc 01       	movw	r30, r24
    8198:	80 a9       	ldd	r24, Z+48	; 0x30
    819a:	91 a9       	ldd	r25, Z+49	; 0x31
    819c:	9c a3       	std	Y+36, r25	; 0x24
    819e:	8b a3       	std	Y+35, r24	; 0x23
		
	MatrixUtil::RotateMatrix(accelRFUToFRDRotationMatrix, values, rotatedValues);
    81a0:	8d a1       	ldd	r24, Y+37	; 0x25
    81a2:	9e a1       	ldd	r25, Y+38	; 0x26
    81a4:	9e 01       	movw	r18, r28
    81a6:	27 5e       	subi	r18, 0xE7	; 231
    81a8:	3f 4f       	sbci	r19, 0xFF	; 255
    81aa:	ae 01       	movw	r20, r28
    81ac:	4f 5f       	subi	r20, 0xFF	; 255
    81ae:	5f 4f       	sbci	r21, 0xFF	; 255
    81b0:	b9 01       	movw	r22, r18
    81b2:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf>
	MatrixUtil::RotateMatrix(accelRFUToFRDRotationMatrix, values2, rotatedValues2);
    81b6:	8d a1       	ldd	r24, Y+37	; 0x25
    81b8:	9e a1       	ldd	r25, Y+38	; 0x26
    81ba:	ae 01       	movw	r20, r28
    81bc:	43 5f       	subi	r20, 0xF3	; 243
    81be:	5f 4f       	sbci	r21, 0xFF	; 255
    81c0:	9e 01       	movw	r18, r28
    81c2:	21 5e       	subi	r18, 0xE1	; 225
    81c4:	3f 4f       	sbci	r19, 0xFF	; 255
    81c6:	b9 01       	movw	r22, r18
    81c8:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf>
	
	frdAccX = rotatedValues[0];
    81cc:	89 81       	ldd	r24, Y+1	; 0x01
    81ce:	9a 81       	ldd	r25, Y+2	; 0x02
    81d0:	ab 81       	ldd	r26, Y+3	; 0x03
    81d2:	bc 81       	ldd	r27, Y+4	; 0x04
    81d4:	2d a1       	ldd	r18, Y+37	; 0x25
    81d6:	3e a1       	ldd	r19, Y+38	; 0x26
    81d8:	f9 01       	movw	r30, r18
    81da:	82 ab       	std	Z+50, r24	; 0x32
    81dc:	93 ab       	std	Z+51, r25	; 0x33
    81de:	a4 ab       	std	Z+52, r26	; 0x34
    81e0:	b5 ab       	std	Z+53, r27	; 0x35
	frdAccY = rotatedValues[1];
    81e2:	8d 81       	ldd	r24, Y+5	; 0x05
    81e4:	9e 81       	ldd	r25, Y+6	; 0x06
    81e6:	af 81       	ldd	r26, Y+7	; 0x07
    81e8:	b8 85       	ldd	r27, Y+8	; 0x08
    81ea:	2d a1       	ldd	r18, Y+37	; 0x25
    81ec:	3e a1       	ldd	r19, Y+38	; 0x26
    81ee:	f9 01       	movw	r30, r18
    81f0:	86 ab       	std	Z+54, r24	; 0x36
    81f2:	97 ab       	std	Z+55, r25	; 0x37
    81f4:	a0 af       	std	Z+56, r26	; 0x38
    81f6:	b1 af       	std	Z+57, r27	; 0x39
	frdAccZ = rotatedValues[2];
    81f8:	89 85       	ldd	r24, Y+9	; 0x09
    81fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    81fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    81fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    8200:	2d a1       	ldd	r18, Y+37	; 0x25
    8202:	3e a1       	ldd	r19, Y+38	; 0x26
    8204:	f9 01       	movw	r30, r18
    8206:	82 af       	std	Z+58, r24	; 0x3a
    8208:	93 af       	std	Z+59, r25	; 0x3b
    820a:	a4 af       	std	Z+60, r26	; 0x3c
    820c:	b5 af       	std	Z+61, r27	; 0x3d
	frdGyroX = rotatedValues2[0];
    820e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8210:	9e 85       	ldd	r25, Y+14	; 0x0e
    8212:	af 85       	ldd	r26, Y+15	; 0x0f
    8214:	b8 89       	ldd	r27, Y+16	; 0x10
    8216:	2d a1       	ldd	r18, Y+37	; 0x25
    8218:	3e a1       	ldd	r19, Y+38	; 0x26
    821a:	22 5c       	subi	r18, 0xC2	; 194
    821c:	3f 4f       	sbci	r19, 0xFF	; 255
    821e:	f9 01       	movw	r30, r18
    8220:	80 83       	st	Z, r24
    8222:	91 83       	std	Z+1, r25	; 0x01
    8224:	a2 83       	std	Z+2, r26	; 0x02
    8226:	b3 83       	std	Z+3, r27	; 0x03
	frdGyroY = rotatedValues2[1];
    8228:	89 89       	ldd	r24, Y+17	; 0x11
    822a:	9a 89       	ldd	r25, Y+18	; 0x12
    822c:	ab 89       	ldd	r26, Y+19	; 0x13
    822e:	bc 89       	ldd	r27, Y+20	; 0x14
    8230:	2d a1       	ldd	r18, Y+37	; 0x25
    8232:	3e a1       	ldd	r19, Y+38	; 0x26
    8234:	2e 5b       	subi	r18, 0xBE	; 190
    8236:	3f 4f       	sbci	r19, 0xFF	; 255
    8238:	f9 01       	movw	r30, r18
    823a:	80 83       	st	Z, r24
    823c:	91 83       	std	Z+1, r25	; 0x01
    823e:	a2 83       	std	Z+2, r26	; 0x02
    8240:	b3 83       	std	Z+3, r27	; 0x03
	frdGyroZ = rotatedValues2[2];
    8242:	8d 89       	ldd	r24, Y+21	; 0x15
    8244:	9e 89       	ldd	r25, Y+22	; 0x16
    8246:	af 89       	ldd	r26, Y+23	; 0x17
    8248:	b8 8d       	ldd	r27, Y+24	; 0x18
    824a:	2d a1       	ldd	r18, Y+37	; 0x25
    824c:	3e a1       	ldd	r19, Y+38	; 0x26
    824e:	2a 5b       	subi	r18, 0xBA	; 186
    8250:	3f 4f       	sbci	r19, 0xFF	; 255
    8252:	f9 01       	movw	r30, r18
    8254:	80 83       	st	Z, r24
    8256:	91 83       	std	Z+1, r25	; 0x01
    8258:	a2 83       	std	Z+2, r26	; 0x02
    825a:	b3 83       	std	Z+3, r27	; 0x03
}
    825c:	a6 96       	adiw	r28, 0x26	; 38
    825e:	0f b6       	in	r0, 0x3f	; 63
    8260:	f8 94       	cli
    8262:	de bf       	out	0x3e, r29	; 62
    8264:	0f be       	out	0x3f, r0	; 63
    8266:	cd bf       	out	0x3d, r28	; 61
    8268:	df 91       	pop	r29
    826a:	cf 91       	pop	r28
    826c:	08 95       	ret

0000826e <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    826e:	cf 93       	push	r28
    8270:	df 93       	push	r29
    8272:	1f 92       	push	r1
    8274:	1f 92       	push	r1
    8276:	cd b7       	in	r28, 0x3d	; 61
    8278:	de b7       	in	r29, 0x3e	; 62
    827a:	9a 83       	std	Y+2, r25	; 0x02
    827c:	89 83       	std	Y+1, r24	; 0x01
    827e:	0f 90       	pop	r0
    8280:	0f 90       	pop	r0
    8282:	df 91       	pop	r29
    8284:	cf 91       	pop	r28
    8286:	08 95       	ret

00008288 <_ZN10helicopter5tasks16PIDInnerLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDInnerLoopTask.h"

using namespace helicopter::tasks;

PIDInnerLoopTask::PIDInnerLoopTask (PIDController *pidController, int delay, int period) :
    8288:	cf 93       	push	r28
    828a:	df 93       	push	r29
    828c:	cd b7       	in	r28, 0x3d	; 61
    828e:	de b7       	in	r29, 0x3e	; 62
    8290:	28 97       	sbiw	r28, 0x08	; 8
    8292:	0f b6       	in	r0, 0x3f	; 63
    8294:	f8 94       	cli
    8296:	de bf       	out	0x3e, r29	; 62
    8298:	0f be       	out	0x3f, r0	; 63
    829a:	cd bf       	out	0x3d, r28	; 61
    829c:	9a 83       	std	Y+2, r25	; 0x02
    829e:	89 83       	std	Y+1, r24	; 0x01
    82a0:	7c 83       	std	Y+4, r23	; 0x04
    82a2:	6b 83       	std	Y+3, r22	; 0x03
    82a4:	5e 83       	std	Y+6, r21	; 0x06
    82a6:	4d 83       	std	Y+5, r20	; 0x05
    82a8:	38 87       	std	Y+8, r19	; 0x08
    82aa:	2f 83       	std	Y+7, r18	; 0x07
Task(delay, period),
pidController(pidController)
    82ac:	89 81       	ldd	r24, Y+1	; 0x01
    82ae:	9a 81       	ldd	r25, Y+2	; 0x02
    82b0:	4f 81       	ldd	r20, Y+7	; 0x07
    82b2:	58 85       	ldd	r21, Y+8	; 0x08
    82b4:	2d 81       	ldd	r18, Y+5	; 0x05
    82b6:	3e 81       	ldd	r19, Y+6	; 0x06
    82b8:	b9 01       	movw	r22, r18
    82ba:	0e 94 96 49 	call	0x932c	; 0x932c <_ZN10helicopter5tasks4TaskC1Eii>
    82be:	89 81       	ldd	r24, Y+1	; 0x01
    82c0:	9a 81       	ldd	r25, Y+2	; 0x02
    82c2:	2a e4       	ldi	r18, 0x4A	; 74
    82c4:	32 e0       	ldi	r19, 0x02	; 2
    82c6:	fc 01       	movw	r30, r24
    82c8:	31 83       	std	Z+1, r19	; 0x01
    82ca:	20 83       	st	Z, r18
    82cc:	89 81       	ldd	r24, Y+1	; 0x01
    82ce:	9a 81       	ldd	r25, Y+2	; 0x02
    82d0:	2b 81       	ldd	r18, Y+3	; 0x03
    82d2:	3c 81       	ldd	r19, Y+4	; 0x04
    82d4:	fc 01       	movw	r30, r24
    82d6:	30 87       	std	Z+8, r19	; 0x08
    82d8:	27 83       	std	Z+7, r18	; 0x07
{
	
}
    82da:	28 96       	adiw	r28, 0x08	; 8
    82dc:	0f b6       	in	r0, 0x3f	; 63
    82de:	f8 94       	cli
    82e0:	de bf       	out	0x3e, r29	; 62
    82e2:	0f be       	out	0x3f, r0	; 63
    82e4:	cd bf       	out	0x3d, r28	; 61
    82e6:	df 91       	pop	r29
    82e8:	cf 91       	pop	r28
    82ea:	08 95       	ret

000082ec <_ZN10helicopter5tasks16PIDInnerLoopTask11runTaskImplEv>:

void PIDInnerLoopTask::runTaskImpl()
{
    82ec:	cf 93       	push	r28
    82ee:	df 93       	push	r29
    82f0:	1f 92       	push	r1
    82f2:	1f 92       	push	r1
    82f4:	cd b7       	in	r28, 0x3d	; 61
    82f6:	de b7       	in	r29, 0x3e	; 62
    82f8:	9a 83       	std	Y+2, r25	; 0x02
    82fa:	89 83       	std	Y+1, r24	; 0x01
	pidController->cyclicLateralInnerLoopUpdate();
    82fc:	89 81       	ldd	r24, Y+1	; 0x01
    82fe:	9a 81       	ldd	r25, Y+2	; 0x02
    8300:	fc 01       	movw	r30, r24
    8302:	87 81       	ldd	r24, Z+7	; 0x07
    8304:	90 85       	ldd	r25, Z+8	; 0x08
    8306:	0e 94 bb 12 	call	0x2576	; 0x2576 <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv>
	pidController->cyclicLongitudeInnerLoopUpdate();
    830a:	89 81       	ldd	r24, Y+1	; 0x01
    830c:	9a 81       	ldd	r25, Y+2	; 0x02
    830e:	fc 01       	movw	r30, r24
    8310:	87 81       	ldd	r24, Z+7	; 0x07
    8312:	90 85       	ldd	r25, Z+8	; 0x08
    8314:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv>
}
    8318:	0f 90       	pop	r0
    831a:	0f 90       	pop	r0
    831c:	df 91       	pop	r29
    831e:	cf 91       	pop	r28
    8320:	08 95       	ret

00008322 <_ZN10helicopter5tasks16PIDInnerLoopTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDInnerLoopTask : public Task
    8322:	cf 93       	push	r28
    8324:	df 93       	push	r29
    8326:	1f 92       	push	r1
    8328:	1f 92       	push	r1
    832a:	cd b7       	in	r28, 0x3d	; 61
    832c:	de b7       	in	r29, 0x3e	; 62
    832e:	9a 83       	std	Y+2, r25	; 0x02
    8330:	89 83       	std	Y+1, r24	; 0x01
    8332:	89 81       	ldd	r24, Y+1	; 0x01
    8334:	9a 81       	ldd	r25, Y+2	; 0x02
    8336:	2a e4       	ldi	r18, 0x4A	; 74
    8338:	32 e0       	ldi	r19, 0x02	; 2
    833a:	fc 01       	movw	r30, r24
    833c:	31 83       	std	Z+1, r19	; 0x01
    833e:	20 83       	st	Z, r18
    8340:	89 81       	ldd	r24, Y+1	; 0x01
    8342:	9a 81       	ldd	r25, Y+2	; 0x02
    8344:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    8348:	80 e0       	ldi	r24, 0x00	; 0
    834a:	90 e0       	ldi	r25, 0x00	; 0
    834c:	81 70       	andi	r24, 0x01	; 1
    834e:	99 27       	eor	r25, r25
    8350:	00 97       	sbiw	r24, 0x00	; 0
    8352:	21 f0       	breq	.+8      	; 0x835c <_ZN10helicopter5tasks16PIDInnerLoopTaskD1Ev+0x3a>
    8354:	89 81       	ldd	r24, Y+1	; 0x01
    8356:	9a 81       	ldd	r25, Y+2	; 0x02
    8358:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    835c:	0f 90       	pop	r0
    835e:	0f 90       	pop	r0
    8360:	df 91       	pop	r29
    8362:	cf 91       	pop	r28
    8364:	08 95       	ret

00008366 <_ZN10helicopter5tasks16PIDInnerLoopTaskD0Ev>:
    8366:	cf 93       	push	r28
    8368:	df 93       	push	r29
    836a:	1f 92       	push	r1
    836c:	1f 92       	push	r1
    836e:	cd b7       	in	r28, 0x3d	; 61
    8370:	de b7       	in	r29, 0x3e	; 62
    8372:	9a 83       	std	Y+2, r25	; 0x02
    8374:	89 83       	std	Y+1, r24	; 0x01
    8376:	89 81       	ldd	r24, Y+1	; 0x01
    8378:	9a 81       	ldd	r25, Y+2	; 0x02
    837a:	0e 94 91 41 	call	0x8322	; 0x8322 <_ZN10helicopter5tasks16PIDInnerLoopTaskD1Ev>
    837e:	89 81       	ldd	r24, Y+1	; 0x01
    8380:	9a 81       	ldd	r25, Y+2	; 0x02
    8382:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    8386:	0f 90       	pop	r0
    8388:	0f 90       	pop	r0
    838a:	df 91       	pop	r29
    838c:	cf 91       	pop	r28
    838e:	08 95       	ret

00008390 <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDOuterLoopTask.h"

using namespace helicopter::tasks;

PIDOuterLoopTask::PIDOuterLoopTask (PIDController *pidController, int delay, int period) :
    8390:	cf 93       	push	r28
    8392:	df 93       	push	r29
    8394:	cd b7       	in	r28, 0x3d	; 61
    8396:	de b7       	in	r29, 0x3e	; 62
    8398:	28 97       	sbiw	r28, 0x08	; 8
    839a:	0f b6       	in	r0, 0x3f	; 63
    839c:	f8 94       	cli
    839e:	de bf       	out	0x3e, r29	; 62
    83a0:	0f be       	out	0x3f, r0	; 63
    83a2:	cd bf       	out	0x3d, r28	; 61
    83a4:	9a 83       	std	Y+2, r25	; 0x02
    83a6:	89 83       	std	Y+1, r24	; 0x01
    83a8:	7c 83       	std	Y+4, r23	; 0x04
    83aa:	6b 83       	std	Y+3, r22	; 0x03
    83ac:	5e 83       	std	Y+6, r21	; 0x06
    83ae:	4d 83       	std	Y+5, r20	; 0x05
    83b0:	38 87       	std	Y+8, r19	; 0x08
    83b2:	2f 83       	std	Y+7, r18	; 0x07
Task(delay, period),
pidController(pidController)
    83b4:	89 81       	ldd	r24, Y+1	; 0x01
    83b6:	9a 81       	ldd	r25, Y+2	; 0x02
    83b8:	4f 81       	ldd	r20, Y+7	; 0x07
    83ba:	58 85       	ldd	r21, Y+8	; 0x08
    83bc:	2d 81       	ldd	r18, Y+5	; 0x05
    83be:	3e 81       	ldd	r19, Y+6	; 0x06
    83c0:	b9 01       	movw	r22, r18
    83c2:	0e 94 96 49 	call	0x932c	; 0x932c <_ZN10helicopter5tasks4TaskC1Eii>
    83c6:	89 81       	ldd	r24, Y+1	; 0x01
    83c8:	9a 81       	ldd	r25, Y+2	; 0x02
    83ca:	28 e5       	ldi	r18, 0x58	; 88
    83cc:	32 e0       	ldi	r19, 0x02	; 2
    83ce:	fc 01       	movw	r30, r24
    83d0:	31 83       	std	Z+1, r19	; 0x01
    83d2:	20 83       	st	Z, r18
    83d4:	89 81       	ldd	r24, Y+1	; 0x01
    83d6:	9a 81       	ldd	r25, Y+2	; 0x02
    83d8:	2b 81       	ldd	r18, Y+3	; 0x03
    83da:	3c 81       	ldd	r19, Y+4	; 0x04
    83dc:	fc 01       	movw	r30, r24
    83de:	30 87       	std	Z+8, r19	; 0x08
    83e0:	27 83       	std	Z+7, r18	; 0x07
{
	
}
    83e2:	28 96       	adiw	r28, 0x08	; 8
    83e4:	0f b6       	in	r0, 0x3f	; 63
    83e6:	f8 94       	cli
    83e8:	de bf       	out	0x3e, r29	; 62
    83ea:	0f be       	out	0x3f, r0	; 63
    83ec:	cd bf       	out	0x3d, r28	; 61
    83ee:	df 91       	pop	r29
    83f0:	cf 91       	pop	r28
    83f2:	08 95       	ret

000083f4 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>:

void PIDOuterLoopTask::runTaskImpl()
{
    83f4:	cf 93       	push	r28
    83f6:	df 93       	push	r29
    83f8:	1f 92       	push	r1
    83fa:	1f 92       	push	r1
    83fc:	cd b7       	in	r28, 0x3d	; 61
    83fe:	de b7       	in	r29, 0x3e	; 62
    8400:	9a 83       	std	Y+2, r25	; 0x02
    8402:	89 83       	std	Y+1, r24	; 0x01
	pidController->mainRotorCollectiveOuterLoopUpdate();
    8404:	89 81       	ldd	r24, Y+1	; 0x01
    8406:	9a 81       	ldd	r25, Y+2	; 0x02
    8408:	fc 01       	movw	r30, r24
    840a:	87 81       	ldd	r24, Z+7	; 0x07
    840c:	90 85       	ldd	r25, Z+8	; 0x08
    840e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv>
	pidController->tailRotorCollectiveOuterLoopUpdate();
    8412:	89 81       	ldd	r24, Y+1	; 0x01
    8414:	9a 81       	ldd	r25, Y+2	; 0x02
    8416:	fc 01       	movw	r30, r24
    8418:	87 81       	ldd	r24, Z+7	; 0x07
    841a:	90 85       	ldd	r25, Z+8	; 0x08
    841c:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>
	pidController->cyclicLongitudeOuterLoopUpdate();
    8420:	89 81       	ldd	r24, Y+1	; 0x01
    8422:	9a 81       	ldd	r25, Y+2	; 0x02
    8424:	fc 01       	movw	r30, r24
    8426:	87 81       	ldd	r24, Z+7	; 0x07
    8428:	90 85       	ldd	r25, Z+8	; 0x08
    842a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv>
	pidController->cyclicLateralOuterLoopUpdate();
    842e:	89 81       	ldd	r24, Y+1	; 0x01
    8430:	9a 81       	ldd	r25, Y+2	; 0x02
    8432:	fc 01       	movw	r30, r24
    8434:	87 81       	ldd	r24, Z+7	; 0x07
    8436:	90 85       	ldd	r25, Z+8	; 0x08
    8438:	0e 94 85 10 	call	0x210a	; 0x210a <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv>
}
    843c:	0f 90       	pop	r0
    843e:	0f 90       	pop	r0
    8440:	df 91       	pop	r29
    8442:	cf 91       	pop	r28
    8444:	08 95       	ret

00008446 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDOuterLoopTask : public Task
    8446:	cf 93       	push	r28
    8448:	df 93       	push	r29
    844a:	1f 92       	push	r1
    844c:	1f 92       	push	r1
    844e:	cd b7       	in	r28, 0x3d	; 61
    8450:	de b7       	in	r29, 0x3e	; 62
    8452:	9a 83       	std	Y+2, r25	; 0x02
    8454:	89 83       	std	Y+1, r24	; 0x01
    8456:	89 81       	ldd	r24, Y+1	; 0x01
    8458:	9a 81       	ldd	r25, Y+2	; 0x02
    845a:	28 e5       	ldi	r18, 0x58	; 88
    845c:	32 e0       	ldi	r19, 0x02	; 2
    845e:	fc 01       	movw	r30, r24
    8460:	31 83       	std	Z+1, r19	; 0x01
    8462:	20 83       	st	Z, r18
    8464:	89 81       	ldd	r24, Y+1	; 0x01
    8466:	9a 81       	ldd	r25, Y+2	; 0x02
    8468:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    846c:	80 e0       	ldi	r24, 0x00	; 0
    846e:	90 e0       	ldi	r25, 0x00	; 0
    8470:	81 70       	andi	r24, 0x01	; 1
    8472:	99 27       	eor	r25, r25
    8474:	00 97       	sbiw	r24, 0x00	; 0
    8476:	21 f0       	breq	.+8      	; 0x8480 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev+0x3a>
    8478:	89 81       	ldd	r24, Y+1	; 0x01
    847a:	9a 81       	ldd	r25, Y+2	; 0x02
    847c:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    8480:	0f 90       	pop	r0
    8482:	0f 90       	pop	r0
    8484:	df 91       	pop	r29
    8486:	cf 91       	pop	r28
    8488:	08 95       	ret

0000848a <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>:
    848a:	cf 93       	push	r28
    848c:	df 93       	push	r29
    848e:	1f 92       	push	r1
    8490:	1f 92       	push	r1
    8492:	cd b7       	in	r28, 0x3d	; 61
    8494:	de b7       	in	r29, 0x3e	; 62
    8496:	9a 83       	std	Y+2, r25	; 0x02
    8498:	89 83       	std	Y+1, r24	; 0x01
    849a:	89 81       	ldd	r24, Y+1	; 0x01
    849c:	9a 81       	ldd	r25, Y+2	; 0x02
    849e:	0e 94 23 42 	call	0x8446	; 0x8446 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
    84a2:	89 81       	ldd	r24, Y+1	; 0x01
    84a4:	9a 81       	ldd	r25, Y+2	; 0x02
    84a6:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    84aa:	0f 90       	pop	r0
    84ac:	0f 90       	pop	r0
    84ae:	df 91       	pop	r29
    84b0:	cf 91       	pop	r28
    84b2:	08 95       	ret

000084b4 <_ZN10helicopter5model11SystemModel13XNEDBodyFrameEf>:
																							
		
		
		
			float XNEDBodyFrame() const {return xNEDBodyFrame;}
			void XNEDBodyFrame(float val) { xNEDBodyFrame = val;}
    84b4:	cf 93       	push	r28
    84b6:	df 93       	push	r29
    84b8:	00 d0       	rcall	.+0      	; 0x84ba <_ZN10helicopter5model11SystemModel13XNEDBodyFrameEf+0x6>
    84ba:	00 d0       	rcall	.+0      	; 0x84bc <_ZN10helicopter5model11SystemModel13XNEDBodyFrameEf+0x8>
    84bc:	cd b7       	in	r28, 0x3d	; 61
    84be:	de b7       	in	r29, 0x3e	; 62
    84c0:	9a 83       	std	Y+2, r25	; 0x02
    84c2:	89 83       	std	Y+1, r24	; 0x01
    84c4:	4b 83       	std	Y+3, r20	; 0x03
    84c6:	5c 83       	std	Y+4, r21	; 0x04
    84c8:	6d 83       	std	Y+5, r22	; 0x05
    84ca:	7e 83       	std	Y+6, r23	; 0x06
    84cc:	29 81       	ldd	r18, Y+1	; 0x01
    84ce:	3a 81       	ldd	r19, Y+2	; 0x02
    84d0:	8b 81       	ldd	r24, Y+3	; 0x03
    84d2:	9c 81       	ldd	r25, Y+4	; 0x04
    84d4:	ad 81       	ldd	r26, Y+5	; 0x05
    84d6:	be 81       	ldd	r27, Y+6	; 0x06
    84d8:	f9 01       	movw	r30, r18
    84da:	85 a3       	std	Z+37, r24	; 0x25
    84dc:	96 a3       	std	Z+38, r25	; 0x26
    84de:	a7 a3       	std	Z+39, r26	; 0x27
    84e0:	b0 a7       	std	Z+40, r27	; 0x28
    84e2:	26 96       	adiw	r28, 0x06	; 6
    84e4:	0f b6       	in	r0, 0x3f	; 63
    84e6:	f8 94       	cli
    84e8:	de bf       	out	0x3e, r29	; 62
    84ea:	0f be       	out	0x3f, r0	; 63
    84ec:	cd bf       	out	0x3d, r28	; 61
    84ee:	df 91       	pop	r29
    84f0:	cf 91       	pop	r28
    84f2:	08 95       	ret

000084f4 <_ZN10helicopter5model11SystemModel13YNEDBodyFrameEf>:
						
						


			float YNEDBodyFrame() const {return yNEDBodyFrame;}
			void YNEDBodyFrame(float val) { yNEDBodyFrame = val;}
    84f4:	cf 93       	push	r28
    84f6:	df 93       	push	r29
    84f8:	00 d0       	rcall	.+0      	; 0x84fa <_ZN10helicopter5model11SystemModel13YNEDBodyFrameEf+0x6>
    84fa:	00 d0       	rcall	.+0      	; 0x84fc <_ZN10helicopter5model11SystemModel13YNEDBodyFrameEf+0x8>
    84fc:	cd b7       	in	r28, 0x3d	; 61
    84fe:	de b7       	in	r29, 0x3e	; 62
    8500:	9a 83       	std	Y+2, r25	; 0x02
    8502:	89 83       	std	Y+1, r24	; 0x01
    8504:	4b 83       	std	Y+3, r20	; 0x03
    8506:	5c 83       	std	Y+4, r21	; 0x04
    8508:	6d 83       	std	Y+5, r22	; 0x05
    850a:	7e 83       	std	Y+6, r23	; 0x06
    850c:	89 81       	ldd	r24, Y+1	; 0x01
    850e:	9a 81       	ldd	r25, Y+2	; 0x02
    8510:	9c 01       	movw	r18, r24
    8512:	2b 5a       	subi	r18, 0xAB	; 171
    8514:	3f 4f       	sbci	r19, 0xFF	; 255
    8516:	8b 81       	ldd	r24, Y+3	; 0x03
    8518:	9c 81       	ldd	r25, Y+4	; 0x04
    851a:	ad 81       	ldd	r26, Y+5	; 0x05
    851c:	be 81       	ldd	r27, Y+6	; 0x06
    851e:	f9 01       	movw	r30, r18
    8520:	80 83       	st	Z, r24
    8522:	91 83       	std	Z+1, r25	; 0x01
    8524:	a2 83       	std	Z+2, r26	; 0x02
    8526:	b3 83       	std	Z+3, r27	; 0x03
    8528:	26 96       	adiw	r28, 0x06	; 6
    852a:	0f b6       	in	r0, 0x3f	; 63
    852c:	f8 94       	cli
    852e:	de bf       	out	0x3e, r29	; 62
    8530:	0f be       	out	0x3f, r0	; 63
    8532:	cd bf       	out	0x3d, r28	; 61
    8534:	df 91       	pop	r29
    8536:	cf 91       	pop	r28
    8538:	08 95       	ret

0000853a <_ZN10helicopter5model11SystemModel13ZNEDBodyFrameEf>:

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
			void AltitudeFeetAgl(float val) { altitudeFeetAgl = val; }

			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
			void ZNEDBodyFrame(float val) { zNEDBodyFrame = val; }
    853a:	cf 93       	push	r28
    853c:	df 93       	push	r29
    853e:	00 d0       	rcall	.+0      	; 0x8540 <_ZN10helicopter5model11SystemModel13ZNEDBodyFrameEf+0x6>
    8540:	00 d0       	rcall	.+0      	; 0x8542 <_ZN10helicopter5model11SystemModel13ZNEDBodyFrameEf+0x8>
    8542:	cd b7       	in	r28, 0x3d	; 61
    8544:	de b7       	in	r29, 0x3e	; 62
    8546:	9a 83       	std	Y+2, r25	; 0x02
    8548:	89 83       	std	Y+1, r24	; 0x01
    854a:	4b 83       	std	Y+3, r20	; 0x03
    854c:	5c 83       	std	Y+4, r21	; 0x04
    854e:	6d 83       	std	Y+5, r22	; 0x05
    8550:	7e 83       	std	Y+6, r23	; 0x06
    8552:	89 81       	ldd	r24, Y+1	; 0x01
    8554:	9a 81       	ldd	r25, Y+2	; 0x02
    8556:	9c 01       	movw	r18, r24
    8558:	27 57       	subi	r18, 0x77	; 119
    855a:	3f 4f       	sbci	r19, 0xFF	; 255
    855c:	8b 81       	ldd	r24, Y+3	; 0x03
    855e:	9c 81       	ldd	r25, Y+4	; 0x04
    8560:	ad 81       	ldd	r26, Y+5	; 0x05
    8562:	be 81       	ldd	r27, Y+6	; 0x06
    8564:	f9 01       	movw	r30, r18
    8566:	80 83       	st	Z, r24
    8568:	91 83       	std	Z+1, r25	; 0x01
    856a:	a2 83       	std	Z+2, r26	; 0x02
    856c:	b3 83       	std	Z+3, r27	; 0x03
    856e:	26 96       	adiw	r28, 0x06	; 6
    8570:	0f b6       	in	r0, 0x3f	; 63
    8572:	f8 94       	cli
    8574:	de bf       	out	0x3e, r29	; 62
    8576:	0f be       	out	0x3f, r0	; 63
    8578:	cd bf       	out	0x3d, r28	; 61
    857a:	df 91       	pop	r29
    857c:	cf 91       	pop	r28
    857e:	08 95       	ret

00008580 <_ZN10helicopter7sensors9IMUSensor10getFRDAccXEv>:
					
				int getRawGyroX() { return rawGyroX;}
				int getRawGyroY() { return rawGyroY;}
				int getRawGyroZ() { return rawGyroZ;}					
				
				float getFRDAccX() { return frdAccX;}
    8580:	cf 93       	push	r28
    8582:	df 93       	push	r29
    8584:	1f 92       	push	r1
    8586:	1f 92       	push	r1
    8588:	cd b7       	in	r28, 0x3d	; 61
    858a:	de b7       	in	r29, 0x3e	; 62
    858c:	9a 83       	std	Y+2, r25	; 0x02
    858e:	89 83       	std	Y+1, r24	; 0x01
    8590:	89 81       	ldd	r24, Y+1	; 0x01
    8592:	9a 81       	ldd	r25, Y+2	; 0x02
    8594:	fc 01       	movw	r30, r24
    8596:	82 a9       	ldd	r24, Z+50	; 0x32
    8598:	93 a9       	ldd	r25, Z+51	; 0x33
    859a:	a4 a9       	ldd	r26, Z+52	; 0x34
    859c:	b5 a9       	ldd	r27, Z+53	; 0x35
    859e:	bc 01       	movw	r22, r24
    85a0:	cd 01       	movw	r24, r26
    85a2:	0f 90       	pop	r0
    85a4:	0f 90       	pop	r0
    85a6:	df 91       	pop	r29
    85a8:	cf 91       	pop	r28
    85aa:	08 95       	ret

000085ac <_ZN10helicopter7sensors9IMUSensor10getFRDAccYEv>:
				float getFRDAccY() { return frdAccY;}
    85ac:	cf 93       	push	r28
    85ae:	df 93       	push	r29
    85b0:	1f 92       	push	r1
    85b2:	1f 92       	push	r1
    85b4:	cd b7       	in	r28, 0x3d	; 61
    85b6:	de b7       	in	r29, 0x3e	; 62
    85b8:	9a 83       	std	Y+2, r25	; 0x02
    85ba:	89 83       	std	Y+1, r24	; 0x01
    85bc:	89 81       	ldd	r24, Y+1	; 0x01
    85be:	9a 81       	ldd	r25, Y+2	; 0x02
    85c0:	fc 01       	movw	r30, r24
    85c2:	86 a9       	ldd	r24, Z+54	; 0x36
    85c4:	97 a9       	ldd	r25, Z+55	; 0x37
    85c6:	a0 ad       	ldd	r26, Z+56	; 0x38
    85c8:	b1 ad       	ldd	r27, Z+57	; 0x39
    85ca:	bc 01       	movw	r22, r24
    85cc:	cd 01       	movw	r24, r26
    85ce:	0f 90       	pop	r0
    85d0:	0f 90       	pop	r0
    85d2:	df 91       	pop	r29
    85d4:	cf 91       	pop	r28
    85d6:	08 95       	ret

000085d8 <_ZN10helicopter7sensors9IMUSensor10getFRDAccZEv>:
				float getFRDAccZ() { return frdAccZ;}
    85d8:	cf 93       	push	r28
    85da:	df 93       	push	r29
    85dc:	1f 92       	push	r1
    85de:	1f 92       	push	r1
    85e0:	cd b7       	in	r28, 0x3d	; 61
    85e2:	de b7       	in	r29, 0x3e	; 62
    85e4:	9a 83       	std	Y+2, r25	; 0x02
    85e6:	89 83       	std	Y+1, r24	; 0x01
    85e8:	89 81       	ldd	r24, Y+1	; 0x01
    85ea:	9a 81       	ldd	r25, Y+2	; 0x02
    85ec:	fc 01       	movw	r30, r24
    85ee:	82 ad       	ldd	r24, Z+58	; 0x3a
    85f0:	93 ad       	ldd	r25, Z+59	; 0x3b
    85f2:	a4 ad       	ldd	r26, Z+60	; 0x3c
    85f4:	b5 ad       	ldd	r27, Z+61	; 0x3d
    85f6:	bc 01       	movw	r22, r24
    85f8:	cd 01       	movw	r24, r26
    85fa:	0f 90       	pop	r0
    85fc:	0f 90       	pop	r0
    85fe:	df 91       	pop	r29
    8600:	cf 91       	pop	r28
    8602:	08 95       	ret

00008604 <_ZN10helicopter7sensors9IMUSensor11getFRDGyroXEv>:
					
				float getFRDGyroX() { return frdGyroX;}
    8604:	cf 93       	push	r28
    8606:	df 93       	push	r29
    8608:	1f 92       	push	r1
    860a:	1f 92       	push	r1
    860c:	cd b7       	in	r28, 0x3d	; 61
    860e:	de b7       	in	r29, 0x3e	; 62
    8610:	9a 83       	std	Y+2, r25	; 0x02
    8612:	89 83       	std	Y+1, r24	; 0x01
    8614:	89 81       	ldd	r24, Y+1	; 0x01
    8616:	9a 81       	ldd	r25, Y+2	; 0x02
    8618:	ce 96       	adiw	r24, 0x3e	; 62
    861a:	fc 01       	movw	r30, r24
    861c:	80 81       	ld	r24, Z
    861e:	91 81       	ldd	r25, Z+1	; 0x01
    8620:	a2 81       	ldd	r26, Z+2	; 0x02
    8622:	b3 81       	ldd	r27, Z+3	; 0x03
    8624:	bc 01       	movw	r22, r24
    8626:	cd 01       	movw	r24, r26
    8628:	0f 90       	pop	r0
    862a:	0f 90       	pop	r0
    862c:	df 91       	pop	r29
    862e:	cf 91       	pop	r28
    8630:	08 95       	ret

00008632 <_ZN10helicopter7sensors9IMUSensor11getFRDGyroYEv>:
				float getFRDGyroY() { return frdGyroY;}
    8632:	cf 93       	push	r28
    8634:	df 93       	push	r29
    8636:	1f 92       	push	r1
    8638:	1f 92       	push	r1
    863a:	cd b7       	in	r28, 0x3d	; 61
    863c:	de b7       	in	r29, 0x3e	; 62
    863e:	9a 83       	std	Y+2, r25	; 0x02
    8640:	89 83       	std	Y+1, r24	; 0x01
    8642:	89 81       	ldd	r24, Y+1	; 0x01
    8644:	9a 81       	ldd	r25, Y+2	; 0x02
    8646:	8e 5b       	subi	r24, 0xBE	; 190
    8648:	9f 4f       	sbci	r25, 0xFF	; 255
    864a:	fc 01       	movw	r30, r24
    864c:	80 81       	ld	r24, Z
    864e:	91 81       	ldd	r25, Z+1	; 0x01
    8650:	a2 81       	ldd	r26, Z+2	; 0x02
    8652:	b3 81       	ldd	r27, Z+3	; 0x03
    8654:	bc 01       	movw	r22, r24
    8656:	cd 01       	movw	r24, r26
    8658:	0f 90       	pop	r0
    865a:	0f 90       	pop	r0
    865c:	df 91       	pop	r29
    865e:	cf 91       	pop	r28
    8660:	08 95       	ret

00008662 <_ZN10helicopter7sensors9IMUSensor11getFRDGyroZEv>:
				float getFRDGyroZ() { return frdGyroZ;}			
    8662:	cf 93       	push	r28
    8664:	df 93       	push	r29
    8666:	1f 92       	push	r1
    8668:	1f 92       	push	r1
    866a:	cd b7       	in	r28, 0x3d	; 61
    866c:	de b7       	in	r29, 0x3e	; 62
    866e:	9a 83       	std	Y+2, r25	; 0x02
    8670:	89 83       	std	Y+1, r24	; 0x01
    8672:	89 81       	ldd	r24, Y+1	; 0x01
    8674:	9a 81       	ldd	r25, Y+2	; 0x02
    8676:	8a 5b       	subi	r24, 0xBA	; 186
    8678:	9f 4f       	sbci	r25, 0xFF	; 255
    867a:	fc 01       	movw	r30, r24
    867c:	80 81       	ld	r24, Z
    867e:	91 81       	ldd	r25, Z+1	; 0x01
    8680:	a2 81       	ldd	r26, Z+2	; 0x02
    8682:	b3 81       	ldd	r27, Z+3	; 0x03
    8684:	bc 01       	movw	r22, r24
    8686:	cd 01       	movw	r24, r26
    8688:	0f 90       	pop	r0
    868a:	0f 90       	pop	r0
    868c:	df 91       	pop	r29
    868e:	cf 91       	pop	r28
    8690:	08 95       	ret

00008692 <_ZN10helicopter5tasks17ReadIMUSensorTaskC1EPNS_5model11SystemModelEPNS_7sensors9IMUSensorEii>:
#include "ReadIMUSensorTask.h"

using namespace helicopter::tasks;

ReadIMUSensorTask::ReadIMUSensorTask (SystemModel *model, IMUSensor *imuSensor, int delay, int period) :
    8692:	0f 93       	push	r16
    8694:	1f 93       	push	r17
    8696:	cf 93       	push	r28
    8698:	df 93       	push	r29
    869a:	cd b7       	in	r28, 0x3d	; 61
    869c:	de b7       	in	r29, 0x3e	; 62
    869e:	2a 97       	sbiw	r28, 0x0a	; 10
    86a0:	0f b6       	in	r0, 0x3f	; 63
    86a2:	f8 94       	cli
    86a4:	de bf       	out	0x3e, r29	; 62
    86a6:	0f be       	out	0x3f, r0	; 63
    86a8:	cd bf       	out	0x3d, r28	; 61
    86aa:	9a 83       	std	Y+2, r25	; 0x02
    86ac:	89 83       	std	Y+1, r24	; 0x01
    86ae:	7c 83       	std	Y+4, r23	; 0x04
    86b0:	6b 83       	std	Y+3, r22	; 0x03
    86b2:	5e 83       	std	Y+6, r21	; 0x06
    86b4:	4d 83       	std	Y+5, r20	; 0x05
    86b6:	38 87       	std	Y+8, r19	; 0x08
    86b8:	2f 83       	std	Y+7, r18	; 0x07
    86ba:	1a 87       	std	Y+10, r17	; 0x0a
    86bc:	09 87       	std	Y+9, r16	; 0x09
Task(delay, period),
model(model),
imuSensor(imuSensor)
    86be:	89 81       	ldd	r24, Y+1	; 0x01
    86c0:	9a 81       	ldd	r25, Y+2	; 0x02
    86c2:	49 85       	ldd	r20, Y+9	; 0x09
    86c4:	5a 85       	ldd	r21, Y+10	; 0x0a
    86c6:	2f 81       	ldd	r18, Y+7	; 0x07
    86c8:	38 85       	ldd	r19, Y+8	; 0x08
    86ca:	b9 01       	movw	r22, r18
    86cc:	0e 94 96 49 	call	0x932c	; 0x932c <_ZN10helicopter5tasks4TaskC1Eii>
    86d0:	89 81       	ldd	r24, Y+1	; 0x01
    86d2:	9a 81       	ldd	r25, Y+2	; 0x02
    86d4:	26 e6       	ldi	r18, 0x66	; 102
    86d6:	32 e0       	ldi	r19, 0x02	; 2
    86d8:	fc 01       	movw	r30, r24
    86da:	31 83       	std	Z+1, r19	; 0x01
    86dc:	20 83       	st	Z, r18
    86de:	89 81       	ldd	r24, Y+1	; 0x01
    86e0:	9a 81       	ldd	r25, Y+2	; 0x02
    86e2:	2b 81       	ldd	r18, Y+3	; 0x03
    86e4:	3c 81       	ldd	r19, Y+4	; 0x04
    86e6:	fc 01       	movw	r30, r24
    86e8:	30 87       	std	Z+8, r19	; 0x08
    86ea:	27 83       	std	Z+7, r18	; 0x07
    86ec:	89 81       	ldd	r24, Y+1	; 0x01
    86ee:	9a 81       	ldd	r25, Y+2	; 0x02
    86f0:	2d 81       	ldd	r18, Y+5	; 0x05
    86f2:	3e 81       	ldd	r19, Y+6	; 0x06
    86f4:	fc 01       	movw	r30, r24
    86f6:	32 87       	std	Z+10, r19	; 0x0a
    86f8:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    86fa:	2a 96       	adiw	r28, 0x0a	; 10
    86fc:	0f b6       	in	r0, 0x3f	; 63
    86fe:	f8 94       	cli
    8700:	de bf       	out	0x3e, r29	; 62
    8702:	0f be       	out	0x3f, r0	; 63
    8704:	cd bf       	out	0x3d, r28	; 61
    8706:	df 91       	pop	r29
    8708:	cf 91       	pop	r28
    870a:	1f 91       	pop	r17
    870c:	0f 91       	pop	r16
    870e:	08 95       	ret

00008710 <_ZN10helicopter5tasks17ReadIMUSensorTask11runTaskImplEv>:


void ReadIMUSensorTask::runTaskImpl()
{
    8710:	cf 93       	push	r28
    8712:	df 93       	push	r29
    8714:	1f 92       	push	r1
    8716:	1f 92       	push	r1
    8718:	cd b7       	in	r28, 0x3d	; 61
    871a:	de b7       	in	r29, 0x3e	; 62
    871c:	9a 83       	std	Y+2, r25	; 0x02
    871e:	89 83       	std	Y+1, r24	; 0x01
	//Read the sensor values from the IMU Sensor.
	imuSensor->readSensor();
    8720:	89 81       	ldd	r24, Y+1	; 0x01
    8722:	9a 81       	ldd	r25, Y+2	; 0x02
    8724:	fc 01       	movw	r30, r24
    8726:	81 85       	ldd	r24, Z+9	; 0x09
    8728:	92 85       	ldd	r25, Z+10	; 0x0a
    872a:	0e 94 1f 40 	call	0x803e	; 0x803e <_ZN10helicopter7sensors9IMUSensor10readSensorEv>
	
	model->XNEDBodyFrame(imuSensor->getFRDAccX());
    872e:	89 81       	ldd	r24, Y+1	; 0x01
    8730:	9a 81       	ldd	r25, Y+2	; 0x02
    8732:	fc 01       	movw	r30, r24
    8734:	81 85       	ldd	r24, Z+9	; 0x09
    8736:	92 85       	ldd	r25, Z+10	; 0x0a
    8738:	0e 94 c0 42 	call	0x8580	; 0x8580 <_ZN10helicopter7sensors9IMUSensor10getFRDAccXEv>
    873c:	dc 01       	movw	r26, r24
    873e:	cb 01       	movw	r24, r22
    8740:	29 81       	ldd	r18, Y+1	; 0x01
    8742:	3a 81       	ldd	r19, Y+2	; 0x02
    8744:	f9 01       	movw	r30, r18
    8746:	27 81       	ldd	r18, Z+7	; 0x07
    8748:	30 85       	ldd	r19, Z+8	; 0x08
    874a:	ac 01       	movw	r20, r24
    874c:	bd 01       	movw	r22, r26
    874e:	c9 01       	movw	r24, r18
    8750:	0e 94 5a 42 	call	0x84b4	; 0x84b4 <_ZN10helicopter5model11SystemModel13XNEDBodyFrameEf>
	model->YNEDBodyFrame(imuSensor->getFRDAccY());
    8754:	89 81       	ldd	r24, Y+1	; 0x01
    8756:	9a 81       	ldd	r25, Y+2	; 0x02
    8758:	fc 01       	movw	r30, r24
    875a:	81 85       	ldd	r24, Z+9	; 0x09
    875c:	92 85       	ldd	r25, Z+10	; 0x0a
    875e:	0e 94 d6 42 	call	0x85ac	; 0x85ac <_ZN10helicopter7sensors9IMUSensor10getFRDAccYEv>
    8762:	dc 01       	movw	r26, r24
    8764:	cb 01       	movw	r24, r22
    8766:	29 81       	ldd	r18, Y+1	; 0x01
    8768:	3a 81       	ldd	r19, Y+2	; 0x02
    876a:	f9 01       	movw	r30, r18
    876c:	27 81       	ldd	r18, Z+7	; 0x07
    876e:	30 85       	ldd	r19, Z+8	; 0x08
    8770:	ac 01       	movw	r20, r24
    8772:	bd 01       	movw	r22, r26
    8774:	c9 01       	movw	r24, r18
    8776:	0e 94 7a 42 	call	0x84f4	; 0x84f4 <_ZN10helicopter5model11SystemModel13YNEDBodyFrameEf>
	model->ZNEDBodyFrame(imuSensor->getFRDAccZ());
    877a:	89 81       	ldd	r24, Y+1	; 0x01
    877c:	9a 81       	ldd	r25, Y+2	; 0x02
    877e:	fc 01       	movw	r30, r24
    8780:	81 85       	ldd	r24, Z+9	; 0x09
    8782:	92 85       	ldd	r25, Z+10	; 0x0a
    8784:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <_ZN10helicopter7sensors9IMUSensor10getFRDAccZEv>
    8788:	dc 01       	movw	r26, r24
    878a:	cb 01       	movw	r24, r22
    878c:	29 81       	ldd	r18, Y+1	; 0x01
    878e:	3a 81       	ldd	r19, Y+2	; 0x02
    8790:	f9 01       	movw	r30, r18
    8792:	27 81       	ldd	r18, Z+7	; 0x07
    8794:	30 85       	ldd	r19, Z+8	; 0x08
    8796:	ac 01       	movw	r20, r24
    8798:	bd 01       	movw	r22, r26
    879a:	c9 01       	movw	r24, r18
    879c:	0e 94 9d 42 	call	0x853a	; 0x853a <_ZN10helicopter5model11SystemModel13ZNEDBodyFrameEf>
	
	model->YawProportional(imuSensor->getFRDGyroX());
    87a0:	89 81       	ldd	r24, Y+1	; 0x01
    87a2:	9a 81       	ldd	r25, Y+2	; 0x02
    87a4:	fc 01       	movw	r30, r24
    87a6:	81 85       	ldd	r24, Z+9	; 0x09
    87a8:	92 85       	ldd	r25, Z+10	; 0x0a
    87aa:	0e 94 02 43 	call	0x8604	; 0x8604 <_ZN10helicopter7sensors9IMUSensor11getFRDGyroXEv>
    87ae:	dc 01       	movw	r26, r24
    87b0:	cb 01       	movw	r24, r22
    87b2:	29 81       	ldd	r18, Y+1	; 0x01
    87b4:	3a 81       	ldd	r19, Y+2	; 0x02
    87b6:	f9 01       	movw	r30, r18
    87b8:	27 81       	ldd	r18, Z+7	; 0x07
    87ba:	30 85       	ldd	r19, Z+8	; 0x08
    87bc:	ac 01       	movw	r20, r24
    87be:	bd 01       	movw	r22, r26
    87c0:	c9 01       	movw	r24, r18
    87c2:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN10helicopter5model11SystemModel15YawProportionalEf>
	model->YawIntegral(imuSensor->getFRDGyroY());
    87c6:	89 81       	ldd	r24, Y+1	; 0x01
    87c8:	9a 81       	ldd	r25, Y+2	; 0x02
    87ca:	fc 01       	movw	r30, r24
    87cc:	81 85       	ldd	r24, Z+9	; 0x09
    87ce:	92 85       	ldd	r25, Z+10	; 0x0a
    87d0:	0e 94 19 43 	call	0x8632	; 0x8632 <_ZN10helicopter7sensors9IMUSensor11getFRDGyroYEv>
    87d4:	dc 01       	movw	r26, r24
    87d6:	cb 01       	movw	r24, r22
    87d8:	29 81       	ldd	r18, Y+1	; 0x01
    87da:	3a 81       	ldd	r19, Y+2	; 0x02
    87dc:	f9 01       	movw	r30, r18
    87de:	27 81       	ldd	r18, Z+7	; 0x07
    87e0:	30 85       	ldd	r19, Z+8	; 0x08
    87e2:	ac 01       	movw	r20, r24
    87e4:	bd 01       	movw	r22, r26
    87e6:	c9 01       	movw	r24, r18
    87e8:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN10helicopter5model11SystemModel11YawIntegralEf>
	model->YawDerivativeError(imuSensor->getFRDGyroZ());
    87ec:	89 81       	ldd	r24, Y+1	; 0x01
    87ee:	9a 81       	ldd	r25, Y+2	; 0x02
    87f0:	fc 01       	movw	r30, r24
    87f2:	81 85       	ldd	r24, Z+9	; 0x09
    87f4:	92 85       	ldd	r25, Z+10	; 0x0a
    87f6:	0e 94 31 43 	call	0x8662	; 0x8662 <_ZN10helicopter7sensors9IMUSensor11getFRDGyroZEv>
    87fa:	dc 01       	movw	r26, r24
    87fc:	cb 01       	movw	r24, r22
    87fe:	29 81       	ldd	r18, Y+1	; 0x01
    8800:	3a 81       	ldd	r19, Y+2	; 0x02
    8802:	f9 01       	movw	r30, r18
    8804:	27 81       	ldd	r18, Z+7	; 0x07
    8806:	30 85       	ldd	r19, Z+8	; 0x08
    8808:	ac 01       	movw	r20, r24
    880a:	bd 01       	movw	r22, r26
    880c:	c9 01       	movw	r24, r18
    880e:	0e 94 57 02 	call	0x4ae	; 0x4ae <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEf>
	
	imuSensor->getFRDGyroX();
	imuSensor->getFRDGyroY();
	imuSensor->getFRDGyroZ();
	*/
}
    8812:	0f 90       	pop	r0
    8814:	0f 90       	pop	r0
    8816:	df 91       	pop	r29
    8818:	cf 91       	pop	r28
    881a:	08 95       	ret

0000881c <_ZN10helicopter5tasks17ReadIMUSensorTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class ReadIMUSensorTask : public Task
    881c:	cf 93       	push	r28
    881e:	df 93       	push	r29
    8820:	1f 92       	push	r1
    8822:	1f 92       	push	r1
    8824:	cd b7       	in	r28, 0x3d	; 61
    8826:	de b7       	in	r29, 0x3e	; 62
    8828:	9a 83       	std	Y+2, r25	; 0x02
    882a:	89 83       	std	Y+1, r24	; 0x01
    882c:	89 81       	ldd	r24, Y+1	; 0x01
    882e:	9a 81       	ldd	r25, Y+2	; 0x02
    8830:	26 e6       	ldi	r18, 0x66	; 102
    8832:	32 e0       	ldi	r19, 0x02	; 2
    8834:	fc 01       	movw	r30, r24
    8836:	31 83       	std	Z+1, r19	; 0x01
    8838:	20 83       	st	Z, r18
    883a:	89 81       	ldd	r24, Y+1	; 0x01
    883c:	9a 81       	ldd	r25, Y+2	; 0x02
    883e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    8842:	80 e0       	ldi	r24, 0x00	; 0
    8844:	90 e0       	ldi	r25, 0x00	; 0
    8846:	81 70       	andi	r24, 0x01	; 1
    8848:	99 27       	eor	r25, r25
    884a:	00 97       	sbiw	r24, 0x00	; 0
    884c:	21 f0       	breq	.+8      	; 0x8856 <_ZN10helicopter5tasks17ReadIMUSensorTaskD1Ev+0x3a>
    884e:	89 81       	ldd	r24, Y+1	; 0x01
    8850:	9a 81       	ldd	r25, Y+2	; 0x02
    8852:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    8856:	0f 90       	pop	r0
    8858:	0f 90       	pop	r0
    885a:	df 91       	pop	r29
    885c:	cf 91       	pop	r28
    885e:	08 95       	ret

00008860 <_ZN10helicopter5tasks17ReadIMUSensorTaskD0Ev>:
    8860:	cf 93       	push	r28
    8862:	df 93       	push	r29
    8864:	1f 92       	push	r1
    8866:	1f 92       	push	r1
    8868:	cd b7       	in	r28, 0x3d	; 61
    886a:	de b7       	in	r29, 0x3e	; 62
    886c:	9a 83       	std	Y+2, r25	; 0x02
    886e:	89 83       	std	Y+1, r24	; 0x01
    8870:	89 81       	ldd	r24, Y+1	; 0x01
    8872:	9a 81       	ldd	r25, Y+2	; 0x02
    8874:	0e 94 0e 44 	call	0x881c	; 0x881c <_ZN10helicopter5tasks17ReadIMUSensorTaskD1Ev>
    8878:	89 81       	ldd	r24, Y+1	; 0x01
    887a:	9a 81       	ldd	r25, Y+2	; 0x02
    887c:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    8880:	0f 90       	pop	r0
    8882:	0f 90       	pop	r0
    8884:	df 91       	pop	r29
    8886:	cf 91       	pop	r28
    8888:	08 95       	ret

0000888a <_ZNK10helicopter5model11SystemModel20InitialXPositionEcefEv>:
			void BlownFrames( long val ) { numOfFramesBlown = val;}
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
			void SerialCommunicationBufferOverruns( long val ) { serialCommunicationBufferOverruns = val;}				

			long  InitialXPositionEcef() const {return initialXPositionEcef;}
    888a:	cf 93       	push	r28
    888c:	df 93       	push	r29
    888e:	1f 92       	push	r1
    8890:	1f 92       	push	r1
    8892:	cd b7       	in	r28, 0x3d	; 61
    8894:	de b7       	in	r29, 0x3e	; 62
    8896:	9a 83       	std	Y+2, r25	; 0x02
    8898:	89 83       	std	Y+1, r24	; 0x01
    889a:	89 81       	ldd	r24, Y+1	; 0x01
    889c:	9a 81       	ldd	r25, Y+2	; 0x02
    889e:	87 53       	subi	r24, 0x37	; 55
    88a0:	9f 4f       	sbci	r25, 0xFF	; 255
    88a2:	fc 01       	movw	r30, r24
    88a4:	80 81       	ld	r24, Z
    88a6:	91 81       	ldd	r25, Z+1	; 0x01
    88a8:	a2 81       	ldd	r26, Z+2	; 0x02
    88aa:	b3 81       	ldd	r27, Z+3	; 0x03
    88ac:	bc 01       	movw	r22, r24
    88ae:	cd 01       	movw	r24, r26
    88b0:	0e 94 9f 54 	call	0xa93e	; 0xa93e <__fixsfsi>
    88b4:	dc 01       	movw	r26, r24
    88b6:	cb 01       	movw	r24, r22
    88b8:	bc 01       	movw	r22, r24
    88ba:	cd 01       	movw	r24, r26
    88bc:	0f 90       	pop	r0
    88be:	0f 90       	pop	r0
    88c0:	df 91       	pop	r29
    88c2:	cf 91       	pop	r28
    88c4:	08 95       	ret

000088c6 <_ZNK10helicopter5model11SystemModel20InitialYPositionEcefEv>:
			void InitialXPositionEcef( long val ) { initialXPositionEcef = val;}			

			long  InitialYPositionEcef() const {return initialYPositionEcef;}
    88c6:	cf 93       	push	r28
    88c8:	df 93       	push	r29
    88ca:	1f 92       	push	r1
    88cc:	1f 92       	push	r1
    88ce:	cd b7       	in	r28, 0x3d	; 61
    88d0:	de b7       	in	r29, 0x3e	; 62
    88d2:	9a 83       	std	Y+2, r25	; 0x02
    88d4:	89 83       	std	Y+1, r24	; 0x01
    88d6:	89 81       	ldd	r24, Y+1	; 0x01
    88d8:	9a 81       	ldd	r25, Y+2	; 0x02
    88da:	83 53       	subi	r24, 0x33	; 51
    88dc:	9f 4f       	sbci	r25, 0xFF	; 255
    88de:	fc 01       	movw	r30, r24
    88e0:	80 81       	ld	r24, Z
    88e2:	91 81       	ldd	r25, Z+1	; 0x01
    88e4:	a2 81       	ldd	r26, Z+2	; 0x02
    88e6:	b3 81       	ldd	r27, Z+3	; 0x03
    88e8:	bc 01       	movw	r22, r24
    88ea:	cd 01       	movw	r24, r26
    88ec:	0e 94 9f 54 	call	0xa93e	; 0xa93e <__fixsfsi>
    88f0:	dc 01       	movw	r26, r24
    88f2:	cb 01       	movw	r24, r22
    88f4:	bc 01       	movw	r22, r24
    88f6:	cd 01       	movw	r24, r26
    88f8:	0f 90       	pop	r0
    88fa:	0f 90       	pop	r0
    88fc:	df 91       	pop	r29
    88fe:	cf 91       	pop	r28
    8900:	08 95       	ret

00008902 <_ZNK10helicopter5model11SystemModel20InitialZPositionEcefEv>:
			void InitialYPositionEcef( long val ) { initialYPositionEcef = val;}

			long  InitialZPositionEcef() const {return initialZPositionEcef;}
    8902:	cf 93       	push	r28
    8904:	df 93       	push	r29
    8906:	1f 92       	push	r1
    8908:	1f 92       	push	r1
    890a:	cd b7       	in	r28, 0x3d	; 61
    890c:	de b7       	in	r29, 0x3e	; 62
    890e:	9a 83       	std	Y+2, r25	; 0x02
    8910:	89 83       	std	Y+1, r24	; 0x01
    8912:	89 81       	ldd	r24, Y+1	; 0x01
    8914:	9a 81       	ldd	r25, Y+2	; 0x02
    8916:	8f 52       	subi	r24, 0x2F	; 47
    8918:	9f 4f       	sbci	r25, 0xFF	; 255
    891a:	fc 01       	movw	r30, r24
    891c:	80 81       	ld	r24, Z
    891e:	91 81       	ldd	r25, Z+1	; 0x01
    8920:	a2 81       	ldd	r26, Z+2	; 0x02
    8922:	b3 81       	ldd	r27, Z+3	; 0x03
    8924:	bc 01       	movw	r22, r24
    8926:	cd 01       	movw	r24, r26
    8928:	0e 94 9f 54 	call	0xa93e	; 0xa93e <__fixsfsi>
    892c:	dc 01       	movw	r26, r24
    892e:	cb 01       	movw	r24, r22
    8930:	bc 01       	movw	r22, r24
    8932:	cd 01       	movw	r24, r26
    8934:	0f 90       	pop	r0
    8936:	0f 90       	pop	r0
    8938:	df 91       	pop	r29
    893a:	cf 91       	pop	r28
    893c:	08 95       	ret

0000893e <_ZN10helicopter5tasks20SensorProcessingTaskC1EPNS_5model11SystemModelEii>:
#include "CoordinateUtil.h"

using namespace helicopter::tasks;
using namespace helicopter::util;

SensorProcessingTask::SensorProcessingTask (SystemModel *model, int delay, int period) :
    893e:	cf 93       	push	r28
    8940:	df 93       	push	r29
    8942:	cd b7       	in	r28, 0x3d	; 61
    8944:	de b7       	in	r29, 0x3e	; 62
    8946:	28 97       	sbiw	r28, 0x08	; 8
    8948:	0f b6       	in	r0, 0x3f	; 63
    894a:	f8 94       	cli
    894c:	de bf       	out	0x3e, r29	; 62
    894e:	0f be       	out	0x3f, r0	; 63
    8950:	cd bf       	out	0x3d, r28	; 61
    8952:	9a 83       	std	Y+2, r25	; 0x02
    8954:	89 83       	std	Y+1, r24	; 0x01
    8956:	7c 83       	std	Y+4, r23	; 0x04
    8958:	6b 83       	std	Y+3, r22	; 0x03
    895a:	5e 83       	std	Y+6, r21	; 0x06
    895c:	4d 83       	std	Y+5, r20	; 0x05
    895e:	38 87       	std	Y+8, r19	; 0x08
    8960:	2f 83       	std	Y+7, r18	; 0x07
	Task(delay, period),
	model(model)
    8962:	89 81       	ldd	r24, Y+1	; 0x01
    8964:	9a 81       	ldd	r25, Y+2	; 0x02
    8966:	4f 81       	ldd	r20, Y+7	; 0x07
    8968:	58 85       	ldd	r21, Y+8	; 0x08
    896a:	2d 81       	ldd	r18, Y+5	; 0x05
    896c:	3e 81       	ldd	r19, Y+6	; 0x06
    896e:	b9 01       	movw	r22, r18
    8970:	0e 94 96 49 	call	0x932c	; 0x932c <_ZN10helicopter5tasks4TaskC1Eii>
    8974:	89 81       	ldd	r24, Y+1	; 0x01
    8976:	9a 81       	ldd	r25, Y+2	; 0x02
    8978:	24 e7       	ldi	r18, 0x74	; 116
    897a:	32 e0       	ldi	r19, 0x02	; 2
    897c:	fc 01       	movw	r30, r24
    897e:	31 83       	std	Z+1, r19	; 0x01
    8980:	20 83       	st	Z, r18
    8982:	89 81       	ldd	r24, Y+1	; 0x01
    8984:	9a 81       	ldd	r25, Y+2	; 0x02
    8986:	2b 81       	ldd	r18, Y+3	; 0x03
    8988:	3c 81       	ldd	r19, Y+4	; 0x04
    898a:	fc 01       	movw	r30, r24
    898c:	30 87       	std	Z+8, r19	; 0x08
    898e:	27 83       	std	Z+7, r18	; 0x07
{
	
}
    8990:	28 96       	adiw	r28, 0x08	; 8
    8992:	0f b6       	in	r0, 0x3f	; 63
    8994:	f8 94       	cli
    8996:	de bf       	out	0x3e, r29	; 62
    8998:	0f be       	out	0x3f, r0	; 63
    899a:	cd bf       	out	0x3d, r28	; 61
    899c:	df 91       	pop	r29
    899e:	cf 91       	pop	r28
    89a0:	08 95       	ret

000089a2 <_ZN10helicopter5tasks20SensorProcessingTask11runTaskImplEv>:

void SensorProcessingTask::runTaskImpl()
{
    89a2:	4f 92       	push	r4
    89a4:	5f 92       	push	r5
    89a6:	6f 92       	push	r6
    89a8:	7f 92       	push	r7
    89aa:	8f 92       	push	r8
    89ac:	9f 92       	push	r9
    89ae:	af 92       	push	r10
    89b0:	bf 92       	push	r11
    89b2:	cf 92       	push	r12
    89b4:	df 92       	push	r13
    89b6:	ef 92       	push	r14
    89b8:	ff 92       	push	r15
    89ba:	0f 93       	push	r16
    89bc:	1f 93       	push	r17
    89be:	cf 93       	push	r28
    89c0:	df 93       	push	r29
    89c2:	cd b7       	in	r28, 0x3d	; 61
    89c4:	de b7       	in	r29, 0x3e	; 62
    89c6:	66 97       	sbiw	r28, 0x16	; 22
    89c8:	0f b6       	in	r0, 0x3f	; 63
    89ca:	f8 94       	cli
    89cc:	de bf       	out	0x3e, r29	; 62
    89ce:	0f be       	out	0x3f, r0	; 63
    89d0:	cd bf       	out	0x3d, r28	; 61
    89d2:	9e 87       	std	Y+14, r25	; 0x0e
    89d4:	8d 87       	std	Y+13, r24	; 0x0d
	float localNEDX = 0;
    89d6:	19 82       	std	Y+1, r1	; 0x01
    89d8:	1a 82       	std	Y+2, r1	; 0x02
    89da:	1b 82       	std	Y+3, r1	; 0x03
    89dc:	1c 82       	std	Y+4, r1	; 0x04
	float localNEDY = 0;
    89de:	1d 82       	std	Y+5, r1	; 0x05
    89e0:	1e 82       	std	Y+6, r1	; 0x06
    89e2:	1f 82       	std	Y+7, r1	; 0x07
    89e4:	18 86       	std	Y+8, r1	; 0x08
	float localNEDZ = 0;
    89e6:	19 86       	std	Y+9, r1	; 0x09
    89e8:	1a 86       	std	Y+10, r1	; 0x0a
    89ea:	1b 86       	std	Y+11, r1	; 0x0b
    89ec:	1c 86       	std	Y+12, r1	; 0x0c
	
	CoordinateUtil::ConvertFromGeodedicToLocalNED(model->LatitudeDegrees(), model->LongitudeDegrees(), model->AltitudeFeetAgl(), 
		model->InitialXPositionEcef(), model->InitialYPositionEcef(), model->InitialZPositionEcef(),model->EcefToLocalNEDRotationMatrix,
		localNEDX,localNEDY,localNEDZ);
    89ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    89f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    89f2:	fc 01       	movw	r30, r24
    89f4:	87 81       	ldd	r24, Z+7	; 0x07
    89f6:	90 85       	ldd	r25, Z+8	; 0x08
    89f8:	8c 01       	movw	r16, r24
    89fa:	0b 52       	subi	r16, 0x2B	; 43
    89fc:	1f 4f       	sbci	r17, 0xFF	; 255
	float localNEDX = 0;
	float localNEDY = 0;
	float localNEDZ = 0;
	
	CoordinateUtil::ConvertFromGeodedicToLocalNED(model->LatitudeDegrees(), model->LongitudeDegrees(), model->AltitudeFeetAgl(), 
		model->InitialXPositionEcef(), model->InitialYPositionEcef(), model->InitialZPositionEcef(),model->EcefToLocalNEDRotationMatrix,
    89fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a02:	fc 01       	movw	r30, r24
    8a04:	87 81       	ldd	r24, Z+7	; 0x07
    8a06:	90 85       	ldd	r25, Z+8	; 0x08
    8a08:	0e 94 81 44 	call	0x8902	; 0x8902 <_ZNK10helicopter5model11SystemModel20InitialZPositionEcefEv>
    8a0c:	dc 01       	movw	r26, r24
    8a0e:	cb 01       	movw	r24, r22
		localNEDX,localNEDY,localNEDZ);
    8a10:	bc 01       	movw	r22, r24
    8a12:	cd 01       	movw	r24, r26
    8a14:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    8a18:	4b 01       	movw	r8, r22
    8a1a:	5c 01       	movw	r10, r24
	float localNEDX = 0;
	float localNEDY = 0;
	float localNEDZ = 0;
	
	CoordinateUtil::ConvertFromGeodedicToLocalNED(model->LatitudeDegrees(), model->LongitudeDegrees(), model->AltitudeFeetAgl(), 
		model->InitialXPositionEcef(), model->InitialYPositionEcef(), model->InitialZPositionEcef(),model->EcefToLocalNEDRotationMatrix,
    8a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a20:	fc 01       	movw	r30, r24
    8a22:	87 81       	ldd	r24, Z+7	; 0x07
    8a24:	90 85       	ldd	r25, Z+8	; 0x08
    8a26:	0e 94 63 44 	call	0x88c6	; 0x88c6 <_ZNK10helicopter5model11SystemModel20InitialYPositionEcefEv>
    8a2a:	dc 01       	movw	r26, r24
    8a2c:	cb 01       	movw	r24, r22
		localNEDX,localNEDY,localNEDZ);
    8a2e:	bc 01       	movw	r22, r24
    8a30:	cd 01       	movw	r24, r26
    8a32:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    8a36:	6b 01       	movw	r12, r22
    8a38:	7c 01       	movw	r14, r24
	float localNEDX = 0;
	float localNEDY = 0;
	float localNEDZ = 0;
	
	CoordinateUtil::ConvertFromGeodedicToLocalNED(model->LatitudeDegrees(), model->LongitudeDegrees(), model->AltitudeFeetAgl(), 
		model->InitialXPositionEcef(), model->InitialYPositionEcef(), model->InitialZPositionEcef(),model->EcefToLocalNEDRotationMatrix,
    8a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a3e:	fc 01       	movw	r30, r24
    8a40:	87 81       	ldd	r24, Z+7	; 0x07
    8a42:	90 85       	ldd	r25, Z+8	; 0x08
    8a44:	0e 94 45 44 	call	0x888a	; 0x888a <_ZNK10helicopter5model11SystemModel20InitialXPositionEcefEv>
    8a48:	dc 01       	movw	r26, r24
    8a4a:	cb 01       	movw	r24, r22
		localNEDX,localNEDY,localNEDZ);
    8a4c:	bc 01       	movw	r22, r24
    8a4e:	cd 01       	movw	r24, r26
    8a50:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    8a54:	6f 87       	std	Y+15, r22	; 0x0f
    8a56:	78 8b       	std	Y+16, r23	; 0x10
    8a58:	89 8b       	std	Y+17, r24	; 0x11
    8a5a:	9a 8b       	std	Y+18, r25	; 0x12
    8a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a60:	fc 01       	movw	r30, r24
    8a62:	87 81       	ldd	r24, Z+7	; 0x07
    8a64:	90 85       	ldd	r25, Z+8	; 0x08
    8a66:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZNK10helicopter5model11SystemModel15AltitudeFeetAglEv>
    8a6a:	6b 8b       	std	Y+19, r22	; 0x13
    8a6c:	7c 8b       	std	Y+20, r23	; 0x14
    8a6e:	8d 8b       	std	Y+21, r24	; 0x15
    8a70:	9e 8b       	std	Y+22, r25	; 0x16
    8a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a76:	fc 01       	movw	r30, r24
    8a78:	87 81       	ldd	r24, Z+7	; 0x07
    8a7a:	90 85       	ldd	r25, Z+8	; 0x08
    8a7c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZNK10helicopter5model11SystemModel16LongitudeDegreesEv>
    8a80:	2b 01       	movw	r4, r22
    8a82:	3c 01       	movw	r6, r24
    8a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a88:	fc 01       	movw	r30, r24
    8a8a:	87 81       	ldd	r24, Z+7	; 0x07
    8a8c:	90 85       	ldd	r25, Z+8	; 0x08
    8a8e:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZNK10helicopter5model11SystemModel15LatitudeDegreesEv>
    8a92:	dc 01       	movw	r26, r24
    8a94:	cb 01       	movw	r24, r22
    8a96:	9e 01       	movw	r18, r28
    8a98:	27 5f       	subi	r18, 0xF7	; 247
    8a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a9c:	43 2f       	mov	r20, r19
    8a9e:	4f 93       	push	r20
    8aa0:	2f 93       	push	r18
    8aa2:	9e 01       	movw	r18, r28
    8aa4:	2b 5f       	subi	r18, 0xFB	; 251
    8aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    8aa8:	43 2f       	mov	r20, r19
    8aaa:	4f 93       	push	r20
    8aac:	2f 93       	push	r18
    8aae:	9e 01       	movw	r18, r28
    8ab0:	2f 5f       	subi	r18, 0xFF	; 255
    8ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    8ab4:	23 2f       	mov	r18, r19
    8ab6:	2f 93       	push	r18
    8ab8:	9e 01       	movw	r18, r28
    8aba:	2f 5f       	subi	r18, 0xFF	; 255
    8abc:	3f 4f       	sbci	r19, 0xFF	; 255
    8abe:	2f 93       	push	r18
    8ac0:	21 2f       	mov	r18, r17
    8ac2:	2f 93       	push	r18
    8ac4:	20 2f       	mov	r18, r16
    8ac6:	2f 93       	push	r18
    8ac8:	2b 2d       	mov	r18, r11
    8aca:	2f 93       	push	r18
    8acc:	2a 2d       	mov	r18, r10
    8ace:	2f 93       	push	r18
    8ad0:	29 2d       	mov	r18, r9
    8ad2:	2f 93       	push	r18
    8ad4:	28 2d       	mov	r18, r8
    8ad6:	2f 93       	push	r18
    8ad8:	2f 2d       	mov	r18, r15
    8ada:	2f 93       	push	r18
    8adc:	2e 2d       	mov	r18, r14
    8ade:	2f 93       	push	r18
    8ae0:	2d 2d       	mov	r18, r13
    8ae2:	2f 93       	push	r18
    8ae4:	2c 2d       	mov	r18, r12
    8ae6:	2f 93       	push	r18
    8ae8:	af 84       	ldd	r10, Y+15	; 0x0f
    8aea:	b8 88       	ldd	r11, Y+16	; 0x10
    8aec:	c9 88       	ldd	r12, Y+17	; 0x11
    8aee:	da 88       	ldd	r13, Y+18	; 0x12
    8af0:	eb 88       	ldd	r14, Y+19	; 0x13
    8af2:	fc 88       	ldd	r15, Y+20	; 0x14
    8af4:	0d 89       	ldd	r16, Y+21	; 0x15
    8af6:	1e 89       	ldd	r17, Y+22	; 0x16
    8af8:	a3 01       	movw	r20, r6
    8afa:	92 01       	movw	r18, r4
    8afc:	bc 01       	movw	r22, r24
    8afe:	cd 01       	movw	r24, r26
    8b00:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <_ZN10helicopter4util14CoordinateUtil29ConvertFromGeodedicToLocalNEDEffffffPA3_fRfS4_S4_>
    8b04:	8d b7       	in	r24, 0x3d	; 61
    8b06:	9e b7       	in	r25, 0x3e	; 62
    8b08:	40 96       	adiw	r24, 0x10	; 16
    8b0a:	0f b6       	in	r0, 0x3f	; 63
    8b0c:	f8 94       	cli
    8b0e:	de bf       	out	0x3e, r29	; 62
    8b10:	0f be       	out	0x3f, r0	; 63
    8b12:	cd bf       	out	0x3d, r28	; 61
		
		
	model->XNEDBodyFrame(localNEDX);
    8b14:	89 81       	ldd	r24, Y+1	; 0x01
    8b16:	9a 81       	ldd	r25, Y+2	; 0x02
    8b18:	ab 81       	ldd	r26, Y+3	; 0x03
    8b1a:	bc 81       	ldd	r27, Y+4	; 0x04
    8b1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    8b1e:	3e 85       	ldd	r19, Y+14	; 0x0e
    8b20:	f9 01       	movw	r30, r18
    8b22:	27 81       	ldd	r18, Z+7	; 0x07
    8b24:	30 85       	ldd	r19, Z+8	; 0x08
    8b26:	ac 01       	movw	r20, r24
    8b28:	bd 01       	movw	r22, r26
    8b2a:	c9 01       	movw	r24, r18
    8b2c:	0e 94 5a 42 	call	0x84b4	; 0x84b4 <_ZN10helicopter5model11SystemModel13XNEDBodyFrameEf>
	model->YNEDBodyFrame(localNEDY);
    8b30:	8d 81       	ldd	r24, Y+5	; 0x05
    8b32:	9e 81       	ldd	r25, Y+6	; 0x06
    8b34:	af 81       	ldd	r26, Y+7	; 0x07
    8b36:	b8 85       	ldd	r27, Y+8	; 0x08
    8b38:	2d 85       	ldd	r18, Y+13	; 0x0d
    8b3a:	3e 85       	ldd	r19, Y+14	; 0x0e
    8b3c:	f9 01       	movw	r30, r18
    8b3e:	27 81       	ldd	r18, Z+7	; 0x07
    8b40:	30 85       	ldd	r19, Z+8	; 0x08
    8b42:	ac 01       	movw	r20, r24
    8b44:	bd 01       	movw	r22, r26
    8b46:	c9 01       	movw	r24, r18
    8b48:	0e 94 7a 42 	call	0x84f4	; 0x84f4 <_ZN10helicopter5model11SystemModel13YNEDBodyFrameEf>
	model->ZNEDBodyFrame(localNEDZ);
    8b4c:	89 85       	ldd	r24, Y+9	; 0x09
    8b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b50:	ab 85       	ldd	r26, Y+11	; 0x0b
    8b52:	bc 85       	ldd	r27, Y+12	; 0x0c
    8b54:	2d 85       	ldd	r18, Y+13	; 0x0d
    8b56:	3e 85       	ldd	r19, Y+14	; 0x0e
    8b58:	f9 01       	movw	r30, r18
    8b5a:	27 81       	ldd	r18, Z+7	; 0x07
    8b5c:	30 85       	ldd	r19, Z+8	; 0x08
    8b5e:	ac 01       	movw	r20, r24
    8b60:	bd 01       	movw	r22, r26
    8b62:	c9 01       	movw	r24, r18
    8b64:	0e 94 9d 42 	call	0x853a	; 0x853a <_ZN10helicopter5model11SystemModel13ZNEDBodyFrameEf>
}
    8b68:	66 96       	adiw	r28, 0x16	; 22
    8b6a:	0f b6       	in	r0, 0x3f	; 63
    8b6c:	f8 94       	cli
    8b6e:	de bf       	out	0x3e, r29	; 62
    8b70:	0f be       	out	0x3f, r0	; 63
    8b72:	cd bf       	out	0x3d, r28	; 61
    8b74:	df 91       	pop	r29
    8b76:	cf 91       	pop	r28
    8b78:	1f 91       	pop	r17
    8b7a:	0f 91       	pop	r16
    8b7c:	ff 90       	pop	r15
    8b7e:	ef 90       	pop	r14
    8b80:	df 90       	pop	r13
    8b82:	cf 90       	pop	r12
    8b84:	bf 90       	pop	r11
    8b86:	af 90       	pop	r10
    8b88:	9f 90       	pop	r9
    8b8a:	8f 90       	pop	r8
    8b8c:	7f 90       	pop	r7
    8b8e:	6f 90       	pop	r6
    8b90:	5f 90       	pop	r5
    8b92:	4f 90       	pop	r4
    8b94:	08 95       	ret

00008b96 <_ZN10helicopter5tasks20SensorProcessingTaskD1Ev>:
	{
		/**
		 * This class processes and transforms sensor data such as converting latitude/longitude into
		 * x,y,z coordinates
		 */
		class SensorProcessingTask : public Task
    8b96:	cf 93       	push	r28
    8b98:	df 93       	push	r29
    8b9a:	1f 92       	push	r1
    8b9c:	1f 92       	push	r1
    8b9e:	cd b7       	in	r28, 0x3d	; 61
    8ba0:	de b7       	in	r29, 0x3e	; 62
    8ba2:	9a 83       	std	Y+2, r25	; 0x02
    8ba4:	89 83       	std	Y+1, r24	; 0x01
    8ba6:	89 81       	ldd	r24, Y+1	; 0x01
    8ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    8baa:	24 e7       	ldi	r18, 0x74	; 116
    8bac:	32 e0       	ldi	r19, 0x02	; 2
    8bae:	fc 01       	movw	r30, r24
    8bb0:	31 83       	std	Z+1, r19	; 0x01
    8bb2:	20 83       	st	Z, r18
    8bb4:	89 81       	ldd	r24, Y+1	; 0x01
    8bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    8bb8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    8bbc:	80 e0       	ldi	r24, 0x00	; 0
    8bbe:	90 e0       	ldi	r25, 0x00	; 0
    8bc0:	81 70       	andi	r24, 0x01	; 1
    8bc2:	99 27       	eor	r25, r25
    8bc4:	00 97       	sbiw	r24, 0x00	; 0
    8bc6:	21 f0       	breq	.+8      	; 0x8bd0 <_ZN10helicopter5tasks20SensorProcessingTaskD1Ev+0x3a>
    8bc8:	89 81       	ldd	r24, Y+1	; 0x01
    8bca:	9a 81       	ldd	r25, Y+2	; 0x02
    8bcc:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    8bd0:	0f 90       	pop	r0
    8bd2:	0f 90       	pop	r0
    8bd4:	df 91       	pop	r29
    8bd6:	cf 91       	pop	r28
    8bd8:	08 95       	ret

00008bda <_ZN10helicopter5tasks20SensorProcessingTaskD0Ev>:
    8bda:	cf 93       	push	r28
    8bdc:	df 93       	push	r29
    8bde:	1f 92       	push	r1
    8be0:	1f 92       	push	r1
    8be2:	cd b7       	in	r28, 0x3d	; 61
    8be4:	de b7       	in	r29, 0x3e	; 62
    8be6:	9a 83       	std	Y+2, r25	; 0x02
    8be8:	89 83       	std	Y+1, r24	; 0x01
    8bea:	89 81       	ldd	r24, Y+1	; 0x01
    8bec:	9a 81       	ldd	r25, Y+2	; 0x02
    8bee:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <_ZN10helicopter5tasks20SensorProcessingTaskD1Ev>
    8bf2:	89 81       	ldd	r24, Y+1	; 0x01
    8bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    8bf6:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    8bfa:	0f 90       	pop	r0
    8bfc:	0f 90       	pop	r0
    8bfe:	df 91       	pop	r29
    8c00:	cf 91       	pop	r28
    8c02:	08 95       	ret

00008c04 <_ZN10helicopter5model11SystemModel33SerialCommunicationBufferOverrunsEl>:
			
			long BlownFrames() const {return numOfFramesBlown;}
			void BlownFrames( long val ) { numOfFramesBlown = val;}
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
			void SerialCommunicationBufferOverruns( long val ) { serialCommunicationBufferOverruns = val;}				
    8c04:	cf 93       	push	r28
    8c06:	df 93       	push	r29
    8c08:	00 d0       	rcall	.+0      	; 0x8c0a <_ZN10helicopter5model11SystemModel33SerialCommunicationBufferOverrunsEl+0x6>
    8c0a:	00 d0       	rcall	.+0      	; 0x8c0c <_ZN10helicopter5model11SystemModel33SerialCommunicationBufferOverrunsEl+0x8>
    8c0c:	cd b7       	in	r28, 0x3d	; 61
    8c0e:	de b7       	in	r29, 0x3e	; 62
    8c10:	9a 83       	std	Y+2, r25	; 0x02
    8c12:	89 83       	std	Y+1, r24	; 0x01
    8c14:	4b 83       	std	Y+3, r20	; 0x03
    8c16:	5c 83       	std	Y+4, r21	; 0x04
    8c18:	6d 83       	std	Y+5, r22	; 0x05
    8c1a:	7e 83       	std	Y+6, r23	; 0x06
    8c1c:	89 81       	ldd	r24, Y+1	; 0x01
    8c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    8c20:	9c 01       	movw	r18, r24
    8c22:	2b 53       	subi	r18, 0x3B	; 59
    8c24:	3f 4f       	sbci	r19, 0xFF	; 255
    8c26:	8b 81       	ldd	r24, Y+3	; 0x03
    8c28:	9c 81       	ldd	r25, Y+4	; 0x04
    8c2a:	ad 81       	ldd	r26, Y+5	; 0x05
    8c2c:	be 81       	ldd	r27, Y+6	; 0x06
    8c2e:	f9 01       	movw	r30, r18
    8c30:	80 83       	st	Z, r24
    8c32:	91 83       	std	Z+1, r25	; 0x01
    8c34:	a2 83       	std	Z+2, r26	; 0x02
    8c36:	b3 83       	std	Z+3, r27	; 0x03
    8c38:	26 96       	adiw	r28, 0x06	; 6
    8c3a:	0f b6       	in	r0, 0x3f	; 63
    8c3c:	f8 94       	cli
    8c3e:	de bf       	out	0x3e, r29	; 62
    8c40:	0f be       	out	0x3f, r0	; 63
    8c42:	cd bf       	out	0x3d, r28	; 61
    8c44:	df 91       	pop	r29
    8c46:	cf 91       	pop	r28
    8c48:	08 95       	ret

00008c4a <_ZN10helicopter10controller13PIDController16setZIntegralGainEf>:
				
				
				
				
				
				void setZIntegralGain(float val)
    8c4a:	cf 93       	push	r28
    8c4c:	df 93       	push	r29
    8c4e:	00 d0       	rcall	.+0      	; 0x8c50 <_ZN10helicopter10controller13PIDController16setZIntegralGainEf+0x6>
    8c50:	00 d0       	rcall	.+0      	; 0x8c52 <_ZN10helicopter10controller13PIDController16setZIntegralGainEf+0x8>
    8c52:	cd b7       	in	r28, 0x3d	; 61
    8c54:	de b7       	in	r29, 0x3e	; 62
    8c56:	9a 83       	std	Y+2, r25	; 0x02
    8c58:	89 83       	std	Y+1, r24	; 0x01
    8c5a:	4b 83       	std	Y+3, r20	; 0x03
    8c5c:	5c 83       	std	Y+4, r21	; 0x04
    8c5e:	6d 83       	std	Y+5, r22	; 0x05
    8c60:	7e 83       	std	Y+6, r23	; 0x06
				{
					zIntegralGain = val;
    8c62:	89 81       	ldd	r24, Y+1	; 0x01
    8c64:	9a 81       	ldd	r25, Y+2	; 0x02
    8c66:	9c 01       	movw	r18, r24
    8c68:	2e 5b       	subi	r18, 0xBE	; 190
    8c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    8c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    8c70:	ad 81       	ldd	r26, Y+5	; 0x05
    8c72:	be 81       	ldd	r27, Y+6	; 0x06
    8c74:	f9 01       	movw	r30, r18
    8c76:	80 83       	st	Z, r24
    8c78:	91 83       	std	Z+1, r25	; 0x01
    8c7a:	a2 83       	std	Z+2, r26	; 0x02
    8c7c:	b3 83       	std	Z+3, r27	; 0x03
				}
    8c7e:	26 96       	adiw	r28, 0x06	; 6
    8c80:	0f b6       	in	r0, 0x3f	; 63
    8c82:	f8 94       	cli
    8c84:	de bf       	out	0x3e, r29	; 62
    8c86:	0f be       	out	0x3f, r0	; 63
    8c88:	cd bf       	out	0x3d, r28	; 61
    8c8a:	df 91       	pop	r29
    8c8c:	cf 91       	pop	r28
    8c8e:	08 95       	ret

00008c90 <_ZN10helicopter10controller13PIDController18setZDerivativeGainEf>:
				
				void setZDerivativeGain(float val)
    8c90:	cf 93       	push	r28
    8c92:	df 93       	push	r29
    8c94:	00 d0       	rcall	.+0      	; 0x8c96 <_ZN10helicopter10controller13PIDController18setZDerivativeGainEf+0x6>
    8c96:	00 d0       	rcall	.+0      	; 0x8c98 <_ZN10helicopter10controller13PIDController18setZDerivativeGainEf+0x8>
    8c98:	cd b7       	in	r28, 0x3d	; 61
    8c9a:	de b7       	in	r29, 0x3e	; 62
    8c9c:	9a 83       	std	Y+2, r25	; 0x02
    8c9e:	89 83       	std	Y+1, r24	; 0x01
    8ca0:	4b 83       	std	Y+3, r20	; 0x03
    8ca2:	5c 83       	std	Y+4, r21	; 0x04
    8ca4:	6d 83       	std	Y+5, r22	; 0x05
    8ca6:	7e 83       	std	Y+6, r23	; 0x06
				{
					zDerivativeGain = val;
    8ca8:	89 81       	ldd	r24, Y+1	; 0x01
    8caa:	9a 81       	ldd	r25, Y+2	; 0x02
    8cac:	9c 01       	movw	r18, r24
    8cae:	2a 5b       	subi	r18, 0xBA	; 186
    8cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    8cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    8cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    8cb6:	ad 81       	ldd	r26, Y+5	; 0x05
    8cb8:	be 81       	ldd	r27, Y+6	; 0x06
    8cba:	f9 01       	movw	r30, r18
    8cbc:	80 83       	st	Z, r24
    8cbe:	91 83       	std	Z+1, r25	; 0x01
    8cc0:	a2 83       	std	Z+2, r26	; 0x02
    8cc2:	b3 83       	std	Z+3, r27	; 0x03
				}
    8cc4:	26 96       	adiw	r28, 0x06	; 6
    8cc6:	0f b6       	in	r0, 0x3f	; 63
    8cc8:	f8 94       	cli
    8cca:	de bf       	out	0x3e, r29	; 62
    8ccc:	0f be       	out	0x3f, r0	; 63
    8cce:	cd bf       	out	0x3d, r28	; 61
    8cd0:	df 91       	pop	r29
    8cd2:	cf 91       	pop	r28
    8cd4:	08 95       	ret

00008cd6 <_ZN10helicopter10controller13PIDController20setZProportionalGainEf>:
				
				void setZProportionalGain(float val)
    8cd6:	cf 93       	push	r28
    8cd8:	df 93       	push	r29
    8cda:	00 d0       	rcall	.+0      	; 0x8cdc <_ZN10helicopter10controller13PIDController20setZProportionalGainEf+0x6>
    8cdc:	00 d0       	rcall	.+0      	; 0x8cde <_ZN10helicopter10controller13PIDController20setZProportionalGainEf+0x8>
    8cde:	cd b7       	in	r28, 0x3d	; 61
    8ce0:	de b7       	in	r29, 0x3e	; 62
    8ce2:	9a 83       	std	Y+2, r25	; 0x02
    8ce4:	89 83       	std	Y+1, r24	; 0x01
    8ce6:	4b 83       	std	Y+3, r20	; 0x03
    8ce8:	5c 83       	std	Y+4, r21	; 0x04
    8cea:	6d 83       	std	Y+5, r22	; 0x05
    8cec:	7e 83       	std	Y+6, r23	; 0x06
				{
					zProportionalGain = val;
    8cee:	89 81       	ldd	r24, Y+1	; 0x01
    8cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    8cf2:	9c 01       	movw	r18, r24
    8cf4:	26 5b       	subi	r18, 0xB6	; 182
    8cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    8cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    8cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    8cfc:	ad 81       	ldd	r26, Y+5	; 0x05
    8cfe:	be 81       	ldd	r27, Y+6	; 0x06
    8d00:	f9 01       	movw	r30, r18
    8d02:	80 83       	st	Z, r24
    8d04:	91 83       	std	Z+1, r25	; 0x01
    8d06:	a2 83       	std	Z+2, r26	; 0x02
    8d08:	b3 83       	std	Z+3, r27	; 0x03
				}
    8d0a:	26 96       	adiw	r28, 0x06	; 6
    8d0c:	0f b6       	in	r0, 0x3f	; 63
    8d0e:	f8 94       	cli
    8d10:	de bf       	out	0x3e, r29	; 62
    8d12:	0f be       	out	0x3f, r0	; 63
    8d14:	cd bf       	out	0x3d, r28	; 61
    8d16:	df 91       	pop	r29
    8d18:	cf 91       	pop	r28
    8d1a:	08 95       	ret

00008d1c <_ZN10helicopter10controller13PIDController18setZAntiWindupGainEf>:
				
				void setZAntiWindupGain(float val)
    8d1c:	cf 93       	push	r28
    8d1e:	df 93       	push	r29
    8d20:	00 d0       	rcall	.+0      	; 0x8d22 <_ZN10helicopter10controller13PIDController18setZAntiWindupGainEf+0x6>
    8d22:	00 d0       	rcall	.+0      	; 0x8d24 <_ZN10helicopter10controller13PIDController18setZAntiWindupGainEf+0x8>
    8d24:	cd b7       	in	r28, 0x3d	; 61
    8d26:	de b7       	in	r29, 0x3e	; 62
    8d28:	9a 83       	std	Y+2, r25	; 0x02
    8d2a:	89 83       	std	Y+1, r24	; 0x01
    8d2c:	4b 83       	std	Y+3, r20	; 0x03
    8d2e:	5c 83       	std	Y+4, r21	; 0x04
    8d30:	6d 83       	std	Y+5, r22	; 0x05
    8d32:	7e 83       	std	Y+6, r23	; 0x06
				{
					zAntiWindupGain = val;
    8d34:	89 81       	ldd	r24, Y+1	; 0x01
    8d36:	9a 81       	ldd	r25, Y+2	; 0x02
    8d38:	9c 01       	movw	r18, r24
    8d3a:	22 5b       	subi	r18, 0xB2	; 178
    8d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    8d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    8d40:	9c 81       	ldd	r25, Y+4	; 0x04
    8d42:	ad 81       	ldd	r26, Y+5	; 0x05
    8d44:	be 81       	ldd	r27, Y+6	; 0x06
    8d46:	f9 01       	movw	r30, r18
    8d48:	80 83       	st	Z, r24
    8d4a:	91 83       	std	Z+1, r25	; 0x01
    8d4c:	a2 83       	std	Z+2, r26	; 0x02
    8d4e:	b3 83       	std	Z+3, r27	; 0x03
				}
    8d50:	26 96       	adiw	r28, 0x06	; 6
    8d52:	0f b6       	in	r0, 0x3f	; 63
    8d54:	f8 94       	cli
    8d56:	de bf       	out	0x3e, r29	; 62
    8d58:	0f be       	out	0x3f, r0	; 63
    8d5a:	cd bf       	out	0x3d, r28	; 61
    8d5c:	df 91       	pop	r29
    8d5e:	cf 91       	pop	r28
    8d60:	08 95       	ret

00008d62 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEPNS_10controller13PIDControllerEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, PIDController *pidController, int delay, int period) :
    8d62:	ef 92       	push	r14
    8d64:	ff 92       	push	r15
    8d66:	0f 93       	push	r16
    8d68:	1f 93       	push	r17
    8d6a:	cf 93       	push	r28
    8d6c:	df 93       	push	r29
    8d6e:	cd b7       	in	r28, 0x3d	; 61
    8d70:	de b7       	in	r29, 0x3e	; 62
    8d72:	2c 97       	sbiw	r28, 0x0c	; 12
    8d74:	0f b6       	in	r0, 0x3f	; 63
    8d76:	f8 94       	cli
    8d78:	de bf       	out	0x3e, r29	; 62
    8d7a:	0f be       	out	0x3f, r0	; 63
    8d7c:	cd bf       	out	0x3d, r28	; 61
    8d7e:	9a 83       	std	Y+2, r25	; 0x02
    8d80:	89 83       	std	Y+1, r24	; 0x01
    8d82:	7c 83       	std	Y+4, r23	; 0x04
    8d84:	6b 83       	std	Y+3, r22	; 0x03
    8d86:	5e 83       	std	Y+6, r21	; 0x06
    8d88:	4d 83       	std	Y+5, r20	; 0x05
    8d8a:	38 87       	std	Y+8, r19	; 0x08
    8d8c:	2f 83       	std	Y+7, r18	; 0x07
    8d8e:	1a 87       	std	Y+10, r17	; 0x0a
    8d90:	09 87       	std	Y+9, r16	; 0x09
    8d92:	fc 86       	std	Y+12, r15	; 0x0c
    8d94:	eb 86       	std	Y+11, r14	; 0x0b
	Task(delay, period),
	radioInterface(radioInterface),
	model(model),
	pidController(pidController)
    8d96:	89 81       	ldd	r24, Y+1	; 0x01
    8d98:	9a 81       	ldd	r25, Y+2	; 0x02
    8d9a:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d9c:	5c 85       	ldd	r21, Y+12	; 0x0c
    8d9e:	29 85       	ldd	r18, Y+9	; 0x09
    8da0:	3a 85       	ldd	r19, Y+10	; 0x0a
    8da2:	b9 01       	movw	r22, r18
    8da4:	0e 94 96 49 	call	0x932c	; 0x932c <_ZN10helicopter5tasks4TaskC1Eii>
    8da8:	89 81       	ldd	r24, Y+1	; 0x01
    8daa:	9a 81       	ldd	r25, Y+2	; 0x02
    8dac:	22 e8       	ldi	r18, 0x82	; 130
    8dae:	32 e0       	ldi	r19, 0x02	; 2
    8db0:	fc 01       	movw	r30, r24
    8db2:	31 83       	std	Z+1, r19	; 0x01
    8db4:	20 83       	st	Z, r18
    8db6:	89 81       	ldd	r24, Y+1	; 0x01
    8db8:	9a 81       	ldd	r25, Y+2	; 0x02
    8dba:	2b 81       	ldd	r18, Y+3	; 0x03
    8dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    8dbe:	fc 01       	movw	r30, r24
    8dc0:	30 87       	std	Z+8, r19	; 0x08
    8dc2:	27 83       	std	Z+7, r18	; 0x07
    8dc4:	89 81       	ldd	r24, Y+1	; 0x01
    8dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    8dc8:	2d 81       	ldd	r18, Y+5	; 0x05
    8dca:	3e 81       	ldd	r19, Y+6	; 0x06
    8dcc:	fc 01       	movw	r30, r24
    8dce:	32 87       	std	Z+10, r19	; 0x0a
    8dd0:	21 87       	std	Z+9, r18	; 0x09
    8dd2:	89 81       	ldd	r24, Y+1	; 0x01
    8dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    8dd6:	2f 81       	ldd	r18, Y+7	; 0x07
    8dd8:	38 85       	ldd	r19, Y+8	; 0x08
    8dda:	fc 01       	movw	r30, r24
    8ddc:	34 87       	std	Z+12, r19	; 0x0c
    8dde:	23 87       	std	Z+11, r18	; 0x0b
{
	
}
    8de0:	2c 96       	adiw	r28, 0x0c	; 12
    8de2:	0f b6       	in	r0, 0x3f	; 63
    8de4:	f8 94       	cli
    8de6:	de bf       	out	0x3e, r29	; 62
    8de8:	0f be       	out	0x3f, r0	; 63
    8dea:	cd bf       	out	0x3d, r28	; 61
    8dec:	df 91       	pop	r29
    8dee:	cf 91       	pop	r28
    8df0:	1f 91       	pop	r17
    8df2:	0f 91       	pop	r16
    8df4:	ff 90       	pop	r15
    8df6:	ef 90       	pop	r14
    8df8:	08 95       	ret

00008dfa <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:

void SimTelemetryTask::runTaskImpl() 
{
    8dfa:	cf 93       	push	r28
    8dfc:	df 93       	push	r29
    8dfe:	cd b7       	in	r28, 0x3d	; 61
    8e00:	de b7       	in	r29, 0x3e	; 62
    8e02:	2d 97       	sbiw	r28, 0x0d	; 13
    8e04:	0f b6       	in	r0, 0x3f	; 63
    8e06:	f8 94       	cli
    8e08:	de bf       	out	0x3e, r29	; 62
    8e0a:	0f be       	out	0x3f, r0	; 63
    8e0c:	cd bf       	out	0x3d, r28	; 61
    8e0e:	9d 87       	std	Y+13, r25	; 0x0d
    8e10:	8c 87       	std	Y+12, r24	; 0x0c
	
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    8e12:	ce 01       	movw	r24, r28
    8e14:	05 96       	adiw	r24, 0x05	; 5
    8e16:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    8e1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e1e:	fc 01       	movw	r30, r24
    8e20:	87 81       	ldd	r24, Z+7	; 0x07
    8e22:	90 85       	ldd	r25, Z+8	; 0x08
    8e24:	9e 01       	movw	r18, r28
    8e26:	2b 5f       	subi	r18, 0xFB	; 251
    8e28:	3f 4f       	sbci	r19, 0xFF	; 255
    8e2a:	b9 01       	movw	r22, r18
    8e2c:	0e 94 8b 24 	call	0x4916	; 0x4916 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    8e30:	9a 83       	std	Y+2, r25	; 0x02
    8e32:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    8e34:	89 81       	ldd	r24, Y+1	; 0x01
    8e36:	9a 81       	ldd	r25, Y+2	; 0x02
    8e38:	00 97       	sbiw	r24, 0x00	; 0
    8e3a:	09 f0       	breq	.+2      	; 0x8e3e <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x44>
    8e3c:	ac c1       	rjmp	.+856    	; 0x9196 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x39c>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    8e3e:	1b 86       	std	Y+11, r1	; 0x0b
    8e40:	1a 86       	std	Y+10, r1	; 0x0a
	
		status = radioInterface->receive(message);
    8e42:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e44:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e46:	fc 01       	movw	r30, r24
    8e48:	87 81       	ldd	r24, Z+7	; 0x07
    8e4a:	90 85       	ldd	r25, Z+8	; 0x08
    8e4c:	9e 01       	movw	r18, r28
    8e4e:	26 5f       	subi	r18, 0xF6	; 246
    8e50:	3f 4f       	sbci	r19, 0xFF	; 255
    8e52:	b9 01       	movw	r22, r18
    8e54:	0e 94 89 25 	call	0x4b12	; 0x4b12 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    8e58:	9a 83       	std	Y+2, r25	; 0x02
    8e5a:	89 83       	std	Y+1, r24	; 0x01
	
		if (status == 0 && message != NULL)
    8e5c:	89 81       	ldd	r24, Y+1	; 0x01
    8e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    8e60:	00 97       	sbiw	r24, 0x00	; 0
    8e62:	09 f0       	breq	.+2      	; 0x8e66 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x6c>
    8e64:	98 c1       	rjmp	.+816    	; 0x9196 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x39c>
    8e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e68:	9b 85       	ldd	r25, Y+11	; 0x0b
    8e6a:	00 97       	sbiw	r24, 0x00	; 0
    8e6c:	09 f4       	brne	.+2      	; 0x8e70 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x76>
    8e6e:	93 c1       	rjmp	.+806    	; 0x9196 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x39c>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    8e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    8e74:	9c 83       	std	Y+4, r25	; 0x04
    8e76:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			telemMsg->updateModelFromMessageFromSimulator(model);
    8e78:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e7a:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e7c:	fc 01       	movw	r30, r24
    8e7e:	21 85       	ldd	r18, Z+9	; 0x09
    8e80:	32 85       	ldd	r19, Z+10	; 0x0a
    8e82:	8b 81       	ldd	r24, Y+3	; 0x03
    8e84:	9c 81       	ldd	r25, Y+4	; 0x04
    8e86:	b9 01       	movw	r22, r18
    8e88:	0e 94 8a 3a 	call	0x7514	; 0x7514 <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>
			
			pidController->setYawIntegralGain(telemMsg->YawIntegralGain);
    8e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    8e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    8e90:	fc 01       	movw	r30, r24
    8e92:	85 8d       	ldd	r24, Z+29	; 0x1d
    8e94:	96 8d       	ldd	r25, Z+30	; 0x1e
    8e96:	a7 8d       	ldd	r26, Z+31	; 0x1f
    8e98:	b0 a1       	ldd	r27, Z+32	; 0x20
    8e9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    8e9c:	3d 85       	ldd	r19, Y+13	; 0x0d
    8e9e:	f9 01       	movw	r30, r18
    8ea0:	23 85       	ldd	r18, Z+11	; 0x0b
    8ea2:	34 85       	ldd	r19, Z+12	; 0x0c
    8ea4:	ac 01       	movw	r20, r24
    8ea6:	bd 01       	movw	r22, r26
    8ea8:	c9 01       	movw	r24, r18
    8eaa:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEf>
			pidController->setYawDerivativeGain(telemMsg->YawDerivativeGain);
    8eae:	8b 81       	ldd	r24, Y+3	; 0x03
    8eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    8eb2:	fc 01       	movw	r30, r24
    8eb4:	81 a1       	ldd	r24, Z+33	; 0x21
    8eb6:	92 a1       	ldd	r25, Z+34	; 0x22
    8eb8:	a3 a1       	ldd	r26, Z+35	; 0x23
    8eba:	b4 a1       	ldd	r27, Z+36	; 0x24
    8ebc:	2c 85       	ldd	r18, Y+12	; 0x0c
    8ebe:	3d 85       	ldd	r19, Y+13	; 0x0d
    8ec0:	f9 01       	movw	r30, r18
    8ec2:	23 85       	ldd	r18, Z+11	; 0x0b
    8ec4:	34 85       	ldd	r19, Z+12	; 0x0c
    8ec6:	ac 01       	movw	r20, r24
    8ec8:	bd 01       	movw	r22, r26
    8eca:	c9 01       	movw	r24, r18
    8ecc:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEf>
			pidController->setYawProportionalGain(telemMsg->YawProportionalGain);
    8ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    8ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    8ed4:	fc 01       	movw	r30, r24
    8ed6:	85 a1       	ldd	r24, Z+37	; 0x25
    8ed8:	96 a1       	ldd	r25, Z+38	; 0x26
    8eda:	a7 a1       	ldd	r26, Z+39	; 0x27
    8edc:	b0 a5       	ldd	r27, Z+40	; 0x28
    8ede:	2c 85       	ldd	r18, Y+12	; 0x0c
    8ee0:	3d 85       	ldd	r19, Y+13	; 0x0d
    8ee2:	f9 01       	movw	r30, r18
    8ee4:	23 85       	ldd	r18, Z+11	; 0x0b
    8ee6:	34 85       	ldd	r19, Z+12	; 0x0c
    8ee8:	ac 01       	movw	r20, r24
    8eea:	bd 01       	movw	r22, r26
    8eec:	c9 01       	movw	r24, r18
    8eee:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEf>
			pidController->setYawAntiWindupGain(telemMsg->YawAntiWindupGain);
    8ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    8ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    8ef6:	fc 01       	movw	r30, r24
    8ef8:	81 a5       	ldd	r24, Z+41	; 0x29
    8efa:	92 a5       	ldd	r25, Z+42	; 0x2a
    8efc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8efe:	b4 a5       	ldd	r27, Z+44	; 0x2c
    8f00:	2c 85       	ldd	r18, Y+12	; 0x0c
    8f02:	3d 85       	ldd	r19, Y+13	; 0x0d
    8f04:	f9 01       	movw	r30, r18
    8f06:	23 85       	ldd	r18, Z+11	; 0x0b
    8f08:	34 85       	ldd	r19, Z+12	; 0x0c
    8f0a:	ac 01       	movw	r20, r24
    8f0c:	bd 01       	movw	r22, r26
    8f0e:	c9 01       	movw	r24, r18
    8f10:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEf>
		
			pidController->setXIntegralGain(telemMsg->XIntegralGain);
    8f14:	8b 81       	ldd	r24, Y+3	; 0x03
    8f16:	9c 81       	ldd	r25, Y+4	; 0x04
    8f18:	87 5b       	subi	r24, 0xB7	; 183
    8f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    8f1c:	fc 01       	movw	r30, r24
    8f1e:	80 81       	ld	r24, Z
    8f20:	91 81       	ldd	r25, Z+1	; 0x01
    8f22:	a2 81       	ldd	r26, Z+2	; 0x02
    8f24:	b3 81       	ldd	r27, Z+3	; 0x03
    8f26:	2c 85       	ldd	r18, Y+12	; 0x0c
    8f28:	3d 85       	ldd	r19, Y+13	; 0x0d
    8f2a:	f9 01       	movw	r30, r18
    8f2c:	23 85       	ldd	r18, Z+11	; 0x0b
    8f2e:	34 85       	ldd	r19, Z+12	; 0x0c
    8f30:	ac 01       	movw	r20, r24
    8f32:	bd 01       	movw	r22, r26
    8f34:	c9 01       	movw	r24, r18
    8f36:	0e 94 81 1b 	call	0x3702	; 0x3702 <_ZN10helicopter10controller13PIDController16setXIntegralGainEf>
			pidController->setXDerivativeGain(telemMsg->XDerivativeGain);
    8f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    8f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    8f3e:	83 5b       	subi	r24, 0xB3	; 179
    8f40:	9f 4f       	sbci	r25, 0xFF	; 255
    8f42:	fc 01       	movw	r30, r24
    8f44:	80 81       	ld	r24, Z
    8f46:	91 81       	ldd	r25, Z+1	; 0x01
    8f48:	a2 81       	ldd	r26, Z+2	; 0x02
    8f4a:	b3 81       	ldd	r27, Z+3	; 0x03
    8f4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    8f4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    8f50:	f9 01       	movw	r30, r18
    8f52:	23 85       	ldd	r18, Z+11	; 0x0b
    8f54:	34 85       	ldd	r19, Z+12	; 0x0c
    8f56:	ac 01       	movw	r20, r24
    8f58:	bd 01       	movw	r22, r26
    8f5a:	c9 01       	movw	r24, r18
    8f5c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_ZN10helicopter10controller13PIDController18setXDerivativeGainEf>
			pidController->setXProportionalGain(telemMsg->XProportionalGain);
    8f60:	8b 81       	ldd	r24, Y+3	; 0x03
    8f62:	9c 81       	ldd	r25, Y+4	; 0x04
    8f64:	8f 5a       	subi	r24, 0xAF	; 175
    8f66:	9f 4f       	sbci	r25, 0xFF	; 255
    8f68:	fc 01       	movw	r30, r24
    8f6a:	80 81       	ld	r24, Z
    8f6c:	91 81       	ldd	r25, Z+1	; 0x01
    8f6e:	a2 81       	ldd	r26, Z+2	; 0x02
    8f70:	b3 81       	ldd	r27, Z+3	; 0x03
    8f72:	2c 85       	ldd	r18, Y+12	; 0x0c
    8f74:	3d 85       	ldd	r19, Y+13	; 0x0d
    8f76:	f9 01       	movw	r30, r18
    8f78:	23 85       	ldd	r18, Z+11	; 0x0b
    8f7a:	34 85       	ldd	r19, Z+12	; 0x0c
    8f7c:	ac 01       	movw	r20, r24
    8f7e:	bd 01       	movw	r22, r26
    8f80:	c9 01       	movw	r24, r18
    8f82:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN10helicopter10controller13PIDController20setXProportionalGainEf>
			pidController->setXAntiWindupGain(telemMsg->XAntiWindupGain);
    8f86:	8b 81       	ldd	r24, Y+3	; 0x03
    8f88:	9c 81       	ldd	r25, Y+4	; 0x04
    8f8a:	8b 5a       	subi	r24, 0xAB	; 171
    8f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    8f8e:	fc 01       	movw	r30, r24
    8f90:	80 81       	ld	r24, Z
    8f92:	91 81       	ldd	r25, Z+1	; 0x01
    8f94:	a2 81       	ldd	r26, Z+2	; 0x02
    8f96:	b3 81       	ldd	r27, Z+3	; 0x03
    8f98:	2c 85       	ldd	r18, Y+12	; 0x0c
    8f9a:	3d 85       	ldd	r19, Y+13	; 0x0d
    8f9c:	f9 01       	movw	r30, r18
    8f9e:	23 85       	ldd	r18, Z+11	; 0x0b
    8fa0:	34 85       	ldd	r19, Z+12	; 0x0c
    8fa2:	ac 01       	movw	r20, r24
    8fa4:	bd 01       	movw	r22, r26
    8fa6:	c9 01       	movw	r24, r18
    8fa8:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN10helicopter10controller13PIDController18setXAntiWindupGainEf>
			pidController->setLongitudeInnerLoopGain(telemMsg->LongitudeInnerLoopGain);
    8fac:	8b 81       	ldd	r24, Y+3	; 0x03
    8fae:	9c 81       	ldd	r25, Y+4	; 0x04
    8fb0:	87 5a       	subi	r24, 0xA7	; 167
    8fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    8fb4:	fc 01       	movw	r30, r24
    8fb6:	80 81       	ld	r24, Z
    8fb8:	91 81       	ldd	r25, Z+1	; 0x01
    8fba:	a2 81       	ldd	r26, Z+2	; 0x02
    8fbc:	b3 81       	ldd	r27, Z+3	; 0x03
    8fbe:	2c 85       	ldd	r18, Y+12	; 0x0c
    8fc0:	3d 85       	ldd	r19, Y+13	; 0x0d
    8fc2:	f9 01       	movw	r30, r18
    8fc4:	23 85       	ldd	r18, Z+11	; 0x0b
    8fc6:	34 85       	ldd	r19, Z+12	; 0x0c
    8fc8:	ac 01       	movw	r20, r24
    8fca:	bd 01       	movw	r22, r26
    8fcc:	c9 01       	movw	r24, r18
    8fce:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN10helicopter10controller13PIDController25setLongitudeInnerLoopGainEf>
			pidController->setPitchAngularVelocityGain(telemMsg->PitchAngularVelocityGain);
    8fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    8fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    8fd6:	8b 59       	subi	r24, 0x9B	; 155
    8fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    8fda:	fc 01       	movw	r30, r24
    8fdc:	80 81       	ld	r24, Z
    8fde:	91 81       	ldd	r25, Z+1	; 0x01
    8fe0:	a2 81       	ldd	r26, Z+2	; 0x02
    8fe2:	b3 81       	ldd	r27, Z+3	; 0x03
    8fe4:	2c 85       	ldd	r18, Y+12	; 0x0c
    8fe6:	3d 85       	ldd	r19, Y+13	; 0x0d
    8fe8:	f9 01       	movw	r30, r18
    8fea:	23 85       	ldd	r18, Z+11	; 0x0b
    8fec:	34 85       	ldd	r19, Z+12	; 0x0c
    8fee:	ac 01       	movw	r20, r24
    8ff0:	bd 01       	movw	r22, r26
    8ff2:	c9 01       	movw	r24, r18
    8ff4:	0e 94 21 1c 	call	0x3842	; 0x3842 <_ZN10helicopter10controller13PIDController27setPitchAngularVelocityGainEf>
				
			pidController->setYIntegralGain(telemMsg->YIntegralGain);
    8ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    8ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    8ffc:	8b 57       	subi	r24, 0x7B	; 123
    8ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    9000:	fc 01       	movw	r30, r24
    9002:	80 81       	ld	r24, Z
    9004:	91 81       	ldd	r25, Z+1	; 0x01
    9006:	a2 81       	ldd	r26, Z+2	; 0x02
    9008:	b3 81       	ldd	r27, Z+3	; 0x03
    900a:	2c 85       	ldd	r18, Y+12	; 0x0c
    900c:	3d 85       	ldd	r19, Y+13	; 0x0d
    900e:	f9 01       	movw	r30, r18
    9010:	23 85       	ldd	r18, Z+11	; 0x0b
    9012:	34 85       	ldd	r19, Z+12	; 0x0c
    9014:	ac 01       	movw	r20, r24
    9016:	bd 01       	movw	r22, r26
    9018:	c9 01       	movw	r24, r18
    901a:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN10helicopter10controller13PIDController16setYIntegralGainEf>
			pidController->setYDerivativeGain(telemMsg->YDerivativeGain);
    901e:	8b 81       	ldd	r24, Y+3	; 0x03
    9020:	9c 81       	ldd	r25, Y+4	; 0x04
    9022:	87 57       	subi	r24, 0x77	; 119
    9024:	9f 4f       	sbci	r25, 0xFF	; 255
    9026:	fc 01       	movw	r30, r24
    9028:	80 81       	ld	r24, Z
    902a:	91 81       	ldd	r25, Z+1	; 0x01
    902c:	a2 81       	ldd	r26, Z+2	; 0x02
    902e:	b3 81       	ldd	r27, Z+3	; 0x03
    9030:	2c 85       	ldd	r18, Y+12	; 0x0c
    9032:	3d 85       	ldd	r19, Y+13	; 0x0d
    9034:	f9 01       	movw	r30, r18
    9036:	23 85       	ldd	r18, Z+11	; 0x0b
    9038:	34 85       	ldd	r19, Z+12	; 0x0c
    903a:	ac 01       	movw	r20, r24
    903c:	bd 01       	movw	r22, r26
    903e:	c9 01       	movw	r24, r18
    9040:	0e 94 a7 1c 	call	0x394e	; 0x394e <_ZN10helicopter10controller13PIDController18setYDerivativeGainEf>
			pidController->setYProportionalGain(telemMsg->YProportionalGain);
    9044:	8b 81       	ldd	r24, Y+3	; 0x03
    9046:	9c 81       	ldd	r25, Y+4	; 0x04
    9048:	83 57       	subi	r24, 0x73	; 115
    904a:	9f 4f       	sbci	r25, 0xFF	; 255
    904c:	fc 01       	movw	r30, r24
    904e:	80 81       	ld	r24, Z
    9050:	91 81       	ldd	r25, Z+1	; 0x01
    9052:	a2 81       	ldd	r26, Z+2	; 0x02
    9054:	b3 81       	ldd	r27, Z+3	; 0x03
    9056:	2c 85       	ldd	r18, Y+12	; 0x0c
    9058:	3d 85       	ldd	r19, Y+13	; 0x0d
    905a:	f9 01       	movw	r30, r18
    905c:	23 85       	ldd	r18, Z+11	; 0x0b
    905e:	34 85       	ldd	r19, Z+12	; 0x0c
    9060:	ac 01       	movw	r20, r24
    9062:	bd 01       	movw	r22, r26
    9064:	c9 01       	movw	r24, r18
    9066:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN10helicopter10controller13PIDController20setYProportionalGainEf>
			pidController->setYAntiWindupGain(telemMsg->YAntiWindupGain);
    906a:	8b 81       	ldd	r24, Y+3	; 0x03
    906c:	9c 81       	ldd	r25, Y+4	; 0x04
    906e:	8f 56       	subi	r24, 0x6F	; 111
    9070:	9f 4f       	sbci	r25, 0xFF	; 255
    9072:	fc 01       	movw	r30, r24
    9074:	80 81       	ld	r24, Z
    9076:	91 81       	ldd	r25, Z+1	; 0x01
    9078:	a2 81       	ldd	r26, Z+2	; 0x02
    907a:	b3 81       	ldd	r27, Z+3	; 0x03
    907c:	2c 85       	ldd	r18, Y+12	; 0x0c
    907e:	3d 85       	ldd	r19, Y+13	; 0x0d
    9080:	f9 01       	movw	r30, r18
    9082:	23 85       	ldd	r18, Z+11	; 0x0b
    9084:	34 85       	ldd	r19, Z+12	; 0x0c
    9086:	ac 01       	movw	r20, r24
    9088:	bd 01       	movw	r22, r26
    908a:	c9 01       	movw	r24, r18
    908c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN10helicopter10controller13PIDController18setYAntiWindupGainEf>
			pidController->setLateralInnerLoopGain(telemMsg->LateralInnerLoopGain);
    9090:	8b 81       	ldd	r24, Y+3	; 0x03
    9092:	9c 81       	ldd	r25, Y+4	; 0x04
    9094:	8b 56       	subi	r24, 0x6B	; 107
    9096:	9f 4f       	sbci	r25, 0xFF	; 255
    9098:	fc 01       	movw	r30, r24
    909a:	80 81       	ld	r24, Z
    909c:	91 81       	ldd	r25, Z+1	; 0x01
    909e:	a2 81       	ldd	r26, Z+2	; 0x02
    90a0:	b3 81       	ldd	r27, Z+3	; 0x03
    90a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    90a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    90a6:	f9 01       	movw	r30, r18
    90a8:	23 85       	ldd	r18, Z+11	; 0x0b
    90aa:	34 85       	ldd	r19, Z+12	; 0x0c
    90ac:	ac 01       	movw	r20, r24
    90ae:	bd 01       	movw	r22, r26
    90b0:	c9 01       	movw	r24, r18
    90b2:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN10helicopter10controller13PIDController23setLateralInnerLoopGainEf>
			pidController->setRollAngularVelocityGain(telemMsg->RollAngularVelocityGain);
    90b6:	8b 81       	ldd	r24, Y+3	; 0x03
    90b8:	9c 81       	ldd	r25, Y+4	; 0x04
    90ba:	8f 55       	subi	r24, 0x5F	; 95
    90bc:	9f 4f       	sbci	r25, 0xFF	; 255
    90be:	fc 01       	movw	r30, r24
    90c0:	80 81       	ld	r24, Z
    90c2:	91 81       	ldd	r25, Z+1	; 0x01
    90c4:	a2 81       	ldd	r26, Z+2	; 0x02
    90c6:	b3 81       	ldd	r27, Z+3	; 0x03
    90c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    90ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    90cc:	f9 01       	movw	r30, r18
    90ce:	23 85       	ldd	r18, Z+11	; 0x0b
    90d0:	34 85       	ldd	r19, Z+12	; 0x0c
    90d2:	ac 01       	movw	r20, r24
    90d4:	bd 01       	movw	r22, r26
    90d6:	c9 01       	movw	r24, r18
    90d8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <_ZN10helicopter10controller13PIDController26setRollAngularVelocityGainEf>
			
			pidController->setZIntegralGain(telemMsg->ZIntegralGain);
    90dc:	8b 81       	ldd	r24, Y+3	; 0x03
    90de:	9c 81       	ldd	r25, Y+4	; 0x04
    90e0:	83 54       	subi	r24, 0x43	; 67
    90e2:	9f 4f       	sbci	r25, 0xFF	; 255
    90e4:	fc 01       	movw	r30, r24
    90e6:	80 81       	ld	r24, Z
    90e8:	91 81       	ldd	r25, Z+1	; 0x01
    90ea:	a2 81       	ldd	r26, Z+2	; 0x02
    90ec:	b3 81       	ldd	r27, Z+3	; 0x03
    90ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    90f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    90f2:	f9 01       	movw	r30, r18
    90f4:	23 85       	ldd	r18, Z+11	; 0x0b
    90f6:	34 85       	ldd	r19, Z+12	; 0x0c
    90f8:	ac 01       	movw	r20, r24
    90fa:	bd 01       	movw	r22, r26
    90fc:	c9 01       	movw	r24, r18
    90fe:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <_ZN10helicopter10controller13PIDController16setZIntegralGainEf>
			pidController->setZDerivativeGain(telemMsg->ZDerivativeGain);
    9102:	8b 81       	ldd	r24, Y+3	; 0x03
    9104:	9c 81       	ldd	r25, Y+4	; 0x04
    9106:	8f 53       	subi	r24, 0x3F	; 63
    9108:	9f 4f       	sbci	r25, 0xFF	; 255
    910a:	fc 01       	movw	r30, r24
    910c:	80 81       	ld	r24, Z
    910e:	91 81       	ldd	r25, Z+1	; 0x01
    9110:	a2 81       	ldd	r26, Z+2	; 0x02
    9112:	b3 81       	ldd	r27, Z+3	; 0x03
    9114:	2c 85       	ldd	r18, Y+12	; 0x0c
    9116:	3d 85       	ldd	r19, Y+13	; 0x0d
    9118:	f9 01       	movw	r30, r18
    911a:	23 85       	ldd	r18, Z+11	; 0x0b
    911c:	34 85       	ldd	r19, Z+12	; 0x0c
    911e:	ac 01       	movw	r20, r24
    9120:	bd 01       	movw	r22, r26
    9122:	c9 01       	movw	r24, r18
    9124:	0e 94 48 46 	call	0x8c90	; 0x8c90 <_ZN10helicopter10controller13PIDController18setZDerivativeGainEf>
			pidController->setZProportionalGain(telemMsg->ZProportionalGain);
    9128:	8b 81       	ldd	r24, Y+3	; 0x03
    912a:	9c 81       	ldd	r25, Y+4	; 0x04
    912c:	8b 53       	subi	r24, 0x3B	; 59
    912e:	9f 4f       	sbci	r25, 0xFF	; 255
    9130:	fc 01       	movw	r30, r24
    9132:	80 81       	ld	r24, Z
    9134:	91 81       	ldd	r25, Z+1	; 0x01
    9136:	a2 81       	ldd	r26, Z+2	; 0x02
    9138:	b3 81       	ldd	r27, Z+3	; 0x03
    913a:	2c 85       	ldd	r18, Y+12	; 0x0c
    913c:	3d 85       	ldd	r19, Y+13	; 0x0d
    913e:	f9 01       	movw	r30, r18
    9140:	23 85       	ldd	r18, Z+11	; 0x0b
    9142:	34 85       	ldd	r19, Z+12	; 0x0c
    9144:	ac 01       	movw	r20, r24
    9146:	bd 01       	movw	r22, r26
    9148:	c9 01       	movw	r24, r18
    914a:	0e 94 6b 46 	call	0x8cd6	; 0x8cd6 <_ZN10helicopter10controller13PIDController20setZProportionalGainEf>
			pidController->setZAntiWindupGain(telemMsg->ZAntiWindupGain);															
    914e:	8b 81       	ldd	r24, Y+3	; 0x03
    9150:	9c 81       	ldd	r25, Y+4	; 0x04
    9152:	87 53       	subi	r24, 0x37	; 55
    9154:	9f 4f       	sbci	r25, 0xFF	; 255
    9156:	fc 01       	movw	r30, r24
    9158:	80 81       	ld	r24, Z
    915a:	91 81       	ldd	r25, Z+1	; 0x01
    915c:	a2 81       	ldd	r26, Z+2	; 0x02
    915e:	b3 81       	ldd	r27, Z+3	; 0x03
    9160:	2c 85       	ldd	r18, Y+12	; 0x0c
    9162:	3d 85       	ldd	r19, Y+13	; 0x0d
    9164:	f9 01       	movw	r30, r18
    9166:	23 85       	ldd	r18, Z+11	; 0x0b
    9168:	34 85       	ldd	r19, Z+12	; 0x0c
    916a:	ac 01       	movw	r20, r24
    916c:	bd 01       	movw	r22, r26
    916e:	c9 01       	movw	r24, r18
    9170:	0e 94 8e 46 	call	0x8d1c	; 0x8d1c <_ZN10helicopter10controller13PIDController18setZAntiWindupGainEf>
		
			delete message;
    9174:	8a 85       	ldd	r24, Y+10	; 0x0a
    9176:	9b 85       	ldd	r25, Y+11	; 0x0b
    9178:	00 97       	sbiw	r24, 0x00	; 0
    917a:	69 f0       	breq	.+26     	; 0x9196 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x39c>
    917c:	8a 85       	ldd	r24, Y+10	; 0x0a
    917e:	9b 85       	ldd	r25, Y+11	; 0x0b
    9180:	fc 01       	movw	r30, r24
    9182:	80 81       	ld	r24, Z
    9184:	91 81       	ldd	r25, Z+1	; 0x01
    9186:	02 96       	adiw	r24, 0x02	; 2
    9188:	fc 01       	movw	r30, r24
    918a:	20 81       	ld	r18, Z
    918c:	31 81       	ldd	r19, Z+1	; 0x01
    918e:	8a 85       	ldd	r24, Y+10	; 0x0a
    9190:	9b 85       	ldd	r25, Y+11	; 0x0b
    9192:	f9 01       	movw	r30, r18
    9194:	19 95       	eicall
		}
	}
	
	//Update instrumentation fields
	switch (status)
    9196:	89 81       	ldd	r24, Y+1	; 0x01
    9198:	9a 81       	ldd	r25, Y+2	; 0x02
    919a:	8e 3f       	cpi	r24, 0xFE	; 254
    919c:	ff ef       	ldi	r31, 0xFF	; 255
    919e:	9f 07       	cpc	r25, r31
    91a0:	69 f1       	breq	.+90     	; 0x91fc <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x402>
    91a2:	8f 3f       	cpi	r24, 0xFF	; 255
    91a4:	2f ef       	ldi	r18, 0xFF	; 255
    91a6:	92 07       	cpc	r25, r18
    91a8:	54 f4       	brge	.+20     	; 0x91be <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3c4>
    91aa:	8c 3f       	cpi	r24, 0xFC	; 252
    91ac:	ef ef       	ldi	r30, 0xFF	; 255
    91ae:	9e 07       	cpc	r25, r30
    91b0:	09 f4       	brne	.+2      	; 0x91b4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3ba>
    91b2:	52 c0       	rjmp	.+164    	; 0x9258 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x45e>
    91b4:	8d 3f       	cpi	r24, 0xFD	; 253
    91b6:	ff ef       	ldi	r31, 0xFF	; 255
    91b8:	9f 07       	cpc	r25, r31
    91ba:	b9 f1       	breq	.+110    	; 0x922a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x430>
    91bc:	64 c0       	rjmp	.+200    	; 0x9286 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x48c>
    91be:	8f 3f       	cpi	r24, 0xFF	; 255
    91c0:	2f ef       	ldi	r18, 0xFF	; 255
    91c2:	92 07       	cpc	r25, r18
    91c4:	21 f0       	breq	.+8      	; 0x91ce <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3d4>
    91c6:	00 97       	sbiw	r24, 0x00	; 0
    91c8:	09 f4       	brne	.+2      	; 0x91cc <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3d2>
    91ca:	5e c0       	rjmp	.+188    	; 0x9288 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x48e>
    91cc:	5c c0       	rjmp	.+184    	; 0x9286 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x48c>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    91ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    91d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    91d2:	fc 01       	movw	r30, r24
    91d4:	81 85       	ldd	r24, Z+9	; 0x09
    91d6:	92 85       	ldd	r25, Z+10	; 0x0a
    91d8:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    91dc:	dc 01       	movw	r26, r24
    91de:	cb 01       	movw	r24, r22
    91e0:	01 96       	adiw	r24, 0x01	; 1
    91e2:	a1 1d       	adc	r26, r1
    91e4:	b1 1d       	adc	r27, r1
    91e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    91e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    91ea:	f9 01       	movw	r30, r18
    91ec:	21 85       	ldd	r18, Z+9	; 0x09
    91ee:	32 85       	ldd	r19, Z+10	; 0x0a
    91f0:	ac 01       	movw	r20, r24
    91f2:	bd 01       	movw	r22, r26
    91f4:	c9 01       	movw	r24, r18
    91f6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <_ZN10helicopter5model11SystemModel8TimeoutsEl>
			break;
    91fa:	47 c0       	rjmp	.+142    	; 0x928a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x490>
		case -2:
			model->SerialCommunicationBufferOverruns(model->SerialCommunicationBufferOverruns() + 1);
    91fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    91fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    9200:	fc 01       	movw	r30, r24
    9202:	81 85       	ldd	r24, Z+9	; 0x09
    9204:	92 85       	ldd	r25, Z+10	; 0x0a
    9206:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <_ZNK10helicopter5model11SystemModel33SerialCommunicationBufferOverrunsEv>
    920a:	dc 01       	movw	r26, r24
    920c:	cb 01       	movw	r24, r22
    920e:	01 96       	adiw	r24, 0x01	; 1
    9210:	a1 1d       	adc	r26, r1
    9212:	b1 1d       	adc	r27, r1
    9214:	2c 85       	ldd	r18, Y+12	; 0x0c
    9216:	3d 85       	ldd	r19, Y+13	; 0x0d
    9218:	f9 01       	movw	r30, r18
    921a:	21 85       	ldd	r18, Z+9	; 0x09
    921c:	32 85       	ldd	r19, Z+10	; 0x0a
    921e:	ac 01       	movw	r20, r24
    9220:	bd 01       	movw	r22, r26
    9222:	c9 01       	movw	r24, r18
    9224:	0e 94 02 46 	call	0x8c04	; 0x8c04 <_ZN10helicopter5model11SystemModel33SerialCommunicationBufferOverrunsEl>
			break;
    9228:	30 c0       	rjmp	.+96     	; 0x928a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x490>
		case -3:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    922a:	8c 85       	ldd	r24, Y+12	; 0x0c
    922c:	9d 85       	ldd	r25, Y+13	; 0x0d
    922e:	fc 01       	movw	r30, r24
    9230:	81 85       	ldd	r24, Z+9	; 0x09
    9232:	92 85       	ldd	r25, Z+10	; 0x0a
    9234:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    9238:	dc 01       	movw	r26, r24
    923a:	cb 01       	movw	r24, r22
    923c:	01 96       	adiw	r24, 0x01	; 1
    923e:	a1 1d       	adc	r26, r1
    9240:	b1 1d       	adc	r27, r1
    9242:	2c 85       	ldd	r18, Y+12	; 0x0c
    9244:	3d 85       	ldd	r19, Y+13	; 0x0d
    9246:	f9 01       	movw	r30, r18
    9248:	21 85       	ldd	r18, Z+9	; 0x09
    924a:	32 85       	ldd	r19, Z+10	; 0x0a
    924c:	ac 01       	movw	r20, r24
    924e:	bd 01       	movw	r22, r26
    9250:	c9 01       	movw	r24, r18
    9252:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl>
			break;
    9256:	19 c0       	rjmp	.+50     	; 0x928a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x490>
		case -4:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    9258:	8c 85       	ldd	r24, Y+12	; 0x0c
    925a:	9d 85       	ldd	r25, Y+13	; 0x0d
    925c:	fc 01       	movw	r30, r24
    925e:	81 85       	ldd	r24, Z+9	; 0x09
    9260:	92 85       	ldd	r25, Z+10	; 0x0a
    9262:	0e 94 67 2f 	call	0x5ece	; 0x5ece <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    9266:	dc 01       	movw	r26, r24
    9268:	cb 01       	movw	r24, r22
    926a:	01 96       	adiw	r24, 0x01	; 1
    926c:	a1 1d       	adc	r26, r1
    926e:	b1 1d       	adc	r27, r1
    9270:	2c 85       	ldd	r18, Y+12	; 0x0c
    9272:	3d 85       	ldd	r19, Y+13	; 0x0d
    9274:	f9 01       	movw	r30, r18
    9276:	21 85       	ldd	r18, Z+9	; 0x09
    9278:	32 85       	ldd	r19, Z+10	; 0x0a
    927a:	ac 01       	movw	r20, r24
    927c:	bd 01       	movw	r22, r26
    927e:	c9 01       	movw	r24, r18
    9280:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl>
		default:
			break;
    9284:	02 c0       	rjmp	.+4      	; 0x928a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x490>
    9286:	01 c0       	rjmp	.+2      	; 0x928a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x490>
	
	//Update instrumentation fields
	switch (status)
	{
		case 0:
			break;
    9288:	00 00       	nop
		case -4:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
		default:
			break;
		
	}
    928a:	ce 01       	movw	r24, r28
    928c:	05 96       	adiw	r24, 0x05	; 5
    928e:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    9292:	2d 96       	adiw	r28, 0x0d	; 13
    9294:	0f b6       	in	r0, 0x3f	; 63
    9296:	f8 94       	cli
    9298:	de bf       	out	0x3e, r29	; 62
    929a:	0f be       	out	0x3f, r0	; 63
    929c:	cd bf       	out	0x3d, r28	; 61
    929e:	df 91       	pop	r29
    92a0:	cf 91       	pop	r28
    92a2:	08 95       	ret

000092a4 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    92a4:	cf 93       	push	r28
    92a6:	df 93       	push	r29
    92a8:	1f 92       	push	r1
    92aa:	1f 92       	push	r1
    92ac:	cd b7       	in	r28, 0x3d	; 61
    92ae:	de b7       	in	r29, 0x3e	; 62
    92b0:	9a 83       	std	Y+2, r25	; 0x02
    92b2:	89 83       	std	Y+1, r24	; 0x01
    92b4:	89 81       	ldd	r24, Y+1	; 0x01
    92b6:	9a 81       	ldd	r25, Y+2	; 0x02
    92b8:	22 e8       	ldi	r18, 0x82	; 130
    92ba:	32 e0       	ldi	r19, 0x02	; 2
    92bc:	fc 01       	movw	r30, r24
    92be:	31 83       	std	Z+1, r19	; 0x01
    92c0:	20 83       	st	Z, r18
    92c2:	89 81       	ldd	r24, Y+1	; 0x01
    92c4:	9a 81       	ldd	r25, Y+2	; 0x02
    92c6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    92ca:	80 e0       	ldi	r24, 0x00	; 0
    92cc:	90 e0       	ldi	r25, 0x00	; 0
    92ce:	81 70       	andi	r24, 0x01	; 1
    92d0:	99 27       	eor	r25, r25
    92d2:	00 97       	sbiw	r24, 0x00	; 0
    92d4:	21 f0       	breq	.+8      	; 0x92de <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev+0x3a>
    92d6:	89 81       	ldd	r24, Y+1	; 0x01
    92d8:	9a 81       	ldd	r25, Y+2	; 0x02
    92da:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    92de:	0f 90       	pop	r0
    92e0:	0f 90       	pop	r0
    92e2:	df 91       	pop	r29
    92e4:	cf 91       	pop	r28
    92e6:	08 95       	ret

000092e8 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    92e8:	cf 93       	push	r28
    92ea:	df 93       	push	r29
    92ec:	1f 92       	push	r1
    92ee:	1f 92       	push	r1
    92f0:	cd b7       	in	r28, 0x3d	; 61
    92f2:	de b7       	in	r29, 0x3e	; 62
    92f4:	9a 83       	std	Y+2, r25	; 0x02
    92f6:	89 83       	std	Y+1, r24	; 0x01
    92f8:	89 81       	ldd	r24, Y+1	; 0x01
    92fa:	9a 81       	ldd	r25, Y+2	; 0x02
    92fc:	0e 94 52 49 	call	0x92a4	; 0x92a4 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
    9300:	89 81       	ldd	r24, Y+1	; 0x01
    9302:	9a 81       	ldd	r25, Y+2	; 0x02
    9304:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    9308:	0f 90       	pop	r0
    930a:	0f 90       	pop	r0
    930c:	df 91       	pop	r29
    930e:	cf 91       	pop	r28
    9310:	08 95       	ret

00009312 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    9312:	cf 93       	push	r28
    9314:	df 93       	push	r29
    9316:	1f 92       	push	r1
    9318:	1f 92       	push	r1
    931a:	cd b7       	in	r28, 0x3d	; 61
    931c:	de b7       	in	r29, 0x3e	; 62
    931e:	9a 83       	std	Y+2, r25	; 0x02
    9320:	89 83       	std	Y+1, r24	; 0x01
    9322:	0f 90       	pop	r0
    9324:	0f 90       	pop	r0
    9326:	df 91       	pop	r29
    9328:	cf 91       	pop	r28
    932a:	08 95       	ret

0000932c <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    932c:	cf 93       	push	r28
    932e:	df 93       	push	r29
    9330:	00 d0       	rcall	.+0      	; 0x9332 <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    9332:	00 d0       	rcall	.+0      	; 0x9334 <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    9334:	cd b7       	in	r28, 0x3d	; 61
    9336:	de b7       	in	r29, 0x3e	; 62
    9338:	9a 83       	std	Y+2, r25	; 0x02
    933a:	89 83       	std	Y+1, r24	; 0x01
    933c:	7c 83       	std	Y+4, r23	; 0x04
    933e:	6b 83       	std	Y+3, r22	; 0x03
    9340:	5e 83       	std	Y+6, r21	; 0x06
    9342:	4d 83       	std	Y+5, r20	; 0x05
    9344:	89 81       	ldd	r24, Y+1	; 0x01
    9346:	9a 81       	ldd	r25, Y+2	; 0x02
    9348:	20 e9       	ldi	r18, 0x90	; 144
    934a:	32 e0       	ldi	r19, 0x02	; 2
    934c:	fc 01       	movw	r30, r24
    934e:	31 83       	std	Z+1, r19	; 0x01
    9350:	20 83       	st	Z, r18
{
	this->delay = delay;
    9352:	89 81       	ldd	r24, Y+1	; 0x01
    9354:	9a 81       	ldd	r25, Y+2	; 0x02
    9356:	2b 81       	ldd	r18, Y+3	; 0x03
    9358:	3c 81       	ldd	r19, Y+4	; 0x04
    935a:	fc 01       	movw	r30, r24
    935c:	33 83       	std	Z+3, r19	; 0x03
    935e:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    9360:	89 81       	ldd	r24, Y+1	; 0x01
    9362:	9a 81       	ldd	r25, Y+2	; 0x02
    9364:	2d 81       	ldd	r18, Y+5	; 0x05
    9366:	3e 81       	ldd	r19, Y+6	; 0x06
    9368:	fc 01       	movw	r30, r24
    936a:	35 83       	std	Z+5, r19	; 0x05
    936c:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    936e:	89 81       	ldd	r24, Y+1	; 0x01
    9370:	9a 81       	ldd	r25, Y+2	; 0x02
    9372:	fc 01       	movw	r30, r24
    9374:	16 82       	std	Z+6, r1	; 0x06
}
    9376:	26 96       	adiw	r28, 0x06	; 6
    9378:	0f b6       	in	r0, 0x3f	; 63
    937a:	f8 94       	cli
    937c:	de bf       	out	0x3e, r29	; 62
    937e:	0f be       	out	0x3f, r0	; 63
    9380:	cd bf       	out	0x3d, r28	; 61
    9382:	df 91       	pop	r29
    9384:	cf 91       	pop	r28
    9386:	08 95       	ret

00009388 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    9388:	cf 93       	push	r28
    938a:	df 93       	push	r29
    938c:	1f 92       	push	r1
    938e:	1f 92       	push	r1
    9390:	cd b7       	in	r28, 0x3d	; 61
    9392:	de b7       	in	r29, 0x3e	; 62
    9394:	9a 83       	std	Y+2, r25	; 0x02
    9396:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    9398:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    939a:	89 81       	ldd	r24, Y+1	; 0x01
    939c:	9a 81       	ldd	r25, Y+2	; 0x02
    939e:	fc 01       	movw	r30, r24
    93a0:	80 81       	ld	r24, Z
    93a2:	91 81       	ldd	r25, Z+1	; 0x01
    93a4:	fc 01       	movw	r30, r24
    93a6:	20 81       	ld	r18, Z
    93a8:	31 81       	ldd	r19, Z+1	; 0x01
    93aa:	89 81       	ldd	r24, Y+1	; 0x01
    93ac:	9a 81       	ldd	r25, Y+2	; 0x02
    93ae:	f9 01       	movw	r30, r18
    93b0:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    93b2:	78 94       	sei
    93b4:	0f 90       	pop	r0
    93b6:	0f 90       	pop	r0
    93b8:	df 91       	pop	r29
    93ba:	cf 91       	pop	r28
    93bc:	08 95       	ret

000093be <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    93be:	0f 93       	push	r16
    93c0:	1f 93       	push	r17
    93c2:	cf 93       	push	r28
    93c4:	df 93       	push	r29
    93c6:	cd b7       	in	r28, 0x3d	; 61
    93c8:	de b7       	in	r29, 0x3e	; 62
    93ca:	2a 97       	sbiw	r28, 0x0a	; 10
    93cc:	0f b6       	in	r0, 0x3f	; 63
    93ce:	f8 94       	cli
    93d0:	de bf       	out	0x3e, r29	; 62
    93d2:	0f be       	out	0x3f, r0	; 63
    93d4:	cd bf       	out	0x3d, r28	; 61
    93d6:	9a 83       	std	Y+2, r25	; 0x02
    93d8:	89 83       	std	Y+1, r24	; 0x01
    93da:	7c 83       	std	Y+4, r23	; 0x04
    93dc:	6b 83       	std	Y+3, r22	; 0x03
    93de:	5e 83       	std	Y+6, r21	; 0x06
    93e0:	4d 83       	std	Y+5, r20	; 0x05
    93e2:	38 87       	std	Y+8, r19	; 0x08
    93e4:	2f 83       	std	Y+7, r18	; 0x07
    93e6:	1a 87       	std	Y+10, r17	; 0x0a
    93e8:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    93ea:	89 81       	ldd	r24, Y+1	; 0x01
    93ec:	9a 81       	ldd	r25, Y+2	; 0x02
    93ee:	49 85       	ldd	r20, Y+9	; 0x09
    93f0:	5a 85       	ldd	r21, Y+10	; 0x0a
    93f2:	2f 81       	ldd	r18, Y+7	; 0x07
    93f4:	38 85       	ldd	r19, Y+8	; 0x08
    93f6:	b9 01       	movw	r22, r18
    93f8:	0e 94 96 49 	call	0x932c	; 0x932c <_ZN10helicopter5tasks4TaskC1Eii>
    93fc:	89 81       	ldd	r24, Y+1	; 0x01
    93fe:	9a 81       	ldd	r25, Y+2	; 0x02
    9400:	2e e9       	ldi	r18, 0x9E	; 158
    9402:	32 e0       	ldi	r19, 0x02	; 2
    9404:	fc 01       	movw	r30, r24
    9406:	31 83       	std	Z+1, r19	; 0x01
    9408:	20 83       	st	Z, r18
    940a:	89 81       	ldd	r24, Y+1	; 0x01
    940c:	9a 81       	ldd	r25, Y+2	; 0x02
    940e:	2b 81       	ldd	r18, Y+3	; 0x03
    9410:	3c 81       	ldd	r19, Y+4	; 0x04
    9412:	fc 01       	movw	r30, r24
    9414:	30 87       	std	Z+8, r19	; 0x08
    9416:	27 83       	std	Z+7, r18	; 0x07
    9418:	89 81       	ldd	r24, Y+1	; 0x01
    941a:	9a 81       	ldd	r25, Y+2	; 0x02
    941c:	2d 81       	ldd	r18, Y+5	; 0x05
    941e:	3e 81       	ldd	r19, Y+6	; 0x06
    9420:	fc 01       	movw	r30, r24
    9422:	32 87       	std	Z+10, r19	; 0x0a
    9424:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    9426:	2a 96       	adiw	r28, 0x0a	; 10
    9428:	0f b6       	in	r0, 0x3f	; 63
    942a:	f8 94       	cli
    942c:	de bf       	out	0x3e, r29	; 62
    942e:	0f be       	out	0x3f, r0	; 63
    9430:	cd bf       	out	0x3d, r28	; 61
    9432:	df 91       	pop	r29
    9434:	cf 91       	pop	r28
    9436:	1f 91       	pop	r17
    9438:	0f 91       	pop	r16
    943a:	08 95       	ret

0000943c <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    943c:	cf 93       	push	r28
    943e:	df 93       	push	r29
    9440:	00 d0       	rcall	.+0      	; 0x9442 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    9442:	1f 92       	push	r1
    9444:	cd b7       	in	r28, 0x3d	; 61
    9446:	de b7       	in	r29, 0x3e	; 62
    9448:	9c 83       	std	Y+4, r25	; 0x04
    944a:	8b 83       	std	Y+3, r24	; 0x03
	//SystemTelemetryMessage *message = model->CreateTelemetryMessage();
	SystemTelemetryMessage *message = SystemTelemetryMessage::buildMessageFromModel(model);
    944c:	8b 81       	ldd	r24, Y+3	; 0x03
    944e:	9c 81       	ldd	r25, Y+4	; 0x04
    9450:	fc 01       	movw	r30, r24
    9452:	81 85       	ldd	r24, Z+9	; 0x09
    9454:	92 85       	ldd	r25, Z+10	; 0x0a
    9456:	0e 94 59 38 	call	0x70b2	; 0x70b2 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>
    945a:	9a 83       	std	Y+2, r25	; 0x02
    945c:	89 83       	std	Y+1, r24	; 0x01
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    945e:	8b 81       	ldd	r24, Y+3	; 0x03
    9460:	9c 81       	ldd	r25, Y+4	; 0x04
    9462:	fc 01       	movw	r30, r24
    9464:	87 81       	ldd	r24, Z+7	; 0x07
    9466:	90 85       	ldd	r25, Z+8	; 0x08
    9468:	29 81       	ldd	r18, Y+1	; 0x01
    946a:	3a 81       	ldd	r19, Y+2	; 0x02
    946c:	b9 01       	movw	r22, r18
    946e:	0e 94 8b 24 	call	0x4916	; 0x4916 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    9472:	89 81       	ldd	r24, Y+1	; 0x01
    9474:	9a 81       	ldd	r25, Y+2	; 0x02
    9476:	00 97       	sbiw	r24, 0x00	; 0
    9478:	69 f0       	breq	.+26     	; 0x9494 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    947a:	89 81       	ldd	r24, Y+1	; 0x01
    947c:	9a 81       	ldd	r25, Y+2	; 0x02
    947e:	fc 01       	movw	r30, r24
    9480:	80 81       	ld	r24, Z
    9482:	91 81       	ldd	r25, Z+1	; 0x01
    9484:	02 96       	adiw	r24, 0x02	; 2
    9486:	fc 01       	movw	r30, r24
    9488:	20 81       	ld	r18, Z
    948a:	31 81       	ldd	r19, Z+1	; 0x01
    948c:	89 81       	ldd	r24, Y+1	; 0x01
    948e:	9a 81       	ldd	r25, Y+2	; 0x02
    9490:	f9 01       	movw	r30, r18
    9492:	19 95       	eicall
    9494:	0f 90       	pop	r0
    9496:	0f 90       	pop	r0
    9498:	0f 90       	pop	r0
    949a:	0f 90       	pop	r0
    949c:	df 91       	pop	r29
    949e:	cf 91       	pop	r28
    94a0:	08 95       	ret

000094a2 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    94a2:	cf 93       	push	r28
    94a4:	df 93       	push	r29
    94a6:	1f 92       	push	r1
    94a8:	1f 92       	push	r1
    94aa:	cd b7       	in	r28, 0x3d	; 61
    94ac:	de b7       	in	r29, 0x3e	; 62
    94ae:	9a 83       	std	Y+2, r25	; 0x02
    94b0:	89 83       	std	Y+1, r24	; 0x01
    94b2:	89 81       	ldd	r24, Y+1	; 0x01
    94b4:	9a 81       	ldd	r25, Y+2	; 0x02
    94b6:	2e e9       	ldi	r18, 0x9E	; 158
    94b8:	32 e0       	ldi	r19, 0x02	; 2
    94ba:	fc 01       	movw	r30, r24
    94bc:	31 83       	std	Z+1, r19	; 0x01
    94be:	20 83       	st	Z, r18
    94c0:	89 81       	ldd	r24, Y+1	; 0x01
    94c2:	9a 81       	ldd	r25, Y+2	; 0x02
    94c4:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN10helicopter5tasks4TaskD1Ev>
    94c8:	80 e0       	ldi	r24, 0x00	; 0
    94ca:	90 e0       	ldi	r25, 0x00	; 0
    94cc:	81 70       	andi	r24, 0x01	; 1
    94ce:	99 27       	eor	r25, r25
    94d0:	00 97       	sbiw	r24, 0x00	; 0
    94d2:	21 f0       	breq	.+8      	; 0x94dc <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev+0x3a>
    94d4:	89 81       	ldd	r24, Y+1	; 0x01
    94d6:	9a 81       	ldd	r25, Y+2	; 0x02
    94d8:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    94dc:	0f 90       	pop	r0
    94de:	0f 90       	pop	r0
    94e0:	df 91       	pop	r29
    94e2:	cf 91       	pop	r28
    94e4:	08 95       	ret

000094e6 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    94e6:	cf 93       	push	r28
    94e8:	df 93       	push	r29
    94ea:	1f 92       	push	r1
    94ec:	1f 92       	push	r1
    94ee:	cd b7       	in	r28, 0x3d	; 61
    94f0:	de b7       	in	r29, 0x3e	; 62
    94f2:	9a 83       	std	Y+2, r25	; 0x02
    94f4:	89 83       	std	Y+1, r24	; 0x01
    94f6:	89 81       	ldd	r24, Y+1	; 0x01
    94f8:	9a 81       	ldd	r25, Y+2	; 0x02
    94fa:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
    94fe:	89 81       	ldd	r24, Y+1	; 0x01
    9500:	9a 81       	ldd	r25, Y+2	; 0x02
    9502:	0e 94 99 4a 	call	0x9532	; 0x9532 <_ZdlPv>
    9506:	0f 90       	pop	r0
    9508:	0f 90       	pop	r0
    950a:	df 91       	pop	r29
    950c:	cf 91       	pop	r28
    950e:	08 95       	ret

00009510 <_Znwj>:
 *  Author: HP User
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
    9510:	cf 93       	push	r28
    9512:	df 93       	push	r29
    9514:	1f 92       	push	r1
    9516:	1f 92       	push	r1
    9518:	cd b7       	in	r28, 0x3d	; 61
    951a:	de b7       	in	r29, 0x3e	; 62
    951c:	9a 83       	std	Y+2, r25	; 0x02
    951e:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    9520:	89 81       	ldd	r24, Y+1	; 0x01
    9522:	9a 81       	ldd	r25, Y+2	; 0x02
    9524:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <malloc>
}
    9528:	0f 90       	pop	r0
    952a:	0f 90       	pop	r0
    952c:	df 91       	pop	r29
    952e:	cf 91       	pop	r28
    9530:	08 95       	ret

00009532 <_ZdlPv>:

void operator delete(void * ptr)
{
    9532:	cf 93       	push	r28
    9534:	df 93       	push	r29
    9536:	1f 92       	push	r1
    9538:	1f 92       	push	r1
    953a:	cd b7       	in	r28, 0x3d	; 61
    953c:	de b7       	in	r29, 0x3e	; 62
    953e:	9a 83       	std	Y+2, r25	; 0x02
    9540:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    9542:	89 81       	ldd	r24, Y+1	; 0x01
    9544:	9a 81       	ldd	r25, Y+2	; 0x02
    9546:	00 97       	sbiw	r24, 0x00	; 0
    9548:	21 f0       	breq	.+8      	; 0x9552 <_ZdlPv+0x20>
	{
		free(ptr);
    954a:	89 81       	ldd	r24, Y+1	; 0x01
    954c:	9a 81       	ldd	r25, Y+2	; 0x02
    954e:	0e 94 11 59 	call	0xb222	; 0xb222 <free>
	}
}
    9552:	0f 90       	pop	r0
    9554:	0f 90       	pop	r0
    9556:	df 91       	pop	r29
    9558:	cf 91       	pop	r28
    955a:	08 95       	ret

0000955c <_Znaj>:

void * operator new[](size_t size)
{
    955c:	cf 93       	push	r28
    955e:	df 93       	push	r29
    9560:	1f 92       	push	r1
    9562:	1f 92       	push	r1
    9564:	cd b7       	in	r28, 0x3d	; 61
    9566:	de b7       	in	r29, 0x3e	; 62
    9568:	9a 83       	std	Y+2, r25	; 0x02
    956a:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    956c:	89 81       	ldd	r24, Y+1	; 0x01
    956e:	9a 81       	ldd	r25, Y+2	; 0x02
    9570:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <malloc>
}
    9574:	0f 90       	pop	r0
    9576:	0f 90       	pop	r0
    9578:	df 91       	pop	r29
    957a:	cf 91       	pop	r28
    957c:	08 95       	ret

0000957e <_ZdaPv>:

void operator delete[](void * ptr)
{
    957e:	cf 93       	push	r28
    9580:	df 93       	push	r29
    9582:	1f 92       	push	r1
    9584:	1f 92       	push	r1
    9586:	cd b7       	in	r28, 0x3d	; 61
    9588:	de b7       	in	r29, 0x3e	; 62
    958a:	9a 83       	std	Y+2, r25	; 0x02
    958c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    958e:	89 81       	ldd	r24, Y+1	; 0x01
    9590:	9a 81       	ldd	r25, Y+2	; 0x02
    9592:	00 97       	sbiw	r24, 0x00	; 0
    9594:	21 f0       	breq	.+8      	; 0x959e <_ZdaPv+0x20>
	{
		free(ptr);
    9596:	89 81       	ldd	r24, Y+1	; 0x01
    9598:	9a 81       	ldd	r25, Y+2	; 0x02
    959a:	0e 94 11 59 	call	0xb222	; 0xb222 <free>
	}
	
    959e:	0f 90       	pop	r0
    95a0:	0f 90       	pop	r0
    95a2:	df 91       	pop	r29
    95a4:	cf 91       	pop	r28
    95a6:	08 95       	ret

000095a8 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>:


using namespace helicopter::util;

float CoordinateUtil::DegreesToRad(float valueDegrees)
{
    95a8:	cf 93       	push	r28
    95aa:	df 93       	push	r29
    95ac:	00 d0       	rcall	.+0      	; 0x95ae <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf+0x6>
    95ae:	1f 92       	push	r1
    95b0:	cd b7       	in	r28, 0x3d	; 61
    95b2:	de b7       	in	r29, 0x3e	; 62
    95b4:	69 83       	std	Y+1, r22	; 0x01
    95b6:	7a 83       	std	Y+2, r23	; 0x02
    95b8:	8b 83       	std	Y+3, r24	; 0x03
    95ba:	9c 83       	std	Y+4, r25	; 0x04
	return valueDegrees * (M_PI / 180.0);
    95bc:	25 e3       	ldi	r18, 0x35	; 53
    95be:	3a ef       	ldi	r19, 0xFA	; 250
    95c0:	4e e8       	ldi	r20, 0x8E	; 142
    95c2:	5c e3       	ldi	r21, 0x3C	; 60
    95c4:	69 81       	ldd	r22, Y+1	; 0x01
    95c6:	7a 81       	ldd	r23, Y+2	; 0x02
    95c8:	8b 81       	ldd	r24, Y+3	; 0x03
    95ca:	9c 81       	ldd	r25, Y+4	; 0x04
    95cc:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    95d0:	dc 01       	movw	r26, r24
    95d2:	cb 01       	movw	r24, r22
}
    95d4:	bc 01       	movw	r22, r24
    95d6:	cd 01       	movw	r24, r26
    95d8:	0f 90       	pop	r0
    95da:	0f 90       	pop	r0
    95dc:	0f 90       	pop	r0
    95de:	0f 90       	pop	r0
    95e0:	df 91       	pop	r29
    95e2:	cf 91       	pop	r28
    95e4:	08 95       	ret

000095e6 <_ZN10helicopter4util14CoordinateUtil37CalculateECEFToLocalNEDRotationMatrixEffPA3_f>:

void CoordinateUtil::CalculateECEFToLocalNEDRotationMatrix(float latitudeDegrees, float longitudeDegrees, float  ecefToLocalNEDRotationMatrix[][3])
{
    95e6:	cf 92       	push	r12
    95e8:	df 92       	push	r13
    95ea:	ef 92       	push	r14
    95ec:	ff 92       	push	r15
    95ee:	0f 93       	push	r16
    95f0:	1f 93       	push	r17
    95f2:	cf 93       	push	r28
    95f4:	df 93       	push	r29
    95f6:	cd b7       	in	r28, 0x3d	; 61
    95f8:	de b7       	in	r29, 0x3e	; 62
    95fa:	62 97       	sbiw	r28, 0x12	; 18
    95fc:	0f b6       	in	r0, 0x3f	; 63
    95fe:	f8 94       	cli
    9600:	de bf       	out	0x3e, r29	; 62
    9602:	0f be       	out	0x3f, r0	; 63
    9604:	cd bf       	out	0x3d, r28	; 61
    9606:	69 87       	std	Y+9, r22	; 0x09
    9608:	7a 87       	std	Y+10, r23	; 0x0a
    960a:	8b 87       	std	Y+11, r24	; 0x0b
    960c:	9c 87       	std	Y+12, r25	; 0x0c
    960e:	2d 87       	std	Y+13, r18	; 0x0d
    9610:	3e 87       	std	Y+14, r19	; 0x0e
    9612:	4f 87       	std	Y+15, r20	; 0x0f
    9614:	58 8b       	std	Y+16, r21	; 0x10
    9616:	1a 8b       	std	Y+18, r17	; 0x12
    9618:	09 8b       	std	Y+17, r16	; 0x11
	float radLat = DegreesToRad(latitudeDegrees);
    961a:	89 85       	ldd	r24, Y+9	; 0x09
    961c:	9a 85       	ldd	r25, Y+10	; 0x0a
    961e:	ab 85       	ldd	r26, Y+11	; 0x0b
    9620:	bc 85       	ldd	r27, Y+12	; 0x0c
    9622:	bc 01       	movw	r22, r24
    9624:	cd 01       	movw	r24, r26
    9626:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    962a:	dc 01       	movw	r26, r24
    962c:	cb 01       	movw	r24, r22
    962e:	89 83       	std	Y+1, r24	; 0x01
    9630:	9a 83       	std	Y+2, r25	; 0x02
    9632:	ab 83       	std	Y+3, r26	; 0x03
    9634:	bc 83       	std	Y+4, r27	; 0x04
	float radLong = DegreesToRad(longitudeDegrees);
    9636:	8d 85       	ldd	r24, Y+13	; 0x0d
    9638:	9e 85       	ldd	r25, Y+14	; 0x0e
    963a:	af 85       	ldd	r26, Y+15	; 0x0f
    963c:	b8 89       	ldd	r27, Y+16	; 0x10
    963e:	bc 01       	movw	r22, r24
    9640:	cd 01       	movw	r24, r26
    9642:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    9646:	dc 01       	movw	r26, r24
    9648:	cb 01       	movw	r24, r22
    964a:	8d 83       	std	Y+5, r24	; 0x05
    964c:	9e 83       	std	Y+6, r25	; 0x06
    964e:	af 83       	std	Y+7, r26	; 0x07
    9650:	b8 87       	std	Y+8, r27	; 0x08

	//Create a rotation matrix for rotating earth-centered-earth-fixed coordinates
	//into Local North-East-Down coordinates.
	ecefToLocalNEDRotationMatrix[0][0] = -1 * sin(radLat) * cos(radLong);
    9652:	89 81       	ldd	r24, Y+1	; 0x01
    9654:	9a 81       	ldd	r25, Y+2	; 0x02
    9656:	ab 81       	ldd	r26, Y+3	; 0x03
    9658:	bc 81       	ldd	r27, Y+4	; 0x04
    965a:	bc 01       	movw	r22, r24
    965c:	cd 01       	movw	r24, r26
    965e:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9662:	dc 01       	movw	r26, r24
    9664:	cb 01       	movw	r24, r22
    9666:	6c 01       	movw	r12, r24
    9668:	7d 01       	movw	r14, r26
    966a:	f7 fa       	bst	r15, 7
    966c:	f0 94       	com	r15
    966e:	f7 f8       	bld	r15, 7
    9670:	f0 94       	com	r15
    9672:	8d 81       	ldd	r24, Y+5	; 0x05
    9674:	9e 81       	ldd	r25, Y+6	; 0x06
    9676:	af 81       	ldd	r26, Y+7	; 0x07
    9678:	b8 85       	ldd	r27, Y+8	; 0x08
    967a:	bc 01       	movw	r22, r24
    967c:	cd 01       	movw	r24, r26
    967e:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9682:	dc 01       	movw	r26, r24
    9684:	cb 01       	movw	r24, r22
    9686:	9c 01       	movw	r18, r24
    9688:	ad 01       	movw	r20, r26
    968a:	c7 01       	movw	r24, r14
    968c:	b6 01       	movw	r22, r12
    968e:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9692:	dc 01       	movw	r26, r24
    9694:	cb 01       	movw	r24, r22
    9696:	29 89       	ldd	r18, Y+17	; 0x11
    9698:	3a 89       	ldd	r19, Y+18	; 0x12
    969a:	f9 01       	movw	r30, r18
    969c:	80 83       	st	Z, r24
    969e:	91 83       	std	Z+1, r25	; 0x01
    96a0:	a2 83       	std	Z+2, r26	; 0x02
    96a2:	b3 83       	std	Z+3, r27	; 0x03
	ecefToLocalNEDRotationMatrix[0][1] = -1 * sin(radLat) * sin(radLong);
    96a4:	89 81       	ldd	r24, Y+1	; 0x01
    96a6:	9a 81       	ldd	r25, Y+2	; 0x02
    96a8:	ab 81       	ldd	r26, Y+3	; 0x03
    96aa:	bc 81       	ldd	r27, Y+4	; 0x04
    96ac:	bc 01       	movw	r22, r24
    96ae:	cd 01       	movw	r24, r26
    96b0:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    96b4:	dc 01       	movw	r26, r24
    96b6:	cb 01       	movw	r24, r22
    96b8:	6c 01       	movw	r12, r24
    96ba:	7d 01       	movw	r14, r26
    96bc:	f7 fa       	bst	r15, 7
    96be:	f0 94       	com	r15
    96c0:	f7 f8       	bld	r15, 7
    96c2:	f0 94       	com	r15
    96c4:	8d 81       	ldd	r24, Y+5	; 0x05
    96c6:	9e 81       	ldd	r25, Y+6	; 0x06
    96c8:	af 81       	ldd	r26, Y+7	; 0x07
    96ca:	b8 85       	ldd	r27, Y+8	; 0x08
    96cc:	bc 01       	movw	r22, r24
    96ce:	cd 01       	movw	r24, r26
    96d0:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    96d4:	dc 01       	movw	r26, r24
    96d6:	cb 01       	movw	r24, r22
    96d8:	9c 01       	movw	r18, r24
    96da:	ad 01       	movw	r20, r26
    96dc:	c7 01       	movw	r24, r14
    96de:	b6 01       	movw	r22, r12
    96e0:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    96e4:	dc 01       	movw	r26, r24
    96e6:	cb 01       	movw	r24, r22
    96e8:	29 89       	ldd	r18, Y+17	; 0x11
    96ea:	3a 89       	ldd	r19, Y+18	; 0x12
    96ec:	f9 01       	movw	r30, r18
    96ee:	84 83       	std	Z+4, r24	; 0x04
    96f0:	95 83       	std	Z+5, r25	; 0x05
    96f2:	a6 83       	std	Z+6, r26	; 0x06
    96f4:	b7 83       	std	Z+7, r27	; 0x07
	ecefToLocalNEDRotationMatrix[0][2] = cos(radLat);
    96f6:	89 81       	ldd	r24, Y+1	; 0x01
    96f8:	9a 81       	ldd	r25, Y+2	; 0x02
    96fa:	ab 81       	ldd	r26, Y+3	; 0x03
    96fc:	bc 81       	ldd	r27, Y+4	; 0x04
    96fe:	bc 01       	movw	r22, r24
    9700:	cd 01       	movw	r24, r26
    9702:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9706:	dc 01       	movw	r26, r24
    9708:	cb 01       	movw	r24, r22
    970a:	29 89       	ldd	r18, Y+17	; 0x11
    970c:	3a 89       	ldd	r19, Y+18	; 0x12
    970e:	f9 01       	movw	r30, r18
    9710:	80 87       	std	Z+8, r24	; 0x08
    9712:	91 87       	std	Z+9, r25	; 0x09
    9714:	a2 87       	std	Z+10, r26	; 0x0a
    9716:	b3 87       	std	Z+11, r27	; 0x0b
	ecefToLocalNEDRotationMatrix[1][0] = -1 * sin (radLong);
    9718:	89 89       	ldd	r24, Y+17	; 0x11
    971a:	9a 89       	ldd	r25, Y+18	; 0x12
    971c:	8c 01       	movw	r16, r24
    971e:	04 5f       	subi	r16, 0xF4	; 244
    9720:	1f 4f       	sbci	r17, 0xFF	; 255
    9722:	8d 81       	ldd	r24, Y+5	; 0x05
    9724:	9e 81       	ldd	r25, Y+6	; 0x06
    9726:	af 81       	ldd	r26, Y+7	; 0x07
    9728:	b8 85       	ldd	r27, Y+8	; 0x08
    972a:	bc 01       	movw	r22, r24
    972c:	cd 01       	movw	r24, r26
    972e:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9732:	dc 01       	movw	r26, r24
    9734:	cb 01       	movw	r24, r22
    9736:	b0 58       	subi	r27, 0x80	; 128
    9738:	f8 01       	movw	r30, r16
    973a:	80 83       	st	Z, r24
    973c:	91 83       	std	Z+1, r25	; 0x01
    973e:	a2 83       	std	Z+2, r26	; 0x02
    9740:	b3 83       	std	Z+3, r27	; 0x03
	ecefToLocalNEDRotationMatrix[1][1] = cos(radLong);
    9742:	89 89       	ldd	r24, Y+17	; 0x11
    9744:	9a 89       	ldd	r25, Y+18	; 0x12
    9746:	8c 01       	movw	r16, r24
    9748:	04 5f       	subi	r16, 0xF4	; 244
    974a:	1f 4f       	sbci	r17, 0xFF	; 255
    974c:	8d 81       	ldd	r24, Y+5	; 0x05
    974e:	9e 81       	ldd	r25, Y+6	; 0x06
    9750:	af 81       	ldd	r26, Y+7	; 0x07
    9752:	b8 85       	ldd	r27, Y+8	; 0x08
    9754:	bc 01       	movw	r22, r24
    9756:	cd 01       	movw	r24, r26
    9758:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    975c:	dc 01       	movw	r26, r24
    975e:	cb 01       	movw	r24, r22
    9760:	f8 01       	movw	r30, r16
    9762:	84 83       	std	Z+4, r24	; 0x04
    9764:	95 83       	std	Z+5, r25	; 0x05
    9766:	a6 83       	std	Z+6, r26	; 0x06
    9768:	b7 83       	std	Z+7, r27	; 0x07
	ecefToLocalNEDRotationMatrix[1][2] = 0;
    976a:	89 89       	ldd	r24, Y+17	; 0x11
    976c:	9a 89       	ldd	r25, Y+18	; 0x12
    976e:	0c 96       	adiw	r24, 0x0c	; 12
    9770:	fc 01       	movw	r30, r24
    9772:	10 86       	std	Z+8, r1	; 0x08
    9774:	11 86       	std	Z+9, r1	; 0x09
    9776:	12 86       	std	Z+10, r1	; 0x0a
    9778:	13 86       	std	Z+11, r1	; 0x0b
	ecefToLocalNEDRotationMatrix[2][0] = -1 * cos(radLat) * cos(radLong);
    977a:	89 89       	ldd	r24, Y+17	; 0x11
    977c:	9a 89       	ldd	r25, Y+18	; 0x12
    977e:	8c 01       	movw	r16, r24
    9780:	08 5e       	subi	r16, 0xE8	; 232
    9782:	1f 4f       	sbci	r17, 0xFF	; 255
    9784:	89 81       	ldd	r24, Y+1	; 0x01
    9786:	9a 81       	ldd	r25, Y+2	; 0x02
    9788:	ab 81       	ldd	r26, Y+3	; 0x03
    978a:	bc 81       	ldd	r27, Y+4	; 0x04
    978c:	bc 01       	movw	r22, r24
    978e:	cd 01       	movw	r24, r26
    9790:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9794:	dc 01       	movw	r26, r24
    9796:	cb 01       	movw	r24, r22
    9798:	6c 01       	movw	r12, r24
    979a:	7d 01       	movw	r14, r26
    979c:	f7 fa       	bst	r15, 7
    979e:	f0 94       	com	r15
    97a0:	f7 f8       	bld	r15, 7
    97a2:	f0 94       	com	r15
    97a4:	8d 81       	ldd	r24, Y+5	; 0x05
    97a6:	9e 81       	ldd	r25, Y+6	; 0x06
    97a8:	af 81       	ldd	r26, Y+7	; 0x07
    97aa:	b8 85       	ldd	r27, Y+8	; 0x08
    97ac:	bc 01       	movw	r22, r24
    97ae:	cd 01       	movw	r24, r26
    97b0:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    97b4:	dc 01       	movw	r26, r24
    97b6:	cb 01       	movw	r24, r22
    97b8:	9c 01       	movw	r18, r24
    97ba:	ad 01       	movw	r20, r26
    97bc:	c7 01       	movw	r24, r14
    97be:	b6 01       	movw	r22, r12
    97c0:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    97c4:	dc 01       	movw	r26, r24
    97c6:	cb 01       	movw	r24, r22
    97c8:	f8 01       	movw	r30, r16
    97ca:	80 83       	st	Z, r24
    97cc:	91 83       	std	Z+1, r25	; 0x01
    97ce:	a2 83       	std	Z+2, r26	; 0x02
    97d0:	b3 83       	std	Z+3, r27	; 0x03
	ecefToLocalNEDRotationMatrix[2][1] = -1 * cos(radLat) * sin(radLong);
    97d2:	89 89       	ldd	r24, Y+17	; 0x11
    97d4:	9a 89       	ldd	r25, Y+18	; 0x12
    97d6:	8c 01       	movw	r16, r24
    97d8:	08 5e       	subi	r16, 0xE8	; 232
    97da:	1f 4f       	sbci	r17, 0xFF	; 255
    97dc:	89 81       	ldd	r24, Y+1	; 0x01
    97de:	9a 81       	ldd	r25, Y+2	; 0x02
    97e0:	ab 81       	ldd	r26, Y+3	; 0x03
    97e2:	bc 81       	ldd	r27, Y+4	; 0x04
    97e4:	bc 01       	movw	r22, r24
    97e6:	cd 01       	movw	r24, r26
    97e8:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    97ec:	dc 01       	movw	r26, r24
    97ee:	cb 01       	movw	r24, r22
    97f0:	6c 01       	movw	r12, r24
    97f2:	7d 01       	movw	r14, r26
    97f4:	f7 fa       	bst	r15, 7
    97f6:	f0 94       	com	r15
    97f8:	f7 f8       	bld	r15, 7
    97fa:	f0 94       	com	r15
    97fc:	8d 81       	ldd	r24, Y+5	; 0x05
    97fe:	9e 81       	ldd	r25, Y+6	; 0x06
    9800:	af 81       	ldd	r26, Y+7	; 0x07
    9802:	b8 85       	ldd	r27, Y+8	; 0x08
    9804:	bc 01       	movw	r22, r24
    9806:	cd 01       	movw	r24, r26
    9808:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    980c:	dc 01       	movw	r26, r24
    980e:	cb 01       	movw	r24, r22
    9810:	9c 01       	movw	r18, r24
    9812:	ad 01       	movw	r20, r26
    9814:	c7 01       	movw	r24, r14
    9816:	b6 01       	movw	r22, r12
    9818:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    981c:	dc 01       	movw	r26, r24
    981e:	cb 01       	movw	r24, r22
    9820:	f8 01       	movw	r30, r16
    9822:	84 83       	std	Z+4, r24	; 0x04
    9824:	95 83       	std	Z+5, r25	; 0x05
    9826:	a6 83       	std	Z+6, r26	; 0x06
    9828:	b7 83       	std	Z+7, r27	; 0x07
	ecefToLocalNEDRotationMatrix[2][2] = -1 * sin(radLat);
    982a:	89 89       	ldd	r24, Y+17	; 0x11
    982c:	9a 89       	ldd	r25, Y+18	; 0x12
    982e:	8c 01       	movw	r16, r24
    9830:	08 5e       	subi	r16, 0xE8	; 232
    9832:	1f 4f       	sbci	r17, 0xFF	; 255
    9834:	89 81       	ldd	r24, Y+1	; 0x01
    9836:	9a 81       	ldd	r25, Y+2	; 0x02
    9838:	ab 81       	ldd	r26, Y+3	; 0x03
    983a:	bc 81       	ldd	r27, Y+4	; 0x04
    983c:	bc 01       	movw	r22, r24
    983e:	cd 01       	movw	r24, r26
    9840:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9844:	dc 01       	movw	r26, r24
    9846:	cb 01       	movw	r24, r22
    9848:	b0 58       	subi	r27, 0x80	; 128
    984a:	f8 01       	movw	r30, r16
    984c:	80 87       	std	Z+8, r24	; 0x08
    984e:	91 87       	std	Z+9, r25	; 0x09
    9850:	a2 87       	std	Z+10, r26	; 0x0a
    9852:	b3 87       	std	Z+11, r27	; 0x0b
}
    9854:	62 96       	adiw	r28, 0x12	; 18
    9856:	0f b6       	in	r0, 0x3f	; 63
    9858:	f8 94       	cli
    985a:	de bf       	out	0x3e, r29	; 62
    985c:	0f be       	out	0x3f, r0	; 63
    985e:	cd bf       	out	0x3d, r28	; 61
    9860:	df 91       	pop	r29
    9862:	cf 91       	pop	r28
    9864:	1f 91       	pop	r17
    9866:	0f 91       	pop	r16
    9868:	ff 90       	pop	r15
    986a:	ef 90       	pop	r14
    986c:	df 90       	pop	r13
    986e:	cf 90       	pop	r12
    9870:	08 95       	ret

00009872 <_ZN10helicopter4util14CoordinateUtil11calculateNeEff>:

float CoordinateUtil::calculateNe(float E, float latitudeRads)
{
    9872:	cf 92       	push	r12
    9874:	df 92       	push	r13
    9876:	ef 92       	push	r14
    9878:	ff 92       	push	r15
    987a:	cf 93       	push	r28
    987c:	df 93       	push	r29
    987e:	cd b7       	in	r28, 0x3d	; 61
    9880:	de b7       	in	r29, 0x3e	; 62
    9882:	28 97       	sbiw	r28, 0x08	; 8
    9884:	0f b6       	in	r0, 0x3f	; 63
    9886:	f8 94       	cli
    9888:	de bf       	out	0x3e, r29	; 62
    988a:	0f be       	out	0x3f, r0	; 63
    988c:	cd bf       	out	0x3d, r28	; 61
    988e:	69 83       	std	Y+1, r22	; 0x01
    9890:	7a 83       	std	Y+2, r23	; 0x02
    9892:	8b 83       	std	Y+3, r24	; 0x03
    9894:	9c 83       	std	Y+4, r25	; 0x04
    9896:	2d 83       	std	Y+5, r18	; 0x05
    9898:	3e 83       	std	Y+6, r19	; 0x06
    989a:	4f 83       	std	Y+7, r20	; 0x07
    989c:	58 87       	std	Y+8, r21	; 0x08
	return Rea / sqrt(1 - pow(E, 2) * pow(sin(latitudeRads), 2));
    989e:	89 81       	ldd	r24, Y+1	; 0x01
    98a0:	9a 81       	ldd	r25, Y+2	; 0x02
    98a2:	ab 81       	ldd	r26, Y+3	; 0x03
    98a4:	bc 81       	ldd	r27, Y+4	; 0x04
    98a6:	20 e0       	ldi	r18, 0x00	; 0
    98a8:	30 e0       	ldi	r19, 0x00	; 0
    98aa:	40 e0       	ldi	r20, 0x00	; 0
    98ac:	50 e4       	ldi	r21, 0x40	; 64
    98ae:	bc 01       	movw	r22, r24
    98b0:	cd 01       	movw	r24, r26
    98b2:	0e 94 75 56 	call	0xacea	; 0xacea <pow>
    98b6:	6b 01       	movw	r12, r22
    98b8:	7c 01       	movw	r14, r24
    98ba:	8d 81       	ldd	r24, Y+5	; 0x05
    98bc:	9e 81       	ldd	r25, Y+6	; 0x06
    98be:	af 81       	ldd	r26, Y+7	; 0x07
    98c0:	b8 85       	ldd	r27, Y+8	; 0x08
    98c2:	bc 01       	movw	r22, r24
    98c4:	cd 01       	movw	r24, r26
    98c6:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    98ca:	dc 01       	movw	r26, r24
    98cc:	cb 01       	movw	r24, r22
    98ce:	20 e0       	ldi	r18, 0x00	; 0
    98d0:	30 e0       	ldi	r19, 0x00	; 0
    98d2:	40 e0       	ldi	r20, 0x00	; 0
    98d4:	50 e4       	ldi	r21, 0x40	; 64
    98d6:	bc 01       	movw	r22, r24
    98d8:	cd 01       	movw	r24, r26
    98da:	0e 94 75 56 	call	0xacea	; 0xacea <pow>
    98de:	dc 01       	movw	r26, r24
    98e0:	cb 01       	movw	r24, r22
    98e2:	9c 01       	movw	r18, r24
    98e4:	ad 01       	movw	r20, r26
    98e6:	c7 01       	movw	r24, r14
    98e8:	b6 01       	movw	r22, r12
    98ea:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    98ee:	dc 01       	movw	r26, r24
    98f0:	cb 01       	movw	r24, r22
    98f2:	9c 01       	movw	r18, r24
    98f4:	ad 01       	movw	r20, r26
    98f6:	60 e0       	ldi	r22, 0x00	; 0
    98f8:	70 e0       	ldi	r23, 0x00	; 0
    98fa:	80 e8       	ldi	r24, 0x80	; 128
    98fc:	9f e3       	ldi	r25, 0x3F	; 63
    98fe:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    9902:	dc 01       	movw	r26, r24
    9904:	cb 01       	movw	r24, r22
    9906:	bc 01       	movw	r22, r24
    9908:	cd 01       	movw	r24, r26
    990a:	0e 94 cb 56 	call	0xad96	; 0xad96 <sqrt>
    990e:	dc 01       	movw	r26, r24
    9910:	cb 01       	movw	r24, r22
    9912:	9c 01       	movw	r18, r24
    9914:	ad 01       	movw	r20, r26
    9916:	62 e3       	ldi	r22, 0x32	; 50
    9918:	75 ea       	ldi	r23, 0xA5	; 165
    991a:	82 ec       	ldi	r24, 0xC2	; 194
    991c:	9a e4       	ldi	r25, 0x4A	; 74
    991e:	0e 94 37 54 	call	0xa86e	; 0xa86e <__divsf3>
    9922:	dc 01       	movw	r26, r24
    9924:	cb 01       	movw	r24, r22
}
    9926:	bc 01       	movw	r22, r24
    9928:	cd 01       	movw	r24, r26
    992a:	28 96       	adiw	r28, 0x08	; 8
    992c:	0f b6       	in	r0, 0x3f	; 63
    992e:	f8 94       	cli
    9930:	de bf       	out	0x3e, r29	; 62
    9932:	0f be       	out	0x3f, r0	; 63
    9934:	cd bf       	out	0x3d, r28	; 61
    9936:	df 91       	pop	r29
    9938:	cf 91       	pop	r28
    993a:	ff 90       	pop	r15
    993c:	ef 90       	pop	r14
    993e:	df 90       	pop	r13
    9940:	cf 90       	pop	r12
    9942:	08 95       	ret

00009944 <_ZN10helicopter4util14CoordinateUtil25ConvertFromGeodeticToECEFEfffRfS2_S2_>:
/**
 * A description of the variables used to convert lat/long to ecef can be found on page 25 of 
 * Unmanned Rotor Craft Systems
 */
void CoordinateUtil::ConvertFromGeodeticToECEF(float latitudeDegrees, float longitudeDegrees, float altitudeFeetAgl, float &ecefX, float &ecefY, float &ecefZ)
{
    9944:	8f 92       	push	r8
    9946:	9f 92       	push	r9
    9948:	af 92       	push	r10
    994a:	bf 92       	push	r11
    994c:	cf 92       	push	r12
    994e:	df 92       	push	r13
    9950:	ef 92       	push	r14
    9952:	ff 92       	push	r15
    9954:	0f 93       	push	r16
    9956:	1f 93       	push	r17
    9958:	cf 93       	push	r28
    995a:	df 93       	push	r29
    995c:	cd b7       	in	r28, 0x3d	; 61
    995e:	de b7       	in	r29, 0x3e	; 62
    9960:	6e 97       	sbiw	r28, 0x1e	; 30
    9962:	0f b6       	in	r0, 0x3f	; 63
    9964:	f8 94       	cli
    9966:	de bf       	out	0x3e, r29	; 62
    9968:	0f be       	out	0x3f, r0	; 63
    996a:	cd bf       	out	0x3d, r28	; 61
    996c:	6d 87       	std	Y+13, r22	; 0x0d
    996e:	7e 87       	std	Y+14, r23	; 0x0e
    9970:	8f 87       	std	Y+15, r24	; 0x0f
    9972:	98 8b       	std	Y+16, r25	; 0x10
    9974:	29 8b       	std	Y+17, r18	; 0x11
    9976:	3a 8b       	std	Y+18, r19	; 0x12
    9978:	4b 8b       	std	Y+19, r20	; 0x13
    997a:	5c 8b       	std	Y+20, r21	; 0x14
    997c:	ed 8a       	std	Y+21, r14	; 0x15
    997e:	fe 8a       	std	Y+22, r15	; 0x16
    9980:	0f 8b       	std	Y+23, r16	; 0x17
    9982:	18 8f       	std	Y+24, r17	; 0x18
    9984:	da 8e       	std	Y+26, r13	; 0x1a
    9986:	c9 8e       	std	Y+25, r12	; 0x19
    9988:	bc 8e       	std	Y+28, r11	; 0x1c
    998a:	ab 8e       	std	Y+27, r10	; 0x1b
    998c:	9e 8e       	std	Y+30, r9	; 0x1e
    998e:	8d 8e       	std	Y+29, r8	; 0x1d
	float radLat = DegreesToRad(latitudeDegrees);
    9990:	8d 85       	ldd	r24, Y+13	; 0x0d
    9992:	9e 85       	ldd	r25, Y+14	; 0x0e
    9994:	af 85       	ldd	r26, Y+15	; 0x0f
    9996:	b8 89       	ldd	r27, Y+16	; 0x10
    9998:	bc 01       	movw	r22, r24
    999a:	cd 01       	movw	r24, r26
    999c:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    99a0:	dc 01       	movw	r26, r24
    99a2:	cb 01       	movw	r24, r22
    99a4:	89 83       	std	Y+1, r24	; 0x01
    99a6:	9a 83       	std	Y+2, r25	; 0x02
    99a8:	ab 83       	std	Y+3, r26	; 0x03
    99aa:	bc 83       	std	Y+4, r27	; 0x04
	float radLong = DegreesToRad(longitudeDegrees);
    99ac:	89 89       	ldd	r24, Y+17	; 0x11
    99ae:	9a 89       	ldd	r25, Y+18	; 0x12
    99b0:	ab 89       	ldd	r26, Y+19	; 0x13
    99b2:	bc 89       	ldd	r27, Y+20	; 0x14
    99b4:	bc 01       	movw	r22, r24
    99b6:	cd 01       	movw	r24, r26
    99b8:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    99bc:	dc 01       	movw	r26, r24
    99be:	cb 01       	movw	r24, r22
    99c0:	8d 83       	std	Y+5, r24	; 0x05
    99c2:	9e 83       	std	Y+6, r25	; 0x06
    99c4:	af 83       	std	Y+7, r26	; 0x07
    99c6:	b8 87       	std	Y+8, r27	; 0x08
	

	float Ne = calculateNe(E, radLat);
    99c8:	89 81       	ldd	r24, Y+1	; 0x01
    99ca:	9a 81       	ldd	r25, Y+2	; 0x02
    99cc:	ab 81       	ldd	r26, Y+3	; 0x03
    99ce:	bc 81       	ldd	r27, Y+4	; 0x04
    99d0:	9c 01       	movw	r18, r24
    99d2:	ad 01       	movw	r20, r26
    99d4:	62 ed       	ldi	r22, 0xD2	; 210
    99d6:	70 e9       	ldi	r23, 0x90	; 144
    99d8:	87 ea       	ldi	r24, 0xA7	; 167
    99da:	9d e3       	ldi	r25, 0x3D	; 61
    99dc:	0e 94 39 4c 	call	0x9872	; 0x9872 <_ZN10helicopter4util14CoordinateUtil11calculateNeEff>
    99e0:	dc 01       	movw	r26, r24
    99e2:	cb 01       	movw	r24, r22
    99e4:	89 87       	std	Y+9, r24	; 0x09
    99e6:	9a 87       	std	Y+10, r25	; 0x0a
    99e8:	ab 87       	std	Y+11, r26	; 0x0b
    99ea:	bc 87       	std	Y+12, r27	; 0x0c
	
	ecefX = (Ne + altitudeFeetAgl) * cos(radLat) * cos(radLong);
    99ec:	2d 89       	ldd	r18, Y+21	; 0x15
    99ee:	3e 89       	ldd	r19, Y+22	; 0x16
    99f0:	4f 89       	ldd	r20, Y+23	; 0x17
    99f2:	58 8d       	ldd	r21, Y+24	; 0x18
    99f4:	69 85       	ldd	r22, Y+9	; 0x09
    99f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    99f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    99fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    99fc:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    9a00:	dc 01       	movw	r26, r24
    9a02:	cb 01       	movw	r24, r22
    9a04:	6c 01       	movw	r12, r24
    9a06:	7d 01       	movw	r14, r26
    9a08:	89 81       	ldd	r24, Y+1	; 0x01
    9a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    9a0c:	ab 81       	ldd	r26, Y+3	; 0x03
    9a0e:	bc 81       	ldd	r27, Y+4	; 0x04
    9a10:	bc 01       	movw	r22, r24
    9a12:	cd 01       	movw	r24, r26
    9a14:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9a18:	dc 01       	movw	r26, r24
    9a1a:	cb 01       	movw	r24, r22
    9a1c:	9c 01       	movw	r18, r24
    9a1e:	ad 01       	movw	r20, r26
    9a20:	c7 01       	movw	r24, r14
    9a22:	b6 01       	movw	r22, r12
    9a24:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9a28:	dc 01       	movw	r26, r24
    9a2a:	cb 01       	movw	r24, r22
    9a2c:	6c 01       	movw	r12, r24
    9a2e:	7d 01       	movw	r14, r26
    9a30:	8d 81       	ldd	r24, Y+5	; 0x05
    9a32:	9e 81       	ldd	r25, Y+6	; 0x06
    9a34:	af 81       	ldd	r26, Y+7	; 0x07
    9a36:	b8 85       	ldd	r27, Y+8	; 0x08
    9a38:	bc 01       	movw	r22, r24
    9a3a:	cd 01       	movw	r24, r26
    9a3c:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9a40:	dc 01       	movw	r26, r24
    9a42:	cb 01       	movw	r24, r22
    9a44:	9c 01       	movw	r18, r24
    9a46:	ad 01       	movw	r20, r26
    9a48:	c7 01       	movw	r24, r14
    9a4a:	b6 01       	movw	r22, r12
    9a4c:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9a50:	dc 01       	movw	r26, r24
    9a52:	cb 01       	movw	r24, r22
    9a54:	29 8d       	ldd	r18, Y+25	; 0x19
    9a56:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9a58:	f9 01       	movw	r30, r18
    9a5a:	80 83       	st	Z, r24
    9a5c:	91 83       	std	Z+1, r25	; 0x01
    9a5e:	a2 83       	std	Z+2, r26	; 0x02
    9a60:	b3 83       	std	Z+3, r27	; 0x03
	ecefY = (Ne + altitudeFeetAgl) * cos(radLat) * sin(radLong);
    9a62:	2d 89       	ldd	r18, Y+21	; 0x15
    9a64:	3e 89       	ldd	r19, Y+22	; 0x16
    9a66:	4f 89       	ldd	r20, Y+23	; 0x17
    9a68:	58 8d       	ldd	r21, Y+24	; 0x18
    9a6a:	69 85       	ldd	r22, Y+9	; 0x09
    9a6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    9a6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9a70:	9c 85       	ldd	r25, Y+12	; 0x0c
    9a72:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    9a76:	dc 01       	movw	r26, r24
    9a78:	cb 01       	movw	r24, r22
    9a7a:	6c 01       	movw	r12, r24
    9a7c:	7d 01       	movw	r14, r26
    9a7e:	89 81       	ldd	r24, Y+1	; 0x01
    9a80:	9a 81       	ldd	r25, Y+2	; 0x02
    9a82:	ab 81       	ldd	r26, Y+3	; 0x03
    9a84:	bc 81       	ldd	r27, Y+4	; 0x04
    9a86:	bc 01       	movw	r22, r24
    9a88:	cd 01       	movw	r24, r26
    9a8a:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9a8e:	dc 01       	movw	r26, r24
    9a90:	cb 01       	movw	r24, r22
    9a92:	9c 01       	movw	r18, r24
    9a94:	ad 01       	movw	r20, r26
    9a96:	c7 01       	movw	r24, r14
    9a98:	b6 01       	movw	r22, r12
    9a9a:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9a9e:	dc 01       	movw	r26, r24
    9aa0:	cb 01       	movw	r24, r22
    9aa2:	6c 01       	movw	r12, r24
    9aa4:	7d 01       	movw	r14, r26
    9aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    9aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    9aaa:	af 81       	ldd	r26, Y+7	; 0x07
    9aac:	b8 85       	ldd	r27, Y+8	; 0x08
    9aae:	bc 01       	movw	r22, r24
    9ab0:	cd 01       	movw	r24, r26
    9ab2:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9ab6:	dc 01       	movw	r26, r24
    9ab8:	cb 01       	movw	r24, r22
    9aba:	9c 01       	movw	r18, r24
    9abc:	ad 01       	movw	r20, r26
    9abe:	c7 01       	movw	r24, r14
    9ac0:	b6 01       	movw	r22, r12
    9ac2:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9ac6:	dc 01       	movw	r26, r24
    9ac8:	cb 01       	movw	r24, r22
    9aca:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9acc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    9ace:	f9 01       	movw	r30, r18
    9ad0:	80 83       	st	Z, r24
    9ad2:	91 83       	std	Z+1, r25	; 0x01
    9ad4:	a2 83       	std	Z+2, r26	; 0x02
    9ad6:	b3 83       	std	Z+3, r27	; 0x03
	ecefZ = ((Ne * (1 - pow(E, 2))) + altitudeFeetAgl) * sin(radLat);
    9ad8:	27 e4       	ldi	r18, 0x47	; 71
    9ada:	39 e4       	ldi	r19, 0x49	; 73
    9adc:	4e e7       	ldi	r20, 0x7E	; 126
    9ade:	5f e3       	ldi	r21, 0x3F	; 63
    9ae0:	69 85       	ldd	r22, Y+9	; 0x09
    9ae2:	7a 85       	ldd	r23, Y+10	; 0x0a
    9ae4:	8b 85       	ldd	r24, Y+11	; 0x0b
    9ae6:	9c 85       	ldd	r25, Y+12	; 0x0c
    9ae8:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9aec:	dc 01       	movw	r26, r24
    9aee:	cb 01       	movw	r24, r22
    9af0:	2d 89       	ldd	r18, Y+21	; 0x15
    9af2:	3e 89       	ldd	r19, Y+22	; 0x16
    9af4:	4f 89       	ldd	r20, Y+23	; 0x17
    9af6:	58 8d       	ldd	r21, Y+24	; 0x18
    9af8:	bc 01       	movw	r22, r24
    9afa:	cd 01       	movw	r24, r26
    9afc:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    9b00:	dc 01       	movw	r26, r24
    9b02:	cb 01       	movw	r24, r22
    9b04:	6c 01       	movw	r12, r24
    9b06:	7d 01       	movw	r14, r26
    9b08:	89 81       	ldd	r24, Y+1	; 0x01
    9b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    9b0c:	ab 81       	ldd	r26, Y+3	; 0x03
    9b0e:	bc 81       	ldd	r27, Y+4	; 0x04
    9b10:	bc 01       	movw	r22, r24
    9b12:	cd 01       	movw	r24, r26
    9b14:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9b18:	dc 01       	movw	r26, r24
    9b1a:	cb 01       	movw	r24, r22
    9b1c:	9c 01       	movw	r18, r24
    9b1e:	ad 01       	movw	r20, r26
    9b20:	c7 01       	movw	r24, r14
    9b22:	b6 01       	movw	r22, r12
    9b24:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9b28:	dc 01       	movw	r26, r24
    9b2a:	cb 01       	movw	r24, r22
    9b2c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    9b2e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    9b30:	f9 01       	movw	r30, r18
    9b32:	80 83       	st	Z, r24
    9b34:	91 83       	std	Z+1, r25	; 0x01
    9b36:	a2 83       	std	Z+2, r26	; 0x02
    9b38:	b3 83       	std	Z+3, r27	; 0x03
}
    9b3a:	6e 96       	adiw	r28, 0x1e	; 30
    9b3c:	0f b6       	in	r0, 0x3f	; 63
    9b3e:	f8 94       	cli
    9b40:	de bf       	out	0x3e, r29	; 62
    9b42:	0f be       	out	0x3f, r0	; 63
    9b44:	cd bf       	out	0x3d, r28	; 61
    9b46:	df 91       	pop	r29
    9b48:	cf 91       	pop	r28
    9b4a:	1f 91       	pop	r17
    9b4c:	0f 91       	pop	r16
    9b4e:	ff 90       	pop	r15
    9b50:	ef 90       	pop	r14
    9b52:	df 90       	pop	r13
    9b54:	cf 90       	pop	r12
    9b56:	bf 90       	pop	r11
    9b58:	af 90       	pop	r10
    9b5a:	9f 90       	pop	r9
    9b5c:	8f 90       	pop	r8
    9b5e:	08 95       	ret

00009b60 <_ZN10helicopter4util14CoordinateUtil25ConvertFromECEFToLocalNEDEffffffPA3_fRfS4_S4_>:

void CoordinateUtil::ConvertFromECEFToLocalNED(float ecefReferenceX, float ecefReferenceY, float ecefReferenceZ,
	float ecefX, float ecefY, float ecefZ, float ecefToLocalNEDRotationMatrix[][3],
	float &localNEDX, float &localNEDY, float &localNEDZ)
{
    9b60:	af 92       	push	r10
    9b62:	bf 92       	push	r11
    9b64:	cf 92       	push	r12
    9b66:	df 92       	push	r13
    9b68:	ef 92       	push	r14
    9b6a:	ff 92       	push	r15
    9b6c:	0f 93       	push	r16
    9b6e:	1f 93       	push	r17
    9b70:	cf 93       	push	r28
    9b72:	df 93       	push	r29
    9b74:	cd b7       	in	r28, 0x3d	; 61
    9b76:	de b7       	in	r29, 0x3e	; 62
    9b78:	e4 97       	sbiw	r28, 0x34	; 52
    9b7a:	0f b6       	in	r0, 0x3f	; 63
    9b7c:	f8 94       	cli
    9b7e:	de bf       	out	0x3e, r29	; 62
    9b80:	0f be       	out	0x3f, r0	; 63
    9b82:	cd bf       	out	0x3d, r28	; 61
    9b84:	6d a3       	std	Y+37, r22	; 0x25
    9b86:	7e a3       	std	Y+38, r23	; 0x26
    9b88:	8f a3       	std	Y+39, r24	; 0x27
    9b8a:	98 a7       	std	Y+40, r25	; 0x28
    9b8c:	29 a7       	std	Y+41, r18	; 0x29
    9b8e:	3a a7       	std	Y+42, r19	; 0x2a
    9b90:	4b a7       	std	Y+43, r20	; 0x2b
    9b92:	5c a7       	std	Y+44, r21	; 0x2c
    9b94:	ed a6       	std	Y+45, r14	; 0x2d
    9b96:	fe a6       	std	Y+46, r15	; 0x2e
    9b98:	0f a7       	std	Y+47, r16	; 0x2f
    9b9a:	18 ab       	std	Y+48, r17	; 0x30
    9b9c:	a9 aa       	std	Y+49, r10	; 0x31
    9b9e:	ba aa       	std	Y+50, r11	; 0x32
    9ba0:	cb aa       	std	Y+51, r12	; 0x33
    9ba2:	dc aa       	std	Y+52, r13	; 0x34
	//Get the current helicopters position relative to it's starting point in ecef.
	float differenceXECEF = ecefX - ecefReferenceX;
    9ba4:	2d a1       	ldd	r18, Y+37	; 0x25
    9ba6:	3e a1       	ldd	r19, Y+38	; 0x26
    9ba8:	4f a1       	ldd	r20, Y+39	; 0x27
    9baa:	58 a5       	ldd	r21, Y+40	; 0x28
    9bac:	69 a9       	ldd	r22, Y+49	; 0x31
    9bae:	7a a9       	ldd	r23, Y+50	; 0x32
    9bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    9bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    9bb4:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    9bb8:	dc 01       	movw	r26, r24
    9bba:	cb 01       	movw	r24, r22
    9bbc:	89 83       	std	Y+1, r24	; 0x01
    9bbe:	9a 83       	std	Y+2, r25	; 0x02
    9bc0:	ab 83       	std	Y+3, r26	; 0x03
    9bc2:	bc 83       	std	Y+4, r27	; 0x04
	float differenceYECEF = ecefY - ecefReferenceY;
    9bc4:	29 a5       	ldd	r18, Y+41	; 0x29
    9bc6:	3a a5       	ldd	r19, Y+42	; 0x2a
    9bc8:	4b a5       	ldd	r20, Y+43	; 0x2b
    9bca:	5c a5       	ldd	r21, Y+44	; 0x2c
    9bcc:	26 96       	adiw	r28, 0x06	; 6
    9bce:	6c ad       	ldd	r22, Y+60	; 0x3c
    9bd0:	7d ad       	ldd	r23, Y+61	; 0x3d
    9bd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    9bd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    9bd6:	26 97       	sbiw	r28, 0x06	; 6
    9bd8:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    9bdc:	dc 01       	movw	r26, r24
    9bde:	cb 01       	movw	r24, r22
    9be0:	8d 83       	std	Y+5, r24	; 0x05
    9be2:	9e 83       	std	Y+6, r25	; 0x06
    9be4:	af 83       	std	Y+7, r26	; 0x07
    9be6:	b8 87       	std	Y+8, r27	; 0x08
	float differenceZECEF = ecefZ - ecefReferenceZ;
    9be8:	2d a5       	ldd	r18, Y+45	; 0x2d
    9bea:	3e a5       	ldd	r19, Y+46	; 0x2e
    9bec:	4f a5       	ldd	r20, Y+47	; 0x2f
    9bee:	58 a9       	ldd	r21, Y+48	; 0x30
    9bf0:	2a 96       	adiw	r28, 0x0a	; 10
    9bf2:	6c ad       	ldd	r22, Y+60	; 0x3c
    9bf4:	7d ad       	ldd	r23, Y+61	; 0x3d
    9bf6:	8e ad       	ldd	r24, Y+62	; 0x3e
    9bf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    9bfa:	2a 97       	sbiw	r28, 0x0a	; 10
    9bfc:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    9c00:	dc 01       	movw	r26, r24
    9c02:	cb 01       	movw	r24, r22
    9c04:	89 87       	std	Y+9, r24	; 0x09
    9c06:	9a 87       	std	Y+10, r25	; 0x0a
    9c08:	ab 87       	std	Y+11, r26	; 0x0b
    9c0a:	bc 87       	std	Y+12, r27	; 0x0c
	
	float rotatedMatrix[3] = {};
    9c0c:	2c e0       	ldi	r18, 0x0C	; 12
    9c0e:	ce 01       	movw	r24, r28
    9c10:	0d 96       	adiw	r24, 0x0d	; 13
    9c12:	fc 01       	movw	r30, r24
    9c14:	32 2f       	mov	r19, r18
    9c16:	11 92       	st	Z+, r1
    9c18:	3a 95       	dec	r19
    9c1a:	e9 f7       	brne	.-6      	; 0x9c16 <_ZN10helicopter4util14CoordinateUtil25ConvertFromECEFToLocalNEDEffffffPA3_fRfS4_S4_+0xb6>
	float positionMatrix[3] = {differenceXECEF, differenceYECEF, differenceZECEF};
    9c1c:	89 81       	ldd	r24, Y+1	; 0x01
    9c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    9c20:	ab 81       	ldd	r26, Y+3	; 0x03
    9c22:	bc 81       	ldd	r27, Y+4	; 0x04
    9c24:	89 8f       	std	Y+25, r24	; 0x19
    9c26:	9a 8f       	std	Y+26, r25	; 0x1a
    9c28:	ab 8f       	std	Y+27, r26	; 0x1b
    9c2a:	bc 8f       	std	Y+28, r27	; 0x1c
    9c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    9c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    9c30:	af 81       	ldd	r26, Y+7	; 0x07
    9c32:	b8 85       	ldd	r27, Y+8	; 0x08
    9c34:	8d 8f       	std	Y+29, r24	; 0x1d
    9c36:	9e 8f       	std	Y+30, r25	; 0x1e
    9c38:	af 8f       	std	Y+31, r26	; 0x1f
    9c3a:	b8 a3       	std	Y+32, r27	; 0x20
    9c3c:	89 85       	ldd	r24, Y+9	; 0x09
    9c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9c40:	ab 85       	ldd	r26, Y+11	; 0x0b
    9c42:	bc 85       	ldd	r27, Y+12	; 0x0c
    9c44:	89 a3       	std	Y+33, r24	; 0x21
    9c46:	9a a3       	std	Y+34, r25	; 0x22
    9c48:	ab a3       	std	Y+35, r26	; 0x23
    9c4a:	bc a3       	std	Y+36, r27	; 0x24
		
	//Rotate the current ecef position from earth centered earth fixed (ECEF) into North-East-Down(NED).
	//Iterate through the rows of the rotation matrix
	MatrixUtil::RotateMatrix(ecefToLocalNEDRotationMatrix,positionMatrix,rotatedMatrix);
    9c4c:	ae 01       	movw	r20, r28
    9c4e:	43 5f       	subi	r20, 0xF3	; 243
    9c50:	5f 4f       	sbci	r21, 0xFF	; 255
    9c52:	9e 01       	movw	r18, r28
    9c54:	27 5e       	subi	r18, 0xE7	; 231
    9c56:	3f 4f       	sbci	r19, 0xFF	; 255
    9c58:	2c 96       	adiw	r28, 0x0c	; 12
    9c5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    9c5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    9c5e:	2c 97       	sbiw	r28, 0x0c	; 12
    9c60:	b9 01       	movw	r22, r18
    9c62:	0e 94 2f 52 	call	0xa45e	; 0xa45e <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_>
	
	localNEDX = rotatedMatrix[0];
    9c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    9c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    9c6a:	af 85       	ldd	r26, Y+15	; 0x0f
    9c6c:	b8 89       	ldd	r27, Y+16	; 0x10
    9c6e:	2e 96       	adiw	r28, 0x0e	; 14
    9c70:	2e ad       	ldd	r18, Y+62	; 0x3e
    9c72:	3f ad       	ldd	r19, Y+63	; 0x3f
    9c74:	2e 97       	sbiw	r28, 0x0e	; 14
    9c76:	f9 01       	movw	r30, r18
    9c78:	80 83       	st	Z, r24
    9c7a:	91 83       	std	Z+1, r25	; 0x01
    9c7c:	a2 83       	std	Z+2, r26	; 0x02
    9c7e:	b3 83       	std	Z+3, r27	; 0x03
	localNEDY = rotatedMatrix[1];
    9c80:	89 89       	ldd	r24, Y+17	; 0x11
    9c82:	9a 89       	ldd	r25, Y+18	; 0x12
    9c84:	ab 89       	ldd	r26, Y+19	; 0x13
    9c86:	bc 89       	ldd	r27, Y+20	; 0x14
    9c88:	60 96       	adiw	r28, 0x10	; 16
    9c8a:	2e ad       	ldd	r18, Y+62	; 0x3e
    9c8c:	3f ad       	ldd	r19, Y+63	; 0x3f
    9c8e:	60 97       	sbiw	r28, 0x10	; 16
    9c90:	f9 01       	movw	r30, r18
    9c92:	80 83       	st	Z, r24
    9c94:	91 83       	std	Z+1, r25	; 0x01
    9c96:	a2 83       	std	Z+2, r26	; 0x02
    9c98:	b3 83       	std	Z+3, r27	; 0x03
	localNEDZ = rotatedMatrix[2];
    9c9a:	8d 89       	ldd	r24, Y+21	; 0x15
    9c9c:	9e 89       	ldd	r25, Y+22	; 0x16
    9c9e:	af 89       	ldd	r26, Y+23	; 0x17
    9ca0:	b8 8d       	ldd	r27, Y+24	; 0x18
    9ca2:	62 96       	adiw	r28, 0x12	; 18
    9ca4:	2e ad       	ldd	r18, Y+62	; 0x3e
    9ca6:	3f ad       	ldd	r19, Y+63	; 0x3f
    9ca8:	62 97       	sbiw	r28, 0x12	; 18
    9caa:	f9 01       	movw	r30, r18
    9cac:	80 83       	st	Z, r24
    9cae:	91 83       	std	Z+1, r25	; 0x01
    9cb0:	a2 83       	std	Z+2, r26	; 0x02
    9cb2:	b3 83       	std	Z+3, r27	; 0x03
}
    9cb4:	e4 96       	adiw	r28, 0x34	; 52
    9cb6:	0f b6       	in	r0, 0x3f	; 63
    9cb8:	f8 94       	cli
    9cba:	de bf       	out	0x3e, r29	; 62
    9cbc:	0f be       	out	0x3f, r0	; 63
    9cbe:	cd bf       	out	0x3d, r28	; 61
    9cc0:	df 91       	pop	r29
    9cc2:	cf 91       	pop	r28
    9cc4:	1f 91       	pop	r17
    9cc6:	0f 91       	pop	r16
    9cc8:	ff 90       	pop	r15
    9cca:	ef 90       	pop	r14
    9ccc:	df 90       	pop	r13
    9cce:	cf 90       	pop	r12
    9cd0:	bf 90       	pop	r11
    9cd2:	af 90       	pop	r10
    9cd4:	08 95       	ret

00009cd6 <_ZN10helicopter4util14CoordinateUtil29ConvertFromGeodedicToLocalNEDEffffffPA3_fRfS4_S4_>:

void CoordinateUtil::ConvertFromGeodedicToLocalNED(
	float geodedicLatitude, float geodedicLongitude, float altitudeFeetAgl,
	float ecefReferenceX, float ecefReferenceY, float ecefReferenceZ, float ecefToLocalNEDRotationMatrix[][3],
	float &localNEDX,float &localNEDY,float &localNEDZ)
{
    9cd6:	2f 92       	push	r2
    9cd8:	3f 92       	push	r3
    9cda:	4f 92       	push	r4
    9cdc:	5f 92       	push	r5
    9cde:	6f 92       	push	r6
    9ce0:	7f 92       	push	r7
    9ce2:	8f 92       	push	r8
    9ce4:	9f 92       	push	r9
    9ce6:	af 92       	push	r10
    9ce8:	bf 92       	push	r11
    9cea:	cf 92       	push	r12
    9cec:	df 92       	push	r13
    9cee:	ef 92       	push	r14
    9cf0:	ff 92       	push	r15
    9cf2:	0f 93       	push	r16
    9cf4:	1f 93       	push	r17
    9cf6:	cf 93       	push	r28
    9cf8:	df 93       	push	r29
    9cfa:	cd b7       	in	r28, 0x3d	; 61
    9cfc:	de b7       	in	r29, 0x3e	; 62
    9cfe:	6c 97       	sbiw	r28, 0x1c	; 28
    9d00:	0f b6       	in	r0, 0x3f	; 63
    9d02:	f8 94       	cli
    9d04:	de bf       	out	0x3e, r29	; 62
    9d06:	0f be       	out	0x3f, r0	; 63
    9d08:	cd bf       	out	0x3d, r28	; 61
    9d0a:	6d 87       	std	Y+13, r22	; 0x0d
    9d0c:	7e 87       	std	Y+14, r23	; 0x0e
    9d0e:	8f 87       	std	Y+15, r24	; 0x0f
    9d10:	98 8b       	std	Y+16, r25	; 0x10
    9d12:	29 8b       	std	Y+17, r18	; 0x11
    9d14:	3a 8b       	std	Y+18, r19	; 0x12
    9d16:	4b 8b       	std	Y+19, r20	; 0x13
    9d18:	5c 8b       	std	Y+20, r21	; 0x14
    9d1a:	ed 8a       	std	Y+21, r14	; 0x15
    9d1c:	fe 8a       	std	Y+22, r15	; 0x16
    9d1e:	0f 8b       	std	Y+23, r16	; 0x17
    9d20:	18 8f       	std	Y+24, r17	; 0x18
    9d22:	a9 8e       	std	Y+25, r10	; 0x19
    9d24:	ba 8e       	std	Y+26, r11	; 0x1a
    9d26:	cb 8e       	std	Y+27, r12	; 0x1b
    9d28:	dc 8e       	std	Y+28, r13	; 0x1c
	float ecefX = 0;
    9d2a:	19 82       	std	Y+1, r1	; 0x01
    9d2c:	1a 82       	std	Y+2, r1	; 0x02
    9d2e:	1b 82       	std	Y+3, r1	; 0x03
    9d30:	1c 82       	std	Y+4, r1	; 0x04
	float ecefY = 0;
    9d32:	1d 82       	std	Y+5, r1	; 0x05
    9d34:	1e 82       	std	Y+6, r1	; 0x06
    9d36:	1f 82       	std	Y+7, r1	; 0x07
    9d38:	18 86       	std	Y+8, r1	; 0x08
	float ecefZ = 0;
    9d3a:	19 86       	std	Y+9, r1	; 0x09
    9d3c:	1a 86       	std	Y+10, r1	; 0x0a
    9d3e:	1b 86       	std	Y+11, r1	; 0x0b
    9d40:	1c 86       	std	Y+12, r1	; 0x0c
	
	ConvertFromGeodeticToECEF(geodedicLatitude, geodedicLongitude, altitudeFeetAgl, ecefX, ecefY, ecefZ);
    9d42:	fe 01       	movw	r30, r28
    9d44:	39 96       	adiw	r30, 0x09	; 9
    9d46:	be 01       	movw	r22, r28
    9d48:	6b 5f       	subi	r22, 0xFB	; 251
    9d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d4c:	ed 88       	ldd	r14, Y+21	; 0x15
    9d4e:	fe 88       	ldd	r15, Y+22	; 0x16
    9d50:	0f 89       	ldd	r16, Y+23	; 0x17
    9d52:	18 8d       	ldd	r17, Y+24	; 0x18
    9d54:	29 89       	ldd	r18, Y+17	; 0x11
    9d56:	3a 89       	ldd	r19, Y+18	; 0x12
    9d58:	4b 89       	ldd	r20, Y+19	; 0x13
    9d5a:	5c 89       	ldd	r21, Y+20	; 0x14
    9d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    9d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9d60:	af 85       	ldd	r26, Y+15	; 0x0f
    9d62:	b8 89       	ldd	r27, Y+16	; 0x10
    9d64:	4f 01       	movw	r8, r30
    9d66:	5b 01       	movw	r10, r22
    9d68:	be 01       	movw	r22, r28
    9d6a:	6f 5f       	subi	r22, 0xFF	; 255
    9d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    9d6e:	6b 01       	movw	r12, r22
    9d70:	bc 01       	movw	r22, r24
    9d72:	cd 01       	movw	r24, r26
    9d74:	0e 94 a2 4c 	call	0x9944	; 0x9944 <_ZN10helicopter4util14CoordinateUtil25ConvertFromGeodeticToECEFEfffRfS2_S2_>
	
	ConvertFromECEFToLocalNED(ecefReferenceX, ecefReferenceY, ecefReferenceZ,
		ecefX, ecefY, ecefZ, ecefToLocalNEDRotationMatrix,
		localNEDX, localNEDY, localNEDZ);
    9d78:	29 85       	ldd	r18, Y+9	; 0x09
    9d7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    9d7c:	4b 85       	ldd	r20, Y+11	; 0x0b
    9d7e:	5c 85       	ldd	r21, Y+12	; 0x0c
    9d80:	8d 81       	ldd	r24, Y+5	; 0x05
    9d82:	9e 81       	ldd	r25, Y+6	; 0x06
    9d84:	af 81       	ldd	r26, Y+7	; 0x07
    9d86:	b8 85       	ldd	r27, Y+8	; 0x08
    9d88:	a9 80       	ldd	r10, Y+1	; 0x01
    9d8a:	ba 80       	ldd	r11, Y+2	; 0x02
    9d8c:	cb 80       	ldd	r12, Y+3	; 0x03
    9d8e:	dc 80       	ldd	r13, Y+4	; 0x04
    9d90:	ee a8       	ldd	r14, Y+54	; 0x36
    9d92:	ff a8       	ldd	r15, Y+55	; 0x37
    9d94:	08 ad       	ldd	r16, Y+56	; 0x38
    9d96:	19 ad       	ldd	r17, Y+57	; 0x39
    9d98:	2a a8       	ldd	r2, Y+50	; 0x32
    9d9a:	3b a8       	ldd	r3, Y+51	; 0x33
    9d9c:	4c a8       	ldd	r4, Y+52	; 0x34
    9d9e:	5d a8       	ldd	r5, Y+53	; 0x35
    9da0:	69 8c       	ldd	r6, Y+25	; 0x19
    9da2:	7a 8c       	ldd	r7, Y+26	; 0x1a
    9da4:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9da6:	9c 8c       	ldd	r9, Y+28	; 0x1c
    9da8:	22 96       	adiw	r28, 0x02	; 2
    9daa:	6f ad       	ldd	r22, Y+63	; 0x3f
    9dac:	22 97       	sbiw	r28, 0x02	; 2
    9dae:	6f 93       	push	r22
    9db0:	21 96       	adiw	r28, 0x01	; 1
    9db2:	6f ad       	ldd	r22, Y+63	; 0x3f
    9db4:	21 97       	sbiw	r28, 0x01	; 1
    9db6:	6f 93       	push	r22
    9db8:	6f ad       	ldd	r22, Y+63	; 0x3f
    9dba:	6f 93       	push	r22
    9dbc:	6e ad       	ldd	r22, Y+62	; 0x3e
    9dbe:	6f 93       	push	r22
    9dc0:	6d ad       	ldd	r22, Y+61	; 0x3d
    9dc2:	6f 93       	push	r22
    9dc4:	6c ad       	ldd	r22, Y+60	; 0x3c
    9dc6:	6f 93       	push	r22
    9dc8:	6b ad       	ldd	r22, Y+59	; 0x3b
    9dca:	6f 93       	push	r22
    9dcc:	6a ad       	ldd	r22, Y+58	; 0x3a
    9dce:	6f 93       	push	r22
    9dd0:	65 2f       	mov	r22, r21
    9dd2:	6f 93       	push	r22
    9dd4:	64 2f       	mov	r22, r20
    9dd6:	6f 93       	push	r22
    9dd8:	63 2f       	mov	r22, r19
    9dda:	6f 93       	push	r22
    9ddc:	2f 93       	push	r18
    9dde:	2b 2f       	mov	r18, r27
    9de0:	2f 93       	push	r18
    9de2:	2a 2f       	mov	r18, r26
    9de4:	2f 93       	push	r18
    9de6:	29 2f       	mov	r18, r25
    9de8:	2f 93       	push	r18
    9dea:	8f 93       	push	r24
    9dec:	a2 01       	movw	r20, r4
    9dee:	91 01       	movw	r18, r2
    9df0:	c4 01       	movw	r24, r8
    9df2:	b3 01       	movw	r22, r6
    9df4:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <_ZN10helicopter4util14CoordinateUtil25ConvertFromECEFToLocalNEDEffffffPA3_fRfS4_S4_>
    9df8:	8d b7       	in	r24, 0x3d	; 61
    9dfa:	9e b7       	in	r25, 0x3e	; 62
    9dfc:	40 96       	adiw	r24, 0x10	; 16
    9dfe:	0f b6       	in	r0, 0x3f	; 63
    9e00:	f8 94       	cli
    9e02:	de bf       	out	0x3e, r29	; 62
    9e04:	0f be       	out	0x3f, r0	; 63
    9e06:	cd bf       	out	0x3d, r28	; 61
    9e08:	6c 96       	adiw	r28, 0x1c	; 28
    9e0a:	0f b6       	in	r0, 0x3f	; 63
    9e0c:	f8 94       	cli
    9e0e:	de bf       	out	0x3e, r29	; 62
    9e10:	0f be       	out	0x3f, r0	; 63
    9e12:	cd bf       	out	0x3d, r28	; 61
    9e14:	df 91       	pop	r29
    9e16:	cf 91       	pop	r28
    9e18:	1f 91       	pop	r17
    9e1a:	0f 91       	pop	r16
    9e1c:	ff 90       	pop	r15
    9e1e:	ef 90       	pop	r14
    9e20:	df 90       	pop	r13
    9e22:	cf 90       	pop	r12
    9e24:	bf 90       	pop	r11
    9e26:	af 90       	pop	r10
    9e28:	9f 90       	pop	r9
    9e2a:	8f 90       	pop	r8
    9e2c:	7f 90       	pop	r7
    9e2e:	6f 90       	pop	r6
    9e30:	5f 90       	pop	r5
    9e32:	4f 90       	pop	r4
    9e34:	3f 90       	pop	r3
    9e36:	2f 90       	pop	r2
    9e38:	08 95       	ret

00009e3a <_ZN10helicopter4util10MatrixUtil20CreateRotationMatrixEfffPA3_f>:
#include "MatrixUtil.h"

using namespace helicopter::util;

void MatrixUtil::CreateRotationMatrix( float phiRotationAboutXRads, float thetaRotationAboutYRads, float saiRotationAboutZRads, float rotationMatrix[][3] )
{
    9e3a:	8f 92       	push	r8
    9e3c:	9f 92       	push	r9
    9e3e:	af 92       	push	r10
    9e40:	bf 92       	push	r11
    9e42:	cf 92       	push	r12
    9e44:	df 92       	push	r13
    9e46:	ef 92       	push	r14
    9e48:	ff 92       	push	r15
    9e4a:	0f 93       	push	r16
    9e4c:	1f 93       	push	r17
    9e4e:	cf 93       	push	r28
    9e50:	df 93       	push	r29
    9e52:	cd b7       	in	r28, 0x3d	; 61
    9e54:	de b7       	in	r29, 0x3e	; 62
    9e56:	2e 97       	sbiw	r28, 0x0e	; 14
    9e58:	0f b6       	in	r0, 0x3f	; 63
    9e5a:	f8 94       	cli
    9e5c:	de bf       	out	0x3e, r29	; 62
    9e5e:	0f be       	out	0x3f, r0	; 63
    9e60:	cd bf       	out	0x3d, r28	; 61
    9e62:	69 83       	std	Y+1, r22	; 0x01
    9e64:	7a 83       	std	Y+2, r23	; 0x02
    9e66:	8b 83       	std	Y+3, r24	; 0x03
    9e68:	9c 83       	std	Y+4, r25	; 0x04
    9e6a:	2d 83       	std	Y+5, r18	; 0x05
    9e6c:	3e 83       	std	Y+6, r19	; 0x06
    9e6e:	4f 83       	std	Y+7, r20	; 0x07
    9e70:	58 87       	std	Y+8, r21	; 0x08
    9e72:	e9 86       	std	Y+9, r14	; 0x09
    9e74:	fa 86       	std	Y+10, r15	; 0x0a
    9e76:	0b 87       	std	Y+11, r16	; 0x0b
    9e78:	1c 87       	std	Y+12, r17	; 0x0c
    9e7a:	de 86       	std	Y+14, r13	; 0x0e
    9e7c:	cd 86       	std	Y+13, r12	; 0x0d
	rotationMatrix[0][0] = cos(thetaRotationAboutYRads)*cos(saiRotationAboutZRads);
    9e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    9e80:	9e 81       	ldd	r25, Y+6	; 0x06
    9e82:	af 81       	ldd	r26, Y+7	; 0x07
    9e84:	b8 85       	ldd	r27, Y+8	; 0x08
    9e86:	bc 01       	movw	r22, r24
    9e88:	cd 01       	movw	r24, r26
    9e8a:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9e8e:	6b 01       	movw	r12, r22
    9e90:	7c 01       	movw	r14, r24
    9e92:	89 85       	ldd	r24, Y+9	; 0x09
    9e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e96:	ab 85       	ldd	r26, Y+11	; 0x0b
    9e98:	bc 85       	ldd	r27, Y+12	; 0x0c
    9e9a:	bc 01       	movw	r22, r24
    9e9c:	cd 01       	movw	r24, r26
    9e9e:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9ea2:	dc 01       	movw	r26, r24
    9ea4:	cb 01       	movw	r24, r22
    9ea6:	9c 01       	movw	r18, r24
    9ea8:	ad 01       	movw	r20, r26
    9eaa:	c7 01       	movw	r24, r14
    9eac:	b6 01       	movw	r22, r12
    9eae:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9eb2:	dc 01       	movw	r26, r24
    9eb4:	cb 01       	movw	r24, r22
    9eb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    9eb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    9eba:	f9 01       	movw	r30, r18
    9ebc:	80 83       	st	Z, r24
    9ebe:	91 83       	std	Z+1, r25	; 0x01
    9ec0:	a2 83       	std	Z+2, r26	; 0x02
    9ec2:	b3 83       	std	Z+3, r27	; 0x03
	rotationMatrix[0][1] = sin(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*cos(saiRotationAboutZRads) - cos(phiRotationAboutXRads)*sin(saiRotationAboutZRads);
    9ec4:	89 81       	ldd	r24, Y+1	; 0x01
    9ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    9ec8:	ab 81       	ldd	r26, Y+3	; 0x03
    9eca:	bc 81       	ldd	r27, Y+4	; 0x04
    9ecc:	bc 01       	movw	r22, r24
    9ece:	cd 01       	movw	r24, r26
    9ed0:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9ed4:	6b 01       	movw	r12, r22
    9ed6:	7c 01       	movw	r14, r24
    9ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    9eda:	9e 81       	ldd	r25, Y+6	; 0x06
    9edc:	af 81       	ldd	r26, Y+7	; 0x07
    9ede:	b8 85       	ldd	r27, Y+8	; 0x08
    9ee0:	bc 01       	movw	r22, r24
    9ee2:	cd 01       	movw	r24, r26
    9ee4:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9ee8:	dc 01       	movw	r26, r24
    9eea:	cb 01       	movw	r24, r22
    9eec:	9c 01       	movw	r18, r24
    9eee:	ad 01       	movw	r20, r26
    9ef0:	c7 01       	movw	r24, r14
    9ef2:	b6 01       	movw	r22, r12
    9ef4:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9ef8:	dc 01       	movw	r26, r24
    9efa:	cb 01       	movw	r24, r22
    9efc:	6c 01       	movw	r12, r24
    9efe:	7d 01       	movw	r14, r26
    9f00:	89 85       	ldd	r24, Y+9	; 0x09
    9f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    9f04:	ab 85       	ldd	r26, Y+11	; 0x0b
    9f06:	bc 85       	ldd	r27, Y+12	; 0x0c
    9f08:	bc 01       	movw	r22, r24
    9f0a:	cd 01       	movw	r24, r26
    9f0c:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9f10:	dc 01       	movw	r26, r24
    9f12:	cb 01       	movw	r24, r22
    9f14:	9c 01       	movw	r18, r24
    9f16:	ad 01       	movw	r20, r26
    9f18:	c7 01       	movw	r24, r14
    9f1a:	b6 01       	movw	r22, r12
    9f1c:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9f20:	dc 01       	movw	r26, r24
    9f22:	cb 01       	movw	r24, r22
    9f24:	6c 01       	movw	r12, r24
    9f26:	7d 01       	movw	r14, r26
    9f28:	89 81       	ldd	r24, Y+1	; 0x01
    9f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    9f2c:	ab 81       	ldd	r26, Y+3	; 0x03
    9f2e:	bc 81       	ldd	r27, Y+4	; 0x04
    9f30:	bc 01       	movw	r22, r24
    9f32:	cd 01       	movw	r24, r26
    9f34:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9f38:	4b 01       	movw	r8, r22
    9f3a:	5c 01       	movw	r10, r24
    9f3c:	89 85       	ldd	r24, Y+9	; 0x09
    9f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9f40:	ab 85       	ldd	r26, Y+11	; 0x0b
    9f42:	bc 85       	ldd	r27, Y+12	; 0x0c
    9f44:	bc 01       	movw	r22, r24
    9f46:	cd 01       	movw	r24, r26
    9f48:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9f4c:	dc 01       	movw	r26, r24
    9f4e:	cb 01       	movw	r24, r22
    9f50:	9c 01       	movw	r18, r24
    9f52:	ad 01       	movw	r20, r26
    9f54:	c5 01       	movw	r24, r10
    9f56:	b4 01       	movw	r22, r8
    9f58:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9f5c:	dc 01       	movw	r26, r24
    9f5e:	cb 01       	movw	r24, r22
    9f60:	9c 01       	movw	r18, r24
    9f62:	ad 01       	movw	r20, r26
    9f64:	c7 01       	movw	r24, r14
    9f66:	b6 01       	movw	r22, r12
    9f68:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    9f6c:	dc 01       	movw	r26, r24
    9f6e:	cb 01       	movw	r24, r22
    9f70:	2d 85       	ldd	r18, Y+13	; 0x0d
    9f72:	3e 85       	ldd	r19, Y+14	; 0x0e
    9f74:	f9 01       	movw	r30, r18
    9f76:	84 83       	std	Z+4, r24	; 0x04
    9f78:	95 83       	std	Z+5, r25	; 0x05
    9f7a:	a6 83       	std	Z+6, r26	; 0x06
    9f7c:	b7 83       	std	Z+7, r27	; 0x07
	rotationMatrix[0][2] = cos(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*cos(saiRotationAboutZRads) + sin(phiRotationAboutXRads)*sin(saiRotationAboutZRads);
    9f7e:	89 81       	ldd	r24, Y+1	; 0x01
    9f80:	9a 81       	ldd	r25, Y+2	; 0x02
    9f82:	ab 81       	ldd	r26, Y+3	; 0x03
    9f84:	bc 81       	ldd	r27, Y+4	; 0x04
    9f86:	bc 01       	movw	r22, r24
    9f88:	cd 01       	movw	r24, r26
    9f8a:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9f8e:	6b 01       	movw	r12, r22
    9f90:	7c 01       	movw	r14, r24
    9f92:	8d 81       	ldd	r24, Y+5	; 0x05
    9f94:	9e 81       	ldd	r25, Y+6	; 0x06
    9f96:	af 81       	ldd	r26, Y+7	; 0x07
    9f98:	b8 85       	ldd	r27, Y+8	; 0x08
    9f9a:	bc 01       	movw	r22, r24
    9f9c:	cd 01       	movw	r24, r26
    9f9e:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9fa2:	dc 01       	movw	r26, r24
    9fa4:	cb 01       	movw	r24, r22
    9fa6:	9c 01       	movw	r18, r24
    9fa8:	ad 01       	movw	r20, r26
    9faa:	c7 01       	movw	r24, r14
    9fac:	b6 01       	movw	r22, r12
    9fae:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9fb2:	dc 01       	movw	r26, r24
    9fb4:	cb 01       	movw	r24, r22
    9fb6:	6c 01       	movw	r12, r24
    9fb8:	7d 01       	movw	r14, r26
    9fba:	89 85       	ldd	r24, Y+9	; 0x09
    9fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    9fbe:	ab 85       	ldd	r26, Y+11	; 0x0b
    9fc0:	bc 85       	ldd	r27, Y+12	; 0x0c
    9fc2:	bc 01       	movw	r22, r24
    9fc4:	cd 01       	movw	r24, r26
    9fc6:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    9fca:	dc 01       	movw	r26, r24
    9fcc:	cb 01       	movw	r24, r22
    9fce:	9c 01       	movw	r18, r24
    9fd0:	ad 01       	movw	r20, r26
    9fd2:	c7 01       	movw	r24, r14
    9fd4:	b6 01       	movw	r22, r12
    9fd6:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    9fda:	dc 01       	movw	r26, r24
    9fdc:	cb 01       	movw	r24, r22
    9fde:	6c 01       	movw	r12, r24
    9fe0:	7d 01       	movw	r14, r26
    9fe2:	89 81       	ldd	r24, Y+1	; 0x01
    9fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    9fe6:	ab 81       	ldd	r26, Y+3	; 0x03
    9fe8:	bc 81       	ldd	r27, Y+4	; 0x04
    9fea:	bc 01       	movw	r22, r24
    9fec:	cd 01       	movw	r24, r26
    9fee:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    9ff2:	4b 01       	movw	r8, r22
    9ff4:	5c 01       	movw	r10, r24
    9ff6:	89 85       	ldd	r24, Y+9	; 0x09
    9ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    9ffa:	ab 85       	ldd	r26, Y+11	; 0x0b
    9ffc:	bc 85       	ldd	r27, Y+12	; 0x0c
    9ffe:	bc 01       	movw	r22, r24
    a000:	cd 01       	movw	r24, r26
    a002:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a006:	dc 01       	movw	r26, r24
    a008:	cb 01       	movw	r24, r22
    a00a:	9c 01       	movw	r18, r24
    a00c:	ad 01       	movw	r20, r26
    a00e:	c5 01       	movw	r24, r10
    a010:	b4 01       	movw	r22, r8
    a012:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a016:	dc 01       	movw	r26, r24
    a018:	cb 01       	movw	r24, r22
    a01a:	9c 01       	movw	r18, r24
    a01c:	ad 01       	movw	r20, r26
    a01e:	c7 01       	movw	r24, r14
    a020:	b6 01       	movw	r22, r12
    a022:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    a026:	dc 01       	movw	r26, r24
    a028:	cb 01       	movw	r24, r22
    a02a:	2d 85       	ldd	r18, Y+13	; 0x0d
    a02c:	3e 85       	ldd	r19, Y+14	; 0x0e
    a02e:	f9 01       	movw	r30, r18
    a030:	80 87       	std	Z+8, r24	; 0x08
    a032:	91 87       	std	Z+9, r25	; 0x09
    a034:	a2 87       	std	Z+10, r26	; 0x0a
    a036:	b3 87       	std	Z+11, r27	; 0x0b
	rotationMatrix[1][0] = cos(thetaRotationAboutYRads)*sin(saiRotationAboutZRads);
    a038:	8d 85       	ldd	r24, Y+13	; 0x0d
    a03a:	9e 85       	ldd	r25, Y+14	; 0x0e
    a03c:	8c 01       	movw	r16, r24
    a03e:	04 5f       	subi	r16, 0xF4	; 244
    a040:	1f 4f       	sbci	r17, 0xFF	; 255
    a042:	8d 81       	ldd	r24, Y+5	; 0x05
    a044:	9e 81       	ldd	r25, Y+6	; 0x06
    a046:	af 81       	ldd	r26, Y+7	; 0x07
    a048:	b8 85       	ldd	r27, Y+8	; 0x08
    a04a:	bc 01       	movw	r22, r24
    a04c:	cd 01       	movw	r24, r26
    a04e:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a052:	6b 01       	movw	r12, r22
    a054:	7c 01       	movw	r14, r24
    a056:	89 85       	ldd	r24, Y+9	; 0x09
    a058:	9a 85       	ldd	r25, Y+10	; 0x0a
    a05a:	ab 85       	ldd	r26, Y+11	; 0x0b
    a05c:	bc 85       	ldd	r27, Y+12	; 0x0c
    a05e:	bc 01       	movw	r22, r24
    a060:	cd 01       	movw	r24, r26
    a062:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a066:	dc 01       	movw	r26, r24
    a068:	cb 01       	movw	r24, r22
    a06a:	9c 01       	movw	r18, r24
    a06c:	ad 01       	movw	r20, r26
    a06e:	c7 01       	movw	r24, r14
    a070:	b6 01       	movw	r22, r12
    a072:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a076:	dc 01       	movw	r26, r24
    a078:	cb 01       	movw	r24, r22
    a07a:	f8 01       	movw	r30, r16
    a07c:	80 83       	st	Z, r24
    a07e:	91 83       	std	Z+1, r25	; 0x01
    a080:	a2 83       	std	Z+2, r26	; 0x02
    a082:	b3 83       	std	Z+3, r27	; 0x03
	rotationMatrix[1][1] = sin(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*sin(saiRotationAboutZRads) + cos(phiRotationAboutXRads)*cos(saiRotationAboutZRads);
    a084:	8d 85       	ldd	r24, Y+13	; 0x0d
    a086:	9e 85       	ldd	r25, Y+14	; 0x0e
    a088:	8c 01       	movw	r16, r24
    a08a:	04 5f       	subi	r16, 0xF4	; 244
    a08c:	1f 4f       	sbci	r17, 0xFF	; 255
    a08e:	89 81       	ldd	r24, Y+1	; 0x01
    a090:	9a 81       	ldd	r25, Y+2	; 0x02
    a092:	ab 81       	ldd	r26, Y+3	; 0x03
    a094:	bc 81       	ldd	r27, Y+4	; 0x04
    a096:	bc 01       	movw	r22, r24
    a098:	cd 01       	movw	r24, r26
    a09a:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a09e:	6b 01       	movw	r12, r22
    a0a0:	7c 01       	movw	r14, r24
    a0a2:	8d 81       	ldd	r24, Y+5	; 0x05
    a0a4:	9e 81       	ldd	r25, Y+6	; 0x06
    a0a6:	af 81       	ldd	r26, Y+7	; 0x07
    a0a8:	b8 85       	ldd	r27, Y+8	; 0x08
    a0aa:	bc 01       	movw	r22, r24
    a0ac:	cd 01       	movw	r24, r26
    a0ae:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a0b2:	dc 01       	movw	r26, r24
    a0b4:	cb 01       	movw	r24, r22
    a0b6:	9c 01       	movw	r18, r24
    a0b8:	ad 01       	movw	r20, r26
    a0ba:	c7 01       	movw	r24, r14
    a0bc:	b6 01       	movw	r22, r12
    a0be:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a0c2:	dc 01       	movw	r26, r24
    a0c4:	cb 01       	movw	r24, r22
    a0c6:	6c 01       	movw	r12, r24
    a0c8:	7d 01       	movw	r14, r26
    a0ca:	89 85       	ldd	r24, Y+9	; 0x09
    a0cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    a0d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    a0d2:	bc 01       	movw	r22, r24
    a0d4:	cd 01       	movw	r24, r26
    a0d6:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a0da:	dc 01       	movw	r26, r24
    a0dc:	cb 01       	movw	r24, r22
    a0de:	9c 01       	movw	r18, r24
    a0e0:	ad 01       	movw	r20, r26
    a0e2:	c7 01       	movw	r24, r14
    a0e4:	b6 01       	movw	r22, r12
    a0e6:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a0ea:	dc 01       	movw	r26, r24
    a0ec:	cb 01       	movw	r24, r22
    a0ee:	6c 01       	movw	r12, r24
    a0f0:	7d 01       	movw	r14, r26
    a0f2:	89 81       	ldd	r24, Y+1	; 0x01
    a0f4:	9a 81       	ldd	r25, Y+2	; 0x02
    a0f6:	ab 81       	ldd	r26, Y+3	; 0x03
    a0f8:	bc 81       	ldd	r27, Y+4	; 0x04
    a0fa:	bc 01       	movw	r22, r24
    a0fc:	cd 01       	movw	r24, r26
    a0fe:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a102:	4b 01       	movw	r8, r22
    a104:	5c 01       	movw	r10, r24
    a106:	89 85       	ldd	r24, Y+9	; 0x09
    a108:	9a 85       	ldd	r25, Y+10	; 0x0a
    a10a:	ab 85       	ldd	r26, Y+11	; 0x0b
    a10c:	bc 85       	ldd	r27, Y+12	; 0x0c
    a10e:	bc 01       	movw	r22, r24
    a110:	cd 01       	movw	r24, r26
    a112:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a116:	dc 01       	movw	r26, r24
    a118:	cb 01       	movw	r24, r22
    a11a:	9c 01       	movw	r18, r24
    a11c:	ad 01       	movw	r20, r26
    a11e:	c5 01       	movw	r24, r10
    a120:	b4 01       	movw	r22, r8
    a122:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a126:	dc 01       	movw	r26, r24
    a128:	cb 01       	movw	r24, r22
    a12a:	9c 01       	movw	r18, r24
    a12c:	ad 01       	movw	r20, r26
    a12e:	c7 01       	movw	r24, r14
    a130:	b6 01       	movw	r22, r12
    a132:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    a136:	dc 01       	movw	r26, r24
    a138:	cb 01       	movw	r24, r22
    a13a:	f8 01       	movw	r30, r16
    a13c:	84 83       	std	Z+4, r24	; 0x04
    a13e:	95 83       	std	Z+5, r25	; 0x05
    a140:	a6 83       	std	Z+6, r26	; 0x06
    a142:	b7 83       	std	Z+7, r27	; 0x07
	rotationMatrix[1][2] = cos(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*sin(saiRotationAboutZRads) - sin(phiRotationAboutXRads)*cos(saiRotationAboutZRads);
    a144:	8d 85       	ldd	r24, Y+13	; 0x0d
    a146:	9e 85       	ldd	r25, Y+14	; 0x0e
    a148:	8c 01       	movw	r16, r24
    a14a:	04 5f       	subi	r16, 0xF4	; 244
    a14c:	1f 4f       	sbci	r17, 0xFF	; 255
    a14e:	89 81       	ldd	r24, Y+1	; 0x01
    a150:	9a 81       	ldd	r25, Y+2	; 0x02
    a152:	ab 81       	ldd	r26, Y+3	; 0x03
    a154:	bc 81       	ldd	r27, Y+4	; 0x04
    a156:	bc 01       	movw	r22, r24
    a158:	cd 01       	movw	r24, r26
    a15a:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a15e:	6b 01       	movw	r12, r22
    a160:	7c 01       	movw	r14, r24
    a162:	8d 81       	ldd	r24, Y+5	; 0x05
    a164:	9e 81       	ldd	r25, Y+6	; 0x06
    a166:	af 81       	ldd	r26, Y+7	; 0x07
    a168:	b8 85       	ldd	r27, Y+8	; 0x08
    a16a:	bc 01       	movw	r22, r24
    a16c:	cd 01       	movw	r24, r26
    a16e:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a172:	dc 01       	movw	r26, r24
    a174:	cb 01       	movw	r24, r22
    a176:	9c 01       	movw	r18, r24
    a178:	ad 01       	movw	r20, r26
    a17a:	c7 01       	movw	r24, r14
    a17c:	b6 01       	movw	r22, r12
    a17e:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a182:	dc 01       	movw	r26, r24
    a184:	cb 01       	movw	r24, r22
    a186:	6c 01       	movw	r12, r24
    a188:	7d 01       	movw	r14, r26
    a18a:	89 85       	ldd	r24, Y+9	; 0x09
    a18c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a18e:	ab 85       	ldd	r26, Y+11	; 0x0b
    a190:	bc 85       	ldd	r27, Y+12	; 0x0c
    a192:	bc 01       	movw	r22, r24
    a194:	cd 01       	movw	r24, r26
    a196:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a19a:	dc 01       	movw	r26, r24
    a19c:	cb 01       	movw	r24, r22
    a19e:	9c 01       	movw	r18, r24
    a1a0:	ad 01       	movw	r20, r26
    a1a2:	c7 01       	movw	r24, r14
    a1a4:	b6 01       	movw	r22, r12
    a1a6:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a1aa:	dc 01       	movw	r26, r24
    a1ac:	cb 01       	movw	r24, r22
    a1ae:	6c 01       	movw	r12, r24
    a1b0:	7d 01       	movw	r14, r26
    a1b2:	89 81       	ldd	r24, Y+1	; 0x01
    a1b4:	9a 81       	ldd	r25, Y+2	; 0x02
    a1b6:	ab 81       	ldd	r26, Y+3	; 0x03
    a1b8:	bc 81       	ldd	r27, Y+4	; 0x04
    a1ba:	bc 01       	movw	r22, r24
    a1bc:	cd 01       	movw	r24, r26
    a1be:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a1c2:	4b 01       	movw	r8, r22
    a1c4:	5c 01       	movw	r10, r24
    a1c6:	89 85       	ldd	r24, Y+9	; 0x09
    a1c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    a1ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    a1cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    a1ce:	bc 01       	movw	r22, r24
    a1d0:	cd 01       	movw	r24, r26
    a1d2:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a1d6:	dc 01       	movw	r26, r24
    a1d8:	cb 01       	movw	r24, r22
    a1da:	9c 01       	movw	r18, r24
    a1dc:	ad 01       	movw	r20, r26
    a1de:	c5 01       	movw	r24, r10
    a1e0:	b4 01       	movw	r22, r8
    a1e2:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a1e6:	dc 01       	movw	r26, r24
    a1e8:	cb 01       	movw	r24, r22
    a1ea:	9c 01       	movw	r18, r24
    a1ec:	ad 01       	movw	r20, r26
    a1ee:	c7 01       	movw	r24, r14
    a1f0:	b6 01       	movw	r22, r12
    a1f2:	0e 94 cb 53 	call	0xa796	; 0xa796 <__subsf3>
    a1f6:	dc 01       	movw	r26, r24
    a1f8:	cb 01       	movw	r24, r22
    a1fa:	f8 01       	movw	r30, r16
    a1fc:	80 87       	std	Z+8, r24	; 0x08
    a1fe:	91 87       	std	Z+9, r25	; 0x09
    a200:	a2 87       	std	Z+10, r26	; 0x0a
    a202:	b3 87       	std	Z+11, r27	; 0x0b
	rotationMatrix[2][0] = -sin(thetaRotationAboutYRads);
    a204:	8d 85       	ldd	r24, Y+13	; 0x0d
    a206:	9e 85       	ldd	r25, Y+14	; 0x0e
    a208:	8c 01       	movw	r16, r24
    a20a:	08 5e       	subi	r16, 0xE8	; 232
    a20c:	1f 4f       	sbci	r17, 0xFF	; 255
    a20e:	8d 81       	ldd	r24, Y+5	; 0x05
    a210:	9e 81       	ldd	r25, Y+6	; 0x06
    a212:	af 81       	ldd	r26, Y+7	; 0x07
    a214:	b8 85       	ldd	r27, Y+8	; 0x08
    a216:	bc 01       	movw	r22, r24
    a218:	cd 01       	movw	r24, r26
    a21a:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a21e:	dc 01       	movw	r26, r24
    a220:	cb 01       	movw	r24, r22
    a222:	b0 58       	subi	r27, 0x80	; 128
    a224:	f8 01       	movw	r30, r16
    a226:	80 83       	st	Z, r24
    a228:	91 83       	std	Z+1, r25	; 0x01
    a22a:	a2 83       	std	Z+2, r26	; 0x02
    a22c:	b3 83       	std	Z+3, r27	; 0x03
	rotationMatrix[2][1] = sin(phiRotationAboutXRads)*cos(thetaRotationAboutYRads);
    a22e:	8d 85       	ldd	r24, Y+13	; 0x0d
    a230:	9e 85       	ldd	r25, Y+14	; 0x0e
    a232:	8c 01       	movw	r16, r24
    a234:	08 5e       	subi	r16, 0xE8	; 232
    a236:	1f 4f       	sbci	r17, 0xFF	; 255
    a238:	89 81       	ldd	r24, Y+1	; 0x01
    a23a:	9a 81       	ldd	r25, Y+2	; 0x02
    a23c:	ab 81       	ldd	r26, Y+3	; 0x03
    a23e:	bc 81       	ldd	r27, Y+4	; 0x04
    a240:	bc 01       	movw	r22, r24
    a242:	cd 01       	movw	r24, r26
    a244:	0e 94 c1 56 	call	0xad82	; 0xad82 <sin>
    a248:	6b 01       	movw	r12, r22
    a24a:	7c 01       	movw	r14, r24
    a24c:	8d 81       	ldd	r24, Y+5	; 0x05
    a24e:	9e 81       	ldd	r25, Y+6	; 0x06
    a250:	af 81       	ldd	r26, Y+7	; 0x07
    a252:	b8 85       	ldd	r27, Y+8	; 0x08
    a254:	bc 01       	movw	r22, r24
    a256:	cd 01       	movw	r24, r26
    a258:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a25c:	dc 01       	movw	r26, r24
    a25e:	cb 01       	movw	r24, r22
    a260:	9c 01       	movw	r18, r24
    a262:	ad 01       	movw	r20, r26
    a264:	c7 01       	movw	r24, r14
    a266:	b6 01       	movw	r22, r12
    a268:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a26c:	dc 01       	movw	r26, r24
    a26e:	cb 01       	movw	r24, r22
    a270:	f8 01       	movw	r30, r16
    a272:	84 83       	std	Z+4, r24	; 0x04
    a274:	95 83       	std	Z+5, r25	; 0x05
    a276:	a6 83       	std	Z+6, r26	; 0x06
    a278:	b7 83       	std	Z+7, r27	; 0x07
	rotationMatrix[2][2] = cos(phiRotationAboutXRads)*cos(thetaRotationAboutYRads);
    a27a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a27c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a27e:	8c 01       	movw	r16, r24
    a280:	08 5e       	subi	r16, 0xE8	; 232
    a282:	1f 4f       	sbci	r17, 0xFF	; 255
    a284:	89 81       	ldd	r24, Y+1	; 0x01
    a286:	9a 81       	ldd	r25, Y+2	; 0x02
    a288:	ab 81       	ldd	r26, Y+3	; 0x03
    a28a:	bc 81       	ldd	r27, Y+4	; 0x04
    a28c:	bc 01       	movw	r22, r24
    a28e:	cd 01       	movw	r24, r26
    a290:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a294:	6b 01       	movw	r12, r22
    a296:	7c 01       	movw	r14, r24
    a298:	8d 81       	ldd	r24, Y+5	; 0x05
    a29a:	9e 81       	ldd	r25, Y+6	; 0x06
    a29c:	af 81       	ldd	r26, Y+7	; 0x07
    a29e:	b8 85       	ldd	r27, Y+8	; 0x08
    a2a0:	bc 01       	movw	r22, r24
    a2a2:	cd 01       	movw	r24, r26
    a2a4:	0e 94 34 54 	call	0xa868	; 0xa868 <cos>
    a2a8:	dc 01       	movw	r26, r24
    a2aa:	cb 01       	movw	r24, r22
    a2ac:	9c 01       	movw	r18, r24
    a2ae:	ad 01       	movw	r20, r26
    a2b0:	c7 01       	movw	r24, r14
    a2b2:	b6 01       	movw	r22, r12
    a2b4:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a2b8:	dc 01       	movw	r26, r24
    a2ba:	cb 01       	movw	r24, r22
    a2bc:	f8 01       	movw	r30, r16
    a2be:	80 87       	std	Z+8, r24	; 0x08
    a2c0:	91 87       	std	Z+9, r25	; 0x09
    a2c2:	a2 87       	std	Z+10, r26	; 0x0a
    a2c4:	b3 87       	std	Z+11, r27	; 0x0b
}
    a2c6:	2e 96       	adiw	r28, 0x0e	; 14
    a2c8:	0f b6       	in	r0, 0x3f	; 63
    a2ca:	f8 94       	cli
    a2cc:	de bf       	out	0x3e, r29	; 62
    a2ce:	0f be       	out	0x3f, r0	; 63
    a2d0:	cd bf       	out	0x3d, r28	; 61
    a2d2:	df 91       	pop	r29
    a2d4:	cf 91       	pop	r28
    a2d6:	1f 91       	pop	r17
    a2d8:	0f 91       	pop	r16
    a2da:	ff 90       	pop	r15
    a2dc:	ef 90       	pop	r14
    a2de:	df 90       	pop	r13
    a2e0:	cf 90       	pop	r12
    a2e2:	bf 90       	pop	r11
    a2e4:	af 90       	pop	r10
    a2e6:	9f 90       	pop	r9
    a2e8:	8f 90       	pop	r8
    a2ea:	08 95       	ret

0000a2ec <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf>:

void MatrixUtil::RotateMatrix( float rotationMatrix[][3], int valuesToRotate[3], float rotatedValues[3] )
{
    a2ec:	8f 92       	push	r8
    a2ee:	9f 92       	push	r9
    a2f0:	af 92       	push	r10
    a2f2:	bf 92       	push	r11
    a2f4:	cf 92       	push	r12
    a2f6:	df 92       	push	r13
    a2f8:	ef 92       	push	r14
    a2fa:	ff 92       	push	r15
    a2fc:	0f 93       	push	r16
    a2fe:	1f 93       	push	r17
    a300:	cf 93       	push	r28
    a302:	df 93       	push	r29
    a304:	cd b7       	in	r28, 0x3d	; 61
    a306:	de b7       	in	r29, 0x3e	; 62
    a308:	2a 97       	sbiw	r28, 0x0a	; 10
    a30a:	0f b6       	in	r0, 0x3f	; 63
    a30c:	f8 94       	cli
    a30e:	de bf       	out	0x3e, r29	; 62
    a310:	0f be       	out	0x3f, r0	; 63
    a312:	cd bf       	out	0x3d, r28	; 61
    a314:	9e 83       	std	Y+6, r25	; 0x06
    a316:	8d 83       	std	Y+5, r24	; 0x05
    a318:	78 87       	std	Y+8, r23	; 0x08
    a31a:	6f 83       	std	Y+7, r22	; 0x07
    a31c:	5a 87       	std	Y+10, r21	; 0x0a
    a31e:	49 87       	std	Y+9, r20	; 0x09
	//clear out the rotated values list;
	memset(rotatedValues,0,sizeof(float) * 3);
    a320:	89 85       	ldd	r24, Y+9	; 0x09
    a322:	9a 85       	ldd	r25, Y+10	; 0x0a
    a324:	4c e0       	ldi	r20, 0x0C	; 12
    a326:	50 e0       	ldi	r21, 0x00	; 0
    a328:	60 e0       	ldi	r22, 0x00	; 0
    a32a:	70 e0       	ldi	r23, 0x00	; 0
    a32c:	0e 94 b9 59 	call	0xb372	; 0xb372 <memset>
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
    a330:	1a 82       	std	Y+2, r1	; 0x02
    a332:	19 82       	std	Y+1, r1	; 0x01
    a334:	77 c0       	rjmp	.+238    	; 0xa424 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x138>
	{
		//iterate through the columns of the rotation matrix
		for (int column = 0; column < 3; column++)
    a336:	1c 82       	std	Y+4, r1	; 0x04
    a338:	1b 82       	std	Y+3, r1	; 0x03
    a33a:	65 c0       	rjmp	.+202    	; 0xa406 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x11a>
		{
			//technically the rotatedMatrix[row] is writing to a 'column' in the matrix, and valuesToRotate is actually the 'row'.
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
    a33c:	89 81       	ldd	r24, Y+1	; 0x01
    a33e:	9a 81       	ldd	r25, Y+2	; 0x02
    a340:	88 0f       	add	r24, r24
    a342:	99 1f       	adc	r25, r25
    a344:	88 0f       	add	r24, r24
    a346:	99 1f       	adc	r25, r25
    a348:	29 85       	ldd	r18, Y+9	; 0x09
    a34a:	3a 85       	ldd	r19, Y+10	; 0x0a
    a34c:	89 01       	movw	r16, r18
    a34e:	08 0f       	add	r16, r24
    a350:	19 1f       	adc	r17, r25
    a352:	89 81       	ldd	r24, Y+1	; 0x01
    a354:	9a 81       	ldd	r25, Y+2	; 0x02
    a356:	88 0f       	add	r24, r24
    a358:	99 1f       	adc	r25, r25
    a35a:	88 0f       	add	r24, r24
    a35c:	99 1f       	adc	r25, r25
    a35e:	29 85       	ldd	r18, Y+9	; 0x09
    a360:	3a 85       	ldd	r19, Y+10	; 0x0a
    a362:	82 0f       	add	r24, r18
    a364:	93 1f       	adc	r25, r19
    a366:	fc 01       	movw	r30, r24
    a368:	c0 80       	ld	r12, Z
    a36a:	d1 80       	ldd	r13, Z+1	; 0x01
    a36c:	e2 80       	ldd	r14, Z+2	; 0x02
    a36e:	f3 80       	ldd	r15, Z+3	; 0x03
    a370:	29 81       	ldd	r18, Y+1	; 0x01
    a372:	3a 81       	ldd	r19, Y+2	; 0x02
    a374:	c9 01       	movw	r24, r18
    a376:	88 0f       	add	r24, r24
    a378:	99 1f       	adc	r25, r25
    a37a:	82 0f       	add	r24, r18
    a37c:	93 1f       	adc	r25, r19
    a37e:	88 0f       	add	r24, r24
    a380:	99 1f       	adc	r25, r25
    a382:	88 0f       	add	r24, r24
    a384:	99 1f       	adc	r25, r25
    a386:	2d 81       	ldd	r18, Y+5	; 0x05
    a388:	3e 81       	ldd	r19, Y+6	; 0x06
    a38a:	28 0f       	add	r18, r24
    a38c:	39 1f       	adc	r19, r25
    a38e:	8b 81       	ldd	r24, Y+3	; 0x03
    a390:	9c 81       	ldd	r25, Y+4	; 0x04
    a392:	88 0f       	add	r24, r24
    a394:	99 1f       	adc	r25, r25
    a396:	88 0f       	add	r24, r24
    a398:	99 1f       	adc	r25, r25
    a39a:	82 0f       	add	r24, r18
    a39c:	93 1f       	adc	r25, r19
    a39e:	fc 01       	movw	r30, r24
    a3a0:	80 80       	ld	r8, Z
    a3a2:	91 80       	ldd	r9, Z+1	; 0x01
    a3a4:	a2 80       	ldd	r10, Z+2	; 0x02
    a3a6:	b3 80       	ldd	r11, Z+3	; 0x03
    a3a8:	8b 81       	ldd	r24, Y+3	; 0x03
    a3aa:	9c 81       	ldd	r25, Y+4	; 0x04
    a3ac:	88 0f       	add	r24, r24
    a3ae:	99 1f       	adc	r25, r25
    a3b0:	2f 81       	ldd	r18, Y+7	; 0x07
    a3b2:	38 85       	ldd	r19, Y+8	; 0x08
    a3b4:	82 0f       	add	r24, r18
    a3b6:	93 1f       	adc	r25, r19
    a3b8:	fc 01       	movw	r30, r24
    a3ba:	80 81       	ld	r24, Z
    a3bc:	91 81       	ldd	r25, Z+1	; 0x01
    a3be:	aa 27       	eor	r26, r26
    a3c0:	97 fd       	sbrc	r25, 7
    a3c2:	a0 95       	com	r26
    a3c4:	ba 2f       	mov	r27, r26
    a3c6:	bc 01       	movw	r22, r24
    a3c8:	cd 01       	movw	r24, r26
    a3ca:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <__floatsisf>
    a3ce:	dc 01       	movw	r26, r24
    a3d0:	cb 01       	movw	r24, r22
    a3d2:	9c 01       	movw	r18, r24
    a3d4:	ad 01       	movw	r20, r26
    a3d6:	c5 01       	movw	r24, r10
    a3d8:	b4 01       	movw	r22, r8
    a3da:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a3de:	dc 01       	movw	r26, r24
    a3e0:	cb 01       	movw	r24, r22
    a3e2:	9c 01       	movw	r18, r24
    a3e4:	ad 01       	movw	r20, r26
    a3e6:	c7 01       	movw	r24, r14
    a3e8:	b6 01       	movw	r22, r12
    a3ea:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    a3ee:	dc 01       	movw	r26, r24
    a3f0:	cb 01       	movw	r24, r22
    a3f2:	f8 01       	movw	r30, r16
    a3f4:	80 83       	st	Z, r24
    a3f6:	91 83       	std	Z+1, r25	; 0x01
    a3f8:	a2 83       	std	Z+2, r26	; 0x02
    a3fa:	b3 83       	std	Z+3, r27	; 0x03
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
	{
		//iterate through the columns of the rotation matrix
		for (int column = 0; column < 3; column++)
    a3fc:	8b 81       	ldd	r24, Y+3	; 0x03
    a3fe:	9c 81       	ldd	r25, Y+4	; 0x04
    a400:	01 96       	adiw	r24, 0x01	; 1
    a402:	9c 83       	std	Y+4, r25	; 0x04
    a404:	8b 83       	std	Y+3, r24	; 0x03
    a406:	21 e0       	ldi	r18, 0x01	; 1
    a408:	8b 81       	ldd	r24, Y+3	; 0x03
    a40a:	9c 81       	ldd	r25, Y+4	; 0x04
    a40c:	83 30       	cpi	r24, 0x03	; 3
    a40e:	91 05       	cpc	r25, r1
    a410:	0c f0       	brlt	.+2      	; 0xa414 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x128>
    a412:	20 e0       	ldi	r18, 0x00	; 0
    a414:	22 23       	and	r18, r18
    a416:	09 f0       	breq	.+2      	; 0xa41a <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x12e>
    a418:	91 cf       	rjmp	.-222    	; 0xa33c <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x50>
{
	//clear out the rotated values list;
	memset(rotatedValues,0,sizeof(float) * 3);
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
    a41a:	89 81       	ldd	r24, Y+1	; 0x01
    a41c:	9a 81       	ldd	r25, Y+2	; 0x02
    a41e:	01 96       	adiw	r24, 0x01	; 1
    a420:	9a 83       	std	Y+2, r25	; 0x02
    a422:	89 83       	std	Y+1, r24	; 0x01
    a424:	21 e0       	ldi	r18, 0x01	; 1
    a426:	89 81       	ldd	r24, Y+1	; 0x01
    a428:	9a 81       	ldd	r25, Y+2	; 0x02
    a42a:	83 30       	cpi	r24, 0x03	; 3
    a42c:	91 05       	cpc	r25, r1
    a42e:	0c f0       	brlt	.+2      	; 0xa432 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x146>
    a430:	20 e0       	ldi	r18, 0x00	; 0
    a432:	22 23       	and	r18, r18
    a434:	09 f0       	breq	.+2      	; 0xa438 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x14c>
    a436:	7f cf       	rjmp	.-258    	; 0xa336 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPiPf+0x4a>
		{
			//technically the rotatedMatrix[row] is writing to a 'column' in the matrix, and valuesToRotate is actually the 'row'.
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
		}
	}
}
    a438:	2a 96       	adiw	r28, 0x0a	; 10
    a43a:	0f b6       	in	r0, 0x3f	; 63
    a43c:	f8 94       	cli
    a43e:	de bf       	out	0x3e, r29	; 62
    a440:	0f be       	out	0x3f, r0	; 63
    a442:	cd bf       	out	0x3d, r28	; 61
    a444:	df 91       	pop	r29
    a446:	cf 91       	pop	r28
    a448:	1f 91       	pop	r17
    a44a:	0f 91       	pop	r16
    a44c:	ff 90       	pop	r15
    a44e:	ef 90       	pop	r14
    a450:	df 90       	pop	r13
    a452:	cf 90       	pop	r12
    a454:	bf 90       	pop	r11
    a456:	af 90       	pop	r10
    a458:	9f 90       	pop	r9
    a45a:	8f 90       	pop	r8
    a45c:	08 95       	ret

0000a45e <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_>:

void MatrixUtil::RotateMatrix( float rotationMatrix[][3], float valuesToRotate[3], float rotatedValues[3] )
{
    a45e:	cf 92       	push	r12
    a460:	df 92       	push	r13
    a462:	ef 92       	push	r14
    a464:	ff 92       	push	r15
    a466:	0f 93       	push	r16
    a468:	1f 93       	push	r17
    a46a:	cf 93       	push	r28
    a46c:	df 93       	push	r29
    a46e:	cd b7       	in	r28, 0x3d	; 61
    a470:	de b7       	in	r29, 0x3e	; 62
    a472:	2a 97       	sbiw	r28, 0x0a	; 10
    a474:	0f b6       	in	r0, 0x3f	; 63
    a476:	f8 94       	cli
    a478:	de bf       	out	0x3e, r29	; 62
    a47a:	0f be       	out	0x3f, r0	; 63
    a47c:	cd bf       	out	0x3d, r28	; 61
    a47e:	9e 83       	std	Y+6, r25	; 0x06
    a480:	8d 83       	std	Y+5, r24	; 0x05
    a482:	78 87       	std	Y+8, r23	; 0x08
    a484:	6f 83       	std	Y+7, r22	; 0x07
    a486:	5a 87       	std	Y+10, r21	; 0x0a
    a488:	49 87       	std	Y+9, r20	; 0x09
	//clear out the rotated values list;
	memset(rotatedValues,0,sizeof(float) * 3);
    a48a:	89 85       	ldd	r24, Y+9	; 0x09
    a48c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a48e:	4c e0       	ldi	r20, 0x0C	; 12
    a490:	50 e0       	ldi	r21, 0x00	; 0
    a492:	60 e0       	ldi	r22, 0x00	; 0
    a494:	70 e0       	ldi	r23, 0x00	; 0
    a496:	0e 94 b9 59 	call	0xb372	; 0xb372 <memset>
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
    a49a:	1a 82       	std	Y+2, r1	; 0x02
    a49c:	19 82       	std	Y+1, r1	; 0x01
    a49e:	6f c0       	rjmp	.+222    	; 0xa57e <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x120>
	{
		//iterate through the columns of the rotation matrix
		for (int column = 0; column < 3; column++)
    a4a0:	1c 82       	std	Y+4, r1	; 0x04
    a4a2:	1b 82       	std	Y+3, r1	; 0x03
    a4a4:	5d c0       	rjmp	.+186    	; 0xa560 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x102>
		{
			//technically the rotatedMatrix[row] is writing to a 'column' in the matrix, and valuesToRotate is actually the 'row'.
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
    a4a6:	89 81       	ldd	r24, Y+1	; 0x01
    a4a8:	9a 81       	ldd	r25, Y+2	; 0x02
    a4aa:	88 0f       	add	r24, r24
    a4ac:	99 1f       	adc	r25, r25
    a4ae:	88 0f       	add	r24, r24
    a4b0:	99 1f       	adc	r25, r25
    a4b2:	29 85       	ldd	r18, Y+9	; 0x09
    a4b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    a4b6:	89 01       	movw	r16, r18
    a4b8:	08 0f       	add	r16, r24
    a4ba:	19 1f       	adc	r17, r25
    a4bc:	89 81       	ldd	r24, Y+1	; 0x01
    a4be:	9a 81       	ldd	r25, Y+2	; 0x02
    a4c0:	88 0f       	add	r24, r24
    a4c2:	99 1f       	adc	r25, r25
    a4c4:	88 0f       	add	r24, r24
    a4c6:	99 1f       	adc	r25, r25
    a4c8:	29 85       	ldd	r18, Y+9	; 0x09
    a4ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    a4cc:	82 0f       	add	r24, r18
    a4ce:	93 1f       	adc	r25, r19
    a4d0:	fc 01       	movw	r30, r24
    a4d2:	c0 80       	ld	r12, Z
    a4d4:	d1 80       	ldd	r13, Z+1	; 0x01
    a4d6:	e2 80       	ldd	r14, Z+2	; 0x02
    a4d8:	f3 80       	ldd	r15, Z+3	; 0x03
    a4da:	29 81       	ldd	r18, Y+1	; 0x01
    a4dc:	3a 81       	ldd	r19, Y+2	; 0x02
    a4de:	c9 01       	movw	r24, r18
    a4e0:	88 0f       	add	r24, r24
    a4e2:	99 1f       	adc	r25, r25
    a4e4:	82 0f       	add	r24, r18
    a4e6:	93 1f       	adc	r25, r19
    a4e8:	88 0f       	add	r24, r24
    a4ea:	99 1f       	adc	r25, r25
    a4ec:	88 0f       	add	r24, r24
    a4ee:	99 1f       	adc	r25, r25
    a4f0:	2d 81       	ldd	r18, Y+5	; 0x05
    a4f2:	3e 81       	ldd	r19, Y+6	; 0x06
    a4f4:	28 0f       	add	r18, r24
    a4f6:	39 1f       	adc	r19, r25
    a4f8:	8b 81       	ldd	r24, Y+3	; 0x03
    a4fa:	9c 81       	ldd	r25, Y+4	; 0x04
    a4fc:	88 0f       	add	r24, r24
    a4fe:	99 1f       	adc	r25, r25
    a500:	88 0f       	add	r24, r24
    a502:	99 1f       	adc	r25, r25
    a504:	82 0f       	add	r24, r18
    a506:	93 1f       	adc	r25, r19
    a508:	fc 01       	movw	r30, r24
    a50a:	80 81       	ld	r24, Z
    a50c:	91 81       	ldd	r25, Z+1	; 0x01
    a50e:	a2 81       	ldd	r26, Z+2	; 0x02
    a510:	b3 81       	ldd	r27, Z+3	; 0x03
    a512:	2b 81       	ldd	r18, Y+3	; 0x03
    a514:	3c 81       	ldd	r19, Y+4	; 0x04
    a516:	22 0f       	add	r18, r18
    a518:	33 1f       	adc	r19, r19
    a51a:	22 0f       	add	r18, r18
    a51c:	33 1f       	adc	r19, r19
    a51e:	4f 81       	ldd	r20, Y+7	; 0x07
    a520:	58 85       	ldd	r21, Y+8	; 0x08
    a522:	24 0f       	add	r18, r20
    a524:	35 1f       	adc	r19, r21
    a526:	f9 01       	movw	r30, r18
    a528:	20 81       	ld	r18, Z
    a52a:	31 81       	ldd	r19, Z+1	; 0x01
    a52c:	42 81       	ldd	r20, Z+2	; 0x02
    a52e:	53 81       	ldd	r21, Z+3	; 0x03
    a530:	bc 01       	movw	r22, r24
    a532:	cd 01       	movw	r24, r26
    a534:	0e 94 12 56 	call	0xac24	; 0xac24 <__mulsf3>
    a538:	dc 01       	movw	r26, r24
    a53a:	cb 01       	movw	r24, r22
    a53c:	9c 01       	movw	r18, r24
    a53e:	ad 01       	movw	r20, r26
    a540:	c7 01       	movw	r24, r14
    a542:	b6 01       	movw	r22, r12
    a544:	0e 94 cc 53 	call	0xa798	; 0xa798 <__addsf3>
    a548:	dc 01       	movw	r26, r24
    a54a:	cb 01       	movw	r24, r22
    a54c:	f8 01       	movw	r30, r16
    a54e:	80 83       	st	Z, r24
    a550:	91 83       	std	Z+1, r25	; 0x01
    a552:	a2 83       	std	Z+2, r26	; 0x02
    a554:	b3 83       	std	Z+3, r27	; 0x03
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
	{
		//iterate through the columns of the rotation matrix
		for (int column = 0; column < 3; column++)
    a556:	8b 81       	ldd	r24, Y+3	; 0x03
    a558:	9c 81       	ldd	r25, Y+4	; 0x04
    a55a:	01 96       	adiw	r24, 0x01	; 1
    a55c:	9c 83       	std	Y+4, r25	; 0x04
    a55e:	8b 83       	std	Y+3, r24	; 0x03
    a560:	21 e0       	ldi	r18, 0x01	; 1
    a562:	8b 81       	ldd	r24, Y+3	; 0x03
    a564:	9c 81       	ldd	r25, Y+4	; 0x04
    a566:	83 30       	cpi	r24, 0x03	; 3
    a568:	91 05       	cpc	r25, r1
    a56a:	0c f0       	brlt	.+2      	; 0xa56e <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x110>
    a56c:	20 e0       	ldi	r18, 0x00	; 0
    a56e:	22 23       	and	r18, r18
    a570:	09 f0       	breq	.+2      	; 0xa574 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x116>
    a572:	99 cf       	rjmp	.-206    	; 0xa4a6 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x48>
{
	//clear out the rotated values list;
	memset(rotatedValues,0,sizeof(float) * 3);
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
    a574:	89 81       	ldd	r24, Y+1	; 0x01
    a576:	9a 81       	ldd	r25, Y+2	; 0x02
    a578:	01 96       	adiw	r24, 0x01	; 1
    a57a:	9a 83       	std	Y+2, r25	; 0x02
    a57c:	89 83       	std	Y+1, r24	; 0x01
    a57e:	21 e0       	ldi	r18, 0x01	; 1
    a580:	89 81       	ldd	r24, Y+1	; 0x01
    a582:	9a 81       	ldd	r25, Y+2	; 0x02
    a584:	83 30       	cpi	r24, 0x03	; 3
    a586:	91 05       	cpc	r25, r1
    a588:	0c f0       	brlt	.+2      	; 0xa58c <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x12e>
    a58a:	20 e0       	ldi	r18, 0x00	; 0
    a58c:	22 23       	and	r18, r18
    a58e:	09 f0       	breq	.+2      	; 0xa592 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x134>
    a590:	87 cf       	rjmp	.-242    	; 0xa4a0 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x42>
		{
			//technically the rotatedMatrix[row] is writing to a 'column' in the matrix, and valuesToRotate is actually the 'row'.
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
		}
	}
}
    a592:	2a 96       	adiw	r28, 0x0a	; 10
    a594:	0f b6       	in	r0, 0x3f	; 63
    a596:	f8 94       	cli
    a598:	de bf       	out	0x3e, r29	; 62
    a59a:	0f be       	out	0x3f, r0	; 63
    a59c:	cd bf       	out	0x3d, r28	; 61
    a59e:	df 91       	pop	r29
    a5a0:	cf 91       	pop	r28
    a5a2:	1f 91       	pop	r17
    a5a4:	0f 91       	pop	r16
    a5a6:	ff 90       	pop	r15
    a5a8:	ef 90       	pop	r14
    a5aa:	df 90       	pop	r13
    a5ac:	cf 90       	pop	r12
    a5ae:	08 95       	ret

0000a5b0 <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    a5b0:	0f 93       	push	r16
    a5b2:	1f 93       	push	r17
    a5b4:	cf 93       	push	r28
    a5b6:	df 93       	push	r29
    a5b8:	00 d0       	rcall	.+0      	; 0xa5ba <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    a5ba:	1f 92       	push	r1
    a5bc:	cd b7       	in	r28, 0x3d	; 61
    a5be:	de b7       	in	r29, 0x3e	; 62
    a5c0:	9c 83       	std	Y+4, r25	; 0x04
    a5c2:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    a5c4:	8b 81       	ldd	r24, Y+3	; 0x03
    a5c6:	9c 81       	ldd	r25, Y+4	; 0x04
    a5c8:	0e 94 ac 53 	call	0xa758	; 0xa758 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
    a5cc:	1a 82       	std	Y+2, r1	; 0x02
    a5ce:	19 82       	std	Y+1, r1	; 0x01
	
	if (timeoutMilliseconds > 1000) 
    a5d0:	8b 81       	ldd	r24, Y+3	; 0x03
    a5d2:	9c 81       	ldd	r25, Y+4	; 0x04
    a5d4:	fc 01       	movw	r30, r24
    a5d6:	86 81       	ldd	r24, Z+6	; 0x06
    a5d8:	97 81       	ldd	r25, Z+7	; 0x07
    a5da:	89 3e       	cpi	r24, 0xE9	; 233
    a5dc:	f3 e0       	ldi	r31, 0x03	; 3
    a5de:	9f 07       	cpc	r25, r31
    a5e0:	2c f0       	brlt	.+10     	; 0xa5ec <_ZN10helicopter4util5Timer10startTimerEv+0x3c>
	{
		frequency = 1;
    a5e2:	81 e0       	ldi	r24, 0x01	; 1
    a5e4:	90 e0       	ldi	r25, 0x00	; 0
    a5e6:	9a 83       	std	Y+2, r25	; 0x02
    a5e8:	89 83       	std	Y+1, r24	; 0x01
    a5ea:	0d c0       	rjmp	.+26     	; 0xa606 <_ZN10helicopter4util5Timer10startTimerEv+0x56>
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    a5ec:	8b 81       	ldd	r24, Y+3	; 0x03
    a5ee:	9c 81       	ldd	r25, Y+4	; 0x04
    a5f0:	fc 01       	movw	r30, r24
    a5f2:	26 81       	ldd	r18, Z+6	; 0x06
    a5f4:	37 81       	ldd	r19, Z+7	; 0x07
    a5f6:	88 ee       	ldi	r24, 0xE8	; 232
    a5f8:	93 e0       	ldi	r25, 0x03	; 3
    a5fa:	b9 01       	movw	r22, r18
    a5fc:	0e 94 2c 58 	call	0xb058	; 0xb058 <__divmodhi4>
    a600:	9b 01       	movw	r18, r22
    a602:	3a 83       	std	Y+2, r19	; 0x02
    a604:	29 83       	std	Y+1, r18	; 0x01
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    a606:	08 e9       	ldi	r16, 0x98	; 152
    a608:	10 e0       	ldi	r17, 0x00	; 0
    a60a:	8b 81       	ldd	r24, Y+3	; 0x03
    a60c:	9c 81       	ldd	r25, Y+4	; 0x04
    a60e:	fc 01       	movw	r30, r24
    a610:	80 81       	ld	r24, Z
    a612:	91 81       	ldd	r25, Z+1	; 0x01
    a614:	a2 81       	ldd	r26, Z+2	; 0x02
    a616:	b3 81       	ldd	r27, Z+3	; 0x03
    a618:	2b 81       	ldd	r18, Y+3	; 0x03
    a61a:	3c 81       	ldd	r19, Y+4	; 0x04
    a61c:	f9 01       	movw	r30, r18
    a61e:	24 81       	ldd	r18, Z+4	; 0x04
    a620:	35 81       	ldd	r19, Z+5	; 0x05
    a622:	44 27       	eor	r20, r20
    a624:	37 fd       	sbrc	r19, 7
    a626:	40 95       	com	r20
    a628:	54 2f       	mov	r21, r20
    a62a:	bc 01       	movw	r22, r24
    a62c:	cd 01       	movw	r24, r26
    a62e:	0e 94 40 58 	call	0xb080	; 0xb080 <__udivmodsi4>
    a632:	da 01       	movw	r26, r20
    a634:	c9 01       	movw	r24, r18
    a636:	29 81       	ldd	r18, Y+1	; 0x01
    a638:	3a 81       	ldd	r19, Y+2	; 0x02
    a63a:	44 27       	eor	r20, r20
    a63c:	37 fd       	sbrc	r19, 7
    a63e:	40 95       	com	r20
    a640:	54 2f       	mov	r21, r20
    a642:	bc 01       	movw	r22, r24
    a644:	cd 01       	movw	r24, r26
    a646:	0e 94 40 58 	call	0xb080	; 0xb080 <__udivmodsi4>
    a64a:	da 01       	movw	r26, r20
    a64c:	c9 01       	movw	r24, r18
    a64e:	f8 01       	movw	r30, r16
    a650:	91 83       	std	Z+1, r25	; 0x01
    a652:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    a654:	81 e9       	ldi	r24, 0x91	; 145
    a656:	90 e0       	ldi	r25, 0x00	; 0
    a658:	21 e9       	ldi	r18, 0x91	; 145
    a65a:	30 e0       	ldi	r19, 0x00	; 0
    a65c:	f9 01       	movw	r30, r18
    a65e:	20 81       	ld	r18, Z
    a660:	28 60       	ori	r18, 0x08	; 8
    a662:	fc 01       	movw	r30, r24
    a664:	20 83       	st	Z, r18
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    a666:	8b 81       	ldd	r24, Y+3	; 0x03
    a668:	9c 81       	ldd	r25, Y+4	; 0x04
    a66a:	fc 01       	movw	r30, r24
    a66c:	84 81       	ldd	r24, Z+4	; 0x04
    a66e:	95 81       	ldd	r25, Z+5	; 0x05
    a670:	80 34       	cpi	r24, 0x40	; 64
    a672:	91 05       	cpc	r25, r1
    a674:	39 f1       	breq	.+78     	; 0xa6c4 <_ZN10helicopter4util5Timer10startTimerEv+0x114>
    a676:	81 34       	cpi	r24, 0x41	; 65
    a678:	91 05       	cpc	r25, r1
    a67a:	3c f4       	brge	.+14     	; 0xa68a <_ZN10helicopter4util5Timer10startTimerEv+0xda>
    a67c:	81 30       	cpi	r24, 0x01	; 1
    a67e:	91 05       	cpc	r25, r1
    a680:	69 f0       	breq	.+26     	; 0xa69c <_ZN10helicopter4util5Timer10startTimerEv+0xec>
    a682:	88 30       	cpi	r24, 0x08	; 8
    a684:	91 05       	cpc	r25, r1
    a686:	a1 f0       	breq	.+40     	; 0xa6b0 <_ZN10helicopter4util5Timer10startTimerEv+0x100>
    a688:	3b c0       	rjmp	.+118    	; 0xa700 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
    a68a:	81 15       	cp	r24, r1
    a68c:	f1 e0       	ldi	r31, 0x01	; 1
    a68e:	9f 07       	cpc	r25, r31
    a690:	19 f1       	breq	.+70     	; 0xa6d8 <_ZN10helicopter4util5Timer10startTimerEv+0x128>
    a692:	81 15       	cp	r24, r1
    a694:	24 e0       	ldi	r18, 0x04	; 4
    a696:	92 07       	cpc	r25, r18
    a698:	49 f1       	breq	.+82     	; 0xa6ec <_ZN10helicopter4util5Timer10startTimerEv+0x13c>
    a69a:	32 c0       	rjmp	.+100    	; 0xa700 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    a69c:	81 e9       	ldi	r24, 0x91	; 145
    a69e:	90 e0       	ldi	r25, 0x00	; 0
    a6a0:	21 e9       	ldi	r18, 0x91	; 145
    a6a2:	30 e0       	ldi	r19, 0x00	; 0
    a6a4:	f9 01       	movw	r30, r18
    a6a6:	20 81       	ld	r18, Z
    a6a8:	21 60       	ori	r18, 0x01	; 1
    a6aa:	fc 01       	movw	r30, r24
    a6ac:	20 83       	st	Z, r18
		break;
    a6ae:	31 c0       	rjmp	.+98     	; 0xa712 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    a6b0:	81 e9       	ldi	r24, 0x91	; 145
    a6b2:	90 e0       	ldi	r25, 0x00	; 0
    a6b4:	21 e9       	ldi	r18, 0x91	; 145
    a6b6:	30 e0       	ldi	r19, 0x00	; 0
    a6b8:	f9 01       	movw	r30, r18
    a6ba:	20 81       	ld	r18, Z
    a6bc:	22 60       	ori	r18, 0x02	; 2
    a6be:	fc 01       	movw	r30, r24
    a6c0:	20 83       	st	Z, r18
		break;
    a6c2:	27 c0       	rjmp	.+78     	; 0xa712 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    a6c4:	81 e9       	ldi	r24, 0x91	; 145
    a6c6:	90 e0       	ldi	r25, 0x00	; 0
    a6c8:	21 e9       	ldi	r18, 0x91	; 145
    a6ca:	30 e0       	ldi	r19, 0x00	; 0
    a6cc:	f9 01       	movw	r30, r18
    a6ce:	20 81       	ld	r18, Z
    a6d0:	23 60       	ori	r18, 0x03	; 3
    a6d2:	fc 01       	movw	r30, r24
    a6d4:	20 83       	st	Z, r18
		break;
    a6d6:	1d c0       	rjmp	.+58     	; 0xa712 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    a6d8:	81 e9       	ldi	r24, 0x91	; 145
    a6da:	90 e0       	ldi	r25, 0x00	; 0
    a6dc:	21 e9       	ldi	r18, 0x91	; 145
    a6de:	30 e0       	ldi	r19, 0x00	; 0
    a6e0:	f9 01       	movw	r30, r18
    a6e2:	20 81       	ld	r18, Z
    a6e4:	24 60       	ori	r18, 0x04	; 4
    a6e6:	fc 01       	movw	r30, r24
    a6e8:	20 83       	st	Z, r18
		break;
    a6ea:	13 c0       	rjmp	.+38     	; 0xa712 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    a6ec:	81 e9       	ldi	r24, 0x91	; 145
    a6ee:	90 e0       	ldi	r25, 0x00	; 0
    a6f0:	21 e9       	ldi	r18, 0x91	; 145
    a6f2:	30 e0       	ldi	r19, 0x00	; 0
    a6f4:	f9 01       	movw	r30, r18
    a6f6:	20 81       	ld	r18, Z
    a6f8:	25 60       	ori	r18, 0x05	; 5
    a6fa:	fc 01       	movw	r30, r24
    a6fc:	20 83       	st	Z, r18
		break;
    a6fe:	09 c0       	rjmp	.+18     	; 0xa712 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		default:
		TCCR3B |= NoPrescaling;
    a700:	81 e9       	ldi	r24, 0x91	; 145
    a702:	90 e0       	ldi	r25, 0x00	; 0
    a704:	21 e9       	ldi	r18, 0x91	; 145
    a706:	30 e0       	ldi	r19, 0x00	; 0
    a708:	f9 01       	movw	r30, r18
    a70a:	20 81       	ld	r18, Z
    a70c:	21 60       	ori	r18, 0x01	; 1
    a70e:	fc 01       	movw	r30, r24
    a710:	20 83       	st	Z, r18
	}
}
    a712:	0f 90       	pop	r0
    a714:	0f 90       	pop	r0
    a716:	0f 90       	pop	r0
    a718:	0f 90       	pop	r0
    a71a:	df 91       	pop	r29
    a71c:	cf 91       	pop	r28
    a71e:	1f 91       	pop	r17
    a720:	0f 91       	pop	r16
    a722:	08 95       	ret

0000a724 <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    a724:	cf 93       	push	r28
    a726:	df 93       	push	r29
    a728:	1f 92       	push	r1
    a72a:	1f 92       	push	r1
    a72c:	cd b7       	in	r28, 0x3d	; 61
    a72e:	de b7       	in	r29, 0x3e	; 62
    a730:	9a 83       	std	Y+2, r25	; 0x02
    a732:	89 83       	std	Y+1, r24	; 0x01
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    a734:	88 e3       	ldi	r24, 0x38	; 56
    a736:	90 e0       	ldi	r25, 0x00	; 0
    a738:	fc 01       	movw	r30, r24
    a73a:	80 81       	ld	r24, Z
    a73c:	88 2f       	mov	r24, r24
    a73e:	90 e0       	ldi	r25, 0x00	; 0
    a740:	82 70       	andi	r24, 0x02	; 2
    a742:	99 27       	eor	r25, r25
    a744:	21 e0       	ldi	r18, 0x01	; 1
    a746:	00 97       	sbiw	r24, 0x00	; 0
    a748:	09 f4       	brne	.+2      	; 0xa74c <_ZN10helicopter4util5Timer11hasTimedoutEv+0x28>
    a74a:	20 e0       	ldi	r18, 0x00	; 0
    a74c:	82 2f       	mov	r24, r18
}
    a74e:	0f 90       	pop	r0
    a750:	0f 90       	pop	r0
    a752:	df 91       	pop	r29
    a754:	cf 91       	pop	r28
    a756:	08 95       	ret

0000a758 <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    a758:	cf 93       	push	r28
    a75a:	df 93       	push	r29
    a75c:	1f 92       	push	r1
    a75e:	1f 92       	push	r1
    a760:	cd b7       	in	r28, 0x3d	; 61
    a762:	de b7       	in	r29, 0x3e	; 62
    a764:	9a 83       	std	Y+2, r25	; 0x02
    a766:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    a768:	81 e9       	ldi	r24, 0x91	; 145
    a76a:	90 e0       	ldi	r25, 0x00	; 0
    a76c:	fc 01       	movw	r30, r24
    a76e:	10 82       	st	Z, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    a770:	84 e9       	ldi	r24, 0x94	; 148
    a772:	90 e0       	ldi	r25, 0x00	; 0
    a774:	fc 01       	movw	r30, r24
    a776:	11 82       	std	Z+1, r1	; 0x01
    a778:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    a77a:	88 e3       	ldi	r24, 0x38	; 56
    a77c:	90 e0       	ldi	r25, 0x00	; 0
    a77e:	28 e3       	ldi	r18, 0x38	; 56
    a780:	30 e0       	ldi	r19, 0x00	; 0
    a782:	f9 01       	movw	r30, r18
    a784:	20 81       	ld	r18, Z
    a786:	22 60       	ori	r18, 0x02	; 2
    a788:	fc 01       	movw	r30, r24
    a78a:	20 83       	st	Z, r18
    a78c:	0f 90       	pop	r0
    a78e:	0f 90       	pop	r0
    a790:	df 91       	pop	r29
    a792:	cf 91       	pop	r28
    a794:	08 95       	ret

0000a796 <__subsf3>:
    a796:	50 58       	subi	r21, 0x80	; 128

0000a798 <__addsf3>:
    a798:	bb 27       	eor	r27, r27
    a79a:	aa 27       	eor	r26, r26
    a79c:	0e d0       	rcall	.+28     	; 0xa7ba <__addsf3x>
    a79e:	dc c1       	rjmp	.+952    	; 0xab58 <__fp_round>
    a7a0:	a5 d1       	rcall	.+842    	; 0xaaec <__fp_pscA>
    a7a2:	30 f0       	brcs	.+12     	; 0xa7b0 <__addsf3+0x18>
    a7a4:	aa d1       	rcall	.+852    	; 0xaafa <__fp_pscB>
    a7a6:	20 f0       	brcs	.+8      	; 0xa7b0 <__addsf3+0x18>
    a7a8:	31 f4       	brne	.+12     	; 0xa7b6 <__addsf3+0x1e>
    a7aa:	9f 3f       	cpi	r25, 0xFF	; 255
    a7ac:	11 f4       	brne	.+4      	; 0xa7b2 <__addsf3+0x1a>
    a7ae:	1e f4       	brtc	.+6      	; 0xa7b6 <__addsf3+0x1e>
    a7b0:	9a c1       	rjmp	.+820    	; 0xaae6 <__fp_nan>
    a7b2:	0e f4       	brtc	.+2      	; 0xa7b6 <__addsf3+0x1e>
    a7b4:	e0 95       	com	r30
    a7b6:	e7 fb       	bst	r30, 7
    a7b8:	67 c1       	rjmp	.+718    	; 0xaa88 <__fp_inf>

0000a7ba <__addsf3x>:
    a7ba:	e9 2f       	mov	r30, r25
    a7bc:	ef d1       	rcall	.+990    	; 0xab9c <__fp_split3>
    a7be:	80 f3       	brcs	.-32     	; 0xa7a0 <__addsf3+0x8>
    a7c0:	ba 17       	cp	r27, r26
    a7c2:	62 07       	cpc	r22, r18
    a7c4:	73 07       	cpc	r23, r19
    a7c6:	84 07       	cpc	r24, r20
    a7c8:	95 07       	cpc	r25, r21
    a7ca:	18 f0       	brcs	.+6      	; 0xa7d2 <__addsf3x+0x18>
    a7cc:	71 f4       	brne	.+28     	; 0xa7ea <__addsf3x+0x30>
    a7ce:	9e f5       	brtc	.+102    	; 0xa836 <__addsf3x+0x7c>
    a7d0:	1e c2       	rjmp	.+1084   	; 0xac0e <__fp_zero>
    a7d2:	0e f4       	brtc	.+2      	; 0xa7d6 <__addsf3x+0x1c>
    a7d4:	e0 95       	com	r30
    a7d6:	0b 2e       	mov	r0, r27
    a7d8:	ba 2f       	mov	r27, r26
    a7da:	a0 2d       	mov	r26, r0
    a7dc:	0b 01       	movw	r0, r22
    a7de:	b9 01       	movw	r22, r18
    a7e0:	90 01       	movw	r18, r0
    a7e2:	0c 01       	movw	r0, r24
    a7e4:	ca 01       	movw	r24, r20
    a7e6:	a0 01       	movw	r20, r0
    a7e8:	11 24       	eor	r1, r1
    a7ea:	ff 27       	eor	r31, r31
    a7ec:	59 1b       	sub	r21, r25
    a7ee:	99 f0       	breq	.+38     	; 0xa816 <__addsf3x+0x5c>
    a7f0:	59 3f       	cpi	r21, 0xF9	; 249
    a7f2:	50 f4       	brcc	.+20     	; 0xa808 <__addsf3x+0x4e>
    a7f4:	50 3e       	cpi	r21, 0xE0	; 224
    a7f6:	68 f1       	brcs	.+90     	; 0xa852 <__addsf3x+0x98>
    a7f8:	1a 16       	cp	r1, r26
    a7fa:	f0 40       	sbci	r31, 0x00	; 0
    a7fc:	a2 2f       	mov	r26, r18
    a7fe:	23 2f       	mov	r18, r19
    a800:	34 2f       	mov	r19, r20
    a802:	44 27       	eor	r20, r20
    a804:	58 5f       	subi	r21, 0xF8	; 248
    a806:	f3 cf       	rjmp	.-26     	; 0xa7ee <__addsf3x+0x34>
    a808:	46 95       	lsr	r20
    a80a:	37 95       	ror	r19
    a80c:	27 95       	ror	r18
    a80e:	a7 95       	ror	r26
    a810:	f0 40       	sbci	r31, 0x00	; 0
    a812:	53 95       	inc	r21
    a814:	c9 f7       	brne	.-14     	; 0xa808 <__addsf3x+0x4e>
    a816:	7e f4       	brtc	.+30     	; 0xa836 <__addsf3x+0x7c>
    a818:	1f 16       	cp	r1, r31
    a81a:	ba 0b       	sbc	r27, r26
    a81c:	62 0b       	sbc	r22, r18
    a81e:	73 0b       	sbc	r23, r19
    a820:	84 0b       	sbc	r24, r20
    a822:	ba f0       	brmi	.+46     	; 0xa852 <__addsf3x+0x98>
    a824:	91 50       	subi	r25, 0x01	; 1
    a826:	a1 f0       	breq	.+40     	; 0xa850 <__addsf3x+0x96>
    a828:	ff 0f       	add	r31, r31
    a82a:	bb 1f       	adc	r27, r27
    a82c:	66 1f       	adc	r22, r22
    a82e:	77 1f       	adc	r23, r23
    a830:	88 1f       	adc	r24, r24
    a832:	c2 f7       	brpl	.-16     	; 0xa824 <__addsf3x+0x6a>
    a834:	0e c0       	rjmp	.+28     	; 0xa852 <__addsf3x+0x98>
    a836:	ba 0f       	add	r27, r26
    a838:	62 1f       	adc	r22, r18
    a83a:	73 1f       	adc	r23, r19
    a83c:	84 1f       	adc	r24, r20
    a83e:	48 f4       	brcc	.+18     	; 0xa852 <__addsf3x+0x98>
    a840:	87 95       	ror	r24
    a842:	77 95       	ror	r23
    a844:	67 95       	ror	r22
    a846:	b7 95       	ror	r27
    a848:	f7 95       	ror	r31
    a84a:	9e 3f       	cpi	r25, 0xFE	; 254
    a84c:	08 f0       	brcs	.+2      	; 0xa850 <__addsf3x+0x96>
    a84e:	b3 cf       	rjmp	.-154    	; 0xa7b6 <__addsf3+0x1e>
    a850:	93 95       	inc	r25
    a852:	88 0f       	add	r24, r24
    a854:	08 f0       	brcs	.+2      	; 0xa858 <__addsf3x+0x9e>
    a856:	99 27       	eor	r25, r25
    a858:	ee 0f       	add	r30, r30
    a85a:	97 95       	ror	r25
    a85c:	87 95       	ror	r24
    a85e:	08 95       	ret

0000a860 <__cmpsf2>:
    a860:	ef d0       	rcall	.+478    	; 0xaa40 <__fp_cmp>
    a862:	08 f4       	brcc	.+2      	; 0xa866 <__cmpsf2+0x6>
    a864:	81 e0       	ldi	r24, 0x01	; 1
    a866:	08 95       	ret

0000a868 <cos>:
    a868:	50 d1       	rcall	.+672    	; 0xab0a <__fp_rempio2>
    a86a:	e3 95       	inc	r30
    a86c:	86 c1       	rjmp	.+780    	; 0xab7a <__fp_sinus>

0000a86e <__divsf3>:
    a86e:	0c d0       	rcall	.+24     	; 0xa888 <__divsf3x>
    a870:	73 c1       	rjmp	.+742    	; 0xab58 <__fp_round>
    a872:	43 d1       	rcall	.+646    	; 0xaafa <__fp_pscB>
    a874:	40 f0       	brcs	.+16     	; 0xa886 <__divsf3+0x18>
    a876:	3a d1       	rcall	.+628    	; 0xaaec <__fp_pscA>
    a878:	30 f0       	brcs	.+12     	; 0xa886 <__divsf3+0x18>
    a87a:	21 f4       	brne	.+8      	; 0xa884 <__divsf3+0x16>
    a87c:	5f 3f       	cpi	r21, 0xFF	; 255
    a87e:	19 f0       	breq	.+6      	; 0xa886 <__divsf3+0x18>
    a880:	03 c1       	rjmp	.+518    	; 0xaa88 <__fp_inf>
    a882:	51 11       	cpse	r21, r1
    a884:	c5 c1       	rjmp	.+906    	; 0xac10 <__fp_szero>
    a886:	2f c1       	rjmp	.+606    	; 0xaae6 <__fp_nan>

0000a888 <__divsf3x>:
    a888:	89 d1       	rcall	.+786    	; 0xab9c <__fp_split3>
    a88a:	98 f3       	brcs	.-26     	; 0xa872 <__divsf3+0x4>

0000a88c <__divsf3_pse>:
    a88c:	99 23       	and	r25, r25
    a88e:	c9 f3       	breq	.-14     	; 0xa882 <__divsf3+0x14>
    a890:	55 23       	and	r21, r21
    a892:	b1 f3       	breq	.-20     	; 0xa880 <__divsf3+0x12>
    a894:	95 1b       	sub	r25, r21
    a896:	55 0b       	sbc	r21, r21
    a898:	bb 27       	eor	r27, r27
    a89a:	aa 27       	eor	r26, r26
    a89c:	62 17       	cp	r22, r18
    a89e:	73 07       	cpc	r23, r19
    a8a0:	84 07       	cpc	r24, r20
    a8a2:	38 f0       	brcs	.+14     	; 0xa8b2 <__divsf3_pse+0x26>
    a8a4:	9f 5f       	subi	r25, 0xFF	; 255
    a8a6:	5f 4f       	sbci	r21, 0xFF	; 255
    a8a8:	22 0f       	add	r18, r18
    a8aa:	33 1f       	adc	r19, r19
    a8ac:	44 1f       	adc	r20, r20
    a8ae:	aa 1f       	adc	r26, r26
    a8b0:	a9 f3       	breq	.-22     	; 0xa89c <__divsf3_pse+0x10>
    a8b2:	33 d0       	rcall	.+102    	; 0xa91a <__divsf3_pse+0x8e>
    a8b4:	0e 2e       	mov	r0, r30
    a8b6:	3a f0       	brmi	.+14     	; 0xa8c6 <__divsf3_pse+0x3a>
    a8b8:	e0 e8       	ldi	r30, 0x80	; 128
    a8ba:	30 d0       	rcall	.+96     	; 0xa91c <__divsf3_pse+0x90>
    a8bc:	91 50       	subi	r25, 0x01	; 1
    a8be:	50 40       	sbci	r21, 0x00	; 0
    a8c0:	e6 95       	lsr	r30
    a8c2:	00 1c       	adc	r0, r0
    a8c4:	ca f7       	brpl	.-14     	; 0xa8b8 <__divsf3_pse+0x2c>
    a8c6:	29 d0       	rcall	.+82     	; 0xa91a <__divsf3_pse+0x8e>
    a8c8:	fe 2f       	mov	r31, r30
    a8ca:	27 d0       	rcall	.+78     	; 0xa91a <__divsf3_pse+0x8e>
    a8cc:	66 0f       	add	r22, r22
    a8ce:	77 1f       	adc	r23, r23
    a8d0:	88 1f       	adc	r24, r24
    a8d2:	bb 1f       	adc	r27, r27
    a8d4:	26 17       	cp	r18, r22
    a8d6:	37 07       	cpc	r19, r23
    a8d8:	48 07       	cpc	r20, r24
    a8da:	ab 07       	cpc	r26, r27
    a8dc:	b0 e8       	ldi	r27, 0x80	; 128
    a8de:	09 f0       	breq	.+2      	; 0xa8e2 <__divsf3_pse+0x56>
    a8e0:	bb 0b       	sbc	r27, r27
    a8e2:	80 2d       	mov	r24, r0
    a8e4:	bf 01       	movw	r22, r30
    a8e6:	ff 27       	eor	r31, r31
    a8e8:	93 58       	subi	r25, 0x83	; 131
    a8ea:	5f 4f       	sbci	r21, 0xFF	; 255
    a8ec:	2a f0       	brmi	.+10     	; 0xa8f8 <__divsf3_pse+0x6c>
    a8ee:	9e 3f       	cpi	r25, 0xFE	; 254
    a8f0:	51 05       	cpc	r21, r1
    a8f2:	68 f0       	brcs	.+26     	; 0xa90e <__divsf3_pse+0x82>
    a8f4:	c9 c0       	rjmp	.+402    	; 0xaa88 <__fp_inf>
    a8f6:	8c c1       	rjmp	.+792    	; 0xac10 <__fp_szero>
    a8f8:	5f 3f       	cpi	r21, 0xFF	; 255
    a8fa:	ec f3       	brlt	.-6      	; 0xa8f6 <__divsf3_pse+0x6a>
    a8fc:	98 3e       	cpi	r25, 0xE8	; 232
    a8fe:	dc f3       	brlt	.-10     	; 0xa8f6 <__divsf3_pse+0x6a>
    a900:	86 95       	lsr	r24
    a902:	77 95       	ror	r23
    a904:	67 95       	ror	r22
    a906:	b7 95       	ror	r27
    a908:	f7 95       	ror	r31
    a90a:	9f 5f       	subi	r25, 0xFF	; 255
    a90c:	c9 f7       	brne	.-14     	; 0xa900 <__divsf3_pse+0x74>
    a90e:	88 0f       	add	r24, r24
    a910:	91 1d       	adc	r25, r1
    a912:	96 95       	lsr	r25
    a914:	87 95       	ror	r24
    a916:	97 f9       	bld	r25, 7
    a918:	08 95       	ret
    a91a:	e1 e0       	ldi	r30, 0x01	; 1
    a91c:	66 0f       	add	r22, r22
    a91e:	77 1f       	adc	r23, r23
    a920:	88 1f       	adc	r24, r24
    a922:	bb 1f       	adc	r27, r27
    a924:	62 17       	cp	r22, r18
    a926:	73 07       	cpc	r23, r19
    a928:	84 07       	cpc	r24, r20
    a92a:	ba 07       	cpc	r27, r26
    a92c:	20 f0       	brcs	.+8      	; 0xa936 <__divsf3_pse+0xaa>
    a92e:	62 1b       	sub	r22, r18
    a930:	73 0b       	sbc	r23, r19
    a932:	84 0b       	sbc	r24, r20
    a934:	ba 0b       	sbc	r27, r26
    a936:	ee 1f       	adc	r30, r30
    a938:	88 f7       	brcc	.-30     	; 0xa91c <__divsf3_pse+0x90>
    a93a:	e0 95       	com	r30
    a93c:	08 95       	ret

0000a93e <__fixsfsi>:
    a93e:	04 d0       	rcall	.+8      	; 0xa948 <__fixunssfsi>
    a940:	68 94       	set
    a942:	b1 11       	cpse	r27, r1
    a944:	65 c1       	rjmp	.+714    	; 0xac10 <__fp_szero>
    a946:	08 95       	ret

0000a948 <__fixunssfsi>:
    a948:	31 d1       	rcall	.+610    	; 0xabac <__fp_splitA>
    a94a:	88 f0       	brcs	.+34     	; 0xa96e <__fixunssfsi+0x26>
    a94c:	9f 57       	subi	r25, 0x7F	; 127
    a94e:	90 f0       	brcs	.+36     	; 0xa974 <__fixunssfsi+0x2c>
    a950:	b9 2f       	mov	r27, r25
    a952:	99 27       	eor	r25, r25
    a954:	b7 51       	subi	r27, 0x17	; 23
    a956:	a0 f0       	brcs	.+40     	; 0xa980 <__fixunssfsi+0x38>
    a958:	d1 f0       	breq	.+52     	; 0xa98e <__fixunssfsi+0x46>
    a95a:	66 0f       	add	r22, r22
    a95c:	77 1f       	adc	r23, r23
    a95e:	88 1f       	adc	r24, r24
    a960:	99 1f       	adc	r25, r25
    a962:	1a f0       	brmi	.+6      	; 0xa96a <__fixunssfsi+0x22>
    a964:	ba 95       	dec	r27
    a966:	c9 f7       	brne	.-14     	; 0xa95a <__fixunssfsi+0x12>
    a968:	12 c0       	rjmp	.+36     	; 0xa98e <__fixunssfsi+0x46>
    a96a:	b1 30       	cpi	r27, 0x01	; 1
    a96c:	81 f0       	breq	.+32     	; 0xa98e <__fixunssfsi+0x46>
    a96e:	4f d1       	rcall	.+670    	; 0xac0e <__fp_zero>
    a970:	b1 e0       	ldi	r27, 0x01	; 1
    a972:	08 95       	ret
    a974:	4c c1       	rjmp	.+664    	; 0xac0e <__fp_zero>
    a976:	67 2f       	mov	r22, r23
    a978:	78 2f       	mov	r23, r24
    a97a:	88 27       	eor	r24, r24
    a97c:	b8 5f       	subi	r27, 0xF8	; 248
    a97e:	39 f0       	breq	.+14     	; 0xa98e <__fixunssfsi+0x46>
    a980:	b9 3f       	cpi	r27, 0xF9	; 249
    a982:	cc f3       	brlt	.-14     	; 0xa976 <__fixunssfsi+0x2e>
    a984:	86 95       	lsr	r24
    a986:	77 95       	ror	r23
    a988:	67 95       	ror	r22
    a98a:	b3 95       	inc	r27
    a98c:	d9 f7       	brne	.-10     	; 0xa984 <__fixunssfsi+0x3c>
    a98e:	3e f4       	brtc	.+14     	; 0xa99e <__fixunssfsi+0x56>
    a990:	90 95       	com	r25
    a992:	80 95       	com	r24
    a994:	70 95       	com	r23
    a996:	61 95       	neg	r22
    a998:	7f 4f       	sbci	r23, 0xFF	; 255
    a99a:	8f 4f       	sbci	r24, 0xFF	; 255
    a99c:	9f 4f       	sbci	r25, 0xFF	; 255
    a99e:	08 95       	ret

0000a9a0 <__floatunsisf>:
    a9a0:	e8 94       	clt
    a9a2:	09 c0       	rjmp	.+18     	; 0xa9b6 <__floatsisf+0x12>

0000a9a4 <__floatsisf>:
    a9a4:	97 fb       	bst	r25, 7
    a9a6:	3e f4       	brtc	.+14     	; 0xa9b6 <__floatsisf+0x12>
    a9a8:	90 95       	com	r25
    a9aa:	80 95       	com	r24
    a9ac:	70 95       	com	r23
    a9ae:	61 95       	neg	r22
    a9b0:	7f 4f       	sbci	r23, 0xFF	; 255
    a9b2:	8f 4f       	sbci	r24, 0xFF	; 255
    a9b4:	9f 4f       	sbci	r25, 0xFF	; 255
    a9b6:	99 23       	and	r25, r25
    a9b8:	a9 f0       	breq	.+42     	; 0xa9e4 <__floatsisf+0x40>
    a9ba:	f9 2f       	mov	r31, r25
    a9bc:	96 e9       	ldi	r25, 0x96	; 150
    a9be:	bb 27       	eor	r27, r27
    a9c0:	93 95       	inc	r25
    a9c2:	f6 95       	lsr	r31
    a9c4:	87 95       	ror	r24
    a9c6:	77 95       	ror	r23
    a9c8:	67 95       	ror	r22
    a9ca:	b7 95       	ror	r27
    a9cc:	f1 11       	cpse	r31, r1
    a9ce:	f8 cf       	rjmp	.-16     	; 0xa9c0 <__floatsisf+0x1c>
    a9d0:	fa f4       	brpl	.+62     	; 0xaa10 <__floatsisf+0x6c>
    a9d2:	bb 0f       	add	r27, r27
    a9d4:	11 f4       	brne	.+4      	; 0xa9da <__floatsisf+0x36>
    a9d6:	60 ff       	sbrs	r22, 0
    a9d8:	1b c0       	rjmp	.+54     	; 0xaa10 <__floatsisf+0x6c>
    a9da:	6f 5f       	subi	r22, 0xFF	; 255
    a9dc:	7f 4f       	sbci	r23, 0xFF	; 255
    a9de:	8f 4f       	sbci	r24, 0xFF	; 255
    a9e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a9e2:	16 c0       	rjmp	.+44     	; 0xaa10 <__floatsisf+0x6c>
    a9e4:	88 23       	and	r24, r24
    a9e6:	11 f0       	breq	.+4      	; 0xa9ec <__floatsisf+0x48>
    a9e8:	96 e9       	ldi	r25, 0x96	; 150
    a9ea:	11 c0       	rjmp	.+34     	; 0xaa0e <__floatsisf+0x6a>
    a9ec:	77 23       	and	r23, r23
    a9ee:	21 f0       	breq	.+8      	; 0xa9f8 <__floatsisf+0x54>
    a9f0:	9e e8       	ldi	r25, 0x8E	; 142
    a9f2:	87 2f       	mov	r24, r23
    a9f4:	76 2f       	mov	r23, r22
    a9f6:	05 c0       	rjmp	.+10     	; 0xaa02 <__floatsisf+0x5e>
    a9f8:	66 23       	and	r22, r22
    a9fa:	71 f0       	breq	.+28     	; 0xaa18 <__floatsisf+0x74>
    a9fc:	96 e8       	ldi	r25, 0x86	; 134
    a9fe:	86 2f       	mov	r24, r22
    aa00:	70 e0       	ldi	r23, 0x00	; 0
    aa02:	60 e0       	ldi	r22, 0x00	; 0
    aa04:	2a f0       	brmi	.+10     	; 0xaa10 <__floatsisf+0x6c>
    aa06:	9a 95       	dec	r25
    aa08:	66 0f       	add	r22, r22
    aa0a:	77 1f       	adc	r23, r23
    aa0c:	88 1f       	adc	r24, r24
    aa0e:	da f7       	brpl	.-10     	; 0xaa06 <__floatsisf+0x62>
    aa10:	88 0f       	add	r24, r24
    aa12:	96 95       	lsr	r25
    aa14:	87 95       	ror	r24
    aa16:	97 f9       	bld	r25, 7
    aa18:	08 95       	ret

0000aa1a <floor>:
    aa1a:	e2 d0       	rcall	.+452    	; 0xabe0 <__fp_trunc>
    aa1c:	80 f0       	brcs	.+32     	; 0xaa3e <floor+0x24>
    aa1e:	9f 37       	cpi	r25, 0x7F	; 127
    aa20:	40 f4       	brcc	.+16     	; 0xaa32 <floor+0x18>
    aa22:	91 11       	cpse	r25, r1
    aa24:	0e f0       	brts	.+2      	; 0xaa28 <floor+0xe>
    aa26:	f4 c0       	rjmp	.+488    	; 0xac10 <__fp_szero>
    aa28:	60 e0       	ldi	r22, 0x00	; 0
    aa2a:	70 e0       	ldi	r23, 0x00	; 0
    aa2c:	80 e8       	ldi	r24, 0x80	; 128
    aa2e:	9f eb       	ldi	r25, 0xBF	; 191
    aa30:	08 95       	ret
    aa32:	26 f4       	brtc	.+8      	; 0xaa3c <floor+0x22>
    aa34:	1b 16       	cp	r1, r27
    aa36:	61 1d       	adc	r22, r1
    aa38:	71 1d       	adc	r23, r1
    aa3a:	81 1d       	adc	r24, r1
    aa3c:	2b c0       	rjmp	.+86     	; 0xaa94 <__fp_mintl>
    aa3e:	45 c0       	rjmp	.+138    	; 0xaaca <__fp_mpack>

0000aa40 <__fp_cmp>:
    aa40:	99 0f       	add	r25, r25
    aa42:	00 08       	sbc	r0, r0
    aa44:	55 0f       	add	r21, r21
    aa46:	aa 0b       	sbc	r26, r26
    aa48:	e0 e8       	ldi	r30, 0x80	; 128
    aa4a:	fe ef       	ldi	r31, 0xFE	; 254
    aa4c:	16 16       	cp	r1, r22
    aa4e:	17 06       	cpc	r1, r23
    aa50:	e8 07       	cpc	r30, r24
    aa52:	f9 07       	cpc	r31, r25
    aa54:	c0 f0       	brcs	.+48     	; 0xaa86 <__fp_cmp+0x46>
    aa56:	12 16       	cp	r1, r18
    aa58:	13 06       	cpc	r1, r19
    aa5a:	e4 07       	cpc	r30, r20
    aa5c:	f5 07       	cpc	r31, r21
    aa5e:	98 f0       	brcs	.+38     	; 0xaa86 <__fp_cmp+0x46>
    aa60:	62 1b       	sub	r22, r18
    aa62:	73 0b       	sbc	r23, r19
    aa64:	84 0b       	sbc	r24, r20
    aa66:	95 0b       	sbc	r25, r21
    aa68:	39 f4       	brne	.+14     	; 0xaa78 <__fp_cmp+0x38>
    aa6a:	0a 26       	eor	r0, r26
    aa6c:	61 f0       	breq	.+24     	; 0xaa86 <__fp_cmp+0x46>
    aa6e:	23 2b       	or	r18, r19
    aa70:	24 2b       	or	r18, r20
    aa72:	25 2b       	or	r18, r21
    aa74:	21 f4       	brne	.+8      	; 0xaa7e <__fp_cmp+0x3e>
    aa76:	08 95       	ret
    aa78:	0a 26       	eor	r0, r26
    aa7a:	09 f4       	brne	.+2      	; 0xaa7e <__fp_cmp+0x3e>
    aa7c:	a1 40       	sbci	r26, 0x01	; 1
    aa7e:	a6 95       	lsr	r26
    aa80:	8f ef       	ldi	r24, 0xFF	; 255
    aa82:	81 1d       	adc	r24, r1
    aa84:	81 1d       	adc	r24, r1
    aa86:	08 95       	ret

0000aa88 <__fp_inf>:
    aa88:	97 f9       	bld	r25, 7
    aa8a:	9f 67       	ori	r25, 0x7F	; 127
    aa8c:	80 e8       	ldi	r24, 0x80	; 128
    aa8e:	70 e0       	ldi	r23, 0x00	; 0
    aa90:	60 e0       	ldi	r22, 0x00	; 0
    aa92:	08 95       	ret

0000aa94 <__fp_mintl>:
    aa94:	88 23       	and	r24, r24
    aa96:	71 f4       	brne	.+28     	; 0xaab4 <__fp_mintl+0x20>
    aa98:	77 23       	and	r23, r23
    aa9a:	21 f0       	breq	.+8      	; 0xaaa4 <__fp_mintl+0x10>
    aa9c:	98 50       	subi	r25, 0x08	; 8
    aa9e:	87 2b       	or	r24, r23
    aaa0:	76 2f       	mov	r23, r22
    aaa2:	07 c0       	rjmp	.+14     	; 0xaab2 <__fp_mintl+0x1e>
    aaa4:	66 23       	and	r22, r22
    aaa6:	11 f4       	brne	.+4      	; 0xaaac <__fp_mintl+0x18>
    aaa8:	99 27       	eor	r25, r25
    aaaa:	0d c0       	rjmp	.+26     	; 0xaac6 <__fp_mintl+0x32>
    aaac:	90 51       	subi	r25, 0x10	; 16
    aaae:	86 2b       	or	r24, r22
    aab0:	70 e0       	ldi	r23, 0x00	; 0
    aab2:	60 e0       	ldi	r22, 0x00	; 0
    aab4:	2a f0       	brmi	.+10     	; 0xaac0 <__fp_mintl+0x2c>
    aab6:	9a 95       	dec	r25
    aab8:	66 0f       	add	r22, r22
    aaba:	77 1f       	adc	r23, r23
    aabc:	88 1f       	adc	r24, r24
    aabe:	da f7       	brpl	.-10     	; 0xaab6 <__fp_mintl+0x22>
    aac0:	88 0f       	add	r24, r24
    aac2:	96 95       	lsr	r25
    aac4:	87 95       	ror	r24
    aac6:	97 f9       	bld	r25, 7
    aac8:	08 95       	ret

0000aaca <__fp_mpack>:
    aaca:	9f 3f       	cpi	r25, 0xFF	; 255
    aacc:	31 f0       	breq	.+12     	; 0xaada <__fp_mpack_finite+0xc>

0000aace <__fp_mpack_finite>:
    aace:	91 50       	subi	r25, 0x01	; 1
    aad0:	20 f4       	brcc	.+8      	; 0xaada <__fp_mpack_finite+0xc>
    aad2:	87 95       	ror	r24
    aad4:	77 95       	ror	r23
    aad6:	67 95       	ror	r22
    aad8:	b7 95       	ror	r27
    aada:	88 0f       	add	r24, r24
    aadc:	91 1d       	adc	r25, r1
    aade:	96 95       	lsr	r25
    aae0:	87 95       	ror	r24
    aae2:	97 f9       	bld	r25, 7
    aae4:	08 95       	ret

0000aae6 <__fp_nan>:
    aae6:	9f ef       	ldi	r25, 0xFF	; 255
    aae8:	80 ec       	ldi	r24, 0xC0	; 192
    aaea:	08 95       	ret

0000aaec <__fp_pscA>:
    aaec:	00 24       	eor	r0, r0
    aaee:	0a 94       	dec	r0
    aaf0:	16 16       	cp	r1, r22
    aaf2:	17 06       	cpc	r1, r23
    aaf4:	18 06       	cpc	r1, r24
    aaf6:	09 06       	cpc	r0, r25
    aaf8:	08 95       	ret

0000aafa <__fp_pscB>:
    aafa:	00 24       	eor	r0, r0
    aafc:	0a 94       	dec	r0
    aafe:	12 16       	cp	r1, r18
    ab00:	13 06       	cpc	r1, r19
    ab02:	14 06       	cpc	r1, r20
    ab04:	05 06       	cpc	r0, r21
    ab06:	08 95       	ret
    ab08:	ee cf       	rjmp	.-36     	; 0xaae6 <__fp_nan>

0000ab0a <__fp_rempio2>:
    ab0a:	50 d0       	rcall	.+160    	; 0xabac <__fp_splitA>
    ab0c:	e8 f3       	brcs	.-6      	; 0xab08 <__fp_pscB+0xe>
    ab0e:	e8 94       	clt
    ab10:	e0 e0       	ldi	r30, 0x00	; 0
    ab12:	bb 27       	eor	r27, r27
    ab14:	9f 57       	subi	r25, 0x7F	; 127
    ab16:	f0 f0       	brcs	.+60     	; 0xab54 <__fp_rempio2+0x4a>
    ab18:	2a ed       	ldi	r18, 0xDA	; 218
    ab1a:	3f e0       	ldi	r19, 0x0F	; 15
    ab1c:	49 ec       	ldi	r20, 0xC9	; 201
    ab1e:	06 c0       	rjmp	.+12     	; 0xab2c <__fp_rempio2+0x22>
    ab20:	ee 0f       	add	r30, r30
    ab22:	bb 0f       	add	r27, r27
    ab24:	66 1f       	adc	r22, r22
    ab26:	77 1f       	adc	r23, r23
    ab28:	88 1f       	adc	r24, r24
    ab2a:	28 f0       	brcs	.+10     	; 0xab36 <__fp_rempio2+0x2c>
    ab2c:	b2 3a       	cpi	r27, 0xA2	; 162
    ab2e:	62 07       	cpc	r22, r18
    ab30:	73 07       	cpc	r23, r19
    ab32:	84 07       	cpc	r24, r20
    ab34:	28 f0       	brcs	.+10     	; 0xab40 <__fp_rempio2+0x36>
    ab36:	b2 5a       	subi	r27, 0xA2	; 162
    ab38:	62 0b       	sbc	r22, r18
    ab3a:	73 0b       	sbc	r23, r19
    ab3c:	84 0b       	sbc	r24, r20
    ab3e:	e3 95       	inc	r30
    ab40:	9a 95       	dec	r25
    ab42:	72 f7       	brpl	.-36     	; 0xab20 <__fp_rempio2+0x16>
    ab44:	80 38       	cpi	r24, 0x80	; 128
    ab46:	30 f4       	brcc	.+12     	; 0xab54 <__fp_rempio2+0x4a>
    ab48:	9a 95       	dec	r25
    ab4a:	bb 0f       	add	r27, r27
    ab4c:	66 1f       	adc	r22, r22
    ab4e:	77 1f       	adc	r23, r23
    ab50:	88 1f       	adc	r24, r24
    ab52:	d2 f7       	brpl	.-12     	; 0xab48 <__fp_rempio2+0x3e>
    ab54:	90 48       	sbci	r25, 0x80	; 128
    ab56:	bb cf       	rjmp	.-138    	; 0xaace <__fp_mpack_finite>

0000ab58 <__fp_round>:
    ab58:	09 2e       	mov	r0, r25
    ab5a:	03 94       	inc	r0
    ab5c:	00 0c       	add	r0, r0
    ab5e:	11 f4       	brne	.+4      	; 0xab64 <__fp_round+0xc>
    ab60:	88 23       	and	r24, r24
    ab62:	52 f0       	brmi	.+20     	; 0xab78 <__fp_round+0x20>
    ab64:	bb 0f       	add	r27, r27
    ab66:	40 f4       	brcc	.+16     	; 0xab78 <__fp_round+0x20>
    ab68:	bf 2b       	or	r27, r31
    ab6a:	11 f4       	brne	.+4      	; 0xab70 <__fp_round+0x18>
    ab6c:	60 ff       	sbrs	r22, 0
    ab6e:	04 c0       	rjmp	.+8      	; 0xab78 <__fp_round+0x20>
    ab70:	6f 5f       	subi	r22, 0xFF	; 255
    ab72:	7f 4f       	sbci	r23, 0xFF	; 255
    ab74:	8f 4f       	sbci	r24, 0xFF	; 255
    ab76:	9f 4f       	sbci	r25, 0xFF	; 255
    ab78:	08 95       	ret

0000ab7a <__fp_sinus>:
    ab7a:	ef 93       	push	r30
    ab7c:	e0 ff       	sbrs	r30, 0
    ab7e:	06 c0       	rjmp	.+12     	; 0xab8c <__fp_sinus+0x12>
    ab80:	a2 ea       	ldi	r26, 0xA2	; 162
    ab82:	2a ed       	ldi	r18, 0xDA	; 218
    ab84:	3f e0       	ldi	r19, 0x0F	; 15
    ab86:	49 ec       	ldi	r20, 0xC9	; 201
    ab88:	5f eb       	ldi	r21, 0xBF	; 191
    ab8a:	17 de       	rcall	.-978    	; 0xa7ba <__addsf3x>
    ab8c:	e5 df       	rcall	.-54     	; 0xab58 <__fp_round>
    ab8e:	0f 90       	pop	r0
    ab90:	03 94       	inc	r0
    ab92:	01 fc       	sbrc	r0, 1
    ab94:	90 58       	subi	r25, 0x80	; 128
    ab96:	e4 ee       	ldi	r30, 0xE4	; 228
    ab98:	f0 e0       	ldi	r31, 0x00	; 0
    ab9a:	98 c1       	rjmp	.+816    	; 0xaecc <__fp_powsodd>

0000ab9c <__fp_split3>:
    ab9c:	57 fd       	sbrc	r21, 7
    ab9e:	90 58       	subi	r25, 0x80	; 128
    aba0:	44 0f       	add	r20, r20
    aba2:	55 1f       	adc	r21, r21
    aba4:	59 f0       	breq	.+22     	; 0xabbc <__fp_splitA+0x10>
    aba6:	5f 3f       	cpi	r21, 0xFF	; 255
    aba8:	71 f0       	breq	.+28     	; 0xabc6 <__fp_splitA+0x1a>
    abaa:	47 95       	ror	r20

0000abac <__fp_splitA>:
    abac:	88 0f       	add	r24, r24
    abae:	97 fb       	bst	r25, 7
    abb0:	99 1f       	adc	r25, r25
    abb2:	61 f0       	breq	.+24     	; 0xabcc <__fp_splitA+0x20>
    abb4:	9f 3f       	cpi	r25, 0xFF	; 255
    abb6:	79 f0       	breq	.+30     	; 0xabd6 <__fp_splitA+0x2a>
    abb8:	87 95       	ror	r24
    abba:	08 95       	ret
    abbc:	12 16       	cp	r1, r18
    abbe:	13 06       	cpc	r1, r19
    abc0:	14 06       	cpc	r1, r20
    abc2:	55 1f       	adc	r21, r21
    abc4:	f2 cf       	rjmp	.-28     	; 0xabaa <__fp_split3+0xe>
    abc6:	46 95       	lsr	r20
    abc8:	f1 df       	rcall	.-30     	; 0xabac <__fp_splitA>
    abca:	08 c0       	rjmp	.+16     	; 0xabdc <__fp_splitA+0x30>
    abcc:	16 16       	cp	r1, r22
    abce:	17 06       	cpc	r1, r23
    abd0:	18 06       	cpc	r1, r24
    abd2:	99 1f       	adc	r25, r25
    abd4:	f1 cf       	rjmp	.-30     	; 0xabb8 <__fp_splitA+0xc>
    abd6:	86 95       	lsr	r24
    abd8:	71 05       	cpc	r23, r1
    abda:	61 05       	cpc	r22, r1
    abdc:	08 94       	sec
    abde:	08 95       	ret

0000abe0 <__fp_trunc>:
    abe0:	e5 df       	rcall	.-54     	; 0xabac <__fp_splitA>
    abe2:	a0 f0       	brcs	.+40     	; 0xac0c <__fp_trunc+0x2c>
    abe4:	be e7       	ldi	r27, 0x7E	; 126
    abe6:	b9 17       	cp	r27, r25
    abe8:	88 f4       	brcc	.+34     	; 0xac0c <__fp_trunc+0x2c>
    abea:	bb 27       	eor	r27, r27
    abec:	9f 38       	cpi	r25, 0x8F	; 143
    abee:	60 f4       	brcc	.+24     	; 0xac08 <__fp_trunc+0x28>
    abf0:	16 16       	cp	r1, r22
    abf2:	b1 1d       	adc	r27, r1
    abf4:	67 2f       	mov	r22, r23
    abf6:	78 2f       	mov	r23, r24
    abf8:	88 27       	eor	r24, r24
    abfa:	98 5f       	subi	r25, 0xF8	; 248
    abfc:	f7 cf       	rjmp	.-18     	; 0xabec <__fp_trunc+0xc>
    abfe:	86 95       	lsr	r24
    ac00:	77 95       	ror	r23
    ac02:	67 95       	ror	r22
    ac04:	b1 1d       	adc	r27, r1
    ac06:	93 95       	inc	r25
    ac08:	96 39       	cpi	r25, 0x96	; 150
    ac0a:	c8 f3       	brcs	.-14     	; 0xabfe <__fp_trunc+0x1e>
    ac0c:	08 95       	ret

0000ac0e <__fp_zero>:
    ac0e:	e8 94       	clt

0000ac10 <__fp_szero>:
    ac10:	bb 27       	eor	r27, r27
    ac12:	66 27       	eor	r22, r22
    ac14:	77 27       	eor	r23, r23
    ac16:	cb 01       	movw	r24, r22
    ac18:	97 f9       	bld	r25, 7
    ac1a:	08 95       	ret

0000ac1c <__gesf2>:
    ac1c:	11 df       	rcall	.-478    	; 0xaa40 <__fp_cmp>
    ac1e:	08 f4       	brcc	.+2      	; 0xac22 <__gesf2+0x6>
    ac20:	8f ef       	ldi	r24, 0xFF	; 255
    ac22:	08 95       	ret

0000ac24 <__mulsf3>:
    ac24:	0b d0       	rcall	.+22     	; 0xac3c <__mulsf3x>
    ac26:	98 cf       	rjmp	.-208    	; 0xab58 <__fp_round>
    ac28:	61 df       	rcall	.-318    	; 0xaaec <__fp_pscA>
    ac2a:	28 f0       	brcs	.+10     	; 0xac36 <__mulsf3+0x12>
    ac2c:	66 df       	rcall	.-308    	; 0xaafa <__fp_pscB>
    ac2e:	18 f0       	brcs	.+6      	; 0xac36 <__mulsf3+0x12>
    ac30:	95 23       	and	r25, r21
    ac32:	09 f0       	breq	.+2      	; 0xac36 <__mulsf3+0x12>
    ac34:	29 cf       	rjmp	.-430    	; 0xaa88 <__fp_inf>
    ac36:	57 cf       	rjmp	.-338    	; 0xaae6 <__fp_nan>
    ac38:	11 24       	eor	r1, r1
    ac3a:	ea cf       	rjmp	.-44     	; 0xac10 <__fp_szero>

0000ac3c <__mulsf3x>:
    ac3c:	af df       	rcall	.-162    	; 0xab9c <__fp_split3>
    ac3e:	a0 f3       	brcs	.-24     	; 0xac28 <__mulsf3+0x4>

0000ac40 <__mulsf3_pse>:
    ac40:	95 9f       	mul	r25, r21
    ac42:	d1 f3       	breq	.-12     	; 0xac38 <__mulsf3+0x14>
    ac44:	95 0f       	add	r25, r21
    ac46:	50 e0       	ldi	r21, 0x00	; 0
    ac48:	55 1f       	adc	r21, r21
    ac4a:	62 9f       	mul	r22, r18
    ac4c:	f0 01       	movw	r30, r0
    ac4e:	72 9f       	mul	r23, r18
    ac50:	bb 27       	eor	r27, r27
    ac52:	f0 0d       	add	r31, r0
    ac54:	b1 1d       	adc	r27, r1
    ac56:	63 9f       	mul	r22, r19
    ac58:	aa 27       	eor	r26, r26
    ac5a:	f0 0d       	add	r31, r0
    ac5c:	b1 1d       	adc	r27, r1
    ac5e:	aa 1f       	adc	r26, r26
    ac60:	64 9f       	mul	r22, r20
    ac62:	66 27       	eor	r22, r22
    ac64:	b0 0d       	add	r27, r0
    ac66:	a1 1d       	adc	r26, r1
    ac68:	66 1f       	adc	r22, r22
    ac6a:	82 9f       	mul	r24, r18
    ac6c:	22 27       	eor	r18, r18
    ac6e:	b0 0d       	add	r27, r0
    ac70:	a1 1d       	adc	r26, r1
    ac72:	62 1f       	adc	r22, r18
    ac74:	73 9f       	mul	r23, r19
    ac76:	b0 0d       	add	r27, r0
    ac78:	a1 1d       	adc	r26, r1
    ac7a:	62 1f       	adc	r22, r18
    ac7c:	83 9f       	mul	r24, r19
    ac7e:	a0 0d       	add	r26, r0
    ac80:	61 1d       	adc	r22, r1
    ac82:	22 1f       	adc	r18, r18
    ac84:	74 9f       	mul	r23, r20
    ac86:	33 27       	eor	r19, r19
    ac88:	a0 0d       	add	r26, r0
    ac8a:	61 1d       	adc	r22, r1
    ac8c:	23 1f       	adc	r18, r19
    ac8e:	84 9f       	mul	r24, r20
    ac90:	60 0d       	add	r22, r0
    ac92:	21 1d       	adc	r18, r1
    ac94:	82 2f       	mov	r24, r18
    ac96:	76 2f       	mov	r23, r22
    ac98:	6a 2f       	mov	r22, r26
    ac9a:	11 24       	eor	r1, r1
    ac9c:	9f 57       	subi	r25, 0x7F	; 127
    ac9e:	50 40       	sbci	r21, 0x00	; 0
    aca0:	8a f0       	brmi	.+34     	; 0xacc4 <__mulsf3_pse+0x84>
    aca2:	e1 f0       	breq	.+56     	; 0xacdc <__mulsf3_pse+0x9c>
    aca4:	88 23       	and	r24, r24
    aca6:	4a f0       	brmi	.+18     	; 0xacba <__mulsf3_pse+0x7a>
    aca8:	ee 0f       	add	r30, r30
    acaa:	ff 1f       	adc	r31, r31
    acac:	bb 1f       	adc	r27, r27
    acae:	66 1f       	adc	r22, r22
    acb0:	77 1f       	adc	r23, r23
    acb2:	88 1f       	adc	r24, r24
    acb4:	91 50       	subi	r25, 0x01	; 1
    acb6:	50 40       	sbci	r21, 0x00	; 0
    acb8:	a9 f7       	brne	.-22     	; 0xaca4 <__mulsf3_pse+0x64>
    acba:	9e 3f       	cpi	r25, 0xFE	; 254
    acbc:	51 05       	cpc	r21, r1
    acbe:	70 f0       	brcs	.+28     	; 0xacdc <__mulsf3_pse+0x9c>
    acc0:	e3 ce       	rjmp	.-570    	; 0xaa88 <__fp_inf>
    acc2:	a6 cf       	rjmp	.-180    	; 0xac10 <__fp_szero>
    acc4:	5f 3f       	cpi	r21, 0xFF	; 255
    acc6:	ec f3       	brlt	.-6      	; 0xacc2 <__mulsf3_pse+0x82>
    acc8:	98 3e       	cpi	r25, 0xE8	; 232
    acca:	dc f3       	brlt	.-10     	; 0xacc2 <__mulsf3_pse+0x82>
    accc:	86 95       	lsr	r24
    acce:	77 95       	ror	r23
    acd0:	67 95       	ror	r22
    acd2:	b7 95       	ror	r27
    acd4:	f7 95       	ror	r31
    acd6:	e7 95       	ror	r30
    acd8:	9f 5f       	subi	r25, 0xFF	; 255
    acda:	c1 f7       	brne	.-16     	; 0xaccc <__mulsf3_pse+0x8c>
    acdc:	fe 2b       	or	r31, r30
    acde:	88 0f       	add	r24, r24
    ace0:	91 1d       	adc	r25, r1
    ace2:	96 95       	lsr	r25
    ace4:	87 95       	ror	r24
    ace6:	97 f9       	bld	r25, 7
    ace8:	08 95       	ret

0000acea <pow>:
    acea:	fa 01       	movw	r30, r20
    acec:	ee 0f       	add	r30, r30
    acee:	ff 1f       	adc	r31, r31
    acf0:	30 96       	adiw	r30, 0x00	; 0
    acf2:	21 05       	cpc	r18, r1
    acf4:	31 05       	cpc	r19, r1
    acf6:	99 f1       	breq	.+102    	; 0xad5e <pow+0x74>
    acf8:	61 15       	cp	r22, r1
    acfa:	71 05       	cpc	r23, r1
    acfc:	61 f4       	brne	.+24     	; 0xad16 <pow+0x2c>
    acfe:	80 38       	cpi	r24, 0x80	; 128
    ad00:	bf e3       	ldi	r27, 0x3F	; 63
    ad02:	9b 07       	cpc	r25, r27
    ad04:	49 f1       	breq	.+82     	; 0xad58 <pow+0x6e>
    ad06:	68 94       	set
    ad08:	90 38       	cpi	r25, 0x80	; 128
    ad0a:	81 05       	cpc	r24, r1
    ad0c:	61 f0       	breq	.+24     	; 0xad26 <pow+0x3c>
    ad0e:	80 38       	cpi	r24, 0x80	; 128
    ad10:	bf ef       	ldi	r27, 0xFF	; 255
    ad12:	9b 07       	cpc	r25, r27
    ad14:	41 f0       	breq	.+16     	; 0xad26 <pow+0x3c>
    ad16:	99 23       	and	r25, r25
    ad18:	42 f5       	brpl	.+80     	; 0xad6a <pow+0x80>
    ad1a:	ff 3f       	cpi	r31, 0xFF	; 255
    ad1c:	e1 05       	cpc	r30, r1
    ad1e:	31 05       	cpc	r19, r1
    ad20:	21 05       	cpc	r18, r1
    ad22:	11 f1       	breq	.+68     	; 0xad68 <pow+0x7e>
    ad24:	e8 94       	clt
    ad26:	08 94       	sec
    ad28:	e7 95       	ror	r30
    ad2a:	d9 01       	movw	r26, r18
    ad2c:	aa 23       	and	r26, r26
    ad2e:	29 f4       	brne	.+10     	; 0xad3a <pow+0x50>
    ad30:	ab 2f       	mov	r26, r27
    ad32:	be 2f       	mov	r27, r30
    ad34:	f8 5f       	subi	r31, 0xF8	; 248
    ad36:	d0 f3       	brcs	.-12     	; 0xad2c <pow+0x42>
    ad38:	10 c0       	rjmp	.+32     	; 0xad5a <pow+0x70>
    ad3a:	ff 5f       	subi	r31, 0xFF	; 255
    ad3c:	70 f4       	brcc	.+28     	; 0xad5a <pow+0x70>
    ad3e:	a6 95       	lsr	r26
    ad40:	e0 f7       	brcc	.-8      	; 0xad3a <pow+0x50>
    ad42:	f7 39       	cpi	r31, 0x97	; 151
    ad44:	50 f0       	brcs	.+20     	; 0xad5a <pow+0x70>
    ad46:	19 f0       	breq	.+6      	; 0xad4e <pow+0x64>
    ad48:	ff 3a       	cpi	r31, 0xAF	; 175
    ad4a:	38 f4       	brcc	.+14     	; 0xad5a <pow+0x70>
    ad4c:	9f 77       	andi	r25, 0x7F	; 127
    ad4e:	9f 93       	push	r25
    ad50:	0c d0       	rcall	.+24     	; 0xad6a <pow+0x80>
    ad52:	0f 90       	pop	r0
    ad54:	07 fc       	sbrc	r0, 7
    ad56:	90 58       	subi	r25, 0x80	; 128
    ad58:	08 95       	ret
    ad5a:	3e f0       	brts	.+14     	; 0xad6a <pow+0x80>
    ad5c:	c4 ce       	rjmp	.-632    	; 0xaae6 <__fp_nan>
    ad5e:	60 e0       	ldi	r22, 0x00	; 0
    ad60:	70 e0       	ldi	r23, 0x00	; 0
    ad62:	80 e8       	ldi	r24, 0x80	; 128
    ad64:	9f e3       	ldi	r25, 0x3F	; 63
    ad66:	08 95       	ret
    ad68:	4f e7       	ldi	r20, 0x7F	; 127
    ad6a:	9f 77       	andi	r25, 0x7F	; 127
    ad6c:	5f 93       	push	r21
    ad6e:	4f 93       	push	r20
    ad70:	3f 93       	push	r19
    ad72:	2f 93       	push	r18
    ad74:	fe d0       	rcall	.+508    	; 0xaf72 <log>
    ad76:	2f 91       	pop	r18
    ad78:	3f 91       	pop	r19
    ad7a:	4f 91       	pop	r20
    ad7c:	5f 91       	pop	r21
    ad7e:	52 df       	rcall	.-348    	; 0xac24 <__mulsf3>
    ad80:	4d c0       	rjmp	.+154    	; 0xae1c <exp>

0000ad82 <sin>:
    ad82:	9f 93       	push	r25
    ad84:	c2 de       	rcall	.-636    	; 0xab0a <__fp_rempio2>
    ad86:	0f 90       	pop	r0
    ad88:	07 fc       	sbrc	r0, 7
    ad8a:	ee 5f       	subi	r30, 0xFE	; 254
    ad8c:	f6 ce       	rjmp	.-532    	; 0xab7a <__fp_sinus>
    ad8e:	11 f4       	brne	.+4      	; 0xad94 <sin+0x12>
    ad90:	0e f4       	brtc	.+2      	; 0xad94 <sin+0x12>
    ad92:	a9 ce       	rjmp	.-686    	; 0xaae6 <__fp_nan>
    ad94:	9a ce       	rjmp	.-716    	; 0xaaca <__fp_mpack>

0000ad96 <sqrt>:
    ad96:	0a df       	rcall	.-492    	; 0xabac <__fp_splitA>
    ad98:	d0 f3       	brcs	.-12     	; 0xad8e <sin+0xc>
    ad9a:	99 23       	and	r25, r25
    ad9c:	d9 f3       	breq	.-10     	; 0xad94 <sin+0x12>
    ad9e:	ce f3       	brts	.-14     	; 0xad92 <sin+0x10>
    ada0:	9f 57       	subi	r25, 0x7F	; 127
    ada2:	55 0b       	sbc	r21, r21
    ada4:	87 ff       	sbrs	r24, 7
    ada6:	66 d0       	rcall	.+204    	; 0xae74 <__fp_norm2>
    ada8:	00 24       	eor	r0, r0
    adaa:	a0 e6       	ldi	r26, 0x60	; 96
    adac:	40 ea       	ldi	r20, 0xA0	; 160
    adae:	90 01       	movw	r18, r0
    adb0:	80 58       	subi	r24, 0x80	; 128
    adb2:	56 95       	lsr	r21
    adb4:	97 95       	ror	r25
    adb6:	28 f4       	brcc	.+10     	; 0xadc2 <sqrt+0x2c>
    adb8:	80 5c       	subi	r24, 0xC0	; 192
    adba:	66 0f       	add	r22, r22
    adbc:	77 1f       	adc	r23, r23
    adbe:	88 1f       	adc	r24, r24
    adc0:	20 f0       	brcs	.+8      	; 0xadca <sqrt+0x34>
    adc2:	26 17       	cp	r18, r22
    adc4:	37 07       	cpc	r19, r23
    adc6:	48 07       	cpc	r20, r24
    adc8:	30 f4       	brcc	.+12     	; 0xadd6 <sqrt+0x40>
    adca:	62 1b       	sub	r22, r18
    adcc:	73 0b       	sbc	r23, r19
    adce:	84 0b       	sbc	r24, r20
    add0:	20 29       	or	r18, r0
    add2:	31 29       	or	r19, r1
    add4:	4a 2b       	or	r20, r26
    add6:	a6 95       	lsr	r26
    add8:	17 94       	ror	r1
    adda:	07 94       	ror	r0
    addc:	20 25       	eor	r18, r0
    adde:	31 25       	eor	r19, r1
    ade0:	4a 27       	eor	r20, r26
    ade2:	58 f7       	brcc	.-42     	; 0xadba <sqrt+0x24>
    ade4:	66 0f       	add	r22, r22
    ade6:	77 1f       	adc	r23, r23
    ade8:	88 1f       	adc	r24, r24
    adea:	20 f0       	brcs	.+8      	; 0xadf4 <sqrt+0x5e>
    adec:	26 17       	cp	r18, r22
    adee:	37 07       	cpc	r19, r23
    adf0:	48 07       	cpc	r20, r24
    adf2:	30 f4       	brcc	.+12     	; 0xae00 <sqrt+0x6a>
    adf4:	62 0b       	sbc	r22, r18
    adf6:	73 0b       	sbc	r23, r19
    adf8:	84 0b       	sbc	r24, r20
    adfa:	20 0d       	add	r18, r0
    adfc:	31 1d       	adc	r19, r1
    adfe:	41 1d       	adc	r20, r1
    ae00:	a0 95       	com	r26
    ae02:	81 f7       	brne	.-32     	; 0xade4 <sqrt+0x4e>
    ae04:	b9 01       	movw	r22, r18
    ae06:	84 2f       	mov	r24, r20
    ae08:	91 58       	subi	r25, 0x81	; 129
    ae0a:	88 0f       	add	r24, r24
    ae0c:	96 95       	lsr	r25
    ae0e:	87 95       	ror	r24
    ae10:	08 95       	ret
    ae12:	19 f4       	brne	.+6      	; 0xae1a <sqrt+0x84>
    ae14:	0e f0       	brts	.+2      	; 0xae18 <sqrt+0x82>
    ae16:	38 ce       	rjmp	.-912    	; 0xaa88 <__fp_inf>
    ae18:	fa ce       	rjmp	.-524    	; 0xac0e <__fp_zero>
    ae1a:	65 ce       	rjmp	.-822    	; 0xaae6 <__fp_nan>

0000ae1c <exp>:
    ae1c:	c7 de       	rcall	.-626    	; 0xabac <__fp_splitA>
    ae1e:	c8 f3       	brcs	.-14     	; 0xae12 <sqrt+0x7c>
    ae20:	96 38       	cpi	r25, 0x86	; 134
    ae22:	c0 f7       	brcc	.-16     	; 0xae14 <sqrt+0x7e>
    ae24:	07 f8       	bld	r0, 7
    ae26:	0f 92       	push	r0
    ae28:	e8 94       	clt
    ae2a:	2b e3       	ldi	r18, 0x3B	; 59
    ae2c:	3a ea       	ldi	r19, 0xAA	; 170
    ae2e:	48 eb       	ldi	r20, 0xB8	; 184
    ae30:	5f e7       	ldi	r21, 0x7F	; 127
    ae32:	06 df       	rcall	.-500    	; 0xac40 <__mulsf3_pse>
    ae34:	0f 92       	push	r0
    ae36:	0f 92       	push	r0
    ae38:	0f 92       	push	r0
    ae3a:	4d b7       	in	r20, 0x3d	; 61
    ae3c:	5e b7       	in	r21, 0x3e	; 62
    ae3e:	0f 92       	push	r0
    ae40:	d8 d0       	rcall	.+432    	; 0xaff2 <modf>
    ae42:	e2 e0       	ldi	r30, 0x02	; 2
    ae44:	f1 e0       	ldi	r31, 0x01	; 1
    ae46:	1d d0       	rcall	.+58     	; 0xae82 <__fp_powser>
    ae48:	4f 91       	pop	r20
    ae4a:	5f 91       	pop	r21
    ae4c:	ef 91       	pop	r30
    ae4e:	ff 91       	pop	r31
    ae50:	e5 95       	asr	r30
    ae52:	ee 1f       	adc	r30, r30
    ae54:	ff 1f       	adc	r31, r31
    ae56:	49 f0       	breq	.+18     	; 0xae6a <exp+0x4e>
    ae58:	fe 57       	subi	r31, 0x7E	; 126
    ae5a:	e0 68       	ori	r30, 0x80	; 128
    ae5c:	44 27       	eor	r20, r20
    ae5e:	ee 0f       	add	r30, r30
    ae60:	44 1f       	adc	r20, r20
    ae62:	fa 95       	dec	r31
    ae64:	e1 f7       	brne	.-8      	; 0xae5e <exp+0x42>
    ae66:	41 95       	neg	r20
    ae68:	55 0b       	sbc	r21, r21
    ae6a:	4a d0       	rcall	.+148    	; 0xaf00 <ldexp>
    ae6c:	0f 90       	pop	r0
    ae6e:	07 fe       	sbrs	r0, 7
    ae70:	3e c0       	rjmp	.+124    	; 0xaeee <inverse>
    ae72:	08 95       	ret

0000ae74 <__fp_norm2>:
    ae74:	91 50       	subi	r25, 0x01	; 1
    ae76:	50 40       	sbci	r21, 0x00	; 0
    ae78:	66 0f       	add	r22, r22
    ae7a:	77 1f       	adc	r23, r23
    ae7c:	88 1f       	adc	r24, r24
    ae7e:	d2 f7       	brpl	.-12     	; 0xae74 <__fp_norm2>
    ae80:	08 95       	ret

0000ae82 <__fp_powser>:
    ae82:	df 93       	push	r29
    ae84:	cf 93       	push	r28
    ae86:	1f 93       	push	r17
    ae88:	0f 93       	push	r16
    ae8a:	ff 92       	push	r15
    ae8c:	ef 92       	push	r14
    ae8e:	df 92       	push	r13
    ae90:	7b 01       	movw	r14, r22
    ae92:	8c 01       	movw	r16, r24
    ae94:	68 94       	set
    ae96:	05 c0       	rjmp	.+10     	; 0xaea2 <__fp_powser+0x20>
    ae98:	da 2e       	mov	r13, r26
    ae9a:	ef 01       	movw	r28, r30
    ae9c:	cf de       	rcall	.-610    	; 0xac3c <__mulsf3x>
    ae9e:	fe 01       	movw	r30, r28
    aea0:	e8 94       	clt
    aea2:	a5 91       	lpm	r26, Z+
    aea4:	25 91       	lpm	r18, Z+
    aea6:	35 91       	lpm	r19, Z+
    aea8:	45 91       	lpm	r20, Z+
    aeaa:	55 91       	lpm	r21, Z+
    aeac:	ae f3       	brts	.-22     	; 0xae98 <__fp_powser+0x16>
    aeae:	ef 01       	movw	r28, r30
    aeb0:	84 dc       	rcall	.-1784   	; 0xa7ba <__addsf3x>
    aeb2:	fe 01       	movw	r30, r28
    aeb4:	97 01       	movw	r18, r14
    aeb6:	a8 01       	movw	r20, r16
    aeb8:	da 94       	dec	r13
    aeba:	79 f7       	brne	.-34     	; 0xae9a <__fp_powser+0x18>
    aebc:	df 90       	pop	r13
    aebe:	ef 90       	pop	r14
    aec0:	ff 90       	pop	r15
    aec2:	0f 91       	pop	r16
    aec4:	1f 91       	pop	r17
    aec6:	cf 91       	pop	r28
    aec8:	df 91       	pop	r29
    aeca:	08 95       	ret

0000aecc <__fp_powsodd>:
    aecc:	9f 93       	push	r25
    aece:	8f 93       	push	r24
    aed0:	7f 93       	push	r23
    aed2:	6f 93       	push	r22
    aed4:	ff 93       	push	r31
    aed6:	ef 93       	push	r30
    aed8:	9b 01       	movw	r18, r22
    aeda:	ac 01       	movw	r20, r24
    aedc:	a3 de       	rcall	.-698    	; 0xac24 <__mulsf3>
    aede:	ef 91       	pop	r30
    aee0:	ff 91       	pop	r31
    aee2:	cf df       	rcall	.-98     	; 0xae82 <__fp_powser>
    aee4:	2f 91       	pop	r18
    aee6:	3f 91       	pop	r19
    aee8:	4f 91       	pop	r20
    aeea:	5f 91       	pop	r21
    aeec:	9b ce       	rjmp	.-714    	; 0xac24 <__mulsf3>

0000aeee <inverse>:
    aeee:	9b 01       	movw	r18, r22
    aef0:	ac 01       	movw	r20, r24
    aef2:	60 e0       	ldi	r22, 0x00	; 0
    aef4:	70 e0       	ldi	r23, 0x00	; 0
    aef6:	80 e8       	ldi	r24, 0x80	; 128
    aef8:	9f e3       	ldi	r25, 0x3F	; 63
    aefa:	b9 cc       	rjmp	.-1678   	; 0xa86e <__divsf3>
    aefc:	c5 cd       	rjmp	.-1142   	; 0xaa88 <__fp_inf>
    aefe:	e5 cd       	rjmp	.-1078   	; 0xaaca <__fp_mpack>

0000af00 <ldexp>:
    af00:	55 de       	rcall	.-854    	; 0xabac <__fp_splitA>
    af02:	e8 f3       	brcs	.-6      	; 0xaefe <inverse+0x10>
    af04:	99 23       	and	r25, r25
    af06:	d9 f3       	breq	.-10     	; 0xaefe <inverse+0x10>
    af08:	94 0f       	add	r25, r20
    af0a:	51 1d       	adc	r21, r1
    af0c:	bb f3       	brvs	.-18     	; 0xaefc <inverse+0xe>
    af0e:	91 50       	subi	r25, 0x01	; 1
    af10:	50 40       	sbci	r21, 0x00	; 0
    af12:	94 f0       	brlt	.+36     	; 0xaf38 <ldexp+0x38>
    af14:	59 f0       	breq	.+22     	; 0xaf2c <ldexp+0x2c>
    af16:	88 23       	and	r24, r24
    af18:	32 f0       	brmi	.+12     	; 0xaf26 <ldexp+0x26>
    af1a:	66 0f       	add	r22, r22
    af1c:	77 1f       	adc	r23, r23
    af1e:	88 1f       	adc	r24, r24
    af20:	91 50       	subi	r25, 0x01	; 1
    af22:	50 40       	sbci	r21, 0x00	; 0
    af24:	c1 f7       	brne	.-16     	; 0xaf16 <ldexp+0x16>
    af26:	9e 3f       	cpi	r25, 0xFE	; 254
    af28:	51 05       	cpc	r21, r1
    af2a:	44 f7       	brge	.-48     	; 0xaefc <inverse+0xe>
    af2c:	88 0f       	add	r24, r24
    af2e:	91 1d       	adc	r25, r1
    af30:	96 95       	lsr	r25
    af32:	87 95       	ror	r24
    af34:	97 f9       	bld	r25, 7
    af36:	08 95       	ret
    af38:	5f 3f       	cpi	r21, 0xFF	; 255
    af3a:	ac f0       	brlt	.+42     	; 0xaf66 <ldexp+0x66>
    af3c:	98 3e       	cpi	r25, 0xE8	; 232
    af3e:	9c f0       	brlt	.+38     	; 0xaf66 <ldexp+0x66>
    af40:	bb 27       	eor	r27, r27
    af42:	86 95       	lsr	r24
    af44:	77 95       	ror	r23
    af46:	67 95       	ror	r22
    af48:	b7 95       	ror	r27
    af4a:	08 f4       	brcc	.+2      	; 0xaf4e <ldexp+0x4e>
    af4c:	b1 60       	ori	r27, 0x01	; 1
    af4e:	93 95       	inc	r25
    af50:	c1 f7       	brne	.-16     	; 0xaf42 <ldexp+0x42>
    af52:	bb 0f       	add	r27, r27
    af54:	58 f7       	brcc	.-42     	; 0xaf2c <ldexp+0x2c>
    af56:	11 f4       	brne	.+4      	; 0xaf5c <ldexp+0x5c>
    af58:	60 ff       	sbrs	r22, 0
    af5a:	e8 cf       	rjmp	.-48     	; 0xaf2c <ldexp+0x2c>
    af5c:	6f 5f       	subi	r22, 0xFF	; 255
    af5e:	7f 4f       	sbci	r23, 0xFF	; 255
    af60:	8f 4f       	sbci	r24, 0xFF	; 255
    af62:	9f 4f       	sbci	r25, 0xFF	; 255
    af64:	e3 cf       	rjmp	.-58     	; 0xaf2c <ldexp+0x2c>
    af66:	54 ce       	rjmp	.-856    	; 0xac10 <__fp_szero>
    af68:	0e f0       	brts	.+2      	; 0xaf6c <ldexp+0x6c>
    af6a:	af cd       	rjmp	.-1186   	; 0xaaca <__fp_mpack>
    af6c:	bc cd       	rjmp	.-1160   	; 0xaae6 <__fp_nan>
    af6e:	68 94       	set
    af70:	8b cd       	rjmp	.-1258   	; 0xaa88 <__fp_inf>

0000af72 <log>:
    af72:	1c de       	rcall	.-968    	; 0xabac <__fp_splitA>
    af74:	c8 f3       	brcs	.-14     	; 0xaf68 <ldexp+0x68>
    af76:	99 23       	and	r25, r25
    af78:	d1 f3       	breq	.-12     	; 0xaf6e <ldexp+0x6e>
    af7a:	c6 f3       	brts	.-16     	; 0xaf6c <ldexp+0x6c>
    af7c:	df 93       	push	r29
    af7e:	cf 93       	push	r28
    af80:	1f 93       	push	r17
    af82:	0f 93       	push	r16
    af84:	ff 92       	push	r15
    af86:	c9 2f       	mov	r28, r25
    af88:	dd 27       	eor	r29, r29
    af8a:	88 23       	and	r24, r24
    af8c:	2a f0       	brmi	.+10     	; 0xaf98 <log+0x26>
    af8e:	21 97       	sbiw	r28, 0x01	; 1
    af90:	66 0f       	add	r22, r22
    af92:	77 1f       	adc	r23, r23
    af94:	88 1f       	adc	r24, r24
    af96:	da f7       	brpl	.-10     	; 0xaf8e <log+0x1c>
    af98:	20 e0       	ldi	r18, 0x00	; 0
    af9a:	30 e0       	ldi	r19, 0x00	; 0
    af9c:	40 e8       	ldi	r20, 0x80	; 128
    af9e:	5f eb       	ldi	r21, 0xBF	; 191
    afa0:	9f e3       	ldi	r25, 0x3F	; 63
    afa2:	88 39       	cpi	r24, 0x98	; 152
    afa4:	20 f0       	brcs	.+8      	; 0xafae <log+0x3c>
    afa6:	80 3e       	cpi	r24, 0xE0	; 224
    afa8:	30 f0       	brcs	.+12     	; 0xafb6 <log+0x44>
    afaa:	21 96       	adiw	r28, 0x01	; 1
    afac:	8f 77       	andi	r24, 0x7F	; 127
    afae:	f4 db       	rcall	.-2072   	; 0xa798 <__addsf3>
    afb0:	ea e2       	ldi	r30, 0x2A	; 42
    afb2:	f1 e0       	ldi	r31, 0x01	; 1
    afb4:	03 c0       	rjmp	.+6      	; 0xafbc <log+0x4a>
    afb6:	f0 db       	rcall	.-2080   	; 0xa798 <__addsf3>
    afb8:	e7 e5       	ldi	r30, 0x57	; 87
    afba:	f1 e0       	ldi	r31, 0x01	; 1
    afbc:	62 df       	rcall	.-316    	; 0xae82 <__fp_powser>
    afbe:	8b 01       	movw	r16, r22
    afc0:	be 01       	movw	r22, r28
    afc2:	ec 01       	movw	r28, r24
    afc4:	fb 2e       	mov	r15, r27
    afc6:	6f 57       	subi	r22, 0x7F	; 127
    afc8:	71 09       	sbc	r23, r1
    afca:	75 95       	asr	r23
    afcc:	77 1f       	adc	r23, r23
    afce:	88 0b       	sbc	r24, r24
    afd0:	99 0b       	sbc	r25, r25
    afd2:	e8 dc       	rcall	.-1584   	; 0xa9a4 <__floatsisf>
    afd4:	28 e1       	ldi	r18, 0x18	; 24
    afd6:	32 e7       	ldi	r19, 0x72	; 114
    afd8:	41 e3       	ldi	r20, 0x31	; 49
    afda:	5f e3       	ldi	r21, 0x3F	; 63
    afdc:	2f de       	rcall	.-930    	; 0xac3c <__mulsf3x>
    afde:	af 2d       	mov	r26, r15
    afe0:	98 01       	movw	r18, r16
    afe2:	ae 01       	movw	r20, r28
    afe4:	ff 90       	pop	r15
    afe6:	0f 91       	pop	r16
    afe8:	1f 91       	pop	r17
    afea:	cf 91       	pop	r28
    afec:	df 91       	pop	r29
    afee:	e5 db       	rcall	.-2102   	; 0xa7ba <__addsf3x>
    aff0:	b3 cd       	rjmp	.-1178   	; 0xab58 <__fp_round>

0000aff2 <modf>:
    aff2:	fa 01       	movw	r30, r20
    aff4:	dc 01       	movw	r26, r24
    aff6:	aa 0f       	add	r26, r26
    aff8:	bb 1f       	adc	r27, r27
    affa:	9b 01       	movw	r18, r22
    affc:	ac 01       	movw	r20, r24
    affe:	bf 57       	subi	r27, 0x7F	; 127
    b000:	28 f4       	brcc	.+10     	; 0xb00c <modf+0x1a>
    b002:	22 27       	eor	r18, r18
    b004:	33 27       	eor	r19, r19
    b006:	44 27       	eor	r20, r20
    b008:	50 78       	andi	r21, 0x80	; 128
    b00a:	1f c0       	rjmp	.+62     	; 0xb04a <modf+0x58>
    b00c:	b7 51       	subi	r27, 0x17	; 23
    b00e:	88 f4       	brcc	.+34     	; 0xb032 <modf+0x40>
    b010:	ab 2f       	mov	r26, r27
    b012:	00 24       	eor	r0, r0
    b014:	46 95       	lsr	r20
    b016:	37 95       	ror	r19
    b018:	27 95       	ror	r18
    b01a:	01 1c       	adc	r0, r1
    b01c:	a3 95       	inc	r26
    b01e:	d2 f3       	brmi	.-12     	; 0xb014 <modf+0x22>
    b020:	00 20       	and	r0, r0
    b022:	69 f0       	breq	.+26     	; 0xb03e <modf+0x4c>
    b024:	22 0f       	add	r18, r18
    b026:	33 1f       	adc	r19, r19
    b028:	44 1f       	adc	r20, r20
    b02a:	b3 95       	inc	r27
    b02c:	da f3       	brmi	.-10     	; 0xb024 <modf+0x32>
    b02e:	0d d0       	rcall	.+26     	; 0xb04a <modf+0x58>
    b030:	b2 cb       	rjmp	.-2204   	; 0xa796 <__subsf3>
    b032:	61 30       	cpi	r22, 0x01	; 1
    b034:	71 05       	cpc	r23, r1
    b036:	a0 e8       	ldi	r26, 0x80	; 128
    b038:	8a 07       	cpc	r24, r26
    b03a:	b9 46       	sbci	r27, 0x69	; 105
    b03c:	30 f4       	brcc	.+12     	; 0xb04a <modf+0x58>
    b03e:	9b 01       	movw	r18, r22
    b040:	ac 01       	movw	r20, r24
    b042:	66 27       	eor	r22, r22
    b044:	77 27       	eor	r23, r23
    b046:	88 27       	eor	r24, r24
    b048:	90 78       	andi	r25, 0x80	; 128
    b04a:	30 96       	adiw	r30, 0x00	; 0
    b04c:	21 f0       	breq	.+8      	; 0xb056 <modf+0x64>
    b04e:	20 83       	st	Z, r18
    b050:	31 83       	std	Z+1, r19	; 0x01
    b052:	42 83       	std	Z+2, r20	; 0x02
    b054:	53 83       	std	Z+3, r21	; 0x03
    b056:	08 95       	ret

0000b058 <__divmodhi4>:
    b058:	97 fb       	bst	r25, 7
    b05a:	07 2e       	mov	r0, r23
    b05c:	16 f4       	brtc	.+4      	; 0xb062 <__divmodhi4+0xa>
    b05e:	00 94       	com	r0
    b060:	07 d0       	rcall	.+14     	; 0xb070 <__divmodhi4_neg1>
    b062:	77 fd       	sbrc	r23, 7
    b064:	09 d0       	rcall	.+18     	; 0xb078 <__divmodhi4_neg2>
    b066:	0e 94 62 58 	call	0xb0c4	; 0xb0c4 <__udivmodhi4>
    b06a:	07 fc       	sbrc	r0, 7
    b06c:	05 d0       	rcall	.+10     	; 0xb078 <__divmodhi4_neg2>
    b06e:	3e f4       	brtc	.+14     	; 0xb07e <__divmodhi4_exit>

0000b070 <__divmodhi4_neg1>:
    b070:	90 95       	com	r25
    b072:	81 95       	neg	r24
    b074:	9f 4f       	sbci	r25, 0xFF	; 255
    b076:	08 95       	ret

0000b078 <__divmodhi4_neg2>:
    b078:	70 95       	com	r23
    b07a:	61 95       	neg	r22
    b07c:	7f 4f       	sbci	r23, 0xFF	; 255

0000b07e <__divmodhi4_exit>:
    b07e:	08 95       	ret

0000b080 <__udivmodsi4>:
    b080:	a1 e2       	ldi	r26, 0x21	; 33
    b082:	1a 2e       	mov	r1, r26
    b084:	aa 1b       	sub	r26, r26
    b086:	bb 1b       	sub	r27, r27
    b088:	fd 01       	movw	r30, r26
    b08a:	0d c0       	rjmp	.+26     	; 0xb0a6 <__udivmodsi4_ep>

0000b08c <__udivmodsi4_loop>:
    b08c:	aa 1f       	adc	r26, r26
    b08e:	bb 1f       	adc	r27, r27
    b090:	ee 1f       	adc	r30, r30
    b092:	ff 1f       	adc	r31, r31
    b094:	a2 17       	cp	r26, r18
    b096:	b3 07       	cpc	r27, r19
    b098:	e4 07       	cpc	r30, r20
    b09a:	f5 07       	cpc	r31, r21
    b09c:	20 f0       	brcs	.+8      	; 0xb0a6 <__udivmodsi4_ep>
    b09e:	a2 1b       	sub	r26, r18
    b0a0:	b3 0b       	sbc	r27, r19
    b0a2:	e4 0b       	sbc	r30, r20
    b0a4:	f5 0b       	sbc	r31, r21

0000b0a6 <__udivmodsi4_ep>:
    b0a6:	66 1f       	adc	r22, r22
    b0a8:	77 1f       	adc	r23, r23
    b0aa:	88 1f       	adc	r24, r24
    b0ac:	99 1f       	adc	r25, r25
    b0ae:	1a 94       	dec	r1
    b0b0:	69 f7       	brne	.-38     	; 0xb08c <__udivmodsi4_loop>
    b0b2:	60 95       	com	r22
    b0b4:	70 95       	com	r23
    b0b6:	80 95       	com	r24
    b0b8:	90 95       	com	r25
    b0ba:	9b 01       	movw	r18, r22
    b0bc:	ac 01       	movw	r20, r24
    b0be:	bd 01       	movw	r22, r26
    b0c0:	cf 01       	movw	r24, r30
    b0c2:	08 95       	ret

0000b0c4 <__udivmodhi4>:
    b0c4:	aa 1b       	sub	r26, r26
    b0c6:	bb 1b       	sub	r27, r27
    b0c8:	51 e1       	ldi	r21, 0x11	; 17
    b0ca:	07 c0       	rjmp	.+14     	; 0xb0da <__udivmodhi4_ep>

0000b0cc <__udivmodhi4_loop>:
    b0cc:	aa 1f       	adc	r26, r26
    b0ce:	bb 1f       	adc	r27, r27
    b0d0:	a6 17       	cp	r26, r22
    b0d2:	b7 07       	cpc	r27, r23
    b0d4:	10 f0       	brcs	.+4      	; 0xb0da <__udivmodhi4_ep>
    b0d6:	a6 1b       	sub	r26, r22
    b0d8:	b7 0b       	sbc	r27, r23

0000b0da <__udivmodhi4_ep>:
    b0da:	88 1f       	adc	r24, r24
    b0dc:	99 1f       	adc	r25, r25
    b0de:	5a 95       	dec	r21
    b0e0:	a9 f7       	brne	.-22     	; 0xb0cc <__udivmodhi4_loop>
    b0e2:	80 95       	com	r24
    b0e4:	90 95       	com	r25
    b0e6:	bc 01       	movw	r22, r24
    b0e8:	cd 01       	movw	r24, r26
    b0ea:	08 95       	ret

0000b0ec <malloc>:
    b0ec:	0f 93       	push	r16
    b0ee:	1f 93       	push	r17
    b0f0:	cf 93       	push	r28
    b0f2:	df 93       	push	r29
    b0f4:	82 30       	cpi	r24, 0x02	; 2
    b0f6:	91 05       	cpc	r25, r1
    b0f8:	10 f4       	brcc	.+4      	; 0xb0fe <malloc+0x12>
    b0fa:	82 e0       	ldi	r24, 0x02	; 2
    b0fc:	90 e0       	ldi	r25, 0x00	; 0
    b0fe:	e0 91 ae 02 	lds	r30, 0x02AE
    b102:	f0 91 af 02 	lds	r31, 0x02AF
    b106:	20 e0       	ldi	r18, 0x00	; 0
    b108:	30 e0       	ldi	r19, 0x00	; 0
    b10a:	c0 e0       	ldi	r28, 0x00	; 0
    b10c:	d0 e0       	ldi	r29, 0x00	; 0
    b10e:	23 c0       	rjmp	.+70     	; 0xb156 <malloc+0x6a>
    b110:	40 81       	ld	r20, Z
    b112:	51 81       	ldd	r21, Z+1	; 0x01
    b114:	48 17       	cp	r20, r24
    b116:	59 07       	cpc	r21, r25
    b118:	a8 f0       	brcs	.+42     	; 0xb144 <malloc+0x58>
    b11a:	48 17       	cp	r20, r24
    b11c:	59 07       	cpc	r21, r25
    b11e:	61 f4       	brne	.+24     	; 0xb138 <malloc+0x4c>
    b120:	82 81       	ldd	r24, Z+2	; 0x02
    b122:	93 81       	ldd	r25, Z+3	; 0x03
    b124:	20 97       	sbiw	r28, 0x00	; 0
    b126:	19 f0       	breq	.+6      	; 0xb12e <malloc+0x42>
    b128:	9b 83       	std	Y+3, r25	; 0x03
    b12a:	8a 83       	std	Y+2, r24	; 0x02
    b12c:	2e c0       	rjmp	.+92     	; 0xb18a <malloc+0x9e>
    b12e:	90 93 af 02 	sts	0x02AF, r25
    b132:	80 93 ae 02 	sts	0x02AE, r24
    b136:	29 c0       	rjmp	.+82     	; 0xb18a <malloc+0x9e>
    b138:	21 15       	cp	r18, r1
    b13a:	31 05       	cpc	r19, r1
    b13c:	29 f0       	breq	.+10     	; 0xb148 <malloc+0x5c>
    b13e:	42 17       	cp	r20, r18
    b140:	53 07       	cpc	r21, r19
    b142:	10 f0       	brcs	.+4      	; 0xb148 <malloc+0x5c>
    b144:	a9 01       	movw	r20, r18
    b146:	02 c0       	rjmp	.+4      	; 0xb14c <malloc+0x60>
    b148:	be 01       	movw	r22, r28
    b14a:	df 01       	movw	r26, r30
    b14c:	02 81       	ldd	r16, Z+2	; 0x02
    b14e:	13 81       	ldd	r17, Z+3	; 0x03
    b150:	ef 01       	movw	r28, r30
    b152:	9a 01       	movw	r18, r20
    b154:	f8 01       	movw	r30, r16
    b156:	30 97       	sbiw	r30, 0x00	; 0
    b158:	d9 f6       	brne	.-74     	; 0xb110 <malloc+0x24>
    b15a:	21 15       	cp	r18, r1
    b15c:	31 05       	cpc	r19, r1
    b15e:	09 f1       	breq	.+66     	; 0xb1a2 <malloc+0xb6>
    b160:	28 1b       	sub	r18, r24
    b162:	39 0b       	sbc	r19, r25
    b164:	24 30       	cpi	r18, 0x04	; 4
    b166:	31 05       	cpc	r19, r1
    b168:	90 f4       	brcc	.+36     	; 0xb18e <malloc+0xa2>
    b16a:	12 96       	adiw	r26, 0x02	; 2
    b16c:	8d 91       	ld	r24, X+
    b16e:	9c 91       	ld	r25, X
    b170:	13 97       	sbiw	r26, 0x03	; 3
    b172:	61 15       	cp	r22, r1
    b174:	71 05       	cpc	r23, r1
    b176:	21 f0       	breq	.+8      	; 0xb180 <malloc+0x94>
    b178:	fb 01       	movw	r30, r22
    b17a:	93 83       	std	Z+3, r25	; 0x03
    b17c:	82 83       	std	Z+2, r24	; 0x02
    b17e:	04 c0       	rjmp	.+8      	; 0xb188 <malloc+0x9c>
    b180:	90 93 af 02 	sts	0x02AF, r25
    b184:	80 93 ae 02 	sts	0x02AE, r24
    b188:	fd 01       	movw	r30, r26
    b18a:	32 96       	adiw	r30, 0x02	; 2
    b18c:	44 c0       	rjmp	.+136    	; 0xb216 <malloc+0x12a>
    b18e:	fd 01       	movw	r30, r26
    b190:	e2 0f       	add	r30, r18
    b192:	f3 1f       	adc	r31, r19
    b194:	81 93       	st	Z+, r24
    b196:	91 93       	st	Z+, r25
    b198:	22 50       	subi	r18, 0x02	; 2
    b19a:	31 09       	sbc	r19, r1
    b19c:	2d 93       	st	X+, r18
    b19e:	3c 93       	st	X, r19
    b1a0:	3a c0       	rjmp	.+116    	; 0xb216 <malloc+0x12a>
    b1a2:	20 91 ac 02 	lds	r18, 0x02AC
    b1a6:	30 91 ad 02 	lds	r19, 0x02AD
    b1aa:	23 2b       	or	r18, r19
    b1ac:	41 f4       	brne	.+16     	; 0xb1be <malloc+0xd2>
    b1ae:	20 91 02 02 	lds	r18, 0x0202
    b1b2:	30 91 03 02 	lds	r19, 0x0203
    b1b6:	30 93 ad 02 	sts	0x02AD, r19
    b1ba:	20 93 ac 02 	sts	0x02AC, r18
    b1be:	20 91 00 02 	lds	r18, 0x0200
    b1c2:	30 91 01 02 	lds	r19, 0x0201
    b1c6:	21 15       	cp	r18, r1
    b1c8:	31 05       	cpc	r19, r1
    b1ca:	41 f4       	brne	.+16     	; 0xb1dc <malloc+0xf0>
    b1cc:	2d b7       	in	r18, 0x3d	; 61
    b1ce:	3e b7       	in	r19, 0x3e	; 62
    b1d0:	40 91 04 02 	lds	r20, 0x0204
    b1d4:	50 91 05 02 	lds	r21, 0x0205
    b1d8:	24 1b       	sub	r18, r20
    b1da:	35 0b       	sbc	r19, r21
    b1dc:	e0 91 ac 02 	lds	r30, 0x02AC
    b1e0:	f0 91 ad 02 	lds	r31, 0x02AD
    b1e4:	e2 17       	cp	r30, r18
    b1e6:	f3 07       	cpc	r31, r19
    b1e8:	a0 f4       	brcc	.+40     	; 0xb212 <malloc+0x126>
    b1ea:	2e 1b       	sub	r18, r30
    b1ec:	3f 0b       	sbc	r19, r31
    b1ee:	28 17       	cp	r18, r24
    b1f0:	39 07       	cpc	r19, r25
    b1f2:	78 f0       	brcs	.+30     	; 0xb212 <malloc+0x126>
    b1f4:	ac 01       	movw	r20, r24
    b1f6:	4e 5f       	subi	r20, 0xFE	; 254
    b1f8:	5f 4f       	sbci	r21, 0xFF	; 255
    b1fa:	24 17       	cp	r18, r20
    b1fc:	35 07       	cpc	r19, r21
    b1fe:	48 f0       	brcs	.+18     	; 0xb212 <malloc+0x126>
    b200:	4e 0f       	add	r20, r30
    b202:	5f 1f       	adc	r21, r31
    b204:	50 93 ad 02 	sts	0x02AD, r21
    b208:	40 93 ac 02 	sts	0x02AC, r20
    b20c:	81 93       	st	Z+, r24
    b20e:	91 93       	st	Z+, r25
    b210:	02 c0       	rjmp	.+4      	; 0xb216 <malloc+0x12a>
    b212:	e0 e0       	ldi	r30, 0x00	; 0
    b214:	f0 e0       	ldi	r31, 0x00	; 0
    b216:	cf 01       	movw	r24, r30
    b218:	df 91       	pop	r29
    b21a:	cf 91       	pop	r28
    b21c:	1f 91       	pop	r17
    b21e:	0f 91       	pop	r16
    b220:	08 95       	ret

0000b222 <free>:
    b222:	ef 92       	push	r14
    b224:	ff 92       	push	r15
    b226:	0f 93       	push	r16
    b228:	1f 93       	push	r17
    b22a:	cf 93       	push	r28
    b22c:	df 93       	push	r29
    b22e:	00 97       	sbiw	r24, 0x00	; 0
    b230:	09 f4       	brne	.+2      	; 0xb234 <free+0x12>
    b232:	8f c0       	rjmp	.+286    	; 0xb352 <free+0x130>
    b234:	dc 01       	movw	r26, r24
    b236:	12 97       	sbiw	r26, 0x02	; 2
    b238:	13 96       	adiw	r26, 0x03	; 3
    b23a:	1c 92       	st	X, r1
    b23c:	1e 92       	st	-X, r1
    b23e:	12 97       	sbiw	r26, 0x02	; 2
    b240:	e0 90 ae 02 	lds	r14, 0x02AE
    b244:	f0 90 af 02 	lds	r15, 0x02AF
    b248:	e1 14       	cp	r14, r1
    b24a:	f1 04       	cpc	r15, r1
    b24c:	89 f4       	brne	.+34     	; 0xb270 <free+0x4e>
    b24e:	2d 91       	ld	r18, X+
    b250:	3c 91       	ld	r19, X
    b252:	11 97       	sbiw	r26, 0x01	; 1
    b254:	28 0f       	add	r18, r24
    b256:	39 1f       	adc	r19, r25
    b258:	80 91 ac 02 	lds	r24, 0x02AC
    b25c:	90 91 ad 02 	lds	r25, 0x02AD
    b260:	82 17       	cp	r24, r18
    b262:	93 07       	cpc	r25, r19
    b264:	89 f5       	brne	.+98     	; 0xb2c8 <free+0xa6>
    b266:	b0 93 ad 02 	sts	0x02AD, r27
    b26a:	a0 93 ac 02 	sts	0x02AC, r26
    b26e:	71 c0       	rjmp	.+226    	; 0xb352 <free+0x130>
    b270:	e7 01       	movw	r28, r14
    b272:	20 e0       	ldi	r18, 0x00	; 0
    b274:	30 e0       	ldi	r19, 0x00	; 0
    b276:	01 c0       	rjmp	.+2      	; 0xb27a <free+0x58>
    b278:	ea 01       	movw	r28, r20
    b27a:	ca 17       	cp	r28, r26
    b27c:	db 07       	cpc	r29, r27
    b27e:	38 f4       	brcc	.+14     	; 0xb28e <free+0x6c>
    b280:	4a 81       	ldd	r20, Y+2	; 0x02
    b282:	5b 81       	ldd	r21, Y+3	; 0x03
    b284:	9e 01       	movw	r18, r28
    b286:	41 15       	cp	r20, r1
    b288:	51 05       	cpc	r21, r1
    b28a:	b1 f7       	brne	.-20     	; 0xb278 <free+0x56>
    b28c:	22 c0       	rjmp	.+68     	; 0xb2d2 <free+0xb0>
    b28e:	bc 01       	movw	r22, r24
    b290:	62 50       	subi	r22, 0x02	; 2
    b292:	71 09       	sbc	r23, r1
    b294:	fb 01       	movw	r30, r22
    b296:	d3 83       	std	Z+3, r29	; 0x03
    b298:	c2 83       	std	Z+2, r28	; 0x02
    b29a:	00 81       	ld	r16, Z
    b29c:	11 81       	ldd	r17, Z+1	; 0x01
    b29e:	ac 01       	movw	r20, r24
    b2a0:	40 0f       	add	r20, r16
    b2a2:	51 1f       	adc	r21, r17
    b2a4:	4c 17       	cp	r20, r28
    b2a6:	5d 07       	cpc	r21, r29
    b2a8:	61 f4       	brne	.+24     	; 0xb2c2 <free+0xa0>
    b2aa:	48 81       	ld	r20, Y
    b2ac:	59 81       	ldd	r21, Y+1	; 0x01
    b2ae:	40 0f       	add	r20, r16
    b2b0:	51 1f       	adc	r21, r17
    b2b2:	4e 5f       	subi	r20, 0xFE	; 254
    b2b4:	5f 4f       	sbci	r21, 0xFF	; 255
    b2b6:	51 83       	std	Z+1, r21	; 0x01
    b2b8:	40 83       	st	Z, r20
    b2ba:	4a 81       	ldd	r20, Y+2	; 0x02
    b2bc:	5b 81       	ldd	r21, Y+3	; 0x03
    b2be:	53 83       	std	Z+3, r21	; 0x03
    b2c0:	42 83       	std	Z+2, r20	; 0x02
    b2c2:	21 15       	cp	r18, r1
    b2c4:	31 05       	cpc	r19, r1
    b2c6:	29 f4       	brne	.+10     	; 0xb2d2 <free+0xb0>
    b2c8:	b0 93 af 02 	sts	0x02AF, r27
    b2cc:	a0 93 ae 02 	sts	0x02AE, r26
    b2d0:	40 c0       	rjmp	.+128    	; 0xb352 <free+0x130>
    b2d2:	f9 01       	movw	r30, r18
    b2d4:	b3 83       	std	Z+3, r27	; 0x03
    b2d6:	a2 83       	std	Z+2, r26	; 0x02
    b2d8:	e9 01       	movw	r28, r18
    b2da:	69 91       	ld	r22, Y+
    b2dc:	79 91       	ld	r23, Y+
    b2de:	c6 0f       	add	r28, r22
    b2e0:	d7 1f       	adc	r29, r23
    b2e2:	ac 17       	cp	r26, r28
    b2e4:	bd 07       	cpc	r27, r29
    b2e6:	79 f4       	brne	.+30     	; 0xb306 <free+0xe4>
    b2e8:	dc 01       	movw	r26, r24
    b2ea:	5e 91       	ld	r21, -X
    b2ec:	4e 91       	ld	r20, -X
    b2ee:	46 0f       	add	r20, r22
    b2f0:	57 1f       	adc	r21, r23
    b2f2:	4e 5f       	subi	r20, 0xFE	; 254
    b2f4:	5f 4f       	sbci	r21, 0xFF	; 255
    b2f6:	51 83       	std	Z+1, r21	; 0x01
    b2f8:	40 83       	st	Z, r20
    b2fa:	12 96       	adiw	r26, 0x02	; 2
    b2fc:	8d 91       	ld	r24, X+
    b2fe:	9c 91       	ld	r25, X
    b300:	13 97       	sbiw	r26, 0x03	; 3
    b302:	93 83       	std	Z+3, r25	; 0x03
    b304:	82 83       	std	Z+2, r24	; 0x02
    b306:	a0 e0       	ldi	r26, 0x00	; 0
    b308:	b0 e0       	ldi	r27, 0x00	; 0
    b30a:	02 c0       	rjmp	.+4      	; 0xb310 <free+0xee>
    b30c:	d7 01       	movw	r26, r14
    b30e:	7c 01       	movw	r14, r24
    b310:	f7 01       	movw	r30, r14
    b312:	82 81       	ldd	r24, Z+2	; 0x02
    b314:	93 81       	ldd	r25, Z+3	; 0x03
    b316:	00 97       	sbiw	r24, 0x00	; 0
    b318:	c9 f7       	brne	.-14     	; 0xb30c <free+0xea>
    b31a:	c7 01       	movw	r24, r14
    b31c:	02 96       	adiw	r24, 0x02	; 2
    b31e:	20 81       	ld	r18, Z
    b320:	31 81       	ldd	r19, Z+1	; 0x01
    b322:	82 0f       	add	r24, r18
    b324:	93 1f       	adc	r25, r19
    b326:	20 91 ac 02 	lds	r18, 0x02AC
    b32a:	30 91 ad 02 	lds	r19, 0x02AD
    b32e:	28 17       	cp	r18, r24
    b330:	39 07       	cpc	r19, r25
    b332:	79 f4       	brne	.+30     	; 0xb352 <free+0x130>
    b334:	10 97       	sbiw	r26, 0x00	; 0
    b336:	29 f4       	brne	.+10     	; 0xb342 <free+0x120>
    b338:	10 92 af 02 	sts	0x02AF, r1
    b33c:	10 92 ae 02 	sts	0x02AE, r1
    b340:	04 c0       	rjmp	.+8      	; 0xb34a <free+0x128>
    b342:	13 96       	adiw	r26, 0x03	; 3
    b344:	1c 92       	st	X, r1
    b346:	1e 92       	st	-X, r1
    b348:	12 97       	sbiw	r26, 0x02	; 2
    b34a:	f0 92 ad 02 	sts	0x02AD, r15
    b34e:	e0 92 ac 02 	sts	0x02AC, r14
    b352:	df 91       	pop	r29
    b354:	cf 91       	pop	r28
    b356:	1f 91       	pop	r17
    b358:	0f 91       	pop	r16
    b35a:	ff 90       	pop	r15
    b35c:	ef 90       	pop	r14
    b35e:	08 95       	ret

0000b360 <memcpy>:
    b360:	fb 01       	movw	r30, r22
    b362:	dc 01       	movw	r26, r24
    b364:	02 c0       	rjmp	.+4      	; 0xb36a <memcpy+0xa>
    b366:	01 90       	ld	r0, Z+
    b368:	0d 92       	st	X+, r0
    b36a:	41 50       	subi	r20, 0x01	; 1
    b36c:	50 40       	sbci	r21, 0x00	; 0
    b36e:	d8 f7       	brcc	.-10     	; 0xb366 <memcpy+0x6>
    b370:	08 95       	ret

0000b372 <memset>:
    b372:	dc 01       	movw	r26, r24
    b374:	01 c0       	rjmp	.+2      	; 0xb378 <memset+0x6>
    b376:	6d 93       	st	X+, r22
    b378:	41 50       	subi	r20, 0x01	; 1
    b37a:	50 40       	sbci	r21, 0x00	; 0
    b37c:	e0 f7       	brcc	.-8      	; 0xb376 <memset+0x4>
    b37e:	08 95       	ret

0000b380 <_exit>:
    b380:	f8 94       	cli

0000b382 <__stop_program>:
    b382:	ff cf       	rjmp	.-2      	; 0xb382 <__stop_program>
