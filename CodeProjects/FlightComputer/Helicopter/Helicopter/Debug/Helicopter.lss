
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000009ea  00000a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800206  00800206  00000a84  2**0
                  ALLOC
  3 .stab         000016d4  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006ee  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002846  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000240  00000000  00000000  00002875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000226a  00000000  00000000  00002ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f23  00000000  00000000  00004d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cde  00000000  00000000  00005c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  00006920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000109a  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001253  00000000  00000000  000080aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  000092fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
	if (record != NULL)
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
	{
		//Copy the record
		//danger not deep copy. 
		Record *newRecord = record->Copy();
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
		{
			records = newRecord;
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_17>
			firstRecord = newRecord;
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
			lastRecord = newRecord;
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
			lastRecord = newRecord;
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
		}
		
		bufferSize++;
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
	}
}
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ee       	ldi	r30, 0xEA	; 234
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:

using namespace helicopter::tasks::misctasks;
using namespace helicopter::scheduler;

int main(void)
{
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	2f 97       	sbiw	r28, 0x0f	; 15
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
	bool isOn = false;
 142:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		DDRA |= (1<<PA3);
 144:	81 e2       	ldi	r24, 0x21	; 33
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 e2       	ldi	r18, 0x21	; 33
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	28 60       	ori	r18, 0x08	; 8
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
		
		
		if (isOn)
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	88 23       	and	r24, r24
 15a:	59 f0       	breq	.+22     	; 0x172 <main+0x48>
		{
			PORTA &= ~(1<<PA3);
 15c:	82 e2       	ldi	r24, 0x22	; 34
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	22 e2       	ldi	r18, 0x22	; 34
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	27 7f       	andi	r18, 0xF7	; 247
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
			isOn = false;
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	0b c0       	rjmp	.+22     	; 0x188 <main+0x5e>
		}else
		{
			PORTA |= (1<<PA3);
 172:	82 e2       	ldi	r24, 0x22	; 34
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	22 e2       	ldi	r18, 0x22	; 34
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	28 60       	ori	r18, 0x08	; 8
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
			isOn = true;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	aa ef       	ldi	r26, 0xFA	; 250
 18e:	b4 e4       	ldi	r27, 0x44	; 68
 190:	8a 83       	std	Y+2, r24	; 0x02
 192:	9b 83       	std	Y+3, r25	; 0x03
 194:	ac 83       	std	Y+4, r26	; 0x04
 196:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	4a e7       	ldi	r20, 0x7A	; 122
 19e:	53 e4       	ldi	r21, 0x43	; 67
 1a0:	6a 81       	ldd	r22, Y+2	; 0x02
 1a2:	7b 81       	ldd	r23, Y+3	; 0x03
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	9d 81       	ldd	r25, Y+5	; 0x05
 1a8:	0e 94 2e 03 	call	0x65c	; 0x65c <__mulsf3>
 1ac:	dc 01       	movw	r26, r24
 1ae:	cb 01       	movw	r24, r22
 1b0:	8e 83       	std	Y+6, r24	; 0x06
 1b2:	9f 83       	std	Y+7, r25	; 0x07
 1b4:	a8 87       	std	Y+8, r26	; 0x08
 1b6:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e8       	ldi	r20, 0x80	; 128
 1be:	5f e3       	ldi	r21, 0x3F	; 63
 1c0:	6e 81       	ldd	r22, Y+6	; 0x06
 1c2:	7f 81       	ldd	r23, Y+7	; 0x07
 1c4:	88 85       	ldd	r24, Y+8	; 0x08
 1c6:	99 85       	ldd	r25, Y+9	; 0x09
 1c8:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 1cc:	88 23       	and	r24, r24
 1ce:	2c f4       	brge	.+10     	; 0x1da <main+0xb0>
		__ticks = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9b 87       	std	Y+11, r25	; 0x0b
 1d6:	8a 87       	std	Y+10, r24	; 0x0a
 1d8:	46 c0       	rjmp	.+140    	; 0x266 <main+0x13c>
	else if (__tmp > 65535)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	3f ef       	ldi	r19, 0xFF	; 255
 1de:	4f e7       	ldi	r20, 0x7F	; 127
 1e0:	57 e4       	ldi	r21, 0x47	; 71
 1e2:	6e 81       	ldd	r22, Y+6	; 0x06
 1e4:	7f 81       	ldd	r23, Y+7	; 0x07
 1e6:	88 85       	ldd	r24, Y+8	; 0x08
 1e8:	99 85       	ldd	r25, Y+9	; 0x09
 1ea:	0e 94 2a 03 	call	0x654	; 0x654 <__gesf2>
 1ee:	18 16       	cp	r1, r24
 1f0:	84 f5       	brge	.+96     	; 0x252 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e2       	ldi	r20, 0x20	; 32
 1f8:	51 e4       	ldi	r21, 0x41	; 65
 1fa:	6a 81       	ldd	r22, Y+2	; 0x02
 1fc:	7b 81       	ldd	r23, Y+3	; 0x03
 1fe:	8c 81       	ldd	r24, Y+4	; 0x04
 200:	9d 81       	ldd	r25, Y+5	; 0x05
 202:	0e 94 2e 03 	call	0x65c	; 0x65c <__mulsf3>
 206:	dc 01       	movw	r26, r24
 208:	cb 01       	movw	r24, r22
 20a:	bc 01       	movw	r22, r24
 20c:	cd 01       	movw	r24, r26
 20e:	0e 94 b1 02 	call	0x562	; 0x562 <__fixunssfsi>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	9b 87       	std	Y+11, r25	; 0x0b
 218:	8a 87       	std	Y+10, r24	; 0x0a
 21a:	12 c0       	rjmp	.+36     	; 0x240 <main+0x116>
 21c:	89 e1       	ldi	r24, 0x19	; 25
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	9d 87       	std	Y+13, r25	; 0x0d
 222:	8c 87       	std	Y+12, r24	; 0x0c
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 224:	8c 85       	ldd	r24, Y+12	; 0x0c
 226:	9d 85       	ldd	r25, Y+13	; 0x0d
 228:	8c 01       	movw	r16, r24
 22a:	c8 01       	movw	r24, r16
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x102>
 230:	8c 01       	movw	r16, r24
 232:	1d 87       	std	Y+13, r17	; 0x0d
 234:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 236:	8a 85       	ldd	r24, Y+10	; 0x0a
 238:	9b 85       	ldd	r25, Y+11	; 0x0b
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	9b 87       	std	Y+11, r25	; 0x0b
 23e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	8a 85       	ldd	r24, Y+10	; 0x0a
 244:	9b 85       	ldd	r25, Y+11	; 0x0b
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	09 f4       	brne	.+2      	; 0x24c <main+0x122>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	22 23       	and	r18, r18
 24e:	31 f7       	brne	.-52     	; 0x21c <main+0xf2>
 250:	18 c0       	rjmp	.+48     	; 0x282 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 252:	6e 81       	ldd	r22, Y+6	; 0x06
 254:	7f 81       	ldd	r23, Y+7	; 0x07
 256:	88 85       	ldd	r24, Y+8	; 0x08
 258:	99 85       	ldd	r25, Y+9	; 0x09
 25a:	0e 94 b1 02 	call	0x562	; 0x562 <__fixunssfsi>
 25e:	dc 01       	movw	r26, r24
 260:	cb 01       	movw	r24, r22
 262:	9b 87       	std	Y+11, r25	; 0x0b
 264:	8a 87       	std	Y+10, r24	; 0x0a
 266:	8a 85       	ldd	r24, Y+10	; 0x0a
 268:	9b 85       	ldd	r25, Y+11	; 0x0b
 26a:	9f 87       	std	Y+15, r25	; 0x0f
 26c:	8e 87       	std	Y+14, r24	; 0x0e
 26e:	8e 85       	ldd	r24, Y+14	; 0x0e
 270:	9f 85       	ldd	r25, Y+15	; 0x0f
 272:	8c 01       	movw	r16, r24
 274:	f8 01       	movw	r30, r16
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x14c>
 27a:	8f 01       	movw	r16, r30
 27c:	1f 87       	std	Y+15, r17	; 0x0f
 27e:	0e 87       	std	Y+14, r16	; 0x0e

int main(void)
{
	bool isOn = false;
	
	while (1)
 280:	61 cf       	rjmp	.-318    	; 0x144 <main+0x1a>
 282:	60 cf       	rjmp	.-320    	; 0x144 <main+0x1a>

00000284 <_ZN10helicopter5tasks4Task8getDelayEv>:
				Task (int delay, int period);
				virtual void init(){;}
				virtual void runTask();
				
					
				int getDelay()
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	1f 92       	push	r1
 28a:	1f 92       	push	r1
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	9a 83       	std	Y+2, r25	; 0x02
 292:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
 298:	fc 01       	movw	r30, r24
 29a:	82 81       	ldd	r24, Z+2	; 0x02
 29c:	93 81       	ldd	r25, Z+3	; 0x03
				}
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	1f 92       	push	r1
 2ae:	1f 92       	push	r1
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	9a 83       	std	Y+2, r25	; 0x02
 2b6:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	9a 81       	ldd	r25, Y+2	; 0x02
 2bc:	fc 01       	movw	r30, r24
 2be:	84 81       	ldd	r24, Z+4	; 0x04
 2c0:	95 81       	ldd	r25, Z+5	; 0x05
				}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
 2d2:	1f 92       	push	r1
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	9a 83       	std	Y+2, r25	; 0x02
 2da:	89 83       	std	Y+1, r24	; 0x01
 2dc:	7c 83       	std	Y+4, r23	; 0x04
 2de:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	2b 81       	ldd	r18, Y+3	; 0x03
 2e6:	3c 81       	ldd	r19, Y+4	; 0x04
 2e8:	fc 01       	movw	r30, r24
 2ea:	33 83       	std	Z+3, r19	; 0x03
 2ec:	22 83       	std	Z+2, r18	; 0x02
				}
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				bool getIsReadyToRun()
				{
					return isReadyToRun;
				}
				
				void setIsReadyToRun(bool isReadyToRun)
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	2b 81       	ldd	r18, Y+3	; 0x03
 312:	fc 01       	movw	r30, r24
 314:	26 83       	std	Z+6, r18	; 0x06
				}
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				void reduceDelay()
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	1f 92       	push	r1
 328:	1f 92       	push	r1
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	9a 83       	std	Y+2, r25	; 0x02
 330:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	9a 81       	ldd	r25, Y+2	; 0x02
 336:	fc 01       	movw	r30, r24
 338:	82 81       	ldd	r24, Z+2	; 0x02
 33a:	93 81       	ldd	r25, Z+3	; 0x03
 33c:	9c 01       	movw	r18, r24
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	31 09       	sbc	r19, r1
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	fc 01       	movw	r30, r24
 348:	33 83       	std	Z+3, r19	; 0x03
 34a:	22 83       	std	Z+2, r18	; 0x02
				}
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for task execution.
				*/
				void start();
				
				int getNumOfTasks()
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	1f 92       	push	r1
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	9a 83       	std	Y+2, r25	; 0x02
 364:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	9a 81       	ldd	r25, Y+2	; 0x02
 36a:	fc 01       	movw	r30, r24
 36c:	84 89       	ldd	r24, Z+20	; 0x14
 36e:	95 89       	ldd	r25, Z+21	; 0x15
				}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	1f 92       	push	r1
 380:	1f 92       	push	r1
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	9a 83       	std	Y+2, r25	; 0x02
 388:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	9a 81       	ldd	r25, Y+2	; 0x02
				}
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
 3a4:	80 91 06 02 	lds	r24, 0x0206
 3a8:	90 91 07 02 	lds	r25, 0x0207
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	81 f4       	brne	.+32     	; 0x3d0 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x38>
	{
		//scheduler = new Scheduler(124, 8);
		scheduler = new Scheduler(TARGET_TIMER_COUNT, TIMER_PRESCALER);
 3b0:	8a e1       	ldi	r24, 0x1A	; 26
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 9c 02 	call	0x538	; 0x538 <_Znwj>
 3b8:	8c 01       	movw	r16, r24
 3ba:	40 e4       	ldi	r20, 0x40	; 64
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	62 ee       	ldi	r22, 0xE2	; 226
 3c0:	74 e0       	ldi	r23, 0x04	; 4
 3c2:	c8 01       	movw	r24, r16
 3c4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>
 3c8:	10 93 07 02 	sts	0x0207, r17
 3cc:	00 93 06 02 	sts	0x0206, r16
	}
	
	return scheduler;
 3d0:	80 91 06 02 	lds	r24, 0x0206
 3d4:	90 91 07 02 	lds	r25, 0x0207
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>:

Scheduler::Scheduler(int targetTimerCount, PRESCALER prescale)
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x6>
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x8>
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	9a 83       	std	Y+2, r25	; 0x02
 3f0:	89 83       	std	Y+1, r24	; 0x01
 3f2:	7c 83       	std	Y+4, r23	; 0x04
 3f4:	6b 83       	std	Y+3, r22	; 0x03
 3f6:	5e 83       	std	Y+6, r21	; 0x06
 3f8:	4d 83       	std	Y+5, r20	; 0x05
{
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	2b 81       	ldd	r18, Y+3	; 0x03
 400:	3c 81       	ldd	r19, Y+4	; 0x04
 402:	fc 01       	movw	r30, r24
 404:	37 8b       	std	Z+23, r19	; 0x17
 406:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescale;
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	2d 81       	ldd	r18, Y+5	; 0x05
 40e:	3e 81       	ldd	r19, Y+6	; 0x06
 410:	fc 01       	movw	r30, r24
 412:	31 8f       	std	Z+25, r19	; 0x19
 414:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	fc 01       	movw	r30, r24
 41c:	15 8a       	std	Z+21, r1	; 0x15
 41e:	14 8a       	std	Z+20, r1	; 0x14
}
 420:	26 96       	adiw	r28, 0x06	; 6
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <__vector_17>:
			TCCR1B |= NoPrescaling;	
	}
}

ISR(TIMER1_COMPA_vect)
{
 432:	1f 92       	push	r1
 434:	0f 92       	push	r0
 436:	00 90 5f 00 	lds	r0, 0x005F
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	00 90 5b 00 	lds	r0, 0x005B
 442:	0f 92       	push	r0
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <__vector_17+0x30>
 462:	00 d0       	rcall	.+0      	; 0x464 <__vector_17+0x32>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	Scheduler *scheduler = Scheduler::getScheduler();
 468:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
 46c:	9c 83       	std	Y+4, r25	; 0x04
 46e:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
 470:	1e 82       	std	Y+6, r1	; 0x06
 472:	1d 82       	std	Y+5, r1	; 0x05
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
 474:	1a 82       	std	Y+2, r1	; 0x02
 476:	19 82       	std	Y+1, r1	; 0x01
 478:	33 c0       	rjmp	.+102    	; 0x4e0 <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	9c 81       	ldd	r25, Y+4	; 0x04
 47e:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
 482:	9c 01       	movw	r18, r24
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	9a 81       	ldd	r25, Y+2	; 0x02
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	82 0f       	add	r24, r18
 48e:	93 1f       	adc	r25, r19
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	9e 83       	std	Y+6, r25	; 0x06
 498:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
 49a:	8d 81       	ldd	r24, Y+5	; 0x05
 49c:	9e 81       	ldd	r25, Y+6	; 0x06
 49e:	0e 94 42 01 	call	0x284	; 0x284 <_ZN10helicopter5tasks4Task8getDelayEv>
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	00 97       	sbiw	r24, 0x00	; 0
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__vector_17+0x78>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	22 23       	and	r18, r18
 4ac:	81 f0       	breq	.+32     	; 0x4ce <__vector_17+0x9c>
		{
			task->setIsReadyToRun(true);
 4ae:	8d 81       	ldd	r24, Y+5	; 0x05
 4b0:	9e 81       	ldd	r25, Y+6	; 0x06
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
 4b8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ba:	9e 81       	ldd	r25, Y+6	; 0x06
 4bc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN10helicopter5tasks4Task9getPeriodEv>
 4c0:	9c 01       	movw	r18, r24
 4c2:	8d 81       	ldd	r24, Y+5	; 0x05
 4c4:	9e 81       	ldd	r25, Y+6	; 0x06
 4c6:	b9 01       	movw	r22, r18
 4c8:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN10helicopter5tasks4Task8setDelayEi>
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
 4ce:	8d 81       	ldd	r24, Y+5	; 0x05
 4d0:	9e 81       	ldd	r25, Y+6	; 0x06
 4d2:	0e 94 91 01 	call	0x322	; 0x322 <_ZN10helicopter5tasks4Task11reduceDelayEv>
{
	Scheduler *scheduler = Scheduler::getScheduler();
	
	Task *task = NULL;
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	9a 81       	ldd	r25, Y+2	; 0x02
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	9a 83       	std	Y+2, r25	; 0x02
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	9c 81       	ldd	r25, Y+4	; 0x04
 4e4:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
 4e8:	9c 01       	movw	r18, r24
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	9a 81       	ldd	r25, Y+2	; 0x02
 4f0:	82 17       	cp	r24, r18
 4f2:	93 07       	cpc	r25, r19
 4f4:	0c f0       	brlt	.+2      	; 0x4f8 <__vector_17+0xc6>
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	44 23       	and	r20, r20
 4fa:	09 f0       	breq	.+2      	; 0x4fe <__vector_17+0xcc>
 4fc:	be cf       	rjmp	.-132    	; 0x47a <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
 4fe:	26 96       	adiw	r28, 0x06	; 6
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	bf 91       	pop	r27
 514:	af 91       	pop	r26
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	7f 91       	pop	r23
 51c:	6f 91       	pop	r22
 51e:	5f 91       	pop	r21
 520:	4f 91       	pop	r20
 522:	3f 91       	pop	r19
 524:	2f 91       	pop	r18
 526:	0f 90       	pop	r0
 528:	00 92 5b 00 	sts	0x005B, r0
 52c:	0f 90       	pop	r0
 52e:	00 92 5f 00 	sts	0x005F, r0
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <_Znwj>:
 *  Author: HP User
 */ 
#include <commonheader.h>

void * operator new(size_t size)
{
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	1f 92       	push	r1
 53e:	1f 92       	push	r1
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	9a 83       	std	Y+2, r25	; 0x02
 546:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	9a 81       	ldd	r25, Y+2	; 0x02
 54c:	0e 94 b9 03 	call	0x772	; 0x772 <malloc>
}
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <__cmpsf2>:
 55a:	2f d0       	rcall	.+94     	; 0x5ba <__fp_cmp>
 55c:	08 f4       	brcc	.+2      	; 0x560 <__cmpsf2+0x6>
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	08 95       	ret

00000562 <__fixunssfsi>:
 562:	57 d0       	rcall	.+174    	; 0x612 <__fp_splitA>
 564:	88 f0       	brcs	.+34     	; 0x588 <__fixunssfsi+0x26>
 566:	9f 57       	subi	r25, 0x7F	; 127
 568:	90 f0       	brcs	.+36     	; 0x58e <__fixunssfsi+0x2c>
 56a:	b9 2f       	mov	r27, r25
 56c:	99 27       	eor	r25, r25
 56e:	b7 51       	subi	r27, 0x17	; 23
 570:	a0 f0       	brcs	.+40     	; 0x59a <__fixunssfsi+0x38>
 572:	d1 f0       	breq	.+52     	; 0x5a8 <__fixunssfsi+0x46>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	1a f0       	brmi	.+6      	; 0x584 <__fixunssfsi+0x22>
 57e:	ba 95       	dec	r27
 580:	c9 f7       	brne	.-14     	; 0x574 <__fixunssfsi+0x12>
 582:	12 c0       	rjmp	.+36     	; 0x5a8 <__fixunssfsi+0x46>
 584:	b1 30       	cpi	r27, 0x01	; 1
 586:	81 f0       	breq	.+32     	; 0x5a8 <__fixunssfsi+0x46>
 588:	5e d0       	rcall	.+188    	; 0x646 <__fp_zero>
 58a:	b1 e0       	ldi	r27, 0x01	; 1
 58c:	08 95       	ret
 58e:	5b c0       	rjmp	.+182    	; 0x646 <__fp_zero>
 590:	67 2f       	mov	r22, r23
 592:	78 2f       	mov	r23, r24
 594:	88 27       	eor	r24, r24
 596:	b8 5f       	subi	r27, 0xF8	; 248
 598:	39 f0       	breq	.+14     	; 0x5a8 <__fixunssfsi+0x46>
 59a:	b9 3f       	cpi	r27, 0xF9	; 249
 59c:	cc f3       	brlt	.-14     	; 0x590 <__fixunssfsi+0x2e>
 59e:	86 95       	lsr	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b3 95       	inc	r27
 5a6:	d9 f7       	brne	.-10     	; 0x59e <__fixunssfsi+0x3c>
 5a8:	3e f4       	brtc	.+14     	; 0x5b8 <__fixunssfsi+0x56>
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__fp_cmp>:
 5ba:	99 0f       	add	r25, r25
 5bc:	00 08       	sbc	r0, r0
 5be:	55 0f       	add	r21, r21
 5c0:	aa 0b       	sbc	r26, r26
 5c2:	e0 e8       	ldi	r30, 0x80	; 128
 5c4:	fe ef       	ldi	r31, 0xFE	; 254
 5c6:	16 16       	cp	r1, r22
 5c8:	17 06       	cpc	r1, r23
 5ca:	e8 07       	cpc	r30, r24
 5cc:	f9 07       	cpc	r31, r25
 5ce:	c0 f0       	brcs	.+48     	; 0x600 <__fp_cmp+0x46>
 5d0:	12 16       	cp	r1, r18
 5d2:	13 06       	cpc	r1, r19
 5d4:	e4 07       	cpc	r30, r20
 5d6:	f5 07       	cpc	r31, r21
 5d8:	98 f0       	brcs	.+38     	; 0x600 <__fp_cmp+0x46>
 5da:	62 1b       	sub	r22, r18
 5dc:	73 0b       	sbc	r23, r19
 5de:	84 0b       	sbc	r24, r20
 5e0:	95 0b       	sbc	r25, r21
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <__fp_cmp+0x38>
 5e4:	0a 26       	eor	r0, r26
 5e6:	61 f0       	breq	.+24     	; 0x600 <__fp_cmp+0x46>
 5e8:	23 2b       	or	r18, r19
 5ea:	24 2b       	or	r18, r20
 5ec:	25 2b       	or	r18, r21
 5ee:	21 f4       	brne	.+8      	; 0x5f8 <__fp_cmp+0x3e>
 5f0:	08 95       	ret
 5f2:	0a 26       	eor	r0, r26
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <__fp_cmp+0x3e>
 5f6:	a1 40       	sbci	r26, 0x01	; 1
 5f8:	a6 95       	lsr	r26
 5fa:	8f ef       	ldi	r24, 0xFF	; 255
 5fc:	81 1d       	adc	r24, r1
 5fe:	81 1d       	adc	r24, r1
 600:	08 95       	ret

00000602 <__fp_split3>:
 602:	57 fd       	sbrc	r21, 7
 604:	90 58       	subi	r25, 0x80	; 128
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	59 f0       	breq	.+22     	; 0x622 <__fp_splitA+0x10>
 60c:	5f 3f       	cpi	r21, 0xFF	; 255
 60e:	71 f0       	breq	.+28     	; 0x62c <__fp_splitA+0x1a>
 610:	47 95       	ror	r20

00000612 <__fp_splitA>:
 612:	88 0f       	add	r24, r24
 614:	97 fb       	bst	r25, 7
 616:	99 1f       	adc	r25, r25
 618:	61 f0       	breq	.+24     	; 0x632 <__fp_splitA+0x20>
 61a:	9f 3f       	cpi	r25, 0xFF	; 255
 61c:	79 f0       	breq	.+30     	; 0x63c <__fp_splitA+0x2a>
 61e:	87 95       	ror	r24
 620:	08 95       	ret
 622:	12 16       	cp	r1, r18
 624:	13 06       	cpc	r1, r19
 626:	14 06       	cpc	r1, r20
 628:	55 1f       	adc	r21, r21
 62a:	f2 cf       	rjmp	.-28     	; 0x610 <__fp_split3+0xe>
 62c:	46 95       	lsr	r20
 62e:	f1 df       	rcall	.-30     	; 0x612 <__fp_splitA>
 630:	08 c0       	rjmp	.+16     	; 0x642 <__fp_splitA+0x30>
 632:	16 16       	cp	r1, r22
 634:	17 06       	cpc	r1, r23
 636:	18 06       	cpc	r1, r24
 638:	99 1f       	adc	r25, r25
 63a:	f1 cf       	rjmp	.-30     	; 0x61e <__fp_splitA+0xc>
 63c:	86 95       	lsr	r24
 63e:	71 05       	cpc	r23, r1
 640:	61 05       	cpc	r22, r1
 642:	08 94       	sec
 644:	08 95       	ret

00000646 <__fp_zero>:
 646:	e8 94       	clt

00000648 <__fp_szero>:
 648:	bb 27       	eor	r27, r27
 64a:	66 27       	eor	r22, r22
 64c:	77 27       	eor	r23, r23
 64e:	cb 01       	movw	r24, r22
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <__gesf2>:
 654:	b2 df       	rcall	.-156    	; 0x5ba <__fp_cmp>
 656:	08 f4       	brcc	.+2      	; 0x65a <__gesf2+0x6>
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	08 95       	ret

0000065c <__mulsf3>:
 65c:	0b d0       	rcall	.+22     	; 0x674 <__mulsf3x>
 65e:	78 c0       	rjmp	.+240    	; 0x750 <__fp_round>
 660:	69 d0       	rcall	.+210    	; 0x734 <__fp_pscA>
 662:	28 f0       	brcs	.+10     	; 0x66e <__mulsf3+0x12>
 664:	6e d0       	rcall	.+220    	; 0x742 <__fp_pscB>
 666:	18 f0       	brcs	.+6      	; 0x66e <__mulsf3+0x12>
 668:	95 23       	and	r25, r21
 66a:	09 f0       	breq	.+2      	; 0x66e <__mulsf3+0x12>
 66c:	5a c0       	rjmp	.+180    	; 0x722 <__fp_inf>
 66e:	5f c0       	rjmp	.+190    	; 0x72e <__fp_nan>
 670:	11 24       	eor	r1, r1
 672:	ea cf       	rjmp	.-44     	; 0x648 <__fp_szero>

00000674 <__mulsf3x>:
 674:	c6 df       	rcall	.-116    	; 0x602 <__fp_split3>
 676:	a0 f3       	brcs	.-24     	; 0x660 <__mulsf3+0x4>

00000678 <__mulsf3_pse>:
 678:	95 9f       	mul	r25, r21
 67a:	d1 f3       	breq	.-12     	; 0x670 <__mulsf3+0x14>
 67c:	95 0f       	add	r25, r21
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	55 1f       	adc	r21, r21
 682:	62 9f       	mul	r22, r18
 684:	f0 01       	movw	r30, r0
 686:	72 9f       	mul	r23, r18
 688:	bb 27       	eor	r27, r27
 68a:	f0 0d       	add	r31, r0
 68c:	b1 1d       	adc	r27, r1
 68e:	63 9f       	mul	r22, r19
 690:	aa 27       	eor	r26, r26
 692:	f0 0d       	add	r31, r0
 694:	b1 1d       	adc	r27, r1
 696:	aa 1f       	adc	r26, r26
 698:	64 9f       	mul	r22, r20
 69a:	66 27       	eor	r22, r22
 69c:	b0 0d       	add	r27, r0
 69e:	a1 1d       	adc	r26, r1
 6a0:	66 1f       	adc	r22, r22
 6a2:	82 9f       	mul	r24, r18
 6a4:	22 27       	eor	r18, r18
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	62 1f       	adc	r22, r18
 6ac:	73 9f       	mul	r23, r19
 6ae:	b0 0d       	add	r27, r0
 6b0:	a1 1d       	adc	r26, r1
 6b2:	62 1f       	adc	r22, r18
 6b4:	83 9f       	mul	r24, r19
 6b6:	a0 0d       	add	r26, r0
 6b8:	61 1d       	adc	r22, r1
 6ba:	22 1f       	adc	r18, r18
 6bc:	74 9f       	mul	r23, r20
 6be:	33 27       	eor	r19, r19
 6c0:	a0 0d       	add	r26, r0
 6c2:	61 1d       	adc	r22, r1
 6c4:	23 1f       	adc	r18, r19
 6c6:	84 9f       	mul	r24, r20
 6c8:	60 0d       	add	r22, r0
 6ca:	21 1d       	adc	r18, r1
 6cc:	82 2f       	mov	r24, r18
 6ce:	76 2f       	mov	r23, r22
 6d0:	6a 2f       	mov	r22, r26
 6d2:	11 24       	eor	r1, r1
 6d4:	9f 57       	subi	r25, 0x7F	; 127
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	8a f0       	brmi	.+34     	; 0x6fc <__mulsf3_pse+0x84>
 6da:	e1 f0       	breq	.+56     	; 0x714 <__mulsf3_pse+0x9c>
 6dc:	88 23       	and	r24, r24
 6de:	4a f0       	brmi	.+18     	; 0x6f2 <__mulsf3_pse+0x7a>
 6e0:	ee 0f       	add	r30, r30
 6e2:	ff 1f       	adc	r31, r31
 6e4:	bb 1f       	adc	r27, r27
 6e6:	66 1f       	adc	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	91 50       	subi	r25, 0x01	; 1
 6ee:	50 40       	sbci	r21, 0x00	; 0
 6f0:	a9 f7       	brne	.-22     	; 0x6dc <__mulsf3_pse+0x64>
 6f2:	9e 3f       	cpi	r25, 0xFE	; 254
 6f4:	51 05       	cpc	r21, r1
 6f6:	70 f0       	brcs	.+28     	; 0x714 <__mulsf3_pse+0x9c>
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <__fp_inf>
 6fa:	a6 cf       	rjmp	.-180    	; 0x648 <__fp_szero>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	ec f3       	brlt	.-6      	; 0x6fa <__mulsf3_pse+0x82>
 700:	98 3e       	cpi	r25, 0xE8	; 232
 702:	dc f3       	brlt	.-10     	; 0x6fa <__mulsf3_pse+0x82>
 704:	86 95       	lsr	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b7 95       	ror	r27
 70c:	f7 95       	ror	r31
 70e:	e7 95       	ror	r30
 710:	9f 5f       	subi	r25, 0xFF	; 255
 712:	c1 f7       	brne	.-16     	; 0x704 <__mulsf3_pse+0x8c>
 714:	fe 2b       	or	r31, r30
 716:	88 0f       	add	r24, r24
 718:	91 1d       	adc	r25, r1
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	97 f9       	bld	r25, 7
 720:	08 95       	ret

00000722 <__fp_inf>:
 722:	97 f9       	bld	r25, 7
 724:	9f 67       	ori	r25, 0x7F	; 127
 726:	80 e8       	ldi	r24, 0x80	; 128
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	08 95       	ret

0000072e <__fp_nan>:
 72e:	9f ef       	ldi	r25, 0xFF	; 255
 730:	80 ec       	ldi	r24, 0xC0	; 192
 732:	08 95       	ret

00000734 <__fp_pscA>:
 734:	00 24       	eor	r0, r0
 736:	0a 94       	dec	r0
 738:	16 16       	cp	r1, r22
 73a:	17 06       	cpc	r1, r23
 73c:	18 06       	cpc	r1, r24
 73e:	09 06       	cpc	r0, r25
 740:	08 95       	ret

00000742 <__fp_pscB>:
 742:	00 24       	eor	r0, r0
 744:	0a 94       	dec	r0
 746:	12 16       	cp	r1, r18
 748:	13 06       	cpc	r1, r19
 74a:	14 06       	cpc	r1, r20
 74c:	05 06       	cpc	r0, r21
 74e:	08 95       	ret

00000750 <__fp_round>:
 750:	09 2e       	mov	r0, r25
 752:	03 94       	inc	r0
 754:	00 0c       	add	r0, r0
 756:	11 f4       	brne	.+4      	; 0x75c <__fp_round+0xc>
 758:	88 23       	and	r24, r24
 75a:	52 f0       	brmi	.+20     	; 0x770 <__fp_round+0x20>
 75c:	bb 0f       	add	r27, r27
 75e:	40 f4       	brcc	.+16     	; 0x770 <__fp_round+0x20>
 760:	bf 2b       	or	r27, r31
 762:	11 f4       	brne	.+4      	; 0x768 <__fp_round+0x18>
 764:	60 ff       	sbrs	r22, 0
 766:	04 c0       	rjmp	.+8      	; 0x770 <__fp_round+0x20>
 768:	6f 5f       	subi	r22, 0xFF	; 255
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	08 95       	ret

00000772 <malloc>:
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	82 30       	cpi	r24, 0x02	; 2
 77c:	91 05       	cpc	r25, r1
 77e:	10 f4       	brcc	.+4      	; 0x784 <malloc+0x12>
 780:	82 e0       	ldi	r24, 0x02	; 2
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	e0 91 0a 02 	lds	r30, 0x020A
 788:	f0 91 0b 02 	lds	r31, 0x020B
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	c0 e0       	ldi	r28, 0x00	; 0
 792:	d0 e0       	ldi	r29, 0x00	; 0
 794:	23 c0       	rjmp	.+70     	; 0x7dc <malloc+0x6a>
 796:	40 81       	ld	r20, Z
 798:	51 81       	ldd	r21, Z+1	; 0x01
 79a:	48 17       	cp	r20, r24
 79c:	59 07       	cpc	r21, r25
 79e:	a8 f0       	brcs	.+42     	; 0x7ca <malloc+0x58>
 7a0:	48 17       	cp	r20, r24
 7a2:	59 07       	cpc	r21, r25
 7a4:	61 f4       	brne	.+24     	; 0x7be <malloc+0x4c>
 7a6:	82 81       	ldd	r24, Z+2	; 0x02
 7a8:	93 81       	ldd	r25, Z+3	; 0x03
 7aa:	20 97       	sbiw	r28, 0x00	; 0
 7ac:	19 f0       	breq	.+6      	; 0x7b4 <malloc+0x42>
 7ae:	9b 83       	std	Y+3, r25	; 0x03
 7b0:	8a 83       	std	Y+2, r24	; 0x02
 7b2:	2e c0       	rjmp	.+92     	; 0x810 <malloc+0x9e>
 7b4:	90 93 0b 02 	sts	0x020B, r25
 7b8:	80 93 0a 02 	sts	0x020A, r24
 7bc:	29 c0       	rjmp	.+82     	; 0x810 <malloc+0x9e>
 7be:	21 15       	cp	r18, r1
 7c0:	31 05       	cpc	r19, r1
 7c2:	29 f0       	breq	.+10     	; 0x7ce <malloc+0x5c>
 7c4:	42 17       	cp	r20, r18
 7c6:	53 07       	cpc	r21, r19
 7c8:	10 f0       	brcs	.+4      	; 0x7ce <malloc+0x5c>
 7ca:	a9 01       	movw	r20, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <malloc+0x60>
 7ce:	be 01       	movw	r22, r28
 7d0:	df 01       	movw	r26, r30
 7d2:	02 81       	ldd	r16, Z+2	; 0x02
 7d4:	13 81       	ldd	r17, Z+3	; 0x03
 7d6:	ef 01       	movw	r28, r30
 7d8:	9a 01       	movw	r18, r20
 7da:	f8 01       	movw	r30, r16
 7dc:	30 97       	sbiw	r30, 0x00	; 0
 7de:	d9 f6       	brne	.-74     	; 0x796 <malloc+0x24>
 7e0:	21 15       	cp	r18, r1
 7e2:	31 05       	cpc	r19, r1
 7e4:	09 f1       	breq	.+66     	; 0x828 <malloc+0xb6>
 7e6:	28 1b       	sub	r18, r24
 7e8:	39 0b       	sbc	r19, r25
 7ea:	24 30       	cpi	r18, 0x04	; 4
 7ec:	31 05       	cpc	r19, r1
 7ee:	90 f4       	brcc	.+36     	; 0x814 <malloc+0xa2>
 7f0:	12 96       	adiw	r26, 0x02	; 2
 7f2:	8d 91       	ld	r24, X+
 7f4:	9c 91       	ld	r25, X
 7f6:	13 97       	sbiw	r26, 0x03	; 3
 7f8:	61 15       	cp	r22, r1
 7fa:	71 05       	cpc	r23, r1
 7fc:	21 f0       	breq	.+8      	; 0x806 <malloc+0x94>
 7fe:	fb 01       	movw	r30, r22
 800:	93 83       	std	Z+3, r25	; 0x03
 802:	82 83       	std	Z+2, r24	; 0x02
 804:	04 c0       	rjmp	.+8      	; 0x80e <malloc+0x9c>
 806:	90 93 0b 02 	sts	0x020B, r25
 80a:	80 93 0a 02 	sts	0x020A, r24
 80e:	fd 01       	movw	r30, r26
 810:	32 96       	adiw	r30, 0x02	; 2
 812:	44 c0       	rjmp	.+136    	; 0x89c <malloc+0x12a>
 814:	fd 01       	movw	r30, r26
 816:	e2 0f       	add	r30, r18
 818:	f3 1f       	adc	r31, r19
 81a:	81 93       	st	Z+, r24
 81c:	91 93       	st	Z+, r25
 81e:	22 50       	subi	r18, 0x02	; 2
 820:	31 09       	sbc	r19, r1
 822:	2d 93       	st	X+, r18
 824:	3c 93       	st	X, r19
 826:	3a c0       	rjmp	.+116    	; 0x89c <malloc+0x12a>
 828:	20 91 08 02 	lds	r18, 0x0208
 82c:	30 91 09 02 	lds	r19, 0x0209
 830:	23 2b       	or	r18, r19
 832:	41 f4       	brne	.+16     	; 0x844 <malloc+0xd2>
 834:	20 91 02 02 	lds	r18, 0x0202
 838:	30 91 03 02 	lds	r19, 0x0203
 83c:	30 93 09 02 	sts	0x0209, r19
 840:	20 93 08 02 	sts	0x0208, r18
 844:	20 91 00 02 	lds	r18, 0x0200
 848:	30 91 01 02 	lds	r19, 0x0201
 84c:	21 15       	cp	r18, r1
 84e:	31 05       	cpc	r19, r1
 850:	41 f4       	brne	.+16     	; 0x862 <malloc+0xf0>
 852:	2d b7       	in	r18, 0x3d	; 61
 854:	3e b7       	in	r19, 0x3e	; 62
 856:	40 91 04 02 	lds	r20, 0x0204
 85a:	50 91 05 02 	lds	r21, 0x0205
 85e:	24 1b       	sub	r18, r20
 860:	35 0b       	sbc	r19, r21
 862:	e0 91 08 02 	lds	r30, 0x0208
 866:	f0 91 09 02 	lds	r31, 0x0209
 86a:	e2 17       	cp	r30, r18
 86c:	f3 07       	cpc	r31, r19
 86e:	a0 f4       	brcc	.+40     	; 0x898 <malloc+0x126>
 870:	2e 1b       	sub	r18, r30
 872:	3f 0b       	sbc	r19, r31
 874:	28 17       	cp	r18, r24
 876:	39 07       	cpc	r19, r25
 878:	78 f0       	brcs	.+30     	; 0x898 <malloc+0x126>
 87a:	ac 01       	movw	r20, r24
 87c:	4e 5f       	subi	r20, 0xFE	; 254
 87e:	5f 4f       	sbci	r21, 0xFF	; 255
 880:	24 17       	cp	r18, r20
 882:	35 07       	cpc	r19, r21
 884:	48 f0       	brcs	.+18     	; 0x898 <malloc+0x126>
 886:	4e 0f       	add	r20, r30
 888:	5f 1f       	adc	r21, r31
 88a:	50 93 09 02 	sts	0x0209, r21
 88e:	40 93 08 02 	sts	0x0208, r20
 892:	81 93       	st	Z+, r24
 894:	91 93       	st	Z+, r25
 896:	02 c0       	rjmp	.+4      	; 0x89c <malloc+0x12a>
 898:	e0 e0       	ldi	r30, 0x00	; 0
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	cf 01       	movw	r24, r30
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	08 95       	ret

000008a8 <free>:
 8a8:	ef 92       	push	r14
 8aa:	ff 92       	push	r15
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	00 97       	sbiw	r24, 0x00	; 0
 8b6:	09 f4       	brne	.+2      	; 0x8ba <free+0x12>
 8b8:	8f c0       	rjmp	.+286    	; 0x9d8 <free+0x130>
 8ba:	dc 01       	movw	r26, r24
 8bc:	12 97       	sbiw	r26, 0x02	; 2
 8be:	13 96       	adiw	r26, 0x03	; 3
 8c0:	1c 92       	st	X, r1
 8c2:	1e 92       	st	-X, r1
 8c4:	12 97       	sbiw	r26, 0x02	; 2
 8c6:	e0 90 0a 02 	lds	r14, 0x020A
 8ca:	f0 90 0b 02 	lds	r15, 0x020B
 8ce:	e1 14       	cp	r14, r1
 8d0:	f1 04       	cpc	r15, r1
 8d2:	89 f4       	brne	.+34     	; 0x8f6 <free+0x4e>
 8d4:	2d 91       	ld	r18, X+
 8d6:	3c 91       	ld	r19, X
 8d8:	11 97       	sbiw	r26, 0x01	; 1
 8da:	28 0f       	add	r18, r24
 8dc:	39 1f       	adc	r19, r25
 8de:	80 91 08 02 	lds	r24, 0x0208
 8e2:	90 91 09 02 	lds	r25, 0x0209
 8e6:	82 17       	cp	r24, r18
 8e8:	93 07       	cpc	r25, r19
 8ea:	89 f5       	brne	.+98     	; 0x94e <free+0xa6>
 8ec:	b0 93 09 02 	sts	0x0209, r27
 8f0:	a0 93 08 02 	sts	0x0208, r26
 8f4:	71 c0       	rjmp	.+226    	; 0x9d8 <free+0x130>
 8f6:	e7 01       	movw	r28, r14
 8f8:	20 e0       	ldi	r18, 0x00	; 0
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <free+0x58>
 8fe:	ea 01       	movw	r28, r20
 900:	ca 17       	cp	r28, r26
 902:	db 07       	cpc	r29, r27
 904:	38 f4       	brcc	.+14     	; 0x914 <free+0x6c>
 906:	4a 81       	ldd	r20, Y+2	; 0x02
 908:	5b 81       	ldd	r21, Y+3	; 0x03
 90a:	9e 01       	movw	r18, r28
 90c:	41 15       	cp	r20, r1
 90e:	51 05       	cpc	r21, r1
 910:	b1 f7       	brne	.-20     	; 0x8fe <free+0x56>
 912:	22 c0       	rjmp	.+68     	; 0x958 <free+0xb0>
 914:	bc 01       	movw	r22, r24
 916:	62 50       	subi	r22, 0x02	; 2
 918:	71 09       	sbc	r23, r1
 91a:	fb 01       	movw	r30, r22
 91c:	d3 83       	std	Z+3, r29	; 0x03
 91e:	c2 83       	std	Z+2, r28	; 0x02
 920:	00 81       	ld	r16, Z
 922:	11 81       	ldd	r17, Z+1	; 0x01
 924:	ac 01       	movw	r20, r24
 926:	40 0f       	add	r20, r16
 928:	51 1f       	adc	r21, r17
 92a:	4c 17       	cp	r20, r28
 92c:	5d 07       	cpc	r21, r29
 92e:	61 f4       	brne	.+24     	; 0x948 <free+0xa0>
 930:	48 81       	ld	r20, Y
 932:	59 81       	ldd	r21, Y+1	; 0x01
 934:	40 0f       	add	r20, r16
 936:	51 1f       	adc	r21, r17
 938:	4e 5f       	subi	r20, 0xFE	; 254
 93a:	5f 4f       	sbci	r21, 0xFF	; 255
 93c:	51 83       	std	Z+1, r21	; 0x01
 93e:	40 83       	st	Z, r20
 940:	4a 81       	ldd	r20, Y+2	; 0x02
 942:	5b 81       	ldd	r21, Y+3	; 0x03
 944:	53 83       	std	Z+3, r21	; 0x03
 946:	42 83       	std	Z+2, r20	; 0x02
 948:	21 15       	cp	r18, r1
 94a:	31 05       	cpc	r19, r1
 94c:	29 f4       	brne	.+10     	; 0x958 <free+0xb0>
 94e:	b0 93 0b 02 	sts	0x020B, r27
 952:	a0 93 0a 02 	sts	0x020A, r26
 956:	40 c0       	rjmp	.+128    	; 0x9d8 <free+0x130>
 958:	f9 01       	movw	r30, r18
 95a:	b3 83       	std	Z+3, r27	; 0x03
 95c:	a2 83       	std	Z+2, r26	; 0x02
 95e:	e9 01       	movw	r28, r18
 960:	69 91       	ld	r22, Y+
 962:	79 91       	ld	r23, Y+
 964:	c6 0f       	add	r28, r22
 966:	d7 1f       	adc	r29, r23
 968:	ac 17       	cp	r26, r28
 96a:	bd 07       	cpc	r27, r29
 96c:	79 f4       	brne	.+30     	; 0x98c <free+0xe4>
 96e:	dc 01       	movw	r26, r24
 970:	5e 91       	ld	r21, -X
 972:	4e 91       	ld	r20, -X
 974:	46 0f       	add	r20, r22
 976:	57 1f       	adc	r21, r23
 978:	4e 5f       	subi	r20, 0xFE	; 254
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	51 83       	std	Z+1, r21	; 0x01
 97e:	40 83       	st	Z, r20
 980:	12 96       	adiw	r26, 0x02	; 2
 982:	8d 91       	ld	r24, X+
 984:	9c 91       	ld	r25, X
 986:	13 97       	sbiw	r26, 0x03	; 3
 988:	93 83       	std	Z+3, r25	; 0x03
 98a:	82 83       	std	Z+2, r24	; 0x02
 98c:	a0 e0       	ldi	r26, 0x00	; 0
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	02 c0       	rjmp	.+4      	; 0x996 <free+0xee>
 992:	d7 01       	movw	r26, r14
 994:	7c 01       	movw	r14, r24
 996:	f7 01       	movw	r30, r14
 998:	82 81       	ldd	r24, Z+2	; 0x02
 99a:	93 81       	ldd	r25, Z+3	; 0x03
 99c:	00 97       	sbiw	r24, 0x00	; 0
 99e:	c9 f7       	brne	.-14     	; 0x992 <free+0xea>
 9a0:	c7 01       	movw	r24, r14
 9a2:	02 96       	adiw	r24, 0x02	; 2
 9a4:	20 81       	ld	r18, Z
 9a6:	31 81       	ldd	r19, Z+1	; 0x01
 9a8:	82 0f       	add	r24, r18
 9aa:	93 1f       	adc	r25, r19
 9ac:	20 91 08 02 	lds	r18, 0x0208
 9b0:	30 91 09 02 	lds	r19, 0x0209
 9b4:	28 17       	cp	r18, r24
 9b6:	39 07       	cpc	r19, r25
 9b8:	79 f4       	brne	.+30     	; 0x9d8 <free+0x130>
 9ba:	10 97       	sbiw	r26, 0x00	; 0
 9bc:	29 f4       	brne	.+10     	; 0x9c8 <free+0x120>
 9be:	10 92 0b 02 	sts	0x020B, r1
 9c2:	10 92 0a 02 	sts	0x020A, r1
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <free+0x128>
 9c8:	13 96       	adiw	r26, 0x03	; 3
 9ca:	1c 92       	st	X, r1
 9cc:	1e 92       	st	-X, r1
 9ce:	12 97       	sbiw	r26, 0x02	; 2
 9d0:	f0 92 09 02 	sts	0x0209, r15
 9d4:	e0 92 08 02 	sts	0x0208, r14
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	ff 90       	pop	r15
 9e2:	ef 90       	pop	r14
 9e4:	08 95       	ret

000009e6 <_exit>:
 9e6:	f8 94       	cli

000009e8 <__stop_program>:
 9e8:	ff cf       	rjmp	.-2      	; 0x9e8 <__stop_program>
