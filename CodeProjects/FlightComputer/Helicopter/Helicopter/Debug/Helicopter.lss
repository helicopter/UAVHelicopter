
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  000047a2  00004836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800288  00800288  000048be  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  000048c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b77  00000000  00000000  00007254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007dcb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000868  00000000  00000000  00007dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009513  00000000  00000000  00008662  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002845  00000000  00000000  00011b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000224b  00000000  00000000  000143ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001dc4  00000000  00000000  00016608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003889  00000000  00000000  000183cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000043ff  00000000  00000000  0001bc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000710  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      68:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      6c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      7c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      80:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      84:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      88:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      90:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      94:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      98:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      ac:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	}
}
      b4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      bc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      cc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      dc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      e0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
      e8:	0c 94 16 1c 	jmp	0x382c	; 0x382c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
      ec:	0c 94 14 11 	jmp	0x2228	; 0x2228 <_ZN10helicopter8messages7Message12buildMessageEPh>
      f0:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <_ZN10helicopter5tasks12FlashLEDTask4initEv>
      f4:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
      f8:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <_ZN10helicopter5tasks4Task7runTaskEv>
      fc:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <_ZN10helicopter8messages11SyncMessageD1Ev>
     100:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
     104:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     108:	0c 94 89 11 	jmp	0x2312	; 0x2312 <_ZN10helicopter8messages11SyncMessageD0Ev>
     10c:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>
     110:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     114:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     118:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
     11c:	0c 94 9e 11 	jmp	0x233c	; 0x233c <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     120:	0c 94 1d 09 	jmp	0x123a	; 0x123a <_ZN10helicopter5tasks4TaskD0Ev>
     124:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
     128:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>
     12c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <_ZN10helicopter8messages7MessageD0Ev>
     130:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     134:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
     138:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     13c:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
     140:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <_ZN10helicopter7drivers11ServoDriverD1Ev>
     144:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>
     148:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>
     14c:	0c 94 9f 14 	jmp	0x293e	; 0x293e <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     150:	0c 94 05 11 	jmp	0x220a	; 0x220a <_ZN10helicopter8messages7Message8getBytesEv>
     154:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <_ZN10helicopter5tasks4Task4initEv>
     158:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     15c:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>
     160:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
     164:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <_ZN10helicopter8messages7MessageD1Ev>
     168:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
     16c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <_ZN10helicopter7drivers11ServoDriverD0Ev>
     170:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>
     174:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     178:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <_ZN10helicopter5tasks4Task11runTaskImplEv>

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	12 e0       	ldi	r17, 0x02	; 2
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e2 ea       	ldi	r30, 0xA2	; 162
     194:	f7 e4       	ldi	r31, 0x47	; 71
     196:	00 e0       	ldi	r16, 0x00	; 0
     198:	0b bf       	out	0x3b, r16	; 59
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x14>
     19c:	07 90       	elpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a8 38       	cpi	r26, 0x88	; 136
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x10>

000001a6 <__do_clear_bss>:
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	a8 e8       	ldi	r26, 0x88	; 136
     1aa:	b2 e0       	ldi	r27, 0x02	; 2
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	ae 38       	cpi	r26, 0x8E	; 142
     1b2:	b2 07       	cpc	r27, r18
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <main>
     1ba:	0c 94 cf 23 	jmp	0x479e	; 0x479e <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>:
	model->YawProportional((double) this->YawProportional / 100);
	model->YawDerivativeError((double) this->YawDerivativeError / 100);
	model->YawControl((double) this->YawControl / 100);
	model->Timeouts(this->Timeouts);
	model->UnrecognizedMsgTypes(this->UnrecognizedMsgTypes);
	model->ChecksumErrors(this->ChecksumErrors);
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	1f 92       	push	r1
     1c8:	1f 92       	push	r1
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	9a 83       	std	Y+2, r25	; 0x02
	model->BlownFrames(this->NumOfBlownFrames);
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	a2 81       	ldd	r26, Z+2	; 0x02
     1de:	b3 81       	ldd	r27, Z+3	; 0x03
     1e0:	bc 01       	movw	r22, r24
     1e2:	cd 01       	movw	r24, r26
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
}
     1ec:	08 95       	ret

000001ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	1f 92       	push	r1
     1f4:	1f 92       	push	r1
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
			double MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
     1fa:	9a 83       	std	Y+2, r25	; 0x02
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	fc 01       	movw	r30, r24
     204:	84 81       	ldd	r24, Z+4	; 0x04
     206:	95 81       	ldd	r25, Z+5	; 0x05
     208:	a6 81       	ldd	r26, Z+6	; 0x06
     20a:	b7 81       	ldd	r27, Z+7	; 0x07
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <_ZNK10helicopter5model11SystemModel10YawControlEv>:
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
				
				
			double YawControl() const {return yawControl;}
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	1f 92       	push	r1
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	fc 01       	movw	r30, r24
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	91 85       	ldd	r25, Z+9	; 0x09
     234:	a2 85       	ldd	r26, Z+10	; 0x0a
     236:	b3 85       	ldd	r27, Z+11	; 0x0b
     238:	bc 01       	movw	r22, r24
     23a:	cd 01       	movw	r24, r26
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <_ZN10helicopter5model11SystemModel10YawControlEd>:
			void YawControl(double val) { yawControl = val;}
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <_ZN10helicopter5model11SystemModel10YawControlEd+0x6>
     24c:	00 d0       	rcall	.+0      	; 0x24e <_ZN10helicopter5model11SystemModel10YawControlEd+0x8>
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	9a 83       	std	Y+2, r25	; 0x02
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	4b 83       	std	Y+3, r20	; 0x03
     258:	5c 83       	std	Y+4, r21	; 0x04
     25a:	6d 83       	std	Y+5, r22	; 0x05
     25c:	7e 83       	std	Y+6, r23	; 0x06
     25e:	29 81       	ldd	r18, Y+1	; 0x01
     260:	3a 81       	ldd	r19, Y+2	; 0x02
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	9c 81       	ldd	r25, Y+4	; 0x04
     266:	ad 81       	ldd	r26, Y+5	; 0x05
     268:	be 81       	ldd	r27, Y+6	; 0x06
     26a:	f9 01       	movw	r30, r18
     26c:	80 87       	std	Z+8, r24	; 0x08
     26e:	91 87       	std	Z+9, r25	; 0x09
     270:	a2 87       	std	Z+10, r26	; 0x0a
     272:	b3 87       	std	Z+11, r27	; 0x0b
     274:	26 96       	adiw	r28, 0x06	; 6
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	1f 92       	push	r1
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	84 85       	ldd	r24, Z+12	; 0x0c
     29e:	95 85       	ldd	r25, Z+13	; 0x0d
     2a0:	a6 85       	ldd	r26, Z+14	; 0x0e
     2a2:	b7 85       	ldd	r27, Z+15	; 0x0f
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>:
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x6>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x8>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	9a 83       	std	Y+2, r25	; 0x02
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	4b 83       	std	Y+3, r20	; 0x03
     2c4:	5c 83       	std	Y+4, r21	; 0x04
     2c6:	6d 83       	std	Y+5, r22	; 0x05
     2c8:	7e 83       	std	Y+6, r23	; 0x06
     2ca:	29 81       	ldd	r18, Y+1	; 0x01
     2cc:	3a 81       	ldd	r19, Y+2	; 0x02
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	ad 81       	ldd	r26, Y+5	; 0x05
     2d4:	be 81       	ldd	r27, Y+6	; 0x06
     2d6:	f9 01       	movw	r30, r18
     2d8:	84 87       	std	Z+12, r24	; 0x0c
     2da:	95 87       	std	Z+13, r25	; 0x0d
     2dc:	a6 87       	std	Z+14, r26	; 0x0e
     2de:	b7 87       	std	Z+15, r27	; 0x0f
     2e0:	26 96       	adiw	r28, 0x06	; 6
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	1f 92       	push	r1
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	fc 01       	movw	r30, r24
     308:	80 89       	ldd	r24, Z+16	; 0x10
     30a:	91 89       	ldd	r25, Z+17	; 0x11
     30c:	a2 89       	ldd	r26, Z+18	; 0x12
     30e:	b3 89       	ldd	r27, Z+19	; 0x13
     310:	bc 01       	movw	r22, r24
     312:	cd 01       	movw	r24, r26
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>:
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	1f 92       	push	r1
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	fc 01       	movw	r30, r24
     334:	84 89       	ldd	r24, Z+20	; 0x14
     336:	95 89       	ldd	r25, Z+21	; 0x15
     338:	a6 89       	ldd	r26, Z+22	; 0x16
     33a:	b7 89       	ldd	r27, Z+23	; 0x17
     33c:	bc 01       	movw	r22, r24
     33e:	cd 01       	movw	r24, r26
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	1f 92       	push	r1
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	fc 01       	movw	r30, r24
     360:	80 8d       	ldd	r24, Z+24	; 0x18
     362:	91 8d       	ldd	r25, Z+25	; 0x19
     364:	a2 8d       	ldd	r26, Z+26	; 0x1a
     366:	b3 8d       	ldd	r27, Z+27	; 0x1b
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <_ZN10helicopter5model11SystemModel11YawIntegralEd>:
			void YawIntegral(double val) { yawIntegral = val;}
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	4b 83       	std	Y+3, r20	; 0x03
     388:	5c 83       	std	Y+4, r21	; 0x04
     38a:	6d 83       	std	Y+5, r22	; 0x05
     38c:	7e 83       	std	Y+6, r23	; 0x06
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	3a 81       	ldd	r19, Y+2	; 0x02
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	ad 81       	ldd	r26, Y+5	; 0x05
     398:	be 81       	ldd	r27, Y+6	; 0x06
     39a:	f9 01       	movw	r30, r18
     39c:	80 8f       	std	Z+24, r24	; 0x18
     39e:	91 8f       	std	Z+25, r25	; 0x19
     3a0:	a2 8f       	std	Z+26, r26	; 0x1a
     3a2:	b3 8f       	std	Z+27, r27	; 0x1b
     3a4:	26 96       	adiw	r28, 0x06	; 6
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <_ZN10helicopter5model11SystemModel15YawProportionalEd>:

			double YawProportional() const {return yawProportional;}
			void YawProportional(double val) { yawProportional = val;}
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x6>
     3bc:	00 d0       	rcall	.+0      	; 0x3be <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x8>
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	4b 83       	std	Y+3, r20	; 0x03
     3c8:	5c 83       	std	Y+4, r21	; 0x04
     3ca:	6d 83       	std	Y+5, r22	; 0x05
     3cc:	7e 83       	std	Y+6, r23	; 0x06
     3ce:	29 81       	ldd	r18, Y+1	; 0x01
     3d0:	3a 81       	ldd	r19, Y+2	; 0x02
     3d2:	8b 81       	ldd	r24, Y+3	; 0x03
     3d4:	9c 81       	ldd	r25, Y+4	; 0x04
     3d6:	ad 81       	ldd	r26, Y+5	; 0x05
     3d8:	be 81       	ldd	r27, Y+6	; 0x06
     3da:	f9 01       	movw	r30, r18
     3dc:	84 8f       	std	Z+28, r24	; 0x1c
     3de:	95 8f       	std	Z+29, r25	; 0x1d
     3e0:	a6 8f       	std	Z+30, r26	; 0x1e
     3e2:	b7 8f       	std	Z+31, r27	; 0x1f
     3e4:	26 96       	adiw	r28, 0x06	; 6
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>:

			double YawDerivativeError() const {return yawDerivativeError;}
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x6>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x8>
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
     406:	4b 83       	std	Y+3, r20	; 0x03
     408:	5c 83       	std	Y+4, r21	; 0x04
     40a:	6d 83       	std	Y+5, r22	; 0x05
     40c:	7e 83       	std	Y+6, r23	; 0x06
     40e:	29 81       	ldd	r18, Y+1	; 0x01
     410:	3a 81       	ldd	r19, Y+2	; 0x02
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	ad 81       	ldd	r26, Y+5	; 0x05
     418:	be 81       	ldd	r27, Y+6	; 0x06
     41a:	f9 01       	movw	r30, r18
     41c:	80 a3       	std	Z+32, r24	; 0x20
     41e:	91 a3       	std	Z+33, r25	; 0x21
     420:	a2 a3       	std	Z+34, r26	; 0x22
     422:	b3 a3       	std	Z+35, r27	; 0x23
     424:	26 96       	adiw	r28, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <_ZNK10helicopter5model11SystemModel11BlownFramesEv>:
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
			
			long ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(long val) { checksumErrors = val; }
			
			long  BlownFrames() const {return numOfFramesBlown;}
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	1f 92       	push	r1
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	9a 83       	std	Y+2, r25	; 0x02
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	fc 01       	movw	r30, r24
     44c:	80 a9       	ldd	r24, Z+48	; 0x30
     44e:	91 a9       	ldd	r25, Z+49	; 0x31
     450:	a2 a9       	ldd	r26, Z+50	; 0x32
     452:	b3 a9       	ldd	r27, Z+51	; 0x33
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <_ZN10helicopter5model11SystemModel11BlownFramesEl>:
			void BlownFrames( long val ) { numOfFramesBlown = val;}
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <_ZN10helicopter5model11SystemModel11BlownFramesEl+0x6>
     468:	00 d0       	rcall	.+0      	; 0x46a <_ZN10helicopter5model11SystemModel11BlownFramesEl+0x8>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	9a 83       	std	Y+2, r25	; 0x02
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	4b 83       	std	Y+3, r20	; 0x03
     474:	5c 83       	std	Y+4, r21	; 0x04
     476:	6d 83       	std	Y+5, r22	; 0x05
     478:	7e 83       	std	Y+6, r23	; 0x06
     47a:	29 81       	ldd	r18, Y+1	; 0x01
     47c:	3a 81       	ldd	r19, Y+2	; 0x02
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	ad 81       	ldd	r26, Y+5	; 0x05
     484:	be 81       	ldd	r27, Y+6	; 0x06
     486:	f9 01       	movw	r30, r18
     488:	80 ab       	std	Z+48, r24	; 0x30
     48a:	91 ab       	std	Z+49, r25	; 0x31
     48c:	a2 ab       	std	Z+50, r26	; 0x32
     48e:	b3 ab       	std	Z+51, r27	; 0x33
     490:	26 96       	adiw	r28, 0x06	; 6
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>:

#include "PIDController.h"

using namespace helicopter::controller;

PIDController::PIDController(SystemModel *model, ServoDriver *servoDriver): 
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x6>
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x8>
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	7c 83       	std	Y+4, r23	; 0x04
     4b4:	6b 83       	std	Y+3, r22	; 0x03
     4b6:	5e 83       	std	Y+6, r21	; 0x06
     4b8:	4d 83       	std	Y+5, r20	; 0x05
minYawServoControlValue(0),
maxYawServoControlValue(0),
yawServoTrim(0),
intervalPeriodSecs(0),
controlMaxValue(0),
controlMinValue(0)
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
     4be:	2b 81       	ldd	r18, Y+3	; 0x03
     4c0:	3c 81       	ldd	r19, Y+4	; 0x04
     4c2:	fc 01       	movw	r30, r24
     4c4:	31 83       	std	Z+1, r19	; 0x01
     4c6:	20 83       	st	Z, r18
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	2d 81       	ldd	r18, Y+5	; 0x05
     4ce:	3e 81       	ldd	r19, Y+6	; 0x06
     4d0:	fc 01       	movw	r30, r24
     4d2:	33 83       	std	Z+3, r19	; 0x03
     4d4:	22 83       	std	Z+2, r18	; 0x02
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	fc 01       	movw	r30, r24
     4dc:	14 82       	std	Z+4, r1	; 0x04
     4de:	15 82       	std	Z+5, r1	; 0x05
     4e0:	16 82       	std	Z+6, r1	; 0x06
     4e2:	17 82       	std	Z+7, r1	; 0x07
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	fc 01       	movw	r30, r24
     4ea:	10 86       	std	Z+8, r1	; 0x08
     4ec:	11 86       	std	Z+9, r1	; 0x09
     4ee:	12 86       	std	Z+10, r1	; 0x0a
     4f0:	13 86       	std	Z+11, r1	; 0x0b
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	fc 01       	movw	r30, r24
     4f8:	14 86       	std	Z+12, r1	; 0x0c
     4fa:	15 86       	std	Z+13, r1	; 0x0d
     4fc:	16 86       	std	Z+14, r1	; 0x0e
     4fe:	17 86       	std	Z+15, r1	; 0x0f
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	fc 01       	movw	r30, r24
     506:	10 8a       	std	Z+16, r1	; 0x10
     508:	11 8a       	std	Z+17, r1	; 0x11
     50a:	12 8a       	std	Z+18, r1	; 0x12
     50c:	13 8a       	std	Z+19, r1	; 0x13
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	14 8a       	std	Z+20, r1	; 0x14
     516:	15 8a       	std	Z+21, r1	; 0x15
     518:	16 8a       	std	Z+22, r1	; 0x16
     51a:	17 8a       	std	Z+23, r1	; 0x17
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	fc 01       	movw	r30, r24
     522:	10 8e       	std	Z+24, r1	; 0x18
     524:	11 8e       	std	Z+25, r1	; 0x19
     526:	12 8e       	std	Z+26, r1	; 0x1a
     528:	13 8e       	std	Z+27, r1	; 0x1b
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	fc 01       	movw	r30, r24
     530:	14 8e       	std	Z+28, r1	; 0x1c
     532:	15 8e       	std	Z+29, r1	; 0x1d
     534:	16 8e       	std	Z+30, r1	; 0x1e
     536:	17 8e       	std	Z+31, r1	; 0x1f
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	10 a2       	std	Z+32, r1	; 0x20
     540:	11 a2       	std	Z+33, r1	; 0x21
     542:	12 a2       	std	Z+34, r1	; 0x22
     544:	13 a2       	std	Z+35, r1	; 0x23
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	fc 01       	movw	r30, r24
     54c:	14 a2       	std	Z+36, r1	; 0x24
     54e:	15 a2       	std	Z+37, r1	; 0x25
     550:	16 a2       	std	Z+38, r1	; 0x26
     552:	17 a2       	std	Z+39, r1	; 0x27
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	9a 81       	ldd	r25, Y+2	; 0x02
     558:	fc 01       	movw	r30, r24
     55a:	10 a6       	std	Z+40, r1	; 0x28
     55c:	11 a6       	std	Z+41, r1	; 0x29
     55e:	12 a6       	std	Z+42, r1	; 0x2a
     560:	13 a6       	std	Z+43, r1	; 0x2b
{
	
}
     562:	26 96       	adiw	r28, 0x06	; 6
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>:
	return currentValue - referenceValue;
}

//TODO refactor to make this common for all PID calculations
double PIDController::calculateYawProportional(double currentYawDegrees, double referenceYawDegrees)
{
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	2e 97       	sbiw	r28, 0x0e	; 14
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	9e 83       	std	Y+6, r25	; 0x06
     58e:	8d 83       	std	Y+5, r24	; 0x05
     590:	4f 83       	std	Y+7, r20	; 0x07
     592:	58 87       	std	Y+8, r21	; 0x08
     594:	69 87       	std	Y+9, r22	; 0x09
     596:	7a 87       	std	Y+10, r23	; 0x0a
     598:	0b 87       	std	Y+11, r16	; 0x0b
     59a:	1c 87       	std	Y+12, r17	; 0x0c
     59c:	2d 87       	std	Y+13, r18	; 0x0d
     59e:	3e 87       	std	Y+14, r19	; 0x0e
	double yawError = currentYawDegrees - referenceYawDegrees;
     5a0:	2b 85       	ldd	r18, Y+11	; 0x0b
     5a2:	3c 85       	ldd	r19, Y+12	; 0x0c
     5a4:	4d 85       	ldd	r20, Y+13	; 0x0d
     5a6:	5e 85       	ldd	r21, Y+14	; 0x0e
     5a8:	6f 81       	ldd	r22, Y+7	; 0x07
     5aa:	78 85       	ldd	r23, Y+8	; 0x08
     5ac:	89 85       	ldd	r24, Y+9	; 0x09
     5ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b0:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__subsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	89 83       	std	Y+1, r24	; 0x01
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	ab 83       	std	Y+3, r26	; 0x03
     5be:	bc 83       	std	Y+4, r27	; 0x04
	
	//Convert 360 degree magnetic heading error to a +/- 180 mag heading error
	
	if (yawError >= 180)
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	44 e3       	ldi	r20, 0x34	; 52
     5c6:	53 e4       	ldi	r21, 0x43	; 67
     5c8:	69 81       	ldd	r22, Y+1	; 0x01
     5ca:	7a 81       	ldd	r23, Y+2	; 0x02
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__gesf2>
     5d4:	88 23       	and	r24, r24
     5d6:	8c f0       	brlt	.+34     	; 0x5fa <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0x86>
	{
		yawError = yawError - 360;
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	44 eb       	ldi	r20, 0xB4	; 180
     5de:	53 e4       	ldi	r21, 0x43	; 67
     5e0:	69 81       	ldd	r22, Y+1	; 0x01
     5e2:	7a 81       	ldd	r23, Y+2	; 0x02
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__subsf3>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	ab 83       	std	Y+3, r26	; 0x03
     5f6:	bc 83       	std	Y+4, r27	; 0x04
     5f8:	1c c0       	rjmp	.+56     	; 0x632 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	}
	else if (yawError < -180)
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	44 e3       	ldi	r20, 0x34	; 52
     600:	53 ec       	ldi	r21, 0xC3	; 195
     602:	69 81       	ldd	r22, Y+1	; 0x01
     604:	7a 81       	ldd	r23, Y+2	; 0x02
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	0e 94 39 20 	call	0x4072	; 0x4072 <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	84 f4       	brge	.+32     	; 0x632 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	{
		yawError = yawError + 360;
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	44 eb       	ldi	r20, 0xB4	; 180
     618:	53 e4       	ldi	r21, 0x43	; 67
     61a:	69 81       	ldd	r22, Y+1	; 0x01
     61c:	7a 81       	ldd	r23, Y+2	; 0x02
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	9c 81       	ldd	r25, Y+4	; 0x04
     622:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <__addsf3>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	ab 83       	std	Y+3, r26	; 0x03
     630:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return yawError;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	ab 81       	ldd	r26, Y+3	; 0x03
     638:	bc 81       	ldd	r27, Y+4	; 0x04
}
     63a:	bc 01       	movw	r22, r24
     63c:	cd 01       	movw	r24, r26
     63e:	2e 96       	adiw	r28, 0x0e	; 14
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret

00000654 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEdd>:


//TODO refactor to make this common for all PID calculations. I'll want to include the specific
//variables max values as parameters so I can 'generalize' it.
double PIDController::calculateYawIntegralAntiWindup(double oldYawControlPreServoAdj, double oldYawControl)
{
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	2e 97       	sbiw	r28, 0x0e	; 14
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	9e 83       	std	Y+6, r25	; 0x06
     676:	8d 83       	std	Y+5, r24	; 0x05
     678:	4f 83       	std	Y+7, r20	; 0x07
     67a:	58 87       	std	Y+8, r21	; 0x08
     67c:	69 87       	std	Y+9, r22	; 0x09
     67e:	7a 87       	std	Y+10, r23	; 0x0a
     680:	0b 87       	std	Y+11, r16	; 0x0b
     682:	1c 87       	std	Y+12, r17	; 0x0c
     684:	2d 87       	std	Y+13, r18	; 0x0d
     686:	3e 87       	std	Y+14, r19	; 0x0e
	double antiWindup = 0;
     688:	19 82       	std	Y+1, r1	; 0x01
     68a:	1a 82       	std	Y+2, r1	; 0x02
     68c:	1b 82       	std	Y+3, r1	; 0x03
     68e:	1c 82       	std	Y+4, r1	; 0x04
	
	antiWindup = yawAntiWindupGain * (oldYawControlPreServoAdj - oldYawControl);
     690:	8d 81       	ldd	r24, Y+5	; 0x05
     692:	9e 81       	ldd	r25, Y+6	; 0x06
     694:	fc 01       	movw	r30, r24
     696:	c0 88       	ldd	r12, Z+16	; 0x10
     698:	d1 88       	ldd	r13, Z+17	; 0x11
     69a:	e2 88       	ldd	r14, Z+18	; 0x12
     69c:	f3 88       	ldd	r15, Z+19	; 0x13
     69e:	2b 85       	ldd	r18, Y+11	; 0x0b
     6a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6a2:	4d 85       	ldd	r20, Y+13	; 0x0d
     6a4:	5e 85       	ldd	r21, Y+14	; 0x0e
     6a6:	6f 81       	ldd	r22, Y+7	; 0x07
     6a8:	78 85       	ldd	r23, Y+8	; 0x08
     6aa:	89 85       	ldd	r24, Y+9	; 0x09
     6ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ae:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__subsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	9c 01       	movw	r18, r24
     6b8:	ad 01       	movw	r20, r26
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	89 83       	std	Y+1, r24	; 0x01
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	ab 83       	std	Y+3, r26	; 0x03
     6cc:	bc 83       	std	Y+4, r27	; 0x04
	{
		antiWindup = yawAntiWindupGain * (oldYawControlValue - minYawServoControlValue);
	}
	*/
	
	return antiWindup;
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	ab 81       	ldd	r26, Y+3	; 0x03
     6d4:	bc 81       	ldd	r27, Y+4	; 0x04
}
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	2e 96       	adiw	r28, 0x0e	; 14
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	08 95       	ret

000006f8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>:

/**
 * Anti-windup algorithm provided by Control Systems Design by Karl Johan Astrom 2002. chapter 6
 */
double PIDController::calculateYawIntegral(double yawProportionalDegrees, double oldYawIntegral, double yawAntiWindup)
{
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	62 97       	sbiw	r28, 0x12	; 18
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	8d 83       	std	Y+5, r24	; 0x05
     71c:	4f 83       	std	Y+7, r20	; 0x07
     71e:	58 87       	std	Y+8, r21	; 0x08
     720:	69 87       	std	Y+9, r22	; 0x09
     722:	7a 87       	std	Y+10, r23	; 0x0a
     724:	0b 87       	std	Y+11, r16	; 0x0b
     726:	1c 87       	std	Y+12, r17	; 0x0c
     728:	2d 87       	std	Y+13, r18	; 0x0d
     72a:	3e 87       	std	Y+14, r19	; 0x0e
     72c:	cf 86       	std	Y+15, r12	; 0x0f
     72e:	d8 8a       	std	Y+16, r13	; 0x10
     730:	e9 8a       	std	Y+17, r14	; 0x11
     732:	fa 8a       	std	Y+18, r15	; 0x12
	
	double workingIntegral = 0;
     734:	19 82       	std	Y+1, r1	; 0x01
     736:	1a 82       	std	Y+2, r1	; 0x02
     738:	1b 82       	std	Y+3, r1	; 0x03
     73a:	1c 82       	std	Y+4, r1	; 0x04
	
	workingIntegral = yawProportionalDegrees * intervalPeriodSecs * yawIntegralGain;
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	9e 81       	ldd	r25, Y+6	; 0x06
     740:	fc 01       	movw	r30, r24
     742:	80 a1       	ldd	r24, Z+32	; 0x20
     744:	91 a1       	ldd	r25, Z+33	; 0x21
     746:	a2 a1       	ldd	r26, Z+34	; 0x22
     748:	b3 a1       	ldd	r27, Z+35	; 0x23
     74a:	2f 81       	ldd	r18, Y+7	; 0x07
     74c:	38 85       	ldd	r19, Y+8	; 0x08
     74e:	49 85       	ldd	r20, Y+9	; 0x09
     750:	5a 85       	ldd	r21, Y+10	; 0x0a
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	2d 81       	ldd	r18, Y+5	; 0x05
     760:	3e 81       	ldd	r19, Y+6	; 0x06
     762:	f9 01       	movw	r30, r18
     764:	24 81       	ldd	r18, Z+4	; 0x04
     766:	35 81       	ldd	r19, Z+5	; 0x05
     768:	46 81       	ldd	r20, Z+6	; 0x06
     76a:	57 81       	ldd	r21, Z+7	; 0x07
     76c:	bc 01       	movw	r22, r24
     76e:	cd 01       	movw	r24, r26
     770:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	ab 83       	std	Y+3, r26	; 0x03
     77e:	bc 83       	std	Y+4, r27	; 0x04
	//Integrate (i.e. sum this working value with the current integral value).
	//Note: i'm going out of order from what is defined in the book referenced above.
	//I am summing before subtracting the antiwindup value to make it easier.
	//I also find it odd that the integral 'gain' is being applied before 
	//accounting for the anti-windup. But this could be to compensate for large errors.
	workingIntegral = workingIntegral + oldYawIntegral;
     780:	2b 85       	ldd	r18, Y+11	; 0x0b
     782:	3c 85       	ldd	r19, Y+12	; 0x0c
     784:	4d 85       	ldd	r20, Y+13	; 0x0d
     786:	5e 85       	ldd	r21, Y+14	; 0x0e
     788:	69 81       	ldd	r22, Y+1	; 0x01
     78a:	7a 81       	ldd	r23, Y+2	; 0x02
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <__addsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	ab 83       	std	Y+3, r26	; 0x03
     79e:	bc 83       	std	Y+4, r27	; 0x04
	
	if (yawAntiWindup != 0)
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	6f 85       	ldd	r22, Y+15	; 0x0f
     7a8:	78 89       	ldd	r23, Y+16	; 0x10
     7aa:	89 89       	ldd	r24, Y+17	; 0x11
     7ac:	9a 89       	ldd	r25, Y+18	; 0x12
     7ae:	0e 94 39 20 	call	0x4072	; 0x4072 <__cmpsf2>
     7b2:	88 23       	and	r24, r24
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xc0>
     7b6:	52 c0       	rjmp	.+164    	; 0x85c <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x164>
	{
		//We want to know if the integral is greater than 0 or less than 0 so that when we subtract
		//the antiwindup value, we get closer to 0, and don't exceed 0.
		if (workingIntegral > 0 && yawAntiWindup > workingIntegral)
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	a9 01       	movw	r20, r18
     7be:	69 81       	ldd	r22, Y+1	; 0x01
     7c0:	7a 81       	ldd	r23, Y+2	; 0x02
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	8c f4       	brge	.+34     	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xf8>
     7ce:	29 81       	ldd	r18, Y+1	; 0x01
     7d0:	3a 81       	ldd	r19, Y+2	; 0x02
     7d2:	4b 81       	ldd	r20, Y+3	; 0x03
     7d4:	5c 81       	ldd	r21, Y+4	; 0x04
     7d6:	6f 85       	ldd	r22, Y+15	; 0x0f
     7d8:	78 89       	ldd	r23, Y+16	; 0x10
     7da:	89 89       	ldd	r24, Y+17	; 0x11
     7dc:	9a 89       	ldd	r25, Y+18	; 0x12
     7de:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__gesf2>
     7e2:	18 16       	cp	r1, r24
     7e4:	2c f4       	brge	.+10     	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xf8>
		{
			workingIntegral = 0;
     7e6:	19 82       	std	Y+1, r1	; 0x01
     7e8:	1a 82       	std	Y+2, r1	; 0x02
     7ea:	1b 82       	std	Y+3, r1	; 0x03
     7ec:	1c 82       	std	Y+4, r1	; 0x04
     7ee:	1b c0       	rjmp	.+54     	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
		}else if (workingIntegral < 0 && yawAntiWindup < workingIntegral)
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	a9 01       	movw	r20, r18
     7f6:	69 81       	ldd	r22, Y+1	; 0x01
     7f8:	7a 81       	ldd	r23, Y+2	; 0x02
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	0e 94 39 20 	call	0x4072	; 0x4072 <__cmpsf2>
     802:	88 23       	and	r24, r24
     804:	84 f4       	brge	.+32     	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
     806:	29 81       	ldd	r18, Y+1	; 0x01
     808:	3a 81       	ldd	r19, Y+2	; 0x02
     80a:	4b 81       	ldd	r20, Y+3	; 0x03
     80c:	5c 81       	ldd	r21, Y+4	; 0x04
     80e:	6f 85       	ldd	r22, Y+15	; 0x0f
     810:	78 89       	ldd	r23, Y+16	; 0x10
     812:	89 89       	ldd	r24, Y+17	; 0x11
     814:	9a 89       	ldd	r25, Y+18	; 0x12
     816:	0e 94 39 20 	call	0x4072	; 0x4072 <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	24 f4       	brge	.+8      	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
		{
			workingIntegral = 0;
     81e:	19 82       	std	Y+1, r1	; 0x01
     820:	1a 82       	std	Y+2, r1	; 0x02
     822:	1b 82       	std	Y+3, r1	; 0x03
     824:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		if (workingIntegral != 0)
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	a9 01       	movw	r20, r18
     82c:	69 81       	ldd	r22, Y+1	; 0x01
     82e:	7a 81       	ldd	r23, Y+2	; 0x02
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	0e 94 39 20 	call	0x4072	; 0x4072 <__cmpsf2>
     838:	88 23       	and	r24, r24
     83a:	81 f0       	breq	.+32     	; 0x85c <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x164>
		{
				//Subtract the anti-windup value from the working integral. 
			workingIntegral = workingIntegral - yawAntiWindup;
     83c:	2f 85       	ldd	r18, Y+15	; 0x0f
     83e:	38 89       	ldd	r19, Y+16	; 0x10
     840:	49 89       	ldd	r20, Y+17	; 0x11
     842:	5a 89       	ldd	r21, Y+18	; 0x12
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__subsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	89 83       	std	Y+1, r24	; 0x01
     856:	9a 83       	std	Y+2, r25	; 0x02
     858:	ab 83       	std	Y+3, r26	; 0x03
     85a:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	
	return workingIntegral;
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	ab 81       	ldd	r26, Y+3	; 0x03
     862:	bc 81       	ldd	r27, Y+4	; 0x04
}
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	62 96       	adiw	r28, 0x12	; 18
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	08 95       	ret

00000886 <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>:
	//return integral;
//}


double PIDController::calculateYawVelocityError(double yawVelocityDegreesPerSecond, double referenceYawVelocityDegreesPerSecond)
{
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	2a 97       	sbiw	r28, 0x0a	; 10
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	4b 83       	std	Y+3, r20	; 0x03
     8a4:	5c 83       	std	Y+4, r21	; 0x04
     8a6:	6d 83       	std	Y+5, r22	; 0x05
     8a8:	7e 83       	std	Y+6, r23	; 0x06
     8aa:	0f 83       	std	Y+7, r16	; 0x07
     8ac:	18 87       	std	Y+8, r17	; 0x08
     8ae:	29 87       	std	Y+9, r18	; 0x09
     8b0:	3a 87       	std	Y+10, r19	; 0x0a
	return yawVelocityDegreesPerSecond - referenceYawVelocityDegreesPerSecond;
     8b2:	2f 81       	ldd	r18, Y+7	; 0x07
     8b4:	38 85       	ldd	r19, Y+8	; 0x08
     8b6:	49 85       	ldd	r20, Y+9	; 0x09
     8b8:	5a 85       	ldd	r21, Y+10	; 0x0a
     8ba:	6b 81       	ldd	r22, Y+3	; 0x03
     8bc:	7c 81       	ldd	r23, Y+4	; 0x04
     8be:	8d 81       	ldd	r24, Y+5	; 0x05
     8c0:	9e 81       	ldd	r25, Y+6	; 0x06
     8c2:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__subsf3>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
}
     8ca:	bc 01       	movw	r22, r24
     8cc:	cd 01       	movw	r24, r26
     8ce:	2a 96       	adiw	r28, 0x0a	; 10
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>:

double PIDController::calculateYawControlValue(double yawProportionalDegrees, double yawVelocityErrorDegreesPerSecond, double yawIntegral)
{
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	62 97       	sbiw	r28, 0x12	; 18
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	9e 83       	std	Y+6, r25	; 0x06
     906:	8d 83       	std	Y+5, r24	; 0x05
     908:	4f 83       	std	Y+7, r20	; 0x07
     90a:	58 87       	std	Y+8, r21	; 0x08
     90c:	69 87       	std	Y+9, r22	; 0x09
     90e:	7a 87       	std	Y+10, r23	; 0x0a
     910:	0b 87       	std	Y+11, r16	; 0x0b
     912:	1c 87       	std	Y+12, r17	; 0x0c
     914:	2d 87       	std	Y+13, r18	; 0x0d
     916:	3e 87       	std	Y+14, r19	; 0x0e
     918:	cf 86       	std	Y+15, r12	; 0x0f
     91a:	d8 8a       	std	Y+16, r13	; 0x10
     91c:	e9 8a       	std	Y+17, r14	; 0x11
     91e:	fa 8a       	std	Y+18, r15	; 0x12
	double controlValue = 0;
     920:	19 82       	std	Y+1, r1	; 0x01
     922:	1a 82       	std	Y+2, r1	; 0x02
     924:	1b 82       	std	Y+3, r1	; 0x03
     926:	1c 82       	std	Y+4, r1	; 0x04
	
	controlValue = yawIntegral  + yawProportionalDegrees * yawProportionalGain + yawVelocityErrorDegreesPerSecond * yawDerivativeGain;
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	9e 81       	ldd	r25, Y+6	; 0x06
     92c:	fc 01       	movw	r30, r24
     92e:	84 85       	ldd	r24, Z+12	; 0x0c
     930:	95 85       	ldd	r25, Z+13	; 0x0d
     932:	a6 85       	ldd	r26, Z+14	; 0x0e
     934:	b7 85       	ldd	r27, Z+15	; 0x0f
     936:	2f 81       	ldd	r18, Y+7	; 0x07
     938:	38 85       	ldd	r19, Y+8	; 0x08
     93a:	49 85       	ldd	r20, Y+9	; 0x09
     93c:	5a 85       	ldd	r21, Y+10	; 0x0a
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	2f 85       	ldd	r18, Y+15	; 0x0f
     94c:	38 89       	ldd	r19, Y+16	; 0x10
     94e:	49 89       	ldd	r20, Y+17	; 0x11
     950:	5a 89       	ldd	r21, Y+18	; 0x12
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <__addsf3>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	6c 01       	movw	r12, r24
     960:	7d 01       	movw	r14, r26
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	9e 81       	ldd	r25, Y+6	; 0x06
     966:	fc 01       	movw	r30, r24
     968:	80 85       	ldd	r24, Z+8	; 0x08
     96a:	91 85       	ldd	r25, Z+9	; 0x09
     96c:	a2 85       	ldd	r26, Z+10	; 0x0a
     96e:	b3 85       	ldd	r27, Z+11	; 0x0b
     970:	2b 85       	ldd	r18, Y+11	; 0x0b
     972:	3c 85       	ldd	r19, Y+12	; 0x0c
     974:	4d 85       	ldd	r20, Y+13	; 0x0d
     976:	5e 85       	ldd	r21, Y+14	; 0x0e
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	9c 01       	movw	r18, r24
     986:	ad 01       	movw	r20, r26
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <__addsf3>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	9a 83       	std	Y+2, r25	; 0x02
     998:	ab 83       	std	Y+3, r26	; 0x03
     99a:	bc 83       	std	Y+4, r27	; 0x04
	{
		controlValue = controlMinValue;
	}
	*/
	
	return controlValue;
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	ab 81       	ldd	r26, Y+3	; 0x03
     9a2:	bc 81       	ldd	r27, Y+4	; 0x04
}
     9a4:	bc 01       	movw	r22, r24
     9a6:	cd 01       	movw	r24, r26
     9a8:	62 96       	adiw	r28, 0x12	; 18
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	08 95       	ret

000009c6 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>:


double PIDController::adjustControlForServoLimits( double controlValueToAdjust )
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	2a 97       	sbiw	r28, 0x0a	; 10
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	9e 83       	std	Y+6, r25	; 0x06
     9dc:	8d 83       	std	Y+5, r24	; 0x05
     9de:	4f 83       	std	Y+7, r20	; 0x07
     9e0:	58 87       	std	Y+8, r21	; 0x08
     9e2:	69 87       	std	Y+9, r22	; 0x09
     9e4:	7a 87       	std	Y+10, r23	; 0x0a
	double controlValue = controlValueToAdjust;
     9e6:	8f 81       	ldd	r24, Y+7	; 0x07
     9e8:	98 85       	ldd	r25, Y+8	; 0x08
     9ea:	a9 85       	ldd	r26, Y+9	; 0x09
     9ec:	ba 85       	ldd	r27, Y+10	; 0x0a
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	ab 83       	std	Y+3, r26	; 0x03
     9f4:	bc 83       	std	Y+4, r27	; 0x04
	
	//TODO: when generalizing ensure to change this value. 
	controlValue += yawServoTrim;
     9f6:	8d 81       	ldd	r24, Y+5	; 0x05
     9f8:	9e 81       	ldd	r25, Y+6	; 0x06
     9fa:	fc 01       	movw	r30, r24
     9fc:	84 8d       	ldd	r24, Z+28	; 0x1c
     9fe:	95 8d       	ldd	r25, Z+29	; 0x1d
     a00:	a6 8d       	ldd	r26, Z+30	; 0x1e
     a02:	b7 8d       	ldd	r27, Z+31	; 0x1f
     a04:	9c 01       	movw	r18, r24
     a06:	ad 01       	movw	r20, r26
     a08:	69 81       	ldd	r22, Y+1	; 0x01
     a0a:	7a 81       	ldd	r23, Y+2	; 0x02
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <__addsf3>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	ab 83       	std	Y+3, r26	; 0x03
     a1e:	bc 83       	std	Y+4, r27	; 0x04
	
	if (controlValue > maxYawServoControlValue)
     a20:	8d 81       	ldd	r24, Y+5	; 0x05
     a22:	9e 81       	ldd	r25, Y+6	; 0x06
     a24:	fc 01       	movw	r30, r24
     a26:	80 8d       	ldd	r24, Z+24	; 0x18
     a28:	91 8d       	ldd	r25, Z+25	; 0x19
     a2a:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a2c:	b3 8d       	ldd	r27, Z+27	; 0x1b
     a2e:	29 81       	ldd	r18, Y+1	; 0x01
     a30:	3a 81       	ldd	r19, Y+2	; 0x02
     a32:	4b 81       	ldd	r20, Y+3	; 0x03
     a34:	5c 81       	ldd	r21, Y+4	; 0x04
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 39 20 	call	0x4072	; 0x4072 <__cmpsf2>
     a3e:	88 23       	and	r24, r24
     a40:	64 f4       	brge	.+24     	; 0xa5a <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0x94>
	{
		controlValue = maxYawServoControlValue;
     a42:	8d 81       	ldd	r24, Y+5	; 0x05
     a44:	9e 81       	ldd	r25, Y+6	; 0x06
     a46:	fc 01       	movw	r30, r24
     a48:	80 8d       	ldd	r24, Z+24	; 0x18
     a4a:	91 8d       	ldd	r25, Z+25	; 0x19
     a4c:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a4e:	b3 8d       	ldd	r27, Z+27	; 0x1b
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	ab 83       	std	Y+3, r26	; 0x03
     a56:	bc 83       	std	Y+4, r27	; 0x04
     a58:	1c c0       	rjmp	.+56     	; 0xa92 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	}else if (controlValue < minYawServoControlValue)
     a5a:	8d 81       	ldd	r24, Y+5	; 0x05
     a5c:	9e 81       	ldd	r25, Y+6	; 0x06
     a5e:	fc 01       	movw	r30, r24
     a60:	84 89       	ldd	r24, Z+20	; 0x14
     a62:	95 89       	ldd	r25, Z+21	; 0x15
     a64:	a6 89       	ldd	r26, Z+22	; 0x16
     a66:	b7 89       	ldd	r27, Z+23	; 0x17
     a68:	29 81       	ldd	r18, Y+1	; 0x01
     a6a:	3a 81       	ldd	r19, Y+2	; 0x02
     a6c:	4b 81       	ldd	r20, Y+3	; 0x03
     a6e:	5c 81       	ldd	r21, Y+4	; 0x04
     a70:	bc 01       	movw	r22, r24
     a72:	cd 01       	movw	r24, r26
     a74:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__gesf2>
     a78:	18 16       	cp	r1, r24
     a7a:	5c f4       	brge	.+22     	; 0xa92 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	{
		controlValue = minYawServoControlValue;
     a7c:	8d 81       	ldd	r24, Y+5	; 0x05
     a7e:	9e 81       	ldd	r25, Y+6	; 0x06
     a80:	fc 01       	movw	r30, r24
     a82:	84 89       	ldd	r24, Z+20	; 0x14
     a84:	95 89       	ldd	r25, Z+21	; 0x15
     a86:	a6 89       	ldd	r26, Z+22	; 0x16
     a88:	b7 89       	ldd	r27, Z+23	; 0x17
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	9a 83       	std	Y+2, r25	; 0x02
     a8e:	ab 83       	std	Y+3, r26	; 0x03
     a90:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return controlValue;
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	ab 81       	ldd	r26, Y+3	; 0x03
     a98:	bc 81       	ldd	r27, Y+4	; 0x04
}
     a9a:	bc 01       	movw	r22, r24
     a9c:	cd 01       	movw	r24, r26
     a9e:	2a 96       	adiw	r28, 0x0a	; 10
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>:

void PIDController::tailRotorCollectiveOuterLoopUpdate()
{
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	6a 97       	sbiw	r28, 0x1a	; 26
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	9a 8f       	std	Y+26, r25	; 0x1a
     ad2:	89 8f       	std	Y+25, r24	; 0x19
	double yawProportional = calculateYawProportional(model->MagYawDegrees(), model->ReferenceMagYawDegrees());
     ad4:	89 8d       	ldd	r24, Y+25	; 0x19
     ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>
     ae2:	6b 01       	movw	r12, r22
     ae4:	7c 01       	movw	r14, r24
     ae6:	89 8d       	ldd	r24, Y+25	; 0x19
     ae8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	e9 8d       	ldd	r30, Y+25	; 0x19
     afa:	fa 8d       	ldd	r31, Y+26	; 0x1a
     afc:	97 01       	movw	r18, r14
     afe:	86 01       	movw	r16, r12
     b00:	ac 01       	movw	r20, r24
     b02:	bd 01       	movw	r22, r26
     b04:	cf 01       	movw	r24, r30
     b06:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	89 83       	std	Y+1, r24	; 0x01
     b10:	9a 83       	std	Y+2, r25	; 0x02
     b12:	ab 83       	std	Y+3, r26	; 0x03
     b14:	bc 83       	std	Y+4, r27	; 0x04
	double yawAntiWindup = calculateYawIntegralAntiWindup(model->YawControlBeforeServoLimitsAdjustment(), model->YawControl());
     b16:	89 8d       	ldd	r24, Y+25	; 0x19
     b18:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	91 81       	ldd	r25, Z+1	; 0x01
     b20:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK10helicopter5model11SystemModel10YawControlEv>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
     b28:	89 8d       	ldd	r24, Y+25	; 0x19
     b2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	0e 94 43 01 	call	0x286	; 0x286 <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	e9 8d       	ldd	r30, Y+25	; 0x19
     b3c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b3e:	97 01       	movw	r18, r14
     b40:	86 01       	movw	r16, r12
     b42:	ac 01       	movw	r20, r24
     b44:	bd 01       	movw	r22, r26
     b46:	cf 01       	movw	r24, r30
     b48:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEdd>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	8d 83       	std	Y+5, r24	; 0x05
     b52:	9e 83       	std	Y+6, r25	; 0x06
     b54:	af 83       	std	Y+7, r26	; 0x07
     b56:	b8 87       	std	Y+8, r27	; 0x08
	double weightedYawIntegral = calculateYawIntegral(yawProportional, model->YawIntegral(), yawAntiWindup);
     b58:	89 8d       	ldd	r24, Y+25	; 0x19
     b5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	ed 80       	ldd	r14, Y+5	; 0x05
     b6c:	fe 80       	ldd	r15, Y+6	; 0x06
     b6e:	0f 81       	ldd	r16, Y+7	; 0x07
     b70:	18 85       	ldd	r17, Y+8	; 0x08
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	ab 81       	ldd	r26, Y+3	; 0x03
     b78:	bc 81       	ldd	r27, Y+4	; 0x04
     b7a:	e9 8d       	ldd	r30, Y+25	; 0x19
     b7c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b7e:	67 01       	movw	r12, r14
     b80:	78 01       	movw	r14, r16
     b82:	89 01       	movw	r16, r18
     b84:	9a 01       	movw	r18, r20
     b86:	ac 01       	movw	r20, r24
     b88:	bd 01       	movw	r22, r26
     b8a:	cf 01       	movw	r24, r30
     b8c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	89 87       	std	Y+9, r24	; 0x09
     b96:	9a 87       	std	Y+10, r25	; 0x0a
     b98:	ab 87       	std	Y+11, r26	; 0x0b
     b9a:	bc 87       	std	Y+12, r27	; 0x0c
	double yawDerivativeError = calculateYawVelocityError(model->YawVelocityDegreesPerSecond(), model->ReferenceYawVelocityDegreesPerSecond());
     b9c:	89 8d       	ldd	r24, Y+25	; 0x19
     b9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>
     baa:	6b 01       	movw	r12, r22
     bac:	7c 01       	movw	r14, r24
     bae:	89 8d       	ldd	r24, Y+25	; 0x19
     bb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	e9 8d       	ldd	r30, Y+25	; 0x19
     bc2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bc4:	97 01       	movw	r18, r14
     bc6:	86 01       	movw	r16, r12
     bc8:	ac 01       	movw	r20, r24
     bca:	bd 01       	movw	r22, r26
     bcc:	cf 01       	movw	r24, r30
     bce:	0e 94 43 04 	call	0x886	; 0x886 <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	8d 87       	std	Y+13, r24	; 0x0d
     bd8:	9e 87       	std	Y+14, r25	; 0x0e
     bda:	af 87       	std	Y+15, r26	; 0x0f
     bdc:	b8 8b       	std	Y+16, r27	; 0x10
	double yawControlBeforeServoLimitsAdjustment = calculateYawControlValue(yawProportional, yawDerivativeError, weightedYawIntegral);
     bde:	e9 84       	ldd	r14, Y+9	; 0x09
     be0:	fa 84       	ldd	r15, Y+10	; 0x0a
     be2:	0b 85       	ldd	r16, Y+11	; 0x0b
     be4:	1c 85       	ldd	r17, Y+12	; 0x0c
     be6:	2d 85       	ldd	r18, Y+13	; 0x0d
     be8:	3e 85       	ldd	r19, Y+14	; 0x0e
     bea:	4f 85       	ldd	r20, Y+15	; 0x0f
     bec:	58 89       	ldd	r21, Y+16	; 0x10
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	ab 81       	ldd	r26, Y+3	; 0x03
     bf4:	bc 81       	ldd	r27, Y+4	; 0x04
     bf6:	e9 8d       	ldd	r30, Y+25	; 0x19
     bf8:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bfa:	67 01       	movw	r12, r14
     bfc:	78 01       	movw	r14, r16
     bfe:	89 01       	movw	r16, r18
     c00:	9a 01       	movw	r18, r20
     c02:	ac 01       	movw	r20, r24
     c04:	bd 01       	movw	r22, r26
     c06:	cf 01       	movw	r24, r30
     c08:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	89 8b       	std	Y+17, r24	; 0x11
     c12:	9a 8b       	std	Y+18, r25	; 0x12
     c14:	ab 8b       	std	Y+19, r26	; 0x13
     c16:	bc 8b       	std	Y+20, r27	; 0x14
	double yawControl = adjustControlForServoLimits(yawControlBeforeServoLimitsAdjustment);
     c18:	89 89       	ldd	r24, Y+17	; 0x11
     c1a:	9a 89       	ldd	r25, Y+18	; 0x12
     c1c:	ab 89       	ldd	r26, Y+19	; 0x13
     c1e:	bc 89       	ldd	r27, Y+20	; 0x14
     c20:	29 8d       	ldd	r18, Y+25	; 0x19
     c22:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c24:	ac 01       	movw	r20, r24
     c26:	bd 01       	movw	r22, r26
     c28:	c9 01       	movw	r24, r18
     c2a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	8d 8b       	std	Y+21, r24	; 0x15
     c34:	9e 8b       	std	Y+22, r25	; 0x16
     c36:	af 8b       	std	Y+23, r26	; 0x17
     c38:	b8 8f       	std	Y+24, r27	; 0x18
	
	model->YawControl(yawControl);
     c3a:	89 8d       	ldd	r24, Y+25	; 0x19
     c3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c3e:	fc 01       	movw	r30, r24
     c40:	20 81       	ld	r18, Z
     c42:	31 81       	ldd	r19, Z+1	; 0x01
     c44:	8d 89       	ldd	r24, Y+21	; 0x15
     c46:	9e 89       	ldd	r25, Y+22	; 0x16
     c48:	af 89       	ldd	r26, Y+23	; 0x17
     c4a:	b8 8d       	ldd	r27, Y+24	; 0x18
     c4c:	ac 01       	movw	r20, r24
     c4e:	bd 01       	movw	r22, r26
     c50:	c9 01       	movw	r24, r18
     c52:	0e 94 23 01 	call	0x246	; 0x246 <_ZN10helicopter5model11SystemModel10YawControlEd>
	model->YawControlBeforeServoLimitsAdjustment(yawControlBeforeServoLimitsAdjustment);
     c56:	89 8d       	ldd	r24, Y+25	; 0x19
     c58:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	89 89       	ldd	r24, Y+17	; 0x11
     c62:	9a 89       	ldd	r25, Y+18	; 0x12
     c64:	ab 89       	ldd	r26, Y+19	; 0x13
     c66:	bc 89       	ldd	r27, Y+20	; 0x14
     c68:	ac 01       	movw	r20, r24
     c6a:	bd 01       	movw	r22, r26
     c6c:	c9 01       	movw	r24, r18
     c6e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>
	model->YawIntegral(weightedYawIntegral);
     c72:	89 8d       	ldd	r24, Y+25	; 0x19
     c74:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c76:	fc 01       	movw	r30, r24
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	ab 85       	ldd	r26, Y+11	; 0x0b
     c82:	bc 85       	ldd	r27, Y+12	; 0x0c
     c84:	ac 01       	movw	r20, r24
     c86:	bd 01       	movw	r22, r26
     c88:	c9 01       	movw	r24, r18
     c8a:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN10helicopter5model11SystemModel11YawIntegralEd>
	model->YawProportional(yawProportional);
     c8e:	89 8d       	ldd	r24, Y+25	; 0x19
     c90:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c92:	fc 01       	movw	r30, r24
     c94:	20 81       	ld	r18, Z
     c96:	31 81       	ldd	r19, Z+1	; 0x01
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	ab 81       	ldd	r26, Y+3	; 0x03
     c9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ca0:	ac 01       	movw	r20, r24
     ca2:	bd 01       	movw	r22, r26
     ca4:	c9 01       	movw	r24, r18
     ca6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN10helicopter5model11SystemModel15YawProportionalEd>
	model->YawDerivativeError(yawDerivativeError);
     caa:	89 8d       	ldd	r24, Y+25	; 0x19
     cac:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cae:	fc 01       	movw	r30, r24
     cb0:	20 81       	ld	r18, Z
     cb2:	31 81       	ldd	r19, Z+1	; 0x01
     cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb8:	af 85       	ldd	r26, Y+15	; 0x0f
     cba:	b8 89       	ldd	r27, Y+16	; 0x10
     cbc:	ac 01       	movw	r20, r24
     cbe:	bd 01       	movw	r22, r26
     cc0:	c9 01       	movw	r24, r18
     cc2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>
	
	servoDriver->controlTailRotorCollective(yawControl);
     cc6:	89 8d       	ldd	r24, Y+25	; 0x19
     cc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cca:	fc 01       	movw	r30, r24
     ccc:	22 81       	ldd	r18, Z+2	; 0x02
     cce:	33 81       	ldd	r19, Z+3	; 0x03
     cd0:	8d 89       	ldd	r24, Y+21	; 0x15
     cd2:	9e 89       	ldd	r25, Y+22	; 0x16
     cd4:	af 89       	ldd	r26, Y+23	; 0x17
     cd6:	b8 8d       	ldd	r27, Y+24	; 0x18
     cd8:	ac 01       	movw	r20, r24
     cda:	bd 01       	movw	r22, r26
     cdc:	c9 01       	movw	r24, r18
     cde:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>
}
     ce2:	6a 96       	adiw	r28, 0x1a	; 26
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	08 95       	ret

00000d00 <_ZN10helicopter10controller13PIDController13addBlownFrameEv>:

void PIDController::addBlownFrame()
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	1f 92       	push	r1
     d06:	1f 92       	push	r1
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
	model->BlownFrames(model->BlownFrames() + 1);
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	9a 81       	ldd	r25, Y+2	; 0x02
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	0e 94 1b 02 	call	0x436	; 0x436 <_ZNK10helicopter5model11SystemModel11BlownFramesEv>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	a1 1d       	adc	r26, r1
     d26:	b1 1d       	adc	r27, r1
     d28:	29 81       	ldd	r18, Y+1	; 0x01
     d2a:	3a 81       	ldd	r19, Y+2	; 0x02
     d2c:	f9 01       	movw	r30, r18
     d2e:	20 81       	ld	r18, Z
     d30:	31 81       	ldd	r19, Z+1	; 0x01
     d32:	ac 01       	movw	r20, r24
     d34:	bd 01       	movw	r22, r26
     d36:	c9 01       	movw	r24, r18
     d38:	0e 94 31 02 	call	0x462	; 0x462 <_ZN10helicopter5model11SystemModel11BlownFramesEl>
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	1f 92       	push	r1
     d4c:	1f 92       	push	r1
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
				{
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	2a e0       	ldi	r18, 0x0A	; 10
     d5c:	32 e0       	ldi	r19, 0x02	; 2
     d5e:	fc 01       	movw	r30, r24
     d60:	31 83       	std	Z+1, r19	; 0x01
     d62:	20 83       	st	Z, r18
					
				}
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	99 27       	eor	r25, r25
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	21 f0       	breq	.+8      	; 0xd78 <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	1f 92       	push	r1
     d88:	1f 92       	push	r1
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	0e 94 a3 06 	call	0xd46	; 0xd46 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "CommonHeader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     db2:	1f 92       	push	r1
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9c 83       	std	Y+4, r25	; 0x04
     dba:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     dbc:	1a 82       	std	Y+2, r1	; 0x02
     dbe:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	fc 01       	movw	r30, r24
     dc6:	82 85       	ldd	r24, Z+10	; 0x0a
     dc8:	88 23       	and	r24, r24
     dca:	b9 f1       	breq	.+110    	; 0xe3a <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	fc 01       	movw	r30, r24
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	a4 81       	ldd	r26, Z+4	; 0x04
     dd8:	b5 81       	ldd	r27, Z+5	; 0x05
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	aa 1f       	adc	r26, r26
     de0:	bb 1f       	adc	r27, r27
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	aa 1f       	adc	r26, r26
     de8:	bb 1f       	adc	r27, r27
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	aa 1f       	adc	r26, r26
     df0:	bb 1f       	adc	r27, r27
     df2:	9c 01       	movw	r18, r24
     df4:	ad 01       	movw	r20, r26
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	94 e2       	ldi	r25, 0x24	; 36
     dfa:	a4 ef       	ldi	r26, 0xF4	; 244
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	bc 01       	movw	r22, r24
     e00:	cd 01       	movw	r24, r26
     e02:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodsi4>
     e06:	da 01       	movw	r26, r20
     e08:	c9 01       	movw	r24, r18
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	a1 09       	sbc	r26, r1
     e0e:	b1 09       	sbc	r27, r1
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatunsisf>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 13 21 	call	0x4226	; 0x4226 <floor>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	0e 94 aa 20 	call	0x4154	; 0x4154 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	3a c0       	rjmp	.+116    	; 0xeae <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	fc 01       	movw	r30, r24
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	a4 81       	ldd	r26, Z+4	; 0x04
     e46:	b5 81       	ldd	r27, Z+5	; 0x05
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	aa 1f       	adc	r26, r26
     e4e:	bb 1f       	adc	r27, r27
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	aa 1f       	adc	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	aa 1f       	adc	r26, r26
     e5e:	bb 1f       	adc	r27, r27
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	aa 1f       	adc	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	9c 01       	movw	r18, r24
     e6a:	ad 01       	movw	r20, r26
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	94 e2       	ldi	r25, 0x24	; 36
     e70:	a4 ef       	ldi	r26, 0xF4	; 244
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodsi4>
     e7c:	da 01       	movw	r26, r20
     e7e:	c9 01       	movw	r24, r18
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	a1 09       	sbc	r26, r1
     e84:	b1 09       	sbc	r27, r1
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatunsisf>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 13 21 	call	0x4226	; 0x4226 <floor>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	0e 94 aa 20 	call	0x4154	; 0x4154 <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	fc 01       	movw	r30, r24
     eb4:	86 81       	ldd	r24, Z+6	; 0x06
     eb6:	88 23       	and	r24, r24
     eb8:	41 f5       	brne	.+80     	; 0xf0a <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     eba:	84 ec       	ldi	r24, 0xC4	; 196
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	29 81       	ldd	r18, Y+1	; 0x01
     ec0:	3a 81       	ldd	r19, Y+2	; 0x02
     ec2:	fc 01       	movw	r30, r24
     ec4:	31 83       	std	Z+1, r19	; 0x01
     ec6:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     ec8:	82 ec       	ldi	r24, 0xC2	; 194
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	22 ec       	ldi	r18, 0xC2	; 194
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	f9 01       	movw	r30, r18
     ed2:	20 81       	ld	r18, Z
     ed4:	26 60       	ori	r18, 0x06	; 6
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	fc 01       	movw	r30, r24
     ee0:	82 85       	ldd	r24, Z+10	; 0x0a
     ee2:	88 23       	and	r24, r24
     ee4:	49 f0       	breq	.+18     	; 0xef8 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     ee6:	80 ec       	ldi	r24, 0xC0	; 192
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	20 ec       	ldi	r18, 0xC0	; 192
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	f9 01       	movw	r30, r18
     ef0:	20 81       	ld	r18, Z
     ef2:	22 60       	ori	r18, 0x02	; 2
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     ef8:	81 ec       	ldi	r24, 0xC1	; 193
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	21 ec       	ldi	r18, 0xC1	; 193
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	28 61       	ori	r18, 0x18	; 24
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
	}
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>:

int SerialDriver::transmitByte(byte byteToSend)
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6b 83       	std	Y+3, r22	; 0x03
	if (uartPort == Zero)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	fc 01       	movw	r30, r24
     f2e:	86 81       	ldd	r24, Z+6	; 0x06
     f30:	88 23       	and	r24, r24
     f32:	09 f0       	breq	.+2      	; 0xf36 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x1e>
     f34:	42 c0       	rjmp	.+132    	; 0xfba <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa2>
	{
		if (isTimeoutEnabled)
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	fc 01       	movw	r30, r24
     f3c:	81 85       	ldd	r24, Z+9	; 0x09
     f3e:	88 23       	and	r24, r24
     f40:	09 f1       	breq	.+66     	; 0xf84 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			timer->startTimer();
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	87 81       	ldd	r24, Z+7	; 0x07
     f4a:	90 85       	ldd	r25, Z+8	; 0x08
     f4c:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     f50:	19 c0       	rjmp	.+50     	; 0xf84 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	fc 01       	movw	r30, r24
     f58:	81 85       	ldd	r24, Z+9	; 0x09
     f5a:	88 23       	and	r24, r24
     f5c:	a1 f0       	breq	.+40     	; 0xf86 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
			{
				if (timer->hasTimedout())
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	fc 01       	movw	r30, r24
     f64:	87 81       	ldd	r24, Z+7	; 0x07
     f66:	90 85       	ldd	r25, Z+8	; 0x08
     f68:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <_ZN10helicopter4util5Timer11hasTimedoutEv>
     f6c:	88 23       	and	r24, r24
     f6e:	59 f0       	breq	.+22     	; 0xf86 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
				{
					timer->stopTimer();
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	fc 01       	movw	r30, r24
     f76:	87 81       	ldd	r24, Z+7	; 0x07
     f78:	90 85       	ldd	r25, Z+8	; 0x08
     f7a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN10helicopter4util5Timer9stopTimerEv>
					return -1;
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	1d c0       	rjmp	.+58     	; 0xfbe <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa6>
		{
			timer->startTimer();
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     f84:	00 00       	nop
     f86:	80 ec       	ldi	r24, 0xC0	; 192
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 72       	andi	r24, 0x20	; 32
     f94:	99 27       	eor	r25, r25
     f96:	21 e0       	ldi	r18, 0x01	; 1
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	09 f0       	breq	.+2      	; 0xf9e <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x86>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	22 23       	and	r18, r18
     fa0:	c1 f6       	brne	.-80     	; 0xf52 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x3a>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     fa2:	86 ec       	ldi	r24, 0xC6	; 198
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	2b 81       	ldd	r18, Y+3	; 0x03
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
		
		timer->stopTimer();
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	87 81       	ldd	r24, Z+7	; 0x07
     fb4:	90 85       	ldd	r25, Z+8	; 0x08
     fb6:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN10helicopter4util5Timer9stopTimerEv>
	}
	
	return 0;
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6>
     fd0:	1f 92       	push	r1
     fd2:	1f 92       	push	r1
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	7d 83       	std	Y+5, r23	; 0x05
     fde:	6c 83       	std	Y+4, r22	; 0x04
	bool hasDataOverrun = false;
     fe0:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	fc 01       	movw	r30, r24
     fe8:	86 81       	ldd	r24, Z+6	; 0x06
     fea:	88 23       	and	r24, r24
     fec:	09 f0       	breq	.+2      	; 0xff0 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x26>
     fee:	41 c0       	rjmp	.+130    	; 0x1072 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xa8>
	{
		
		if (isTimeoutEnabled)
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	fc 01       	movw	r30, r24
     ff6:	81 85       	ldd	r24, Z+9	; 0x09
     ff8:	88 23       	and	r24, r24
     ffa:	d9 f0       	breq	.+54     	; 0x1032 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			timer->startTimer();
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	fc 01       	movw	r30, r24
    1002:	87 81       	ldd	r24, Z+7	; 0x07
    1004:	90 85       	ldd	r25, Z+8	; 0x08
    1006:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
    100a:	13 c0       	rjmp	.+38     	; 0x1032 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			if (timer->hasTimedout())
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	fc 01       	movw	r30, r24
    1012:	87 81       	ldd	r24, Z+7	; 0x07
    1014:	90 85       	ldd	r25, Z+8	; 0x08
    1016:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <_ZN10helicopter4util5Timer11hasTimedoutEv>
    101a:	88 23       	and	r24, r24
    101c:	59 f0       	breq	.+22     	; 0x1034 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6a>
			{
				timer->stopTimer();
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	fc 01       	movw	r30, r24
    1024:	87 81       	ldd	r24, Z+7	; 0x07
    1026:	90 85       	ldd	r25, Z+8	; 0x08
    1028:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN10helicopter4util5Timer9stopTimerEv>
				return -1;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	9f ef       	ldi	r25, 0xFF	; 255
    1030:	29 c0       	rjmp	.+82     	; 0x1084 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xba>
			timer->startTimer();
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
    1032:	00 00       	nop
    1034:	80 ec       	ldi	r24, 0xC0	; 192
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	fc 01       	movw	r30, r24
    103a:	80 81       	ld	r24, Z
    103c:	80 95       	com	r24
    103e:	88 1f       	adc	r24, r24
    1040:	88 27       	eor	r24, r24
    1042:	88 1f       	adc	r24, r24
    1044:	88 23       	and	r24, r24
    1046:	11 f7       	brne	.-60     	; 0x100c <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x42>
			}*/
		}
		
		//determine if there has been a data overrun.
		//Swallow the overrun because nothing can be done.
		hasDataOverrun = (UCSR0A & (1 << DOR0)) != 0;
    1048:	80 ec       	ldi	r24, 0xC0	; 192
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	fc 01       	movw	r30, r24
    104e:	80 81       	ld	r24, Z
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	88 70       	andi	r24, 0x08	; 8
    1056:	99 27       	eor	r25, r25
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	09 f4       	brne	.+2      	; 0x1060 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x96>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	29 83       	std	Y+1, r18	; 0x01
		
		/* Read the data from the serial port buffer */
		receivedByte = UDR0;
    1062:	86 ec       	ldi	r24, 0xC6	; 198
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	fc 01       	movw	r30, r24
    1068:	20 81       	ld	r18, Z
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
	}
	
	timer->stopTimer();
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	fc 01       	movw	r30, r24
    1078:	87 81       	ldd	r24, Z+7	; 0x07
    107a:	90 85       	ldd	r25, Z+8	; 0x08
    107c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return 0;
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <_ZN10helicopter7drivers11ServoDriverD1Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	1f 92       	push	r1
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
				{
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	28 e1       	ldi	r18, 0x18	; 24
    10aa:	32 e0       	ldi	r19, 0x02	; 2
    10ac:	fc 01       	movw	r30, r24
    10ae:	31 83       	std	Z+1, r19	; 0x01
    10b0:	20 83       	st	Z, r18
					
				}
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	81 70       	andi	r24, 0x01	; 1
    10b8:	99 27       	eor	r25, r25
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <_ZN10helicopter7drivers11ServoDriverD1Ev+0x32>
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <_ZN10helicopter7drivers11ServoDriverD0Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	1f 92       	push	r1
    10d6:	1f 92       	push	r1
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN10helicopter7drivers11ServoDriverD1Ev>
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>:
#include "ServoDriver.h"

using namespace helicopter::drivers;

void ServoDriver::controlTailRotorCollective(double controlTailRotorCollective)
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	2a 97       	sbiw	r28, 0x0a	; 10
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	4f 83       	std	Y+7, r20	; 0x07
    1114:	58 87       	std	Y+8, r21	; 0x08
    1116:	69 87       	std	Y+9, r22	; 0x09
    1118:	7a 87       	std	Y+10, r23	; 0x0a
	double control = controlTailRotorCollective;
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
    111c:	98 85       	ldd	r25, Y+8	; 0x08
    111e:	a9 85       	ldd	r26, Y+9	; 0x09
    1120:	ba 85       	ldd	r27, Y+10	; 0x0a
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	ab 83       	std	Y+3, r26	; 0x03
    1128:	bc 83       	std	Y+4, r27	; 0x04
	
	if (control > maxControlValue)
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	fc 01       	movw	r30, r24
    1130:	86 81       	ldd	r24, Z+6	; 0x06
    1132:	97 81       	ldd	r25, Z+7	; 0x07
    1134:	a0 85       	ldd	r26, Z+8	; 0x08
    1136:	b1 85       	ldd	r27, Z+9	; 0x09
    1138:	29 81       	ldd	r18, Y+1	; 0x01
    113a:	3a 81       	ldd	r19, Y+2	; 0x02
    113c:	4b 81       	ldd	r20, Y+3	; 0x03
    113e:	5c 81       	ldd	r21, Y+4	; 0x04
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 39 20 	call	0x4072	; 0x4072 <__cmpsf2>
    1148:	88 23       	and	r24, r24
    114a:	5c f4       	brge	.+22     	; 0x1162 <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0x68>
	{
		control = maxControlValue;
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	9e 81       	ldd	r25, Y+6	; 0x06
    1150:	fc 01       	movw	r30, r24
    1152:	86 81       	ldd	r24, Z+6	; 0x06
    1154:	97 81       	ldd	r25, Z+7	; 0x07
    1156:	a0 85       	ldd	r26, Z+8	; 0x08
    1158:	b1 85       	ldd	r27, Z+9	; 0x09
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	ab 83       	std	Y+3, r26	; 0x03
    1160:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	if (control < minControlValue)
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	fc 01       	movw	r30, r24
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	a4 81       	ldd	r26, Z+4	; 0x04
    116e:	b5 81       	ldd	r27, Z+5	; 0x05
    1170:	29 81       	ldd	r18, Y+1	; 0x01
    1172:	3a 81       	ldd	r19, Y+2	; 0x02
    1174:	4b 81       	ldd	r20, Y+3	; 0x03
    1176:	5c 81       	ldd	r21, Y+4	; 0x04
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__gesf2>
    1180:	18 16       	cp	r1, r24
    1182:	5c f4       	brge	.+22     	; 0x119a <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0xa0>
	{
		control = minControlValue;
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	fc 01       	movw	r30, r24
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	a4 81       	ldd	r26, Z+4	; 0x04
    1190:	b5 81       	ldd	r27, Z+5	; 0x05
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	ab 83       	std	Y+3, r26	; 0x03
    1198:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	controlTailRotorCollectiveImpl(control);
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	fc 01       	movw	r30, r24
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	04 96       	adiw	r24, 0x04	; 4
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 81       	ld	r18, Z
    11aa:	31 81       	ldd	r19, Z+1	; 0x01
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	ab 81       	ldd	r26, Y+3	; 0x03
    11b2:	bc 81       	ldd	r27, Y+4	; 0x04
    11b4:	ed 81       	ldd	r30, Y+5	; 0x05
    11b6:	fe 81       	ldd	r31, Y+6	; 0x06
    11b8:	ac 01       	movw	r20, r24
    11ba:	bd 01       	movw	r22, r26
    11bc:	cf 01       	movw	r24, r30
    11be:	f9 01       	movw	r30, r18
    11c0:	19 95       	eicall
}
    11c2:	2a 96       	adiw	r28, 0x0a	; 10
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>:


void ServoDriver::controlTailRotorCollectiveImpl(double controlTailRotorCollective)
{
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	00 d0       	rcall	.+0      	; 0x11da <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x8>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	4b 83       	std	Y+3, r20	; 0x03
    11e6:	5c 83       	std	Y+4, r21	; 0x04
    11e8:	6d 83       	std	Y+5, r22	; 0x05
    11ea:	7e 83       	std	Y+6, r23	; 0x06
	
    11ec:	26 96       	adiw	r28, 0x06	; 6
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	1f 92       	push	r1
    1204:	1f 92       	push	r1
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	20 e7       	ldi	r18, 0x70	; 112
    1214:	32 e0       	ldi	r19, 0x02	; 2
    1216:	fc 01       	movw	r30, r24
    1218:	31 83       	std	Z+1, r19	; 0x01
    121a:	20 83       	st	Z, r18
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	99 27       	eor	r25, r25
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	21 f0       	breq	.+8      	; 0x1230 <_ZN10helicopter5tasks4TaskD1Ev+0x32>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <_ZN10helicopter5tasks4TaskD0Ev>:
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	1f 92       	push	r1
    1240:	1f 92       	push	r1
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>:
					
				int ledToBlink;
				
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	28 97       	sbiw	r28, 0x08	; 8
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	7c 83       	std	Y+4, r23	; 0x04
    127e:	6b 83       	std	Y+3, r22	; 0x03
    1280:	5e 83       	std	Y+6, r21	; 0x06
    1282:	4d 83       	std	Y+5, r20	; 0x05
    1284:	38 87       	std	Y+8, r19	; 0x08
    1286:	2f 83       	std	Y+7, r18	; 0x07
				Task(delay, period),
				isOff(false),
				ledToBlink(ledToBlink)
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	4d 81       	ldd	r20, Y+5	; 0x05
    128e:	5e 81       	ldd	r21, Y+6	; 0x06
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	b9 01       	movw	r22, r18
    1296:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <_ZN10helicopter5tasks4TaskC1Eii>
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	22 e2       	ldi	r18, 0x22	; 34
    12a0:	32 e0       	ldi	r19, 0x02	; 2
    12a2:	fc 01       	movw	r30, r24
    12a4:	31 83       	std	Z+1, r19	; 0x01
    12a6:	20 83       	st	Z, r18
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	fc 01       	movw	r30, r24
    12ae:	17 82       	std	Z+7, r1	; 0x07
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	2f 81       	ldd	r18, Y+7	; 0x07
    12b6:	38 85       	ldd	r19, Y+8	; 0x08
    12b8:	fc 01       	movw	r30, r24
    12ba:	31 87       	std	Z+9, r19	; 0x09
    12bc:	20 87       	std	Z+8, r18	; 0x08
			{
					
			}
    12be:	28 96       	adiw	r28, 0x08	; 8
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
	
			void init()
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	1f 92       	push	r1
    12d6:	1f 92       	push	r1
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
			{
				DDRA |= (1<<ledToBlink);
    12e0:	81 e2       	ldi	r24, 0x21	; 33
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	21 e2       	ldi	r18, 0x21	; 33
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f9 01       	movw	r30, r18
    12ea:	20 81       	ld	r18, Z
    12ec:	62 2f       	mov	r22, r18
    12ee:	29 81       	ldd	r18, Y+1	; 0x01
    12f0:	3a 81       	ldd	r19, Y+2	; 0x02
    12f2:	f9 01       	movw	r30, r18
    12f4:	40 85       	ldd	r20, Z+8	; 0x08
    12f6:	51 85       	ldd	r21, Z+9	; 0x09
    12f8:	21 e0       	ldi	r18, 0x01	; 1
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	04 2e       	mov	r0, r20
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x34>
    1300:	22 0f       	add	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x30>
    1308:	26 2b       	or	r18, r22
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
			}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	1f 92       	push	r1
    131e:	1f 92       	push	r1
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
				if (isOff)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	fc 01       	movw	r30, r24
    132e:	87 81       	ldd	r24, Z+7	; 0x07
    1330:	88 23       	and	r24, r24
    1332:	e9 f0       	breq	.+58     	; 0x136e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x56>
				{
					//Turn On the LED
					PORTA &= ~(1<<ledToBlink);
    1334:	82 e2       	ldi	r24, 0x22	; 34
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	22 e2       	ldi	r18, 0x22	; 34
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	62 2f       	mov	r22, r18
    1342:	29 81       	ldd	r18, Y+1	; 0x01
    1344:	3a 81       	ldd	r19, Y+2	; 0x02
    1346:	f9 01       	movw	r30, r18
    1348:	40 85       	ldd	r20, Z+8	; 0x08
    134a:	51 85       	ldd	r21, Z+9	; 0x09
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	04 2e       	mov	r0, r20
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x40>
    1354:	22 0f       	add	r18, r18
    1356:	33 1f       	adc	r19, r19
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x3c>
    135c:	20 95       	com	r18
    135e:	26 23       	and	r18, r22
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
					isOff = false;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	fc 01       	movw	r30, r24
    136a:	17 82       	std	Z+7, r1	; 0x07
    136c:	1c c0       	rjmp	.+56     	; 0x13a6 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x8e>
				}else
				{
					//Turn Off the LED
					PORTA |= (1<<ledToBlink);
    136e:	82 e2       	ldi	r24, 0x22	; 34
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	22 e2       	ldi	r18, 0x22	; 34
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	f9 01       	movw	r30, r18
    1378:	20 81       	ld	r18, Z
    137a:	62 2f       	mov	r22, r18
    137c:	29 81       	ldd	r18, Y+1	; 0x01
    137e:	3a 81       	ldd	r19, Y+2	; 0x02
    1380:	f9 01       	movw	r30, r18
    1382:	40 85       	ldd	r20, Z+8	; 0x08
    1384:	51 85       	ldd	r21, Z+9	; 0x09
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	04 2e       	mov	r0, r20
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x7a>
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x76>
    1396:	26 2b       	or	r18, r22
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
					isOff = true;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	fc 01       	movw	r30, r24
    13a4:	27 83       	std	Z+7, r18	; 0x07
				}
			}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEv>:
				 * Detects if the processing was completed before the next scheduler triggered.
				 * @return True if the scheduler timer triggered again before the tasks were fully processes,
				 * False if all the tasks were finished processing (i.e. the dispatch method finished) before
				 * the timer triggered again.
				 */
				bool hasBlownFrame()
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	1f 92       	push	r1
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
				{
					return blowFrameDetected;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	fc 01       	movw	r30, r24
    13c6:	82 8d       	ldd	r24, Z+26	; 0x1a
				}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>:
				 * @timeoutMilliseconds the milliseconds that should go by before the
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	2c 97       	sbiw	r28, 0x0c	; 12
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	4b 83       	std	Y+3, r20	; 0x03
    13f4:	5c 83       	std	Y+4, r21	; 0x04
    13f6:	6d 83       	std	Y+5, r22	; 0x05
    13f8:	7e 83       	std	Y+6, r23	; 0x06
    13fa:	38 87       	std	Y+8, r19	; 0x08
    13fc:	2f 83       	std	Y+7, r18	; 0x07
    13fe:	e9 86       	std	Y+9, r14	; 0x09
    1400:	fa 86       	std	Y+10, r15	; 0x0a
    1402:	0b 87       	std	Y+11, r16	; 0x0b
    1404:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
    1406:	29 81       	ldd	r18, Y+1	; 0x01
    1408:	3a 81       	ldd	r19, Y+2	; 0x02
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	ad 81       	ldd	r26, Y+5	; 0x05
    1410:	be 81       	ldd	r27, Y+6	; 0x06
    1412:	f9 01       	movw	r30, r18
    1414:	80 83       	st	Z, r24
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	a2 83       	std	Z+2, r26	; 0x02
    141a:	b3 83       	std	Z+3, r27	; 0x03
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	2f 81       	ldd	r18, Y+7	; 0x07
    1422:	38 85       	ldd	r19, Y+8	; 0x08
    1424:	fc 01       	movw	r30, r24
    1426:	35 83       	std	Z+5, r19	; 0x05
    1428:	24 83       	std	Z+4, r18	; 0x04
    142a:	29 85       	ldd	r18, Y+9	; 0x09
    142c:	3a 85       	ldd	r19, Y+10	; 0x0a
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	fc 01       	movw	r30, r24
    1434:	37 83       	std	Z+7, r19	; 0x07
    1436:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
    1438:	2c 96       	adiw	r28, 0x0c	; 12
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	08 95       	ret

00001452 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>:
				 * only used when enableTimeout = true.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
    1452:	cf 92       	push	r12
    1454:	ef 92       	push	r14
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	2b 97       	sbiw	r28, 0x0b	; 11
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	4b 83       	std	Y+3, r20	; 0x03
    1474:	5c 83       	std	Y+4, r21	; 0x04
    1476:	6d 83       	std	Y+5, r22	; 0x05
    1478:	7e 83       	std	Y+6, r23	; 0x06
    147a:	2f 83       	std	Y+7, r18	; 0x07
    147c:	19 87       	std	Y+9, r17	; 0x09
    147e:	08 87       	std	Y+8, r16	; 0x08
    1480:	ea 86       	std	Y+10, r14	; 0x0a
    1482:	cb 86       	std	Y+11, r12	; 0x0b
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				timer(timer),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	2a e0       	ldi	r18, 0x0A	; 10
    148a:	32 e0       	ldi	r19, 0x02	; 2
    148c:	fc 01       	movw	r30, r24
    148e:	31 83       	std	Z+1, r19	; 0x01
    1490:	20 83       	st	Z, r18
    1492:	29 81       	ldd	r18, Y+1	; 0x01
    1494:	3a 81       	ldd	r19, Y+2	; 0x02
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	ad 81       	ldd	r26, Y+5	; 0x05
    149c:	be 81       	ldd	r27, Y+6	; 0x06
    149e:	f9 01       	movw	r30, r18
    14a0:	82 83       	std	Z+2, r24	; 0x02
    14a2:	93 83       	std	Z+3, r25	; 0x03
    14a4:	a4 83       	std	Z+4, r26	; 0x04
    14a6:	b5 83       	std	Z+5, r27	; 0x05
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	2f 81       	ldd	r18, Y+7	; 0x07
    14ae:	fc 01       	movw	r30, r24
    14b0:	26 83       	std	Z+6, r18	; 0x06
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	28 85       	ldd	r18, Y+8	; 0x08
    14b8:	39 85       	ldd	r19, Y+9	; 0x09
    14ba:	fc 01       	movw	r30, r24
    14bc:	30 87       	std	Z+8, r19	; 0x08
    14be:	27 83       	std	Z+7, r18	; 0x07
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    14c6:	fc 01       	movw	r30, r24
    14c8:	21 87       	std	Z+9, r18	; 0x09
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    14d0:	fc 01       	movw	r30, r24
    14d2:	22 87       	std	Z+10, r18	; 0x0a
				{
					
				}
    14d4:	2b 96       	adiw	r28, 0x0b	; 11
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ef 90       	pop	r14
    14ea:	cf 90       	pop	r12
    14ec:	08 95       	ret

000014ee <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * at the same time interval (i.e. 20 milliseconds) for both transmitting a byte as well
				 * as receiving a byte.
				 * @param serialDriver the driver used to communicate with the serial port
				 * which is used to communicate with the Ground Control Station.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver):
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
    14f4:	1f 92       	push	r1
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	7c 83       	std	Y+4, r23	; 0x04
    1500:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	fc 01       	movw	r30, r24
    150c:	31 83       	std	Z+1, r19	; 0x01
    150e:	20 83       	st	Z, r18
					{}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <_ZN10helicopter5model11SystemModelC1Ev>:
			
			long numOfFramesBlown;
			
			public:
			
			SystemModel():
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	1f 92       	push	r1
    1524:	1f 92       	push	r1
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
			yawProportional(0),
			yawDerivativeError(0),
			timeouts(0),
			unrecognizedMsgTypes(0),
			checksumErrors(0),
			numOfFramesBlown(0)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	fc 01       	movw	r30, r24
    1534:	10 82       	st	Z, r1
    1536:	11 82       	std	Z+1, r1	; 0x01
    1538:	12 82       	std	Z+2, r1	; 0x02
    153a:	13 82       	std	Z+3, r1	; 0x03
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	fc 01       	movw	r30, r24
    1542:	14 82       	std	Z+4, r1	; 0x04
    1544:	15 82       	std	Z+5, r1	; 0x05
    1546:	16 82       	std	Z+6, r1	; 0x06
    1548:	17 82       	std	Z+7, r1	; 0x07
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	fc 01       	movw	r30, r24
    1550:	10 86       	std	Z+8, r1	; 0x08
    1552:	11 86       	std	Z+9, r1	; 0x09
    1554:	12 86       	std	Z+10, r1	; 0x0a
    1556:	13 86       	std	Z+11, r1	; 0x0b
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	fc 01       	movw	r30, r24
    155e:	14 86       	std	Z+12, r1	; 0x0c
    1560:	15 86       	std	Z+13, r1	; 0x0d
    1562:	16 86       	std	Z+14, r1	; 0x0e
    1564:	17 86       	std	Z+15, r1	; 0x0f
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	fc 01       	movw	r30, r24
    156c:	10 8a       	std	Z+16, r1	; 0x10
    156e:	11 8a       	std	Z+17, r1	; 0x11
    1570:	12 8a       	std	Z+18, r1	; 0x12
    1572:	13 8a       	std	Z+19, r1	; 0x13
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	fc 01       	movw	r30, r24
    157a:	14 8a       	std	Z+20, r1	; 0x14
    157c:	15 8a       	std	Z+21, r1	; 0x15
    157e:	16 8a       	std	Z+22, r1	; 0x16
    1580:	17 8a       	std	Z+23, r1	; 0x17
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	fc 01       	movw	r30, r24
    1588:	10 8e       	std	Z+24, r1	; 0x18
    158a:	11 8e       	std	Z+25, r1	; 0x19
    158c:	12 8e       	std	Z+26, r1	; 0x1a
    158e:	13 8e       	std	Z+27, r1	; 0x1b
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	fc 01       	movw	r30, r24
    1596:	14 8e       	std	Z+28, r1	; 0x1c
    1598:	15 8e       	std	Z+29, r1	; 0x1d
    159a:	16 8e       	std	Z+30, r1	; 0x1e
    159c:	17 8e       	std	Z+31, r1	; 0x1f
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	fc 01       	movw	r30, r24
    15a4:	10 a2       	std	Z+32, r1	; 0x20
    15a6:	11 a2       	std	Z+33, r1	; 0x21
    15a8:	12 a2       	std	Z+34, r1	; 0x22
    15aa:	13 a2       	std	Z+35, r1	; 0x23
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	fc 01       	movw	r30, r24
    15b2:	14 a2       	std	Z+36, r1	; 0x24
    15b4:	15 a2       	std	Z+37, r1	; 0x25
    15b6:	16 a2       	std	Z+38, r1	; 0x26
    15b8:	17 a2       	std	Z+39, r1	; 0x27
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	fc 01       	movw	r30, r24
    15c0:	10 a6       	std	Z+40, r1	; 0x28
    15c2:	11 a6       	std	Z+41, r1	; 0x29
    15c4:	12 a6       	std	Z+42, r1	; 0x2a
    15c6:	13 a6       	std	Z+43, r1	; 0x2b
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	fc 01       	movw	r30, r24
    15ce:	14 a6       	std	Z+44, r1	; 0x2c
    15d0:	15 a6       	std	Z+45, r1	; 0x2d
    15d2:	16 a6       	std	Z+46, r1	; 0x2e
    15d4:	17 a6       	std	Z+47, r1	; 0x2f
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	fc 01       	movw	r30, r24
    15dc:	10 aa       	std	Z+48, r1	; 0x30
    15de:	11 aa       	std	Z+49, r1	; 0x31
    15e0:	12 aa       	std	Z+50, r1	; 0x32
    15e2:	13 aa       	std	Z+51, r1	; 0x33
			{
				
			}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>:
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x8>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	4b 83       	std	Y+3, r20	; 0x03
    1600:	5c 83       	std	Y+4, r21	; 0x04
    1602:	6d 83       	std	Y+5, r22	; 0x05
    1604:	7e 83       	std	Y+6, r23	; 0x06
    1606:	29 81       	ldd	r18, Y+1	; 0x01
    1608:	3a 81       	ldd	r19, Y+2	; 0x02
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	ad 81       	ldd	r26, Y+5	; 0x05
    1610:	be 81       	ldd	r27, Y+6	; 0x06
    1612:	f9 01       	movw	r30, r18
    1614:	84 83       	std	Z+4, r24	; 0x04
    1616:	95 83       	std	Z+5, r25	; 0x05
    1618:	a6 83       	std	Z+6, r26	; 0x06
    161a:	b7 83       	std	Z+7, r27	; 0x07
    161c:	26 96       	adiw	r28, 0x06	; 6
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	00 d0       	rcall	.+0      	; 0x1634 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	4b 83       	std	Y+3, r20	; 0x03
    1640:	5c 83       	std	Y+4, r21	; 0x04
    1642:	6d 83       	std	Y+5, r22	; 0x05
    1644:	7e 83       	std	Y+6, r23	; 0x06
    1646:	29 81       	ldd	r18, Y+1	; 0x01
    1648:	3a 81       	ldd	r19, Y+2	; 0x02
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	ad 81       	ldd	r26, Y+5	; 0x05
    1650:	be 81       	ldd	r27, Y+6	; 0x06
    1652:	f9 01       	movw	r30, r18
    1654:	84 8b       	std	Z+20, r24	; 0x14
    1656:	95 8b       	std	Z+21, r25	; 0x15
    1658:	a6 8b       	std	Z+22, r26	; 0x16
    165a:	b7 8b       	std	Z+23, r27	; 0x17
    165c:	26 96       	adiw	r28, 0x06	; 6
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <_ZN10helicopter7drivers11ServoDriverC1Ev>:
				double minControlValue;
				double maxControlValue;
					
				
			public:
				ServoDriver(): 
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	1f 92       	push	r1
    1674:	1f 92       	push	r1
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
					minControlValue(0), 
					maxControlValue(0)
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	28 e1       	ldi	r18, 0x18	; 24
    1684:	32 e0       	ldi	r19, 0x02	; 2
    1686:	fc 01       	movw	r30, r24
    1688:	31 83       	std	Z+1, r19	; 0x01
    168a:	20 83       	st	Z, r18
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	fc 01       	movw	r30, r24
    1692:	12 82       	std	Z+2, r1	; 0x02
    1694:	13 82       	std	Z+3, r1	; 0x03
    1696:	14 82       	std	Z+4, r1	; 0x04
    1698:	15 82       	std	Z+5, r1	; 0x05
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	fc 01       	movw	r30, r24
    16a0:	16 82       	std	Z+6, r1	; 0x06
    16a2:	17 82       	std	Z+7, r1	; 0x07
    16a4:	10 86       	std	Z+8, r1	; 0x08
    16a6:	11 86       	std	Z+9, r1	; 0x09
				{
					
				}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	08 95       	ret

000016b2 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>:
				}
				
				/**
				 * Gain value applied to the yaw proportional error
				 */
				void setYawProportionalGain(double yawProportionalGain)
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x8>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	4b 83       	std	Y+3, r20	; 0x03
    16c4:	5c 83       	std	Y+4, r21	; 0x04
    16c6:	6d 83       	std	Y+5, r22	; 0x05
    16c8:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawProportionalGain = yawProportionalGain;
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	3a 81       	ldd	r19, Y+2	; 0x02
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	ad 81       	ldd	r26, Y+5	; 0x05
    16d4:	be 81       	ldd	r27, Y+6	; 0x06
    16d6:	f9 01       	movw	r30, r18
    16d8:	84 87       	std	Z+12, r24	; 0x0c
    16da:	95 87       	std	Z+13, r25	; 0x0d
    16dc:	a6 87       	std	Z+14, r26	; 0x0e
    16de:	b7 87       	std	Z+15, r27	; 0x0f
				}
    16e0:	26 96       	adiw	r28, 0x06	; 6
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	08 95       	ret

000016f2 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>:
				
				/**
				 * Gain value applied to the yaw integral
				 */
				void setYawIntegralGain(double yawIntegralGain)
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x8>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	4b 83       	std	Y+3, r20	; 0x03
    1704:	5c 83       	std	Y+4, r21	; 0x04
    1706:	6d 83       	std	Y+5, r22	; 0x05
    1708:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawIntegralGain = yawIntegralGain;
    170a:	29 81       	ldd	r18, Y+1	; 0x01
    170c:	3a 81       	ldd	r19, Y+2	; 0x02
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	ad 81       	ldd	r26, Y+5	; 0x05
    1714:	be 81       	ldd	r27, Y+6	; 0x06
    1716:	f9 01       	movw	r30, r18
    1718:	84 83       	std	Z+4, r24	; 0x04
    171a:	95 83       	std	Z+5, r25	; 0x05
    171c:	a6 83       	std	Z+6, r26	; 0x06
    171e:	b7 83       	std	Z+7, r27	; 0x07
				}
    1720:	26 96       	adiw	r28, 0x06	; 6
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>:
				
				/**
				 * Gain value applied to the derivative
				 */
				void setYawDerivativeGain(double yawDerivativeGain)
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	00 d0       	rcall	.+0      	; 0x1738 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x8>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	4b 83       	std	Y+3, r20	; 0x03
    1744:	5c 83       	std	Y+4, r21	; 0x04
    1746:	6d 83       	std	Y+5, r22	; 0x05
    1748:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawDerivativeGain = yawDerivativeGain;
    174a:	29 81       	ldd	r18, Y+1	; 0x01
    174c:	3a 81       	ldd	r19, Y+2	; 0x02
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	ad 81       	ldd	r26, Y+5	; 0x05
    1754:	be 81       	ldd	r27, Y+6	; 0x06
    1756:	f9 01       	movw	r30, r18
    1758:	80 87       	std	Z+8, r24	; 0x08
    175a:	91 87       	std	Z+9, r25	; 0x09
    175c:	a2 87       	std	Z+10, r26	; 0x0a
    175e:	b3 87       	std	Z+11, r27	; 0x0b
				}
    1760:	26 96       	adiw	r28, 0x06	; 6
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>:
				
				/**
				 * The number of seconds between pid controller updates. This number
				 * should generally be less than 1. Like .05 for a 20 hz rate.
				 */
				void setIntervalPeriodSecs(double intervalPeriodSecs)
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	00 d0       	rcall	.+0      	; 0x1778 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x6>
    1778:	00 d0       	rcall	.+0      	; 0x177a <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x8>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	4b 83       	std	Y+3, r20	; 0x03
    1784:	5c 83       	std	Y+4, r21	; 0x04
    1786:	6d 83       	std	Y+5, r22	; 0x05
    1788:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->intervalPeriodSecs = intervalPeriodSecs;
    178a:	29 81       	ldd	r18, Y+1	; 0x01
    178c:	3a 81       	ldd	r19, Y+2	; 0x02
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	ad 81       	ldd	r26, Y+5	; 0x05
    1794:	be 81       	ldd	r27, Y+6	; 0x06
    1796:	f9 01       	movw	r30, r18
    1798:	80 a3       	std	Z+32, r24	; 0x20
    179a:	91 a3       	std	Z+33, r25	; 0x21
    179c:	a2 a3       	std	Z+34, r26	; 0x22
    179e:	b3 a3       	std	Z+35, r27	; 0x23
				}
    17a0:	26 96       	adiw	r28, 0x06	; 6
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>:
				 * keeps increasing despite the helicopter already at the maximum possible control values.
				 * @param yawAntiWindupGain The gain value which represents how fast the integral will
				 * go back to 0 when the servos are saturated.
				 * Some simple rule that have been suggested for the tracking time are ~ Tt = TiTd and Tt = (Ti + Td)/2.
				 */
				void setYawAntiWindupGain(double yawAntiWindupGain)
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x8>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	4b 83       	std	Y+3, r20	; 0x03
    17c4:	5c 83       	std	Y+4, r21	; 0x04
    17c6:	6d 83       	std	Y+5, r22	; 0x05
    17c8:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawAntiWindupGain = yawAntiWindupGain;
    17ca:	29 81       	ldd	r18, Y+1	; 0x01
    17cc:	3a 81       	ldd	r19, Y+2	; 0x02
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	ad 81       	ldd	r26, Y+5	; 0x05
    17d4:	be 81       	ldd	r27, Y+6	; 0x06
    17d6:	f9 01       	movw	r30, r18
    17d8:	80 8b       	std	Z+16, r24	; 0x10
    17da:	91 8b       	std	Z+17, r25	; 0x11
    17dc:	a2 8b       	std	Z+18, r26	; 0x12
    17de:	b3 8b       	std	Z+19, r27	; 0x13
				}
    17e0:	26 96       	adiw	r28, 0x06	; 6
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <_ZN10helicopter10controller13PIDController21setMinYawServoControlEd>:
				/**
				 * The minimum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no smaller than the controlMinValue (e.g. no less than -1)
				 */
				void setMinYawServoControl(double minYawServoControlValue)
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <_ZN10helicopter10controller13PIDController21setMinYawServoControlEd+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <_ZN10helicopter10controller13PIDController21setMinYawServoControlEd+0x8>
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	4b 83       	std	Y+3, r20	; 0x03
    1804:	5c 83       	std	Y+4, r21	; 0x04
    1806:	6d 83       	std	Y+5, r22	; 0x05
    1808:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->minYawServoControlValue = minYawServoControlValue;
    180a:	29 81       	ldd	r18, Y+1	; 0x01
    180c:	3a 81       	ldd	r19, Y+2	; 0x02
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	ad 81       	ldd	r26, Y+5	; 0x05
    1814:	be 81       	ldd	r27, Y+6	; 0x06
    1816:	f9 01       	movw	r30, r18
    1818:	84 8b       	std	Z+20, r24	; 0x14
    181a:	95 8b       	std	Z+21, r25	; 0x15
    181c:	a6 8b       	std	Z+22, r26	; 0x16
    181e:	b7 8b       	std	Z+23, r27	; 0x17
				}
    1820:	26 96       	adiw	r28, 0x06	; 6
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEd>:
				/**
				 * The maximum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no larger than the controlMaxValue (e.g. no greater than 1)
				 */
				void setMaxYawServoControl(double maxYawServoControlValue)
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	00 d0       	rcall	.+0      	; 0x1838 <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEd+0x6>
    1838:	00 d0       	rcall	.+0      	; 0x183a <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEd+0x8>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	4b 83       	std	Y+3, r20	; 0x03
    1844:	5c 83       	std	Y+4, r21	; 0x04
    1846:	6d 83       	std	Y+5, r22	; 0x05
    1848:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->maxYawServoControlValue = maxYawServoControlValue;
    184a:	29 81       	ldd	r18, Y+1	; 0x01
    184c:	3a 81       	ldd	r19, Y+2	; 0x02
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	ad 81       	ldd	r26, Y+5	; 0x05
    1854:	be 81       	ldd	r27, Y+6	; 0x06
    1856:	f9 01       	movw	r30, r18
    1858:	80 8f       	std	Z+24, r24	; 0x18
    185a:	91 8f       	std	Z+25, r25	; 0x19
    185c:	a2 8f       	std	Z+26, r26	; 0x1a
    185e:	b3 8f       	std	Z+27, r27	; 0x1b
				}
    1860:	26 96       	adiw	r28, 0x06	; 6
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>:
				
				/**
				 * This is the maximum possible output value for a control signal.
				 * Generally, this should be set to 1.
				 */
				void setControlMaxValue(double controlMaxValue)
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x8>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	4b 83       	std	Y+3, r20	; 0x03
    1884:	5c 83       	std	Y+4, r21	; 0x04
    1886:	6d 83       	std	Y+5, r22	; 0x05
    1888:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMaxValue = controlMaxValue;
    188a:	29 81       	ldd	r18, Y+1	; 0x01
    188c:	3a 81       	ldd	r19, Y+2	; 0x02
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	ad 81       	ldd	r26, Y+5	; 0x05
    1894:	be 81       	ldd	r27, Y+6	; 0x06
    1896:	f9 01       	movw	r30, r18
    1898:	84 a3       	std	Z+36, r24	; 0x24
    189a:	95 a3       	std	Z+37, r25	; 0x25
    189c:	a6 a3       	std	Z+38, r26	; 0x26
    189e:	b7 a3       	std	Z+39, r27	; 0x27
				}
    18a0:	26 96       	adiw	r28, 0x06	; 6
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>:
				
				/**
				 * This is the minimum possible value for a control signal.
				 * Generally, this should be set to -1.
				 */
				void setControlMinValue(double controlMinValue)
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x8>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	4b 83       	std	Y+3, r20	; 0x03
    18c4:	5c 83       	std	Y+4, r21	; 0x04
    18c6:	6d 83       	std	Y+5, r22	; 0x05
    18c8:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMinValue = controlMinValue;
    18ca:	29 81       	ldd	r18, Y+1	; 0x01
    18cc:	3a 81       	ldd	r19, Y+2	; 0x02
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	ad 81       	ldd	r26, Y+5	; 0x05
    18d4:	be 81       	ldd	r27, Y+6	; 0x06
    18d6:	f9 01       	movw	r30, r18
    18d8:	80 a7       	std	Z+40, r24	; 0x28
    18da:	91 a7       	std	Z+41, r25	; 0x29
    18dc:	a2 a7       	std	Z+42, r26	; 0x2a
    18de:	b3 a7       	std	Z+43, r27	; 0x2b
				}			
    18e0:	26 96       	adiw	r28, 0x06	; 6
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>:
using namespace helicopter::interfaces;
using namespace helicopter::model;
using namespace helicopter::controller;

void setupDefaultsandReferencePosition(SystemModel *model, PIDController *pidController)
{	
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE+0x6>
    18f8:	1f 92       	push	r1
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	7c 83       	std	Y+4, r23	; 0x04
    1904:	6b 83       	std	Y+3, r22	; 0x03
	model->ReferenceMagYawDegrees(0.0);
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	ba 01       	movw	r22, r20
    1910:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>
	model->ReferenceYawVelocityDegreesPerSecond(0.0);
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	ba 01       	movw	r22, r20
    191e:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>
	
	pidController->setYawProportionalGain(3.0);
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	60 e4       	ldi	r22, 0x40	; 64
    192c:	70 e4       	ldi	r23, 0x40	; 64
    192e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>
	pidController->setYawIntegralGain(.008);
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	4f e6       	ldi	r20, 0x6F	; 111
    1938:	52 e1       	ldi	r21, 0x12	; 18
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	7c e3       	ldi	r23, 0x3C	; 60
    193e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>
	pidController->setYawDerivativeGain(.85);
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	4a e9       	ldi	r20, 0x9A	; 154
    1948:	59 e9       	ldi	r21, 0x99	; 153
    194a:	69 e5       	ldi	r22, 0x59	; 89
    194c:	7f e3       	ldi	r23, 0x3F	; 63
    194e:	0e 94 99 0b 	call	0x1732	; 0x1732 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>

	//TODO: Don't forget that there is a difference between how often the sensors
	//are read and how often the control algorithm runs. 
	pidController->setIntervalPeriodSecs(PID_OUTER_LOOP_PERIOD);
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	4d ec       	ldi	r20, 0xCD	; 205
    1958:	5c ec       	ldi	r21, 0xCC	; 204
    195a:	6c e4       	ldi	r22, 0x4C	; 76
    195c:	7d e3       	ldi	r23, 0x3D	; 61
    195e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>
	pidController->setYawAntiWindupGain(.1);
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	4d ec       	ldi	r20, 0xCD	; 205
    1968:	5c ec       	ldi	r21, 0xCC	; 204
    196a:	6c ec       	ldi	r22, 0xCC	; 204
    196c:	7d e3       	ldi	r23, 0x3D	; 61
    196e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>

//pidController->setMinYawServoControl (-10);
//pidController->setMaxYawServoControl(10);


	pidController->setMinYawServoControl (-1.0d);
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	60 e8       	ldi	r22, 0x80	; 128
    197c:	7f eb       	ldi	r23, 0xBF	; 191
    197e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN10helicopter10controller13PIDController21setMinYawServoControlEd>
	pidController->setMaxYawServoControl (1.0d);
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	60 e8       	ldi	r22, 0x80	; 128
    198c:	7f e3       	ldi	r23, 0x3F	; 63
    198e:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN10helicopter10controller13PIDController21setMaxYawServoControlEd>


	pidController->setControlMaxValue(1.0d);
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	60 e8       	ldi	r22, 0x80	; 128
    199c:	7f e3       	ldi	r23, 0x3F	; 63
    199e:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>
	pidController->setControlMinValue(-1.0d);
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	60 e8       	ldi	r22, 0x80	; 128
    19ac:	7f eb       	ldi	r23, 0xBF	; 191
    19ae:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	08 95       	ret

000019c0 <main>:


int main(void)
{	
    19c0:	af 92       	push	r10
    19c2:	bf 92       	push	r11
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	66 97       	sbiw	r28, 0x16	; 22
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
    19e4:	84 e3       	ldi	r24, 0x34	; 52
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    19ec:	8c 01       	movw	r16, r24
    19ee:	c8 01       	movw	r24, r16
    19f0:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN10helicopter5model11SystemModelC1Ev>
    19f4:	1a 83       	std	Y+2, r17	; 0x02
    19f6:	09 83       	std	Y+1, r16	; 0x01
	
	
	//TODO: This somehow needs to be a simulator servo driver
	//TODO: Setup the code so that it can be setup for a simulator or not setup for a simulator.
	ServoDriver *servoDriver = new ServoDriver();
    19f8:	8a e0       	ldi	r24, 0x0A	; 10
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1a00:	8c 01       	movw	r16, r24
    1a02:	c8 01       	movw	r24, r16
    1a04:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN10helicopter7drivers11ServoDriverC1Ev>
    1a08:	1c 83       	std	Y+4, r17	; 0x04
    1a0a:	0b 83       	std	Y+3, r16	; 0x03
	
	PIDController *pidController = new PIDController(model, servoDriver);
    1a0c:	8c e2       	ldi	r24, 0x2C	; 44
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1a14:	8c 01       	movw	r16, r24
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	a9 01       	movw	r20, r18
    1a20:	bc 01       	movw	r22, r24
    1a22:	c8 01       	movw	r24, r16
    1a24:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>
    1a28:	1e 83       	std	Y+6, r17	; 0x06
    1a2a:	0d 83       	std	Y+5, r16	; 0x05
	
	
	
	setupDefaultsandReferencePosition(model, pidController);
    1a2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	b9 01       	movw	r22, r18
    1a36:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 10); //Good timeout when using the USB
    1a3a:	88 e0       	ldi	r24, 0x08	; 8
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1a42:	6c 01       	movw	r12, r24
    1a44:	1a e0       	ldi	r17, 0x0A	; 10
    1a46:	e1 2e       	mov	r14, r17
    1a48:	f1 2c       	mov	r15, r1
    1a4a:	00 e0       	ldi	r16, 0x00	; 0
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	34 e0       	ldi	r19, 0x04	; 4
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	54 e2       	ldi	r21, 0x24	; 36
    1a56:	64 ef       	ldi	r22, 0xF4	; 244
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	c6 01       	movw	r24, r12
    1a5c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>
    1a60:	d8 86       	std	Y+8, r13	; 0x08
    1a62:	cf 82       	std	Y+7, r12	; 0x07
	
	//Create a driver for communicating with the Ground Control Station (GCS).
	//SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);  
	SerialDriver *serialDriver = new SerialDriver(76800, SerialDriver::Zero, timer, true, true);  
    1a64:	8b e0       	ldi	r24, 0x0B	; 11
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1a6c:	5c 01       	movw	r10, r24
    1a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a70:	98 85       	ldd	r25, Y+8	; 0x08
    1a72:	cc 24       	eor	r12, r12
    1a74:	c3 94       	inc	r12
    1a76:	ee 24       	eor	r14, r14
    1a78:	e3 94       	inc	r14
    1a7a:	8c 01       	movw	r16, r24
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	5c e2       	ldi	r21, 0x2C	; 44
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	c5 01       	movw	r24, r10
    1a88:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>
    1a8c:	ba 86       	std	Y+10, r11	; 0x0a
    1a8e:	a9 86       	std	Y+9, r10	; 0x09
	serialDriver->initialize();
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	fc 01       	movw	r30, r24
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	04 96       	adiw	r24, 0x04	; 4
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 81       	ld	r18, Z
    1aa0:	31 81       	ldd	r19, Z+1	; 0x01
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	f9 01       	movw	r30, r18
    1aa8:	19 95       	eicall
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver);
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1ab2:	8c 01       	movw	r16, r24
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	bc 01       	movw	r22, r24
    1aba:	c8 01       	movw	r24, r16
    1abc:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>
    1ac0:	1c 87       	std	Y+12, r17	; 0x0c
    1ac2:	0b 87       	std	Y+11, r16	; 0x0b
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 20 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 20 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, pidController,0, 4);//starting at tick 0, execute 50 times a second
    1ac4:	8d e0       	ldi	r24, 0x0D	; 13
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1acc:	6c 01       	movw	r12, r24
    1ace:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad2:	49 81       	ldd	r20, Y+1	; 0x01
    1ad4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ad6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ada:	68 94       	set
    1adc:	ee 24       	eor	r14, r14
    1ade:	e2 f8       	bld	r14, 2
    1ae0:	f1 2c       	mov	r15, r1
    1ae2:	00 e0       	ldi	r16, 0x00	; 0
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	c6 01       	movw	r24, r12
    1aea:	0e 94 ca 1b 	call	0x3794	; 0x3794 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEPNS_10controller13PIDControllerEii>
    1aee:	de 86       	std	Y+14, r13	; 0x0e
    1af0:	cd 86       	std	Y+13, r12	; 0x0d
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
    1af2:	8b e0       	ldi	r24, 0x0B	; 11
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1afa:	7c 01       	movw	r14, r24
    1afc:	49 81       	ldd	r20, Y+1	; 0x01
    1afe:	5a 81       	ldd	r21, Y+2	; 0x02
    1b00:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b02:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b04:	04 e0       	ldi	r16, 0x04	; 4
    1b06:	10 e0       	ldi	r17, 0x00	; 0
    1b08:	21 e0       	ldi	r18, 0x01	; 1
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	c7 01       	movw	r24, r14
    1b10:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    1b14:	f8 8a       	std	Y+16, r15	; 0x10
    1b16:	ef 86       	std	Y+15, r14	; 0x0f
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
    1b18:	8a e0       	ldi	r24, 0x0A	; 10
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1b20:	8c 01       	movw	r16, r24
    1b22:	23 e0       	ldi	r18, 0x03	; 3
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	46 e4       	ldi	r20, 0x46	; 70
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	62 e0       	ldi	r22, 0x02	; 2
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	c8 01       	movw	r24, r16
    1b30:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>
    1b34:	1a 8b       	std	Y+18, r17	; 0x12
    1b36:	09 8b       	std	Y+17, r16	; 0x11
		
		
	//execute the pid outer loop at the PID_OUTER_LOOP_PERIOD rate. The division is to convert the period into ticks for the scheduler.
	PIDOuterLoopTask *pidOuterLoop = new PIDOuterLoopTask(pidController, 3, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    1b38:	89 e0       	ldi	r24, 0x09	; 9
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    1b40:	8c 01       	movw	r16, r24
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	23 e0       	ldi	r18, 0x03	; 3
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	43 e0       	ldi	r20, 0x03	; 3
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	bc 01       	movw	r22, r24
    1b50:	c8 01       	movw	r24, r16
    1b52:	0e 94 4d 1b 	call	0x369a	; 0x369a <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>
    1b56:	1c 8b       	std	Y+20, r17	; 0x14
    1b58:	0b 8b       	std	Y+19, r16	; 0x13
	
	

	Scheduler *scheduler = Scheduler::getScheduler();
    1b5a:	0e 94 a9 18 	call	0x3152	; 0x3152 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1b5e:	9e 8b       	std	Y+22, r25	; 0x16
    1b60:	8d 8b       	std	Y+21, r24	; 0x15
	
	scheduler->addTask(flashTask);
    1b62:	29 89       	ldd	r18, Y+17	; 0x11
    1b64:	3a 89       	ldd	r19, Y+18	; 0x12
    1b66:	8d 89       	ldd	r24, Y+21	; 0x15
    1b68:	9e 89       	ldd	r25, Y+22	; 0x16
    1b6a:	b9 01       	movw	r22, r18
    1b6c:	0e 94 39 19 	call	0x3272	; 0x3272 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
    1b70:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b72:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b74:	8d 89       	ldd	r24, Y+21	; 0x15
    1b76:	9e 89       	ldd	r25, Y+22	; 0x16
    1b78:	b9 01       	movw	r22, r18
    1b7a:	0e 94 39 19 	call	0x3272	; 0x3272 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
    1b7e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1b80:	38 89       	ldd	r19, Y+16	; 0x10
    1b82:	8d 89       	ldd	r24, Y+21	; 0x15
    1b84:	9e 89       	ldd	r25, Y+22	; 0x16
    1b86:	b9 01       	movw	r22, r18
    1b88:	0e 94 39 19 	call	0x3272	; 0x3272 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidOuterLoop);
    1b8c:	2b 89       	ldd	r18, Y+19	; 0x13
    1b8e:	3c 89       	ldd	r19, Y+20	; 0x14
    1b90:	8d 89       	ldd	r24, Y+21	; 0x15
    1b92:	9e 89       	ldd	r25, Y+22	; 0x16
    1b94:	b9 01       	movw	r22, r18
    1b96:	0e 94 39 19 	call	0x3272	; 0x3272 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
    1b9a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b9e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
    1ba2:	8d 89       	ldd	r24, Y+21	; 0x15
    1ba4:	9e 89       	ldd	r25, Y+22	; 0x16
    1ba6:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN10helicopter9scheduler9Scheduler5startEv>
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <main+0x1ee>
	
	
	while(1)
    1bac:	00 00       	nop
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
    1bae:	8d 89       	ldd	r24, Y+21	; 0x15
    1bb0:	9e 89       	ldd	r25, Y+22	; 0x16
    1bb2:	0e 94 d5 19 	call	0x33aa	; 0x33aa <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
		
		/**
		 * Determine if the last processing frame was blown.
		 */
		if (scheduler->hasBlownFrame())
    1bb6:	8d 89       	ldd	r24, Y+21	; 0x15
    1bb8:	9e 89       	ldd	r25, Y+22	; 0x16
    1bba:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEv>
    1bbe:	88 23       	and	r24, r24
    1bc0:	a9 f3       	breq	.-22     	; 0x1bac <main+0x1ec>
		{
			pidController->addBlownFrame();
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN10helicopter10controller13PIDController13addBlownFrameEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
    1bca:	f0 cf       	rjmp	.-32     	; 0x1bac <main+0x1ec>

00001bcc <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	1f 92       	push	r1
    1bd2:	1f 92       	push	r1
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	22 e2       	ldi	r18, 0x22	; 34
    1be2:	32 e0       	ldi	r19, 0x02	; 2
    1be4:	fc 01       	movw	r30, r24
    1be6:	31 83       	std	Z+1, r19	; 0x01
    1be8:	20 83       	st	Z, r18
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	81 70       	andi	r24, 0x01	; 1
    1bf8:	99 27       	eor	r25, r25
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	21 f0       	breq	.+8      	; 0x1c06 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev+0x3a>
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	1f 92       	push	r1
    1c16:	1f 92       	push	r1
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	2d 97       	sbiw	r28, 0x0d	; 13
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	9d 83       	std	Y+5, r25	; 0x05
    1c54:	8c 83       	std	Y+4, r24	; 0x04
    1c56:	7f 83       	std	Y+7, r23	; 0x07
    1c58:	6e 83       	std	Y+6, r22	; 0x06
    1c5a:	59 87       	std	Y+9, r21	; 0x09
    1c5c:	48 87       	std	Y+8, r20	; 0x08
    1c5e:	3b 87       	std	Y+11, r19	; 0x0b
    1c60:	2a 87       	std	Y+10, r18	; 0x0a
    1c62:	1d 87       	std	Y+13, r17	; 0x0d
    1c64:	0c 87       	std	Y+12, r16	; 0x0c
	for (int i = 0; i < payloadSize; i++)
    1c66:	1a 82       	std	Y+2, r1	; 0x02
    1c68:	19 82       	std	Y+1, r1	; 0x01
    1c6a:	26 c0       	rjmp	.+76     	; 0x1cb8 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x7e>
	{
		byte b = msgPayload[i];
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	2e 81       	ldd	r18, Y+6	; 0x06
    1c72:	3f 81       	ldd	r19, Y+7	; 0x07
    1c74:	82 0f       	add	r24, r18
    1c76:	93 1f       	adc	r25, r19
    1c78:	fc 01       	movw	r30, r24
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
    1c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c82:	fc 01       	movw	r30, r24
    1c84:	90 81       	ld	r25, Z
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	29 2f       	mov	r18, r25
    1c8a:	28 0f       	add	r18, r24
    1c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
    1c94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c96:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 81       	ld	r18, Z
    1c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 0f       	add	r18, r24
    1ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ca8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	29 81       	ldd	r18, Y+1	; 0x01
    1cbc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cbe:	88 85       	ldd	r24, Y+8	; 0x08
    1cc0:	99 85       	ldd	r25, Y+9	; 0x09
    1cc2:	28 17       	cp	r18, r24
    1cc4:	39 07       	cpc	r19, r25
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x90>
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	44 23       	and	r20, r20
    1ccc:	79 f6       	brne	.-98     	; 0x1c6c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x32>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
    1cce:	2d 96       	adiw	r28, 0x0d	; 13
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	64 97       	sbiw	r28, 0x14	; 20
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	9a 8b       	std	Y+18, r25	; 0x12
    1d06:	89 8b       	std	Y+17, r24	; 0x11
    1d08:	7c 8b       	std	Y+20, r23	; 0x14
    1d0a:	6b 8b       	std	Y+19, r22	; 0x13
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
    1d0c:	ed b6       	in	r14, 0x3d	; 61
    1d0e:	fe b6       	in	r15, 0x3e	; 62
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
    1d10:	1a 82       	std	Y+2, r1	; 0x02
    1d12:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
    1d14:	8b 89       	ldd	r24, Y+19	; 0x13
    1d16:	9c 89       	ldd	r25, Y+20	; 0x14
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3a>
    1d1c:	b3 c0       	rjmp	.+358    	; 0x1e84 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1a0>
    1d1e:	8d b7       	in	r24, 0x3d	; 61
    1d20:	9e b7       	in	r25, 0x3e	; 62
    1d22:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	fc 01       	movw	r30, r24
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	04 96       	adiw	r24, 0x04	; 4
    1d30:	fc 01       	movw	r30, r24
    1d32:	20 81       	ld	r18, Z
    1d34:	31 81       	ldd	r19, Z+1	; 0x01
    1d36:	8b 89       	ldd	r24, Y+19	; 0x13
    1d38:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3a:	f9 01       	movw	r30, r18
    1d3c:	19 95       	eicall
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN10helicopter8messages7Message14getMessageSizeEv>
    1d4a:	98 87       	std	Y+8, r25	; 0x08
    1d4c:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	98 85       	ldd	r25, Y+8	; 0x08
    1d52:	05 96       	adiw	r24, 0x05	; 5
    1d54:	9a 87       	std	Y+10, r25	; 0x0a
    1d56:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	8b 87       	std	Y+11, r24	; 0x0b
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	2d b7       	in	r18, 0x3d	; 61
    1d66:	3e b7       	in	r19, 0x3e	; 62
    1d68:	28 1b       	sub	r18, r24
    1d6a:	39 0b       	sbc	r19, r25
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	3e bf       	out	0x3e, r19	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	2d bf       	out	0x3d, r18	; 61
    1d76:	8d b7       	in	r24, 0x3d	; 61
    1d78:	9e b7       	in	r25, 0x3e	; 62
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	9e 87       	std	Y+14, r25	; 0x0e
    1d7e:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	25 eb       	ldi	r18, 0xB5	; 181
    1d86:	fc 01       	movw	r30, r24
    1d88:	20 83       	st	Z, r18
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
    1d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8e:	22 e6       	ldi	r18, 0x62	; 98
    1d90:	fc 01       	movw	r30, r24
    1d92:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
    1d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d98:	27 ed       	ldi	r18, 0xD7	; 215
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
    1d9e:	4f 81       	ldd	r20, Y+7	; 0x07
    1da0:	58 85       	ldd	r21, Y+8	; 0x08
    1da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da6:	03 96       	adiw	r24, 0x03	; 3
    1da8:	2d 81       	ldd	r18, Y+5	; 0x05
    1daa:	3e 81       	ldd	r19, Y+6	; 0x06
    1dac:	b9 01       	movw	r22, r18
    1dae:	0e 94 c6 23 	call	0x478c	; 0x478c <memcpy>
		
		byte checksumA = 0;
    1db2:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
    1db4:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
    1db6:	fe 01       	movw	r30, r28
    1db8:	70 96       	adiw	r30, 0x10	; 16
    1dba:	9e 01       	movw	r18, r28
    1dbc:	21 5f       	subi	r18, 0xF1	; 241
    1dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc0:	4f 81       	ldd	r20, Y+7	; 0x07
    1dc2:	58 85       	ldd	r21, Y+8	; 0x08
    1dc4:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc6:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc8:	89 89       	ldd	r24, Y+17	; 0x11
    1dca:	9a 89       	ldd	r25, Y+18	; 0x12
    1dcc:	8f 01       	movw	r16, r30
    1dce:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	02 97       	sbiw	r24, 0x02	; 2
    1dd8:	4f 85       	ldd	r20, Y+15	; 0x0f
    1dda:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ddc:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dde:	82 0f       	add	r24, r18
    1de0:	93 1f       	adc	r25, r19
    1de2:	fc 01       	movw	r30, r24
    1de4:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	48 89       	ldd	r20, Y+16	; 0x10
    1dee:	2d 85       	ldd	r18, Y+13	; 0x0d
    1df0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1df2:	82 0f       	add	r24, r18
    1df4:	93 1f       	adc	r25, r19
    1df6:	fc 01       	movw	r30, r24
    1df8:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1dfa:	1c 82       	std	Y+4, r1	; 0x04
    1dfc:	1b 82       	std	Y+3, r1	; 0x03
    1dfe:	23 c0       	rjmp	.+70     	; 0x1e46 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x162>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
    1e00:	89 89       	ldd	r24, Y+17	; 0x11
    1e02:	9a 89       	ldd	r25, Y+18	; 0x12
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	06 96       	adiw	r24, 0x06	; 6
    1e12:	fc 01       	movw	r30, r24
    1e14:	20 81       	ld	r18, Z
    1e16:	31 81       	ldd	r19, Z+1	; 0x01
    1e18:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e1a:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	84 0f       	add	r24, r20
    1e22:	95 1f       	adc	r25, r21
    1e24:	fc 01       	movw	r30, r24
    1e26:	40 81       	ld	r20, Z
    1e28:	89 89       	ldd	r24, Y+17	; 0x11
    1e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	64 2f       	mov	r22, r20
    1e34:	f9 01       	movw	r30, r18
    1e36:	19 95       	eicall
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	28 17       	cp	r18, r24
    1e50:	39 07       	cpc	r19, r25
    1e52:	34 f4       	brge	.+12     	; 0x1e60 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	11 f4       	brne	.+4      	; 0x1e60 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17e>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	88 23       	and	r24, r24
    1e64:	69 f6       	brne	.-102    	; 0x1e00 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x11c>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete [] msgPayload;
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x192>
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <_ZdaPv>
		msgPayload = NULL;
    1e76:	1e 82       	std	Y+6, r1	; 0x06
    1e78:	1d 82       	std	Y+5, r1	; 0x05
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de be       	out	0x3e, r13	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	fe be       	out	0x3e, r15	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	ed be       	out	0x3d, r14	; 61
    1e92:	64 96       	adiw	r28, 0x14	; 20
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	df 90       	pop	r13
    1eac:	cf 90       	pop	r12
    1eae:	08 95       	ret

00001eb0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
    1eb0:	cf 92       	push	r12
    1eb2:	df 92       	push	r13
    1eb4:	ef 92       	push	r14
    1eb6:	ff 92       	push	r15
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	66 97       	sbiw	r28, 0x16	; 22
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
    1ed4:	7e 8b       	std	Y+22, r23	; 0x16
    1ed6:	6d 8b       	std	Y+21, r22	; 0x15
	{
		receivedMessage = NULL;
	}
	
	return status;
    1ed8:	ed b6       	in	r14, 0x3d	; 61
    1eda:	fe b6       	in	r15, 0x3e	; 62
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
    1edc:	1a 82       	std	Y+2, r1	; 0x02
    1ede:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
    1ee0:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
    1ee2:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
    1ee4:	1d 86       	std	Y+13, r1	; 0x0d
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1ee6:	1d c0       	rjmp	.+58     	; 0x1f22 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x72>
	{
		firstSyncByte = secondSyncByte;
    1ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
    1eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eee:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte);
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	fc 01       	movw	r30, r24
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	08 96       	adiw	r24, 0x08	; 8
    1f02:	fc 01       	movw	r30, r24
    1f04:	20 81       	ld	r18, Z
    1f06:	31 81       	ldd	r19, Z+1	; 0x01
    1f08:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	ae 01       	movw	r20, r28
    1f14:	43 5f       	subi	r20, 0xF3	; 243
    1f16:	5f 4f       	sbci	r21, 0xFF	; 255
    1f18:	ba 01       	movw	r22, r20
    1f1a:	f9 01       	movw	r30, r18
    1f1c:	19 95       	eicall
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    byte thirdSyncByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	85 3b       	cpi	r24, 0xB5	; 181
    1f26:	31 f4       	brne	.+12     	; 0x1f34 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	82 36       	cpi	r24, 0x62	; 98
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	87 3d       	cpi	r24, 0xD7	; 215
    1f32:	31 f0       	breq	.+12     	; 0x1f40 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x92>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	88 23       	and	r24, r24
    1f44:	89 f6       	brne	.-94     	; 0x1ee8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x38>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receiveByte(thirdSyncByte);
	}
	
	if (status == 0)
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa0>
    1f4e:	f9 c0       	rjmp	.+498    	; 0x2142 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
    1f50:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType);
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	fc 01       	movw	r30, r24
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	80 81       	ld	r24, Z
    1f60:	91 81       	ldd	r25, Z+1	; 0x01
    1f62:	08 96       	adiw	r24, 0x08	; 8
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 81       	ld	r18, Z
    1f68:	31 81       	ldd	r19, Z+1	; 0x01
    1f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6e:	fc 01       	movw	r30, r24
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	ae 01       	movw	r20, r28
    1f76:	42 5f       	subi	r20, 0xF2	; 242
    1f78:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7a:	ba 01       	movw	r22, r20
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	19 95       	eicall
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xde>
    1f8c:	da c0       	rjmp	.+436    	; 0x2142 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
		{
			int msgSize = 0;
    1f8e:	1e 82       	std	Y+6, r1	; 0x06
    1f90:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
    1f92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	29 f4       	brne	.+10     	; 0x1fa8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xf8>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
    1f9e:	89 e3       	ldi	r24, 0x39	; 57
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
					break;
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x102>
				default:
					//unrecognized message type.
					status = -2;
    1fa8:	8e ef       	ldi	r24, 0xFE	; 254
    1faa:	9f ef       	ldi	r25, 0xFF	; 255
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
					break;
    1fb0:	00 00       	nop
			}
			
			if (status == 0)
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x10c>
    1fba:	c3 c0       	rjmp	.+390    	; 0x2142 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
    1fbc:	8d b7       	in	r24, 0x3d	; 61
    1fbe:	9e b7       	in	r25, 0x3e	; 62
    1fc0:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9a 87       	std	Y+10, r25	; 0x0a
    1fca:	89 87       	std	Y+9, r24	; 0x09
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	2d b7       	in	r18, 0x3d	; 61
    1fd0:	3e b7       	in	r19, 0x3e	; 62
    1fd2:	28 1b       	sub	r18, r24
    1fd4:	39 0b       	sbc	r19, r25
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	3e bf       	out	0x3e, r19	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	2d bf       	out	0x3d, r18	; 61
    1fe0:	8d b7       	in	r24, 0x3d	; 61
    1fe2:	9e b7       	in	r25, 0x3e	; 62
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
    1fea:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fee:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	20 83       	st	Z, r18
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	98 87       	std	Y+8, r25	; 0x08
    1ffa:	8f 83       	std	Y+7, r24	; 0x07
    1ffc:	21 c0       	rjmp	.+66     	; 0x2040 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x190>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	fc 01       	movw	r30, r24
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	fc 01       	movw	r30, r24
    200a:	80 81       	ld	r24, Z
    200c:	91 81       	ldd	r25, Z+1	; 0x01
    200e:	08 96       	adiw	r24, 0x08	; 8
    2010:	fc 01       	movw	r30, r24
    2012:	20 81       	ld	r18, Z
    2014:	31 81       	ldd	r19, Z+1	; 0x01
    2016:	4b 85       	ldd	r20, Y+11	; 0x0b
    2018:	5c 85       	ldd	r21, Y+12	; 0x0c
    201a:	8f 81       	ldd	r24, Y+7	; 0x07
    201c:	98 85       	ldd	r25, Y+8	; 0x08
    201e:	48 0f       	add	r20, r24
    2020:	59 1f       	adc	r21, r25
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	fc 01       	movw	r30, r24
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	ba 01       	movw	r22, r20
    202e:	f9 01       	movw	r30, r18
    2030:	19 95       	eicall
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    2036:	8f 81       	ldd	r24, Y+7	; 0x07
    2038:	98 85       	ldd	r25, Y+8	; 0x08
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	98 87       	std	Y+8, r25	; 0x08
    203e:	8f 83       	std	Y+7, r24	; 0x07
    2040:	2f 81       	ldd	r18, Y+7	; 0x07
    2042:	38 85       	ldd	r19, Y+8	; 0x08
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	28 17       	cp	r18, r24
    204a:	39 07       	cpc	r19, r25
    204c:	34 f4       	brge	.+12     	; 0x205a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	11 f4       	brne	.+4      	; 0x205a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	01 c0       	rjmp	.+2      	; 0x205c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ac>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	88 23       	and	r24, r24
    205e:	79 f6       	brne	.-98     	; 0x1ffe <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x14e>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
				}
							
				if (status == 0)
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	09 f0       	breq	.+2      	; 0x206a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ba>
    2068:	67 c0       	rjmp	.+206    	; 0x2138 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
    206a:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
    206c:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
    206e:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
    2070:	1a 8a       	std	Y+18, r1	; 0x12
								
					//Note: status is getting overwritten here.
					status = serialDriver->receiveByte(messageChecksumA);
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	fc 01       	movw	r30, r24
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	fc 01       	movw	r30, r24
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	08 96       	adiw	r24, 0x08	; 8
    2084:	fc 01       	movw	r30, r24
    2086:	20 81       	ld	r18, Z
    2088:	31 81       	ldd	r19, Z+1	; 0x01
    208a:	8b 89       	ldd	r24, Y+19	; 0x13
    208c:	9c 89       	ldd	r25, Y+20	; 0x14
    208e:	fc 01       	movw	r30, r24
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	ae 01       	movw	r20, r28
    2096:	41 5f       	subi	r20, 0xF1	; 241
    2098:	5f 4f       	sbci	r21, 0xFF	; 255
    209a:	ba 01       	movw	r22, r20
    209c:	f9 01       	movw	r30, r18
    209e:	19 95       	eicall
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB);
    20a4:	8b 89       	ldd	r24, Y+19	; 0x13
    20a6:	9c 89       	ldd	r25, Y+20	; 0x14
    20a8:	fc 01       	movw	r30, r24
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	08 96       	adiw	r24, 0x08	; 8
    20b6:	fc 01       	movw	r30, r24
    20b8:	20 81       	ld	r18, Z
    20ba:	31 81       	ldd	r19, Z+1	; 0x01
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	fc 01       	movw	r30, r24
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	ae 01       	movw	r20, r28
    20c8:	40 5f       	subi	r20, 0xF0	; 240
    20ca:	5f 4f       	sbci	r21, 0xFF	; 255
    20cc:	ba 01       	movw	r22, r20
    20ce:	f9 01       	movw	r30, r18
    20d0:	19 95       	eicall
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	fe 01       	movw	r30, r28
    20dc:	72 96       	adiw	r30, 0x12	; 18
    20de:	9e 01       	movw	r18, r28
    20e0:	2f 5e       	subi	r18, 0xEF	; 239
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	4d 81       	ldd	r20, Y+5	; 0x05
    20e6:	5e 81       	ldd	r21, Y+6	; 0x06
    20e8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ea:	9c 89       	ldd	r25, Y+20	; 0x14
    20ec:	8f 01       	movw	r16, r30
    20ee:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
    20f2:	99 89       	ldd	r25, Y+17	; 0x11
    20f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f6:	98 17       	cp	r25, r24
    20f8:	d9 f4       	brne	.+54     	; 0x2130 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
    20fa:	9a 89       	ldd	r25, Y+18	; 0x12
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	98 17       	cp	r25, r24
    2100:	b9 f4       	brne	.+46     	; 0x2130 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
					{
						//build the message
						switch(msgType)
    2102:	8e 85       	ldd	r24, Y+14	; 0x0e
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	91 05       	cpc	r25, r1
    210c:	59 f4       	brne	.+22     	; 0x2124 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x274>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
    210e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2110:	9c 85       	ldd	r25, Y+12	; 0x0c
    2112:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
    2116:	9c 01       	movw	r18, r24
    2118:	8d 89       	ldd	r24, Y+21	; 0x15
    211a:	9e 89       	ldd	r25, Y+22	; 0x16
    211c:	fc 01       	movw	r30, r24
    211e:	31 83       	std	Z+1, r19	; 0x01
    2120:	20 83       	st	Z, r18
							break;
    2122:	05 c0       	rjmp	.+10     	; 0x212e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x27e>
							default:
								//unrecognized message type.
								status = -2;
    2124:	8e ef       	ldi	r24, 0xFE	; 254
    2126:	9f ef       	ldi	r25, 0xFF	; 255
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
							break;
    212c:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -3;
    2130:	8d ef       	ldi	r24, 0xFD	; 253
    2132:	9f ef       	ldi	r25, 0xFF	; 255
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de be       	out	0x3e, r13	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	29 f0       	breq	.+10     	; 0x2154 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2a4>
	{
		receivedMessage = NULL;
    214a:	8d 89       	ldd	r24, Y+21	; 0x15
    214c:	9e 89       	ldd	r25, Y+22	; 0x16
    214e:	fc 01       	movw	r30, r24
    2150:	11 82       	std	Z+1, r1	; 0x01
    2152:	10 82       	st	Z, r1
	}
	
	return status;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	fe be       	out	0x3e, r15	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	ed be       	out	0x3d, r14	; 61
    2162:	66 96       	adiw	r28, 0x16	; 22
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	ff 90       	pop	r15
    2178:	ef 90       	pop	r14
    217a:	df 90       	pop	r13
    217c:	cf 90       	pop	r12
    217e:	08 95       	ret

00002180 <_ZN10helicopter8messages7MessageD1Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	1f 92       	push	r1
    2186:	1f 92       	push	r1
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
				{
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	20 e3       	ldi	r18, 0x30	; 48
    2196:	32 e0       	ldi	r19, 0x02	; 2
    2198:	fc 01       	movw	r30, r24
    219a:	31 83       	std	Z+1, r19	; 0x01
    219c:	20 83       	st	Z, r18
					
				}
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	81 70       	andi	r24, 0x01	; 1
    21a4:	99 27       	eor	r25, r25
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	21 f0       	breq	.+8      	; 0x21b2 <_ZN10helicopter8messages7MessageD1Ev+0x32>
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	1f 92       	push	r1
    21c2:	1f 92       	push	r1
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN10helicopter8messages7MessageD1Ev>
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret

000021e6 <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	1f 92       	push	r1
    21ec:	1f 92       	push	r1
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	return msgSize;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	fc 01       	movw	r30, r24
    21fc:	83 81       	ldd	r24, Z+3	; 0x03
    21fe:	94 81       	ldd	r25, Z+4	; 0x04
}
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	08 95       	ret

0000220a <_ZN10helicopter8messages7Message8getBytesEv>:
				
/**
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	1f 92       	push	r1
    2210:	1f 92       	push	r1
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
	return NULL;
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	08 95       	ret

00002228 <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	00 d0       	rcall	.+0      	; 0x222e <_ZN10helicopter8messages7Message12buildMessageEPh+0x6>
    222e:	1f 92       	push	r1
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	7c 83       	std	Y+4, r23	; 0x04
    223a:	6b 83       	std	Y+3, r22	; 0x03
	//noop. subclass should implement this.
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret

0000224a <_ZN10helicopter8messages7MessageC1Ehi>:
			
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	00 d0       	rcall	.+0      	; 0x2250 <_ZN10helicopter8messages7MessageC1Ehi+0x6>
    2250:	1f 92       	push	r1
    2252:	1f 92       	push	r1
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	6b 83       	std	Y+3, r22	; 0x03
    225e:	5d 83       	std	Y+5, r21	; 0x05
    2260:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	20 e3       	ldi	r18, 0x30	; 48
    2268:	32 e0       	ldi	r19, 0x02	; 2
    226a:	fc 01       	movw	r30, r24
    226c:	31 83       	std	Z+1, r19	; 0x01
    226e:	20 83       	st	Z, r18
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	2b 81       	ldd	r18, Y+3	; 0x03
    2276:	fc 01       	movw	r30, r24
    2278:	22 83       	std	Z+2, r18	; 0x02
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	2c 81       	ldd	r18, Y+4	; 0x04
    2280:	3d 81       	ldd	r19, Y+5	; 0x05
    2282:	fc 01       	movw	r30, r24
    2284:	34 83       	std	Z+4, r19	; 0x04
    2286:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	08 95       	ret

00002298 <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	1f 92       	push	r1
    229e:	1f 92       	push	r1
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	63 e0       	ldi	r22, 0x03	; 3
    22b2:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN10helicopter8messages7MessageC1Ehi>
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	2c e3       	ldi	r18, 0x3C	; 60
    22bc:	32 e0       	ldi	r19, 0x02	; 2
    22be:	fc 01       	movw	r30, r24
    22c0:	31 83       	std	Z+1, r19	; 0x01
    22c2:	20 83       	st	Z, r18
				{
								
				}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	08 95       	ret

000022ce <_ZN10helicopter8messages11SyncMessageD1Ev>:
				
				~SyncMessage()
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	1f 92       	push	r1
    22d4:	1f 92       	push	r1
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
				{
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	2c e3       	ldi	r18, 0x3C	; 60
    22e4:	32 e0       	ldi	r19, 0x02	; 2
    22e6:	fc 01       	movw	r30, r24
    22e8:	31 83       	std	Z+1, r19	; 0x01
    22ea:	20 83       	st	Z, r18
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN10helicopter8messages7MessageD1Ev>
					
				}
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	81 70       	andi	r24, 0x01	; 1
    22fa:	99 27       	eor	r25, r25
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	21 f0       	breq	.+8      	; 0x2308 <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	08 95       	ret

00002312 <_ZN10helicopter8messages11SyncMessageD0Ev>:
				SyncMessage(): Message(MessageType,MessageSize)
				{
								
				}
				
				~SyncMessage()
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	1f 92       	push	r1
    2318:	1f 92       	push	r1
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN10helicopter8messages11SyncMessageD1Ev>
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	08 95       	ret

0000233c <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	00 d0       	rcall	.+0      	; 0x2342 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
    2342:	00 d0       	rcall	.+0      	; 0x2344 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_Znaj>
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	9c 83       	std	Y+4, r25	; 0x04
    235e:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	fc 01       	movw	r30, r24
    2366:	22 81       	ldd	r18, Z+2	; 0x02
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	fc 01       	movw	r30, r24
    236e:	20 83       	st	Z, r18
	
	return msg;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2374:	26 96       	adiw	r28, 0x06	; 6
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	08 95       	ret

00002386 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:

void SyncMessage::buildMessage(byte *message)
{
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	00 d0       	rcall	.+0      	; 0x238c <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x6>
    238c:	1f 92       	push	r1
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	9a 83       	std	Y+2, r25	; 0x02
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	7c 83       	std	Y+4, r23	; 0x04
    2398:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	41 f0       	breq	.+16     	; 0x23b2 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x2c>
	{
		msgType = message[0];
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	fc 01       	movw	r30, r24
    23a8:	20 81       	ld	r18, Z
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	fc 01       	movw	r30, r24
    23b0:	22 83       	std	Z+2, r18	; 0x02
	}
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <_ZN10helicopter8messages7Message6encodeERPhRl>:
				
				/**
				 * Mem copies the value into the buffer pointer then increments
				 * the pointer location by the size of the value copied.
				 */
				void encode (byte *&buffPtr, long &val)
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <_ZN10helicopter8messages7Message6encodeERPhRl+0x6>
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <_ZN10helicopter8messages7Message6encodeERPhRl+0x8>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	7c 83       	std	Y+4, r23	; 0x04
    23d2:	6b 83       	std	Y+3, r22	; 0x03
    23d4:	5e 83       	std	Y+6, r21	; 0x06
    23d6:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	fc 01       	movw	r30, r24
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	2d 81       	ldd	r18, Y+5	; 0x05
    23e4:	3e 81       	ldd	r19, Y+6	; 0x06
    23e6:	44 e0       	ldi	r20, 0x04	; 4
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	b9 01       	movw	r22, r18
    23ec:	0e 94 c6 23 	call	0x478c	; 0x478c <memcpy>
					buffPtr += sizeof(val);
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	fc 01       	movw	r30, r24
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	9c 01       	movw	r18, r24
    23fc:	2c 5f       	subi	r18, 0xFC	; 252
    23fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	fc 01       	movw	r30, r24
    2406:	31 83       	std	Z+1, r19	; 0x01
    2408:	20 83       	st	Z, r18
				}
    240a:	26 96       	adiw	r28, 0x06	; 6
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	08 95       	ret

0000241c <_ZN10helicopter8messages7Message6encodeERPhRm>:
				
				void encode (byte *&buffPtr, unsigned long &val)
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	00 d0       	rcall	.+0      	; 0x2422 <_ZN10helicopter8messages7Message6encodeERPhRm+0x6>
    2422:	00 d0       	rcall	.+0      	; 0x2424 <_ZN10helicopter8messages7Message6encodeERPhRm+0x8>
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	7c 83       	std	Y+4, r23	; 0x04
    242e:	6b 83       	std	Y+3, r22	; 0x03
    2430:	5e 83       	std	Y+6, r21	; 0x06
    2432:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	fc 01       	movw	r30, r24
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	2d 81       	ldd	r18, Y+5	; 0x05
    2440:	3e 81       	ldd	r19, Y+6	; 0x06
    2442:	44 e0       	ldi	r20, 0x04	; 4
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	b9 01       	movw	r22, r18
    2448:	0e 94 c6 23 	call	0x478c	; 0x478c <memcpy>
					buffPtr += sizeof(val);
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	fc 01       	movw	r30, r24
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	9c 01       	movw	r18, r24
    2458:	2c 5f       	subi	r18, 0xFC	; 252
    245a:	3f 4f       	sbci	r19, 0xFF	; 255
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	fc 01       	movw	r30, r24
    2462:	31 83       	std	Z+1, r19	; 0x01
    2464:	20 83       	st	Z, r18
				}		
    2466:	26 96       	adiw	r28, 0x06	; 6
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	08 95       	ret

00002478 <_ZN10helicopter8messages7Message6encodeERPhRh>:
				
				void encode (byte *&buffPtr, byte &val)
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	00 d0       	rcall	.+0      	; 0x247e <_ZN10helicopter8messages7Message6encodeERPhRh+0x6>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <_ZN10helicopter8messages7Message6encodeERPhRh+0x8>
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	7c 83       	std	Y+4, r23	; 0x04
    248a:	6b 83       	std	Y+3, r22	; 0x03
    248c:	5e 83       	std	Y+6, r21	; 0x06
    248e:	4d 83       	std	Y+5, r20	; 0x05
				{
					*buffPtr = val;
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	fc 01       	movw	r30, r24
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	2d 81       	ldd	r18, Y+5	; 0x05
    249c:	3e 81       	ldd	r19, Y+6	; 0x06
    249e:	f9 01       	movw	r30, r18
    24a0:	20 81       	ld	r18, Z
    24a2:	fc 01       	movw	r30, r24
    24a4:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	fc 01       	movw	r30, r24
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	9c 01       	movw	r18, r24
    24b2:	2f 5f       	subi	r18, 0xFF	; 255
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	fc 01       	movw	r30, r24
    24bc:	31 83       	std	Z+1, r19	; 0x01
    24be:	20 83       	st	Z, r18
				}
    24c0:	26 96       	adiw	r28, 0x06	; 6
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <_ZN10helicopter8messages7Message6decodeERPhRh>:
				
				/**
				 * Copies the the value at the buff pointer location into the given val parameter and
				 * increments the buffer by the sizeof(val)
				 */
				void decode (byte *&buffPtr, byte &val)
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <_ZN10helicopter8messages7Message6decodeERPhRh+0x6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <_ZN10helicopter8messages7Message6decodeERPhRh+0x8>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	7c 83       	std	Y+4, r23	; 0x04
    24e4:	6b 83       	std	Y+3, r22	; 0x03
    24e6:	5e 83       	std	Y+6, r21	; 0x06
    24e8:	4d 83       	std	Y+5, r20	; 0x05
				{
					val = *buffPtr;
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	fc 01       	movw	r30, r24
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	fc 01       	movw	r30, r24
    24f6:	20 81       	ld	r18, Z
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	9e 81       	ldd	r25, Y+6	; 0x06
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	fc 01       	movw	r30, r24
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	9c 01       	movw	r18, r24
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	fc 01       	movw	r30, r24
    2516:	31 83       	std	Z+1, r19	; 0x01
    2518:	20 83       	st	Z, r18
				}
    251a:	26 96       	adiw	r28, 0x06	; 6
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <_ZN10helicopter8messages7Message6decodeERPhRl>:
				
				void decode (byte *&buffPtr, long &val)
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	00 d0       	rcall	.+0      	; 0x2532 <_ZN10helicopter8messages7Message6decodeERPhRl+0x6>
    2532:	00 d0       	rcall	.+0      	; 0x2534 <_ZN10helicopter8messages7Message6decodeERPhRl+0x8>
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	7c 83       	std	Y+4, r23	; 0x04
    253e:	6b 83       	std	Y+3, r22	; 0x03
    2540:	5e 83       	std	Y+6, r21	; 0x06
    2542:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	fc 01       	movw	r30, r24
    254a:	20 81       	ld	r18, Z
    254c:	31 81       	ldd	r19, Z+1	; 0x01
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	44 e0       	ldi	r20, 0x04	; 4
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	b9 01       	movw	r22, r18
    2558:	0e 94 c6 23 	call	0x478c	; 0x478c <memcpy>
					buffPtr += sizeof(val);
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	fc 01       	movw	r30, r24
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	9c 01       	movw	r18, r24
    2568:	2c 5f       	subi	r18, 0xFC	; 252
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	fc 01       	movw	r30, r24
    2572:	31 83       	std	Z+1, r19	; 0x01
    2574:	20 83       	st	Z, r18
				}
    2576:	26 96       	adiw	r28, 0x06	; 6
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	08 95       	ret

00002588 <_ZN10helicopter8messages7Message6decodeERPhRm>:
				
				void decode (byte *&buffPtr, unsigned long &val)
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	00 d0       	rcall	.+0      	; 0x258e <_ZN10helicopter8messages7Message6decodeERPhRm+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <_ZN10helicopter8messages7Message6decodeERPhRm+0x8>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	7c 83       	std	Y+4, r23	; 0x04
    259a:	6b 83       	std	Y+3, r22	; 0x03
    259c:	5e 83       	std	Y+6, r21	; 0x06
    259e:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	fc 01       	movw	r30, r24
    25a6:	20 81       	ld	r18, Z
    25a8:	31 81       	ldd	r19, Z+1	; 0x01
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	44 e0       	ldi	r20, 0x04	; 4
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	b9 01       	movw	r22, r18
    25b4:	0e 94 c6 23 	call	0x478c	; 0x478c <memcpy>
					buffPtr += sizeof(val);
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	fc 01       	movw	r30, r24
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	9c 01       	movw	r18, r24
    25c4:	2c 5f       	subi	r18, 0xFC	; 252
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	fc 01       	movw	r30, r24
    25ce:	31 83       	std	Z+1, r19	; 0x01
    25d0:	20 83       	st	Z, r18
				}
    25d2:	26 96       	adiw	r28, 0x06	; 6
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>:
			 * Z axis is pointing up out of the FC
			 */
			

			double MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(double val) { magYawDegrees = val; }	
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x6>
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x8>
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	4b 83       	std	Y+3, r20	; 0x03
    25f6:	5c 83       	std	Y+4, r21	; 0x04
    25f8:	6d 83       	std	Y+5, r22	; 0x05
    25fa:	7e 83       	std	Y+6, r23	; 0x06
    25fc:	29 81       	ldd	r18, Y+1	; 0x01
    25fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	ad 81       	ldd	r26, Y+5	; 0x05
    2606:	be 81       	ldd	r27, Y+6	; 0x06
    2608:	f9 01       	movw	r30, r18
    260a:	80 83       	st	Z, r24
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	a2 83       	std	Z+2, r26	; 0x02
    2610:	b3 83       	std	Z+3, r27	; 0x03
    2612:	26 96       	adiw	r28, 0x06	; 6
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	00 d0       	rcall	.+0      	; 0x262a <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x6>
    262a:	00 d0       	rcall	.+0      	; 0x262c <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x8>
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	9a 83       	std	Y+2, r25	; 0x02
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	4b 83       	std	Y+3, r20	; 0x03
    2636:	5c 83       	std	Y+4, r21	; 0x04
    2638:	6d 83       	std	Y+5, r22	; 0x05
    263a:	7e 83       	std	Y+6, r23	; 0x06
    263c:	29 81       	ldd	r18, Y+1	; 0x01
    263e:	3a 81       	ldd	r19, Y+2	; 0x02
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	ad 81       	ldd	r26, Y+5	; 0x05
    2646:	be 81       	ldd	r27, Y+6	; 0x06
    2648:	f9 01       	movw	r30, r18
    264a:	80 8b       	std	Z+16, r24	; 0x10
    264c:	91 8b       	std	Z+17, r25	; 0x11
    264e:	a2 8b       	std	Z+18, r26	; 0x12
    2650:	b3 8b       	std	Z+19, r27	; 0x13
    2652:	26 96       	adiw	r28, 0x06	; 6
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

00002664 <_ZNK10helicopter5model11SystemModel15YawProportionalEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
			void YawIntegral(double val) { yawIntegral = val;}

			double YawProportional() const {return yawProportional;}
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	1f 92       	push	r1
    266a:	1f 92       	push	r1
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	9a 81       	ldd	r25, Y+2	; 0x02
    2678:	fc 01       	movw	r30, r24
    267a:	84 8d       	ldd	r24, Z+28	; 0x1c
    267c:	95 8d       	ldd	r25, Z+29	; 0x1d
    267e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2680:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	08 95       	ret

00002690 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>:
			void YawProportional(double val) { yawProportional = val;}

			double YawDerivativeError() const {return yawDerivativeError;}
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	1f 92       	push	r1
    2696:	1f 92       	push	r1
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	fc 01       	movw	r30, r24
    26a6:	80 a1       	ldd	r24, Z+32	; 0x20
    26a8:	91 a1       	ldd	r25, Z+33	; 0x21
    26aa:	a2 a1       	ldd	r26, Z+34	; 0x22
    26ac:	b3 a1       	ldd	r27, Z+35	; 0x23
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <_ZNK10helicopter5model11SystemModel8TimeoutsEv>:
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
																							
						
			long Timeouts() const {return timeouts; }
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	1f 92       	push	r1
    26c2:	1f 92       	push	r1
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	fc 01       	movw	r30, r24
    26d2:	84 a1       	ldd	r24, Z+36	; 0x24
    26d4:	95 a1       	ldd	r25, Z+37	; 0x25
    26d6:	a6 a1       	ldd	r26, Z+38	; 0x26
    26d8:	b7 a1       	ldd	r27, Z+39	; 0x27
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <_ZN10helicopter5model11SystemModel8TimeoutsEl>:
			void Timeouts(long val) { timeouts = val; }
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <_ZN10helicopter5model11SystemModel8TimeoutsEl+0x6>
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <_ZN10helicopter5model11SystemModel8TimeoutsEl+0x8>
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	4b 83       	std	Y+3, r20	; 0x03
    26fa:	5c 83       	std	Y+4, r21	; 0x04
    26fc:	6d 83       	std	Y+5, r22	; 0x05
    26fe:	7e 83       	std	Y+6, r23	; 0x06
    2700:	29 81       	ldd	r18, Y+1	; 0x01
    2702:	3a 81       	ldd	r19, Y+2	; 0x02
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	ad 81       	ldd	r26, Y+5	; 0x05
    270a:	be 81       	ldd	r27, Y+6	; 0x06
    270c:	f9 01       	movw	r30, r18
    270e:	84 a3       	std	Z+36, r24	; 0x24
    2710:	95 a3       	std	Z+37, r25	; 0x25
    2712:	a6 a3       	std	Z+38, r26	; 0x26
    2714:	b7 a3       	std	Z+39, r27	; 0x27
    2716:	26 96       	adiw	r28, 0x06	; 6
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>:
			
			long UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	1f 92       	push	r1
    272e:	1f 92       	push	r1
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	fc 01       	movw	r30, r24
    273e:	80 a5       	ldd	r24, Z+40	; 0x28
    2740:	91 a5       	ldd	r25, Z+41	; 0x29
    2742:	a2 a5       	ldd	r26, Z+42	; 0x2a
    2744:	b3 a5       	ldd	r27, Z+43	; 0x2b
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl>:
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	00 d0       	rcall	.+0      	; 0x275a <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl+0x6>
    275a:	00 d0       	rcall	.+0      	; 0x275c <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl+0x8>
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	4b 83       	std	Y+3, r20	; 0x03
    2766:	5c 83       	std	Y+4, r21	; 0x04
    2768:	6d 83       	std	Y+5, r22	; 0x05
    276a:	7e 83       	std	Y+6, r23	; 0x06
    276c:	29 81       	ldd	r18, Y+1	; 0x01
    276e:	3a 81       	ldd	r19, Y+2	; 0x02
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	ad 81       	ldd	r26, Y+5	; 0x05
    2776:	be 81       	ldd	r27, Y+6	; 0x06
    2778:	f9 01       	movw	r30, r18
    277a:	80 a7       	std	Z+40, r24	; 0x28
    277c:	91 a7       	std	Z+41, r25	; 0x29
    277e:	a2 a7       	std	Z+42, r26	; 0x2a
    2780:	b3 a7       	std	Z+43, r27	; 0x2b
    2782:	26 96       	adiw	r28, 0x06	; 6
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>:
			
			long ChecksumErrors() const {return checksumErrors; }
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	1f 92       	push	r1
    279a:	1f 92       	push	r1
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	fc 01       	movw	r30, r24
    27aa:	84 a5       	ldd	r24, Z+44	; 0x2c
    27ac:	95 a5       	ldd	r25, Z+45	; 0x2d
    27ae:	a6 a5       	ldd	r26, Z+46	; 0x2e
    27b0:	b7 a5       	ldd	r27, Z+47	; 0x2f
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	08 95       	ret

000027c0 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl>:
			void ChecksumErrors(long val) { checksumErrors = val; }
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl+0x6>
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl+0x8>
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	4b 83       	std	Y+3, r20	; 0x03
    27d2:	5c 83       	std	Y+4, r21	; 0x04
    27d4:	6d 83       	std	Y+5, r22	; 0x05
    27d6:	7e 83       	std	Y+6, r23	; 0x06
    27d8:	29 81       	ldd	r18, Y+1	; 0x01
    27da:	3a 81       	ldd	r19, Y+2	; 0x02
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	ad 81       	ldd	r26, Y+5	; 0x05
    27e2:	be 81       	ldd	r27, Y+6	; 0x06
    27e4:	f9 01       	movw	r30, r18
    27e6:	84 a7       	std	Z+44, r24	; 0x2c
    27e8:	95 a7       	std	Z+45, r25	; 0x2d
    27ea:	a6 a7       	std	Z+46, r26	; 0x2e
    27ec:	b7 a7       	std	Z+47, r27	; 0x2f
    27ee:	26 96       	adiw	r28, 0x06	; 6
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	08 95       	ret

00002800 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(UnrecognizedMsgTypes) + 
				sizeof(ChecksumErrors) + 
				sizeof(NumOfBlownFrames);
;
			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	1f 92       	push	r1
    2806:	1f 92       	push	r1
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	9a 83       	std	Y+2, r25	; 0x02
    280e:	89 83       	std	Y+1, r24	; 0x01
					YawProportionalGain(0),
					YawAntiWindupGain(0),									
					Timeouts(0),
					UnrecognizedMsgTypes(0),
					ChecksumErrors(0),
					NumOfBlownFrames(0)
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	9a 81       	ldd	r25, Y+2	; 0x02
    2814:	49 e3       	ldi	r20, 0x39	; 57
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	62 e0       	ldi	r22, 0x02	; 2
    281a:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN10helicopter8messages7MessageC1Ehi>
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	28 e4       	ldi	r18, 0x48	; 72
    2824:	32 e0       	ldi	r19, 0x02	; 2
    2826:	fc 01       	movw	r30, r24
    2828:	31 83       	std	Z+1, r19	; 0x01
    282a:	20 83       	st	Z, r18
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	fc 01       	movw	r30, r24
    2832:	15 82       	std	Z+5, r1	; 0x05
    2834:	16 82       	std	Z+6, r1	; 0x06
    2836:	17 82       	std	Z+7, r1	; 0x07
    2838:	10 86       	std	Z+8, r1	; 0x08
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	fc 01       	movw	r30, r24
    2840:	11 86       	std	Z+9, r1	; 0x09
    2842:	12 86       	std	Z+10, r1	; 0x0a
    2844:	13 86       	std	Z+11, r1	; 0x0b
    2846:	14 86       	std	Z+12, r1	; 0x0c
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	fc 01       	movw	r30, r24
    284e:	15 86       	std	Z+13, r1	; 0x0d
    2850:	16 86       	std	Z+14, r1	; 0x0e
    2852:	17 86       	std	Z+15, r1	; 0x0f
    2854:	10 8a       	std	Z+16, r1	; 0x10
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	fc 01       	movw	r30, r24
    285c:	11 8a       	std	Z+17, r1	; 0x11
    285e:	12 8a       	std	Z+18, r1	; 0x12
    2860:	13 8a       	std	Z+19, r1	; 0x13
    2862:	14 8a       	std	Z+20, r1	; 0x14
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	fc 01       	movw	r30, r24
    286a:	15 8a       	std	Z+21, r1	; 0x15
    286c:	16 8a       	std	Z+22, r1	; 0x16
    286e:	17 8a       	std	Z+23, r1	; 0x17
    2870:	10 8e       	std	Z+24, r1	; 0x18
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	fc 01       	movw	r30, r24
    2878:	11 8e       	std	Z+25, r1	; 0x19
    287a:	12 8e       	std	Z+26, r1	; 0x1a
    287c:	13 8e       	std	Z+27, r1	; 0x1b
    287e:	14 8e       	std	Z+28, r1	; 0x1c
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	fc 01       	movw	r30, r24
    2886:	15 8e       	std	Z+29, r1	; 0x1d
    2888:	16 8e       	std	Z+30, r1	; 0x1e
    288a:	17 8e       	std	Z+31, r1	; 0x1f
    288c:	10 a2       	std	Z+32, r1	; 0x20
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	fc 01       	movw	r30, r24
    2894:	11 a2       	std	Z+33, r1	; 0x21
    2896:	12 a2       	std	Z+34, r1	; 0x22
    2898:	13 a2       	std	Z+35, r1	; 0x23
    289a:	14 a2       	std	Z+36, r1	; 0x24
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	fc 01       	movw	r30, r24
    28a2:	15 a2       	std	Z+37, r1	; 0x25
    28a4:	16 a2       	std	Z+38, r1	; 0x26
    28a6:	17 a2       	std	Z+39, r1	; 0x27
    28a8:	10 a6       	std	Z+40, r1	; 0x28
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	fc 01       	movw	r30, r24
    28b0:	11 a6       	std	Z+41, r1	; 0x29
    28b2:	12 a6       	std	Z+42, r1	; 0x2a
    28b4:	13 a6       	std	Z+43, r1	; 0x2b
    28b6:	14 a6       	std	Z+44, r1	; 0x2c
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	fc 01       	movw	r30, r24
    28be:	15 a6       	std	Z+45, r1	; 0x2d
    28c0:	16 a6       	std	Z+46, r1	; 0x2e
    28c2:	17 a6       	std	Z+47, r1	; 0x2f
    28c4:	10 aa       	std	Z+48, r1	; 0x30
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	fc 01       	movw	r30, r24
    28cc:	11 aa       	std	Z+49, r1	; 0x31
    28ce:	12 aa       	std	Z+50, r1	; 0x32
    28d0:	13 aa       	std	Z+51, r1	; 0x33
    28d2:	14 aa       	std	Z+52, r1	; 0x34
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	fc 01       	movw	r30, r24
    28da:	15 aa       	std	Z+53, r1	; 0x35
    28dc:	16 aa       	std	Z+54, r1	; 0x36
    28de:	17 aa       	std	Z+55, r1	; 0x37
    28e0:	10 ae       	std	Z+56, r1	; 0x38
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	fc 01       	movw	r30, r24
    28e8:	11 ae       	std	Z+57, r1	; 0x39
    28ea:	12 ae       	std	Z+58, r1	; 0x3a
    28ec:	13 ae       	std	Z+59, r1	; 0x3b
    28ee:	14 ae       	std	Z+60, r1	; 0x3c
				{
				
				}
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

000028fa <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	1f 92       	push	r1
    2900:	1f 92       	push	r1
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	28 e4       	ldi	r18, 0x48	; 72
    2910:	32 e0       	ldi	r19, 0x02	; 2
    2912:	fc 01       	movw	r30, r24
    2914:	31 83       	std	Z+1, r19	; 0x01
    2916:	20 83       	st	Z, r18
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN10helicopter8messages7MessageD1Ev>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	81 70       	andi	r24, 0x01	; 1
    2926:	99 27       	eor	r25, r25
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	21 f0       	breq	.+8      	; 0x2934 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	08 95       	ret

0000293e <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	1f 92       	push	r1
    2944:	1f 92       	push	r1
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	08 95       	ret

00002968 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	00 d0       	rcall	.+0      	; 0x296e <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    296e:	00 d0       	rcall	.+0      	; 0x2970 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    2978:	89 e3       	ldi	r24, 0x39	; 57
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_Znaj>
    2980:	9a 83       	std	Y+2, r25	; 0x02
    2982:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	9c 83       	std	Y+4, r25	; 0x04
    298a:	8b 83       	std	Y+3, r24	; 0x03
	
	encode (msgPtr, msgType);
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	ac 01       	movw	r20, r24
    2992:	4e 5f       	subi	r20, 0xFE	; 254
    2994:	5f 4f       	sbci	r21, 0xFF	; 255
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	9e 01       	movw	r18, r28
    299c:	2d 5f       	subi	r18, 0xFD	; 253
    299e:	3f 4f       	sbci	r19, 0xFF	; 255
    29a0:	b9 01       	movw	r22, r18
    29a2:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN10helicopter8messages7Message6encodeERPhRh>
	encode (msgPtr, MagYaw);
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	ac 01       	movw	r20, r24
    29ac:	4b 5f       	subi	r20, 0xFB	; 251
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	9e 01       	movw	r18, r28
    29b6:	2d 5f       	subi	r18, 0xFD	; 253
    29b8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ba:	b9 01       	movw	r22, r18
    29bc:	0e 94 0e 12 	call	0x241c	; 0x241c <_ZN10helicopter8messages7Message6encodeERPhRm>
	encode (msgPtr, YawVelocityDegreesPerSecond);
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	9e 81       	ldd	r25, Y+6	; 0x06
    29c4:	ac 01       	movw	r20, r24
    29c6:	47 5f       	subi	r20, 0xF7	; 247
    29c8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	9e 01       	movw	r18, r28
    29d0:	2d 5f       	subi	r18, 0xFD	; 253
    29d2:	3f 4f       	sbci	r19, 0xFF	; 255
    29d4:	b9 01       	movw	r22, r18
    29d6:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawIntegral);
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	ac 01       	movw	r20, r24
    29e0:	43 5f       	subi	r20, 0xF3	; 243
    29e2:	5f 4f       	sbci	r21, 0xFF	; 255
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	9e 01       	movw	r18, r28
    29ea:	2d 5f       	subi	r18, 0xFD	; 253
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	b9 01       	movw	r22, r18
    29f0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawProportional);
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	ac 01       	movw	r20, r24
    29fa:	4f 5e       	subi	r20, 0xEF	; 239
    29fc:	5f 4f       	sbci	r21, 0xFF	; 255
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	9e 01       	movw	r18, r28
    2a04:	2d 5f       	subi	r18, 0xFD	; 253
    2a06:	3f 4f       	sbci	r19, 0xFF	; 255
    2a08:	b9 01       	movw	r22, r18
    2a0a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawDerivativeError);
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	ac 01       	movw	r20, r24
    2a14:	4b 5e       	subi	r20, 0xEB	; 235
    2a16:	5f 4f       	sbci	r21, 0xFF	; 255
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	9e 01       	movw	r18, r28
    2a1e:	2d 5f       	subi	r18, 0xFD	; 253
    2a20:	3f 4f       	sbci	r19, 0xFF	; 255
    2a22:	b9 01       	movw	r22, r18
    2a24:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawControl);
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	ac 01       	movw	r20, r24
    2a2e:	47 5e       	subi	r20, 0xE7	; 231
    2a30:	5f 4f       	sbci	r21, 0xFF	; 255
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	9e 01       	movw	r18, r28
    2a38:	2d 5f       	subi	r18, 0xFD	; 253
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	b9 01       	movw	r22, r18
    2a3e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawIntegralGain);
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	ac 01       	movw	r20, r24
    2a48:	43 5e       	subi	r20, 0xE3	; 227
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	9e 01       	movw	r18, r28
    2a52:	2d 5f       	subi	r18, 0xFD	; 253
    2a54:	3f 4f       	sbci	r19, 0xFF	; 255
    2a56:	b9 01       	movw	r22, r18
    2a58:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawDerivativeGain);
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	ac 01       	movw	r20, r24
    2a62:	4f 5d       	subi	r20, 0xDF	; 223
    2a64:	5f 4f       	sbci	r21, 0xFF	; 255
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	9e 01       	movw	r18, r28
    2a6c:	2d 5f       	subi	r18, 0xFD	; 253
    2a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a70:	b9 01       	movw	r22, r18
    2a72:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawProportionalGain);
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	ac 01       	movw	r20, r24
    2a7c:	4b 5d       	subi	r20, 0xDB	; 219
    2a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	9e 01       	movw	r18, r28
    2a86:	2d 5f       	subi	r18, 0xFD	; 253
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	b9 01       	movw	r22, r18
    2a8c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawAntiWindupGain);
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	9e 81       	ldd	r25, Y+6	; 0x06
    2a94:	ac 01       	movw	r20, r24
    2a96:	47 5d       	subi	r20, 0xD7	; 215
    2a98:	5f 4f       	sbci	r21, 0xFF	; 255
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	9e 01       	movw	r18, r28
    2aa0:	2d 5f       	subi	r18, 0xFD	; 253
    2aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa4:	b9 01       	movw	r22, r18
    2aa6:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, Timeouts);
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	9e 81       	ldd	r25, Y+6	; 0x06
    2aae:	ac 01       	movw	r20, r24
    2ab0:	43 5d       	subi	r20, 0xD3	; 211
    2ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	9e 01       	movw	r18, r28
    2aba:	2d 5f       	subi	r18, 0xFD	; 253
    2abc:	3f 4f       	sbci	r19, 0xFF	; 255
    2abe:	b9 01       	movw	r22, r18
    2ac0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, UnrecognizedMsgTypes);
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac8:	ac 01       	movw	r20, r24
    2aca:	4f 5c       	subi	r20, 0xCF	; 207
    2acc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	9e 01       	movw	r18, r28
    2ad4:	2d 5f       	subi	r18, 0xFD	; 253
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	b9 01       	movw	r22, r18
    2ada:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, ChecksumErrors);
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	ac 01       	movw	r20, r24
    2ae4:	4b 5c       	subi	r20, 0xCB	; 203
    2ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	9e 01       	movw	r18, r28
    2aee:	2d 5f       	subi	r18, 0xFD	; 253
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	b9 01       	movw	r22, r18
    2af4:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, NumOfBlownFrames);
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	9e 81       	ldd	r25, Y+6	; 0x06
    2afc:	ac 01       	movw	r20, r24
    2afe:	47 5c       	subi	r20, 0xC7	; 199
    2b00:	5f 4f       	sbci	r21, 0xFF	; 255
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	9e 01       	movw	r18, r28
    2b08:	2d 5f       	subi	r18, 0xFD	; 253
    2b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0c:	b9 01       	movw	r22, r18
    2b0e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl>
				
	return msg;
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2b16:	26 96       	adiw	r28, 0x06	; 6
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret

00002b28 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x6>
    2b2e:	1f 92       	push	r1
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	7c 83       	std	Y+4, r23	; 0x04
    2b3a:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1e>
    2b44:	c3 c0       	rjmp	.+390    	; 0x2ccc <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1a4>
	{
		decode (message,msgType);
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	ac 01       	movw	r20, r24
    2b4c:	4e 5f       	subi	r20, 0xFE	; 254
    2b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	9e 01       	movw	r18, r28
    2b56:	2d 5f       	subi	r18, 0xFD	; 253
    2b58:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5a:	b9 01       	movw	r22, r18
    2b5c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN10helicopter8messages7Message6decodeERPhRh>
		decode (message,MagYaw);
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	ac 01       	movw	r20, r24
    2b66:	4b 5f       	subi	r20, 0xFB	; 251
    2b68:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	9e 01       	movw	r18, r28
    2b70:	2d 5f       	subi	r18, 0xFD	; 253
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	b9 01       	movw	r22, r18
    2b76:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN10helicopter8messages7Message6decodeERPhRm>
		decode (message,YawVelocityDegreesPerSecond);
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	ac 01       	movw	r20, r24
    2b80:	47 5f       	subi	r20, 0xF7	; 247
    2b82:	5f 4f       	sbci	r21, 0xFF	; 255
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	9e 01       	movw	r18, r28
    2b8a:	2d 5f       	subi	r18, 0xFD	; 253
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	b9 01       	movw	r22, r18
    2b90:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawIntegral);
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	9a 81       	ldd	r25, Y+2	; 0x02
    2b98:	ac 01       	movw	r20, r24
    2b9a:	43 5f       	subi	r20, 0xF3	; 243
    2b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	2d 5f       	subi	r18, 0xFD	; 253
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	b9 01       	movw	r22, r18
    2baa:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawProportional);
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb2:	ac 01       	movw	r20, r24
    2bb4:	4f 5e       	subi	r20, 0xEF	; 239
    2bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	9e 01       	movw	r18, r28
    2bbe:	2d 5f       	subi	r18, 0xFD	; 253
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawDerivativeError);	
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	ac 01       	movw	r20, r24
    2bce:	4b 5e       	subi	r20, 0xEB	; 235
    2bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	9e 01       	movw	r18, r28
    2bd8:	2d 5f       	subi	r18, 0xFD	; 253
    2bda:	3f 4f       	sbci	r19, 0xFF	; 255
    2bdc:	b9 01       	movw	r22, r18
    2bde:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, YawControl);	
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	9a 81       	ldd	r25, Y+2	; 0x02
    2be6:	ac 01       	movw	r20, r24
    2be8:	47 5e       	subi	r20, 0xE7	; 231
    2bea:	5f 4f       	sbci	r21, 0xFF	; 255
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf0:	9e 01       	movw	r18, r28
    2bf2:	2d 5f       	subi	r18, 0xFD	; 253
    2bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		
		decode (message, YawIntegralGain);
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	ac 01       	movw	r20, r24
    2c02:	43 5e       	subi	r20, 0xE3	; 227
    2c04:	5f 4f       	sbci	r21, 0xFF	; 255
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0a:	9e 01       	movw	r18, r28
    2c0c:	2d 5f       	subi	r18, 0xFD	; 253
    2c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c10:	b9 01       	movw	r22, r18
    2c12:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, YawDerivativeGain);
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	ac 01       	movw	r20, r24
    2c1c:	4f 5d       	subi	r20, 0xDF	; 223
    2c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	9e 01       	movw	r18, r28
    2c26:	2d 5f       	subi	r18, 0xFD	; 253
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, YawProportionalGain);
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	ac 01       	movw	r20, r24
    2c36:	4b 5d       	subi	r20, 0xDB	; 219
    2c38:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	9e 01       	movw	r18, r28
    2c40:	2d 5f       	subi	r18, 0xFD	; 253
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255
    2c44:	b9 01       	movw	r22, r18
    2c46:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, YawAntiWindupGain);
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4e:	ac 01       	movw	r20, r24
    2c50:	47 5d       	subi	r20, 0xD7	; 215
    2c52:	5f 4f       	sbci	r21, 0xFF	; 255
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	9e 01       	movw	r18, r28
    2c5a:	2d 5f       	subi	r18, 0xFD	; 253
    2c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5e:	b9 01       	movw	r22, r18
    2c60:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
						
		decode (message,Timeouts);
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	9a 81       	ldd	r25, Y+2	; 0x02
    2c68:	ac 01       	movw	r20, r24
    2c6a:	43 5d       	subi	r20, 0xD3	; 211
    2c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	9a 81       	ldd	r25, Y+2	; 0x02
    2c72:	9e 01       	movw	r18, r28
    2c74:	2d 5f       	subi	r18, 0xFD	; 253
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	b9 01       	movw	r22, r18
    2c7a:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,UnrecognizedMsgTypes);
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	ac 01       	movw	r20, r24
    2c84:	4f 5c       	subi	r20, 0xCF	; 207
    2c86:	5f 4f       	sbci	r21, 0xFF	; 255
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8c:	9e 01       	movw	r18, r28
    2c8e:	2d 5f       	subi	r18, 0xFD	; 253
    2c90:	3f 4f       	sbci	r19, 0xFF	; 255
    2c92:	b9 01       	movw	r22, r18
    2c94:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,ChecksumErrors);
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	ac 01       	movw	r20, r24
    2c9e:	4b 5c       	subi	r20, 0xCB	; 203
    2ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	9e 01       	movw	r18, r28
    2ca8:	2d 5f       	subi	r18, 0xFD	; 253
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	b9 01       	movw	r22, r18
    2cae:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,NumOfBlownFrames);
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	ac 01       	movw	r20, r24
    2cb8:	47 5c       	subi	r20, 0xC7	; 199
    2cba:	5f 4f       	sbci	r21, 0xFF	; 255
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	9e 01       	movw	r18, r28
    2cc2:	2d 5f       	subi	r18, 0xFD	; 253
    2cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl>
	}
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh+0xa>
    2ce4:	1f 92       	push	r1
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9c 83       	std	Y+4, r25	; 0x04
    2cec:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    2cee:	8d e3       	ldi	r24, 0x3D	; 61
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    2cf6:	8c 01       	movw	r16, r24
    2cf8:	c8 01       	movw	r24, r16
    2cfa:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    2cfe:	1a 83       	std	Y+2, r17	; 0x02
    2d00:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	fc 01       	movw	r30, r24
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	06 96       	adiw	r24, 0x06	; 6
    2d0e:	fc 01       	movw	r30, r24
    2d10:	20 81       	ld	r18, Z
    2d12:	31 81       	ldd	r19, Z+1	; 0x01
    2d14:	4b 81       	ldd	r20, Y+3	; 0x03
    2d16:	5c 81       	ldd	r21, Y+4	; 0x04
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	ba 01       	movw	r22, r20
    2d1e:	f9 01       	movw	r30, r18
    2d20:	19 95       	eicall
	
	return msg;
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	08 95       	ret

00002d38 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>:

SystemTelemetryMessage * SystemTelemetryMessage::buildMessageFromModel(SystemModel *model)
{
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE+0xa>
    2d42:	1f 92       	push	r1
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	9c 83       	std	Y+4, r25	; 0x04
    2d4a:	8b 83       	std	Y+3, r24	; 0x03
	//throw std::exception("The method or operation is not implemented.");
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    2d4c:	8d e3       	ldi	r24, 0x3D	; 61
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    2d54:	8c 01       	movw	r16, r24
    2d56:	c8 01       	movw	r24, r16
    2d58:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    2d5c:	1a 83       	std	Y+2, r17	; 0x02
    2d5e:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagYaw = model->MagYawDegrees() * 100;
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	48 ec       	ldi	r20, 0xC8	; 200
    2d72:	52 e4       	ldi	r21, 0x42	; 66
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 aa 20 	call	0x4154	; 0x4154 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	29 81       	ldd	r18, Y+1	; 0x01
    2d8e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d90:	f9 01       	movw	r30, r18
    2d92:	85 83       	std	Z+5, r24	; 0x05
    2d94:	96 83       	std	Z+6, r25	; 0x06
    2d96:	a7 83       	std	Z+7, r26	; 0x07
    2d98:	b0 87       	std	Z+8, r27	; 0x08
	message->YawDerivativeError = model->YawDerivativeError() * 100;
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	0e 94 48 13 	call	0x2690	; 0x2690 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	48 ec       	ldi	r20, 0xC8	; 200
    2dac:	52 e4       	ldi	r21, 0x42	; 66
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 a5 20 	call	0x414a	; 0x414a <__fixsfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	29 81       	ldd	r18, Y+1	; 0x01
    2dc8:	3a 81       	ldd	r19, Y+2	; 0x02
    2dca:	f9 01       	movw	r30, r18
    2dcc:	85 8b       	std	Z+21, r24	; 0x15
    2dce:	96 8b       	std	Z+22, r25	; 0x16
    2dd0:	a7 8b       	std	Z+23, r26	; 0x17
    2dd2:	b0 8f       	std	Z+24, r27	; 0x18
	message->YawIntegral = model->YawIntegral() * 100;
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	48 ec       	ldi	r20, 0xC8	; 200
    2de6:	52 e4       	ldi	r21, 0x42	; 66
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	0e 94 a5 20 	call	0x414a	; 0x414a <__fixsfsi>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	29 81       	ldd	r18, Y+1	; 0x01
    2e02:	3a 81       	ldd	r19, Y+2	; 0x02
    2e04:	f9 01       	movw	r30, r18
    2e06:	85 87       	std	Z+13, r24	; 0x0d
    2e08:	96 87       	std	Z+14, r25	; 0x0e
    2e0a:	a7 87       	std	Z+15, r26	; 0x0f
    2e0c:	b0 8b       	std	Z+16, r27	; 0x10
	message->YawProportional = model->YawProportional() * 100;
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	9c 81       	ldd	r25, Y+4	; 0x04
    2e12:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZNK10helicopter5model11SystemModel15YawProportionalEv>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	48 ec       	ldi	r20, 0xC8	; 200
    2e20:	52 e4       	ldi	r21, 0x42	; 66
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 a5 20 	call	0x414a	; 0x414a <__fixsfsi>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	29 81       	ldd	r18, Y+1	; 0x01
    2e3c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e3e:	f9 01       	movw	r30, r18
    2e40:	81 8b       	std	Z+17, r24	; 0x11
    2e42:	92 8b       	std	Z+18, r25	; 0x12
    2e44:	a3 8b       	std	Z+19, r26	; 0x13
    2e46:	b4 8b       	std	Z+20, r27	; 0x14
	message->YawVelocityDegreesPerSecond = model->YawVelocityDegreesPerSecond() * 100;
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	48 ec       	ldi	r20, 0xC8	; 200
    2e5a:	52 e4       	ldi	r21, 0x42	; 66
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	cd 01       	movw	r24, r26
    2e60:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 a5 20 	call	0x414a	; 0x414a <__fixsfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	29 81       	ldd	r18, Y+1	; 0x01
    2e76:	3a 81       	ldd	r19, Y+2	; 0x02
    2e78:	f9 01       	movw	r30, r18
    2e7a:	81 87       	std	Z+9, r24	; 0x09
    2e7c:	92 87       	std	Z+10, r25	; 0x0a
    2e7e:	a3 87       	std	Z+11, r26	; 0x0b
    2e80:	b4 87       	std	Z+12, r27	; 0x0c
	message->YawControl = model->YawControl() * 100;
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	9c 81       	ldd	r25, Y+4	; 0x04
    2e86:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK10helicopter5model11SystemModel10YawControlEv>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	48 ec       	ldi	r20, 0xC8	; 200
    2e94:	52 e4       	ldi	r21, 0x42	; 66
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	bc 01       	movw	r22, r24
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	0e 94 a5 20 	call	0x414a	; 0x414a <__fixsfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	29 81       	ldd	r18, Y+1	; 0x01
    2eb0:	3a 81       	ldd	r19, Y+2	; 0x02
    2eb2:	f9 01       	movw	r30, r18
    2eb4:	81 8f       	std	Z+25, r24	; 0x19
    2eb6:	92 8f       	std	Z+26, r25	; 0x1a
    2eb8:	a3 8f       	std	Z+27, r26	; 0x1b
    2eba:	b4 8f       	std	Z+28, r27	; 0x1c
	message->ChecksumErrors = model->ChecksumErrors();
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec0:	0e 94 ca 13 	call	0x2794	; 0x2794 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	29 81       	ldd	r18, Y+1	; 0x01
    2eca:	3a 81       	ldd	r19, Y+2	; 0x02
    2ecc:	f9 01       	movw	r30, r18
    2ece:	85 ab       	std	Z+53, r24	; 0x35
    2ed0:	96 ab       	std	Z+54, r25	; 0x36
    2ed2:	a7 ab       	std	Z+55, r26	; 0x37
    2ed4:	b0 af       	std	Z+56, r27	; 0x38
	message->Timeouts = model->Timeouts();
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eda:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	29 81       	ldd	r18, Y+1	; 0x01
    2ee4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ee6:	f9 01       	movw	r30, r18
    2ee8:	85 a7       	std	Z+45, r24	; 0x2d
    2eea:	96 a7       	std	Z+46, r25	; 0x2e
    2eec:	a7 a7       	std	Z+47, r26	; 0x2f
    2eee:	b0 ab       	std	Z+48, r27	; 0x30
	message->UnrecognizedMsgTypes = model->UnrecognizedMsgTypes();
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	0e 94 94 13 	call	0x2728	; 0x2728 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	29 81       	ldd	r18, Y+1	; 0x01
    2efe:	3a 81       	ldd	r19, Y+2	; 0x02
    2f00:	f9 01       	movw	r30, r18
    2f02:	81 ab       	std	Z+49, r24	; 0x31
    2f04:	92 ab       	std	Z+50, r25	; 0x32
    2f06:	a3 ab       	std	Z+51, r26	; 0x33
    2f08:	b4 ab       	std	Z+52, r27	; 0x34
	message->NumOfBlownFrames = model->BlownFrames();
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	0e 94 1b 02 	call	0x436	; 0x436 <_ZNK10helicopter5model11SystemModel11BlownFramesEv>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	29 81       	ldd	r18, Y+1	; 0x01
    2f18:	3a 81       	ldd	r19, Y+2	; 0x02
    2f1a:	f9 01       	movw	r30, r18
    2f1c:	81 af       	std	Z+57, r24	; 0x39
    2f1e:	92 af       	std	Z+58, r25	; 0x3a
    2f20:	a3 af       	std	Z+59, r26	; 0x3b
    2f22:	b4 af       	std	Z+60, r27	; 0x3c
	
	return message;
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>:
	model->ChecksumErrors(this->ChecksumErrors);
	model->BlownFrames(this->NumOfBlownFrames);
}

void SystemTelemetryMessage::updateModelFromMessageFromSimulator (SystemModel *model)
{
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE+0x6>
    2f40:	1f 92       	push	r1
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	7c 83       	std	Y+4, r23	; 0x04
    2f4c:	6b 83       	std	Y+3, r22	; 0x03
	model->MagYawDegrees((double) this->MagYaw / 100);
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	fc 01       	movw	r30, r24
    2f54:	85 81       	ldd	r24, Z+5	; 0x05
    2f56:	96 81       	ldd	r25, Z+6	; 0x06
    2f58:	a7 81       	ldd	r26, Z+7	; 0x07
    2f5a:	b0 85       	ldd	r27, Z+8	; 0x08
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatunsisf>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	48 ec       	ldi	r20, 0xC8	; 200
    2f6e:	52 e4       	ldi	r21, 0x42	; 66
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 3d 20 	call	0x407a	; 0x407a <__divsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f80:	ac 01       	movw	r20, r24
    2f82:	bd 01       	movw	r22, r26
    2f84:	c9 01       	movw	r24, r18
    2f86:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>
	model->YawVelocityDegreesPerSecond((double) this->YawVelocityDegreesPerSecond / 100);
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	fc 01       	movw	r30, r24
    2f90:	81 85       	ldd	r24, Z+9	; 0x09
    2f92:	92 85       	ldd	r25, Z+10	; 0x0a
    2f94:	a3 85       	ldd	r26, Z+11	; 0x0b
    2f96:	b4 85       	ldd	r27, Z+12	; 0x0c
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__floatsisf>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	48 ec       	ldi	r20, 0xC8	; 200
    2faa:	52 e4       	ldi	r21, 0x42	; 66
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 3d 20 	call	0x407a	; 0x407a <__divsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fba:	3c 81       	ldd	r19, Y+4	; 0x04
    2fbc:	ac 01       	movw	r20, r24
    2fbe:	bd 01       	movw	r22, r26
    2fc0:	c9 01       	movw	r24, r18
    2fc2:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	08 95       	ret

00002fd4 <_ZN10helicopter5tasks4Task8getDelayEv>:
				 * subclasses runTaskImpl to execute the actual task logic.
				 */
				virtual void runTask();
				
					
				int getDelay()
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	1f 92       	push	r1
    2fda:	1f 92       	push	r1
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe8:	fc 01       	movw	r30, r24
    2fea:	82 81       	ldd	r24, Z+2	; 0x02
    2fec:	93 81       	ldd	r25, Z+3	; 0x03
				}
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	08 95       	ret

00002ff8 <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	1f 92       	push	r1
    2ffe:	1f 92       	push	r1
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	fc 01       	movw	r30, r24
    300e:	84 81       	ldd	r24, Z+4	; 0x04
    3010:	95 81       	ldd	r25, Z+5	; 0x05
				}
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	08 95       	ret

0000301c <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	00 d0       	rcall	.+0      	; 0x3022 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    3022:	1f 92       	push	r1
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	7c 83       	std	Y+4, r23	; 0x04
    302e:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	2b 81       	ldd	r18, Y+3	; 0x03
    3036:	3c 81       	ldd	r19, Y+4	; 0x04
    3038:	fc 01       	movw	r30, r24
    303a:	33 83       	std	Z+3, r19	; 0x03
    303c:	22 83       	std	Z+2, r18	; 0x02
				}
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	08 95       	ret

0000304c <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    304c:	cf 93       	push	r28
    304e:	df 93       	push	r29
    3050:	1f 92       	push	r1
    3052:	1f 92       	push	r1
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	9a 83       	std	Y+2, r25	; 0x02
    305a:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	fc 01       	movw	r30, r24
    3062:	86 81       	ldd	r24, Z+6	; 0x06
				}
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	08 95       	ret

0000306e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	00 d0       	rcall	.+0      	; 0x3074 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	2b 81       	ldd	r18, Y+3	; 0x03
    3084:	fc 01       	movw	r30, r24
    3086:	26 83       	std	Z+6, r18	; 0x06
				}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
    3092:	08 95       	ret

00003094 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
    3094:	cf 93       	push	r28
    3096:	df 93       	push	r29
    3098:	1f 92       	push	r1
    309a:	1f 92       	push	r1
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	fc 01       	movw	r30, r24
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	9c 01       	movw	r18, r24
    30b0:	21 50       	subi	r18, 0x01	; 1
    30b2:	31 09       	sbc	r19, r1
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	9a 81       	ldd	r25, Y+2	; 0x02
    30b8:	fc 01       	movw	r30, r24
    30ba:	33 83       	std	Z+3, r19	; 0x03
    30bc:	22 83       	std	Z+2, r18	; 0x02
				}
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	08 95       	ret

000030c8 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for determining which tasks are ready to run.
				*/
				void start();
				
				int getNumOfTasks()
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	1f 92       	push	r1
    30ce:	1f 92       	push	r1
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	fc 01       	movw	r30, r24
    30de:	84 89       	ldd	r24, Z+20	; 0x14
    30e0:	95 89       	ldd	r25, Z+21	; 0x15
				}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	08 95       	ret

000030ec <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	1f 92       	push	r1
    30f2:	1f 92       	push	r1
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	9a 83       	std	Y+2, r25	; 0x02
    30fa:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	08 95       	ret

0000310a <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb>:
				/**
				 * Sets whether a blown frame was detected. (I.e. the dispatcher didn't finish before
				 * the scheduler timmer was triggered again)
				 * @param blownFrameDetected true if a frame was blown, false otherwise.
				 */
				void hasBlownFrame(bool blowFrameDetected)
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    310e:	00 d0       	rcall	.+0      	; 0x3110 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb+0x6>
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->blowFrameDetected = blowFrameDetected;
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	9a 81       	ldd	r25, Y+2	; 0x02
    311e:	2b 81       	ldd	r18, Y+3	; 0x03
    3120:	fc 01       	movw	r30, r24
    3122:	22 8f       	std	Z+26, r18	; 0x1a
				}
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	df 91       	pop	r29
    312c:	cf 91       	pop	r28
    312e:	08 95       	ret

00003130 <_ZN10helicopter9scheduler9Scheduler20hasCompletedDispatchEv>:
				/**
				 * Returns a flag indicating that the dispatch method has completed. This is for
				 * use by the scheduler to determine if the dispatcher blew a frame.
				 * @return true if the dispatch method completed, false otherwise. 
				 */
				bool hasCompletedDispatch()
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	1f 92       	push	r1
    3136:	1f 92       	push	r1
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	9a 83       	std	Y+2, r25	; 0x02
    313e:	89 83       	std	Y+1, r24	; 0x01
				{
					return completedDispatch;
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	9a 81       	ldd	r25, Y+2	; 0x02
    3144:	fc 01       	movw	r30, r24
    3146:	83 8d       	ldd	r24, Z+27	; 0x1b
				}
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	08 95       	ret

00003152 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    3162:	80 91 88 02 	lds	r24, 0x0288
    3166:	90 91 89 02 	lds	r25, 0x0289
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	a1 f4       	brne	.+40     	; 0x3196 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x44>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    316e:	8c e1       	ldi	r24, 0x1C	; 28
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Znwj>
    3176:	7c 01       	movw	r14, r24
    3178:	06 e4       	ldi	r16, 0x46	; 70
    317a:	10 e0       	ldi	r17, 0x00	; 0
    317c:	20 e4       	ldi	r18, 0x40	; 64
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e0       	ldi	r20, 0x00	; 0
    3182:	54 e2       	ldi	r21, 0x24	; 36
    3184:	64 ef       	ldi	r22, 0xF4	; 244
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	c7 01       	movw	r24, r14
    318a:	0e 94 d6 18 	call	0x31ac	; 0x31ac <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    318e:	f0 92 89 02 	sts	0x0289, r15
    3192:	e0 92 88 02 	sts	0x0288, r14
	}

	return scheduler;
    3196:	80 91 88 02 	lds	r24, 0x0288
    319a:	90 91 89 02 	lds	r25, 0x0289
}
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	08 95       	ret

000031ac <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	2a 97       	sbiw	r28, 0x0a	; 10
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	9a 83       	std	Y+2, r25	; 0x02
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	4b 83       	std	Y+3, r20	; 0x03
    31ca:	5c 83       	std	Y+4, r21	; 0x04
    31cc:	6d 83       	std	Y+5, r22	; 0x05
    31ce:	7e 83       	std	Y+6, r23	; 0x06
    31d0:	38 87       	std	Y+8, r19	; 0x08
    31d2:	2f 83       	std	Y+7, r18	; 0x07
    31d4:	1a 87       	std	Y+10, r17	; 0x0a
    31d6:	09 87       	std	Y+9, r16	; 0x09
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    31d8:	8f 81       	ldd	r24, Y+7	; 0x07
    31da:	98 85       	ldd	r25, Y+8	; 0x08
    31dc:	9c 01       	movw	r18, r24
    31de:	44 27       	eor	r20, r20
    31e0:	37 fd       	sbrc	r19, 7
    31e2:	40 95       	com	r20
    31e4:	54 2f       	mov	r21, r20
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ea:	ad 81       	ldd	r26, Y+5	; 0x05
    31ec:	be 81       	ldd	r27, Y+6	; 0x06
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodsi4>
    31f6:	da 01       	movw	r26, r20
    31f8:	c9 01       	movw	r24, r18
    31fa:	29 85       	ldd	r18, Y+9	; 0x09
    31fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    31fe:	44 27       	eor	r20, r20
    3200:	37 fd       	sbrc	r19, 7
    3202:	40 95       	com	r20
    3204:	54 2f       	mov	r21, r20
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodsi4>
    320e:	da 01       	movw	r26, r20
    3210:	c9 01       	movw	r24, r18
    3212:	9c 01       	movw	r18, r24
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	9a 81       	ldd	r25, Y+2	; 0x02
    3218:	fc 01       	movw	r30, r24
    321a:	37 8b       	std	Z+23, r19	; 0x17
    321c:	26 8b       	std	Z+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	fc 01       	movw	r30, r24
    3224:	26 89       	ldd	r18, Z+22	; 0x16
    3226:	37 89       	ldd	r19, Z+23	; 0x17
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	9a 81       	ldd	r25, Y+2	; 0x02
    322c:	fc 01       	movw	r30, r24
    322e:	37 8b       	std	Z+23, r19	; 0x17
    3230:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescaler;
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	9a 81       	ldd	r25, Y+2	; 0x02
    3236:	2f 81       	ldd	r18, Y+7	; 0x07
    3238:	38 85       	ldd	r19, Y+8	; 0x08
    323a:	fc 01       	movw	r30, r24
    323c:	31 8f       	std	Z+25, r19	; 0x19
    323e:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	9a 81       	ldd	r25, Y+2	; 0x02
    3244:	fc 01       	movw	r30, r24
    3246:	15 8a       	std	Z+21, r1	; 0x15
    3248:	14 8a       	std	Z+20, r1	; 0x14
	
	blowFrameDetected = false;
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	fc 01       	movw	r30, r24
    3250:	12 8e       	std	Z+26, r1	; 0x1a
	
	completedDispatch = true;
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	9a 81       	ldd	r25, Y+2	; 0x02
    3256:	21 e0       	ldi	r18, 0x01	; 1
    3258:	fc 01       	movw	r30, r24
    325a:	23 8f       	std	Z+27, r18	; 0x1b
}
    325c:	2a 96       	adiw	r28, 0x0a	; 10
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	08 95       	ret

00003272 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	00 d0       	rcall	.+0      	; 0x3278 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    3278:	1f 92       	push	r1
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	7c 83       	std	Y+4, r23	; 0x04
    3284:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	fc 01       	movw	r30, r24
    328c:	84 89       	ldd	r24, Z+20	; 0x14
    328e:	95 89       	ldd	r25, Z+21	; 0x15
    3290:	8a 30       	cpi	r24, 0x0A	; 10
    3292:	91 05       	cpc	r25, r1
    3294:	04 f5       	brge	.+64     	; 0x32d6 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	fc 01       	movw	r30, r24
    329c:	84 89       	ldd	r24, Z+20	; 0x14
    329e:	95 89       	ldd	r25, Z+21	; 0x15
    32a0:	29 81       	ldd	r18, Y+1	; 0x01
    32a2:	3a 81       	ldd	r19, Y+2	; 0x02
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	82 0f       	add	r24, r18
    32aa:	93 1f       	adc	r25, r19
    32ac:	2b 81       	ldd	r18, Y+3	; 0x03
    32ae:	3c 81       	ldd	r19, Y+4	; 0x04
    32b0:	fc 01       	movw	r30, r24
    32b2:	31 83       	std	Z+1, r19	; 0x01
    32b4:	20 83       	st	Z, r18
		numOfTasks++;
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ba:	fc 01       	movw	r30, r24
    32bc:	84 89       	ldd	r24, Z+20	; 0x14
    32be:	95 89       	ldd	r25, Z+21	; 0x15
    32c0:	9c 01       	movw	r18, r24
    32c2:	2f 5f       	subi	r18, 0xFF	; 255
    32c4:	3f 4f       	sbci	r19, 0xFF	; 255
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	fc 01       	movw	r30, r24
    32cc:	35 8b       	std	Z+21, r19	; 0x15
    32ce:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	02 c0       	rjmp	.+4      	; 0x32da <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    32d6:	8f ef       	ldi	r24, 0xFF	; 255
    32d8:	9f ef       	ldi	r25, 0xFF	; 255
}
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	08 95       	ret

000032e8 <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    32ee:	1f 92       	push	r1
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    32f8:	1a 82       	std	Y+2, r1	; 0x02
    32fa:	19 82       	std	Y+1, r1	; 0x01
    32fc:	24 c0       	rjmp	.+72     	; 0x3346 <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    32fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3300:	3c 81       	ldd	r19, Y+4	; 0x04
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	9a 81       	ldd	r25, Y+2	; 0x02
    3306:	88 0f       	add	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	fc 01       	movw	r30, r24
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	fc 01       	movw	r30, r24
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	06 96       	adiw	r24, 0x06	; 6
    331c:	fc 01       	movw	r30, r24
    331e:	20 81       	ld	r18, Z
    3320:	31 81       	ldd	r19, Z+1	; 0x01
    3322:	4b 81       	ldd	r20, Y+3	; 0x03
    3324:	5c 81       	ldd	r21, Y+4	; 0x04
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	84 0f       	add	r24, r20
    3330:	95 1f       	adc	r25, r21
    3332:	fc 01       	movw	r30, r24
    3334:	80 81       	ld	r24, Z
    3336:	91 81       	ldd	r25, Z+1	; 0x01
    3338:	f9 01       	movw	r30, r18
    333a:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	9a 81       	ldd	r25, Y+2	; 0x02
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	9c 81       	ldd	r25, Y+4	; 0x04
    334a:	fc 01       	movw	r30, r24
    334c:	24 89       	ldd	r18, Z+20	; 0x14
    334e:	35 89       	ldd	r19, Z+21	; 0x15
    3350:	41 e0       	ldi	r20, 0x01	; 1
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	9a 81       	ldd	r25, Y+2	; 0x02
    3356:	82 17       	cp	r24, r18
    3358:	93 07       	cpc	r25, r19
    335a:	0c f0       	brlt	.+2      	; 0x335e <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	44 23       	and	r20, r20
    3360:	71 f6       	brne	.-100    	; 0x32fe <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    3362:	88 e8       	ldi	r24, 0x88	; 136
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	2b 81       	ldd	r18, Y+3	; 0x03
    3368:	3c 81       	ldd	r19, Y+4	; 0x04
    336a:	f9 01       	movw	r30, r18
    336c:	26 89       	ldd	r18, Z+22	; 0x16
    336e:	37 89       	ldd	r19, Z+23	; 0x17
    3370:	fc 01       	movw	r30, r24
    3372:	31 83       	std	Z+1, r19	; 0x01
    3374:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    3376:	81 e8       	ldi	r24, 0x81	; 129
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	21 e8       	ldi	r18, 0x81	; 129
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	f9 01       	movw	r30, r18
    3380:	20 81       	ld	r18, Z
    3382:	28 60       	ori	r18, 0x08	; 8
    3384:	fc 01       	movw	r30, r24
    3386:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    3388:	8f e6       	ldi	r24, 0x6F	; 111
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	2f e6       	ldi	r18, 0x6F	; 111
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	f9 01       	movw	r30, r18
    3392:	20 81       	ld	r18, Z
    3394:	22 60       	ori	r18, 0x02	; 2
    3396:	fc 01       	movw	r30, r24
    3398:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    339a:	78 94       	sei
}
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	08 95       	ret

000033aa <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
	completedDispatch = false;
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	fc 01       	movw	r30, r24
    33c0:	13 8e       	std	Z+27, r1	; 0x1b
	blowFrameDetected = false;
    33c2:	8d 81       	ldd	r24, Y+5	; 0x05
    33c4:	9e 81       	ldd	r25, Y+6	; 0x06
    33c6:	fc 01       	movw	r30, r24
    33c8:	12 8e       	std	Z+26, r1	; 0x1a
	
	Task *task = NULL;
    33ca:	1c 82       	std	Y+4, r1	; 0x04
    33cc:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    33ce:	1a 82       	std	Y+2, r1	; 0x02
    33d0:	19 82       	std	Y+1, r1	; 0x01
    33d2:	2a c0       	rjmp	.+84     	; 0x3428 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x7e>
	{
		task = tasks[i];
    33d4:	2d 81       	ldd	r18, Y+5	; 0x05
    33d6:	3e 81       	ldd	r19, Y+6	; 0x06
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	9a 81       	ldd	r25, Y+2	; 0x02
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	82 0f       	add	r24, r18
    33e2:	93 1f       	adc	r25, r19
    33e4:	fc 01       	movw	r30, r24
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	9c 83       	std	Y+4, r25	; 0x04
    33ec:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	9c 81       	ldd	r25, Y+4	; 0x04
    33f2:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    33f6:	88 23       	and	r24, r24
    33f8:	91 f0       	breq	.+36     	; 0x341e <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x74>
		{
			task->setIsReadyToRun(false);
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	fc 01       	movw	r30, r24
    340a:	80 81       	ld	r24, Z
    340c:	91 81       	ldd	r25, Z+1	; 0x01
    340e:	08 96       	adiw	r24, 0x08	; 8
    3410:	fc 01       	movw	r30, r24
    3412:	20 81       	ld	r18, Z
    3414:	31 81       	ldd	r19, Z+1	; 0x01
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	f9 01       	movw	r30, r18
    341c:	19 95       	eicall
	completedDispatch = false;
	blowFrameDetected = false;
	
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	01 96       	adiw	r24, 0x01	; 1
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	fc 01       	movw	r30, r24
    342e:	24 89       	ldd	r18, Z+20	; 0x14
    3430:	35 89       	ldd	r19, Z+21	; 0x15
    3432:	41 e0       	ldi	r20, 0x01	; 1
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	9a 81       	ldd	r25, Y+2	; 0x02
    3438:	82 17       	cp	r24, r18
    343a:	93 07       	cpc	r25, r19
    343c:	0c f0       	brlt	.+2      	; 0x3440 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x96>
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	44 23       	and	r20, r20
    3442:	41 f6       	brne	.-112    	; 0x33d4 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x2a>
	/*if ((TIFR1 & (1<<OCF1A)) != 0)
	{
		model->SystemModel->
	}*/
	
	completedDispatch = true;
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	9e 81       	ldd	r25, Y+6	; 0x06
    3448:	21 e0       	ldi	r18, 0x01	; 1
    344a:	fc 01       	movw	r30, r24
    344c:	23 8f       	std	Z+27, r18	; 0x1b
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    344e:	83 e5       	ldi	r24, 0x53	; 83
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	23 e5       	ldi	r18, 0x53	; 83
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	f9 01       	movw	r30, r18
    3458:	20 81       	ld	r18, Z
    345a:	21 7f       	andi	r18, 0xF1	; 241
    345c:	fc 01       	movw	r30, r24
    345e:	20 83       	st	Z, r18
	sleep_mode();
    3460:	83 e5       	ldi	r24, 0x53	; 83
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	23 e5       	ldi	r18, 0x53	; 83
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	f9 01       	movw	r30, r18
    346a:	20 81       	ld	r18, Z
    346c:	21 60       	ori	r18, 0x01	; 1
    346e:	fc 01       	movw	r30, r24
    3470:	20 83       	st	Z, r18
    3472:	88 95       	sleep
    3474:	83 e5       	ldi	r24, 0x53	; 83
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	23 e5       	ldi	r18, 0x53	; 83
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	f9 01       	movw	r30, r18
    347e:	20 81       	ld	r18, Z
    3480:	2e 7f       	andi	r18, 0xFE	; 254
    3482:	fc 01       	movw	r30, r24
    3484:	20 83       	st	Z, r18
}
    3486:	26 96       	adiw	r28, 0x06	; 6
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	f8 94       	cli
    348c:	de bf       	out	0x3e, r29	; 62
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	cd bf       	out	0x3d, r28	; 61
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	08 95       	ret

00003498 <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	1f 92       	push	r1
    349e:	1f 92       	push	r1
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	9a 83       	std	Y+2, r25	; 0x02
    34a6:	89 83       	std	Y+1, r24	; 0x01
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	fc 01       	movw	r30, r24
    34ae:	80 8d       	ldd	r24, Z+24	; 0x18
    34b0:	91 8d       	ldd	r25, Z+25	; 0x19
    34b2:	80 34       	cpi	r24, 0x40	; 64
    34b4:	91 05       	cpc	r25, r1
    34b6:	39 f1       	breq	.+78     	; 0x3506 <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    34b8:	81 34       	cpi	r24, 0x41	; 65
    34ba:	91 05       	cpc	r25, r1
    34bc:	3c f4       	brge	.+14     	; 0x34cc <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    34be:	81 30       	cpi	r24, 0x01	; 1
    34c0:	91 05       	cpc	r25, r1
    34c2:	69 f0       	breq	.+26     	; 0x34de <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    34c4:	88 30       	cpi	r24, 0x08	; 8
    34c6:	91 05       	cpc	r25, r1
    34c8:	a1 f0       	breq	.+40     	; 0x34f2 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    34ca:	3b c0       	rjmp	.+118    	; 0x3542 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    34cc:	81 15       	cp	r24, r1
    34ce:	f1 e0       	ldi	r31, 0x01	; 1
    34d0:	9f 07       	cpc	r25, r31
    34d2:	19 f1       	breq	.+70     	; 0x351a <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    34d4:	81 15       	cp	r24, r1
    34d6:	24 e0       	ldi	r18, 0x04	; 4
    34d8:	92 07       	cpc	r25, r18
    34da:	49 f1       	breq	.+82     	; 0x352e <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    34dc:	32 c0       	rjmp	.+100    	; 0x3542 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    34de:	81 e8       	ldi	r24, 0x81	; 129
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	21 e8       	ldi	r18, 0x81	; 129
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	f9 01       	movw	r30, r18
    34e8:	20 81       	ld	r18, Z
    34ea:	21 60       	ori	r18, 0x01	; 1
    34ec:	fc 01       	movw	r30, r24
    34ee:	20 83       	st	Z, r18
			break;
    34f0:	31 c0       	rjmp	.+98     	; 0x3554 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    34f2:	81 e8       	ldi	r24, 0x81	; 129
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	21 e8       	ldi	r18, 0x81	; 129
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	f9 01       	movw	r30, r18
    34fc:	20 81       	ld	r18, Z
    34fe:	22 60       	ori	r18, 0x02	; 2
    3500:	fc 01       	movw	r30, r24
    3502:	20 83       	st	Z, r18
			break;
    3504:	27 c0       	rjmp	.+78     	; 0x3554 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    3506:	81 e8       	ldi	r24, 0x81	; 129
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	21 e8       	ldi	r18, 0x81	; 129
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	f9 01       	movw	r30, r18
    3510:	20 81       	ld	r18, Z
    3512:	23 60       	ori	r18, 0x03	; 3
    3514:	fc 01       	movw	r30, r24
    3516:	20 83       	st	Z, r18
			break;
    3518:	1d c0       	rjmp	.+58     	; 0x3554 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    351a:	81 e8       	ldi	r24, 0x81	; 129
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	21 e8       	ldi	r18, 0x81	; 129
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	f9 01       	movw	r30, r18
    3524:	20 81       	ld	r18, Z
    3526:	24 60       	ori	r18, 0x04	; 4
    3528:	fc 01       	movw	r30, r24
    352a:	20 83       	st	Z, r18
			break;
    352c:	13 c0       	rjmp	.+38     	; 0x3554 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    352e:	81 e8       	ldi	r24, 0x81	; 129
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	21 e8       	ldi	r18, 0x81	; 129
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	f9 01       	movw	r30, r18
    3538:	20 81       	ld	r18, Z
    353a:	25 60       	ori	r18, 0x05	; 5
    353c:	fc 01       	movw	r30, r24
    353e:	20 83       	st	Z, r18
			break;
    3540:	09 c0       	rjmp	.+18     	; 0x3554 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    3542:	81 e8       	ldi	r24, 0x81	; 129
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	21 e8       	ldi	r18, 0x81	; 129
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	f9 01       	movw	r30, r18
    354c:	20 81       	ld	r18, Z
    354e:	21 60       	ori	r18, 0x01	; 1
    3550:	fc 01       	movw	r30, r24
    3552:	20 83       	st	Z, r18
	}
}
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	df 91       	pop	r29
    355a:	cf 91       	pop	r28
    355c:	08 95       	ret

0000355e <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    355e:	1f 92       	push	r1
    3560:	0f 92       	push	r0
    3562:	00 90 5f 00 	lds	r0, 0x005F
    3566:	0f 92       	push	r0
    3568:	11 24       	eor	r1, r1
    356a:	00 90 5b 00 	lds	r0, 0x005B
    356e:	0f 92       	push	r0
    3570:	2f 93       	push	r18
    3572:	3f 93       	push	r19
    3574:	4f 93       	push	r20
    3576:	5f 93       	push	r21
    3578:	6f 93       	push	r22
    357a:	7f 93       	push	r23
    357c:	8f 93       	push	r24
    357e:	9f 93       	push	r25
    3580:	af 93       	push	r26
    3582:	bf 93       	push	r27
    3584:	ef 93       	push	r30
    3586:	ff 93       	push	r31
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	00 d0       	rcall	.+0      	; 0x358e <__vector_17+0x30>
    358e:	00 d0       	rcall	.+0      	; 0x3590 <__vector_17+0x32>
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
	//TODO do we want to stop interrupts in this method?
	Scheduler *scheduler = Scheduler::getScheduler();
    3594:	0e 94 a9 18 	call	0x3152	; 0x3152 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
	
	//Detect if the scheduler blew a frame
	if (!scheduler->hasCompletedDispatch())
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	9c 81       	ldd	r25, Y+4	; 0x04
    35a0:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN10helicopter9scheduler9Scheduler20hasCompletedDispatchEv>
    35a4:	98 2f       	mov	r25, r24
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	89 27       	eor	r24, r25
    35aa:	88 23       	and	r24, r24
    35ac:	29 f0       	breq	.+10     	; 0x35b8 <__vector_17+0x5a>
	{
		scheduler->hasBlownFrame(true);
    35ae:	8b 81       	ldd	r24, Y+3	; 0x03
    35b0:	9c 81       	ldd	r25, Y+4	; 0x04
    35b2:	61 e0       	ldi	r22, 0x01	; 1
    35b4:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb>
	}
	
	Task *task = NULL;
    35b8:	1e 82       	std	Y+6, r1	; 0x06
    35ba:	1d 82       	std	Y+5, r1	; 0x05
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    35bc:	1a 82       	std	Y+2, r1	; 0x02
    35be:	19 82       	std	Y+1, r1	; 0x01
    35c0:	33 c0       	rjmp	.+102    	; 0x3628 <__vector_17+0xca>
	{
		task = scheduler->getTasks()[i];
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    35ca:	9c 01       	movw	r18, r24
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	82 0f       	add	r24, r18
    35d6:	93 1f       	adc	r25, r19
    35d8:	fc 01       	movw	r30, r24
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	9e 83       	std	Y+6, r25	; 0x06
    35e0:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	9e 81       	ldd	r25, Y+6	; 0x06
    35e6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <_ZN10helicopter5tasks4Task8getDelayEv>
    35ea:	21 e0       	ldi	r18, 0x01	; 1
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	09 f0       	breq	.+2      	; 0x35f2 <__vector_17+0x94>
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	22 23       	and	r18, r18
    35f4:	81 f0       	breq	.+32     	; 0x3616 <__vector_17+0xb8>
		{
			//Mark the task as ready to run
			task->setIsReadyToRun(true);
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	9e 81       	ldd	r25, Y+6	; 0x06
    35fa:	61 e0       	ldi	r22, 0x01	; 1
    35fc:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	9e 81       	ldd	r25, Y+6	; 0x06
    3604:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_ZN10helicopter5tasks4Task9getPeriodEv>
    3608:	9c 01       	movw	r18, r24
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	b9 01       	movw	r22, r18
    3610:	0e 94 0e 18 	call	0x301c	; 0x301c <_ZN10helicopter5tasks4Task8setDelayEi>
    3614:	04 c0       	rjmp	.+8      	; 0x361e <__vector_17+0xc0>
		}else
		{
			task->reduceDelay();
    3616:	8d 81       	ldd	r24, Y+5	; 0x05
    3618:	9e 81       	ldd	r25, Y+6	; 0x06
    361a:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN10helicopter5tasks4Task11reduceDelayEv>
	
	Task *task = NULL;
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	01 96       	adiw	r24, 0x01	; 1
    3624:	9a 83       	std	Y+2, r25	; 0x02
    3626:	89 83       	std	Y+1, r24	; 0x01
    3628:	8b 81       	ldd	r24, Y+3	; 0x03
    362a:	9c 81       	ldd	r25, Y+4	; 0x04
    362c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    3630:	9c 01       	movw	r18, r24
    3632:	41 e0       	ldi	r20, 0x01	; 1
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	82 17       	cp	r24, r18
    363a:	93 07       	cpc	r25, r19
    363c:	0c f0       	brlt	.+2      	; 0x3640 <__vector_17+0xe2>
    363e:	40 e0       	ldi	r20, 0x00	; 0
    3640:	44 23       	and	r20, r20
    3642:	09 f0       	breq	.+2      	; 0x3646 <__vector_17+0xe8>
    3644:	be cf       	rjmp	.-132    	; 0x35c2 <__vector_17+0x64>
		}else
		{
			task->reduceDelay();
		}
	}
}
    3646:	26 96       	adiw	r28, 0x06	; 6
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	ff 91       	pop	r31
    3658:	ef 91       	pop	r30
    365a:	bf 91       	pop	r27
    365c:	af 91       	pop	r26
    365e:	9f 91       	pop	r25
    3660:	8f 91       	pop	r24
    3662:	7f 91       	pop	r23
    3664:	6f 91       	pop	r22
    3666:	5f 91       	pop	r21
    3668:	4f 91       	pop	r20
    366a:	3f 91       	pop	r19
    366c:	2f 91       	pop	r18
    366e:	0f 90       	pop	r0
    3670:	00 92 5b 00 	sts	0x005B, r0
    3674:	0f 90       	pop	r0
    3676:	00 92 5f 00 	sts	0x005F, r0
    367a:	0f 90       	pop	r0
    367c:	1f 90       	pop	r1
    367e:	18 95       	reti

00003680 <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    3680:	cf 93       	push	r28
    3682:	df 93       	push	r29
    3684:	1f 92       	push	r1
    3686:	1f 92       	push	r1
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	08 95       	ret

0000369a <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDOuterLoopTask.h"

using namespace helicopter::tasks;

PIDOuterLoopTask::PIDOuterLoopTask (PIDController *pidController, int delay, int period) :
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
    36a2:	28 97       	sbiw	r28, 0x08	; 8
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	9a 83       	std	Y+2, r25	; 0x02
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	7c 83       	std	Y+4, r23	; 0x04
    36b4:	6b 83       	std	Y+3, r22	; 0x03
    36b6:	5e 83       	std	Y+6, r21	; 0x06
    36b8:	4d 83       	std	Y+5, r20	; 0x05
    36ba:	38 87       	std	Y+8, r19	; 0x08
    36bc:	2f 83       	std	Y+7, r18	; 0x07
Task(delay, period),
pidController(pidController)
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	4f 81       	ldd	r20, Y+7	; 0x07
    36c4:	58 85       	ldd	r21, Y+8	; 0x08
    36c6:	2d 81       	ldd	r18, Y+5	; 0x05
    36c8:	3e 81       	ldd	r19, Y+6	; 0x06
    36ca:	b9 01       	movw	r22, r18
    36cc:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <_ZN10helicopter5tasks4TaskC1Eii>
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	24 e5       	ldi	r18, 0x54	; 84
    36d6:	32 e0       	ldi	r19, 0x02	; 2
    36d8:	fc 01       	movw	r30, r24
    36da:	31 83       	std	Z+1, r19	; 0x01
    36dc:	20 83       	st	Z, r18
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	2b 81       	ldd	r18, Y+3	; 0x03
    36e4:	3c 81       	ldd	r19, Y+4	; 0x04
    36e6:	fc 01       	movw	r30, r24
    36e8:	30 87       	std	Z+8, r19	; 0x08
    36ea:	27 83       	std	Z+7, r18	; 0x07
{
	
}
    36ec:	28 96       	adiw	r28, 0x08	; 8
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	08 95       	ret

000036fe <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>:

void PIDOuterLoopTask::runTaskImpl()
{
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	1f 92       	push	r1
    3704:	1f 92       	push	r1
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
	pidController->tailRotorCollectiveOuterLoopUpdate();
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	fc 01       	movw	r30, r24
    3714:	87 81       	ldd	r24, Z+7	; 0x07
    3716:	90 85       	ldd	r25, Z+8	; 0x08
    3718:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>
}
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	08 95       	ret

00003726 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDOuterLoopTask : public Task
    3726:	cf 93       	push	r28
    3728:	df 93       	push	r29
    372a:	1f 92       	push	r1
    372c:	1f 92       	push	r1
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	24 e5       	ldi	r18, 0x54	; 84
    373c:	32 e0       	ldi	r19, 0x02	; 2
    373e:	fc 01       	movw	r30, r24
    3740:	31 83       	std	Z+1, r19	; 0x01
    3742:	20 83       	st	Z, r18
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	9a 81       	ldd	r25, Y+2	; 0x02
    3748:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	81 70       	andi	r24, 0x01	; 1
    3752:	99 27       	eor	r25, r25
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	21 f0       	breq	.+8      	; 0x3760 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev+0x3a>
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	08 95       	ret

0000376a <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>:
    376a:	cf 93       	push	r28
    376c:	df 93       	push	r29
    376e:	1f 92       	push	r1
    3770:	1f 92       	push	r1
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	9a 81       	ldd	r25, Y+2	; 0x02
    377e:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	08 95       	ret

00003794 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEPNS_10controller13PIDControllerEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, PIDController *pidController, int delay, int period) :
    3794:	ef 92       	push	r14
    3796:	ff 92       	push	r15
    3798:	0f 93       	push	r16
    379a:	1f 93       	push	r17
    379c:	cf 93       	push	r28
    379e:	df 93       	push	r29
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	2c 97       	sbiw	r28, 0x0c	; 12
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	de bf       	out	0x3e, r29	; 62
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	cd bf       	out	0x3d, r28	; 61
    37b0:	9a 83       	std	Y+2, r25	; 0x02
    37b2:	89 83       	std	Y+1, r24	; 0x01
    37b4:	7c 83       	std	Y+4, r23	; 0x04
    37b6:	6b 83       	std	Y+3, r22	; 0x03
    37b8:	5e 83       	std	Y+6, r21	; 0x06
    37ba:	4d 83       	std	Y+5, r20	; 0x05
    37bc:	38 87       	std	Y+8, r19	; 0x08
    37be:	2f 83       	std	Y+7, r18	; 0x07
    37c0:	1a 87       	std	Y+10, r17	; 0x0a
    37c2:	09 87       	std	Y+9, r16	; 0x09
    37c4:	fc 86       	std	Y+12, r15	; 0x0c
    37c6:	eb 86       	std	Y+11, r14	; 0x0b
	Task(delay, period),
	radioInterface(radioInterface),
	model(model),
	pidController(pidController)
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
    37cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    37ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    37d0:	29 85       	ldd	r18, Y+9	; 0x09
    37d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    37d4:	b9 01       	movw	r22, r18
    37d6:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <_ZN10helicopter5tasks4TaskC1Eii>
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	9a 81       	ldd	r25, Y+2	; 0x02
    37de:	22 e6       	ldi	r18, 0x62	; 98
    37e0:	32 e0       	ldi	r19, 0x02	; 2
    37e2:	fc 01       	movw	r30, r24
    37e4:	31 83       	std	Z+1, r19	; 0x01
    37e6:	20 83       	st	Z, r18
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	9a 81       	ldd	r25, Y+2	; 0x02
    37ec:	2b 81       	ldd	r18, Y+3	; 0x03
    37ee:	3c 81       	ldd	r19, Y+4	; 0x04
    37f0:	fc 01       	movw	r30, r24
    37f2:	30 87       	std	Z+8, r19	; 0x08
    37f4:	27 83       	std	Z+7, r18	; 0x07
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	9a 81       	ldd	r25, Y+2	; 0x02
    37fa:	2d 81       	ldd	r18, Y+5	; 0x05
    37fc:	3e 81       	ldd	r19, Y+6	; 0x06
    37fe:	fc 01       	movw	r30, r24
    3800:	32 87       	std	Z+10, r19	; 0x0a
    3802:	21 87       	std	Z+9, r18	; 0x09
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	2f 81       	ldd	r18, Y+7	; 0x07
    380a:	38 85       	ldd	r19, Y+8	; 0x08
    380c:	fc 01       	movw	r30, r24
    380e:	34 87       	std	Z+12, r19	; 0x0c
    3810:	23 87       	std	Z+11, r18	; 0x0b
{
	
}
    3812:	2c 96       	adiw	r28, 0x0c	; 12
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	ff 90       	pop	r15
    3828:	ef 90       	pop	r14
    382a:	08 95       	ret

0000382c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:

void SimTelemetryTask::runTaskImpl() 
{
    382c:	cf 93       	push	r28
    382e:	df 93       	push	r29
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
    3834:	2d 97       	sbiw	r28, 0x0d	; 13
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	f8 94       	cli
    383a:	de bf       	out	0x3e, r29	; 62
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	cd bf       	out	0x3d, r28	; 61
    3840:	9d 87       	std	Y+13, r25	; 0x0d
    3842:	8c 87       	std	Y+12, r24	; 0x0c
	
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    3844:	ce 01       	movw	r24, r28
    3846:	05 96       	adiw	r24, 0x05	; 5
    3848:	0e 94 4c 11 	call	0x2298	; 0x2298 <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    384c:	8c 85       	ldd	r24, Y+12	; 0x0c
    384e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3850:	fc 01       	movw	r30, r24
    3852:	87 81       	ldd	r24, Z+7	; 0x07
    3854:	90 85       	ldd	r25, Z+8	; 0x08
    3856:	9e 01       	movw	r18, r28
    3858:	2b 5f       	subi	r18, 0xFB	; 251
    385a:	3f 4f       	sbci	r19, 0xFF	; 255
    385c:	b9 01       	movw	r22, r18
    385e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    3862:	9a 83       	std	Y+2, r25	; 0x02
    3864:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	9a 81       	ldd	r25, Y+2	; 0x02
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	09 f0       	breq	.+2      	; 0x3870 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x44>
    386e:	bc c0       	rjmp	.+376    	; 0x39e8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1bc>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    3870:	1b 86       	std	Y+11, r1	; 0x0b
    3872:	1a 86       	std	Y+10, r1	; 0x0a
	
		status = radioInterface->receive(message);
    3874:	8c 85       	ldd	r24, Y+12	; 0x0c
    3876:	9d 85       	ldd	r25, Y+13	; 0x0d
    3878:	fc 01       	movw	r30, r24
    387a:	87 81       	ldd	r24, Z+7	; 0x07
    387c:	90 85       	ldd	r25, Z+8	; 0x08
    387e:	9e 01       	movw	r18, r28
    3880:	26 5f       	subi	r18, 0xF6	; 246
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	b9 01       	movw	r22, r18
    3886:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    388a:	9a 83       	std	Y+2, r25	; 0x02
    388c:	89 83       	std	Y+1, r24	; 0x01
	
		if (status == 0 && message != NULL)
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	9a 81       	ldd	r25, Y+2	; 0x02
    3892:	00 97       	sbiw	r24, 0x00	; 0
    3894:	09 f0       	breq	.+2      	; 0x3898 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x6c>
    3896:	a8 c0       	rjmp	.+336    	; 0x39e8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1bc>
    3898:	8a 85       	ldd	r24, Y+10	; 0x0a
    389a:	9b 85       	ldd	r25, Y+11	; 0x0b
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	09 f4       	brne	.+2      	; 0x38a2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x76>
    38a0:	a3 c0       	rjmp	.+326    	; 0x39e8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1bc>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    38a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a6:	9c 83       	std	Y+4, r25	; 0x04
    38a8:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			telemMsg->updateModelFromMessageFromSimulator(model);
    38aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    38ae:	fc 01       	movw	r30, r24
    38b0:	21 85       	ldd	r18, Z+9	; 0x09
    38b2:	32 85       	ldd	r19, Z+10	; 0x0a
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	9c 81       	ldd	r25, Y+4	; 0x04
    38b8:	b9 01       	movw	r22, r18
    38ba:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>
			
			pidController->setYawIntegralGain((double) telemMsg->YawIntegralGain / 100);
    38be:	8b 81       	ldd	r24, Y+3	; 0x03
    38c0:	9c 81       	ldd	r25, Y+4	; 0x04
    38c2:	fc 01       	movw	r30, r24
    38c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    38c6:	96 8d       	ldd	r25, Z+30	; 0x1e
    38c8:	a7 8d       	ldd	r26, Z+31	; 0x1f
    38ca:	b0 a1       	ldd	r27, Z+32	; 0x20
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__floatsisf>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	48 ec       	ldi	r20, 0xC8	; 200
    38de:	52 e4       	ldi	r21, 0x42	; 66
    38e0:	bc 01       	movw	r22, r24
    38e2:	cd 01       	movw	r24, r26
    38e4:	0e 94 3d 20 	call	0x407a	; 0x407a <__divsf3>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    38ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    38f0:	f9 01       	movw	r30, r18
    38f2:	23 85       	ldd	r18, Z+11	; 0x0b
    38f4:	34 85       	ldd	r19, Z+12	; 0x0c
    38f6:	ac 01       	movw	r20, r24
    38f8:	bd 01       	movw	r22, r26
    38fa:	c9 01       	movw	r24, r18
    38fc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>
			pidController->setYawDerivativeGain((double) telemMsg->YawDerivativeGain / 100);
    3900:	8b 81       	ldd	r24, Y+3	; 0x03
    3902:	9c 81       	ldd	r25, Y+4	; 0x04
    3904:	fc 01       	movw	r30, r24
    3906:	81 a1       	ldd	r24, Z+33	; 0x21
    3908:	92 a1       	ldd	r25, Z+34	; 0x22
    390a:	a3 a1       	ldd	r26, Z+35	; 0x23
    390c:	b4 a1       	ldd	r27, Z+36	; 0x24
    390e:	bc 01       	movw	r22, r24
    3910:	cd 01       	movw	r24, r26
    3912:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__floatsisf>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	48 ec       	ldi	r20, 0xC8	; 200
    3920:	52 e4       	ldi	r21, 0x42	; 66
    3922:	bc 01       	movw	r22, r24
    3924:	cd 01       	movw	r24, r26
    3926:	0e 94 3d 20 	call	0x407a	; 0x407a <__divsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3930:	3d 85       	ldd	r19, Y+13	; 0x0d
    3932:	f9 01       	movw	r30, r18
    3934:	23 85       	ldd	r18, Z+11	; 0x0b
    3936:	34 85       	ldd	r19, Z+12	; 0x0c
    3938:	ac 01       	movw	r20, r24
    393a:	bd 01       	movw	r22, r26
    393c:	c9 01       	movw	r24, r18
    393e:	0e 94 99 0b 	call	0x1732	; 0x1732 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>
			pidController->setYawProportionalGain((double) telemMsg->YawProportionalGain / 100);
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	9c 81       	ldd	r25, Y+4	; 0x04
    3946:	fc 01       	movw	r30, r24
    3948:	85 a1       	ldd	r24, Z+37	; 0x25
    394a:	96 a1       	ldd	r25, Z+38	; 0x26
    394c:	a7 a1       	ldd	r26, Z+39	; 0x27
    394e:	b0 a5       	ldd	r27, Z+40	; 0x28
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__floatsisf>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	48 ec       	ldi	r20, 0xC8	; 200
    3962:	52 e4       	ldi	r21, 0x42	; 66
    3964:	bc 01       	movw	r22, r24
    3966:	cd 01       	movw	r24, r26
    3968:	0e 94 3d 20 	call	0x407a	; 0x407a <__divsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	2c 85       	ldd	r18, Y+12	; 0x0c
    3972:	3d 85       	ldd	r19, Y+13	; 0x0d
    3974:	f9 01       	movw	r30, r18
    3976:	23 85       	ldd	r18, Z+11	; 0x0b
    3978:	34 85       	ldd	r19, Z+12	; 0x0c
    397a:	ac 01       	movw	r20, r24
    397c:	bd 01       	movw	r22, r26
    397e:	c9 01       	movw	r24, r18
    3980:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>
			pidController->setYawAntiWindupGain((double) telemMsg->YawAntiWindupGain / 100);
    3984:	8b 81       	ldd	r24, Y+3	; 0x03
    3986:	9c 81       	ldd	r25, Y+4	; 0x04
    3988:	fc 01       	movw	r30, r24
    398a:	81 a5       	ldd	r24, Z+41	; 0x29
    398c:	92 a5       	ldd	r25, Z+42	; 0x2a
    398e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    3990:	b4 a5       	ldd	r27, Z+44	; 0x2c
    3992:	bc 01       	movw	r22, r24
    3994:	cd 01       	movw	r24, r26
    3996:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__floatsisf>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	48 ec       	ldi	r20, 0xC8	; 200
    39a4:	52 e4       	ldi	r21, 0x42	; 66
    39a6:	bc 01       	movw	r22, r24
    39a8:	cd 01       	movw	r24, r26
    39aa:	0e 94 3d 20 	call	0x407a	; 0x407a <__divsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    39b4:	3d 85       	ldd	r19, Y+13	; 0x0d
    39b6:	f9 01       	movw	r30, r18
    39b8:	23 85       	ldd	r18, Z+11	; 0x0b
    39ba:	34 85       	ldd	r19, Z+12	; 0x0c
    39bc:	ac 01       	movw	r20, r24
    39be:	bd 01       	movw	r22, r26
    39c0:	c9 01       	movw	r24, r18
    39c2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>
		
			delete message;
    39c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    39c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    39ca:	00 97       	sbiw	r24, 0x00	; 0
    39cc:	69 f0       	breq	.+26     	; 0x39e8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1bc>
    39ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    39d2:	fc 01       	movw	r30, r24
    39d4:	80 81       	ld	r24, Z
    39d6:	91 81       	ldd	r25, Z+1	; 0x01
    39d8:	02 96       	adiw	r24, 0x02	; 2
    39da:	fc 01       	movw	r30, r24
    39dc:	20 81       	ld	r18, Z
    39de:	31 81       	ldd	r19, Z+1	; 0x01
    39e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    39e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    39e4:	f9 01       	movw	r30, r18
    39e6:	19 95       	eicall
		}
	}
	
	//Update instrumentation fields
	switch (status)
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	9a 81       	ldd	r25, Y+2	; 0x02
    39ec:	8e 3f       	cpi	r24, 0xFE	; 254
    39ee:	ff ef       	ldi	r31, 0xFF	; 255
    39f0:	9f 07       	cpc	r25, r31
    39f2:	41 f1       	breq	.+80     	; 0x3a44 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x218>
    39f4:	8f 3f       	cpi	r24, 0xFF	; 255
    39f6:	2f ef       	ldi	r18, 0xFF	; 255
    39f8:	92 07       	cpc	r25, r18
    39fa:	2c f4       	brge	.+10     	; 0x3a06 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1da>
    39fc:	8d 3f       	cpi	r24, 0xFD	; 253
    39fe:	ef ef       	ldi	r30, 0xFF	; 255
    3a00:	9e 07       	cpc	r25, r30
    3a02:	b9 f1       	breq	.+110    	; 0x3a72 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x246>
    3a04:	4d c0       	rjmp	.+154    	; 0x3aa0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x274>
    3a06:	8f 3f       	cpi	r24, 0xFF	; 255
    3a08:	ff ef       	ldi	r31, 0xFF	; 255
    3a0a:	9f 07       	cpc	r25, r31
    3a0c:	21 f0       	breq	.+8      	; 0x3a16 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1ea>
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1e8>
    3a12:	47 c0       	rjmp	.+142    	; 0x3aa2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x276>
    3a14:	45 c0       	rjmp	.+138    	; 0x3aa0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x274>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    3a16:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a18:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	81 85       	ldd	r24, Z+9	; 0x09
    3a1e:	92 85       	ldd	r25, Z+10	; 0x0a
    3a20:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	01 96       	adiw	r24, 0x01	; 1
    3a2a:	a1 1d       	adc	r26, r1
    3a2c:	b1 1d       	adc	r27, r1
    3a2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a30:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a32:	f9 01       	movw	r30, r18
    3a34:	21 85       	ldd	r18, Z+9	; 0x09
    3a36:	32 85       	ldd	r19, Z+10	; 0x0a
    3a38:	ac 01       	movw	r20, r24
    3a3a:	bd 01       	movw	r22, r26
    3a3c:	c9 01       	movw	r24, r18
    3a3e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZN10helicopter5model11SystemModel8TimeoutsEl>
			break;
    3a42:	30 c0       	rjmp	.+96     	; 0x3aa4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x278>
		case -2:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    3a44:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a46:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a48:	fc 01       	movw	r30, r24
    3a4a:	81 85       	ldd	r24, Z+9	; 0x09
    3a4c:	92 85       	ldd	r25, Z+10	; 0x0a
    3a4e:	0e 94 94 13 	call	0x2728	; 0x2728 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	01 96       	adiw	r24, 0x01	; 1
    3a58:	a1 1d       	adc	r26, r1
    3a5a:	b1 1d       	adc	r27, r1
    3a5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a5e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a60:	f9 01       	movw	r30, r18
    3a62:	21 85       	ldd	r18, Z+9	; 0x09
    3a64:	32 85       	ldd	r19, Z+10	; 0x0a
    3a66:	ac 01       	movw	r20, r24
    3a68:	bd 01       	movw	r22, r26
    3a6a:	c9 01       	movw	r24, r18
    3a6c:	0e 94 aa 13 	call	0x2754	; 0x2754 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl>
			break;
    3a70:	19 c0       	rjmp	.+50     	; 0x3aa4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x278>
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    3a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a74:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a76:	fc 01       	movw	r30, r24
    3a78:	81 85       	ldd	r24, Z+9	; 0x09
    3a7a:	92 85       	ldd	r25, Z+10	; 0x0a
    3a7c:	0e 94 ca 13 	call	0x2794	; 0x2794 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	a1 1d       	adc	r26, r1
    3a88:	b1 1d       	adc	r27, r1
    3a8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a8c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a8e:	f9 01       	movw	r30, r18
    3a90:	21 85       	ldd	r18, Z+9	; 0x09
    3a92:	32 85       	ldd	r19, Z+10	; 0x0a
    3a94:	ac 01       	movw	r20, r24
    3a96:	bd 01       	movw	r22, r26
    3a98:	c9 01       	movw	r24, r18
    3a9a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl>
		default:
			break;
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x278>
    3aa0:	01 c0       	rjmp	.+2      	; 0x3aa4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x278>
	
	//Update instrumentation fields
	switch (status)
	{
		case 0:
			break;
    3aa2:	00 00       	nop
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
		default:
			break;
		
	}
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	05 96       	adiw	r24, 0x05	; 5
    3aa8:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    3aac:	2d 96       	adiw	r28, 0x0d	; 13
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	df 91       	pop	r29
    3aba:	cf 91       	pop	r28
    3abc:	08 95       	ret

00003abe <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	1f 92       	push	r1
    3ac4:	1f 92       	push	r1
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
    3aca:	9a 83       	std	Y+2, r25	; 0x02
    3acc:	89 83       	std	Y+1, r24	; 0x01
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad2:	22 e6       	ldi	r18, 0x62	; 98
    3ad4:	32 e0       	ldi	r19, 0x02	; 2
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	31 83       	std	Z+1, r19	; 0x01
    3ada:	20 83       	st	Z, r18
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	81 70       	andi	r24, 0x01	; 1
    3aea:	99 27       	eor	r25, r25
    3aec:	00 97       	sbiw	r24, 0x00	; 0
    3aee:	21 f0       	breq	.+8      	; 0x3af8 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev+0x3a>
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	9a 81       	ldd	r25, Y+2	; 0x02
    3af4:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	08 95       	ret

00003b02 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	1f 92       	push	r1
    3b08:	1f 92       	push	r1
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	9a 83       	std	Y+2, r25	; 0x02
    3b10:	89 83       	std	Y+1, r24	; 0x01
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	9a 81       	ldd	r25, Y+2	; 0x02
    3b16:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1e:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	08 95       	ret

00003b2c <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29
    3b30:	1f 92       	push	r1
    3b32:	1f 92       	push	r1
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	9a 83       	std	Y+2, r25	; 0x02
    3b3a:	89 83       	std	Y+1, r24	; 0x01
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	08 95       	ret

00003b46 <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	00 d0       	rcall	.+0      	; 0x3b4c <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    3b4c:	00 d0       	rcall	.+0      	; 0x3b4e <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
    3b52:	9a 83       	std	Y+2, r25	; 0x02
    3b54:	89 83       	std	Y+1, r24	; 0x01
    3b56:	7c 83       	std	Y+4, r23	; 0x04
    3b58:	6b 83       	std	Y+3, r22	; 0x03
    3b5a:	5e 83       	std	Y+6, r21	; 0x06
    3b5c:	4d 83       	std	Y+5, r20	; 0x05
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	9a 81       	ldd	r25, Y+2	; 0x02
    3b62:	20 e7       	ldi	r18, 0x70	; 112
    3b64:	32 e0       	ldi	r19, 0x02	; 2
    3b66:	fc 01       	movw	r30, r24
    3b68:	31 83       	std	Z+1, r19	; 0x01
    3b6a:	20 83       	st	Z, r18
{
	this->delay = delay;
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b70:	2b 81       	ldd	r18, Y+3	; 0x03
    3b72:	3c 81       	ldd	r19, Y+4	; 0x04
    3b74:	fc 01       	movw	r30, r24
    3b76:	33 83       	std	Z+3, r19	; 0x03
    3b78:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7e:	2d 81       	ldd	r18, Y+5	; 0x05
    3b80:	3e 81       	ldd	r19, Y+6	; 0x06
    3b82:	fc 01       	movw	r30, r24
    3b84:	35 83       	std	Z+5, r19	; 0x05
    3b86:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	16 82       	std	Z+6, r1	; 0x06
}
    3b90:	26 96       	adiw	r28, 0x06	; 6
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	08 95       	ret

00003ba2 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	1f 92       	push	r1
    3ba8:	1f 92       	push	r1
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	9a 83       	std	Y+2, r25	; 0x02
    3bb0:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    3bb2:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb8:	fc 01       	movw	r30, r24
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	20 81       	ld	r18, Z
    3bc2:	31 81       	ldd	r19, Z+1	; 0x01
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc8:	f9 01       	movw	r30, r18
    3bca:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    3bcc:	78 94       	sei
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	08 95       	ret

00003bd8 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	2a 97       	sbiw	r28, 0x0a	; 10
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	9a 83       	std	Y+2, r25	; 0x02
    3bf2:	89 83       	std	Y+1, r24	; 0x01
    3bf4:	7c 83       	std	Y+4, r23	; 0x04
    3bf6:	6b 83       	std	Y+3, r22	; 0x03
    3bf8:	5e 83       	std	Y+6, r21	; 0x06
    3bfa:	4d 83       	std	Y+5, r20	; 0x05
    3bfc:	38 87       	std	Y+8, r19	; 0x08
    3bfe:	2f 83       	std	Y+7, r18	; 0x07
    3c00:	1a 87       	std	Y+10, r17	; 0x0a
    3c02:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	9a 81       	ldd	r25, Y+2	; 0x02
    3c08:	49 85       	ldd	r20, Y+9	; 0x09
    3c0a:	5a 85       	ldd	r21, Y+10	; 0x0a
    3c0c:	2f 81       	ldd	r18, Y+7	; 0x07
    3c0e:	38 85       	ldd	r19, Y+8	; 0x08
    3c10:	b9 01       	movw	r22, r18
    3c12:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <_ZN10helicopter5tasks4TaskC1Eii>
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1a:	2e e7       	ldi	r18, 0x7E	; 126
    3c1c:	32 e0       	ldi	r19, 0x02	; 2
    3c1e:	fc 01       	movw	r30, r24
    3c20:	31 83       	std	Z+1, r19	; 0x01
    3c22:	20 83       	st	Z, r18
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	9a 81       	ldd	r25, Y+2	; 0x02
    3c28:	2b 81       	ldd	r18, Y+3	; 0x03
    3c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	30 87       	std	Z+8, r19	; 0x08
    3c30:	27 83       	std	Z+7, r18	; 0x07
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	9a 81       	ldd	r25, Y+2	; 0x02
    3c36:	2d 81       	ldd	r18, Y+5	; 0x05
    3c38:	3e 81       	ldd	r19, Y+6	; 0x06
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	32 87       	std	Z+10, r19	; 0x0a
    3c3e:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    3c40:	2a 96       	adiw	r28, 0x0a	; 10
    3c42:	0f b6       	in	r0, 0x3f	; 63
    3c44:	f8 94       	cli
    3c46:	de bf       	out	0x3e, r29	; 62
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	cd bf       	out	0x3d, r28	; 61
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	1f 91       	pop	r17
    3c52:	0f 91       	pop	r16
    3c54:	08 95       	ret

00003c56 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	00 d0       	rcall	.+0      	; 0x3c5c <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    3c5c:	1f 92       	push	r1
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	9c 83       	std	Y+4, r25	; 0x04
    3c64:	8b 83       	std	Y+3, r24	; 0x03
	//SystemTelemetryMessage *message = model->CreateTelemetryMessage();
	SystemTelemetryMessage *message = SystemTelemetryMessage::buildMessageFromModel(model);
    3c66:	8b 81       	ldd	r24, Y+3	; 0x03
    3c68:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	81 85       	ldd	r24, Z+9	; 0x09
    3c6e:	92 85       	ldd	r25, Z+10	; 0x0a
    3c70:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>
    3c74:	9a 83       	std	Y+2, r25	; 0x02
    3c76:	89 83       	std	Y+1, r24	; 0x01
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    3c78:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	87 81       	ldd	r24, Z+7	; 0x07
    3c80:	90 85       	ldd	r25, Z+8	; 0x08
    3c82:	29 81       	ldd	r18, Y+1	; 0x01
    3c84:	3a 81       	ldd	r19, Y+2	; 0x02
    3c86:	b9 01       	movw	r22, r18
    3c88:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	69 f0       	breq	.+26     	; 0x3cae <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    3c94:	89 81       	ldd	r24, Y+1	; 0x01
    3c96:	9a 81       	ldd	r25, Y+2	; 0x02
    3c98:	fc 01       	movw	r30, r24
    3c9a:	80 81       	ld	r24, Z
    3c9c:	91 81       	ldd	r25, Z+1	; 0x01
    3c9e:	02 96       	adiw	r24, 0x02	; 2
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	20 81       	ld	r18, Z
    3ca4:	31 81       	ldd	r19, Z+1	; 0x01
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    3caa:	f9 01       	movw	r30, r18
    3cac:	19 95       	eicall
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	08 95       	ret

00003cbc <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	1f 92       	push	r1
    3cc2:	1f 92       	push	r1
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	9a 83       	std	Y+2, r25	; 0x02
    3cca:	89 83       	std	Y+1, r24	; 0x01
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd0:	2e e7       	ldi	r18, 0x7E	; 126
    3cd2:	32 e0       	ldi	r19, 0x02	; 2
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	31 83       	std	Z+1, r19	; 0x01
    3cd8:	20 83       	st	Z, r18
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cde:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	81 70       	andi	r24, 0x01	; 1
    3ce8:	99 27       	eor	r25, r25
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	21 f0       	breq	.+8      	; 0x3cf6 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev+0x3a>
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf2:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	08 95       	ret

00003d00 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	1f 92       	push	r1
    3d06:	1f 92       	push	r1
    3d08:	cd b7       	in	r28, 0x3d	; 61
    3d0a:	de b7       	in	r29, 0x3e	; 62
    3d0c:	9a 83       	std	Y+2, r25	; 0x02
    3d0e:	89 83       	std	Y+1, r24	; 0x01
    3d10:	89 81       	ldd	r24, Y+1	; 0x01
    3d12:	9a 81       	ldd	r25, Y+2	; 0x02
    3d14:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1c:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZdlPv>
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	08 95       	ret

00003d2a <_Znwj>:
 *  Author: HP User
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	1f 92       	push	r1
    3d30:	1f 92       	push	r1
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	9a 83       	std	Y+2, r25	; 0x02
    3d38:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3e:	0e 94 8c 22 	call	0x4518	; 0x4518 <malloc>
}
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	08 95       	ret

00003d4c <_ZdlPv>:

void operator delete(void * ptr)
{
    3d4c:	cf 93       	push	r28
    3d4e:	df 93       	push	r29
    3d50:	1f 92       	push	r1
    3d52:	1f 92       	push	r1
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	21 f0       	breq	.+8      	; 0x3d6c <_ZdlPv+0x20>
	{
		free(ptr);
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	9a 81       	ldd	r25, Y+2	; 0x02
    3d68:	0e 94 27 23 	call	0x464e	; 0x464e <free>
	}
}
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	08 95       	ret

00003d76 <_Znaj>:

void * operator new[](size_t size)
{
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	1f 92       	push	r1
    3d7c:	1f 92       	push	r1
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	9a 83       	std	Y+2, r25	; 0x02
    3d84:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8a:	0e 94 8c 22 	call	0x4518	; 0x4518 <malloc>
}
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	08 95       	ret

00003d98 <_ZdaPv>:

void operator delete[](void * ptr)
{
    3d98:	cf 93       	push	r28
    3d9a:	df 93       	push	r29
    3d9c:	1f 92       	push	r1
    3d9e:	1f 92       	push	r1
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	9a 83       	std	Y+2, r25	; 0x02
    3da6:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	00 97       	sbiw	r24, 0x00	; 0
    3dae:	21 f0       	breq	.+8      	; 0x3db8 <_ZdaPv+0x20>
	{
		free(ptr);
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	9a 81       	ldd	r25, Y+2	; 0x02
    3db4:	0e 94 27 23 	call	0x464e	; 0x464e <free>
	}
	
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	df 91       	pop	r29
    3dbe:	cf 91       	pop	r28
    3dc0:	08 95       	ret

00003dc2 <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    3dc2:	0f 93       	push	r16
    3dc4:	1f 93       	push	r17
    3dc6:	cf 93       	push	r28
    3dc8:	df 93       	push	r29
    3dca:	00 d0       	rcall	.+0      	; 0x3dcc <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    3dcc:	1f 92       	push	r1
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
    3dd2:	9c 83       	std	Y+4, r25	; 0x04
    3dd4:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    3dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dda:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
    3dde:	1a 82       	std	Y+2, r1	; 0x02
    3de0:	19 82       	std	Y+1, r1	; 0x01
	
	if (timeoutMilliseconds > 1000) 
    3de2:	8b 81       	ldd	r24, Y+3	; 0x03
    3de4:	9c 81       	ldd	r25, Y+4	; 0x04
    3de6:	fc 01       	movw	r30, r24
    3de8:	86 81       	ldd	r24, Z+6	; 0x06
    3dea:	97 81       	ldd	r25, Z+7	; 0x07
    3dec:	89 3e       	cpi	r24, 0xE9	; 233
    3dee:	f3 e0       	ldi	r31, 0x03	; 3
    3df0:	9f 07       	cpc	r25, r31
    3df2:	2c f0       	brlt	.+10     	; 0x3dfe <_ZN10helicopter4util5Timer10startTimerEv+0x3c>
	{
		frequency = 1;
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	9a 83       	std	Y+2, r25	; 0x02
    3dfa:	89 83       	std	Y+1, r24	; 0x01
    3dfc:	0d c0       	rjmp	.+26     	; 0x3e18 <_ZN10helicopter4util5Timer10startTimerEv+0x56>
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    3dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3e00:	9c 81       	ldd	r25, Y+4	; 0x04
    3e02:	fc 01       	movw	r30, r24
    3e04:	26 81       	ldd	r18, Z+6	; 0x06
    3e06:	37 81       	ldd	r19, Z+7	; 0x07
    3e08:	88 ee       	ldi	r24, 0xE8	; 232
    3e0a:	93 e0       	ldi	r25, 0x03	; 3
    3e0c:	b9 01       	movw	r22, r18
    3e0e:	0e 94 42 22 	call	0x4484	; 0x4484 <__divmodhi4>
    3e12:	9b 01       	movw	r18, r22
    3e14:	3a 83       	std	Y+2, r19	; 0x02
    3e16:	29 83       	std	Y+1, r18	; 0x01
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    3e18:	08 e9       	ldi	r16, 0x98	; 152
    3e1a:	10 e0       	ldi	r17, 0x00	; 0
    3e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e20:	fc 01       	movw	r30, r24
    3e22:	80 81       	ld	r24, Z
    3e24:	91 81       	ldd	r25, Z+1	; 0x01
    3e26:	a2 81       	ldd	r26, Z+2	; 0x02
    3e28:	b3 81       	ldd	r27, Z+3	; 0x03
    3e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    3e2e:	f9 01       	movw	r30, r18
    3e30:	24 81       	ldd	r18, Z+4	; 0x04
    3e32:	35 81       	ldd	r19, Z+5	; 0x05
    3e34:	44 27       	eor	r20, r20
    3e36:	37 fd       	sbrc	r19, 7
    3e38:	40 95       	com	r20
    3e3a:	54 2f       	mov	r21, r20
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodsi4>
    3e44:	da 01       	movw	r26, r20
    3e46:	c9 01       	movw	r24, r18
    3e48:	29 81       	ldd	r18, Y+1	; 0x01
    3e4a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e4c:	44 27       	eor	r20, r20
    3e4e:	37 fd       	sbrc	r19, 7
    3e50:	40 95       	com	r20
    3e52:	54 2f       	mov	r21, r20
    3e54:	bc 01       	movw	r22, r24
    3e56:	cd 01       	movw	r24, r26
    3e58:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodsi4>
    3e5c:	da 01       	movw	r26, r20
    3e5e:	c9 01       	movw	r24, r18
    3e60:	f8 01       	movw	r30, r16
    3e62:	91 83       	std	Z+1, r25	; 0x01
    3e64:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    3e66:	81 e9       	ldi	r24, 0x91	; 145
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	21 e9       	ldi	r18, 0x91	; 145
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	f9 01       	movw	r30, r18
    3e70:	20 81       	ld	r18, Z
    3e72:	28 60       	ori	r18, 0x08	; 8
    3e74:	fc 01       	movw	r30, r24
    3e76:	20 83       	st	Z, r18
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    3e78:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	84 81       	ldd	r24, Z+4	; 0x04
    3e80:	95 81       	ldd	r25, Z+5	; 0x05
    3e82:	80 34       	cpi	r24, 0x40	; 64
    3e84:	91 05       	cpc	r25, r1
    3e86:	39 f1       	breq	.+78     	; 0x3ed6 <_ZN10helicopter4util5Timer10startTimerEv+0x114>
    3e88:	81 34       	cpi	r24, 0x41	; 65
    3e8a:	91 05       	cpc	r25, r1
    3e8c:	3c f4       	brge	.+14     	; 0x3e9c <_ZN10helicopter4util5Timer10startTimerEv+0xda>
    3e8e:	81 30       	cpi	r24, 0x01	; 1
    3e90:	91 05       	cpc	r25, r1
    3e92:	69 f0       	breq	.+26     	; 0x3eae <_ZN10helicopter4util5Timer10startTimerEv+0xec>
    3e94:	88 30       	cpi	r24, 0x08	; 8
    3e96:	91 05       	cpc	r25, r1
    3e98:	a1 f0       	breq	.+40     	; 0x3ec2 <_ZN10helicopter4util5Timer10startTimerEv+0x100>
    3e9a:	3b c0       	rjmp	.+118    	; 0x3f12 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
    3e9c:	81 15       	cp	r24, r1
    3e9e:	f1 e0       	ldi	r31, 0x01	; 1
    3ea0:	9f 07       	cpc	r25, r31
    3ea2:	19 f1       	breq	.+70     	; 0x3eea <_ZN10helicopter4util5Timer10startTimerEv+0x128>
    3ea4:	81 15       	cp	r24, r1
    3ea6:	24 e0       	ldi	r18, 0x04	; 4
    3ea8:	92 07       	cpc	r25, r18
    3eaa:	49 f1       	breq	.+82     	; 0x3efe <_ZN10helicopter4util5Timer10startTimerEv+0x13c>
    3eac:	32 c0       	rjmp	.+100    	; 0x3f12 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    3eae:	81 e9       	ldi	r24, 0x91	; 145
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	21 e9       	ldi	r18, 0x91	; 145
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	f9 01       	movw	r30, r18
    3eb8:	20 81       	ld	r18, Z
    3eba:	21 60       	ori	r18, 0x01	; 1
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	20 83       	st	Z, r18
		break;
    3ec0:	31 c0       	rjmp	.+98     	; 0x3f24 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    3ec2:	81 e9       	ldi	r24, 0x91	; 145
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	21 e9       	ldi	r18, 0x91	; 145
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	f9 01       	movw	r30, r18
    3ecc:	20 81       	ld	r18, Z
    3ece:	22 60       	ori	r18, 0x02	; 2
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	20 83       	st	Z, r18
		break;
    3ed4:	27 c0       	rjmp	.+78     	; 0x3f24 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    3ed6:	81 e9       	ldi	r24, 0x91	; 145
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	21 e9       	ldi	r18, 0x91	; 145
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	f9 01       	movw	r30, r18
    3ee0:	20 81       	ld	r18, Z
    3ee2:	23 60       	ori	r18, 0x03	; 3
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	20 83       	st	Z, r18
		break;
    3ee8:	1d c0       	rjmp	.+58     	; 0x3f24 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    3eea:	81 e9       	ldi	r24, 0x91	; 145
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	21 e9       	ldi	r18, 0x91	; 145
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	f9 01       	movw	r30, r18
    3ef4:	20 81       	ld	r18, Z
    3ef6:	24 60       	ori	r18, 0x04	; 4
    3ef8:	fc 01       	movw	r30, r24
    3efa:	20 83       	st	Z, r18
		break;
    3efc:	13 c0       	rjmp	.+38     	; 0x3f24 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    3efe:	81 e9       	ldi	r24, 0x91	; 145
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	21 e9       	ldi	r18, 0x91	; 145
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	f9 01       	movw	r30, r18
    3f08:	20 81       	ld	r18, Z
    3f0a:	25 60       	ori	r18, 0x05	; 5
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	20 83       	st	Z, r18
		break;
    3f10:	09 c0       	rjmp	.+18     	; 0x3f24 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		default:
		TCCR3B |= NoPrescaling;
    3f12:	81 e9       	ldi	r24, 0x91	; 145
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	21 e9       	ldi	r18, 0x91	; 145
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	f9 01       	movw	r30, r18
    3f1c:	20 81       	ld	r18, Z
    3f1e:	21 60       	ori	r18, 0x01	; 1
    3f20:	fc 01       	movw	r30, r24
    3f22:	20 83       	st	Z, r18
	}
}
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	0f 90       	pop	r0
    3f2a:	0f 90       	pop	r0
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	1f 91       	pop	r17
    3f32:	0f 91       	pop	r16
    3f34:	08 95       	ret

00003f36 <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	1f 92       	push	r1
    3f3c:	1f 92       	push	r1
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	9a 83       	std	Y+2, r25	; 0x02
    3f44:	89 83       	std	Y+1, r24	; 0x01
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    3f46:	88 e3       	ldi	r24, 0x38	; 56
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	80 81       	ld	r24, Z
    3f4e:	88 2f       	mov	r24, r24
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	82 70       	andi	r24, 0x02	; 2
    3f54:	99 27       	eor	r25, r25
    3f56:	21 e0       	ldi	r18, 0x01	; 1
    3f58:	00 97       	sbiw	r24, 0x00	; 0
    3f5a:	09 f4       	brne	.+2      	; 0x3f5e <_ZN10helicopter4util5Timer11hasTimedoutEv+0x28>
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	82 2f       	mov	r24, r18
}
    3f60:	0f 90       	pop	r0
    3f62:	0f 90       	pop	r0
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	08 95       	ret

00003f6a <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	1f 92       	push	r1
    3f70:	1f 92       	push	r1
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	9a 83       	std	Y+2, r25	; 0x02
    3f78:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    3f7a:	81 e9       	ldi	r24, 0x91	; 145
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	fc 01       	movw	r30, r24
    3f80:	10 82       	st	Z, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    3f82:	84 e9       	ldi	r24, 0x94	; 148
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	fc 01       	movw	r30, r24
    3f88:	11 82       	std	Z+1, r1	; 0x01
    3f8a:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    3f8c:	88 e3       	ldi	r24, 0x38	; 56
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	28 e3       	ldi	r18, 0x38	; 56
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	f9 01       	movw	r30, r18
    3f96:	20 81       	ld	r18, Z
    3f98:	22 60       	ori	r18, 0x02	; 2
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	20 83       	st	Z, r18
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	df 91       	pop	r29
    3fa4:	cf 91       	pop	r28
    3fa6:	08 95       	ret

00003fa8 <__subsf3>:
    3fa8:	50 58       	subi	r21, 0x80	; 128

00003faa <__addsf3>:
    3faa:	bb 27       	eor	r27, r27
    3fac:	aa 27       	eor	r26, r26
    3fae:	0e d0       	rcall	.+28     	; 0x3fcc <__addsf3x>
    3fb0:	b1 c1       	rjmp	.+866    	; 0x4314 <__fp_round>
    3fb2:	a2 d1       	rcall	.+836    	; 0x42f8 <__fp_pscA>
    3fb4:	30 f0       	brcs	.+12     	; 0x3fc2 <__addsf3+0x18>
    3fb6:	a7 d1       	rcall	.+846    	; 0x4306 <__fp_pscB>
    3fb8:	20 f0       	brcs	.+8      	; 0x3fc2 <__addsf3+0x18>
    3fba:	31 f4       	brne	.+12     	; 0x3fc8 <__addsf3+0x1e>
    3fbc:	9f 3f       	cpi	r25, 0xFF	; 255
    3fbe:	11 f4       	brne	.+4      	; 0x3fc4 <__addsf3+0x1a>
    3fc0:	1e f4       	brtc	.+6      	; 0x3fc8 <__addsf3+0x1e>
    3fc2:	97 c1       	rjmp	.+814    	; 0x42f2 <__fp_nan>
    3fc4:	0e f4       	brtc	.+2      	; 0x3fc8 <__addsf3+0x1e>
    3fc6:	e0 95       	com	r30
    3fc8:	e7 fb       	bst	r30, 7
    3fca:	64 c1       	rjmp	.+712    	; 0x4294 <__fp_inf>

00003fcc <__addsf3x>:
    3fcc:	e9 2f       	mov	r30, r25
    3fce:	b3 d1       	rcall	.+870    	; 0x4336 <__fp_split3>
    3fd0:	80 f3       	brcs	.-32     	; 0x3fb2 <__addsf3+0x8>
    3fd2:	ba 17       	cp	r27, r26
    3fd4:	62 07       	cpc	r22, r18
    3fd6:	73 07       	cpc	r23, r19
    3fd8:	84 07       	cpc	r24, r20
    3fda:	95 07       	cpc	r25, r21
    3fdc:	18 f0       	brcs	.+6      	; 0x3fe4 <__addsf3x+0x18>
    3fde:	71 f4       	brne	.+28     	; 0x3ffc <__addsf3x+0x30>
    3fe0:	9e f5       	brtc	.+102    	; 0x4048 <__addsf3x+0x7c>
    3fe2:	e2 c1       	rjmp	.+964    	; 0x43a8 <__fp_zero>
    3fe4:	0e f4       	brtc	.+2      	; 0x3fe8 <__addsf3x+0x1c>
    3fe6:	e0 95       	com	r30
    3fe8:	0b 2e       	mov	r0, r27
    3fea:	ba 2f       	mov	r27, r26
    3fec:	a0 2d       	mov	r26, r0
    3fee:	0b 01       	movw	r0, r22
    3ff0:	b9 01       	movw	r22, r18
    3ff2:	90 01       	movw	r18, r0
    3ff4:	0c 01       	movw	r0, r24
    3ff6:	ca 01       	movw	r24, r20
    3ff8:	a0 01       	movw	r20, r0
    3ffa:	11 24       	eor	r1, r1
    3ffc:	ff 27       	eor	r31, r31
    3ffe:	59 1b       	sub	r21, r25
    4000:	99 f0       	breq	.+38     	; 0x4028 <__addsf3x+0x5c>
    4002:	59 3f       	cpi	r21, 0xF9	; 249
    4004:	50 f4       	brcc	.+20     	; 0x401a <__addsf3x+0x4e>
    4006:	50 3e       	cpi	r21, 0xE0	; 224
    4008:	68 f1       	brcs	.+90     	; 0x4064 <__addsf3x+0x98>
    400a:	1a 16       	cp	r1, r26
    400c:	f0 40       	sbci	r31, 0x00	; 0
    400e:	a2 2f       	mov	r26, r18
    4010:	23 2f       	mov	r18, r19
    4012:	34 2f       	mov	r19, r20
    4014:	44 27       	eor	r20, r20
    4016:	58 5f       	subi	r21, 0xF8	; 248
    4018:	f3 cf       	rjmp	.-26     	; 0x4000 <__addsf3x+0x34>
    401a:	46 95       	lsr	r20
    401c:	37 95       	ror	r19
    401e:	27 95       	ror	r18
    4020:	a7 95       	ror	r26
    4022:	f0 40       	sbci	r31, 0x00	; 0
    4024:	53 95       	inc	r21
    4026:	c9 f7       	brne	.-14     	; 0x401a <__addsf3x+0x4e>
    4028:	7e f4       	brtc	.+30     	; 0x4048 <__addsf3x+0x7c>
    402a:	1f 16       	cp	r1, r31
    402c:	ba 0b       	sbc	r27, r26
    402e:	62 0b       	sbc	r22, r18
    4030:	73 0b       	sbc	r23, r19
    4032:	84 0b       	sbc	r24, r20
    4034:	ba f0       	brmi	.+46     	; 0x4064 <__addsf3x+0x98>
    4036:	91 50       	subi	r25, 0x01	; 1
    4038:	a1 f0       	breq	.+40     	; 0x4062 <__addsf3x+0x96>
    403a:	ff 0f       	add	r31, r31
    403c:	bb 1f       	adc	r27, r27
    403e:	66 1f       	adc	r22, r22
    4040:	77 1f       	adc	r23, r23
    4042:	88 1f       	adc	r24, r24
    4044:	c2 f7       	brpl	.-16     	; 0x4036 <__addsf3x+0x6a>
    4046:	0e c0       	rjmp	.+28     	; 0x4064 <__addsf3x+0x98>
    4048:	ba 0f       	add	r27, r26
    404a:	62 1f       	adc	r22, r18
    404c:	73 1f       	adc	r23, r19
    404e:	84 1f       	adc	r24, r20
    4050:	48 f4       	brcc	.+18     	; 0x4064 <__addsf3x+0x98>
    4052:	87 95       	ror	r24
    4054:	77 95       	ror	r23
    4056:	67 95       	ror	r22
    4058:	b7 95       	ror	r27
    405a:	f7 95       	ror	r31
    405c:	9e 3f       	cpi	r25, 0xFE	; 254
    405e:	08 f0       	brcs	.+2      	; 0x4062 <__addsf3x+0x96>
    4060:	b3 cf       	rjmp	.-154    	; 0x3fc8 <__addsf3+0x1e>
    4062:	93 95       	inc	r25
    4064:	88 0f       	add	r24, r24
    4066:	08 f0       	brcs	.+2      	; 0x406a <__addsf3x+0x9e>
    4068:	99 27       	eor	r25, r25
    406a:	ee 0f       	add	r30, r30
    406c:	97 95       	ror	r25
    406e:	87 95       	ror	r24
    4070:	08 95       	ret

00004072 <__cmpsf2>:
    4072:	ec d0       	rcall	.+472    	; 0x424c <__fp_cmp>
    4074:	08 f4       	brcc	.+2      	; 0x4078 <__cmpsf2+0x6>
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	08 95       	ret

0000407a <__divsf3>:
    407a:	0c d0       	rcall	.+24     	; 0x4094 <__divsf3x>
    407c:	4b c1       	rjmp	.+662    	; 0x4314 <__fp_round>
    407e:	43 d1       	rcall	.+646    	; 0x4306 <__fp_pscB>
    4080:	40 f0       	brcs	.+16     	; 0x4092 <__divsf3+0x18>
    4082:	3a d1       	rcall	.+628    	; 0x42f8 <__fp_pscA>
    4084:	30 f0       	brcs	.+12     	; 0x4092 <__divsf3+0x18>
    4086:	21 f4       	brne	.+8      	; 0x4090 <__divsf3+0x16>
    4088:	5f 3f       	cpi	r21, 0xFF	; 255
    408a:	19 f0       	breq	.+6      	; 0x4092 <__divsf3+0x18>
    408c:	03 c1       	rjmp	.+518    	; 0x4294 <__fp_inf>
    408e:	51 11       	cpse	r21, r1
    4090:	8c c1       	rjmp	.+792    	; 0x43aa <__fp_szero>
    4092:	2f c1       	rjmp	.+606    	; 0x42f2 <__fp_nan>

00004094 <__divsf3x>:
    4094:	50 d1       	rcall	.+672    	; 0x4336 <__fp_split3>
    4096:	98 f3       	brcs	.-26     	; 0x407e <__divsf3+0x4>

00004098 <__divsf3_pse>:
    4098:	99 23       	and	r25, r25
    409a:	c9 f3       	breq	.-14     	; 0x408e <__divsf3+0x14>
    409c:	55 23       	and	r21, r21
    409e:	b1 f3       	breq	.-20     	; 0x408c <__divsf3+0x12>
    40a0:	95 1b       	sub	r25, r21
    40a2:	55 0b       	sbc	r21, r21
    40a4:	bb 27       	eor	r27, r27
    40a6:	aa 27       	eor	r26, r26
    40a8:	62 17       	cp	r22, r18
    40aa:	73 07       	cpc	r23, r19
    40ac:	84 07       	cpc	r24, r20
    40ae:	38 f0       	brcs	.+14     	; 0x40be <__divsf3_pse+0x26>
    40b0:	9f 5f       	subi	r25, 0xFF	; 255
    40b2:	5f 4f       	sbci	r21, 0xFF	; 255
    40b4:	22 0f       	add	r18, r18
    40b6:	33 1f       	adc	r19, r19
    40b8:	44 1f       	adc	r20, r20
    40ba:	aa 1f       	adc	r26, r26
    40bc:	a9 f3       	breq	.-22     	; 0x40a8 <__divsf3_pse+0x10>
    40be:	33 d0       	rcall	.+102    	; 0x4126 <__divsf3_pse+0x8e>
    40c0:	0e 2e       	mov	r0, r30
    40c2:	3a f0       	brmi	.+14     	; 0x40d2 <__divsf3_pse+0x3a>
    40c4:	e0 e8       	ldi	r30, 0x80	; 128
    40c6:	30 d0       	rcall	.+96     	; 0x4128 <__divsf3_pse+0x90>
    40c8:	91 50       	subi	r25, 0x01	; 1
    40ca:	50 40       	sbci	r21, 0x00	; 0
    40cc:	e6 95       	lsr	r30
    40ce:	00 1c       	adc	r0, r0
    40d0:	ca f7       	brpl	.-14     	; 0x40c4 <__divsf3_pse+0x2c>
    40d2:	29 d0       	rcall	.+82     	; 0x4126 <__divsf3_pse+0x8e>
    40d4:	fe 2f       	mov	r31, r30
    40d6:	27 d0       	rcall	.+78     	; 0x4126 <__divsf3_pse+0x8e>
    40d8:	66 0f       	add	r22, r22
    40da:	77 1f       	adc	r23, r23
    40dc:	88 1f       	adc	r24, r24
    40de:	bb 1f       	adc	r27, r27
    40e0:	26 17       	cp	r18, r22
    40e2:	37 07       	cpc	r19, r23
    40e4:	48 07       	cpc	r20, r24
    40e6:	ab 07       	cpc	r26, r27
    40e8:	b0 e8       	ldi	r27, 0x80	; 128
    40ea:	09 f0       	breq	.+2      	; 0x40ee <__divsf3_pse+0x56>
    40ec:	bb 0b       	sbc	r27, r27
    40ee:	80 2d       	mov	r24, r0
    40f0:	bf 01       	movw	r22, r30
    40f2:	ff 27       	eor	r31, r31
    40f4:	93 58       	subi	r25, 0x83	; 131
    40f6:	5f 4f       	sbci	r21, 0xFF	; 255
    40f8:	2a f0       	brmi	.+10     	; 0x4104 <__divsf3_pse+0x6c>
    40fa:	9e 3f       	cpi	r25, 0xFE	; 254
    40fc:	51 05       	cpc	r21, r1
    40fe:	68 f0       	brcs	.+26     	; 0x411a <__divsf3_pse+0x82>
    4100:	c9 c0       	rjmp	.+402    	; 0x4294 <__fp_inf>
    4102:	53 c1       	rjmp	.+678    	; 0x43aa <__fp_szero>
    4104:	5f 3f       	cpi	r21, 0xFF	; 255
    4106:	ec f3       	brlt	.-6      	; 0x4102 <__divsf3_pse+0x6a>
    4108:	98 3e       	cpi	r25, 0xE8	; 232
    410a:	dc f3       	brlt	.-10     	; 0x4102 <__divsf3_pse+0x6a>
    410c:	86 95       	lsr	r24
    410e:	77 95       	ror	r23
    4110:	67 95       	ror	r22
    4112:	b7 95       	ror	r27
    4114:	f7 95       	ror	r31
    4116:	9f 5f       	subi	r25, 0xFF	; 255
    4118:	c9 f7       	brne	.-14     	; 0x410c <__divsf3_pse+0x74>
    411a:	88 0f       	add	r24, r24
    411c:	91 1d       	adc	r25, r1
    411e:	96 95       	lsr	r25
    4120:	87 95       	ror	r24
    4122:	97 f9       	bld	r25, 7
    4124:	08 95       	ret
    4126:	e1 e0       	ldi	r30, 0x01	; 1
    4128:	66 0f       	add	r22, r22
    412a:	77 1f       	adc	r23, r23
    412c:	88 1f       	adc	r24, r24
    412e:	bb 1f       	adc	r27, r27
    4130:	62 17       	cp	r22, r18
    4132:	73 07       	cpc	r23, r19
    4134:	84 07       	cpc	r24, r20
    4136:	ba 07       	cpc	r27, r26
    4138:	20 f0       	brcs	.+8      	; 0x4142 <__divsf3_pse+0xaa>
    413a:	62 1b       	sub	r22, r18
    413c:	73 0b       	sbc	r23, r19
    413e:	84 0b       	sbc	r24, r20
    4140:	ba 0b       	sbc	r27, r26
    4142:	ee 1f       	adc	r30, r30
    4144:	88 f7       	brcc	.-30     	; 0x4128 <__divsf3_pse+0x90>
    4146:	e0 95       	com	r30
    4148:	08 95       	ret

0000414a <__fixsfsi>:
    414a:	04 d0       	rcall	.+8      	; 0x4154 <__fixunssfsi>
    414c:	68 94       	set
    414e:	b1 11       	cpse	r27, r1
    4150:	2c c1       	rjmp	.+600    	; 0x43aa <__fp_szero>
    4152:	08 95       	ret

00004154 <__fixunssfsi>:
    4154:	f8 d0       	rcall	.+496    	; 0x4346 <__fp_splitA>
    4156:	88 f0       	brcs	.+34     	; 0x417a <__fixunssfsi+0x26>
    4158:	9f 57       	subi	r25, 0x7F	; 127
    415a:	90 f0       	brcs	.+36     	; 0x4180 <__fixunssfsi+0x2c>
    415c:	b9 2f       	mov	r27, r25
    415e:	99 27       	eor	r25, r25
    4160:	b7 51       	subi	r27, 0x17	; 23
    4162:	a0 f0       	brcs	.+40     	; 0x418c <__fixunssfsi+0x38>
    4164:	d1 f0       	breq	.+52     	; 0x419a <__fixunssfsi+0x46>
    4166:	66 0f       	add	r22, r22
    4168:	77 1f       	adc	r23, r23
    416a:	88 1f       	adc	r24, r24
    416c:	99 1f       	adc	r25, r25
    416e:	1a f0       	brmi	.+6      	; 0x4176 <__fixunssfsi+0x22>
    4170:	ba 95       	dec	r27
    4172:	c9 f7       	brne	.-14     	; 0x4166 <__fixunssfsi+0x12>
    4174:	12 c0       	rjmp	.+36     	; 0x419a <__fixunssfsi+0x46>
    4176:	b1 30       	cpi	r27, 0x01	; 1
    4178:	81 f0       	breq	.+32     	; 0x419a <__fixunssfsi+0x46>
    417a:	16 d1       	rcall	.+556    	; 0x43a8 <__fp_zero>
    417c:	b1 e0       	ldi	r27, 0x01	; 1
    417e:	08 95       	ret
    4180:	13 c1       	rjmp	.+550    	; 0x43a8 <__fp_zero>
    4182:	67 2f       	mov	r22, r23
    4184:	78 2f       	mov	r23, r24
    4186:	88 27       	eor	r24, r24
    4188:	b8 5f       	subi	r27, 0xF8	; 248
    418a:	39 f0       	breq	.+14     	; 0x419a <__fixunssfsi+0x46>
    418c:	b9 3f       	cpi	r27, 0xF9	; 249
    418e:	cc f3       	brlt	.-14     	; 0x4182 <__fixunssfsi+0x2e>
    4190:	86 95       	lsr	r24
    4192:	77 95       	ror	r23
    4194:	67 95       	ror	r22
    4196:	b3 95       	inc	r27
    4198:	d9 f7       	brne	.-10     	; 0x4190 <__fixunssfsi+0x3c>
    419a:	3e f4       	brtc	.+14     	; 0x41aa <__fixunssfsi+0x56>
    419c:	90 95       	com	r25
    419e:	80 95       	com	r24
    41a0:	70 95       	com	r23
    41a2:	61 95       	neg	r22
    41a4:	7f 4f       	sbci	r23, 0xFF	; 255
    41a6:	8f 4f       	sbci	r24, 0xFF	; 255
    41a8:	9f 4f       	sbci	r25, 0xFF	; 255
    41aa:	08 95       	ret

000041ac <__floatunsisf>:
    41ac:	e8 94       	clt
    41ae:	09 c0       	rjmp	.+18     	; 0x41c2 <__floatsisf+0x12>

000041b0 <__floatsisf>:
    41b0:	97 fb       	bst	r25, 7
    41b2:	3e f4       	brtc	.+14     	; 0x41c2 <__floatsisf+0x12>
    41b4:	90 95       	com	r25
    41b6:	80 95       	com	r24
    41b8:	70 95       	com	r23
    41ba:	61 95       	neg	r22
    41bc:	7f 4f       	sbci	r23, 0xFF	; 255
    41be:	8f 4f       	sbci	r24, 0xFF	; 255
    41c0:	9f 4f       	sbci	r25, 0xFF	; 255
    41c2:	99 23       	and	r25, r25
    41c4:	a9 f0       	breq	.+42     	; 0x41f0 <__floatsisf+0x40>
    41c6:	f9 2f       	mov	r31, r25
    41c8:	96 e9       	ldi	r25, 0x96	; 150
    41ca:	bb 27       	eor	r27, r27
    41cc:	93 95       	inc	r25
    41ce:	f6 95       	lsr	r31
    41d0:	87 95       	ror	r24
    41d2:	77 95       	ror	r23
    41d4:	67 95       	ror	r22
    41d6:	b7 95       	ror	r27
    41d8:	f1 11       	cpse	r31, r1
    41da:	f8 cf       	rjmp	.-16     	; 0x41cc <__floatsisf+0x1c>
    41dc:	fa f4       	brpl	.+62     	; 0x421c <__floatsisf+0x6c>
    41de:	bb 0f       	add	r27, r27
    41e0:	11 f4       	brne	.+4      	; 0x41e6 <__floatsisf+0x36>
    41e2:	60 ff       	sbrs	r22, 0
    41e4:	1b c0       	rjmp	.+54     	; 0x421c <__floatsisf+0x6c>
    41e6:	6f 5f       	subi	r22, 0xFF	; 255
    41e8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ea:	8f 4f       	sbci	r24, 0xFF	; 255
    41ec:	9f 4f       	sbci	r25, 0xFF	; 255
    41ee:	16 c0       	rjmp	.+44     	; 0x421c <__floatsisf+0x6c>
    41f0:	88 23       	and	r24, r24
    41f2:	11 f0       	breq	.+4      	; 0x41f8 <__floatsisf+0x48>
    41f4:	96 e9       	ldi	r25, 0x96	; 150
    41f6:	11 c0       	rjmp	.+34     	; 0x421a <__floatsisf+0x6a>
    41f8:	77 23       	and	r23, r23
    41fa:	21 f0       	breq	.+8      	; 0x4204 <__floatsisf+0x54>
    41fc:	9e e8       	ldi	r25, 0x8E	; 142
    41fe:	87 2f       	mov	r24, r23
    4200:	76 2f       	mov	r23, r22
    4202:	05 c0       	rjmp	.+10     	; 0x420e <__floatsisf+0x5e>
    4204:	66 23       	and	r22, r22
    4206:	71 f0       	breq	.+28     	; 0x4224 <__floatsisf+0x74>
    4208:	96 e8       	ldi	r25, 0x86	; 134
    420a:	86 2f       	mov	r24, r22
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	2a f0       	brmi	.+10     	; 0x421c <__floatsisf+0x6c>
    4212:	9a 95       	dec	r25
    4214:	66 0f       	add	r22, r22
    4216:	77 1f       	adc	r23, r23
    4218:	88 1f       	adc	r24, r24
    421a:	da f7       	brpl	.-10     	; 0x4212 <__floatsisf+0x62>
    421c:	88 0f       	add	r24, r24
    421e:	96 95       	lsr	r25
    4220:	87 95       	ror	r24
    4222:	97 f9       	bld	r25, 7
    4224:	08 95       	ret

00004226 <floor>:
    4226:	a9 d0       	rcall	.+338    	; 0x437a <__fp_trunc>
    4228:	80 f0       	brcs	.+32     	; 0x424a <floor+0x24>
    422a:	9f 37       	cpi	r25, 0x7F	; 127
    422c:	40 f4       	brcc	.+16     	; 0x423e <floor+0x18>
    422e:	91 11       	cpse	r25, r1
    4230:	0e f0       	brts	.+2      	; 0x4234 <floor+0xe>
    4232:	bb c0       	rjmp	.+374    	; 0x43aa <__fp_szero>
    4234:	60 e0       	ldi	r22, 0x00	; 0
    4236:	70 e0       	ldi	r23, 0x00	; 0
    4238:	80 e8       	ldi	r24, 0x80	; 128
    423a:	9f eb       	ldi	r25, 0xBF	; 191
    423c:	08 95       	ret
    423e:	26 f4       	brtc	.+8      	; 0x4248 <floor+0x22>
    4240:	1b 16       	cp	r1, r27
    4242:	61 1d       	adc	r22, r1
    4244:	71 1d       	adc	r23, r1
    4246:	81 1d       	adc	r24, r1
    4248:	2b c0       	rjmp	.+86     	; 0x42a0 <__fp_mintl>
    424a:	45 c0       	rjmp	.+138    	; 0x42d6 <__fp_mpack>

0000424c <__fp_cmp>:
    424c:	99 0f       	add	r25, r25
    424e:	00 08       	sbc	r0, r0
    4250:	55 0f       	add	r21, r21
    4252:	aa 0b       	sbc	r26, r26
    4254:	e0 e8       	ldi	r30, 0x80	; 128
    4256:	fe ef       	ldi	r31, 0xFE	; 254
    4258:	16 16       	cp	r1, r22
    425a:	17 06       	cpc	r1, r23
    425c:	e8 07       	cpc	r30, r24
    425e:	f9 07       	cpc	r31, r25
    4260:	c0 f0       	brcs	.+48     	; 0x4292 <__fp_cmp+0x46>
    4262:	12 16       	cp	r1, r18
    4264:	13 06       	cpc	r1, r19
    4266:	e4 07       	cpc	r30, r20
    4268:	f5 07       	cpc	r31, r21
    426a:	98 f0       	brcs	.+38     	; 0x4292 <__fp_cmp+0x46>
    426c:	62 1b       	sub	r22, r18
    426e:	73 0b       	sbc	r23, r19
    4270:	84 0b       	sbc	r24, r20
    4272:	95 0b       	sbc	r25, r21
    4274:	39 f4       	brne	.+14     	; 0x4284 <__fp_cmp+0x38>
    4276:	0a 26       	eor	r0, r26
    4278:	61 f0       	breq	.+24     	; 0x4292 <__fp_cmp+0x46>
    427a:	23 2b       	or	r18, r19
    427c:	24 2b       	or	r18, r20
    427e:	25 2b       	or	r18, r21
    4280:	21 f4       	brne	.+8      	; 0x428a <__fp_cmp+0x3e>
    4282:	08 95       	ret
    4284:	0a 26       	eor	r0, r26
    4286:	09 f4       	brne	.+2      	; 0x428a <__fp_cmp+0x3e>
    4288:	a1 40       	sbci	r26, 0x01	; 1
    428a:	a6 95       	lsr	r26
    428c:	8f ef       	ldi	r24, 0xFF	; 255
    428e:	81 1d       	adc	r24, r1
    4290:	81 1d       	adc	r24, r1
    4292:	08 95       	ret

00004294 <__fp_inf>:
    4294:	97 f9       	bld	r25, 7
    4296:	9f 67       	ori	r25, 0x7F	; 127
    4298:	80 e8       	ldi	r24, 0x80	; 128
    429a:	70 e0       	ldi	r23, 0x00	; 0
    429c:	60 e0       	ldi	r22, 0x00	; 0
    429e:	08 95       	ret

000042a0 <__fp_mintl>:
    42a0:	88 23       	and	r24, r24
    42a2:	71 f4       	brne	.+28     	; 0x42c0 <__fp_mintl+0x20>
    42a4:	77 23       	and	r23, r23
    42a6:	21 f0       	breq	.+8      	; 0x42b0 <__fp_mintl+0x10>
    42a8:	98 50       	subi	r25, 0x08	; 8
    42aa:	87 2b       	or	r24, r23
    42ac:	76 2f       	mov	r23, r22
    42ae:	07 c0       	rjmp	.+14     	; 0x42be <__fp_mintl+0x1e>
    42b0:	66 23       	and	r22, r22
    42b2:	11 f4       	brne	.+4      	; 0x42b8 <__fp_mintl+0x18>
    42b4:	99 27       	eor	r25, r25
    42b6:	0d c0       	rjmp	.+26     	; 0x42d2 <__fp_mintl+0x32>
    42b8:	90 51       	subi	r25, 0x10	; 16
    42ba:	86 2b       	or	r24, r22
    42bc:	70 e0       	ldi	r23, 0x00	; 0
    42be:	60 e0       	ldi	r22, 0x00	; 0
    42c0:	2a f0       	brmi	.+10     	; 0x42cc <__fp_mintl+0x2c>
    42c2:	9a 95       	dec	r25
    42c4:	66 0f       	add	r22, r22
    42c6:	77 1f       	adc	r23, r23
    42c8:	88 1f       	adc	r24, r24
    42ca:	da f7       	brpl	.-10     	; 0x42c2 <__fp_mintl+0x22>
    42cc:	88 0f       	add	r24, r24
    42ce:	96 95       	lsr	r25
    42d0:	87 95       	ror	r24
    42d2:	97 f9       	bld	r25, 7
    42d4:	08 95       	ret

000042d6 <__fp_mpack>:
    42d6:	9f 3f       	cpi	r25, 0xFF	; 255
    42d8:	31 f0       	breq	.+12     	; 0x42e6 <__fp_mpack_finite+0xc>

000042da <__fp_mpack_finite>:
    42da:	91 50       	subi	r25, 0x01	; 1
    42dc:	20 f4       	brcc	.+8      	; 0x42e6 <__fp_mpack_finite+0xc>
    42de:	87 95       	ror	r24
    42e0:	77 95       	ror	r23
    42e2:	67 95       	ror	r22
    42e4:	b7 95       	ror	r27
    42e6:	88 0f       	add	r24, r24
    42e8:	91 1d       	adc	r25, r1
    42ea:	96 95       	lsr	r25
    42ec:	87 95       	ror	r24
    42ee:	97 f9       	bld	r25, 7
    42f0:	08 95       	ret

000042f2 <__fp_nan>:
    42f2:	9f ef       	ldi	r25, 0xFF	; 255
    42f4:	80 ec       	ldi	r24, 0xC0	; 192
    42f6:	08 95       	ret

000042f8 <__fp_pscA>:
    42f8:	00 24       	eor	r0, r0
    42fa:	0a 94       	dec	r0
    42fc:	16 16       	cp	r1, r22
    42fe:	17 06       	cpc	r1, r23
    4300:	18 06       	cpc	r1, r24
    4302:	09 06       	cpc	r0, r25
    4304:	08 95       	ret

00004306 <__fp_pscB>:
    4306:	00 24       	eor	r0, r0
    4308:	0a 94       	dec	r0
    430a:	12 16       	cp	r1, r18
    430c:	13 06       	cpc	r1, r19
    430e:	14 06       	cpc	r1, r20
    4310:	05 06       	cpc	r0, r21
    4312:	08 95       	ret

00004314 <__fp_round>:
    4314:	09 2e       	mov	r0, r25
    4316:	03 94       	inc	r0
    4318:	00 0c       	add	r0, r0
    431a:	11 f4       	brne	.+4      	; 0x4320 <__fp_round+0xc>
    431c:	88 23       	and	r24, r24
    431e:	52 f0       	brmi	.+20     	; 0x4334 <__fp_round+0x20>
    4320:	bb 0f       	add	r27, r27
    4322:	40 f4       	brcc	.+16     	; 0x4334 <__fp_round+0x20>
    4324:	bf 2b       	or	r27, r31
    4326:	11 f4       	brne	.+4      	; 0x432c <__fp_round+0x18>
    4328:	60 ff       	sbrs	r22, 0
    432a:	04 c0       	rjmp	.+8      	; 0x4334 <__fp_round+0x20>
    432c:	6f 5f       	subi	r22, 0xFF	; 255
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	8f 4f       	sbci	r24, 0xFF	; 255
    4332:	9f 4f       	sbci	r25, 0xFF	; 255
    4334:	08 95       	ret

00004336 <__fp_split3>:
    4336:	57 fd       	sbrc	r21, 7
    4338:	90 58       	subi	r25, 0x80	; 128
    433a:	44 0f       	add	r20, r20
    433c:	55 1f       	adc	r21, r21
    433e:	59 f0       	breq	.+22     	; 0x4356 <__fp_splitA+0x10>
    4340:	5f 3f       	cpi	r21, 0xFF	; 255
    4342:	71 f0       	breq	.+28     	; 0x4360 <__fp_splitA+0x1a>
    4344:	47 95       	ror	r20

00004346 <__fp_splitA>:
    4346:	88 0f       	add	r24, r24
    4348:	97 fb       	bst	r25, 7
    434a:	99 1f       	adc	r25, r25
    434c:	61 f0       	breq	.+24     	; 0x4366 <__fp_splitA+0x20>
    434e:	9f 3f       	cpi	r25, 0xFF	; 255
    4350:	79 f0       	breq	.+30     	; 0x4370 <__fp_splitA+0x2a>
    4352:	87 95       	ror	r24
    4354:	08 95       	ret
    4356:	12 16       	cp	r1, r18
    4358:	13 06       	cpc	r1, r19
    435a:	14 06       	cpc	r1, r20
    435c:	55 1f       	adc	r21, r21
    435e:	f2 cf       	rjmp	.-28     	; 0x4344 <__fp_split3+0xe>
    4360:	46 95       	lsr	r20
    4362:	f1 df       	rcall	.-30     	; 0x4346 <__fp_splitA>
    4364:	08 c0       	rjmp	.+16     	; 0x4376 <__fp_splitA+0x30>
    4366:	16 16       	cp	r1, r22
    4368:	17 06       	cpc	r1, r23
    436a:	18 06       	cpc	r1, r24
    436c:	99 1f       	adc	r25, r25
    436e:	f1 cf       	rjmp	.-30     	; 0x4352 <__fp_splitA+0xc>
    4370:	86 95       	lsr	r24
    4372:	71 05       	cpc	r23, r1
    4374:	61 05       	cpc	r22, r1
    4376:	08 94       	sec
    4378:	08 95       	ret

0000437a <__fp_trunc>:
    437a:	e5 df       	rcall	.-54     	; 0x4346 <__fp_splitA>
    437c:	a0 f0       	brcs	.+40     	; 0x43a6 <__fp_trunc+0x2c>
    437e:	be e7       	ldi	r27, 0x7E	; 126
    4380:	b9 17       	cp	r27, r25
    4382:	88 f4       	brcc	.+34     	; 0x43a6 <__fp_trunc+0x2c>
    4384:	bb 27       	eor	r27, r27
    4386:	9f 38       	cpi	r25, 0x8F	; 143
    4388:	60 f4       	brcc	.+24     	; 0x43a2 <__fp_trunc+0x28>
    438a:	16 16       	cp	r1, r22
    438c:	b1 1d       	adc	r27, r1
    438e:	67 2f       	mov	r22, r23
    4390:	78 2f       	mov	r23, r24
    4392:	88 27       	eor	r24, r24
    4394:	98 5f       	subi	r25, 0xF8	; 248
    4396:	f7 cf       	rjmp	.-18     	; 0x4386 <__fp_trunc+0xc>
    4398:	86 95       	lsr	r24
    439a:	77 95       	ror	r23
    439c:	67 95       	ror	r22
    439e:	b1 1d       	adc	r27, r1
    43a0:	93 95       	inc	r25
    43a2:	96 39       	cpi	r25, 0x96	; 150
    43a4:	c8 f3       	brcs	.-14     	; 0x4398 <__fp_trunc+0x1e>
    43a6:	08 95       	ret

000043a8 <__fp_zero>:
    43a8:	e8 94       	clt

000043aa <__fp_szero>:
    43aa:	bb 27       	eor	r27, r27
    43ac:	66 27       	eor	r22, r22
    43ae:	77 27       	eor	r23, r23
    43b0:	cb 01       	movw	r24, r22
    43b2:	97 f9       	bld	r25, 7
    43b4:	08 95       	ret

000043b6 <__gesf2>:
    43b6:	4a df       	rcall	.-364    	; 0x424c <__fp_cmp>
    43b8:	08 f4       	brcc	.+2      	; 0x43bc <__gesf2+0x6>
    43ba:	8f ef       	ldi	r24, 0xFF	; 255
    43bc:	08 95       	ret

000043be <__mulsf3>:
    43be:	0b d0       	rcall	.+22     	; 0x43d6 <__mulsf3x>
    43c0:	a9 cf       	rjmp	.-174    	; 0x4314 <__fp_round>
    43c2:	9a df       	rcall	.-204    	; 0x42f8 <__fp_pscA>
    43c4:	28 f0       	brcs	.+10     	; 0x43d0 <__mulsf3+0x12>
    43c6:	9f df       	rcall	.-194    	; 0x4306 <__fp_pscB>
    43c8:	18 f0       	brcs	.+6      	; 0x43d0 <__mulsf3+0x12>
    43ca:	95 23       	and	r25, r21
    43cc:	09 f0       	breq	.+2      	; 0x43d0 <__mulsf3+0x12>
    43ce:	62 cf       	rjmp	.-316    	; 0x4294 <__fp_inf>
    43d0:	90 cf       	rjmp	.-224    	; 0x42f2 <__fp_nan>
    43d2:	11 24       	eor	r1, r1
    43d4:	ea cf       	rjmp	.-44     	; 0x43aa <__fp_szero>

000043d6 <__mulsf3x>:
    43d6:	af df       	rcall	.-162    	; 0x4336 <__fp_split3>
    43d8:	a0 f3       	brcs	.-24     	; 0x43c2 <__mulsf3+0x4>

000043da <__mulsf3_pse>:
    43da:	95 9f       	mul	r25, r21
    43dc:	d1 f3       	breq	.-12     	; 0x43d2 <__mulsf3+0x14>
    43de:	95 0f       	add	r25, r21
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	55 1f       	adc	r21, r21
    43e4:	62 9f       	mul	r22, r18
    43e6:	f0 01       	movw	r30, r0
    43e8:	72 9f       	mul	r23, r18
    43ea:	bb 27       	eor	r27, r27
    43ec:	f0 0d       	add	r31, r0
    43ee:	b1 1d       	adc	r27, r1
    43f0:	63 9f       	mul	r22, r19
    43f2:	aa 27       	eor	r26, r26
    43f4:	f0 0d       	add	r31, r0
    43f6:	b1 1d       	adc	r27, r1
    43f8:	aa 1f       	adc	r26, r26
    43fa:	64 9f       	mul	r22, r20
    43fc:	66 27       	eor	r22, r22
    43fe:	b0 0d       	add	r27, r0
    4400:	a1 1d       	adc	r26, r1
    4402:	66 1f       	adc	r22, r22
    4404:	82 9f       	mul	r24, r18
    4406:	22 27       	eor	r18, r18
    4408:	b0 0d       	add	r27, r0
    440a:	a1 1d       	adc	r26, r1
    440c:	62 1f       	adc	r22, r18
    440e:	73 9f       	mul	r23, r19
    4410:	b0 0d       	add	r27, r0
    4412:	a1 1d       	adc	r26, r1
    4414:	62 1f       	adc	r22, r18
    4416:	83 9f       	mul	r24, r19
    4418:	a0 0d       	add	r26, r0
    441a:	61 1d       	adc	r22, r1
    441c:	22 1f       	adc	r18, r18
    441e:	74 9f       	mul	r23, r20
    4420:	33 27       	eor	r19, r19
    4422:	a0 0d       	add	r26, r0
    4424:	61 1d       	adc	r22, r1
    4426:	23 1f       	adc	r18, r19
    4428:	84 9f       	mul	r24, r20
    442a:	60 0d       	add	r22, r0
    442c:	21 1d       	adc	r18, r1
    442e:	82 2f       	mov	r24, r18
    4430:	76 2f       	mov	r23, r22
    4432:	6a 2f       	mov	r22, r26
    4434:	11 24       	eor	r1, r1
    4436:	9f 57       	subi	r25, 0x7F	; 127
    4438:	50 40       	sbci	r21, 0x00	; 0
    443a:	8a f0       	brmi	.+34     	; 0x445e <__mulsf3_pse+0x84>
    443c:	e1 f0       	breq	.+56     	; 0x4476 <__mulsf3_pse+0x9c>
    443e:	88 23       	and	r24, r24
    4440:	4a f0       	brmi	.+18     	; 0x4454 <__mulsf3_pse+0x7a>
    4442:	ee 0f       	add	r30, r30
    4444:	ff 1f       	adc	r31, r31
    4446:	bb 1f       	adc	r27, r27
    4448:	66 1f       	adc	r22, r22
    444a:	77 1f       	adc	r23, r23
    444c:	88 1f       	adc	r24, r24
    444e:	91 50       	subi	r25, 0x01	; 1
    4450:	50 40       	sbci	r21, 0x00	; 0
    4452:	a9 f7       	brne	.-22     	; 0x443e <__mulsf3_pse+0x64>
    4454:	9e 3f       	cpi	r25, 0xFE	; 254
    4456:	51 05       	cpc	r21, r1
    4458:	70 f0       	brcs	.+28     	; 0x4476 <__mulsf3_pse+0x9c>
    445a:	1c cf       	rjmp	.-456    	; 0x4294 <__fp_inf>
    445c:	a6 cf       	rjmp	.-180    	; 0x43aa <__fp_szero>
    445e:	5f 3f       	cpi	r21, 0xFF	; 255
    4460:	ec f3       	brlt	.-6      	; 0x445c <__mulsf3_pse+0x82>
    4462:	98 3e       	cpi	r25, 0xE8	; 232
    4464:	dc f3       	brlt	.-10     	; 0x445c <__mulsf3_pse+0x82>
    4466:	86 95       	lsr	r24
    4468:	77 95       	ror	r23
    446a:	67 95       	ror	r22
    446c:	b7 95       	ror	r27
    446e:	f7 95       	ror	r31
    4470:	e7 95       	ror	r30
    4472:	9f 5f       	subi	r25, 0xFF	; 255
    4474:	c1 f7       	brne	.-16     	; 0x4466 <__mulsf3_pse+0x8c>
    4476:	fe 2b       	or	r31, r30
    4478:	88 0f       	add	r24, r24
    447a:	91 1d       	adc	r25, r1
    447c:	96 95       	lsr	r25
    447e:	87 95       	ror	r24
    4480:	97 f9       	bld	r25, 7
    4482:	08 95       	ret

00004484 <__divmodhi4>:
    4484:	97 fb       	bst	r25, 7
    4486:	07 2e       	mov	r0, r23
    4488:	16 f4       	brtc	.+4      	; 0x448e <__divmodhi4+0xa>
    448a:	00 94       	com	r0
    448c:	07 d0       	rcall	.+14     	; 0x449c <__divmodhi4_neg1>
    448e:	77 fd       	sbrc	r23, 7
    4490:	09 d0       	rcall	.+18     	; 0x44a4 <__divmodhi4_neg2>
    4492:	0e 94 78 22 	call	0x44f0	; 0x44f0 <__udivmodhi4>
    4496:	07 fc       	sbrc	r0, 7
    4498:	05 d0       	rcall	.+10     	; 0x44a4 <__divmodhi4_neg2>
    449a:	3e f4       	brtc	.+14     	; 0x44aa <__divmodhi4_exit>

0000449c <__divmodhi4_neg1>:
    449c:	90 95       	com	r25
    449e:	81 95       	neg	r24
    44a0:	9f 4f       	sbci	r25, 0xFF	; 255
    44a2:	08 95       	ret

000044a4 <__divmodhi4_neg2>:
    44a4:	70 95       	com	r23
    44a6:	61 95       	neg	r22
    44a8:	7f 4f       	sbci	r23, 0xFF	; 255

000044aa <__divmodhi4_exit>:
    44aa:	08 95       	ret

000044ac <__udivmodsi4>:
    44ac:	a1 e2       	ldi	r26, 0x21	; 33
    44ae:	1a 2e       	mov	r1, r26
    44b0:	aa 1b       	sub	r26, r26
    44b2:	bb 1b       	sub	r27, r27
    44b4:	fd 01       	movw	r30, r26
    44b6:	0d c0       	rjmp	.+26     	; 0x44d2 <__udivmodsi4_ep>

000044b8 <__udivmodsi4_loop>:
    44b8:	aa 1f       	adc	r26, r26
    44ba:	bb 1f       	adc	r27, r27
    44bc:	ee 1f       	adc	r30, r30
    44be:	ff 1f       	adc	r31, r31
    44c0:	a2 17       	cp	r26, r18
    44c2:	b3 07       	cpc	r27, r19
    44c4:	e4 07       	cpc	r30, r20
    44c6:	f5 07       	cpc	r31, r21
    44c8:	20 f0       	brcs	.+8      	; 0x44d2 <__udivmodsi4_ep>
    44ca:	a2 1b       	sub	r26, r18
    44cc:	b3 0b       	sbc	r27, r19
    44ce:	e4 0b       	sbc	r30, r20
    44d0:	f5 0b       	sbc	r31, r21

000044d2 <__udivmodsi4_ep>:
    44d2:	66 1f       	adc	r22, r22
    44d4:	77 1f       	adc	r23, r23
    44d6:	88 1f       	adc	r24, r24
    44d8:	99 1f       	adc	r25, r25
    44da:	1a 94       	dec	r1
    44dc:	69 f7       	brne	.-38     	; 0x44b8 <__udivmodsi4_loop>
    44de:	60 95       	com	r22
    44e0:	70 95       	com	r23
    44e2:	80 95       	com	r24
    44e4:	90 95       	com	r25
    44e6:	9b 01       	movw	r18, r22
    44e8:	ac 01       	movw	r20, r24
    44ea:	bd 01       	movw	r22, r26
    44ec:	cf 01       	movw	r24, r30
    44ee:	08 95       	ret

000044f0 <__udivmodhi4>:
    44f0:	aa 1b       	sub	r26, r26
    44f2:	bb 1b       	sub	r27, r27
    44f4:	51 e1       	ldi	r21, 0x11	; 17
    44f6:	07 c0       	rjmp	.+14     	; 0x4506 <__udivmodhi4_ep>

000044f8 <__udivmodhi4_loop>:
    44f8:	aa 1f       	adc	r26, r26
    44fa:	bb 1f       	adc	r27, r27
    44fc:	a6 17       	cp	r26, r22
    44fe:	b7 07       	cpc	r27, r23
    4500:	10 f0       	brcs	.+4      	; 0x4506 <__udivmodhi4_ep>
    4502:	a6 1b       	sub	r26, r22
    4504:	b7 0b       	sbc	r27, r23

00004506 <__udivmodhi4_ep>:
    4506:	88 1f       	adc	r24, r24
    4508:	99 1f       	adc	r25, r25
    450a:	5a 95       	dec	r21
    450c:	a9 f7       	brne	.-22     	; 0x44f8 <__udivmodhi4_loop>
    450e:	80 95       	com	r24
    4510:	90 95       	com	r25
    4512:	bc 01       	movw	r22, r24
    4514:	cd 01       	movw	r24, r26
    4516:	08 95       	ret

00004518 <malloc>:
    4518:	0f 93       	push	r16
    451a:	1f 93       	push	r17
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	82 30       	cpi	r24, 0x02	; 2
    4522:	91 05       	cpc	r25, r1
    4524:	10 f4       	brcc	.+4      	; 0x452a <malloc+0x12>
    4526:	82 e0       	ldi	r24, 0x02	; 2
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	e0 91 8c 02 	lds	r30, 0x028C
    452e:	f0 91 8d 02 	lds	r31, 0x028D
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	c0 e0       	ldi	r28, 0x00	; 0
    4538:	d0 e0       	ldi	r29, 0x00	; 0
    453a:	23 c0       	rjmp	.+70     	; 0x4582 <malloc+0x6a>
    453c:	40 81       	ld	r20, Z
    453e:	51 81       	ldd	r21, Z+1	; 0x01
    4540:	48 17       	cp	r20, r24
    4542:	59 07       	cpc	r21, r25
    4544:	a8 f0       	brcs	.+42     	; 0x4570 <malloc+0x58>
    4546:	48 17       	cp	r20, r24
    4548:	59 07       	cpc	r21, r25
    454a:	61 f4       	brne	.+24     	; 0x4564 <malloc+0x4c>
    454c:	82 81       	ldd	r24, Z+2	; 0x02
    454e:	93 81       	ldd	r25, Z+3	; 0x03
    4550:	20 97       	sbiw	r28, 0x00	; 0
    4552:	19 f0       	breq	.+6      	; 0x455a <malloc+0x42>
    4554:	9b 83       	std	Y+3, r25	; 0x03
    4556:	8a 83       	std	Y+2, r24	; 0x02
    4558:	2e c0       	rjmp	.+92     	; 0x45b6 <malloc+0x9e>
    455a:	90 93 8d 02 	sts	0x028D, r25
    455e:	80 93 8c 02 	sts	0x028C, r24
    4562:	29 c0       	rjmp	.+82     	; 0x45b6 <malloc+0x9e>
    4564:	21 15       	cp	r18, r1
    4566:	31 05       	cpc	r19, r1
    4568:	29 f0       	breq	.+10     	; 0x4574 <malloc+0x5c>
    456a:	42 17       	cp	r20, r18
    456c:	53 07       	cpc	r21, r19
    456e:	10 f0       	brcs	.+4      	; 0x4574 <malloc+0x5c>
    4570:	a9 01       	movw	r20, r18
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <malloc+0x60>
    4574:	be 01       	movw	r22, r28
    4576:	df 01       	movw	r26, r30
    4578:	02 81       	ldd	r16, Z+2	; 0x02
    457a:	13 81       	ldd	r17, Z+3	; 0x03
    457c:	ef 01       	movw	r28, r30
    457e:	9a 01       	movw	r18, r20
    4580:	f8 01       	movw	r30, r16
    4582:	30 97       	sbiw	r30, 0x00	; 0
    4584:	d9 f6       	brne	.-74     	; 0x453c <malloc+0x24>
    4586:	21 15       	cp	r18, r1
    4588:	31 05       	cpc	r19, r1
    458a:	09 f1       	breq	.+66     	; 0x45ce <malloc+0xb6>
    458c:	28 1b       	sub	r18, r24
    458e:	39 0b       	sbc	r19, r25
    4590:	24 30       	cpi	r18, 0x04	; 4
    4592:	31 05       	cpc	r19, r1
    4594:	90 f4       	brcc	.+36     	; 0x45ba <malloc+0xa2>
    4596:	12 96       	adiw	r26, 0x02	; 2
    4598:	8d 91       	ld	r24, X+
    459a:	9c 91       	ld	r25, X
    459c:	13 97       	sbiw	r26, 0x03	; 3
    459e:	61 15       	cp	r22, r1
    45a0:	71 05       	cpc	r23, r1
    45a2:	21 f0       	breq	.+8      	; 0x45ac <malloc+0x94>
    45a4:	fb 01       	movw	r30, r22
    45a6:	93 83       	std	Z+3, r25	; 0x03
    45a8:	82 83       	std	Z+2, r24	; 0x02
    45aa:	04 c0       	rjmp	.+8      	; 0x45b4 <malloc+0x9c>
    45ac:	90 93 8d 02 	sts	0x028D, r25
    45b0:	80 93 8c 02 	sts	0x028C, r24
    45b4:	fd 01       	movw	r30, r26
    45b6:	32 96       	adiw	r30, 0x02	; 2
    45b8:	44 c0       	rjmp	.+136    	; 0x4642 <malloc+0x12a>
    45ba:	fd 01       	movw	r30, r26
    45bc:	e2 0f       	add	r30, r18
    45be:	f3 1f       	adc	r31, r19
    45c0:	81 93       	st	Z+, r24
    45c2:	91 93       	st	Z+, r25
    45c4:	22 50       	subi	r18, 0x02	; 2
    45c6:	31 09       	sbc	r19, r1
    45c8:	2d 93       	st	X+, r18
    45ca:	3c 93       	st	X, r19
    45cc:	3a c0       	rjmp	.+116    	; 0x4642 <malloc+0x12a>
    45ce:	20 91 8a 02 	lds	r18, 0x028A
    45d2:	30 91 8b 02 	lds	r19, 0x028B
    45d6:	23 2b       	or	r18, r19
    45d8:	41 f4       	brne	.+16     	; 0x45ea <malloc+0xd2>
    45da:	20 91 02 02 	lds	r18, 0x0202
    45de:	30 91 03 02 	lds	r19, 0x0203
    45e2:	30 93 8b 02 	sts	0x028B, r19
    45e6:	20 93 8a 02 	sts	0x028A, r18
    45ea:	20 91 00 02 	lds	r18, 0x0200
    45ee:	30 91 01 02 	lds	r19, 0x0201
    45f2:	21 15       	cp	r18, r1
    45f4:	31 05       	cpc	r19, r1
    45f6:	41 f4       	brne	.+16     	; 0x4608 <malloc+0xf0>
    45f8:	2d b7       	in	r18, 0x3d	; 61
    45fa:	3e b7       	in	r19, 0x3e	; 62
    45fc:	40 91 04 02 	lds	r20, 0x0204
    4600:	50 91 05 02 	lds	r21, 0x0205
    4604:	24 1b       	sub	r18, r20
    4606:	35 0b       	sbc	r19, r21
    4608:	e0 91 8a 02 	lds	r30, 0x028A
    460c:	f0 91 8b 02 	lds	r31, 0x028B
    4610:	e2 17       	cp	r30, r18
    4612:	f3 07       	cpc	r31, r19
    4614:	a0 f4       	brcc	.+40     	; 0x463e <malloc+0x126>
    4616:	2e 1b       	sub	r18, r30
    4618:	3f 0b       	sbc	r19, r31
    461a:	28 17       	cp	r18, r24
    461c:	39 07       	cpc	r19, r25
    461e:	78 f0       	brcs	.+30     	; 0x463e <malloc+0x126>
    4620:	ac 01       	movw	r20, r24
    4622:	4e 5f       	subi	r20, 0xFE	; 254
    4624:	5f 4f       	sbci	r21, 0xFF	; 255
    4626:	24 17       	cp	r18, r20
    4628:	35 07       	cpc	r19, r21
    462a:	48 f0       	brcs	.+18     	; 0x463e <malloc+0x126>
    462c:	4e 0f       	add	r20, r30
    462e:	5f 1f       	adc	r21, r31
    4630:	50 93 8b 02 	sts	0x028B, r21
    4634:	40 93 8a 02 	sts	0x028A, r20
    4638:	81 93       	st	Z+, r24
    463a:	91 93       	st	Z+, r25
    463c:	02 c0       	rjmp	.+4      	; 0x4642 <malloc+0x12a>
    463e:	e0 e0       	ldi	r30, 0x00	; 0
    4640:	f0 e0       	ldi	r31, 0x00	; 0
    4642:	cf 01       	movw	r24, r30
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	1f 91       	pop	r17
    464a:	0f 91       	pop	r16
    464c:	08 95       	ret

0000464e <free>:
    464e:	ef 92       	push	r14
    4650:	ff 92       	push	r15
    4652:	0f 93       	push	r16
    4654:	1f 93       	push	r17
    4656:	cf 93       	push	r28
    4658:	df 93       	push	r29
    465a:	00 97       	sbiw	r24, 0x00	; 0
    465c:	09 f4       	brne	.+2      	; 0x4660 <free+0x12>
    465e:	8f c0       	rjmp	.+286    	; 0x477e <free+0x130>
    4660:	dc 01       	movw	r26, r24
    4662:	12 97       	sbiw	r26, 0x02	; 2
    4664:	13 96       	adiw	r26, 0x03	; 3
    4666:	1c 92       	st	X, r1
    4668:	1e 92       	st	-X, r1
    466a:	12 97       	sbiw	r26, 0x02	; 2
    466c:	e0 90 8c 02 	lds	r14, 0x028C
    4670:	f0 90 8d 02 	lds	r15, 0x028D
    4674:	e1 14       	cp	r14, r1
    4676:	f1 04       	cpc	r15, r1
    4678:	89 f4       	brne	.+34     	; 0x469c <free+0x4e>
    467a:	2d 91       	ld	r18, X+
    467c:	3c 91       	ld	r19, X
    467e:	11 97       	sbiw	r26, 0x01	; 1
    4680:	28 0f       	add	r18, r24
    4682:	39 1f       	adc	r19, r25
    4684:	80 91 8a 02 	lds	r24, 0x028A
    4688:	90 91 8b 02 	lds	r25, 0x028B
    468c:	82 17       	cp	r24, r18
    468e:	93 07       	cpc	r25, r19
    4690:	89 f5       	brne	.+98     	; 0x46f4 <free+0xa6>
    4692:	b0 93 8b 02 	sts	0x028B, r27
    4696:	a0 93 8a 02 	sts	0x028A, r26
    469a:	71 c0       	rjmp	.+226    	; 0x477e <free+0x130>
    469c:	e7 01       	movw	r28, r14
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	01 c0       	rjmp	.+2      	; 0x46a6 <free+0x58>
    46a4:	ea 01       	movw	r28, r20
    46a6:	ca 17       	cp	r28, r26
    46a8:	db 07       	cpc	r29, r27
    46aa:	38 f4       	brcc	.+14     	; 0x46ba <free+0x6c>
    46ac:	4a 81       	ldd	r20, Y+2	; 0x02
    46ae:	5b 81       	ldd	r21, Y+3	; 0x03
    46b0:	9e 01       	movw	r18, r28
    46b2:	41 15       	cp	r20, r1
    46b4:	51 05       	cpc	r21, r1
    46b6:	b1 f7       	brne	.-20     	; 0x46a4 <free+0x56>
    46b8:	22 c0       	rjmp	.+68     	; 0x46fe <free+0xb0>
    46ba:	bc 01       	movw	r22, r24
    46bc:	62 50       	subi	r22, 0x02	; 2
    46be:	71 09       	sbc	r23, r1
    46c0:	fb 01       	movw	r30, r22
    46c2:	d3 83       	std	Z+3, r29	; 0x03
    46c4:	c2 83       	std	Z+2, r28	; 0x02
    46c6:	00 81       	ld	r16, Z
    46c8:	11 81       	ldd	r17, Z+1	; 0x01
    46ca:	ac 01       	movw	r20, r24
    46cc:	40 0f       	add	r20, r16
    46ce:	51 1f       	adc	r21, r17
    46d0:	4c 17       	cp	r20, r28
    46d2:	5d 07       	cpc	r21, r29
    46d4:	61 f4       	brne	.+24     	; 0x46ee <free+0xa0>
    46d6:	48 81       	ld	r20, Y
    46d8:	59 81       	ldd	r21, Y+1	; 0x01
    46da:	40 0f       	add	r20, r16
    46dc:	51 1f       	adc	r21, r17
    46de:	4e 5f       	subi	r20, 0xFE	; 254
    46e0:	5f 4f       	sbci	r21, 0xFF	; 255
    46e2:	51 83       	std	Z+1, r21	; 0x01
    46e4:	40 83       	st	Z, r20
    46e6:	4a 81       	ldd	r20, Y+2	; 0x02
    46e8:	5b 81       	ldd	r21, Y+3	; 0x03
    46ea:	53 83       	std	Z+3, r21	; 0x03
    46ec:	42 83       	std	Z+2, r20	; 0x02
    46ee:	21 15       	cp	r18, r1
    46f0:	31 05       	cpc	r19, r1
    46f2:	29 f4       	brne	.+10     	; 0x46fe <free+0xb0>
    46f4:	b0 93 8d 02 	sts	0x028D, r27
    46f8:	a0 93 8c 02 	sts	0x028C, r26
    46fc:	40 c0       	rjmp	.+128    	; 0x477e <free+0x130>
    46fe:	f9 01       	movw	r30, r18
    4700:	b3 83       	std	Z+3, r27	; 0x03
    4702:	a2 83       	std	Z+2, r26	; 0x02
    4704:	e9 01       	movw	r28, r18
    4706:	69 91       	ld	r22, Y+
    4708:	79 91       	ld	r23, Y+
    470a:	c6 0f       	add	r28, r22
    470c:	d7 1f       	adc	r29, r23
    470e:	ac 17       	cp	r26, r28
    4710:	bd 07       	cpc	r27, r29
    4712:	79 f4       	brne	.+30     	; 0x4732 <free+0xe4>
    4714:	dc 01       	movw	r26, r24
    4716:	5e 91       	ld	r21, -X
    4718:	4e 91       	ld	r20, -X
    471a:	46 0f       	add	r20, r22
    471c:	57 1f       	adc	r21, r23
    471e:	4e 5f       	subi	r20, 0xFE	; 254
    4720:	5f 4f       	sbci	r21, 0xFF	; 255
    4722:	51 83       	std	Z+1, r21	; 0x01
    4724:	40 83       	st	Z, r20
    4726:	12 96       	adiw	r26, 0x02	; 2
    4728:	8d 91       	ld	r24, X+
    472a:	9c 91       	ld	r25, X
    472c:	13 97       	sbiw	r26, 0x03	; 3
    472e:	93 83       	std	Z+3, r25	; 0x03
    4730:	82 83       	std	Z+2, r24	; 0x02
    4732:	a0 e0       	ldi	r26, 0x00	; 0
    4734:	b0 e0       	ldi	r27, 0x00	; 0
    4736:	02 c0       	rjmp	.+4      	; 0x473c <free+0xee>
    4738:	d7 01       	movw	r26, r14
    473a:	7c 01       	movw	r14, r24
    473c:	f7 01       	movw	r30, r14
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	93 81       	ldd	r25, Z+3	; 0x03
    4742:	00 97       	sbiw	r24, 0x00	; 0
    4744:	c9 f7       	brne	.-14     	; 0x4738 <free+0xea>
    4746:	c7 01       	movw	r24, r14
    4748:	02 96       	adiw	r24, 0x02	; 2
    474a:	20 81       	ld	r18, Z
    474c:	31 81       	ldd	r19, Z+1	; 0x01
    474e:	82 0f       	add	r24, r18
    4750:	93 1f       	adc	r25, r19
    4752:	20 91 8a 02 	lds	r18, 0x028A
    4756:	30 91 8b 02 	lds	r19, 0x028B
    475a:	28 17       	cp	r18, r24
    475c:	39 07       	cpc	r19, r25
    475e:	79 f4       	brne	.+30     	; 0x477e <free+0x130>
    4760:	10 97       	sbiw	r26, 0x00	; 0
    4762:	29 f4       	brne	.+10     	; 0x476e <free+0x120>
    4764:	10 92 8d 02 	sts	0x028D, r1
    4768:	10 92 8c 02 	sts	0x028C, r1
    476c:	04 c0       	rjmp	.+8      	; 0x4776 <free+0x128>
    476e:	13 96       	adiw	r26, 0x03	; 3
    4770:	1c 92       	st	X, r1
    4772:	1e 92       	st	-X, r1
    4774:	12 97       	sbiw	r26, 0x02	; 2
    4776:	f0 92 8b 02 	sts	0x028B, r15
    477a:	e0 92 8a 02 	sts	0x028A, r14
    477e:	df 91       	pop	r29
    4780:	cf 91       	pop	r28
    4782:	1f 91       	pop	r17
    4784:	0f 91       	pop	r16
    4786:	ff 90       	pop	r15
    4788:	ef 90       	pop	r14
    478a:	08 95       	ret

0000478c <memcpy>:
    478c:	fb 01       	movw	r30, r22
    478e:	dc 01       	movw	r26, r24
    4790:	02 c0       	rjmp	.+4      	; 0x4796 <memcpy+0xa>
    4792:	01 90       	ld	r0, Z+
    4794:	0d 92       	st	X+, r0
    4796:	41 50       	subi	r20, 0x01	; 1
    4798:	50 40       	sbci	r21, 0x00	; 0
    479a:	d8 f7       	brcc	.-10     	; 0x4792 <memcpy+0x6>
    479c:	08 95       	ret

0000479e <_exit>:
    479e:	f8 94       	cli

000047a0 <__stop_program>:
    47a0:	ff cf       	rjmp	.-2      	; 0x47a0 <__stop_program>
