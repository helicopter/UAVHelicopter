
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00002b66  00002bfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800270  00800270  00002c6a  2**0
                  ALLOC
  3 .stab         000020f4  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c4  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005624  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000620  00000000  00000000  00005653  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005fc8  00000000  00000000  00005c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002312  00000000  00000000  0000bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b19  00000000  00000000  0000df4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014f0  00000000  00000000  0000fa68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002555  00000000  00000000  00010f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003069  00000000  00000000  000134ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000500  00000000  00000000  00016516  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
	}
}
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
      e8:	0c 94 09 03 	jmp	0x612	; 0x612 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
      ec:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
      f0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_ZN10helicopter7drivers12SerialDriverD1Ev>
      f4:	0c 94 16 09 	jmp	0x122c	; 0x122c <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
      f8:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
      fc:	0c 94 11 08 	jmp	0x1022	; 0x1022 <_ZN10helicopter8messages7Message12buildMessageEPh>
     100:	0c 94 17 02 	jmp	0x42e	; 0x42e <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>
     104:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <_ZN10helicopter5tasks4Task7runTaskEv>
     108:	0c 94 86 08 	jmp	0x110c	; 0x110c <_ZN10helicopter8messages11SyncMessageD0Ev>
     10c:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_ZN10helicopter8messages11SyncMessageD1Ev>
     110:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN10helicopter5tasks12FlashLEDTask4initEv>
     114:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     118:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
     11c:	0c 94 4d 09 	jmp	0x129a	; 0x129a <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     120:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
     124:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     128:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <_ZN10helicopter8messages7MessageD0Ev>
     12c:	0c 94 08 01 	jmp	0x210	; 0x210 <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     130:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     134:	0c 94 01 11 	jmp	0x2202	; 0x2202 <_ZN10helicopter5tasks4Task11runTaskImplEv>
     138:	0c 94 9a 02 	jmp	0x534	; 0x534 <_ZN10helicopter5tasks4TaskD0Ev>
     13c:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
     140:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
     144:	0c 94 02 08 	jmp	0x1004	; 0x1004 <_ZN10helicopter8messages7Message8getBytesEv>
     148:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <_ZN10helicopter8messages7MessageD1Ev>
     14c:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <_ZN10helicopter5tasks4Task4initEv>
     150:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
     154:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     158:	0c 94 96 11 	jmp	0x232c	; 0x232c <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     15c:	0c 94 be 01 	jmp	0x37c	; 0x37c <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>
     160:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d1 e2       	ldi	r29, 0x21	; 33
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0c bf       	out	0x3c, r16	; 60

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b2 e0       	ldi	r27, 0x02	; 2
     17a:	e6 e6       	ldi	r30, 0x66	; 102
     17c:	fb e2       	ldi	r31, 0x2B	; 43
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a0 37       	cpi	r26, 0x70	; 112
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	22 e0       	ldi	r18, 0x02	; 2
     190:	a0 e7       	ldi	r26, 0x70	; 112
     192:	b2 e0       	ldi	r27, 0x02	; 2
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a6 37       	cpi	r26, 0x76	; 118
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 26 04 	call	0x84c	; 0x84c <main>
     1a2:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	1f 92       	push	r1
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
				{
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	2a e0       	ldi	r18, 0x0A	; 10
     1c0:	32 e0       	ldi	r19, 0x02	; 2
     1c2:	fc 01       	movw	r30, r24
     1c4:	31 83       	std	Z+1, r19	; 0x01
     1c6:	20 83       	st	Z, r18
					
				}
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	81 70       	andi	r24, 0x01	; 1
     1ce:	99 27       	eor	r25, r25
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	21 f0       	breq	.+8      	; 0x1dc <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	1f 92       	push	r1
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	9a 83       	std	Y+2, r25	; 0x02
     1f4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	9a 81       	ldd	r25, Y+2	; 0x02
     1fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN10helicopter7drivers12SerialDriverD1Ev>
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "CommonHeader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	9c 83       	std	Y+4, r25	; 0x04
     21e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     220:	1a 82       	std	Y+2, r1	; 0x02
     222:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	9c 81       	ldd	r25, Y+4	; 0x04
     228:	fc 01       	movw	r30, r24
     22a:	82 85       	ldd	r24, Z+10	; 0x0a
     22c:	88 23       	and	r24, r24
     22e:	b9 f1       	breq	.+110    	; 0x29e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	fc 01       	movw	r30, r24
     236:	82 81       	ldd	r24, Z+2	; 0x02
     238:	93 81       	ldd	r25, Z+3	; 0x03
     23a:	a4 81       	ldd	r26, Z+4	; 0x04
     23c:	b5 81       	ldd	r27, Z+5	; 0x05
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	aa 1f       	adc	r26, r26
     244:	bb 1f       	adc	r27, r27
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	aa 1f       	adc	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	aa 1f       	adc	r26, r26
     254:	bb 1f       	adc	r27, r27
     256:	9c 01       	movw	r18, r24
     258:	ad 01       	movw	r20, r26
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	94 e2       	ldi	r25, 0x24	; 36
     25e:	a4 ef       	ldi	r26, 0xF4	; 244
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	bc 01       	movw	r22, r24
     264:	cd 01       	movw	r24, r26
     266:	0e 94 38 14 	call	0x2870	; 0x2870 <__udivmodsi4>
     26a:	da 01       	movw	r26, r20
     26c:	c9 01       	movw	r24, r18
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	a1 09       	sbc	r26, r1
     272:	b1 09       	sbc	r27, r1
     274:	bc 01       	movw	r22, r24
     276:	cd 01       	movw	r24, r26
     278:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__floatunsisf>
     27c:	dc 01       	movw	r26, r24
     27e:	cb 01       	movw	r24, r22
     280:	bc 01       	movw	r22, r24
     282:	cd 01       	movw	r24, r26
     284:	0e 94 a8 13 	call	0x2750	; 0x2750 <floor>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	bc 01       	movw	r22, r24
     28e:	cd 01       	movw	r24, r26
     290:	0e 94 3f 13 	call	0x267e	; 0x267e <__fixunssfsi>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	3a c0       	rjmp	.+116    	; 0x312 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     29e:	8b 81       	ldd	r24, Y+3	; 0x03
     2a0:	9c 81       	ldd	r25, Y+4	; 0x04
     2a2:	fc 01       	movw	r30, r24
     2a4:	82 81       	ldd	r24, Z+2	; 0x02
     2a6:	93 81       	ldd	r25, Z+3	; 0x03
     2a8:	a4 81       	ldd	r26, Z+4	; 0x04
     2aa:	b5 81       	ldd	r27, Z+5	; 0x05
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	aa 1f       	adc	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	aa 1f       	adc	r26, r26
     2ba:	bb 1f       	adc	r27, r27
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	aa 1f       	adc	r26, r26
     2c2:	bb 1f       	adc	r27, r27
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	aa 1f       	adc	r26, r26
     2ca:	bb 1f       	adc	r27, r27
     2cc:	9c 01       	movw	r18, r24
     2ce:	ad 01       	movw	r20, r26
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	94 e2       	ldi	r25, 0x24	; 36
     2d4:	a4 ef       	ldi	r26, 0xF4	; 244
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	0e 94 38 14 	call	0x2870	; 0x2870 <__udivmodsi4>
     2e0:	da 01       	movw	r26, r20
     2e2:	c9 01       	movw	r24, r18
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	a1 09       	sbc	r26, r1
     2e8:	b1 09       	sbc	r27, r1
     2ea:	bc 01       	movw	r22, r24
     2ec:	cd 01       	movw	r24, r26
     2ee:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__floatunsisf>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	bc 01       	movw	r22, r24
     2f8:	cd 01       	movw	r24, r26
     2fa:	0e 94 a8 13 	call	0x2750	; 0x2750 <floor>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	bc 01       	movw	r22, r24
     304:	cd 01       	movw	r24, r26
     306:	0e 94 3f 13 	call	0x267e	; 0x267e <__fixunssfsi>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	9c 81       	ldd	r25, Y+4	; 0x04
     316:	fc 01       	movw	r30, r24
     318:	86 81       	ldd	r24, Z+6	; 0x06
     31a:	88 23       	and	r24, r24
     31c:	41 f5       	brne	.+80     	; 0x36e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     31e:	84 ec       	ldi	r24, 0xC4	; 196
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	29 81       	ldd	r18, Y+1	; 0x01
     324:	3a 81       	ldd	r19, Y+2	; 0x02
     326:	fc 01       	movw	r30, r24
     328:	31 83       	std	Z+1, r19	; 0x01
     32a:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     32c:	82 ec       	ldi	r24, 0xC2	; 194
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	22 ec       	ldi	r18, 0xC2	; 194
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f9 01       	movw	r30, r18
     336:	20 81       	ld	r18, Z
     338:	26 60       	ori	r18, 0x06	; 6
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	9c 81       	ldd	r25, Y+4	; 0x04
     342:	fc 01       	movw	r30, r24
     344:	82 85       	ldd	r24, Z+10	; 0x0a
     346:	88 23       	and	r24, r24
     348:	49 f0       	breq	.+18     	; 0x35c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     34a:	80 ec       	ldi	r24, 0xC0	; 192
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	20 ec       	ldi	r18, 0xC0	; 192
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	f9 01       	movw	r30, r18
     354:	20 81       	ld	r18, Z
     356:	22 60       	ori	r18, 0x02	; 2
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     35c:	81 ec       	ldi	r24, 0xC1	; 193
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	21 ec       	ldi	r18, 0xC1	; 193
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	28 61       	ori	r18, 0x18	; 24
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
	}
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>:

int SerialDriver::transmitByte(byte byteToSend)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	00 d0       	rcall	.+0      	; 0x382 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6>
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	89 83       	std	Y+1, r24	; 0x01
     38a:	6b 83       	std	Y+3, r22	; 0x03
	if (uartPort == Zero)
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	9a 81       	ldd	r25, Y+2	; 0x02
     390:	fc 01       	movw	r30, r24
     392:	86 81       	ldd	r24, Z+6	; 0x06
     394:	88 23       	and	r24, r24
     396:	09 f0       	breq	.+2      	; 0x39a <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x1e>
     398:	42 c0       	rjmp	.+132    	; 0x41e <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa2>
	{
		if (isTimeoutEnabled)
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	fc 01       	movw	r30, r24
     3a0:	81 85       	ldd	r24, Z+9	; 0x09
     3a2:	88 23       	and	r24, r24
     3a4:	09 f1       	breq	.+66     	; 0x3e8 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			timer->startTimer();
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	fc 01       	movw	r30, r24
     3ac:	87 81       	ldd	r24, Z+7	; 0x07
     3ae:	90 85       	ldd	r25, Z+8	; 0x08
     3b0:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     3b4:	19 c0       	rjmp	.+50     	; 0x3e8 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ba:	fc 01       	movw	r30, r24
     3bc:	81 85       	ldd	r24, Z+9	; 0x09
     3be:	88 23       	and	r24, r24
     3c0:	a1 f0       	breq	.+40     	; 0x3ea <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
			{
				if (timer->hasTimedout())
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	fc 01       	movw	r30, r24
     3c8:	87 81       	ldd	r24, Z+7	; 0x07
     3ca:	90 85       	ldd	r25, Z+8	; 0x08
     3cc:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN10helicopter4util5Timer11hasTimedoutEv>
     3d0:	88 23       	and	r24, r24
     3d2:	59 f0       	breq	.+22     	; 0x3ea <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
				{
					timer->stopTimer();
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	9a 81       	ldd	r25, Y+2	; 0x02
     3d8:	fc 01       	movw	r30, r24
     3da:	87 81       	ldd	r24, Z+7	; 0x07
     3dc:	90 85       	ldd	r25, Z+8	; 0x08
     3de:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN10helicopter4util5Timer9stopTimerEv>
					return -1;
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	9f ef       	ldi	r25, 0xFF	; 255
     3e6:	1d c0       	rjmp	.+58     	; 0x422 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa6>
		{
			timer->startTimer();
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     3e8:	00 00       	nop
     3ea:	80 ec       	ldi	r24, 0xC0	; 192
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	fc 01       	movw	r30, r24
     3f0:	80 81       	ld	r24, Z
     3f2:	88 2f       	mov	r24, r24
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	80 72       	andi	r24, 0x20	; 32
     3f8:	99 27       	eor	r25, r25
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	00 97       	sbiw	r24, 0x00	; 0
     3fe:	09 f0       	breq	.+2      	; 0x402 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x86>
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	22 23       	and	r18, r18
     404:	c1 f6       	brne	.-80     	; 0x3b6 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x3a>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     406:	86 ec       	ldi	r24, 0xC6	; 198
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2b 81       	ldd	r18, Y+3	; 0x03
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18
		
		timer->stopTimer();
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	87 81       	ldd	r24, Z+7	; 0x07
     418:	90 85       	ldd	r25, Z+8	; 0x08
     41a:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN10helicopter4util5Timer9stopTimerEv>
	}
	
	return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6>
     434:	1f 92       	push	r1
     436:	1f 92       	push	r1
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	9b 83       	std	Y+3, r25	; 0x03
     43e:	8a 83       	std	Y+2, r24	; 0x02
     440:	7d 83       	std	Y+5, r23	; 0x05
     442:	6c 83       	std	Y+4, r22	; 0x04
	bool hasDataOverrun = false;
     444:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
     446:	8a 81       	ldd	r24, Y+2	; 0x02
     448:	9b 81       	ldd	r25, Y+3	; 0x03
     44a:	fc 01       	movw	r30, r24
     44c:	86 81       	ldd	r24, Z+6	; 0x06
     44e:	88 23       	and	r24, r24
     450:	09 f0       	breq	.+2      	; 0x454 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x26>
     452:	41 c0       	rjmp	.+130    	; 0x4d6 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xa8>
	{
		
		if (isTimeoutEnabled)
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	fc 01       	movw	r30, r24
     45a:	81 85       	ldd	r24, Z+9	; 0x09
     45c:	88 23       	and	r24, r24
     45e:	d9 f0       	breq	.+54     	; 0x496 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			timer->startTimer();
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	9b 81       	ldd	r25, Y+3	; 0x03
     464:	fc 01       	movw	r30, r24
     466:	87 81       	ldd	r24, Z+7	; 0x07
     468:	90 85       	ldd	r25, Z+8	; 0x08
     46a:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     46e:	13 c0       	rjmp	.+38     	; 0x496 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			if (timer->hasTimedout())
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	9b 81       	ldd	r25, Y+3	; 0x03
     474:	fc 01       	movw	r30, r24
     476:	87 81       	ldd	r24, Z+7	; 0x07
     478:	90 85       	ldd	r25, Z+8	; 0x08
     47a:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN10helicopter4util5Timer11hasTimedoutEv>
     47e:	88 23       	and	r24, r24
     480:	59 f0       	breq	.+22     	; 0x498 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6a>
			{
				timer->stopTimer();
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	9b 81       	ldd	r25, Y+3	; 0x03
     486:	fc 01       	movw	r30, r24
     488:	87 81       	ldd	r24, Z+7	; 0x07
     48a:	90 85       	ldd	r25, Z+8	; 0x08
     48c:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN10helicopter4util5Timer9stopTimerEv>
				return -1;
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	29 c0       	rjmp	.+82     	; 0x4e8 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xba>
			timer->startTimer();
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     496:	00 00       	nop
     498:	80 ec       	ldi	r24, 0xC0	; 192
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	fc 01       	movw	r30, r24
     49e:	80 81       	ld	r24, Z
     4a0:	80 95       	com	r24
     4a2:	88 1f       	adc	r24, r24
     4a4:	88 27       	eor	r24, r24
     4a6:	88 1f       	adc	r24, r24
     4a8:	88 23       	and	r24, r24
     4aa:	11 f7       	brne	.-60     	; 0x470 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x42>
			}*/
		}
		
		//determine if there has been a data overrun.
		//Swallow the overrun because nothing can be done.
		hasDataOverrun = (UCSR0A & (1 << DOR0)) != 0;
     4ac:	80 ec       	ldi	r24, 0xC0	; 192
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	80 81       	ld	r24, Z
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	88 70       	andi	r24, 0x08	; 8
     4ba:	99 27       	eor	r25, r25
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	00 97       	sbiw	r24, 0x00	; 0
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x96>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	29 83       	std	Y+1, r18	; 0x01
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
     4c6:	86 ec       	ldi	r24, 0xC6	; 198
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 81       	ld	r18, Z
     4ce:	8c 81       	ldd	r24, Y+4	; 0x04
     4d0:	9d 81       	ldd	r25, Y+5	; 0x05
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
	}
	
	timer->stopTimer();
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	9b 81       	ldd	r25, Y+3	; 0x03
     4da:	fc 01       	movw	r30, r24
     4dc:	87 81       	ldd	r24, Z+7	; 0x07
     4de:	90 85       	ldd	r25, Z+8	; 0x08
     4e0:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return 0;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	28 e5       	ldi	r18, 0x58	; 88
     50e:	32 e0       	ldi	r19, 0x02	; 2
     510:	fc 01       	movw	r30, r24
     512:	31 83       	std	Z+1, r19	; 0x01
     514:	20 83       	st	Z, r18
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	81 70       	andi	r24, 0x01	; 1
     51c:	99 27       	eor	r25, r25
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	21 f0       	breq	.+8      	; 0x52a <_ZN10helicopter5tasks4TaskD1Ev+0x32>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_ZN10helicopter5tasks4TaskD0Ev>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	1f 92       	push	r1
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>:
					
				int ledToBlink;
				
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	28 97       	sbiw	r28, 0x08	; 8
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	7c 83       	std	Y+4, r23	; 0x04
     578:	6b 83       	std	Y+3, r22	; 0x03
     57a:	5e 83       	std	Y+6, r21	; 0x06
     57c:	4d 83       	std	Y+5, r20	; 0x05
     57e:	38 87       	std	Y+8, r19	; 0x08
     580:	2f 83       	std	Y+7, r18	; 0x07
				Task(delay, period),
				isOn(false),
				ledToBlink(ledToBlink)
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	4d 81       	ldd	r20, Y+5	; 0x05
     588:	5e 81       	ldd	r21, Y+6	; 0x06
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	3c 81       	ldd	r19, Y+4	; 0x04
     58e:	b9 01       	movw	r22, r18
     590:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN10helicopter5tasks4TaskC1Eii>
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	9a 81       	ldd	r25, Y+2	; 0x02
     598:	28 e1       	ldi	r18, 0x18	; 24
     59a:	32 e0       	ldi	r19, 0x02	; 2
     59c:	fc 01       	movw	r30, r24
     59e:	31 83       	std	Z+1, r19	; 0x01
     5a0:	20 83       	st	Z, r18
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	fc 01       	movw	r30, r24
     5a8:	17 82       	std	Z+7, r1	; 0x07
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	2f 81       	ldd	r18, Y+7	; 0x07
     5b0:	38 85       	ldd	r19, Y+8	; 0x08
     5b2:	fc 01       	movw	r30, r24
     5b4:	31 87       	std	Z+9, r19	; 0x09
     5b6:	20 87       	std	Z+8, r18	; 0x08
			{
					
			}
     5b8:	28 96       	adiw	r28, 0x08	; 8
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
	
			void init()
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	1f 92       	push	r1
     5d0:	1f 92       	push	r1
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	89 83       	std	Y+1, r24	; 0x01
			{
				DDRA |= (1<<ledToBlink);
     5da:	81 e2       	ldi	r24, 0x21	; 33
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	21 e2       	ldi	r18, 0x21	; 33
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	62 2f       	mov	r22, r18
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	3a 81       	ldd	r19, Y+2	; 0x02
     5ec:	f9 01       	movw	r30, r18
     5ee:	40 85       	ldd	r20, Z+8	; 0x08
     5f0:	51 85       	ldd	r21, Z+9	; 0x09
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	04 2e       	mov	r0, r20
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x34>
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	0a 94       	dec	r0
     600:	e2 f7       	brpl	.-8      	; 0x5fa <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x30>
     602:	26 2b       	or	r18, r22
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
			}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	1f 92       	push	r1
     618:	1f 92       	push	r1
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01
				if (isOn)
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	fc 01       	movw	r30, r24
     628:	87 81       	ldd	r24, Z+7	; 0x07
     62a:	88 23       	and	r24, r24
     62c:	e9 f0       	breq	.+58     	; 0x668 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x56>
				{
					PORTA &= ~(1<<ledToBlink);
     62e:	82 e2       	ldi	r24, 0x22	; 34
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	22 e2       	ldi	r18, 0x22	; 34
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	f9 01       	movw	r30, r18
     638:	20 81       	ld	r18, Z
     63a:	62 2f       	mov	r22, r18
     63c:	29 81       	ldd	r18, Y+1	; 0x01
     63e:	3a 81       	ldd	r19, Y+2	; 0x02
     640:	f9 01       	movw	r30, r18
     642:	40 85       	ldd	r20, Z+8	; 0x08
     644:	51 85       	ldd	r21, Z+9	; 0x09
     646:	21 e0       	ldi	r18, 0x01	; 1
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	04 2e       	mov	r0, r20
     64c:	02 c0       	rjmp	.+4      	; 0x652 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x40>
     64e:	22 0f       	add	r18, r18
     650:	33 1f       	adc	r19, r19
     652:	0a 94       	dec	r0
     654:	e2 f7       	brpl	.-8      	; 0x64e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x3c>
     656:	20 95       	com	r18
     658:	26 23       	and	r18, r22
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
					isOn = false;
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	fc 01       	movw	r30, r24
     664:	17 82       	std	Z+7, r1	; 0x07
     666:	1c c0       	rjmp	.+56     	; 0x6a0 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x8e>
				}else
				{
					PORTA |= (1<<ledToBlink);
     668:	82 e2       	ldi	r24, 0x22	; 34
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	22 e2       	ldi	r18, 0x22	; 34
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	62 2f       	mov	r22, r18
     676:	29 81       	ldd	r18, Y+1	; 0x01
     678:	3a 81       	ldd	r19, Y+2	; 0x02
     67a:	f9 01       	movw	r30, r18
     67c:	40 85       	ldd	r20, Z+8	; 0x08
     67e:	51 85       	ldd	r21, Z+9	; 0x09
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	04 2e       	mov	r0, r20
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x7a>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x76>
     690:	26 2b       	or	r18, r22
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
					isOn = true;
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	fc 01       	movw	r30, r24
     69e:	27 83       	std	Z+7, r18	; 0x07
				}
			}
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <_ZN10helicopter4util5TimerC1Em9PRESCALERm>:
				 * @timeoutMilliseconds the milliseconds that should go by before the
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	2c 97       	sbiw	r28, 0x0c	; 12
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	4b 83       	std	Y+3, r20	; 0x03
     6cc:	5c 83       	std	Y+4, r21	; 0x04
     6ce:	6d 83       	std	Y+5, r22	; 0x05
     6d0:	7e 83       	std	Y+6, r23	; 0x06
     6d2:	38 87       	std	Y+8, r19	; 0x08
     6d4:	2f 83       	std	Y+7, r18	; 0x07
     6d6:	e9 86       	std	Y+9, r14	; 0x09
     6d8:	fa 86       	std	Y+10, r15	; 0x0a
     6da:	0b 87       	std	Y+11, r16	; 0x0b
     6dc:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
     6de:	29 81       	ldd	r18, Y+1	; 0x01
     6e0:	3a 81       	ldd	r19, Y+2	; 0x02
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	ad 81       	ldd	r26, Y+5	; 0x05
     6e8:	be 81       	ldd	r27, Y+6	; 0x06
     6ea:	f9 01       	movw	r30, r18
     6ec:	80 83       	st	Z, r24
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	a2 83       	std	Z+2, r26	; 0x02
     6f2:	b3 83       	std	Z+3, r27	; 0x03
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	2f 81       	ldd	r18, Y+7	; 0x07
     6fa:	38 85       	ldd	r19, Y+8	; 0x08
     6fc:	fc 01       	movw	r30, r24
     6fe:	35 83       	std	Z+5, r19	; 0x05
     700:	24 83       	std	Z+4, r18	; 0x04
     702:	29 85       	ldd	r18, Y+9	; 0x09
     704:	3a 85       	ldd	r19, Y+10	; 0x0a
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	fc 01       	movw	r30, r24
     70c:	37 83       	std	Z+7, r19	; 0x07
     70e:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
     710:	2c 96       	adiw	r28, 0x0c	; 12
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	08 95       	ret

0000072a <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>:
				 * only used when enableTimeout = true.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
     72a:	cf 92       	push	r12
     72c:	ef 92       	push	r14
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	2b 97       	sbiw	r28, 0x0b	; 11
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	4b 83       	std	Y+3, r20	; 0x03
     74c:	5c 83       	std	Y+4, r21	; 0x04
     74e:	6d 83       	std	Y+5, r22	; 0x05
     750:	7e 83       	std	Y+6, r23	; 0x06
     752:	2f 83       	std	Y+7, r18	; 0x07
     754:	19 87       	std	Y+9, r17	; 0x09
     756:	08 87       	std	Y+8, r16	; 0x08
     758:	ea 86       	std	Y+10, r14	; 0x0a
     75a:	cb 86       	std	Y+11, r12	; 0x0b
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				timer(timer),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	2a e0       	ldi	r18, 0x0A	; 10
     762:	32 e0       	ldi	r19, 0x02	; 2
     764:	fc 01       	movw	r30, r24
     766:	31 83       	std	Z+1, r19	; 0x01
     768:	20 83       	st	Z, r18
     76a:	29 81       	ldd	r18, Y+1	; 0x01
     76c:	3a 81       	ldd	r19, Y+2	; 0x02
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	ad 81       	ldd	r26, Y+5	; 0x05
     774:	be 81       	ldd	r27, Y+6	; 0x06
     776:	f9 01       	movw	r30, r18
     778:	82 83       	std	Z+2, r24	; 0x02
     77a:	93 83       	std	Z+3, r25	; 0x03
     77c:	a4 83       	std	Z+4, r26	; 0x04
     77e:	b5 83       	std	Z+5, r27	; 0x05
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	2f 81       	ldd	r18, Y+7	; 0x07
     786:	fc 01       	movw	r30, r24
     788:	26 83       	std	Z+6, r18	; 0x06
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	28 85       	ldd	r18, Y+8	; 0x08
     790:	39 85       	ldd	r19, Y+9	; 0x09
     792:	fc 01       	movw	r30, r24
     794:	30 87       	std	Z+8, r19	; 0x08
     796:	27 83       	std	Z+7, r18	; 0x07
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	9a 81       	ldd	r25, Y+2	; 0x02
     79c:	2a 85       	ldd	r18, Y+10	; 0x0a
     79e:	fc 01       	movw	r30, r24
     7a0:	21 87       	std	Z+9, r18	; 0x09
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	2b 85       	ldd	r18, Y+11	; 0x0b
     7a8:	fc 01       	movw	r30, r24
     7aa:	22 87       	std	Z+10, r18	; 0x0a
				{
					
				}
     7ac:	2b 96       	adiw	r28, 0x0b	; 11
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ef 90       	pop	r14
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret

000007c6 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * at the same time interval (i.e. 20 milliseconds) for both transmitting a byte as well
				 * as receiving a byte.
				 * @param serialDriver the driver used to communicate with the serial port
				 * which is used to communicate with the Ground Control Station.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver):
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	7c 83       	std	Y+4, r23	; 0x04
     7d8:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	2b 81       	ldd	r18, Y+3	; 0x03
     7e0:	3c 81       	ldd	r19, Y+4	; 0x04
     7e2:	fc 01       	movw	r30, r24
     7e4:	31 83       	std	Z+1, r19	; 0x01
     7e6:	20 83       	st	Z, r18
					{}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int checksumErrors;
			
			public:
			
			SystemModel():
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	1f 92       	push	r1
     7fc:	1f 92       	push	r1
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
			rawMagX(0),
			rawMagY(0),
			rawMagZ(0),
			timeouts(0),
			unrecognizedMsgTypes(0),
			checksumErrors(0)
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	fc 01       	movw	r30, r24
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	10 82       	st	Z, r1
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	fc 01       	movw	r30, r24
     816:	13 82       	std	Z+3, r1	; 0x03
     818:	12 82       	std	Z+2, r1	; 0x02
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	fc 01       	movw	r30, r24
     820:	15 82       	std	Z+5, r1	; 0x05
     822:	14 82       	std	Z+4, r1	; 0x04
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	fc 01       	movw	r30, r24
     82a:	17 82       	std	Z+7, r1	; 0x07
     82c:	16 82       	std	Z+6, r1	; 0x06
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	fc 01       	movw	r30, r24
     834:	11 86       	std	Z+9, r1	; 0x09
     836:	10 86       	std	Z+8, r1	; 0x08
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	fc 01       	movw	r30, r24
     83e:	13 86       	std	Z+11, r1	; 0x0b
     840:	12 86       	std	Z+10, r1	; 0x0a
			{
				
			}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <main>:
using namespace helicopter::drivers;
using namespace helicopter::interfaces;
using namespace helicopter::model;

int main(void)
{	
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	60 97       	sbiw	r28, 0x10	; 16
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
     870:	8c e0       	ldi	r24, 0x0C	; 12
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
     878:	8c 01       	movw	r16, r24
     87a:	c8 01       	movw	r24, r16
     87c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN10helicopter5model11SystemModelC1Ev>
     880:	1a 83       	std	Y+2, r17	; 0x02
     882:	09 83       	std	Y+1, r16	; 0x01
	
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 10); //Good timeout when using the USB
     884:	88 e0       	ldi	r24, 0x08	; 8
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
     88c:	6c 01       	movw	r12, r24
     88e:	1a e0       	ldi	r17, 0x0A	; 10
     890:	e1 2e       	mov	r14, r17
     892:	f1 2c       	mov	r15, r1
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	34 e0       	ldi	r19, 0x04	; 4
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	54 e2       	ldi	r21, 0x24	; 36
     8a0:	64 ef       	ldi	r22, 0xF4	; 244
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	c6 01       	movw	r24, r12
     8a6:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN10helicopter4util5TimerC1Em9PRESCALERm>
     8aa:	dc 82       	std	Y+4, r13	; 0x04
     8ac:	cb 82       	std	Y+3, r12	; 0x03
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);
     8ae:	8b e0       	ldi	r24, 0x0B	; 11
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
     8b6:	5c 01       	movw	r10, r24
     8b8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ba:	9c 81       	ldd	r25, Y+4	; 0x04
     8bc:	cc 24       	eor	r12, r12
     8be:	c3 94       	inc	r12
     8c0:	ee 24       	eor	r14, r14
     8c2:	e3 94       	inc	r14
     8c4:	8c 01       	movw	r16, r24
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	51 ee       	ldi	r21, 0xE1	; 225
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	c5 01       	movw	r24, r10
     8d2:	0e 94 95 03 	call	0x72a	; 0x72a <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>
     8d6:	be 82       	std	Y+6, r11	; 0x06
     8d8:	ad 82       	std	Y+5, r10	; 0x05
	serialDriver->initialize();
     8da:	8d 81       	ldd	r24, Y+5	; 0x05
     8dc:	9e 81       	ldd	r25, Y+6	; 0x06
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	04 96       	adiw	r24, 0x04	; 4
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 81       	ld	r18, Z
     8ea:	31 81       	ldd	r19, Z+1	; 0x01
     8ec:	8d 81       	ldd	r24, Y+5	; 0x05
     8ee:	9e 81       	ldd	r25, Y+6	; 0x06
     8f0:	f9 01       	movw	r30, r18
     8f2:	19 95       	eicall
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver);
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
     8fc:	8c 01       	movw	r16, r24
     8fe:	8d 81       	ldd	r24, Y+5	; 0x05
     900:	9e 81       	ldd	r25, Y+6	; 0x06
     902:	bc 01       	movw	r22, r24
     904:	c8 01       	movw	r24, r16
     906:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>
     90a:	18 87       	std	Y+8, r17	; 0x08
     90c:	0f 83       	std	Y+7, r16	; 0x07
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 50 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 50 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, 0, 4);//starting at tick 0, execute 50 times a second
     90e:	8b e0       	ldi	r24, 0x0B	; 11
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
     916:	7c 01       	movw	r14, r24
     918:	49 81       	ldd	r20, Y+1	; 0x01
     91a:	5a 81       	ldd	r21, Y+2	; 0x02
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	98 85       	ldd	r25, Y+8	; 0x08
     920:	04 e0       	ldi	r16, 0x04	; 4
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	bc 01       	movw	r22, r24
     92a:	c7 01       	movw	r24, r14
     92c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
     930:	fa 86       	std	Y+10, r15	; 0x0a
     932:	e9 86       	std	Y+9, r14	; 0x09
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
     934:	8b e0       	ldi	r24, 0x0B	; 11
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
     93c:	7c 01       	movw	r14, r24
     93e:	49 81       	ldd	r20, Y+1	; 0x01
     940:	5a 81       	ldd	r21, Y+2	; 0x02
     942:	8f 81       	ldd	r24, Y+7	; 0x07
     944:	98 85       	ldd	r25, Y+8	; 0x08
     946:	04 e0       	ldi	r16, 0x04	; 4
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	bc 01       	movw	r22, r24
     950:	c7 01       	movw	r24, r14
     952:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
     956:	fc 86       	std	Y+12, r15	; 0x0c
     958:	eb 86       	std	Y+11, r14	; 0x0b
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
     95a:	8a e0       	ldi	r24, 0x0A	; 10
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
     962:	8c 01       	movw	r16, r24
     964:	23 e0       	ldi	r18, 0x03	; 3
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	48 ec       	ldi	r20, 0xC8	; 200
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	c8 01       	movw	r24, r16
     972:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>
     976:	1e 87       	std	Y+14, r17	; 0x0e
     978:	0d 87       	std	Y+13, r16	; 0x0d
		

	Scheduler *scheduler = Scheduler::getScheduler();
     97a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
     97e:	98 8b       	std	Y+16, r25	; 0x10
     980:	8f 87       	std	Y+15, r24	; 0x0f
	
	scheduler->addTask(flashTask);
     982:	2d 85       	ldd	r18, Y+13	; 0x0d
     984:	3e 85       	ldd	r19, Y+14	; 0x0e
     986:	8f 85       	ldd	r24, Y+15	; 0x0f
     988:	98 89       	ldd	r25, Y+16	; 0x10
     98a:	b9 01       	movw	r22, r18
     98c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
     990:	29 85       	ldd	r18, Y+9	; 0x09
     992:	3a 85       	ldd	r19, Y+10	; 0x0a
     994:	8f 85       	ldd	r24, Y+15	; 0x0f
     996:	98 89       	ldd	r25, Y+16	; 0x10
     998:	b9 01       	movw	r22, r18
     99a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
     99e:	2b 85       	ldd	r18, Y+11	; 0x0b
     9a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     9a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a4:	98 89       	ldd	r25, Y+16	; 0x10
     9a6:	b9 01       	movw	r22, r18
     9a8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
     9ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ae:	98 89       	ldd	r25, Y+16	; 0x10
     9b0:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
     9b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     9b6:	98 89       	ldd	r25, Y+16	; 0x10
     9b8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	while(1)
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
     9bc:	8f 85       	ldd	r24, Y+15	; 0x0f
     9be:	98 89       	ldd	r25, Y+16	; 0x10
     9c0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
     9c4:	fb cf       	rjmp	.-10     	; 0x9bc <main+0x170>

000009c6 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	1f 92       	push	r1
     9cc:	1f 92       	push	r1
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	9a 83       	std	Y+2, r25	; 0x02
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	28 e1       	ldi	r18, 0x18	; 24
     9dc:	32 e0       	ldi	r19, 0x02	; 2
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	81 70       	andi	r24, 0x01	; 1
     9f2:	99 27       	eor	r25, r25
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	21 f0       	breq	.+8      	; 0xa00 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev+0x3a>
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	1f 92       	push	r1
     a10:	1f 92       	push	r1
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	9a 83       	std	Y+2, r25	; 0x02
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	2d 97       	sbiw	r28, 0x0d	; 13
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	9d 83       	std	Y+5, r25	; 0x05
     a4e:	8c 83       	std	Y+4, r24	; 0x04
     a50:	7f 83       	std	Y+7, r23	; 0x07
     a52:	6e 83       	std	Y+6, r22	; 0x06
     a54:	59 87       	std	Y+9, r21	; 0x09
     a56:	48 87       	std	Y+8, r20	; 0x08
     a58:	3b 87       	std	Y+11, r19	; 0x0b
     a5a:	2a 87       	std	Y+10, r18	; 0x0a
     a5c:	1d 87       	std	Y+13, r17	; 0x0d
     a5e:	0c 87       	std	Y+12, r16	; 0x0c
	for (int i = 0; i < payloadSize; i++)
     a60:	1a 82       	std	Y+2, r1	; 0x02
     a62:	19 82       	std	Y+1, r1	; 0x01
     a64:	26 c0       	rjmp	.+76     	; 0xab2 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x7e>
	{
		byte b = msgPayload[i];
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	9a 81       	ldd	r25, Y+2	; 0x02
     a6a:	2e 81       	ldd	r18, Y+6	; 0x06
     a6c:	3f 81       	ldd	r19, Y+7	; 0x07
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	fc 01       	movw	r30, r24
     a74:	80 81       	ld	r24, Z
     a76:	8b 83       	std	Y+3, r24	; 0x03
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
     a78:	8a 85       	ldd	r24, Y+10	; 0x0a
     a7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     a7c:	fc 01       	movw	r30, r24
     a7e:	90 81       	ld	r25, Z
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	29 2f       	mov	r18, r25
     a84:	28 0f       	add	r18, r24
     a86:	8a 85       	ldd	r24, Y+10	; 0x0a
     a88:	9b 85       	ldd	r25, Y+11	; 0x0b
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
     a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a90:	9d 85       	ldd	r25, Y+13	; 0x0d
     a92:	fc 01       	movw	r30, r24
     a94:	20 81       	ld	r18, Z
     a96:	8a 85       	ldd	r24, Y+10	; 0x0a
     a98:	9b 85       	ldd	r25, Y+11	; 0x0b
     a9a:	fc 01       	movw	r30, r24
     a9c:	80 81       	ld	r24, Z
     a9e:	28 0f       	add	r18, r24
     aa0:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa2:	9d 85       	ldd	r25, Y+13	; 0x0d
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	9a 83       	std	Y+2, r25	; 0x02
     ab0:	89 83       	std	Y+1, r24	; 0x01
     ab2:	41 e0       	ldi	r20, 0x01	; 1
     ab4:	29 81       	ldd	r18, Y+1	; 0x01
     ab6:	3a 81       	ldd	r19, Y+2	; 0x02
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	99 85       	ldd	r25, Y+9	; 0x09
     abc:	28 17       	cp	r18, r24
     abe:	39 07       	cpc	r19, r25
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x90>
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	44 23       	and	r20, r20
     ac6:	79 f6       	brne	.-98     	; 0xa66 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x32>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
     ac8:	2d 96       	adiw	r28, 0x0d	; 13
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	08 95       	ret

00000ade <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	64 97       	sbiw	r28, 0x14	; 20
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	9a 8b       	std	Y+18, r25	; 0x12
     b00:	89 8b       	std	Y+17, r24	; 0x11
     b02:	7c 8b       	std	Y+20, r23	; 0x14
     b04:	6b 8b       	std	Y+19, r22	; 0x13
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
     b06:	ed b6       	in	r14, 0x3d	; 61
     b08:	fe b6       	in	r15, 0x3e	; 62
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
     b0a:	1a 82       	std	Y+2, r1	; 0x02
     b0c:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
     b0e:	8b 89       	ldd	r24, Y+19	; 0x13
     b10:	9c 89       	ldd	r25, Y+20	; 0x14
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	09 f4       	brne	.+2      	; 0xb18 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3a>
     b16:	b3 c0       	rjmp	.+358    	; 0xc7e <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1a0>
     b18:	8d b7       	in	r24, 0x3d	; 61
     b1a:	9e b7       	in	r25, 0x3e	; 62
     b1c:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
     b1e:	8b 89       	ldd	r24, Y+19	; 0x13
     b20:	9c 89       	ldd	r25, Y+20	; 0x14
     b22:	fc 01       	movw	r30, r24
     b24:	80 81       	ld	r24, Z
     b26:	91 81       	ldd	r25, Z+1	; 0x01
     b28:	04 96       	adiw	r24, 0x04	; 4
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 81       	ld	r18, Z
     b2e:	31 81       	ldd	r19, Z+1	; 0x01
     b30:	8b 89       	ldd	r24, Y+19	; 0x13
     b32:	9c 89       	ldd	r25, Y+20	; 0x14
     b34:	f9 01       	movw	r30, r18
     b36:	19 95       	eicall
     b38:	9e 83       	std	Y+6, r25	; 0x06
     b3a:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
     b3c:	8b 89       	ldd	r24, Y+19	; 0x13
     b3e:	9c 89       	ldd	r25, Y+20	; 0x14
     b40:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_ZN10helicopter8messages7Message14getMessageSizeEv>
     b44:	98 87       	std	Y+8, r25	; 0x08
     b46:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
     b48:	8f 81       	ldd	r24, Y+7	; 0x07
     b4a:	98 85       	ldd	r25, Y+8	; 0x08
     b4c:	05 96       	adiw	r24, 0x05	; 5
     b4e:	9a 87       	std	Y+10, r25	; 0x0a
     b50:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
     b52:	89 85       	ldd	r24, Y+9	; 0x09
     b54:	9a 85       	ldd	r25, Y+10	; 0x0a
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	9c 87       	std	Y+12, r25	; 0x0c
     b5a:	8b 87       	std	Y+11, r24	; 0x0b
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	2d b7       	in	r18, 0x3d	; 61
     b60:	3e b7       	in	r19, 0x3e	; 62
     b62:	28 1b       	sub	r18, r24
     b64:	39 0b       	sbc	r19, r25
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	3e bf       	out	0x3e, r19	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	2d bf       	out	0x3d, r18	; 61
     b70:	8d b7       	in	r24, 0x3d	; 61
     b72:	9e b7       	in	r25, 0x3e	; 62
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	9e 87       	std	Y+14, r25	; 0x0e
     b78:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
     b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7e:	25 eb       	ldi	r18, 0xB5	; 181
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
     b84:	8d 85       	ldd	r24, Y+13	; 0x0d
     b86:	9e 85       	ldd	r25, Y+14	; 0x0e
     b88:	22 e6       	ldi	r18, 0x62	; 98
     b8a:	fc 01       	movw	r30, r24
     b8c:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	27 ed       	ldi	r18, 0xD7	; 215
     b94:	fc 01       	movw	r30, r24
     b96:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
     b98:	4f 81       	ldd	r20, Y+7	; 0x07
     b9a:	58 85       	ldd	r21, Y+8	; 0x08
     b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba0:	03 96       	adiw	r24, 0x03	; 3
     ba2:	2d 81       	ldd	r18, Y+5	; 0x05
     ba4:	3e 81       	ldd	r19, Y+6	; 0x06
     ba6:	b9 01       	movw	r22, r18
     ba8:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
		
		byte checksumA = 0;
     bac:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
     bae:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
     bb0:	fe 01       	movw	r30, r28
     bb2:	70 96       	adiw	r30, 0x10	; 16
     bb4:	9e 01       	movw	r18, r28
     bb6:	21 5f       	subi	r18, 0xF1	; 241
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 81       	ldd	r20, Y+7	; 0x07
     bbc:	58 85       	ldd	r21, Y+8	; 0x08
     bbe:	6d 81       	ldd	r22, Y+5	; 0x05
     bc0:	7e 81       	ldd	r23, Y+6	; 0x06
     bc2:	89 89       	ldd	r24, Y+17	; 0x11
     bc4:	9a 89       	ldd	r25, Y+18	; 0x12
     bc6:	8f 01       	movw	r16, r30
     bc8:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
     bcc:	89 85       	ldd	r24, Y+9	; 0x09
     bce:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd0:	02 97       	sbiw	r24, 0x02	; 2
     bd2:	4f 85       	ldd	r20, Y+15	; 0x0f
     bd4:	2d 85       	ldd	r18, Y+13	; 0x0d
     bd6:	3e 85       	ldd	r19, Y+14	; 0x0e
     bd8:	82 0f       	add	r24, r18
     bda:	93 1f       	adc	r25, r19
     bdc:	fc 01       	movw	r30, r24
     bde:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	9a 85       	ldd	r25, Y+10	; 0x0a
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	48 89       	ldd	r20, Y+16	; 0x10
     be8:	2d 85       	ldd	r18, Y+13	; 0x0d
     bea:	3e 85       	ldd	r19, Y+14	; 0x0e
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	fc 01       	movw	r30, r24
     bf2:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     bf4:	1c 82       	std	Y+4, r1	; 0x04
     bf6:	1b 82       	std	Y+3, r1	; 0x03
     bf8:	23 c0       	rjmp	.+70     	; 0xc40 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x162>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
     bfa:	89 89       	ldd	r24, Y+17	; 0x11
     bfc:	9a 89       	ldd	r25, Y+18	; 0x12
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	91 81       	ldd	r25, Z+1	; 0x01
     c04:	fc 01       	movw	r30, r24
     c06:	80 81       	ld	r24, Z
     c08:	91 81       	ldd	r25, Z+1	; 0x01
     c0a:	06 96       	adiw	r24, 0x06	; 6
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 81       	ld	r18, Z
     c10:	31 81       	ldd	r19, Z+1	; 0x01
     c12:	4d 85       	ldd	r20, Y+13	; 0x0d
     c14:	5e 85       	ldd	r21, Y+14	; 0x0e
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	84 0f       	add	r24, r20
     c1c:	95 1f       	adc	r25, r21
     c1e:	fc 01       	movw	r30, r24
     c20:	40 81       	ld	r20, Z
     c22:	89 89       	ldd	r24, Y+17	; 0x11
     c24:	9a 89       	ldd	r25, Y+18	; 0x12
     c26:	fc 01       	movw	r30, r24
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	64 2f       	mov	r22, r20
     c2e:	f9 01       	movw	r30, r18
     c30:	19 95       	eicall
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
     c40:	2b 81       	ldd	r18, Y+3	; 0x03
     c42:	3c 81       	ldd	r19, Y+4	; 0x04
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	28 17       	cp	r18, r24
     c4a:	39 07       	cpc	r19, r25
     c4c:	34 f4       	brge	.+12     	; 0xc5a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	11 f4       	brne	.+4      	; 0xc5a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17e>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	88 23       	and	r24, r24
     c5e:	69 f6       	brne	.-102    	; 0xbfa <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x11c>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete [] msgPayload;
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	21 f0       	breq	.+8      	; 0xc70 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x192>
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	0e 94 37 12 	call	0x246e	; 0x246e <_ZdaPv>
		msgPayload = NULL;
     c70:	1e 82       	std	Y+6, r1	; 0x06
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de be       	out	0x3e, r13	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	fe be       	out	0x3e, r15	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	ed be       	out	0x3d, r14	; 61
     c8c:	64 96       	adiw	r28, 0x14	; 20
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	08 95       	ret

00000caa <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	66 97       	sbiw	r28, 0x16	; 22
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	9c 8b       	std	Y+20, r25	; 0x14
     ccc:	8b 8b       	std	Y+19, r24	; 0x13
     cce:	7e 8b       	std	Y+22, r23	; 0x16
     cd0:	6d 8b       	std	Y+21, r22	; 0x15
	{
		receivedMessage = NULL;
	}
	
	return status;
     cd2:	ed b6       	in	r14, 0x3d	; 61
     cd4:	fe b6       	in	r15, 0x3e	; 62
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
     cd6:	1a 82       	std	Y+2, r1	; 0x02
     cd8:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
     cda:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
     cdc:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
     cde:	1d 86       	std	Y+13, r1	; 0x0d
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x72>
	{
		firstSyncByte = secondSyncByte;
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
     ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce8:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte);
     cea:	8b 89       	ldd	r24, Y+19	; 0x13
     cec:	9c 89       	ldd	r25, Y+20	; 0x14
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	fc 01       	movw	r30, r24
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	08 96       	adiw	r24, 0x08	; 8
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 81       	ld	r18, Z
     d00:	31 81       	ldd	r19, Z+1	; 0x01
     d02:	8b 89       	ldd	r24, Y+19	; 0x13
     d04:	9c 89       	ldd	r25, Y+20	; 0x14
     d06:	fc 01       	movw	r30, r24
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	ae 01       	movw	r20, r28
     d0e:	43 5f       	subi	r20, 0xF3	; 243
     d10:	5f 4f       	sbci	r21, 0xFF	; 255
     d12:	ba 01       	movw	r22, r20
     d14:	f9 01       	movw	r30, r18
     d16:	19 95       	eicall
     d18:	9a 83       	std	Y+2, r25	; 0x02
     d1a:	89 83       	std	Y+1, r24	; 0x01
    byte thirdSyncByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	85 3b       	cpi	r24, 0xB5	; 181
     d20:	31 f4       	brne	.+12     	; 0xd2e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	82 36       	cpi	r24, 0x62	; 98
     d26:	19 f4       	brne	.+6      	; 0xd2e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
     d28:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2a:	87 3d       	cpi	r24, 0xD7	; 215
     d2c:	31 f0       	breq	.+12     	; 0xd3a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	11 f4       	brne	.+4      	; 0xd3a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x92>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	88 23       	and	r24, r24
     d3e:	89 f6       	brne	.-94     	; 0xce2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x38>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receiveByte(thirdSyncByte);
	}
	
	if (status == 0)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	09 f0       	breq	.+2      	; 0xd4a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa0>
     d48:	f9 c0       	rjmp	.+498    	; 0xf3c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
     d4a:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType);
     d4c:	8b 89       	ldd	r24, Y+19	; 0x13
     d4e:	9c 89       	ldd	r25, Y+20	; 0x14
     d50:	fc 01       	movw	r30, r24
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	fc 01       	movw	r30, r24
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	08 96       	adiw	r24, 0x08	; 8
     d5e:	fc 01       	movw	r30, r24
     d60:	20 81       	ld	r18, Z
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	ae 01       	movw	r20, r28
     d70:	42 5f       	subi	r20, 0xF2	; 242
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	ba 01       	movw	r22, r20
     d76:	f9 01       	movw	r30, r18
     d78:	19 95       	eicall
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	09 f0       	breq	.+2      	; 0xd88 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xde>
     d86:	da c0       	rjmp	.+436    	; 0xf3c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
		{
			int msgSize = 0;
     d88:	1e 82       	std	Y+6, r1	; 0x06
     d8a:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
     d8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	29 f4       	brne	.+10     	; 0xda2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xf8>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
     d98:	8d e0       	ldi	r24, 0x0D	; 13
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	8d 83       	std	Y+5, r24	; 0x05
					break;
     da0:	05 c0       	rjmp	.+10     	; 0xdac <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x102>
				default:
					//unrecognized message type.
					status = -2;
     da2:	8e ef       	ldi	r24, 0xFE	; 254
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
					break;
     daa:	00 00       	nop
			}
			
			if (status == 0)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	09 f0       	breq	.+2      	; 0xdb6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x10c>
     db4:	c3 c0       	rjmp	.+390    	; 0xf3c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
     db6:	8d b7       	in	r24, 0x3d	; 61
     db8:	9e b7       	in	r25, 0x3e	; 62
     dba:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	9a 87       	std	Y+10, r25	; 0x0a
     dc4:	89 87       	std	Y+9, r24	; 0x09
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	2d b7       	in	r18, 0x3d	; 61
     dca:	3e b7       	in	r19, 0x3e	; 62
     dcc:	28 1b       	sub	r18, r24
     dce:	39 0b       	sbc	r19, r25
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	3e bf       	out	0x3e, r19	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	2d bf       	out	0x3d, r18	; 61
     dda:	8d b7       	in	r24, 0x3d	; 61
     ddc:	9e b7       	in	r25, 0x3e	; 62
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	9c 87       	std	Y+12, r25	; 0x0c
     de2:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
     de4:	2e 85       	ldd	r18, Y+14	; 0x0e
     de6:	8b 85       	ldd	r24, Y+11	; 0x0b
     de8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	98 87       	std	Y+8, r25	; 0x08
     df4:	8f 83       	std	Y+7, r24	; 0x07
     df6:	21 c0       	rjmp	.+66     	; 0xe3a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x190>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
     df8:	8b 89       	ldd	r24, Y+19	; 0x13
     dfa:	9c 89       	ldd	r25, Y+20	; 0x14
     dfc:	fc 01       	movw	r30, r24
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	08 96       	adiw	r24, 0x08	; 8
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 81       	ld	r18, Z
     e0e:	31 81       	ldd	r19, Z+1	; 0x01
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	8f 81       	ldd	r24, Y+7	; 0x07
     e16:	98 85       	ldd	r25, Y+8	; 0x08
     e18:	48 0f       	add	r20, r24
     e1a:	59 1f       	adc	r21, r25
     e1c:	8b 89       	ldd	r24, Y+19	; 0x13
     e1e:	9c 89       	ldd	r25, Y+20	; 0x14
     e20:	fc 01       	movw	r30, r24
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	ba 01       	movw	r22, r20
     e28:	f9 01       	movw	r30, r18
     e2a:	19 95       	eicall
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	98 85       	ldd	r25, Y+8	; 0x08
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	98 87       	std	Y+8, r25	; 0x08
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	2f 81       	ldd	r18, Y+7	; 0x07
     e3c:	38 85       	ldd	r19, Y+8	; 0x08
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	28 17       	cp	r18, r24
     e44:	39 07       	cpc	r19, r25
     e46:	34 f4       	brge	.+12     	; 0xe54 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	11 f4       	brne	.+4      	; 0xe54 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ac>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	88 23       	and	r24, r24
     e58:	79 f6       	brne	.-98     	; 0xdf8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x14e>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
				}
							
				if (status == 0)
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	09 f0       	breq	.+2      	; 0xe64 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ba>
     e62:	67 c0       	rjmp	.+206    	; 0xf32 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
     e64:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
     e66:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
     e68:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
     e6a:	1a 8a       	std	Y+18, r1	; 0x12
								
					//Note: status is getting overwritten here.
					status = serialDriver->receiveByte(messageChecksumA);
     e6c:	8b 89       	ldd	r24, Y+19	; 0x13
     e6e:	9c 89       	ldd	r25, Y+20	; 0x14
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	fc 01       	movw	r30, r24
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	08 96       	adiw	r24, 0x08	; 8
     e7e:	fc 01       	movw	r30, r24
     e80:	20 81       	ld	r18, Z
     e82:	31 81       	ldd	r19, Z+1	; 0x01
     e84:	8b 89       	ldd	r24, Y+19	; 0x13
     e86:	9c 89       	ldd	r25, Y+20	; 0x14
     e88:	fc 01       	movw	r30, r24
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	ae 01       	movw	r20, r28
     e90:	41 5f       	subi	r20, 0xF1	; 241
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	ba 01       	movw	r22, r20
     e96:	f9 01       	movw	r30, r18
     e98:	19 95       	eicall
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB);
     e9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ea0:	9c 89       	ldd	r25, Y+20	; 0x14
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	fc 01       	movw	r30, r24
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	08 96       	adiw	r24, 0x08	; 8
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 81       	ld	r18, Z
     eb4:	31 81       	ldd	r19, Z+1	; 0x01
     eb6:	8b 89       	ldd	r24, Y+19	; 0x13
     eb8:	9c 89       	ldd	r25, Y+20	; 0x14
     eba:	fc 01       	movw	r30, r24
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	ae 01       	movw	r20, r28
     ec2:	40 5f       	subi	r20, 0xF0	; 240
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	ba 01       	movw	r22, r20
     ec8:	f9 01       	movw	r30, r18
     eca:	19 95       	eicall
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	fe 01       	movw	r30, r28
     ed6:	72 96       	adiw	r30, 0x12	; 18
     ed8:	9e 01       	movw	r18, r28
     eda:	2f 5e       	subi	r18, 0xEF	; 239
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	4d 81       	ldd	r20, Y+5	; 0x05
     ee0:	5e 81       	ldd	r21, Y+6	; 0x06
     ee2:	8b 89       	ldd	r24, Y+19	; 0x13
     ee4:	9c 89       	ldd	r25, Y+20	; 0x14
     ee6:	8f 01       	movw	r16, r30
     ee8:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
     eec:	99 89       	ldd	r25, Y+17	; 0x11
     eee:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef0:	98 17       	cp	r25, r24
     ef2:	d9 f4       	brne	.+54     	; 0xf2a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
     ef4:	9a 89       	ldd	r25, Y+18	; 0x12
     ef6:	88 89       	ldd	r24, Y+16	; 0x10
     ef8:	98 17       	cp	r25, r24
     efa:	b9 f4       	brne	.+46     	; 0xf2a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
					{
						//build the message
						switch(msgType)
     efc:	8e 85       	ldd	r24, Y+14	; 0x0e
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	91 05       	cpc	r25, r1
     f06:	59 f4       	brne	.+22     	; 0xf1e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x274>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
     f08:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f0c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
     f10:	9c 01       	movw	r18, r24
     f12:	8d 89       	ldd	r24, Y+21	; 0x15
     f14:	9e 89       	ldd	r25, Y+22	; 0x16
     f16:	fc 01       	movw	r30, r24
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	20 83       	st	Z, r18
							break;
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x27e>
							default:
								//unrecognized message type.
								status = -2;
     f1e:	8e ef       	ldi	r24, 0xFE	; 254
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
							break;
     f26:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -3;
     f2a:	8d ef       	ldi	r24, 0xFD	; 253
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de be       	out	0x3e, r13	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	29 f0       	breq	.+10     	; 0xf4e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2a4>
	{
		receivedMessage = NULL;
     f44:	8d 89       	ldd	r24, Y+21	; 0x15
     f46:	9e 89       	ldd	r25, Y+22	; 0x16
     f48:	fc 01       	movw	r30, r24
     f4a:	11 82       	std	Z+1, r1	; 0x01
     f4c:	10 82       	st	Z, r1
	}
	
	return status;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	fe be       	out	0x3e, r15	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	ed be       	out	0x3d, r14	; 61
     f5c:	66 96       	adiw	r28, 0x16	; 22
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <_ZN10helicopter8messages7MessageD1Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	1f 92       	push	r1
     f80:	1f 92       	push	r1
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
				{
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	26 e2       	ldi	r18, 0x26	; 38
     f90:	32 e0       	ldi	r19, 0x02	; 2
     f92:	fc 01       	movw	r30, r24
     f94:	31 83       	std	Z+1, r19	; 0x01
     f96:	20 83       	st	Z, r18
					
				}
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	81 70       	andi	r24, 0x01	; 1
     f9e:	99 27       	eor	r25, r25
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	21 f0       	breq	.+8      	; 0xfac <_ZN10helicopter8messages7MessageD1Ev+0x32>
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	1f 92       	push	r1
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN10helicopter8messages7MessageD1Ev>
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	1f 92       	push	r1
     fe6:	1f 92       	push	r1
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
	return msgSize;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	fc 01       	movw	r30, r24
     ff6:	83 81       	ldd	r24, Z+3	; 0x03
     ff8:	94 81       	ldd	r25, Z+4	; 0x04
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <_ZN10helicopter8messages7Message8getBytesEv>:
				
/**
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	1f 92       	push	r1
    100a:	1f 92       	push	r1
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	9a 83       	std	Y+2, r25	; 0x02
    1012:	89 83       	std	Y+1, r24	; 0x01
	return NULL;
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	00 d0       	rcall	.+0      	; 0x1028 <_ZN10helicopter8messages7Message12buildMessageEPh+0x6>
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	7c 83       	std	Y+4, r23	; 0x04
    1034:	6b 83       	std	Y+3, r22	; 0x03
	//noop. subclass should implement this.
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <_ZN10helicopter8messages7MessageC1Ehi>:
			
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <_ZN10helicopter8messages7MessageC1Ehi+0x6>
    104a:	1f 92       	push	r1
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	6b 83       	std	Y+3, r22	; 0x03
    1058:	5d 83       	std	Y+5, r21	; 0x05
    105a:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	26 e2       	ldi	r18, 0x26	; 38
    1062:	32 e0       	ldi	r19, 0x02	; 2
    1064:	fc 01       	movw	r30, r24
    1066:	31 83       	std	Z+1, r19	; 0x01
    1068:	20 83       	st	Z, r18
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	fc 01       	movw	r30, r24
    1072:	22 83       	std	Z+2, r18	; 0x02
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	fc 01       	movw	r30, r24
    107e:	34 83       	std	Z+4, r19	; 0x04
    1080:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	1f 92       	push	r1
    1098:	1f 92       	push	r1
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	63 e0       	ldi	r22, 0x03	; 3
    10ac:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN10helicopter8messages7MessageC1Ehi>
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	22 e3       	ldi	r18, 0x32	; 50
    10b6:	32 e0       	ldi	r19, 0x02	; 2
    10b8:	fc 01       	movw	r30, r24
    10ba:	31 83       	std	Z+1, r19	; 0x01
    10bc:	20 83       	st	Z, r18
				{
								
				}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <_ZN10helicopter8messages11SyncMessageD1Ev>:
				
				~SyncMessage()
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	1f 92       	push	r1
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
				{
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	22 e3       	ldi	r18, 0x32	; 50
    10de:	32 e0       	ldi	r19, 0x02	; 2
    10e0:	fc 01       	movw	r30, r24
    10e2:	31 83       	std	Z+1, r19	; 0x01
    10e4:	20 83       	st	Z, r18
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN10helicopter8messages7MessageD1Ev>
					
				}
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	81 70       	andi	r24, 0x01	; 1
    10f4:	99 27       	eor	r25, r25
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	21 f0       	breq	.+8      	; 0x1102 <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <_ZN10helicopter8messages11SyncMessageD0Ev>:
				SyncMessage(): Message(MessageType,MessageSize)
				{
								
				}
				
				~SyncMessage()
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	1f 92       	push	r1
    1112:	1f 92       	push	r1
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN10helicopter8messages11SyncMessageD1Ev>
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	00 d0       	rcall	.+0      	; 0x113c <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 26 12 	call	0x244c	; 0x244c <_Znaj>
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	fc 01       	movw	r30, r24
    1160:	22 81       	ldd	r18, Z+2	; 0x02
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
	
	return msg;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    116e:	26 96       	adiw	r28, 0x06	; 6
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:

void SyncMessage::buildMessage(byte *message)
{
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	00 d0       	rcall	.+0      	; 0x1186 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x6>
    1186:	1f 92       	push	r1
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	7c 83       	std	Y+4, r23	; 0x04
    1192:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	41 f0       	breq	.+16     	; 0x11ac <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x2c>
	{
		msgType = message[0];
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 81       	ld	r18, Z
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	fc 01       	movw	r30, r24
    11aa:	22 83       	std	Z+2, r18	; 0x02
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(magZ) + 
				sizeof(timeouts) + 
				sizeof(unrecognizedMsgTypes) + 
				sizeof(checksumErrors);
			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	1f 92       	push	r1
    11c0:	1f 92       	push	r1
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
					magX(0),
					magY(0),
					magZ(0),
					timeouts(0),
					unrecognizedMsgTypes(0),
					checksumErrors(0)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	4d e0       	ldi	r20, 0x0D	; 13
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN10helicopter8messages7MessageC1Ehi>
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	2e e3       	ldi	r18, 0x3E	; 62
    11de:	32 e0       	ldi	r19, 0x02	; 2
    11e0:	fc 01       	movw	r30, r24
    11e2:	31 83       	std	Z+1, r19	; 0x01
    11e4:	20 83       	st	Z, r18
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	fc 01       	movw	r30, r24
    11ec:	16 82       	std	Z+6, r1	; 0x06
    11ee:	15 82       	std	Z+5, r1	; 0x05
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	fc 01       	movw	r30, r24
    11f6:	10 86       	std	Z+8, r1	; 0x08
    11f8:	17 82       	std	Z+7, r1	; 0x07
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	fc 01       	movw	r30, r24
    1200:	12 86       	std	Z+10, r1	; 0x0a
    1202:	11 86       	std	Z+9, r1	; 0x09
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	fc 01       	movw	r30, r24
    120a:	14 86       	std	Z+12, r1	; 0x0c
    120c:	13 86       	std	Z+11, r1	; 0x0b
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	fc 01       	movw	r30, r24
    1214:	16 86       	std	Z+14, r1	; 0x0e
    1216:	15 86       	std	Z+13, r1	; 0x0d
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	fc 01       	movw	r30, r24
    121e:	10 8a       	std	Z+16, r1	; 0x10
    1220:	17 86       	std	Z+15, r1	; 0x0f
				{
				
				}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	1f 92       	push	r1
    1232:	1f 92       	push	r1
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	2e e3       	ldi	r18, 0x3E	; 62
    1242:	32 e0       	ldi	r19, 0x02	; 2
    1244:	fc 01       	movw	r30, r24
    1246:	31 83       	std	Z+1, r19	; 0x01
    1248:	20 83       	st	Z, r18
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN10helicopter8messages7MessageD1Ev>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	81 70       	andi	r24, 0x01	; 1
    1258:	99 27       	eor	r25, r25
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	21 f0       	breq	.+8      	; 0x1266 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	1f 92       	push	r1
    1276:	1f 92       	push	r1
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	0e 94 16 09 	call	0x122c	; 0x122c <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    12aa:	8d e0       	ldi	r24, 0x0D	; 13
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 26 12 	call	0x244c	; 0x244c <_Znaj>
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	fc 01       	movw	r30, r24
    12c4:	22 81       	ldd	r18, Z+2	; 0x02
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
	
	msgPtr++;
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magX, sizeof(magX));
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	9c 01       	movw	r18, r24
    12de:	2b 5f       	subi	r18, 0xFB	; 251
    12e0:	3f 4f       	sbci	r19, 0xFF	; 255
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	42 e0       	ldi	r20, 0x02	; 2
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	b9 01       	movw	r22, r18
    12ec:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
	
	msgPtr += sizeof(magX);
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	02 96       	adiw	r24, 0x02	; 2
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magY, sizeof(magY));
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	9c 01       	movw	r18, r24
    1300:	29 5f       	subi	r18, 0xF9	; 249
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	42 e0       	ldi	r20, 0x02	; 2
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	b9 01       	movw	r22, r18
    130e:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
	
	msgPtr += sizeof(magY);
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	02 96       	adiw	r24, 0x02	; 2
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magZ, sizeof(magZ));
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	9c 01       	movw	r18, r24
    1322:	27 5f       	subi	r18, 0xF7	; 247
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	42 e0       	ldi	r20, 0x02	; 2
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	b9 01       	movw	r22, r18
    1330:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
		
		
	msgPtr += sizeof(magZ);
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	02 96       	adiw	r24, 0x02	; 2
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &timeouts, sizeof(timeouts));
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	9c 01       	movw	r18, r24
    1344:	25 5f       	subi	r18, 0xF5	; 245
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	42 e0       	ldi	r20, 0x02	; 2
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	b9 01       	movw	r22, r18
    1352:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
	
	msgPtr += sizeof(timeouts);
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	02 96       	adiw	r24, 0x02	; 2
    135c:	9c 83       	std	Y+4, r25	; 0x04
    135e:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &unrecognizedMsgTypes, sizeof(unrecognizedMsgTypes));
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	9c 01       	movw	r18, r24
    1366:	23 5f       	subi	r18, 0xF3	; 243
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	42 e0       	ldi	r20, 0x02	; 2
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	b9 01       	movw	r22, r18
    1374:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
	
	msgPtr += sizeof(unrecognizedMsgTypes);
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	02 96       	adiw	r24, 0x02	; 2
    137e:	9c 83       	std	Y+4, r25	; 0x04
    1380:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &checksumErrors, sizeof(checksumErrors));
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	9c 01       	movw	r18, r24
    1388:	21 5f       	subi	r18, 0xF1	; 241
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	42 e0       	ldi	r20, 0x02	; 2
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	b9 01       	movw	r22, r18
    1396:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
				
	return msg;
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    139e:	26 96       	adiw	r28, 0x06	; 6
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x6>
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	7c 83       	std	Y+4, r23	; 0x04
    13c2:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	09 f4       	brne	.+2      	; 0x13ce <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1e>
    13cc:	62 c0       	rjmp	.+196    	; 0x1492 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0xe2>
	{
		msgType = message[0];
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 81       	ld	r18, Z
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	fc 01       	movw	r30, r24
    13dc:	22 83       	std	Z+2, r18	; 0x02
		
		message++;
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magX, message, sizeof(magX));
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	05 96       	adiw	r24, 0x05	; 5
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	42 e0       	ldi	r20, 0x02	; 2
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	b9 01       	movw	r22, r18
    13f8:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
		
		message += sizeof(magX);
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	02 96       	adiw	r24, 0x02	; 2
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magY, message, sizeof(magY));
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	07 96       	adiw	r24, 0x07	; 7
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	42 e0       	ldi	r20, 0x02	; 2
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
		
		message += sizeof(magY);
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	02 96       	adiw	r24, 0x02	; 2
    1420:	9c 83       	std	Y+4, r25	; 0x04
    1422:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magZ, message, sizeof(magZ));
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	09 96       	adiw	r24, 0x09	; 9
    142a:	2b 81       	ldd	r18, Y+3	; 0x03
    142c:	3c 81       	ldd	r19, Y+4	; 0x04
    142e:	42 e0       	ldi	r20, 0x02	; 2
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	b9 01       	movw	r22, r18
    1434:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
		
		
		message += sizeof(magZ);
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	02 96       	adiw	r24, 0x02	; 2
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&timeouts, message, sizeof(timeouts));
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	0b 96       	adiw	r24, 0x0b	; 11
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	42 e0       	ldi	r20, 0x02	; 2
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	b9 01       	movw	r22, r18
    1452:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>

		message += sizeof(timeouts);
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	02 96       	adiw	r24, 0x02	; 2
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&unrecognizedMsgTypes, message, sizeof(unrecognizedMsgTypes));
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	0d 96       	adiw	r24, 0x0d	; 13
    1466:	2b 81       	ldd	r18, Y+3	; 0x03
    1468:	3c 81       	ldd	r19, Y+4	; 0x04
    146a:	42 e0       	ldi	r20, 0x02	; 2
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	b9 01       	movw	r22, r18
    1470:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
		
		message += sizeof(unrecognizedMsgTypes);
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	02 96       	adiw	r24, 0x02	; 2
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&checksumErrors, message, sizeof(checksumErrors));
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	0f 96       	adiw	r24, 0x0f	; 15
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	b9 01       	movw	r22, r18
    148e:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <memcpy>
	}
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh+0xa>
    14aa:	1f 92       	push	r1
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    14b4:	81 e1       	ldi	r24, 0x11	; 17
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
    14bc:	8c 01       	movw	r16, r24
    14be:	c8 01       	movw	r24, r16
    14c0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    14c4:	1a 83       	std	Y+2, r17	; 0x02
    14c6:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	fc 01       	movw	r30, r24
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	06 96       	adiw	r24, 0x06	; 6
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 81       	ld	r18, Z
    14d8:	31 81       	ldd	r19, Z+1	; 0x01
    14da:	4b 81       	ldd	r20, Y+3	; 0x03
    14dc:	5c 81       	ldd	r21, Y+4	; 0x04
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	ba 01       	movw	r22, r20
    14e4:	f9 01       	movw	r30, r18
    14e6:	19 95       	eicall
	
	return msg;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>:
				/**
				 * Magnetic heading variables in the x y and z directions.
				 */
				
				int MagX() const { return magX; }
				void MagX(int val) { magX = val; }
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	00 d0       	rcall	.+0      	; 0x1504 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi+0x6>
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	7c 83       	std	Y+4, r23	; 0x04
    1510:	6b 83       	std	Y+3, r22	; 0x03
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	3c 81       	ldd	r19, Y+4	; 0x04
    151a:	fc 01       	movw	r30, r24
    151c:	36 83       	std	Z+6, r19	; 0x06
    151e:	25 83       	std	Z+5, r18	; 0x05
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>:
			
				int MagY() const { return magY; }
				void MagY(int val) { magY = val; }
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	00 d0       	rcall	.+0      	; 0x1534 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi+0x6>
    1534:	1f 92       	push	r1
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	7c 83       	std	Y+4, r23	; 0x04
    1540:	6b 83       	std	Y+3, r22	; 0x03
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	3c 81       	ldd	r19, Y+4	; 0x04
    154a:	fc 01       	movw	r30, r24
    154c:	30 87       	std	Z+8, r19	; 0x08
    154e:	27 83       	std	Z+7, r18	; 0x07
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>:
			
				int MagZ() const { return magZ; }
				void MagZ(int val) { magZ = val; }
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	00 d0       	rcall	.+0      	; 0x1564 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi+0x6>
    1564:	1f 92       	push	r1
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	7c 83       	std	Y+4, r23	; 0x04
    1570:	6b 83       	std	Y+3, r22	; 0x03
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	fc 01       	movw	r30, r24
    157c:	32 87       	std	Z+10, r19	; 0x0a
    157e:	21 87       	std	Z+9, r18	; 0x09
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi>:
					
					
				int Timeouts() const {return timeouts; }
				void Timeouts(int val) { timeouts = val; }
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	00 d0       	rcall	.+0      	; 0x1594 <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi+0x6>
    1594:	1f 92       	push	r1
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	7c 83       	std	Y+4, r23	; 0x04
    15a0:	6b 83       	std	Y+3, r22	; 0x03
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	2b 81       	ldd	r18, Y+3	; 0x03
    15a8:	3c 81       	ldd	r19, Y+4	; 0x04
    15aa:	fc 01       	movw	r30, r24
    15ac:	34 87       	std	Z+12, r19	; 0x0c
    15ae:	23 87       	std	Z+11, r18	; 0x0b
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi>:
				
				int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
				void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi+0x6>
    15c4:	1f 92       	push	r1
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	7c 83       	std	Y+4, r23	; 0x04
    15d0:	6b 83       	std	Y+3, r22	; 0x03
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	fc 01       	movw	r30, r24
    15dc:	36 87       	std	Z+14, r19	; 0x0e
    15de:	25 87       	std	Z+13, r18	; 0x0d
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi>:
				
				int ChecksumErrors() const {return checksumErrors; }
				void ChecksumErrors(int val) { checksumErrors = val; }
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi+0x6>
    15f4:	1f 92       	push	r1
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	7c 83       	std	Y+4, r23	; 0x04
    1600:	6b 83       	std	Y+3, r22	; 0x03
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	2b 81       	ldd	r18, Y+3	; 0x03
    1608:	3c 81       	ldd	r19, Y+4	; 0x04
    160a:	fc 01       	movw	r30, r24
    160c:	30 8b       	std	Z+16, r19	; 0x10
    160e:	27 87       	std	Z+15, r18	; 0x0f
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <_ZNK10helicopter5model11SystemModel7RawMagXEv>:
			 * X axis is left out of the FC
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			
			int RawMagX() const { return rawMagX; }
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	1f 92       	push	r1
    1624:	1f 92       	push	r1
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <_ZNK10helicopter5model11SystemModel7RawMagYEv>:
			void RawMagX(int val) { rawMagX = val; }
			
			int RawMagY() const { return rawMagY; }
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	1f 92       	push	r1
    1648:	1f 92       	push	r1
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	fc 01       	movw	r30, r24
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <_ZNK10helicopter5model11SystemModel7RawMagZEv>:
			void RawMagY(int val) { rawMagY = val; }
			
			int RawMagZ() const { return rawMagZ; }
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	1f 92       	push	r1
    166c:	1f 92       	push	r1
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	fc 01       	movw	r30, r24
    167c:	84 81       	ldd	r24, Z+4	; 0x04
    167e:	95 81       	ldd	r25, Z+5	; 0x05
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	08 95       	ret

0000168a <_ZNK10helicopter5model11SystemModel8TimeoutsEv>:
			void RawMagZ(int val) { rawMagZ = val; }
						
			int Timeouts() const {return timeouts; }
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	1f 92       	push	r1
    1690:	1f 92       	push	r1
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	fc 01       	movw	r30, r24
    16a0:	86 81       	ldd	r24, Z+6	; 0x06
    16a2:	97 81       	ldd	r25, Z+7	; 0x07
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>:
			void Timeouts(int val) { timeouts = val; }
			
			int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	1f 92       	push	r1
    16b4:	1f 92       	push	r1
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 85       	ldd	r24, Z+8	; 0x08
    16c6:	91 85       	ldd	r25, Z+9	; 0x09
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>:
			void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
			
			int ChecksumErrors() const {return checksumErrors; }
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	1f 92       	push	r1
    16d8:	1f 92       	push	r1
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	fc 01       	movw	r30, r24
    16e8:	82 85       	ldd	r24, Z+10	; 0x0a
    16ea:	93 85       	ldd	r25, Z+11	; 0x0b
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>:

using namespace helicopter::model;


SystemTelemetryMessage *SystemModel::CreateTelemetryMessage()
{
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv+0xa>
    1700:	1f 92       	push	r1
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    170a:	81 e1       	ldi	r24, 0x11	; 17
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
    1712:	8c 01       	movw	r16, r24
    1714:	c8 01       	movw	r24, r16
    1716:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    171a:	1a 83       	std	Y+2, r17	; 0x02
    171c:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagX(RawMagX());
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZNK10helicopter5model11SystemModel7RawMagXEv>
    1726:	9c 01       	movw	r18, r24
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	b9 01       	movw	r22, r18
    172e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>
	message->MagY(RawMagY());
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	0e 94 21 0b 	call	0x1642	; 0x1642 <_ZNK10helicopter5model11SystemModel7RawMagYEv>
    173a:	9c 01       	movw	r18, r24
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	b9 01       	movw	r22, r18
    1742:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>
	message->MagZ(RawMagZ());
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZNK10helicopter5model11SystemModel7RawMagZEv>
    174e:	9c 01       	movw	r18, r24
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	b9 01       	movw	r22, r18
    1756:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>
	message->ChecksumErrors(ChecksumErrors());
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    1762:	9c 01       	movw	r18, r24
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	b9 01       	movw	r22, r18
    176a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi>
	message->Timeouts(Timeouts());
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    1776:	9c 01       	movw	r18, r24
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	b9 01       	movw	r22, r18
    177e:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi>
	message->UnrecognizedMsgTypes(UnrecognizedMsgTypes());
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    178a:	9c 01       	movw	r18, r24
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	b9 01       	movw	r22, r18
    1792:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi>
	
	return message;
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	08 95       	ret

000017ac <_ZN10helicopter5tasks4Task8getDelayEv>:
				 * subclasses runTaskImpl to execute the actual task logic.
				 */
				virtual void runTask();
				
					
				int getDelay()
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	1f 92       	push	r1
    17b2:	1f 92       	push	r1
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	fc 01       	movw	r30, r24
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
				}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	1f 92       	push	r1
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	fc 01       	movw	r30, r24
    17e6:	84 81       	ldd	r24, Z+4	; 0x04
    17e8:	95 81       	ldd	r25, Z+5	; 0x05
				}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    17fa:	1f 92       	push	r1
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	7c 83       	std	Y+4, r23	; 0x04
    1806:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	2b 81       	ldd	r18, Y+3	; 0x03
    180e:	3c 81       	ldd	r19, Y+4	; 0x04
    1810:	fc 01       	movw	r30, r24
    1812:	33 83       	std	Z+3, r19	; 0x03
    1814:	22 83       	std	Z+2, r18	; 0x02
				}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	1f 92       	push	r1
    182a:	1f 92       	push	r1
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	fc 01       	movw	r30, r24
    183a:	86 81       	ldd	r24, Z+6	; 0x06
				}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	00 d0       	rcall	.+0      	; 0x184c <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	fc 01       	movw	r30, r24
    185e:	26 83       	std	Z+6, r18	; 0x06
				}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	1f 92       	push	r1
    1872:	1f 92       	push	r1
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	fc 01       	movw	r30, r24
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	9c 01       	movw	r18, r24
    1888:	21 50       	subi	r18, 0x01	; 1
    188a:	31 09       	sbc	r19, r1
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	fc 01       	movw	r30, r24
    1892:	33 83       	std	Z+3, r19	; 0x03
    1894:	22 83       	std	Z+2, r18	; 0x02
				}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for determining which tasks are ready to run.
				*/
				void start();
				
				int getNumOfTasks()
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	1f 92       	push	r1
    18a6:	1f 92       	push	r1
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	fc 01       	movw	r30, r24
    18b6:	84 89       	ldd	r24, Z+20	; 0x14
    18b8:	95 89       	ldd	r25, Z+21	; 0x15
				}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	08 95       	ret

000018c4 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	1f 92       	push	r1
    18ca:	1f 92       	push	r1
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    18f2:	80 91 70 02 	lds	r24, 0x0270
    18f6:	90 91 71 02 	lds	r25, 0x0271
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	a1 f4       	brne	.+40     	; 0x1926 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x44>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    18fe:	8a e1       	ldi	r24, 0x1A	; 26
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 00 12 	call	0x2400	; 0x2400 <_Znwj>
    1906:	7c 01       	movw	r14, r24
    1908:	08 ec       	ldi	r16, 0xC8	; 200
    190a:	10 e0       	ldi	r17, 0x00	; 0
    190c:	20 e4       	ldi	r18, 0x40	; 64
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	54 e2       	ldi	r21, 0x24	; 36
    1914:	64 ef       	ldi	r22, 0xF4	; 244
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	c7 01       	movw	r24, r14
    191a:	0e 94 9e 0c 	call	0x193c	; 0x193c <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    191e:	f0 92 71 02 	sts	0x0271, r15
    1922:	e0 92 70 02 	sts	0x0270, r14
	}

	return scheduler;
    1926:	80 91 70 02 	lds	r24, 0x0270
    192a:	90 91 71 02 	lds	r25, 0x0271
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	08 95       	ret

0000193c <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	2a 97       	sbiw	r28, 0x0a	; 10
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	4b 83       	std	Y+3, r20	; 0x03
    195a:	5c 83       	std	Y+4, r21	; 0x04
    195c:	6d 83       	std	Y+5, r22	; 0x05
    195e:	7e 83       	std	Y+6, r23	; 0x06
    1960:	38 87       	std	Y+8, r19	; 0x08
    1962:	2f 83       	std	Y+7, r18	; 0x07
    1964:	1a 87       	std	Y+10, r17	; 0x0a
    1966:	09 87       	std	Y+9, r16	; 0x09
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    1968:	8f 81       	ldd	r24, Y+7	; 0x07
    196a:	98 85       	ldd	r25, Y+8	; 0x08
    196c:	9c 01       	movw	r18, r24
    196e:	44 27       	eor	r20, r20
    1970:	37 fd       	sbrc	r19, 7
    1972:	40 95       	com	r20
    1974:	54 2f       	mov	r21, r20
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	ad 81       	ldd	r26, Y+5	; 0x05
    197c:	be 81       	ldd	r27, Y+6	; 0x06
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 38 14 	call	0x2870	; 0x2870 <__udivmodsi4>
    1986:	da 01       	movw	r26, r20
    1988:	c9 01       	movw	r24, r18
    198a:	29 85       	ldd	r18, Y+9	; 0x09
    198c:	3a 85       	ldd	r19, Y+10	; 0x0a
    198e:	44 27       	eor	r20, r20
    1990:	37 fd       	sbrc	r19, 7
    1992:	40 95       	com	r20
    1994:	54 2f       	mov	r21, r20
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 38 14 	call	0x2870	; 0x2870 <__udivmodsi4>
    199e:	da 01       	movw	r26, r20
    19a0:	c9 01       	movw	r24, r18
    19a2:	9c 01       	movw	r18, r24
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	fc 01       	movw	r30, r24
    19aa:	37 8b       	std	Z+23, r19	; 0x17
    19ac:	26 8b       	std	Z+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	fc 01       	movw	r30, r24
    19b4:	26 89       	ldd	r18, Z+22	; 0x16
    19b6:	37 89       	ldd	r19, Z+23	; 0x17
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	fc 01       	movw	r30, r24
    19be:	37 8b       	std	Z+23, r19	; 0x17
    19c0:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescaler;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	2f 81       	ldd	r18, Y+7	; 0x07
    19c8:	38 85       	ldd	r19, Y+8	; 0x08
    19ca:	fc 01       	movw	r30, r24
    19cc:	31 8f       	std	Z+25, r19	; 0x19
    19ce:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	fc 01       	movw	r30, r24
    19d6:	15 8a       	std	Z+21, r1	; 0x15
    19d8:	14 8a       	std	Z+20, r1	; 0x14
}
    19da:	2a 96       	adiw	r28, 0x0a	; 10
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    19f6:	1f 92       	push	r1
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	7c 83       	std	Y+4, r23	; 0x04
    1a02:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	fc 01       	movw	r30, r24
    1a0a:	84 89       	ldd	r24, Z+20	; 0x14
    1a0c:	95 89       	ldd	r25, Z+21	; 0x15
    1a0e:	8a 30       	cpi	r24, 0x0A	; 10
    1a10:	91 05       	cpc	r25, r1
    1a12:	04 f5       	brge	.+64     	; 0x1a54 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	84 89       	ldd	r24, Z+20	; 0x14
    1a1c:	95 89       	ldd	r25, Z+21	; 0x15
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	82 0f       	add	r24, r18
    1a28:	93 1f       	adc	r25, r19
    1a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2e:	fc 01       	movw	r30, r24
    1a30:	31 83       	std	Z+1, r19	; 0x01
    1a32:	20 83       	st	Z, r18
		numOfTasks++;
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	fc 01       	movw	r30, r24
    1a3a:	84 89       	ldd	r24, Z+20	; 0x14
    1a3c:	95 89       	ldd	r25, Z+21	; 0x15
    1a3e:	9c 01       	movw	r18, r24
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	fc 01       	movw	r30, r24
    1a4a:	35 8b       	std	Z+21, r19	; 0x15
    1a4c:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	9f ef       	ldi	r25, 0xFF	; 255
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    1a6c:	1f 92       	push	r1
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    1a76:	1a 82       	std	Y+2, r1	; 0x02
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	24 c0       	rjmp	.+72     	; 0x1ac4 <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    1a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	06 96       	adiw	r24, 0x06	; 6
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 81       	ld	r18, Z
    1a9e:	31 81       	ldd	r19, Z+1	; 0x01
    1aa0:	4b 81       	ldd	r20, Y+3	; 0x03
    1aa2:	5c 81       	ldd	r21, Y+4	; 0x04
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	84 0f       	add	r24, r20
    1aae:	95 1f       	adc	r25, r21
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	fc 01       	movw	r30, r24
    1aca:	24 89       	ldd	r18, Z+20	; 0x14
    1acc:	35 89       	ldd	r19, Z+21	; 0x15
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	82 17       	cp	r24, r18
    1ad6:	93 07       	cpc	r25, r19
    1ad8:	0c f0       	brlt	.+2      	; 0x1adc <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	44 23       	and	r20, r20
    1ade:	71 f6       	brne	.-100    	; 0x1a7c <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    1ae0:	88 e8       	ldi	r24, 0x88	; 136
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae8:	f9 01       	movw	r30, r18
    1aea:	26 89       	ldd	r18, Z+22	; 0x16
    1aec:	37 89       	ldd	r19, Z+23	; 0x17
    1aee:	fc 01       	movw	r30, r24
    1af0:	31 83       	std	Z+1, r19	; 0x01
    1af2:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    1af4:	81 e8       	ldi	r24, 0x81	; 129
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	21 e8       	ldi	r18, 0x81	; 129
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	f9 01       	movw	r30, r18
    1afe:	20 81       	ld	r18, Z
    1b00:	28 60       	ori	r18, 0x08	; 8
    1b02:	fc 01       	movw	r30, r24
    1b04:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    1b06:	8f e6       	ldi	r24, 0x6F	; 111
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	2f e6       	ldi	r18, 0x6F	; 111
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	f9 01       	movw	r30, r18
    1b10:	20 81       	ld	r18, Z
    1b12:	22 60       	ori	r18, 0x02	; 2
    1b14:	fc 01       	movw	r30, r24
    1b16:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    1b18:	78 94       	sei
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    1b38:	1c 82       	std	Y+4, r1	; 0x04
    1b3a:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    1b3c:	1a 82       	std	Y+2, r1	; 0x02
    1b3e:	19 82       	std	Y+1, r1	; 0x01
    1b40:	2a c0       	rjmp	.+84     	; 0x1b96 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
	{
		task = tasks[i];
    1b42:	2d 81       	ldd	r18, Y+5	; 0x05
    1b44:	3e 81       	ldd	r19, Y+6	; 0x06
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	82 0f       	add	r24, r18
    1b50:	93 1f       	adc	r25, r19
    1b52:	fc 01       	movw	r30, r24
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    1b64:	88 23       	and	r24, r24
    1b66:	91 f0       	breq	.+36     	; 0x1b8c <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x64>
		{
			task->setIsReadyToRun(false);
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	0e 94 23 0c 	call	0x1846	; 0x1846 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	fc 01       	movw	r30, r24
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	08 96       	adiw	r24, 0x08	; 8
    1b7e:	fc 01       	movw	r30, r24
    1b80:	20 81       	ld	r18, Z
    1b82:	31 81       	ldd	r19, Z+1	; 0x01
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	f9 01       	movw	r30, r18
    1b8a:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	24 89       	ldd	r18, Z+20	; 0x14
    1b9e:	35 89       	ldd	r19, Z+21	; 0x15
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	82 17       	cp	r24, r18
    1ba8:	93 07       	cpc	r25, r19
    1baa:	0c f0       	brlt	.+2      	; 0x1bae <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x86>
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	44 23       	and	r20, r20
    1bb0:	41 f6       	brne	.-112    	; 0x1b42 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
	}
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    1bb2:	83 e5       	ldi	r24, 0x53	; 83
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	23 e5       	ldi	r18, 0x53	; 83
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	f9 01       	movw	r30, r18
    1bbc:	20 81       	ld	r18, Z
    1bbe:	21 7f       	andi	r18, 0xF1	; 241
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	20 83       	st	Z, r18
	sleep_mode();
    1bc4:	83 e5       	ldi	r24, 0x53	; 83
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	23 e5       	ldi	r18, 0x53	; 83
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	f9 01       	movw	r30, r18
    1bce:	20 81       	ld	r18, Z
    1bd0:	21 60       	ori	r18, 0x01	; 1
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	20 83       	st	Z, r18
    1bd6:	88 95       	sleep
    1bd8:	83 e5       	ldi	r24, 0x53	; 83
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	23 e5       	ldi	r18, 0x53	; 83
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	f9 01       	movw	r30, r18
    1be2:	20 81       	ld	r18, Z
    1be4:	2e 7f       	andi	r18, 0xFE	; 254
    1be6:	fc 01       	movw	r30, r24
    1be8:	20 83       	st	Z, r18
}
    1bea:	26 96       	adiw	r28, 0x06	; 6
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	08 95       	ret

00001bfc <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	1f 92       	push	r1
    1c02:	1f 92       	push	r1
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	fc 01       	movw	r30, r24
    1c12:	80 8d       	ldd	r24, Z+24	; 0x18
    1c14:	91 8d       	ldd	r25, Z+25	; 0x19
    1c16:	80 34       	cpi	r24, 0x40	; 64
    1c18:	91 05       	cpc	r25, r1
    1c1a:	39 f1       	breq	.+78     	; 0x1c6a <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    1c1c:	81 34       	cpi	r24, 0x41	; 65
    1c1e:	91 05       	cpc	r25, r1
    1c20:	3c f4       	brge	.+14     	; 0x1c30 <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	91 05       	cpc	r25, r1
    1c26:	69 f0       	breq	.+26     	; 0x1c42 <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    1c28:	88 30       	cpi	r24, 0x08	; 8
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	a1 f0       	breq	.+40     	; 0x1c56 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    1c2e:	3b c0       	rjmp	.+118    	; 0x1ca6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    1c30:	81 15       	cp	r24, r1
    1c32:	f1 e0       	ldi	r31, 0x01	; 1
    1c34:	9f 07       	cpc	r25, r31
    1c36:	19 f1       	breq	.+70     	; 0x1c7e <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    1c38:	81 15       	cp	r24, r1
    1c3a:	24 e0       	ldi	r18, 0x04	; 4
    1c3c:	92 07       	cpc	r25, r18
    1c3e:	49 f1       	breq	.+82     	; 0x1c92 <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    1c40:	32 c0       	rjmp	.+100    	; 0x1ca6 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    1c42:	81 e8       	ldi	r24, 0x81	; 129
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	21 e8       	ldi	r18, 0x81	; 129
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	20 81       	ld	r18, Z
    1c4e:	21 60       	ori	r18, 0x01	; 1
    1c50:	fc 01       	movw	r30, r24
    1c52:	20 83       	st	Z, r18
			break;
    1c54:	31 c0       	rjmp	.+98     	; 0x1cb8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    1c56:	81 e8       	ldi	r24, 0x81	; 129
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	21 e8       	ldi	r18, 0x81	; 129
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	f9 01       	movw	r30, r18
    1c60:	20 81       	ld	r18, Z
    1c62:	22 60       	ori	r18, 0x02	; 2
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
			break;
    1c68:	27 c0       	rjmp	.+78     	; 0x1cb8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    1c6a:	81 e8       	ldi	r24, 0x81	; 129
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	21 e8       	ldi	r18, 0x81	; 129
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	f9 01       	movw	r30, r18
    1c74:	20 81       	ld	r18, Z
    1c76:	23 60       	ori	r18, 0x03	; 3
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 83       	st	Z, r18
			break;
    1c7c:	1d c0       	rjmp	.+58     	; 0x1cb8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    1c7e:	81 e8       	ldi	r24, 0x81	; 129
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	21 e8       	ldi	r18, 0x81	; 129
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	f9 01       	movw	r30, r18
    1c88:	20 81       	ld	r18, Z
    1c8a:	24 60       	ori	r18, 0x04	; 4
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	20 83       	st	Z, r18
			break;
    1c90:	13 c0       	rjmp	.+38     	; 0x1cb8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    1c92:	81 e8       	ldi	r24, 0x81	; 129
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	21 e8       	ldi	r18, 0x81	; 129
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	f9 01       	movw	r30, r18
    1c9c:	20 81       	ld	r18, Z
    1c9e:	25 60       	ori	r18, 0x05	; 5
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	20 83       	st	Z, r18
			break;
    1ca4:	09 c0       	rjmp	.+18     	; 0x1cb8 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    1ca6:	81 e8       	ldi	r24, 0x81	; 129
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	21 e8       	ldi	r18, 0x81	; 129
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	f9 01       	movw	r30, r18
    1cb0:	20 81       	ld	r18, Z
    1cb2:	21 60       	ori	r18, 0x01	; 1
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	20 83       	st	Z, r18
	}
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	00 90 5f 00 	lds	r0, 0x005F
    1cca:	0f 92       	push	r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	00 90 5b 00 	lds	r0, 0x005B
    1cd2:	0f 92       	push	r0
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <__vector_17+0x30>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <__vector_17+0x32>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	Scheduler *scheduler = Scheduler::getScheduler();
    1cf8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    1d00:	1e 82       	std	Y+6, r1	; 0x06
    1d02:	1d 82       	std	Y+5, r1	; 0x05
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1d04:	1a 82       	std	Y+2, r1	; 0x02
    1d06:	19 82       	std	Y+1, r1	; 0x01
    1d08:	33 c0       	rjmp	.+102    	; 0x1d70 <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1d12:	9c 01       	movw	r18, r24
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	fc 01       	movw	r30, r24
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN10helicopter5tasks4Task8getDelayEv>
    1d32:	21 e0       	ldi	r18, 0x01	; 1
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <__vector_17+0x78>
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	22 23       	and	r18, r18
    1d3c:	81 f0       	breq	.+32     	; 0x1d5e <__vector_17+0x9c>
		{
			//Mark the task as ready to run
			task->setIsReadyToRun(true);
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	0e 94 23 0c 	call	0x1846	; 0x1846 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN10helicopter5tasks4Task9getPeriodEv>
    1d50:	9c 01       	movw	r18, r24
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	b9 01       	movw	r22, r18
    1d58:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN10helicopter5tasks4Task8setDelayEi>
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN10helicopter5tasks4Task11reduceDelayEv>
	
	Task *task = NULL;
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    1d78:	9c 01       	movw	r18, r24
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	82 17       	cp	r24, r18
    1d82:	93 07       	cpc	r25, r19
    1d84:	0c f0       	brlt	.+2      	; 0x1d88 <__vector_17+0xc6>
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	44 23       	and	r20, r20
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <__vector_17+0xcc>
    1d8c:	be cf       	rjmp	.-132    	; 0x1d0a <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    1d8e:	26 96       	adiw	r28, 0x06	; 6
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	00 92 5b 00 	sts	0x005B, r0
    1dbc:	0f 90       	pop	r0
    1dbe:	00 92 5f 00 	sts	0x005F, r0
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	1f 92       	push	r1
    1dce:	1f 92       	push	r1
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	08 95       	ret

00001de2 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>:
			
				/**
				 * Magnetic heading variables in the x y and z directions.
				 */
				
				int MagX() const { return magX; }
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	1f 92       	push	r1
    1de8:	1f 92       	push	r1
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	fc 01       	movw	r30, r24
    1df8:	85 81       	ldd	r24, Z+5	; 0x05
    1dfa:	96 81       	ldd	r25, Z+6	; 0x06
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>:
				void MagX(int val) { magX = val; }
			
				int MagY() const { return magY; }
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	1f 92       	push	r1
    1e0c:	1f 92       	push	r1
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	87 81       	ldd	r24, Z+7	; 0x07
    1e1e:	90 85       	ldd	r25, Z+8	; 0x08
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>:
				void MagY(int val) { magY = val; }
			
				int MagZ() const { return magZ; }
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	1f 92       	push	r1
    1e30:	1f 92       	push	r1
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	fc 01       	movw	r30, r24
    1e40:	81 85       	ldd	r24, Z+9	; 0x09
    1e42:	92 85       	ldd	r25, Z+10	; 0x0a
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <_ZN10helicopter5model11SystemModel7RawMagXEi>:
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			
			int RawMagX() const { return rawMagX; }
			void RawMagX(int val) { rawMagX = val; }
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <_ZN10helicopter5model11SystemModel7RawMagXEi+0x6>
    1e54:	1f 92       	push	r1
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	7c 83       	std	Y+4, r23	; 0x04
    1e60:	6b 83       	std	Y+3, r22	; 0x03
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	31 83       	std	Z+1, r19	; 0x01
    1e6e:	20 83       	st	Z, r18
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	08 95       	ret

00001e7e <_ZN10helicopter5model11SystemModel7RawMagYEi>:
			
			int RawMagY() const { return rawMagY; }
			void RawMagY(int val) { rawMagY = val; }
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <_ZN10helicopter5model11SystemModel7RawMagYEi+0x6>
    1e84:	1f 92       	push	r1
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	7c 83       	std	Y+4, r23	; 0x04
    1e90:	6b 83       	std	Y+3, r22	; 0x03
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	2b 81       	ldd	r18, Y+3	; 0x03
    1e98:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	33 83       	std	Z+3, r19	; 0x03
    1e9e:	22 83       	std	Z+2, r18	; 0x02
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <_ZN10helicopter5model11SystemModel7RawMagZEi>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <_ZN10helicopter5model11SystemModel7RawMagZEi+0x6>
    1eb4:	1f 92       	push	r1
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	7c 83       	std	Y+4, r23	; 0x04
    1ec0:	6b 83       	std	Y+3, r22	; 0x03
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eca:	fc 01       	movw	r30, r24
    1ecc:	35 83       	std	Z+5, r19	; 0x05
    1ece:	24 83       	std	Z+4, r18	; 0x04
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	08 95       	ret

00001ede <_ZN10helicopter5model11SystemModel8TimeoutsEi>:
						
			int Timeouts() const {return timeouts; }
			void Timeouts(int val) { timeouts = val; }
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <_ZN10helicopter5model11SystemModel8TimeoutsEi+0x6>
    1ee4:	1f 92       	push	r1
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	7c 83       	std	Y+4, r23	; 0x04
    1ef0:	6b 83       	std	Y+3, r22	; 0x03
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef8:	3c 81       	ldd	r19, Y+4	; 0x04
    1efa:	fc 01       	movw	r30, r24
    1efc:	37 83       	std	Z+7, r19	; 0x07
    1efe:	26 83       	std	Z+6, r18	; 0x06
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>:
			
			int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
			void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi+0x6>
    1f14:	1f 92       	push	r1
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	7c 83       	std	Y+4, r23	; 0x04
    1f20:	6b 83       	std	Y+3, r22	; 0x03
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	31 87       	std	Z+9, r19	; 0x09
    1f2e:	20 87       	std	Z+8, r18	; 0x08
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	08 95       	ret

00001f3e <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>:
			
			int ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(int val) { checksumErrors = val; }
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi+0x6>
    1f44:	1f 92       	push	r1
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	7c 83       	std	Y+4, r23	; 0x04
    1f50:	6b 83       	std	Y+3, r22	; 0x03
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	2b 81       	ldd	r18, Y+3	; 0x03
    1f58:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	33 87       	std	Z+11, r19	; 0x0b
    1f5e:	22 87       	std	Z+10, r18	; 0x0a
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	08 95       	ret

00001f6e <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	2a 97       	sbiw	r28, 0x0a	; 10
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	7c 83       	std	Y+4, r23	; 0x04
    1f8c:	6b 83       	std	Y+3, r22	; 0x03
    1f8e:	5e 83       	std	Y+6, r21	; 0x06
    1f90:	4d 83       	std	Y+5, r20	; 0x05
    1f92:	38 87       	std	Y+8, r19	; 0x08
    1f94:	2f 83       	std	Y+7, r18	; 0x07
    1f96:	1a 87       	std	Y+10, r17	; 0x0a
    1f98:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	49 85       	ldd	r20, Y+9	; 0x09
    1fa0:	5a 85       	ldd	r21, Y+10	; 0x0a
    1fa2:	2f 81       	ldd	r18, Y+7	; 0x07
    1fa4:	38 85       	ldd	r19, Y+8	; 0x08
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN10helicopter5tasks4TaskC1Eii>
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	2a e4       	ldi	r18, 0x4A	; 74
    1fb2:	32 e0       	ldi	r19, 0x02	; 2
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	31 83       	std	Z+1, r19	; 0x01
    1fb8:	20 83       	st	Z, r18
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	30 87       	std	Z+8, r19	; 0x08
    1fc6:	27 83       	std	Z+7, r18	; 0x07
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1fce:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	32 87       	std	Z+10, r19	; 0x0a
    1fd4:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1fd6:	2a 96       	adiw	r28, 0x0a	; 10
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:

void SimTelemetryTask::runTaskImpl() 
{
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	2d 97       	sbiw	r28, 0x0d	; 13
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	9d 87       	std	Y+13, r25	; 0x0d
    2002:	8c 87       	std	Y+12, r24	; 0x0c
	
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    2004:	ce 01       	movw	r24, r28
    2006:	05 96       	adiw	r24, 0x05	; 5
    2008:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    200c:	8c 85       	ldd	r24, Y+12	; 0x0c
    200e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2010:	fc 01       	movw	r30, r24
    2012:	87 81       	ldd	r24, Z+7	; 0x07
    2014:	90 85       	ldd	r25, Z+8	; 0x08
    2016:	9e 01       	movw	r18, r28
    2018:	2b 5f       	subi	r18, 0xFB	; 251
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	b9 01       	movw	r22, r18
    201e:	0e 94 6f 05 	call	0xade	; 0xade <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	09 f0       	breq	.+2      	; 0x2030 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x44>
    202e:	54 c0       	rjmp	.+168    	; 0x20d8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xec>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    2030:	1b 86       	std	Y+11, r1	; 0x0b
    2032:	1a 86       	std	Y+10, r1	; 0x0a
	
		status = radioInterface->receive(message);
    2034:	8c 85       	ldd	r24, Y+12	; 0x0c
    2036:	9d 85       	ldd	r25, Y+13	; 0x0d
    2038:	fc 01       	movw	r30, r24
    203a:	87 81       	ldd	r24, Z+7	; 0x07
    203c:	90 85       	ldd	r25, Z+8	; 0x08
    203e:	9e 01       	movw	r18, r28
    2040:	26 5f       	subi	r18, 0xF6	; 246
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	b9 01       	movw	r22, r18
    2046:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
	
		if (status == 0 && message != NULL)
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	09 f0       	breq	.+2      	; 0x2058 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x6c>
    2056:	40 c0       	rjmp	.+128    	; 0x20d8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xec>
    2058:	8a 85       	ldd	r24, Y+10	; 0x0a
    205a:	9b 85       	ldd	r25, Y+11	; 0x0b
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	e1 f1       	breq	.+120    	; 0x20d8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xec>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    2060:	8a 85       	ldd	r24, Y+10	; 0x0a
    2062:	9b 85       	ldd	r25, Y+11	; 0x0b
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			model->RawMagX(telemMsg->MagX());
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>
    2070:	9c 01       	movw	r18, r24
    2072:	8c 85       	ldd	r24, Y+12	; 0x0c
    2074:	9d 85       	ldd	r25, Y+13	; 0x0d
    2076:	fc 01       	movw	r30, r24
    2078:	81 85       	ldd	r24, Z+9	; 0x09
    207a:	92 85       	ldd	r25, Z+10	; 0x0a
    207c:	b9 01       	movw	r22, r18
    207e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(telemMsg->MagY());
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>
    208a:	9c 01       	movw	r18, r24
    208c:	8c 85       	ldd	r24, Y+12	; 0x0c
    208e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2090:	fc 01       	movw	r30, r24
    2092:	81 85       	ldd	r24, Z+9	; 0x09
    2094:	92 85       	ldd	r25, Z+10	; 0x0a
    2096:	b9 01       	movw	r22, r18
    2098:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(telemMsg->MagZ());
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>
    20a4:	9c 01       	movw	r18, r24
    20a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    20aa:	fc 01       	movw	r30, r24
    20ac:	81 85       	ldd	r24, Z+9	; 0x09
    20ae:	92 85       	ldd	r25, Z+10	; 0x0a
    20b0:	b9 01       	movw	r22, r18
    20b2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN10helicopter5model11SystemModel7RawMagZEi>
		
			delete message;
    20b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f0       	breq	.+26     	; 0x20d8 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xec>
    20be:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	02 96       	adiw	r24, 0x02	; 2
    20ca:	fc 01       	movw	r30, r24
    20cc:	20 81       	ld	r18, Z
    20ce:	31 81       	ldd	r19, Z+1	; 0x01
    20d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d4:	f9 01       	movw	r30, r18
    20d6:	19 95       	eicall
		
		//TODO put in error messages into model.
	}
	
	//Update instrumentation fields
	switch (status)
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	8e 3f       	cpi	r24, 0xFE	; 254
    20de:	ff ef       	ldi	r31, 0xFF	; 255
    20e0:	9f 07       	cpc	r25, r31
    20e2:	19 f1       	breq	.+70     	; 0x212a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x13e>
    20e4:	8f 3f       	cpi	r24, 0xFF	; 255
    20e6:	2f ef       	ldi	r18, 0xFF	; 255
    20e8:	92 07       	cpc	r25, r18
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x10a>
    20ec:	8d 3f       	cpi	r24, 0xFD	; 253
    20ee:	ef ef       	ldi	r30, 0xFF	; 255
    20f0:	9e 07       	cpc	r25, r30
    20f2:	71 f1       	breq	.+92     	; 0x2150 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x164>
    20f4:	40 c0       	rjmp	.+128    	; 0x2176 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x18a>
    20f6:	8f 3f       	cpi	r24, 0xFF	; 255
    20f8:	ff ef       	ldi	r31, 0xFF	; 255
    20fa:	9f 07       	cpc	r25, r31
    20fc:	19 f0       	breq	.+6      	; 0x2104 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x118>
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	d9 f1       	breq	.+118    	; 0x2178 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x18c>
    2102:	39 c0       	rjmp	.+114    	; 0x2176 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x18a>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    2104:	8c 85       	ldd	r24, Y+12	; 0x0c
    2106:	9d 85       	ldd	r25, Y+13	; 0x0d
    2108:	fc 01       	movw	r30, r24
    210a:	81 85       	ldd	r24, Z+9	; 0x09
    210c:	92 85       	ldd	r25, Z+10	; 0x0a
    210e:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    2112:	9c 01       	movw	r18, r24
    2114:	2f 5f       	subi	r18, 0xFF	; 255
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	8c 85       	ldd	r24, Y+12	; 0x0c
    211a:	9d 85       	ldd	r25, Y+13	; 0x0d
    211c:	fc 01       	movw	r30, r24
    211e:	81 85       	ldd	r24, Z+9	; 0x09
    2120:	92 85       	ldd	r25, Z+10	; 0x0a
    2122:	b9 01       	movw	r22, r18
    2124:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZN10helicopter5model11SystemModel8TimeoutsEi>
			break;
    2128:	28 c0       	rjmp	.+80     	; 0x217a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x18e>
		case -2:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    212a:	8c 85       	ldd	r24, Y+12	; 0x0c
    212c:	9d 85       	ldd	r25, Y+13	; 0x0d
    212e:	fc 01       	movw	r30, r24
    2130:	81 85       	ldd	r24, Z+9	; 0x09
    2132:	92 85       	ldd	r25, Z+10	; 0x0a
    2134:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    2138:	9c 01       	movw	r18, r24
    213a:	2f 5f       	subi	r18, 0xFF	; 255
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2140:	9d 85       	ldd	r25, Y+13	; 0x0d
    2142:	fc 01       	movw	r30, r24
    2144:	81 85       	ldd	r24, Z+9	; 0x09
    2146:	92 85       	ldd	r25, Z+10	; 0x0a
    2148:	b9 01       	movw	r22, r18
    214a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>
			break;
    214e:	15 c0       	rjmp	.+42     	; 0x217a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x18e>
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    2150:	8c 85       	ldd	r24, Y+12	; 0x0c
    2152:	9d 85       	ldd	r25, Y+13	; 0x0d
    2154:	fc 01       	movw	r30, r24
    2156:	81 85       	ldd	r24, Z+9	; 0x09
    2158:	92 85       	ldd	r25, Z+10	; 0x0a
    215a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    215e:	9c 01       	movw	r18, r24
    2160:	2f 5f       	subi	r18, 0xFF	; 255
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	8c 85       	ldd	r24, Y+12	; 0x0c
    2166:	9d 85       	ldd	r25, Y+13	; 0x0d
    2168:	fc 01       	movw	r30, r24
    216a:	81 85       	ldd	r24, Z+9	; 0x09
    216c:	92 85       	ldd	r25, Z+10	; 0x0a
    216e:	b9 01       	movw	r22, r18
    2170:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>
		default:
			break;
    2174:	02 c0       	rjmp	.+4      	; 0x217a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x18e>
    2176:	01 c0       	rjmp	.+2      	; 0x217a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x18e>
	
	//Update instrumentation fields
	switch (status)
	{
		case 0:
			break;
    2178:	00 00       	nop
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
		default:
			break;
		
	}
    217a:	ce 01       	movw	r24, r28
    217c:	05 96       	adiw	r24, 0x05	; 5
    217e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    2182:	2d 96       	adiw	r28, 0x0d	; 13
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	1f 92       	push	r1
    219a:	1f 92       	push	r1
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	2a e4       	ldi	r18, 0x4A	; 74
    21aa:	32 e0       	ldi	r19, 0x02	; 2
    21ac:	fc 01       	movw	r30, r24
    21ae:	31 83       	std	Z+1, r19	; 0x01
    21b0:	20 83       	st	Z, r18
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	81 70       	andi	r24, 0x01	; 1
    21c0:	99 27       	eor	r25, r25
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	21 f0       	breq	.+8      	; 0x21ce <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev+0x3a>
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	1f 92       	push	r1
    21de:	1f 92       	push	r1
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	9a 81       	ldd	r25, Y+2	; 0x02
    21ec:	0e 94 ca 10 	call	0x2194	; 0x2194 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	08 95       	ret

00002202 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	1f 92       	push	r1
    2208:	1f 92       	push	r1
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	00 d0       	rcall	.+0      	; 0x2222 <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    2222:	00 d0       	rcall	.+0      	; 0x2224 <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	7c 83       	std	Y+4, r23	; 0x04
    222e:	6b 83       	std	Y+3, r22	; 0x03
    2230:	5e 83       	std	Y+6, r21	; 0x06
    2232:	4d 83       	std	Y+5, r20	; 0x05
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	28 e5       	ldi	r18, 0x58	; 88
    223a:	32 e0       	ldi	r19, 0x02	; 2
    223c:	fc 01       	movw	r30, r24
    223e:	31 83       	std	Z+1, r19	; 0x01
    2240:	20 83       	st	Z, r18
{
	this->delay = delay;
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	2b 81       	ldd	r18, Y+3	; 0x03
    2248:	3c 81       	ldd	r19, Y+4	; 0x04
    224a:	fc 01       	movw	r30, r24
    224c:	33 83       	std	Z+3, r19	; 0x03
    224e:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	2d 81       	ldd	r18, Y+5	; 0x05
    2256:	3e 81       	ldd	r19, Y+6	; 0x06
    2258:	fc 01       	movw	r30, r24
    225a:	35 83       	std	Z+5, r19	; 0x05
    225c:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	fc 01       	movw	r30, r24
    2264:	16 82       	std	Z+6, r1	; 0x06
}
    2266:	26 96       	adiw	r28, 0x06	; 6
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	08 95       	ret

00002278 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	1f 92       	push	r1
    227e:	1f 92       	push	r1
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    2288:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	fc 01       	movw	r30, r24
    2290:	80 81       	ld	r24, Z
    2292:	91 81       	ldd	r25, Z+1	; 0x01
    2294:	fc 01       	movw	r30, r24
    2296:	20 81       	ld	r18, Z
    2298:	31 81       	ldd	r19, Z+1	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	f9 01       	movw	r30, r18
    22a0:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    22a2:	78 94       	sei
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	2a 97       	sbiw	r28, 0x0a	; 10
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	7c 83       	std	Y+4, r23	; 0x04
    22cc:	6b 83       	std	Y+3, r22	; 0x03
    22ce:	5e 83       	std	Y+6, r21	; 0x06
    22d0:	4d 83       	std	Y+5, r20	; 0x05
    22d2:	38 87       	std	Y+8, r19	; 0x08
    22d4:	2f 83       	std	Y+7, r18	; 0x07
    22d6:	1a 87       	std	Y+10, r17	; 0x0a
    22d8:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	49 85       	ldd	r20, Y+9	; 0x09
    22e0:	5a 85       	ldd	r21, Y+10	; 0x0a
    22e2:	2f 81       	ldd	r18, Y+7	; 0x07
    22e4:	38 85       	ldd	r19, Y+8	; 0x08
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN10helicopter5tasks4TaskC1Eii>
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	26 e6       	ldi	r18, 0x66	; 102
    22f2:	32 e0       	ldi	r19, 0x02	; 2
    22f4:	fc 01       	movw	r30, r24
    22f6:	31 83       	std	Z+1, r19	; 0x01
    22f8:	20 83       	st	Z, r18
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2300:	3c 81       	ldd	r19, Y+4	; 0x04
    2302:	fc 01       	movw	r30, r24
    2304:	30 87       	std	Z+8, r19	; 0x08
    2306:	27 83       	std	Z+7, r18	; 0x07
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	9a 81       	ldd	r25, Y+2	; 0x02
    230c:	2d 81       	ldd	r18, Y+5	; 0x05
    230e:	3e 81       	ldd	r19, Y+6	; 0x06
    2310:	fc 01       	movw	r30, r24
    2312:	32 87       	std	Z+10, r19	; 0x0a
    2314:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    2316:	2a 96       	adiw	r28, 0x0a	; 10
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	08 95       	ret

0000232c <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	00 d0       	rcall	.+0      	; 0x2332 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    2332:	1f 92       	push	r1
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	9c 83       	std	Y+4, r25	; 0x04
    233a:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = model->CreateTelemetryMessage();
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	fc 01       	movw	r30, r24
    2342:	81 85       	ldd	r24, Z+9	; 0x09
    2344:	92 85       	ldd	r25, Z+10	; 0x0a
    2346:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	fc 01       	movw	r30, r24
    2354:	87 81       	ldd	r24, Z+7	; 0x07
    2356:	90 85       	ldd	r25, Z+8	; 0x08
    2358:	29 81       	ldd	r18, Y+1	; 0x01
    235a:	3a 81       	ldd	r19, Y+2	; 0x02
    235c:	b9 01       	movw	r22, r18
    235e:	0e 94 6f 05 	call	0xade	; 0xade <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f0       	breq	.+26     	; 0x2384 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	fc 01       	movw	r30, r24
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	02 96       	adiw	r24, 0x02	; 2
    2376:	fc 01       	movw	r30, r24
    2378:	20 81       	ld	r18, Z
    237a:	31 81       	ldd	r19, Z+1	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	f9 01       	movw	r30, r18
    2382:	19 95       	eicall
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	08 95       	ret

00002392 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	1f 92       	push	r1
    2398:	1f 92       	push	r1
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	26 e6       	ldi	r18, 0x66	; 102
    23a8:	32 e0       	ldi	r19, 0x02	; 2
    23aa:	fc 01       	movw	r30, r24
    23ac:	31 83       	std	Z+1, r19	; 0x01
    23ae:	20 83       	st	Z, r18
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10helicopter5tasks4TaskD1Ev>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	81 70       	andi	r24, 0x01	; 1
    23be:	99 27       	eor	r25, r25
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	21 f0       	breq	.+8      	; 0x23cc <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev+0x3a>
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	1f 92       	push	r1
    23dc:	1f 92       	push	r1
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZdlPv>
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	08 95       	ret

00002400 <_Znwj>:
 *  Author: HP User
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	1f 92       	push	r1
    2406:	1f 92       	push	r1
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	0e 94 6e 14 	call	0x28dc	; 0x28dc <malloc>
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

00002422 <_ZdlPv>:

void operator delete(void * ptr)
{
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	1f 92       	push	r1
    2428:	1f 92       	push	r1
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	21 f0       	breq	.+8      	; 0x2442 <_ZdlPv+0x20>
	{
		free(ptr);
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <free>
	}
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	08 95       	ret

0000244c <_Znaj>:

void * operator new[](size_t size)
{
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	1f 92       	push	r1
    2452:	1f 92       	push	r1
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	0e 94 6e 14 	call	0x28dc	; 0x28dc <malloc>
}
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <_ZdaPv>:

void operator delete[](void * ptr)
{
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	1f 92       	push	r1
    2474:	1f 92       	push	r1
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	21 f0       	breq	.+8      	; 0x248e <_ZdaPv+0x20>
	{
		free(ptr);
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <free>
	}
	
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    24a2:	1f 92       	push	r1
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
    24b4:	1a 82       	std	Y+2, r1	; 0x02
    24b6:	19 82       	std	Y+1, r1	; 0x01
	
	if (timeoutMilliseconds > 1000) 
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	fc 01       	movw	r30, r24
    24be:	86 81       	ldd	r24, Z+6	; 0x06
    24c0:	97 81       	ldd	r25, Z+7	; 0x07
    24c2:	89 3e       	cpi	r24, 0xE9	; 233
    24c4:	f3 e0       	ldi	r31, 0x03	; 3
    24c6:	9f 07       	cpc	r25, r31
    24c8:	2c f0       	brlt	.+10     	; 0x24d4 <_ZN10helicopter4util5Timer10startTimerEv+0x3c>
	{
		frequency = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	0d c0       	rjmp	.+26     	; 0x24ee <_ZN10helicopter4util5Timer10startTimerEv+0x56>
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	fc 01       	movw	r30, r24
    24da:	26 81       	ldd	r18, Z+6	; 0x06
    24dc:	37 81       	ldd	r19, Z+7	; 0x07
    24de:	88 ee       	ldi	r24, 0xE8	; 232
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	b9 01       	movw	r22, r18
    24e4:	0e 94 24 14 	call	0x2848	; 0x2848 <__divmodhi4>
    24e8:	9b 01       	movw	r18, r22
    24ea:	3a 83       	std	Y+2, r19	; 0x02
    24ec:	29 83       	std	Y+1, r18	; 0x01
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    24ee:	08 e9       	ldi	r16, 0x98	; 152
    24f0:	10 e0       	ldi	r17, 0x00	; 0
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	fc 01       	movw	r30, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	a2 81       	ldd	r26, Z+2	; 0x02
    24fe:	b3 81       	ldd	r27, Z+3	; 0x03
    2500:	2b 81       	ldd	r18, Y+3	; 0x03
    2502:	3c 81       	ldd	r19, Y+4	; 0x04
    2504:	f9 01       	movw	r30, r18
    2506:	24 81       	ldd	r18, Z+4	; 0x04
    2508:	35 81       	ldd	r19, Z+5	; 0x05
    250a:	44 27       	eor	r20, r20
    250c:	37 fd       	sbrc	r19, 7
    250e:	40 95       	com	r20
    2510:	54 2f       	mov	r21, r20
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 38 14 	call	0x2870	; 0x2870 <__udivmodsi4>
    251a:	da 01       	movw	r26, r20
    251c:	c9 01       	movw	r24, r18
    251e:	29 81       	ldd	r18, Y+1	; 0x01
    2520:	3a 81       	ldd	r19, Y+2	; 0x02
    2522:	44 27       	eor	r20, r20
    2524:	37 fd       	sbrc	r19, 7
    2526:	40 95       	com	r20
    2528:	54 2f       	mov	r21, r20
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 38 14 	call	0x2870	; 0x2870 <__udivmodsi4>
    2532:	da 01       	movw	r26, r20
    2534:	c9 01       	movw	r24, r18
    2536:	f8 01       	movw	r30, r16
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    253c:	81 e9       	ldi	r24, 0x91	; 145
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	21 e9       	ldi	r18, 0x91	; 145
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	f9 01       	movw	r30, r18
    2546:	20 81       	ld	r18, Z
    2548:	28 60       	ori	r18, 0x08	; 8
    254a:	fc 01       	movw	r30, r24
    254c:	20 83       	st	Z, r18
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	fc 01       	movw	r30, r24
    2554:	84 81       	ldd	r24, Z+4	; 0x04
    2556:	95 81       	ldd	r25, Z+5	; 0x05
    2558:	80 34       	cpi	r24, 0x40	; 64
    255a:	91 05       	cpc	r25, r1
    255c:	39 f1       	breq	.+78     	; 0x25ac <_ZN10helicopter4util5Timer10startTimerEv+0x114>
    255e:	81 34       	cpi	r24, 0x41	; 65
    2560:	91 05       	cpc	r25, r1
    2562:	3c f4       	brge	.+14     	; 0x2572 <_ZN10helicopter4util5Timer10startTimerEv+0xda>
    2564:	81 30       	cpi	r24, 0x01	; 1
    2566:	91 05       	cpc	r25, r1
    2568:	69 f0       	breq	.+26     	; 0x2584 <_ZN10helicopter4util5Timer10startTimerEv+0xec>
    256a:	88 30       	cpi	r24, 0x08	; 8
    256c:	91 05       	cpc	r25, r1
    256e:	a1 f0       	breq	.+40     	; 0x2598 <_ZN10helicopter4util5Timer10startTimerEv+0x100>
    2570:	3b c0       	rjmp	.+118    	; 0x25e8 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
    2572:	81 15       	cp	r24, r1
    2574:	f1 e0       	ldi	r31, 0x01	; 1
    2576:	9f 07       	cpc	r25, r31
    2578:	19 f1       	breq	.+70     	; 0x25c0 <_ZN10helicopter4util5Timer10startTimerEv+0x128>
    257a:	81 15       	cp	r24, r1
    257c:	24 e0       	ldi	r18, 0x04	; 4
    257e:	92 07       	cpc	r25, r18
    2580:	49 f1       	breq	.+82     	; 0x25d4 <_ZN10helicopter4util5Timer10startTimerEv+0x13c>
    2582:	32 c0       	rjmp	.+100    	; 0x25e8 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    2584:	81 e9       	ldi	r24, 0x91	; 145
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	21 e9       	ldi	r18, 0x91	; 145
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	f9 01       	movw	r30, r18
    258e:	20 81       	ld	r18, Z
    2590:	21 60       	ori	r18, 0x01	; 1
    2592:	fc 01       	movw	r30, r24
    2594:	20 83       	st	Z, r18
		break;
    2596:	31 c0       	rjmp	.+98     	; 0x25fa <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    2598:	81 e9       	ldi	r24, 0x91	; 145
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	21 e9       	ldi	r18, 0x91	; 145
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	f9 01       	movw	r30, r18
    25a2:	20 81       	ld	r18, Z
    25a4:	22 60       	ori	r18, 0x02	; 2
    25a6:	fc 01       	movw	r30, r24
    25a8:	20 83       	st	Z, r18
		break;
    25aa:	27 c0       	rjmp	.+78     	; 0x25fa <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    25ac:	81 e9       	ldi	r24, 0x91	; 145
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	21 e9       	ldi	r18, 0x91	; 145
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	f9 01       	movw	r30, r18
    25b6:	20 81       	ld	r18, Z
    25b8:	23 60       	ori	r18, 0x03	; 3
    25ba:	fc 01       	movw	r30, r24
    25bc:	20 83       	st	Z, r18
		break;
    25be:	1d c0       	rjmp	.+58     	; 0x25fa <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    25c0:	81 e9       	ldi	r24, 0x91	; 145
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	21 e9       	ldi	r18, 0x91	; 145
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	f9 01       	movw	r30, r18
    25ca:	20 81       	ld	r18, Z
    25cc:	24 60       	ori	r18, 0x04	; 4
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
		break;
    25d2:	13 c0       	rjmp	.+38     	; 0x25fa <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    25d4:	81 e9       	ldi	r24, 0x91	; 145
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	21 e9       	ldi	r18, 0x91	; 145
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	f9 01       	movw	r30, r18
    25de:	20 81       	ld	r18, Z
    25e0:	25 60       	ori	r18, 0x05	; 5
    25e2:	fc 01       	movw	r30, r24
    25e4:	20 83       	st	Z, r18
		break;
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		default:
		TCCR3B |= NoPrescaling;
    25e8:	81 e9       	ldi	r24, 0x91	; 145
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	21 e9       	ldi	r18, 0x91	; 145
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	f9 01       	movw	r30, r18
    25f2:	20 81       	ld	r18, Z
    25f4:	21 60       	ori	r18, 0x01	; 1
    25f6:	fc 01       	movw	r30, r24
    25f8:	20 83       	st	Z, r18
	}
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

0000260c <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	1f 92       	push	r1
    2612:	1f 92       	push	r1
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    261c:	88 e3       	ldi	r24, 0x38	; 56
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	fc 01       	movw	r30, r24
    2622:	80 81       	ld	r24, Z
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	82 70       	andi	r24, 0x02	; 2
    262a:	99 27       	eor	r25, r25
    262c:	21 e0       	ldi	r18, 0x01	; 1
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	09 f4       	brne	.+2      	; 0x2634 <_ZN10helicopter4util5Timer11hasTimedoutEv+0x28>
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	82 2f       	mov	r24, r18
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	1f 92       	push	r1
    2646:	1f 92       	push	r1
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    2650:	81 e9       	ldi	r24, 0x91	; 145
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	fc 01       	movw	r30, r24
    2656:	10 82       	st	Z, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    2658:	84 e9       	ldi	r24, 0x94	; 148
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	fc 01       	movw	r30, r24
    265e:	11 82       	std	Z+1, r1	; 0x01
    2660:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    2662:	88 e3       	ldi	r24, 0x38	; 56
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	28 e3       	ldi	r18, 0x38	; 56
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	f9 01       	movw	r30, r18
    266c:	20 81       	ld	r18, Z
    266e:	22 60       	ori	r18, 0x02	; 2
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <__fixunssfsi>:
    267e:	ac d0       	rcall	.+344    	; 0x27d8 <__fp_splitA>
    2680:	88 f0       	brcs	.+34     	; 0x26a4 <__fixunssfsi+0x26>
    2682:	9f 57       	subi	r25, 0x7F	; 127
    2684:	90 f0       	brcs	.+36     	; 0x26aa <__fixunssfsi+0x2c>
    2686:	b9 2f       	mov	r27, r25
    2688:	99 27       	eor	r25, r25
    268a:	b7 51       	subi	r27, 0x17	; 23
    268c:	a0 f0       	brcs	.+40     	; 0x26b6 <__fixunssfsi+0x38>
    268e:	d1 f0       	breq	.+52     	; 0x26c4 <__fixunssfsi+0x46>
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	1a f0       	brmi	.+6      	; 0x26a0 <__fixunssfsi+0x22>
    269a:	ba 95       	dec	r27
    269c:	c9 f7       	brne	.-14     	; 0x2690 <__fixunssfsi+0x12>
    269e:	12 c0       	rjmp	.+36     	; 0x26c4 <__fixunssfsi+0x46>
    26a0:	b1 30       	cpi	r27, 0x01	; 1
    26a2:	81 f0       	breq	.+32     	; 0x26c4 <__fixunssfsi+0x46>
    26a4:	ca d0       	rcall	.+404    	; 0x283a <__fp_zero>
    26a6:	b1 e0       	ldi	r27, 0x01	; 1
    26a8:	08 95       	ret
    26aa:	c7 c0       	rjmp	.+398    	; 0x283a <__fp_zero>
    26ac:	67 2f       	mov	r22, r23
    26ae:	78 2f       	mov	r23, r24
    26b0:	88 27       	eor	r24, r24
    26b2:	b8 5f       	subi	r27, 0xF8	; 248
    26b4:	39 f0       	breq	.+14     	; 0x26c4 <__fixunssfsi+0x46>
    26b6:	b9 3f       	cpi	r27, 0xF9	; 249
    26b8:	cc f3       	brlt	.-14     	; 0x26ac <__fixunssfsi+0x2e>
    26ba:	86 95       	lsr	r24
    26bc:	77 95       	ror	r23
    26be:	67 95       	ror	r22
    26c0:	b3 95       	inc	r27
    26c2:	d9 f7       	brne	.-10     	; 0x26ba <__fixunssfsi+0x3c>
    26c4:	3e f4       	brtc	.+14     	; 0x26d4 <__fixunssfsi+0x56>
    26c6:	90 95       	com	r25
    26c8:	80 95       	com	r24
    26ca:	70 95       	com	r23
    26cc:	61 95       	neg	r22
    26ce:	7f 4f       	sbci	r23, 0xFF	; 255
    26d0:	8f 4f       	sbci	r24, 0xFF	; 255
    26d2:	9f 4f       	sbci	r25, 0xFF	; 255
    26d4:	08 95       	ret

000026d6 <__floatunsisf>:
    26d6:	e8 94       	clt
    26d8:	09 c0       	rjmp	.+18     	; 0x26ec <__floatsisf+0x12>

000026da <__floatsisf>:
    26da:	97 fb       	bst	r25, 7
    26dc:	3e f4       	brtc	.+14     	; 0x26ec <__floatsisf+0x12>
    26de:	90 95       	com	r25
    26e0:	80 95       	com	r24
    26e2:	70 95       	com	r23
    26e4:	61 95       	neg	r22
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ea:	9f 4f       	sbci	r25, 0xFF	; 255
    26ec:	99 23       	and	r25, r25
    26ee:	a9 f0       	breq	.+42     	; 0x271a <__floatsisf+0x40>
    26f0:	f9 2f       	mov	r31, r25
    26f2:	96 e9       	ldi	r25, 0x96	; 150
    26f4:	bb 27       	eor	r27, r27
    26f6:	93 95       	inc	r25
    26f8:	f6 95       	lsr	r31
    26fa:	87 95       	ror	r24
    26fc:	77 95       	ror	r23
    26fe:	67 95       	ror	r22
    2700:	b7 95       	ror	r27
    2702:	f1 11       	cpse	r31, r1
    2704:	f8 cf       	rjmp	.-16     	; 0x26f6 <__floatsisf+0x1c>
    2706:	fa f4       	brpl	.+62     	; 0x2746 <__floatsisf+0x6c>
    2708:	bb 0f       	add	r27, r27
    270a:	11 f4       	brne	.+4      	; 0x2710 <__floatsisf+0x36>
    270c:	60 ff       	sbrs	r22, 0
    270e:	1b c0       	rjmp	.+54     	; 0x2746 <__floatsisf+0x6c>
    2710:	6f 5f       	subi	r22, 0xFF	; 255
    2712:	7f 4f       	sbci	r23, 0xFF	; 255
    2714:	8f 4f       	sbci	r24, 0xFF	; 255
    2716:	9f 4f       	sbci	r25, 0xFF	; 255
    2718:	16 c0       	rjmp	.+44     	; 0x2746 <__floatsisf+0x6c>
    271a:	88 23       	and	r24, r24
    271c:	11 f0       	breq	.+4      	; 0x2722 <__floatsisf+0x48>
    271e:	96 e9       	ldi	r25, 0x96	; 150
    2720:	11 c0       	rjmp	.+34     	; 0x2744 <__floatsisf+0x6a>
    2722:	77 23       	and	r23, r23
    2724:	21 f0       	breq	.+8      	; 0x272e <__floatsisf+0x54>
    2726:	9e e8       	ldi	r25, 0x8E	; 142
    2728:	87 2f       	mov	r24, r23
    272a:	76 2f       	mov	r23, r22
    272c:	05 c0       	rjmp	.+10     	; 0x2738 <__floatsisf+0x5e>
    272e:	66 23       	and	r22, r22
    2730:	71 f0       	breq	.+28     	; 0x274e <__floatsisf+0x74>
    2732:	96 e8       	ldi	r25, 0x86	; 134
    2734:	86 2f       	mov	r24, r22
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	2a f0       	brmi	.+10     	; 0x2746 <__floatsisf+0x6c>
    273c:	9a 95       	dec	r25
    273e:	66 0f       	add	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	88 1f       	adc	r24, r24
    2744:	da f7       	brpl	.-10     	; 0x273c <__floatsisf+0x62>
    2746:	88 0f       	add	r24, r24
    2748:	96 95       	lsr	r25
    274a:	87 95       	ror	r24
    274c:	97 f9       	bld	r25, 7
    274e:	08 95       	ret

00002750 <floor>:
    2750:	5d d0       	rcall	.+186    	; 0x280c <__fp_trunc>
    2752:	80 f0       	brcs	.+32     	; 0x2774 <floor+0x24>
    2754:	9f 37       	cpi	r25, 0x7F	; 127
    2756:	40 f4       	brcc	.+16     	; 0x2768 <floor+0x18>
    2758:	91 11       	cpse	r25, r1
    275a:	0e f0       	brts	.+2      	; 0x275e <floor+0xe>
    275c:	6f c0       	rjmp	.+222    	; 0x283c <__fp_szero>
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	80 e8       	ldi	r24, 0x80	; 128
    2764:	9f eb       	ldi	r25, 0xBF	; 191
    2766:	08 95       	ret
    2768:	26 f4       	brtc	.+8      	; 0x2772 <floor+0x22>
    276a:	1b 16       	cp	r1, r27
    276c:	61 1d       	adc	r22, r1
    276e:	71 1d       	adc	r23, r1
    2770:	81 1d       	adc	r24, r1
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <__fp_mintl>
    2774:	1b c0       	rjmp	.+54     	; 0x27ac <__fp_mpack>

00002776 <__fp_mintl>:
    2776:	88 23       	and	r24, r24
    2778:	71 f4       	brne	.+28     	; 0x2796 <__fp_mintl+0x20>
    277a:	77 23       	and	r23, r23
    277c:	21 f0       	breq	.+8      	; 0x2786 <__fp_mintl+0x10>
    277e:	98 50       	subi	r25, 0x08	; 8
    2780:	87 2b       	or	r24, r23
    2782:	76 2f       	mov	r23, r22
    2784:	07 c0       	rjmp	.+14     	; 0x2794 <__fp_mintl+0x1e>
    2786:	66 23       	and	r22, r22
    2788:	11 f4       	brne	.+4      	; 0x278e <__fp_mintl+0x18>
    278a:	99 27       	eor	r25, r25
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <__fp_mintl+0x32>
    278e:	90 51       	subi	r25, 0x10	; 16
    2790:	86 2b       	or	r24, r22
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	2a f0       	brmi	.+10     	; 0x27a2 <__fp_mintl+0x2c>
    2798:	9a 95       	dec	r25
    279a:	66 0f       	add	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	88 1f       	adc	r24, r24
    27a0:	da f7       	brpl	.-10     	; 0x2798 <__fp_mintl+0x22>
    27a2:	88 0f       	add	r24, r24
    27a4:	96 95       	lsr	r25
    27a6:	87 95       	ror	r24
    27a8:	97 f9       	bld	r25, 7
    27aa:	08 95       	ret

000027ac <__fp_mpack>:
    27ac:	9f 3f       	cpi	r25, 0xFF	; 255
    27ae:	31 f0       	breq	.+12     	; 0x27bc <__fp_mpack_finite+0xc>

000027b0 <__fp_mpack_finite>:
    27b0:	91 50       	subi	r25, 0x01	; 1
    27b2:	20 f4       	brcc	.+8      	; 0x27bc <__fp_mpack_finite+0xc>
    27b4:	87 95       	ror	r24
    27b6:	77 95       	ror	r23
    27b8:	67 95       	ror	r22
    27ba:	b7 95       	ror	r27
    27bc:	88 0f       	add	r24, r24
    27be:	91 1d       	adc	r25, r1
    27c0:	96 95       	lsr	r25
    27c2:	87 95       	ror	r24
    27c4:	97 f9       	bld	r25, 7
    27c6:	08 95       	ret

000027c8 <__fp_split3>:
    27c8:	57 fd       	sbrc	r21, 7
    27ca:	90 58       	subi	r25, 0x80	; 128
    27cc:	44 0f       	add	r20, r20
    27ce:	55 1f       	adc	r21, r21
    27d0:	59 f0       	breq	.+22     	; 0x27e8 <__fp_splitA+0x10>
    27d2:	5f 3f       	cpi	r21, 0xFF	; 255
    27d4:	71 f0       	breq	.+28     	; 0x27f2 <__fp_splitA+0x1a>
    27d6:	47 95       	ror	r20

000027d8 <__fp_splitA>:
    27d8:	88 0f       	add	r24, r24
    27da:	97 fb       	bst	r25, 7
    27dc:	99 1f       	adc	r25, r25
    27de:	61 f0       	breq	.+24     	; 0x27f8 <__fp_splitA+0x20>
    27e0:	9f 3f       	cpi	r25, 0xFF	; 255
    27e2:	79 f0       	breq	.+30     	; 0x2802 <__fp_splitA+0x2a>
    27e4:	87 95       	ror	r24
    27e6:	08 95       	ret
    27e8:	12 16       	cp	r1, r18
    27ea:	13 06       	cpc	r1, r19
    27ec:	14 06       	cpc	r1, r20
    27ee:	55 1f       	adc	r21, r21
    27f0:	f2 cf       	rjmp	.-28     	; 0x27d6 <__fp_split3+0xe>
    27f2:	46 95       	lsr	r20
    27f4:	f1 df       	rcall	.-30     	; 0x27d8 <__fp_splitA>
    27f6:	08 c0       	rjmp	.+16     	; 0x2808 <__fp_splitA+0x30>
    27f8:	16 16       	cp	r1, r22
    27fa:	17 06       	cpc	r1, r23
    27fc:	18 06       	cpc	r1, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	f1 cf       	rjmp	.-30     	; 0x27e4 <__fp_splitA+0xc>
    2802:	86 95       	lsr	r24
    2804:	71 05       	cpc	r23, r1
    2806:	61 05       	cpc	r22, r1
    2808:	08 94       	sec
    280a:	08 95       	ret

0000280c <__fp_trunc>:
    280c:	e5 df       	rcall	.-54     	; 0x27d8 <__fp_splitA>
    280e:	a0 f0       	brcs	.+40     	; 0x2838 <__fp_trunc+0x2c>
    2810:	be e7       	ldi	r27, 0x7E	; 126
    2812:	b9 17       	cp	r27, r25
    2814:	88 f4       	brcc	.+34     	; 0x2838 <__fp_trunc+0x2c>
    2816:	bb 27       	eor	r27, r27
    2818:	9f 38       	cpi	r25, 0x8F	; 143
    281a:	60 f4       	brcc	.+24     	; 0x2834 <__fp_trunc+0x28>
    281c:	16 16       	cp	r1, r22
    281e:	b1 1d       	adc	r27, r1
    2820:	67 2f       	mov	r22, r23
    2822:	78 2f       	mov	r23, r24
    2824:	88 27       	eor	r24, r24
    2826:	98 5f       	subi	r25, 0xF8	; 248
    2828:	f7 cf       	rjmp	.-18     	; 0x2818 <__fp_trunc+0xc>
    282a:	86 95       	lsr	r24
    282c:	77 95       	ror	r23
    282e:	67 95       	ror	r22
    2830:	b1 1d       	adc	r27, r1
    2832:	93 95       	inc	r25
    2834:	96 39       	cpi	r25, 0x96	; 150
    2836:	c8 f3       	brcs	.-14     	; 0x282a <__fp_trunc+0x1e>
    2838:	08 95       	ret

0000283a <__fp_zero>:
    283a:	e8 94       	clt

0000283c <__fp_szero>:
    283c:	bb 27       	eor	r27, r27
    283e:	66 27       	eor	r22, r22
    2840:	77 27       	eor	r23, r23
    2842:	cb 01       	movw	r24, r22
    2844:	97 f9       	bld	r25, 7
    2846:	08 95       	ret

00002848 <__divmodhi4>:
    2848:	97 fb       	bst	r25, 7
    284a:	07 2e       	mov	r0, r23
    284c:	16 f4       	brtc	.+4      	; 0x2852 <__divmodhi4+0xa>
    284e:	00 94       	com	r0
    2850:	07 d0       	rcall	.+14     	; 0x2860 <__divmodhi4_neg1>
    2852:	77 fd       	sbrc	r23, 7
    2854:	09 d0       	rcall	.+18     	; 0x2868 <__divmodhi4_neg2>
    2856:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodhi4>
    285a:	07 fc       	sbrc	r0, 7
    285c:	05 d0       	rcall	.+10     	; 0x2868 <__divmodhi4_neg2>
    285e:	3e f4       	brtc	.+14     	; 0x286e <__divmodhi4_exit>

00002860 <__divmodhi4_neg1>:
    2860:	90 95       	com	r25
    2862:	81 95       	neg	r24
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	08 95       	ret

00002868 <__divmodhi4_neg2>:
    2868:	70 95       	com	r23
    286a:	61 95       	neg	r22
    286c:	7f 4f       	sbci	r23, 0xFF	; 255

0000286e <__divmodhi4_exit>:
    286e:	08 95       	ret

00002870 <__udivmodsi4>:
    2870:	a1 e2       	ldi	r26, 0x21	; 33
    2872:	1a 2e       	mov	r1, r26
    2874:	aa 1b       	sub	r26, r26
    2876:	bb 1b       	sub	r27, r27
    2878:	fd 01       	movw	r30, r26
    287a:	0d c0       	rjmp	.+26     	; 0x2896 <__udivmodsi4_ep>

0000287c <__udivmodsi4_loop>:
    287c:	aa 1f       	adc	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	ee 1f       	adc	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	a2 17       	cp	r26, r18
    2886:	b3 07       	cpc	r27, r19
    2888:	e4 07       	cpc	r30, r20
    288a:	f5 07       	cpc	r31, r21
    288c:	20 f0       	brcs	.+8      	; 0x2896 <__udivmodsi4_ep>
    288e:	a2 1b       	sub	r26, r18
    2890:	b3 0b       	sbc	r27, r19
    2892:	e4 0b       	sbc	r30, r20
    2894:	f5 0b       	sbc	r31, r21

00002896 <__udivmodsi4_ep>:
    2896:	66 1f       	adc	r22, r22
    2898:	77 1f       	adc	r23, r23
    289a:	88 1f       	adc	r24, r24
    289c:	99 1f       	adc	r25, r25
    289e:	1a 94       	dec	r1
    28a0:	69 f7       	brne	.-38     	; 0x287c <__udivmodsi4_loop>
    28a2:	60 95       	com	r22
    28a4:	70 95       	com	r23
    28a6:	80 95       	com	r24
    28a8:	90 95       	com	r25
    28aa:	9b 01       	movw	r18, r22
    28ac:	ac 01       	movw	r20, r24
    28ae:	bd 01       	movw	r22, r26
    28b0:	cf 01       	movw	r24, r30
    28b2:	08 95       	ret

000028b4 <__udivmodhi4>:
    28b4:	aa 1b       	sub	r26, r26
    28b6:	bb 1b       	sub	r27, r27
    28b8:	51 e1       	ldi	r21, 0x11	; 17
    28ba:	07 c0       	rjmp	.+14     	; 0x28ca <__udivmodhi4_ep>

000028bc <__udivmodhi4_loop>:
    28bc:	aa 1f       	adc	r26, r26
    28be:	bb 1f       	adc	r27, r27
    28c0:	a6 17       	cp	r26, r22
    28c2:	b7 07       	cpc	r27, r23
    28c4:	10 f0       	brcs	.+4      	; 0x28ca <__udivmodhi4_ep>
    28c6:	a6 1b       	sub	r26, r22
    28c8:	b7 0b       	sbc	r27, r23

000028ca <__udivmodhi4_ep>:
    28ca:	88 1f       	adc	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	5a 95       	dec	r21
    28d0:	a9 f7       	brne	.-22     	; 0x28bc <__udivmodhi4_loop>
    28d2:	80 95       	com	r24
    28d4:	90 95       	com	r25
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	08 95       	ret

000028dc <malloc>:
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	82 30       	cpi	r24, 0x02	; 2
    28e6:	91 05       	cpc	r25, r1
    28e8:	10 f4       	brcc	.+4      	; 0x28ee <malloc+0x12>
    28ea:	82 e0       	ldi	r24, 0x02	; 2
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	e0 91 74 02 	lds	r30, 0x0274
    28f2:	f0 91 75 02 	lds	r31, 0x0275
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	c0 e0       	ldi	r28, 0x00	; 0
    28fc:	d0 e0       	ldi	r29, 0x00	; 0
    28fe:	23 c0       	rjmp	.+70     	; 0x2946 <malloc+0x6a>
    2900:	40 81       	ld	r20, Z
    2902:	51 81       	ldd	r21, Z+1	; 0x01
    2904:	48 17       	cp	r20, r24
    2906:	59 07       	cpc	r21, r25
    2908:	a8 f0       	brcs	.+42     	; 0x2934 <malloc+0x58>
    290a:	48 17       	cp	r20, r24
    290c:	59 07       	cpc	r21, r25
    290e:	61 f4       	brne	.+24     	; 0x2928 <malloc+0x4c>
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 97       	sbiw	r28, 0x00	; 0
    2916:	19 f0       	breq	.+6      	; 0x291e <malloc+0x42>
    2918:	9b 83       	std	Y+3, r25	; 0x03
    291a:	8a 83       	std	Y+2, r24	; 0x02
    291c:	2e c0       	rjmp	.+92     	; 0x297a <malloc+0x9e>
    291e:	90 93 75 02 	sts	0x0275, r25
    2922:	80 93 74 02 	sts	0x0274, r24
    2926:	29 c0       	rjmp	.+82     	; 0x297a <malloc+0x9e>
    2928:	21 15       	cp	r18, r1
    292a:	31 05       	cpc	r19, r1
    292c:	29 f0       	breq	.+10     	; 0x2938 <malloc+0x5c>
    292e:	42 17       	cp	r20, r18
    2930:	53 07       	cpc	r21, r19
    2932:	10 f0       	brcs	.+4      	; 0x2938 <malloc+0x5c>
    2934:	a9 01       	movw	r20, r18
    2936:	02 c0       	rjmp	.+4      	; 0x293c <malloc+0x60>
    2938:	be 01       	movw	r22, r28
    293a:	df 01       	movw	r26, r30
    293c:	02 81       	ldd	r16, Z+2	; 0x02
    293e:	13 81       	ldd	r17, Z+3	; 0x03
    2940:	ef 01       	movw	r28, r30
    2942:	9a 01       	movw	r18, r20
    2944:	f8 01       	movw	r30, r16
    2946:	30 97       	sbiw	r30, 0x00	; 0
    2948:	d9 f6       	brne	.-74     	; 0x2900 <malloc+0x24>
    294a:	21 15       	cp	r18, r1
    294c:	31 05       	cpc	r19, r1
    294e:	09 f1       	breq	.+66     	; 0x2992 <malloc+0xb6>
    2950:	28 1b       	sub	r18, r24
    2952:	39 0b       	sbc	r19, r25
    2954:	24 30       	cpi	r18, 0x04	; 4
    2956:	31 05       	cpc	r19, r1
    2958:	90 f4       	brcc	.+36     	; 0x297e <malloc+0xa2>
    295a:	12 96       	adiw	r26, 0x02	; 2
    295c:	8d 91       	ld	r24, X+
    295e:	9c 91       	ld	r25, X
    2960:	13 97       	sbiw	r26, 0x03	; 3
    2962:	61 15       	cp	r22, r1
    2964:	71 05       	cpc	r23, r1
    2966:	21 f0       	breq	.+8      	; 0x2970 <malloc+0x94>
    2968:	fb 01       	movw	r30, r22
    296a:	93 83       	std	Z+3, r25	; 0x03
    296c:	82 83       	std	Z+2, r24	; 0x02
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <malloc+0x9c>
    2970:	90 93 75 02 	sts	0x0275, r25
    2974:	80 93 74 02 	sts	0x0274, r24
    2978:	fd 01       	movw	r30, r26
    297a:	32 96       	adiw	r30, 0x02	; 2
    297c:	44 c0       	rjmp	.+136    	; 0x2a06 <malloc+0x12a>
    297e:	fd 01       	movw	r30, r26
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
    2984:	81 93       	st	Z+, r24
    2986:	91 93       	st	Z+, r25
    2988:	22 50       	subi	r18, 0x02	; 2
    298a:	31 09       	sbc	r19, r1
    298c:	2d 93       	st	X+, r18
    298e:	3c 93       	st	X, r19
    2990:	3a c0       	rjmp	.+116    	; 0x2a06 <malloc+0x12a>
    2992:	20 91 72 02 	lds	r18, 0x0272
    2996:	30 91 73 02 	lds	r19, 0x0273
    299a:	23 2b       	or	r18, r19
    299c:	41 f4       	brne	.+16     	; 0x29ae <malloc+0xd2>
    299e:	20 91 02 02 	lds	r18, 0x0202
    29a2:	30 91 03 02 	lds	r19, 0x0203
    29a6:	30 93 73 02 	sts	0x0273, r19
    29aa:	20 93 72 02 	sts	0x0272, r18
    29ae:	20 91 00 02 	lds	r18, 0x0200
    29b2:	30 91 01 02 	lds	r19, 0x0201
    29b6:	21 15       	cp	r18, r1
    29b8:	31 05       	cpc	r19, r1
    29ba:	41 f4       	brne	.+16     	; 0x29cc <malloc+0xf0>
    29bc:	2d b7       	in	r18, 0x3d	; 61
    29be:	3e b7       	in	r19, 0x3e	; 62
    29c0:	40 91 04 02 	lds	r20, 0x0204
    29c4:	50 91 05 02 	lds	r21, 0x0205
    29c8:	24 1b       	sub	r18, r20
    29ca:	35 0b       	sbc	r19, r21
    29cc:	e0 91 72 02 	lds	r30, 0x0272
    29d0:	f0 91 73 02 	lds	r31, 0x0273
    29d4:	e2 17       	cp	r30, r18
    29d6:	f3 07       	cpc	r31, r19
    29d8:	a0 f4       	brcc	.+40     	; 0x2a02 <malloc+0x126>
    29da:	2e 1b       	sub	r18, r30
    29dc:	3f 0b       	sbc	r19, r31
    29de:	28 17       	cp	r18, r24
    29e0:	39 07       	cpc	r19, r25
    29e2:	78 f0       	brcs	.+30     	; 0x2a02 <malloc+0x126>
    29e4:	ac 01       	movw	r20, r24
    29e6:	4e 5f       	subi	r20, 0xFE	; 254
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ea:	24 17       	cp	r18, r20
    29ec:	35 07       	cpc	r19, r21
    29ee:	48 f0       	brcs	.+18     	; 0x2a02 <malloc+0x126>
    29f0:	4e 0f       	add	r20, r30
    29f2:	5f 1f       	adc	r21, r31
    29f4:	50 93 73 02 	sts	0x0273, r21
    29f8:	40 93 72 02 	sts	0x0272, r20
    29fc:	81 93       	st	Z+, r24
    29fe:	91 93       	st	Z+, r25
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <malloc+0x12a>
    2a02:	e0 e0       	ldi	r30, 0x00	; 0
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	cf 01       	movw	r24, r30
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <free>:
    2a12:	ef 92       	push	r14
    2a14:	ff 92       	push	r15
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <free+0x12>
    2a22:	8f c0       	rjmp	.+286    	; 0x2b42 <free+0x130>
    2a24:	dc 01       	movw	r26, r24
    2a26:	12 97       	sbiw	r26, 0x02	; 2
    2a28:	13 96       	adiw	r26, 0x03	; 3
    2a2a:	1c 92       	st	X, r1
    2a2c:	1e 92       	st	-X, r1
    2a2e:	12 97       	sbiw	r26, 0x02	; 2
    2a30:	e0 90 74 02 	lds	r14, 0x0274
    2a34:	f0 90 75 02 	lds	r15, 0x0275
    2a38:	e1 14       	cp	r14, r1
    2a3a:	f1 04       	cpc	r15, r1
    2a3c:	89 f4       	brne	.+34     	; 0x2a60 <free+0x4e>
    2a3e:	2d 91       	ld	r18, X+
    2a40:	3c 91       	ld	r19, X
    2a42:	11 97       	sbiw	r26, 0x01	; 1
    2a44:	28 0f       	add	r18, r24
    2a46:	39 1f       	adc	r19, r25
    2a48:	80 91 72 02 	lds	r24, 0x0272
    2a4c:	90 91 73 02 	lds	r25, 0x0273
    2a50:	82 17       	cp	r24, r18
    2a52:	93 07       	cpc	r25, r19
    2a54:	89 f5       	brne	.+98     	; 0x2ab8 <free+0xa6>
    2a56:	b0 93 73 02 	sts	0x0273, r27
    2a5a:	a0 93 72 02 	sts	0x0272, r26
    2a5e:	71 c0       	rjmp	.+226    	; 0x2b42 <free+0x130>
    2a60:	e7 01       	movw	r28, r14
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <free+0x58>
    2a68:	ea 01       	movw	r28, r20
    2a6a:	ca 17       	cp	r28, r26
    2a6c:	db 07       	cpc	r29, r27
    2a6e:	38 f4       	brcc	.+14     	; 0x2a7e <free+0x6c>
    2a70:	4a 81       	ldd	r20, Y+2	; 0x02
    2a72:	5b 81       	ldd	r21, Y+3	; 0x03
    2a74:	9e 01       	movw	r18, r28
    2a76:	41 15       	cp	r20, r1
    2a78:	51 05       	cpc	r21, r1
    2a7a:	b1 f7       	brne	.-20     	; 0x2a68 <free+0x56>
    2a7c:	22 c0       	rjmp	.+68     	; 0x2ac2 <free+0xb0>
    2a7e:	bc 01       	movw	r22, r24
    2a80:	62 50       	subi	r22, 0x02	; 2
    2a82:	71 09       	sbc	r23, r1
    2a84:	fb 01       	movw	r30, r22
    2a86:	d3 83       	std	Z+3, r29	; 0x03
    2a88:	c2 83       	std	Z+2, r28	; 0x02
    2a8a:	00 81       	ld	r16, Z
    2a8c:	11 81       	ldd	r17, Z+1	; 0x01
    2a8e:	ac 01       	movw	r20, r24
    2a90:	40 0f       	add	r20, r16
    2a92:	51 1f       	adc	r21, r17
    2a94:	4c 17       	cp	r20, r28
    2a96:	5d 07       	cpc	r21, r29
    2a98:	61 f4       	brne	.+24     	; 0x2ab2 <free+0xa0>
    2a9a:	48 81       	ld	r20, Y
    2a9c:	59 81       	ldd	r21, Y+1	; 0x01
    2a9e:	40 0f       	add	r20, r16
    2aa0:	51 1f       	adc	r21, r17
    2aa2:	4e 5f       	subi	r20, 0xFE	; 254
    2aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa6:	51 83       	std	Z+1, r21	; 0x01
    2aa8:	40 83       	st	Z, r20
    2aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    2aac:	5b 81       	ldd	r21, Y+3	; 0x03
    2aae:	53 83       	std	Z+3, r21	; 0x03
    2ab0:	42 83       	std	Z+2, r20	; 0x02
    2ab2:	21 15       	cp	r18, r1
    2ab4:	31 05       	cpc	r19, r1
    2ab6:	29 f4       	brne	.+10     	; 0x2ac2 <free+0xb0>
    2ab8:	b0 93 75 02 	sts	0x0275, r27
    2abc:	a0 93 74 02 	sts	0x0274, r26
    2ac0:	40 c0       	rjmp	.+128    	; 0x2b42 <free+0x130>
    2ac2:	f9 01       	movw	r30, r18
    2ac4:	b3 83       	std	Z+3, r27	; 0x03
    2ac6:	a2 83       	std	Z+2, r26	; 0x02
    2ac8:	e9 01       	movw	r28, r18
    2aca:	69 91       	ld	r22, Y+
    2acc:	79 91       	ld	r23, Y+
    2ace:	c6 0f       	add	r28, r22
    2ad0:	d7 1f       	adc	r29, r23
    2ad2:	ac 17       	cp	r26, r28
    2ad4:	bd 07       	cpc	r27, r29
    2ad6:	79 f4       	brne	.+30     	; 0x2af6 <free+0xe4>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	5e 91       	ld	r21, -X
    2adc:	4e 91       	ld	r20, -X
    2ade:	46 0f       	add	r20, r22
    2ae0:	57 1f       	adc	r21, r23
    2ae2:	4e 5f       	subi	r20, 0xFE	; 254
    2ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae6:	51 83       	std	Z+1, r21	; 0x01
    2ae8:	40 83       	st	Z, r20
    2aea:	12 96       	adiw	r26, 0x02	; 2
    2aec:	8d 91       	ld	r24, X+
    2aee:	9c 91       	ld	r25, X
    2af0:	13 97       	sbiw	r26, 0x03	; 3
    2af2:	93 83       	std	Z+3, r25	; 0x03
    2af4:	82 83       	std	Z+2, r24	; 0x02
    2af6:	a0 e0       	ldi	r26, 0x00	; 0
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <free+0xee>
    2afc:	d7 01       	movw	r26, r14
    2afe:	7c 01       	movw	r14, r24
    2b00:	f7 01       	movw	r30, r14
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	c9 f7       	brne	.-14     	; 0x2afc <free+0xea>
    2b0a:	c7 01       	movw	r24, r14
    2b0c:	02 96       	adiw	r24, 0x02	; 2
    2b0e:	20 81       	ld	r18, Z
    2b10:	31 81       	ldd	r19, Z+1	; 0x01
    2b12:	82 0f       	add	r24, r18
    2b14:	93 1f       	adc	r25, r19
    2b16:	20 91 72 02 	lds	r18, 0x0272
    2b1a:	30 91 73 02 	lds	r19, 0x0273
    2b1e:	28 17       	cp	r18, r24
    2b20:	39 07       	cpc	r19, r25
    2b22:	79 f4       	brne	.+30     	; 0x2b42 <free+0x130>
    2b24:	10 97       	sbiw	r26, 0x00	; 0
    2b26:	29 f4       	brne	.+10     	; 0x2b32 <free+0x120>
    2b28:	10 92 75 02 	sts	0x0275, r1
    2b2c:	10 92 74 02 	sts	0x0274, r1
    2b30:	04 c0       	rjmp	.+8      	; 0x2b3a <free+0x128>
    2b32:	13 96       	adiw	r26, 0x03	; 3
    2b34:	1c 92       	st	X, r1
    2b36:	1e 92       	st	-X, r1
    2b38:	12 97       	sbiw	r26, 0x02	; 2
    2b3a:	f0 92 73 02 	sts	0x0273, r15
    2b3e:	e0 92 72 02 	sts	0x0272, r14
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	1f 91       	pop	r17
    2b48:	0f 91       	pop	r16
    2b4a:	ff 90       	pop	r15
    2b4c:	ef 90       	pop	r14
    2b4e:	08 95       	ret

00002b50 <memcpy>:
    2b50:	fb 01       	movw	r30, r22
    2b52:	dc 01       	movw	r26, r24
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <memcpy+0xa>
    2b56:	01 90       	ld	r0, Z+
    2b58:	0d 92       	st	X+, r0
    2b5a:	41 50       	subi	r20, 0x01	; 1
    2b5c:	50 40       	sbci	r21, 0x00	; 0
    2b5e:	d8 f7       	brcc	.-10     	; 0x2b56 <memcpy+0x6>
    2b60:	08 95       	ret

00002b62 <_exit>:
    2b62:	f8 94       	cli

00002b64 <__stop_program>:
    2b64:	ff cf       	rjmp	.-2      	; 0x2b64 <__stop_program>
