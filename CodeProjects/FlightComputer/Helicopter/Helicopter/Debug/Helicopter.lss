
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  0000456a  000045fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000456a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800288  00800288  00004686  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00004688  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b77  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007b93  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000840  00000000  00000000  00007bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008f33  00000000  00000000  00008402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002836  00000000  00000000  00011335  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021b2  00000000  00000000  00013b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d10  00000000  00000000  00015d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003824  00000000  00000000  00017a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004264  00000000  00000000  0001b254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006e8  00000000  00000000  0001f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      68:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      6c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      7c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      80:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      84:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      88:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      90:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      94:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      98:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      ac:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	}
}
      b4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      bc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      cc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      dc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      e0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
      e8:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
      ec:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>
      f0:	0c 94 85 11 	jmp	0x230a	; 0x230a <_ZN10helicopter8messages11SyncMessageD0Ev>
      f4:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <_ZN10helicopter5tasks4Task4initEv>
      f8:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
      fc:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
     100:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <_ZN10helicopter8messages11SyncMessageD1Ev>
     104:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
     108:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     10c:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     110:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     114:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     118:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>
     11c:	0c 94 bf 11 	jmp	0x237e	; 0x237e <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     120:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>
     124:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <_ZN10helicopter5tasks4Task7runTaskEv>
     128:	0c 94 1d 09 	jmp	0x123a	; 0x123a <_ZN10helicopter5tasks4TaskD0Ev>
     12c:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
     130:	0c 94 01 11 	jmp	0x2202	; 0x2202 <_ZN10helicopter8messages7Message8getBytesEv>
     134:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     138:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>
     13c:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
     140:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
     144:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <_ZN10helicopter5tasks12FlashLEDTask4initEv>
     148:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
     14c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <_ZN10helicopter7drivers11ServoDriverD0Ev>
     150:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     154:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>
     158:	0c 94 94 14 	jmp	0x2928	; 0x2928 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     15c:	0c 94 10 11 	jmp	0x2220	; 0x2220 <_ZN10helicopter8messages7Message12buildMessageEPh>
     160:	0c 94 64 1d 	jmp	0x3ac8	; 0x3ac8 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
     164:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>
     168:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <_ZN10helicopter8messages7MessageD1Ev>
     16c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <_ZN10helicopter7drivers11ServoDriverD1Ev>
     170:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <_ZN10helicopter5tasks4Task11runTaskImplEv>
     174:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <_ZN10helicopter8messages7MessageD0Ev>
     178:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <_ZN10helicopter7drivers12SerialDriverD0Ev>

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	12 e0       	ldi	r17, 0x02	; 2
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ea e6       	ldi	r30, 0x6A	; 106
     194:	f5 e4       	ldi	r31, 0x45	; 69
     196:	00 e0       	ldi	r16, 0x00	; 0
     198:	0b bf       	out	0x3b, r16	; 59
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x14>
     19c:	07 90       	elpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a8 38       	cpi	r26, 0x88	; 136
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x10>

000001a6 <__do_clear_bss>:
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	a8 e8       	ldi	r26, 0x88	; 136
     1aa:	b2 e0       	ldi	r27, 0x02	; 2
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	ae 38       	cpi	r26, 0x8E	; 142
     1b2:	b2 07       	cpc	r27, r18
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <main>
     1ba:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>:
	model->YawProportional((double) this->YawProportional / 100);
	model->YawDerivativeError((double) this->YawDerivativeError / 100);
	model->YawControl((double) this->YawControl / 100);
	model->Timeouts(this->Timeouts);
	model->UnrecognizedMsgTypes(this->UnrecognizedMsgTypes);
	model->ChecksumErrors(this->ChecksumErrors);
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	1f 92       	push	r1
     1c8:	1f 92       	push	r1
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	9a 83       	std	Y+2, r25	; 0x02
	model->BlownFrames(this->NumOfBlownFrames);
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	a2 81       	ldd	r26, Z+2	; 0x02
     1de:	b3 81       	ldd	r27, Z+3	; 0x03
     1e0:	bc 01       	movw	r22, r24
     1e2:	cd 01       	movw	r24, r26
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
}
     1ec:	08 95       	ret

000001ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	1f 92       	push	r1
     1f4:	1f 92       	push	r1
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
			double MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
     1fa:	9a 83       	std	Y+2, r25	; 0x02
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	fc 01       	movw	r30, r24
     204:	84 81       	ldd	r24, Z+4	; 0x04
     206:	95 81       	ldd	r25, Z+5	; 0x05
     208:	a6 81       	ldd	r26, Z+6	; 0x06
     20a:	b7 81       	ldd	r27, Z+7	; 0x07
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <_ZNK10helicopter5model11SystemModel10YawControlEv>:
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
				
				
			double YawControl() const {return yawControl;}
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	1f 92       	push	r1
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	fc 01       	movw	r30, r24
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	91 85       	ldd	r25, Z+9	; 0x09
     234:	a2 85       	ldd	r26, Z+10	; 0x0a
     236:	b3 85       	ldd	r27, Z+11	; 0x0b
     238:	bc 01       	movw	r22, r24
     23a:	cd 01       	movw	r24, r26
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <_ZN10helicopter5model11SystemModel10YawControlEd>:
			void YawControl(double val) { yawControl = val;}
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <_ZN10helicopter5model11SystemModel10YawControlEd+0x6>
     24c:	00 d0       	rcall	.+0      	; 0x24e <_ZN10helicopter5model11SystemModel10YawControlEd+0x8>
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	9a 83       	std	Y+2, r25	; 0x02
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	4b 83       	std	Y+3, r20	; 0x03
     258:	5c 83       	std	Y+4, r21	; 0x04
     25a:	6d 83       	std	Y+5, r22	; 0x05
     25c:	7e 83       	std	Y+6, r23	; 0x06
     25e:	29 81       	ldd	r18, Y+1	; 0x01
     260:	3a 81       	ldd	r19, Y+2	; 0x02
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	9c 81       	ldd	r25, Y+4	; 0x04
     266:	ad 81       	ldd	r26, Y+5	; 0x05
     268:	be 81       	ldd	r27, Y+6	; 0x06
     26a:	f9 01       	movw	r30, r18
     26c:	80 87       	std	Z+8, r24	; 0x08
     26e:	91 87       	std	Z+9, r25	; 0x09
     270:	a2 87       	std	Z+10, r26	; 0x0a
     272:	b3 87       	std	Z+11, r27	; 0x0b
     274:	26 96       	adiw	r28, 0x06	; 6
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	1f 92       	push	r1
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	84 85       	ldd	r24, Z+12	; 0x0c
     29e:	95 85       	ldd	r25, Z+13	; 0x0d
     2a0:	a6 85       	ldd	r26, Z+14	; 0x0e
     2a2:	b7 85       	ldd	r27, Z+15	; 0x0f
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>:
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x6>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x8>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	9a 83       	std	Y+2, r25	; 0x02
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	4b 83       	std	Y+3, r20	; 0x03
     2c4:	5c 83       	std	Y+4, r21	; 0x04
     2c6:	6d 83       	std	Y+5, r22	; 0x05
     2c8:	7e 83       	std	Y+6, r23	; 0x06
     2ca:	29 81       	ldd	r18, Y+1	; 0x01
     2cc:	3a 81       	ldd	r19, Y+2	; 0x02
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	ad 81       	ldd	r26, Y+5	; 0x05
     2d4:	be 81       	ldd	r27, Y+6	; 0x06
     2d6:	f9 01       	movw	r30, r18
     2d8:	84 87       	std	Z+12, r24	; 0x0c
     2da:	95 87       	std	Z+13, r25	; 0x0d
     2dc:	a6 87       	std	Z+14, r26	; 0x0e
     2de:	b7 87       	std	Z+15, r27	; 0x0f
     2e0:	26 96       	adiw	r28, 0x06	; 6
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	1f 92       	push	r1
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	fc 01       	movw	r30, r24
     308:	80 89       	ldd	r24, Z+16	; 0x10
     30a:	91 89       	ldd	r25, Z+17	; 0x11
     30c:	a2 89       	ldd	r26, Z+18	; 0x12
     30e:	b3 89       	ldd	r27, Z+19	; 0x13
     310:	bc 01       	movw	r22, r24
     312:	cd 01       	movw	r24, r26
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>:
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	1f 92       	push	r1
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	fc 01       	movw	r30, r24
     334:	84 89       	ldd	r24, Z+20	; 0x14
     336:	95 89       	ldd	r25, Z+21	; 0x15
     338:	a6 89       	ldd	r26, Z+22	; 0x16
     33a:	b7 89       	ldd	r27, Z+23	; 0x17
     33c:	bc 01       	movw	r22, r24
     33e:	cd 01       	movw	r24, r26
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	1f 92       	push	r1
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	fc 01       	movw	r30, r24
     360:	80 8d       	ldd	r24, Z+24	; 0x18
     362:	91 8d       	ldd	r25, Z+25	; 0x19
     364:	a2 8d       	ldd	r26, Z+26	; 0x1a
     366:	b3 8d       	ldd	r27, Z+27	; 0x1b
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <_ZN10helicopter5model11SystemModel11YawIntegralEd>:
			void YawIntegral(double val) { yawIntegral = val;}
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	4b 83       	std	Y+3, r20	; 0x03
     388:	5c 83       	std	Y+4, r21	; 0x04
     38a:	6d 83       	std	Y+5, r22	; 0x05
     38c:	7e 83       	std	Y+6, r23	; 0x06
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	3a 81       	ldd	r19, Y+2	; 0x02
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	ad 81       	ldd	r26, Y+5	; 0x05
     398:	be 81       	ldd	r27, Y+6	; 0x06
     39a:	f9 01       	movw	r30, r18
     39c:	80 8f       	std	Z+24, r24	; 0x18
     39e:	91 8f       	std	Z+25, r25	; 0x19
     3a0:	a2 8f       	std	Z+26, r26	; 0x1a
     3a2:	b3 8f       	std	Z+27, r27	; 0x1b
     3a4:	26 96       	adiw	r28, 0x06	; 6
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <_ZN10helicopter5model11SystemModel15YawProportionalEd>:

			double YawProportional() const {return yawProportional;}
			void YawProportional(double val) { yawProportional = val;}
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x6>
     3bc:	00 d0       	rcall	.+0      	; 0x3be <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x8>
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	4b 83       	std	Y+3, r20	; 0x03
     3c8:	5c 83       	std	Y+4, r21	; 0x04
     3ca:	6d 83       	std	Y+5, r22	; 0x05
     3cc:	7e 83       	std	Y+6, r23	; 0x06
     3ce:	29 81       	ldd	r18, Y+1	; 0x01
     3d0:	3a 81       	ldd	r19, Y+2	; 0x02
     3d2:	8b 81       	ldd	r24, Y+3	; 0x03
     3d4:	9c 81       	ldd	r25, Y+4	; 0x04
     3d6:	ad 81       	ldd	r26, Y+5	; 0x05
     3d8:	be 81       	ldd	r27, Y+6	; 0x06
     3da:	f9 01       	movw	r30, r18
     3dc:	84 8f       	std	Z+28, r24	; 0x1c
     3de:	95 8f       	std	Z+29, r25	; 0x1d
     3e0:	a6 8f       	std	Z+30, r26	; 0x1e
     3e2:	b7 8f       	std	Z+31, r27	; 0x1f
     3e4:	26 96       	adiw	r28, 0x06	; 6
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>:

			double YawDerivativeError() const {return yawDerivativeError;}
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x6>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x8>
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
     406:	4b 83       	std	Y+3, r20	; 0x03
     408:	5c 83       	std	Y+4, r21	; 0x04
     40a:	6d 83       	std	Y+5, r22	; 0x05
     40c:	7e 83       	std	Y+6, r23	; 0x06
     40e:	29 81       	ldd	r18, Y+1	; 0x01
     410:	3a 81       	ldd	r19, Y+2	; 0x02
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	ad 81       	ldd	r26, Y+5	; 0x05
     418:	be 81       	ldd	r27, Y+6	; 0x06
     41a:	f9 01       	movw	r30, r18
     41c:	80 a3       	std	Z+32, r24	; 0x20
     41e:	91 a3       	std	Z+33, r25	; 0x21
     420:	a2 a3       	std	Z+34, r26	; 0x22
     422:	b3 a3       	std	Z+35, r27	; 0x23
     424:	26 96       	adiw	r28, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <_ZNK10helicopter5model11SystemModel11BlownFramesEv>:
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
			
			long ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(long val) { checksumErrors = val; }
			
			long  BlownFrames() const {return numOfFramesBlown;}
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	1f 92       	push	r1
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	9a 83       	std	Y+2, r25	; 0x02
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	fc 01       	movw	r30, r24
     44c:	80 a9       	ldd	r24, Z+48	; 0x30
     44e:	91 a9       	ldd	r25, Z+49	; 0x31
     450:	a2 a9       	ldd	r26, Z+50	; 0x32
     452:	b3 a9       	ldd	r27, Z+51	; 0x33
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <_ZN10helicopter5model11SystemModel11BlownFramesEl>:
			void BlownFrames( long val ) { numOfFramesBlown = val;}
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <_ZN10helicopter5model11SystemModel11BlownFramesEl+0x6>
     468:	00 d0       	rcall	.+0      	; 0x46a <_ZN10helicopter5model11SystemModel11BlownFramesEl+0x8>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	9a 83       	std	Y+2, r25	; 0x02
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	4b 83       	std	Y+3, r20	; 0x03
     474:	5c 83       	std	Y+4, r21	; 0x04
     476:	6d 83       	std	Y+5, r22	; 0x05
     478:	7e 83       	std	Y+6, r23	; 0x06
     47a:	29 81       	ldd	r18, Y+1	; 0x01
     47c:	3a 81       	ldd	r19, Y+2	; 0x02
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	ad 81       	ldd	r26, Y+5	; 0x05
     484:	be 81       	ldd	r27, Y+6	; 0x06
     486:	f9 01       	movw	r30, r18
     488:	80 ab       	std	Z+48, r24	; 0x30
     48a:	91 ab       	std	Z+49, r25	; 0x31
     48c:	a2 ab       	std	Z+50, r26	; 0x32
     48e:	b3 ab       	std	Z+51, r27	; 0x33
     490:	26 96       	adiw	r28, 0x06	; 6
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>:

#include "PIDController.h"

using namespace helicopter::controller;

PIDController::PIDController(SystemModel *model, ServoDriver *servoDriver): 
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x6>
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x8>
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	7c 83       	std	Y+4, r23	; 0x04
     4b4:	6b 83       	std	Y+3, r22	; 0x03
     4b6:	5e 83       	std	Y+6, r21	; 0x06
     4b8:	4d 83       	std	Y+5, r20	; 0x05
minYawServoControlValue(0),
maxYawServoControlValue(0),
yawServoTrim(0),
intervalPeriodSecs(0),
controlMaxValue(0),
controlMinValue(0)
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
     4be:	2b 81       	ldd	r18, Y+3	; 0x03
     4c0:	3c 81       	ldd	r19, Y+4	; 0x04
     4c2:	fc 01       	movw	r30, r24
     4c4:	31 83       	std	Z+1, r19	; 0x01
     4c6:	20 83       	st	Z, r18
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	2d 81       	ldd	r18, Y+5	; 0x05
     4ce:	3e 81       	ldd	r19, Y+6	; 0x06
     4d0:	fc 01       	movw	r30, r24
     4d2:	33 83       	std	Z+3, r19	; 0x03
     4d4:	22 83       	std	Z+2, r18	; 0x02
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	fc 01       	movw	r30, r24
     4dc:	14 82       	std	Z+4, r1	; 0x04
     4de:	15 82       	std	Z+5, r1	; 0x05
     4e0:	16 82       	std	Z+6, r1	; 0x06
     4e2:	17 82       	std	Z+7, r1	; 0x07
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	fc 01       	movw	r30, r24
     4ea:	10 86       	std	Z+8, r1	; 0x08
     4ec:	11 86       	std	Z+9, r1	; 0x09
     4ee:	12 86       	std	Z+10, r1	; 0x0a
     4f0:	13 86       	std	Z+11, r1	; 0x0b
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	fc 01       	movw	r30, r24
     4f8:	14 86       	std	Z+12, r1	; 0x0c
     4fa:	15 86       	std	Z+13, r1	; 0x0d
     4fc:	16 86       	std	Z+14, r1	; 0x0e
     4fe:	17 86       	std	Z+15, r1	; 0x0f
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	fc 01       	movw	r30, r24
     506:	10 8a       	std	Z+16, r1	; 0x10
     508:	11 8a       	std	Z+17, r1	; 0x11
     50a:	12 8a       	std	Z+18, r1	; 0x12
     50c:	13 8a       	std	Z+19, r1	; 0x13
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	14 8a       	std	Z+20, r1	; 0x14
     516:	15 8a       	std	Z+21, r1	; 0x15
     518:	16 8a       	std	Z+22, r1	; 0x16
     51a:	17 8a       	std	Z+23, r1	; 0x17
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	fc 01       	movw	r30, r24
     522:	10 8e       	std	Z+24, r1	; 0x18
     524:	11 8e       	std	Z+25, r1	; 0x19
     526:	12 8e       	std	Z+26, r1	; 0x1a
     528:	13 8e       	std	Z+27, r1	; 0x1b
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	fc 01       	movw	r30, r24
     530:	14 8e       	std	Z+28, r1	; 0x1c
     532:	15 8e       	std	Z+29, r1	; 0x1d
     534:	16 8e       	std	Z+30, r1	; 0x1e
     536:	17 8e       	std	Z+31, r1	; 0x1f
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	10 a2       	std	Z+32, r1	; 0x20
     540:	11 a2       	std	Z+33, r1	; 0x21
     542:	12 a2       	std	Z+34, r1	; 0x22
     544:	13 a2       	std	Z+35, r1	; 0x23
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	fc 01       	movw	r30, r24
     54c:	14 a2       	std	Z+36, r1	; 0x24
     54e:	15 a2       	std	Z+37, r1	; 0x25
     550:	16 a2       	std	Z+38, r1	; 0x26
     552:	17 a2       	std	Z+39, r1	; 0x27
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	9a 81       	ldd	r25, Y+2	; 0x02
     558:	fc 01       	movw	r30, r24
     55a:	10 a6       	std	Z+40, r1	; 0x28
     55c:	11 a6       	std	Z+41, r1	; 0x29
     55e:	12 a6       	std	Z+42, r1	; 0x2a
     560:	13 a6       	std	Z+43, r1	; 0x2b
{
	
}
     562:	26 96       	adiw	r28, 0x06	; 6
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>:
	delete model;
}

//TODO refactor to make this common for all PID calculations
double PIDController::calculateYawProportional(double currentYawDegrees, double referenceYawDegrees)
{
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	2e 97       	sbiw	r28, 0x0e	; 14
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	9e 83       	std	Y+6, r25	; 0x06
     58e:	8d 83       	std	Y+5, r24	; 0x05
     590:	4f 83       	std	Y+7, r20	; 0x07
     592:	58 87       	std	Y+8, r21	; 0x08
     594:	69 87       	std	Y+9, r22	; 0x09
     596:	7a 87       	std	Y+10, r23	; 0x0a
     598:	0b 87       	std	Y+11, r16	; 0x0b
     59a:	1c 87       	std	Y+12, r17	; 0x0c
     59c:	2d 87       	std	Y+13, r18	; 0x0d
     59e:	3e 87       	std	Y+14, r19	; 0x0e
	double yawError = currentYawDegrees - referenceYawDegrees;
     5a0:	2b 85       	ldd	r18, Y+11	; 0x0b
     5a2:	3c 85       	ldd	r19, Y+12	; 0x0c
     5a4:	4d 85       	ldd	r20, Y+13	; 0x0d
     5a6:	5e 85       	ldd	r21, Y+14	; 0x0e
     5a8:	6f 81       	ldd	r22, Y+7	; 0x07
     5aa:	78 85       	ldd	r23, Y+8	; 0x08
     5ac:	89 85       	ldd	r24, Y+9	; 0x09
     5ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b0:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	89 83       	std	Y+1, r24	; 0x01
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	ab 83       	std	Y+3, r26	; 0x03
     5be:	bc 83       	std	Y+4, r27	; 0x04
	
	if (yawError >= 180)
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	44 e3       	ldi	r20, 0x34	; 52
     5c6:	53 e4       	ldi	r21, 0x43	; 67
     5c8:	69 81       	ldd	r22, Y+1	; 0x01
     5ca:	7a 81       	ldd	r23, Y+2	; 0x02
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	0e 94 bf 20 	call	0x417e	; 0x417e <__gesf2>
     5d4:	88 23       	and	r24, r24
     5d6:	8c f0       	brlt	.+34     	; 0x5fa <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0x86>
	{
		yawError = yawError - 360;
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	44 eb       	ldi	r20, 0xB4	; 180
     5de:	53 e4       	ldi	r21, 0x43	; 67
     5e0:	69 81       	ldd	r22, Y+1	; 0x01
     5e2:	7a 81       	ldd	r23, Y+2	; 0x02
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	ab 83       	std	Y+3, r26	; 0x03
     5f6:	bc 83       	std	Y+4, r27	; 0x04
     5f8:	1c c0       	rjmp	.+56     	; 0x632 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	}
	else if (yawError < -180)
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	44 e3       	ldi	r20, 0x34	; 52
     600:	53 ec       	ldi	r21, 0xC3	; 195
     602:	69 81       	ldd	r22, Y+1	; 0x01
     604:	7a 81       	ldd	r23, Y+2	; 0x02
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	84 f4       	brge	.+32     	; 0x632 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	{
		yawError = yawError + 360;
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	44 eb       	ldi	r20, 0xB4	; 180
     618:	53 e4       	ldi	r21, 0x43	; 67
     61a:	69 81       	ldd	r22, Y+1	; 0x01
     61c:	7a 81       	ldd	r23, Y+2	; 0x02
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	9c 81       	ldd	r25, Y+4	; 0x04
     622:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__addsf3>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	ab 83       	std	Y+3, r26	; 0x03
     630:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return yawError;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	ab 81       	ldd	r26, Y+3	; 0x03
     638:	bc 81       	ldd	r27, Y+4	; 0x04
}
     63a:	bc 01       	movw	r22, r24
     63c:	cd 01       	movw	r24, r26
     63e:	2e 96       	adiw	r28, 0x0e	; 14
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret

00000654 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEdd>:


//TODO refactor to make this common for all PID calculations. I'll want to include the specific
//variables max values as parameters so I can 'generalize' it.
double PIDController::calculateYawIntegralAntiWindup(double oldYawControlPreServoAdj, double oldYawControl)
{
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	2e 97       	sbiw	r28, 0x0e	; 14
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	9e 83       	std	Y+6, r25	; 0x06
     676:	8d 83       	std	Y+5, r24	; 0x05
     678:	4f 83       	std	Y+7, r20	; 0x07
     67a:	58 87       	std	Y+8, r21	; 0x08
     67c:	69 87       	std	Y+9, r22	; 0x09
     67e:	7a 87       	std	Y+10, r23	; 0x0a
     680:	0b 87       	std	Y+11, r16	; 0x0b
     682:	1c 87       	std	Y+12, r17	; 0x0c
     684:	2d 87       	std	Y+13, r18	; 0x0d
     686:	3e 87       	std	Y+14, r19	; 0x0e
	double antiWindup = 0;
     688:	19 82       	std	Y+1, r1	; 0x01
     68a:	1a 82       	std	Y+2, r1	; 0x02
     68c:	1b 82       	std	Y+3, r1	; 0x03
     68e:	1c 82       	std	Y+4, r1	; 0x04
	
	antiWindup = yawAntiWindupGain * (oldYawControlPreServoAdj - oldYawControl);
     690:	8d 81       	ldd	r24, Y+5	; 0x05
     692:	9e 81       	ldd	r25, Y+6	; 0x06
     694:	fc 01       	movw	r30, r24
     696:	c0 88       	ldd	r12, Z+16	; 0x10
     698:	d1 88       	ldd	r13, Z+17	; 0x11
     69a:	e2 88       	ldd	r14, Z+18	; 0x12
     69c:	f3 88       	ldd	r15, Z+19	; 0x13
     69e:	2b 85       	ldd	r18, Y+11	; 0x0b
     6a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6a2:	4d 85       	ldd	r20, Y+13	; 0x0d
     6a4:	5e 85       	ldd	r21, Y+14	; 0x0e
     6a6:	6f 81       	ldd	r22, Y+7	; 0x07
     6a8:	78 85       	ldd	r23, Y+8	; 0x08
     6aa:	89 85       	ldd	r24, Y+9	; 0x09
     6ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ae:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	9c 01       	movw	r18, r24
     6b8:	ad 01       	movw	r20, r26
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	89 83       	std	Y+1, r24	; 0x01
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	ab 83       	std	Y+3, r26	; 0x03
     6cc:	bc 83       	std	Y+4, r27	; 0x04
	{
		antiWindup = yawAntiWindupGain * (oldYawControlValue - minYawServoControlValue);
	}
	*/
	
	return antiWindup;
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	ab 81       	ldd	r26, Y+3	; 0x03
     6d4:	bc 81       	ldd	r27, Y+4	; 0x04
}
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	2e 96       	adiw	r28, 0x0e	; 14
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	08 95       	ret

000006f8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>:

/**
 * Anti-windup algorithm provided by Control Systems Design by Karl Johan Astrom 2002. chapter 6
 */
double PIDController::calculateYawIntegral(double yawProportionalDegrees, double oldYawIntegral, double yawAntiWindup)
{
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	62 97       	sbiw	r28, 0x12	; 18
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	8d 83       	std	Y+5, r24	; 0x05
     71c:	4f 83       	std	Y+7, r20	; 0x07
     71e:	58 87       	std	Y+8, r21	; 0x08
     720:	69 87       	std	Y+9, r22	; 0x09
     722:	7a 87       	std	Y+10, r23	; 0x0a
     724:	0b 87       	std	Y+11, r16	; 0x0b
     726:	1c 87       	std	Y+12, r17	; 0x0c
     728:	2d 87       	std	Y+13, r18	; 0x0d
     72a:	3e 87       	std	Y+14, r19	; 0x0e
     72c:	cf 86       	std	Y+15, r12	; 0x0f
     72e:	d8 8a       	std	Y+16, r13	; 0x10
     730:	e9 8a       	std	Y+17, r14	; 0x11
     732:	fa 8a       	std	Y+18, r15	; 0x12
	
	double workingIntegral = 0;
     734:	19 82       	std	Y+1, r1	; 0x01
     736:	1a 82       	std	Y+2, r1	; 0x02
     738:	1b 82       	std	Y+3, r1	; 0x03
     73a:	1c 82       	std	Y+4, r1	; 0x04
	
	workingIntegral = yawProportionalDegrees * intervalPeriodSecs * yawIntegralGain;
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	9e 81       	ldd	r25, Y+6	; 0x06
     740:	fc 01       	movw	r30, r24
     742:	80 a1       	ldd	r24, Z+32	; 0x20
     744:	91 a1       	ldd	r25, Z+33	; 0x21
     746:	a2 a1       	ldd	r26, Z+34	; 0x22
     748:	b3 a1       	ldd	r27, Z+35	; 0x23
     74a:	2f 81       	ldd	r18, Y+7	; 0x07
     74c:	38 85       	ldd	r19, Y+8	; 0x08
     74e:	49 85       	ldd	r20, Y+9	; 0x09
     750:	5a 85       	ldd	r21, Y+10	; 0x0a
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	2d 81       	ldd	r18, Y+5	; 0x05
     760:	3e 81       	ldd	r19, Y+6	; 0x06
     762:	f9 01       	movw	r30, r18
     764:	24 81       	ldd	r18, Z+4	; 0x04
     766:	35 81       	ldd	r19, Z+5	; 0x05
     768:	46 81       	ldd	r20, Z+6	; 0x06
     76a:	57 81       	ldd	r21, Z+7	; 0x07
     76c:	bc 01       	movw	r22, r24
     76e:	cd 01       	movw	r24, r26
     770:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	ab 83       	std	Y+3, r26	; 0x03
     77e:	bc 83       	std	Y+4, r27	; 0x04
	//Integrate (i.e. sum this working value with the current integral value).
	//Note: i'm going out of order from what is defined in the book referenced above.
	//I am summing before subtracting the antiwindup value to make it easier.
	//I also find it odd that the integral 'gain' is being applied before 
	//accounting for the anti-windup. But this could be to compensate for large errors.
	workingIntegral = workingIntegral + oldYawIntegral;
     780:	2b 85       	ldd	r18, Y+11	; 0x0b
     782:	3c 85       	ldd	r19, Y+12	; 0x0c
     784:	4d 85       	ldd	r20, Y+13	; 0x0d
     786:	5e 85       	ldd	r21, Y+14	; 0x0e
     788:	69 81       	ldd	r22, Y+1	; 0x01
     78a:	7a 81       	ldd	r23, Y+2	; 0x02
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__addsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	ab 83       	std	Y+3, r26	; 0x03
     79e:	bc 83       	std	Y+4, r27	; 0x04
	
	if (yawAntiWindup != 0)
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	6f 85       	ldd	r22, Y+15	; 0x0f
     7a8:	78 89       	ldd	r23, Y+16	; 0x10
     7aa:	89 89       	ldd	r24, Y+17	; 0x11
     7ac:	9a 89       	ldd	r25, Y+18	; 0x12
     7ae:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__cmpsf2>
     7b2:	88 23       	and	r24, r24
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xc0>
     7b6:	52 c0       	rjmp	.+164    	; 0x85c <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x164>
	{
		//We want to know if the integral is greater than 0 or less than 0 so that when we subtract
		//the antiwindup value, we get closer to 0, and don't exceed 0.
		if (workingIntegral > 0 && yawAntiWindup > workingIntegral)
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	a9 01       	movw	r20, r18
     7be:	69 81       	ldd	r22, Y+1	; 0x01
     7c0:	7a 81       	ldd	r23, Y+2	; 0x02
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	0e 94 bf 20 	call	0x417e	; 0x417e <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	8c f4       	brge	.+34     	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xf8>
     7ce:	29 81       	ldd	r18, Y+1	; 0x01
     7d0:	3a 81       	ldd	r19, Y+2	; 0x02
     7d2:	4b 81       	ldd	r20, Y+3	; 0x03
     7d4:	5c 81       	ldd	r21, Y+4	; 0x04
     7d6:	6f 85       	ldd	r22, Y+15	; 0x0f
     7d8:	78 89       	ldd	r23, Y+16	; 0x10
     7da:	89 89       	ldd	r24, Y+17	; 0x11
     7dc:	9a 89       	ldd	r25, Y+18	; 0x12
     7de:	0e 94 bf 20 	call	0x417e	; 0x417e <__gesf2>
     7e2:	18 16       	cp	r1, r24
     7e4:	2c f4       	brge	.+10     	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xf8>
		{
			workingIntegral = 0;
     7e6:	19 82       	std	Y+1, r1	; 0x01
     7e8:	1a 82       	std	Y+2, r1	; 0x02
     7ea:	1b 82       	std	Y+3, r1	; 0x03
     7ec:	1c 82       	std	Y+4, r1	; 0x04
     7ee:	1b c0       	rjmp	.+54     	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
		}else if (workingIntegral < 0 && yawAntiWindup < workingIntegral)
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	a9 01       	movw	r20, r18
     7f6:	69 81       	ldd	r22, Y+1	; 0x01
     7f8:	7a 81       	ldd	r23, Y+2	; 0x02
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__cmpsf2>
     802:	88 23       	and	r24, r24
     804:	84 f4       	brge	.+32     	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
     806:	29 81       	ldd	r18, Y+1	; 0x01
     808:	3a 81       	ldd	r19, Y+2	; 0x02
     80a:	4b 81       	ldd	r20, Y+3	; 0x03
     80c:	5c 81       	ldd	r21, Y+4	; 0x04
     80e:	6f 85       	ldd	r22, Y+15	; 0x0f
     810:	78 89       	ldd	r23, Y+16	; 0x10
     812:	89 89       	ldd	r24, Y+17	; 0x11
     814:	9a 89       	ldd	r25, Y+18	; 0x12
     816:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	24 f4       	brge	.+8      	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
		{
			workingIntegral = 0;
     81e:	19 82       	std	Y+1, r1	; 0x01
     820:	1a 82       	std	Y+2, r1	; 0x02
     822:	1b 82       	std	Y+3, r1	; 0x03
     824:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		if (workingIntegral != 0)
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	a9 01       	movw	r20, r18
     82c:	69 81       	ldd	r22, Y+1	; 0x01
     82e:	7a 81       	ldd	r23, Y+2	; 0x02
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__cmpsf2>
     838:	88 23       	and	r24, r24
     83a:	81 f0       	breq	.+32     	; 0x85c <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x164>
		{
				//Subtract the anti-windup value from the working integral. 
			workingIntegral = workingIntegral - yawAntiWindup;
     83c:	2f 85       	ldd	r18, Y+15	; 0x0f
     83e:	38 89       	ldd	r19, Y+16	; 0x10
     840:	49 89       	ldd	r20, Y+17	; 0x11
     842:	5a 89       	ldd	r21, Y+18	; 0x12
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	89 83       	std	Y+1, r24	; 0x01
     856:	9a 83       	std	Y+2, r25	; 0x02
     858:	ab 83       	std	Y+3, r26	; 0x03
     85a:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	
	return workingIntegral;
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	ab 81       	ldd	r26, Y+3	; 0x03
     862:	bc 81       	ldd	r27, Y+4	; 0x04
}
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	62 96       	adiw	r28, 0x12	; 18
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	08 95       	ret

00000886 <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>:
	//return integral;
//}


double PIDController::calculateYawVelocityError(double yawVelocityDegreesPerSecond, double referenceYawVelocityDegreesPerSecond)
{
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	2a 97       	sbiw	r28, 0x0a	; 10
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	4b 83       	std	Y+3, r20	; 0x03
     8a4:	5c 83       	std	Y+4, r21	; 0x04
     8a6:	6d 83       	std	Y+5, r22	; 0x05
     8a8:	7e 83       	std	Y+6, r23	; 0x06
     8aa:	0f 83       	std	Y+7, r16	; 0x07
     8ac:	18 87       	std	Y+8, r17	; 0x08
     8ae:	29 87       	std	Y+9, r18	; 0x09
     8b0:	3a 87       	std	Y+10, r19	; 0x0a
	return yawVelocityDegreesPerSecond - referenceYawVelocityDegreesPerSecond;
     8b2:	2f 81       	ldd	r18, Y+7	; 0x07
     8b4:	38 85       	ldd	r19, Y+8	; 0x08
     8b6:	49 85       	ldd	r20, Y+9	; 0x09
     8b8:	5a 85       	ldd	r21, Y+10	; 0x0a
     8ba:	6b 81       	ldd	r22, Y+3	; 0x03
     8bc:	7c 81       	ldd	r23, Y+4	; 0x04
     8be:	8d 81       	ldd	r24, Y+5	; 0x05
     8c0:	9e 81       	ldd	r25, Y+6	; 0x06
     8c2:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
}
     8ca:	bc 01       	movw	r22, r24
     8cc:	cd 01       	movw	r24, r26
     8ce:	2a 96       	adiw	r28, 0x0a	; 10
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>:

double PIDController::calculateYawControlValue(double yawProportionalDegrees, double yawVelocityErrorDegreesPerSecond, double yawIntegral)
{
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	62 97       	sbiw	r28, 0x12	; 18
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	9e 83       	std	Y+6, r25	; 0x06
     906:	8d 83       	std	Y+5, r24	; 0x05
     908:	4f 83       	std	Y+7, r20	; 0x07
     90a:	58 87       	std	Y+8, r21	; 0x08
     90c:	69 87       	std	Y+9, r22	; 0x09
     90e:	7a 87       	std	Y+10, r23	; 0x0a
     910:	0b 87       	std	Y+11, r16	; 0x0b
     912:	1c 87       	std	Y+12, r17	; 0x0c
     914:	2d 87       	std	Y+13, r18	; 0x0d
     916:	3e 87       	std	Y+14, r19	; 0x0e
     918:	cf 86       	std	Y+15, r12	; 0x0f
     91a:	d8 8a       	std	Y+16, r13	; 0x10
     91c:	e9 8a       	std	Y+17, r14	; 0x11
     91e:	fa 8a       	std	Y+18, r15	; 0x12
	double controlValue = 0;
     920:	19 82       	std	Y+1, r1	; 0x01
     922:	1a 82       	std	Y+2, r1	; 0x02
     924:	1b 82       	std	Y+3, r1	; 0x03
     926:	1c 82       	std	Y+4, r1	; 0x04
	
	controlValue = yawIntegral  + yawProportionalDegrees * yawProportionalGain + yawVelocityErrorDegreesPerSecond * yawDerivativeGain;
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	9e 81       	ldd	r25, Y+6	; 0x06
     92c:	fc 01       	movw	r30, r24
     92e:	84 85       	ldd	r24, Z+12	; 0x0c
     930:	95 85       	ldd	r25, Z+13	; 0x0d
     932:	a6 85       	ldd	r26, Z+14	; 0x0e
     934:	b7 85       	ldd	r27, Z+15	; 0x0f
     936:	2f 81       	ldd	r18, Y+7	; 0x07
     938:	38 85       	ldd	r19, Y+8	; 0x08
     93a:	49 85       	ldd	r20, Y+9	; 0x09
     93c:	5a 85       	ldd	r21, Y+10	; 0x0a
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	2f 85       	ldd	r18, Y+15	; 0x0f
     94c:	38 89       	ldd	r19, Y+16	; 0x10
     94e:	49 89       	ldd	r20, Y+17	; 0x11
     950:	5a 89       	ldd	r21, Y+18	; 0x12
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__addsf3>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	6c 01       	movw	r12, r24
     960:	7d 01       	movw	r14, r26
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	9e 81       	ldd	r25, Y+6	; 0x06
     966:	fc 01       	movw	r30, r24
     968:	80 85       	ldd	r24, Z+8	; 0x08
     96a:	91 85       	ldd	r25, Z+9	; 0x09
     96c:	a2 85       	ldd	r26, Z+10	; 0x0a
     96e:	b3 85       	ldd	r27, Z+11	; 0x0b
     970:	2b 85       	ldd	r18, Y+11	; 0x0b
     972:	3c 85       	ldd	r19, Y+12	; 0x0c
     974:	4d 85       	ldd	r20, Y+13	; 0x0d
     976:	5e 85       	ldd	r21, Y+14	; 0x0e
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	9c 01       	movw	r18, r24
     986:	ad 01       	movw	r20, r26
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__addsf3>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	9a 83       	std	Y+2, r25	; 0x02
     998:	ab 83       	std	Y+3, r26	; 0x03
     99a:	bc 83       	std	Y+4, r27	; 0x04
	{
		controlValue = controlMinValue;
	}
	*/
	
	return controlValue;
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	ab 81       	ldd	r26, Y+3	; 0x03
     9a2:	bc 81       	ldd	r27, Y+4	; 0x04
}
     9a4:	bc 01       	movw	r22, r24
     9a6:	cd 01       	movw	r24, r26
     9a8:	62 96       	adiw	r28, 0x12	; 18
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	08 95       	ret

000009c6 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>:


double PIDController::adjustControlForServoLimits( double controlValueToAdjust )
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	2a 97       	sbiw	r28, 0x0a	; 10
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	9e 83       	std	Y+6, r25	; 0x06
     9dc:	8d 83       	std	Y+5, r24	; 0x05
     9de:	4f 83       	std	Y+7, r20	; 0x07
     9e0:	58 87       	std	Y+8, r21	; 0x08
     9e2:	69 87       	std	Y+9, r22	; 0x09
     9e4:	7a 87       	std	Y+10, r23	; 0x0a
	double controlValue = controlValueToAdjust;
     9e6:	8f 81       	ldd	r24, Y+7	; 0x07
     9e8:	98 85       	ldd	r25, Y+8	; 0x08
     9ea:	a9 85       	ldd	r26, Y+9	; 0x09
     9ec:	ba 85       	ldd	r27, Y+10	; 0x0a
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	ab 83       	std	Y+3, r26	; 0x03
     9f4:	bc 83       	std	Y+4, r27	; 0x04
	
	//TODO: when generalizing ensure to change this value. 
	controlValue += yawServoTrim;
     9f6:	8d 81       	ldd	r24, Y+5	; 0x05
     9f8:	9e 81       	ldd	r25, Y+6	; 0x06
     9fa:	fc 01       	movw	r30, r24
     9fc:	84 8d       	ldd	r24, Z+28	; 0x1c
     9fe:	95 8d       	ldd	r25, Z+29	; 0x1d
     a00:	a6 8d       	ldd	r26, Z+30	; 0x1e
     a02:	b7 8d       	ldd	r27, Z+31	; 0x1f
     a04:	9c 01       	movw	r18, r24
     a06:	ad 01       	movw	r20, r26
     a08:	69 81       	ldd	r22, Y+1	; 0x01
     a0a:	7a 81       	ldd	r23, Y+2	; 0x02
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__addsf3>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	ab 83       	std	Y+3, r26	; 0x03
     a1e:	bc 83       	std	Y+4, r27	; 0x04
	
	if (controlValue > maxYawServoControlValue)
     a20:	8d 81       	ldd	r24, Y+5	; 0x05
     a22:	9e 81       	ldd	r25, Y+6	; 0x06
     a24:	fc 01       	movw	r30, r24
     a26:	80 8d       	ldd	r24, Z+24	; 0x18
     a28:	91 8d       	ldd	r25, Z+25	; 0x19
     a2a:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a2c:	b3 8d       	ldd	r27, Z+27	; 0x1b
     a2e:	29 81       	ldd	r18, Y+1	; 0x01
     a30:	3a 81       	ldd	r19, Y+2	; 0x02
     a32:	4b 81       	ldd	r20, Y+3	; 0x03
     a34:	5c 81       	ldd	r21, Y+4	; 0x04
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__cmpsf2>
     a3e:	88 23       	and	r24, r24
     a40:	64 f4       	brge	.+24     	; 0xa5a <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0x94>
	{
		controlValue = maxYawServoControlValue;
     a42:	8d 81       	ldd	r24, Y+5	; 0x05
     a44:	9e 81       	ldd	r25, Y+6	; 0x06
     a46:	fc 01       	movw	r30, r24
     a48:	80 8d       	ldd	r24, Z+24	; 0x18
     a4a:	91 8d       	ldd	r25, Z+25	; 0x19
     a4c:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a4e:	b3 8d       	ldd	r27, Z+27	; 0x1b
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	ab 83       	std	Y+3, r26	; 0x03
     a56:	bc 83       	std	Y+4, r27	; 0x04
     a58:	1c c0       	rjmp	.+56     	; 0xa92 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	}else if (controlValue < minYawServoControlValue)
     a5a:	8d 81       	ldd	r24, Y+5	; 0x05
     a5c:	9e 81       	ldd	r25, Y+6	; 0x06
     a5e:	fc 01       	movw	r30, r24
     a60:	84 89       	ldd	r24, Z+20	; 0x14
     a62:	95 89       	ldd	r25, Z+21	; 0x15
     a64:	a6 89       	ldd	r26, Z+22	; 0x16
     a66:	b7 89       	ldd	r27, Z+23	; 0x17
     a68:	29 81       	ldd	r18, Y+1	; 0x01
     a6a:	3a 81       	ldd	r19, Y+2	; 0x02
     a6c:	4b 81       	ldd	r20, Y+3	; 0x03
     a6e:	5c 81       	ldd	r21, Y+4	; 0x04
     a70:	bc 01       	movw	r22, r24
     a72:	cd 01       	movw	r24, r26
     a74:	0e 94 bf 20 	call	0x417e	; 0x417e <__gesf2>
     a78:	18 16       	cp	r1, r24
     a7a:	5c f4       	brge	.+22     	; 0xa92 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	{
		controlValue = minYawServoControlValue;
     a7c:	8d 81       	ldd	r24, Y+5	; 0x05
     a7e:	9e 81       	ldd	r25, Y+6	; 0x06
     a80:	fc 01       	movw	r30, r24
     a82:	84 89       	ldd	r24, Z+20	; 0x14
     a84:	95 89       	ldd	r25, Z+21	; 0x15
     a86:	a6 89       	ldd	r26, Z+22	; 0x16
     a88:	b7 89       	ldd	r27, Z+23	; 0x17
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	9a 83       	std	Y+2, r25	; 0x02
     a8e:	ab 83       	std	Y+3, r26	; 0x03
     a90:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return controlValue;
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	ab 81       	ldd	r26, Y+3	; 0x03
     a98:	bc 81       	ldd	r27, Y+4	; 0x04
}
     a9a:	bc 01       	movw	r22, r24
     a9c:	cd 01       	movw	r24, r26
     a9e:	2a 96       	adiw	r28, 0x0a	; 10
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>:

void PIDController::tailRotorCollectiveOuterLoopUpdate()
{
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	6a 97       	sbiw	r28, 0x1a	; 26
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	9a 8f       	std	Y+26, r25	; 0x1a
     ad2:	89 8f       	std	Y+25, r24	; 0x19
	double yawProportional = calculateYawProportional(model->MagYawDegrees(), model->ReferenceMagYawDegrees());
     ad4:	89 8d       	ldd	r24, Y+25	; 0x19
     ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>
     ae2:	6b 01       	movw	r12, r22
     ae4:	7c 01       	movw	r14, r24
     ae6:	89 8d       	ldd	r24, Y+25	; 0x19
     ae8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	e9 8d       	ldd	r30, Y+25	; 0x19
     afa:	fa 8d       	ldd	r31, Y+26	; 0x1a
     afc:	97 01       	movw	r18, r14
     afe:	86 01       	movw	r16, r12
     b00:	ac 01       	movw	r20, r24
     b02:	bd 01       	movw	r22, r26
     b04:	cf 01       	movw	r24, r30
     b06:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	89 83       	std	Y+1, r24	; 0x01
     b10:	9a 83       	std	Y+2, r25	; 0x02
     b12:	ab 83       	std	Y+3, r26	; 0x03
     b14:	bc 83       	std	Y+4, r27	; 0x04
	double yawAntiWindup = calculateYawIntegralAntiWindup(model->YawControlBeforeServoLimitsAdjustment(), model->YawControl());
     b16:	89 8d       	ldd	r24, Y+25	; 0x19
     b18:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	91 81       	ldd	r25, Z+1	; 0x01
     b20:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK10helicopter5model11SystemModel10YawControlEv>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
     b28:	89 8d       	ldd	r24, Y+25	; 0x19
     b2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	0e 94 43 01 	call	0x286	; 0x286 <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	e9 8d       	ldd	r30, Y+25	; 0x19
     b3c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b3e:	97 01       	movw	r18, r14
     b40:	86 01       	movw	r16, r12
     b42:	ac 01       	movw	r20, r24
     b44:	bd 01       	movw	r22, r26
     b46:	cf 01       	movw	r24, r30
     b48:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEdd>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	8d 83       	std	Y+5, r24	; 0x05
     b52:	9e 83       	std	Y+6, r25	; 0x06
     b54:	af 83       	std	Y+7, r26	; 0x07
     b56:	b8 87       	std	Y+8, r27	; 0x08
	double weightedYawIntegral = calculateYawIntegral(yawProportional, model->YawIntegral(), yawAntiWindup);
     b58:	89 8d       	ldd	r24, Y+25	; 0x19
     b5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	ed 80       	ldd	r14, Y+5	; 0x05
     b6c:	fe 80       	ldd	r15, Y+6	; 0x06
     b6e:	0f 81       	ldd	r16, Y+7	; 0x07
     b70:	18 85       	ldd	r17, Y+8	; 0x08
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	ab 81       	ldd	r26, Y+3	; 0x03
     b78:	bc 81       	ldd	r27, Y+4	; 0x04
     b7a:	e9 8d       	ldd	r30, Y+25	; 0x19
     b7c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b7e:	67 01       	movw	r12, r14
     b80:	78 01       	movw	r14, r16
     b82:	89 01       	movw	r16, r18
     b84:	9a 01       	movw	r18, r20
     b86:	ac 01       	movw	r20, r24
     b88:	bd 01       	movw	r22, r26
     b8a:	cf 01       	movw	r24, r30
     b8c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	89 87       	std	Y+9, r24	; 0x09
     b96:	9a 87       	std	Y+10, r25	; 0x0a
     b98:	ab 87       	std	Y+11, r26	; 0x0b
     b9a:	bc 87       	std	Y+12, r27	; 0x0c
	double yawDerivativeError = calculateYawVelocityError(model->YawVelocityDegreesPerSecond(), model->ReferenceYawVelocityDegreesPerSecond());
     b9c:	89 8d       	ldd	r24, Y+25	; 0x19
     b9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>
     baa:	6b 01       	movw	r12, r22
     bac:	7c 01       	movw	r14, r24
     bae:	89 8d       	ldd	r24, Y+25	; 0x19
     bb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	e9 8d       	ldd	r30, Y+25	; 0x19
     bc2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bc4:	97 01       	movw	r18, r14
     bc6:	86 01       	movw	r16, r12
     bc8:	ac 01       	movw	r20, r24
     bca:	bd 01       	movw	r22, r26
     bcc:	cf 01       	movw	r24, r30
     bce:	0e 94 43 04 	call	0x886	; 0x886 <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	8d 87       	std	Y+13, r24	; 0x0d
     bd8:	9e 87       	std	Y+14, r25	; 0x0e
     bda:	af 87       	std	Y+15, r26	; 0x0f
     bdc:	b8 8b       	std	Y+16, r27	; 0x10
	double yawControlBeforeServoLimitsAdjustment = calculateYawControlValue(yawProportional, yawDerivativeError, weightedYawIntegral);
     bde:	e9 84       	ldd	r14, Y+9	; 0x09
     be0:	fa 84       	ldd	r15, Y+10	; 0x0a
     be2:	0b 85       	ldd	r16, Y+11	; 0x0b
     be4:	1c 85       	ldd	r17, Y+12	; 0x0c
     be6:	2d 85       	ldd	r18, Y+13	; 0x0d
     be8:	3e 85       	ldd	r19, Y+14	; 0x0e
     bea:	4f 85       	ldd	r20, Y+15	; 0x0f
     bec:	58 89       	ldd	r21, Y+16	; 0x10
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	ab 81       	ldd	r26, Y+3	; 0x03
     bf4:	bc 81       	ldd	r27, Y+4	; 0x04
     bf6:	e9 8d       	ldd	r30, Y+25	; 0x19
     bf8:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bfa:	67 01       	movw	r12, r14
     bfc:	78 01       	movw	r14, r16
     bfe:	89 01       	movw	r16, r18
     c00:	9a 01       	movw	r18, r20
     c02:	ac 01       	movw	r20, r24
     c04:	bd 01       	movw	r22, r26
     c06:	cf 01       	movw	r24, r30
     c08:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	89 8b       	std	Y+17, r24	; 0x11
     c12:	9a 8b       	std	Y+18, r25	; 0x12
     c14:	ab 8b       	std	Y+19, r26	; 0x13
     c16:	bc 8b       	std	Y+20, r27	; 0x14
	double yawControl = adjustControlForServoLimits(yawControlBeforeServoLimitsAdjustment);
     c18:	89 89       	ldd	r24, Y+17	; 0x11
     c1a:	9a 89       	ldd	r25, Y+18	; 0x12
     c1c:	ab 89       	ldd	r26, Y+19	; 0x13
     c1e:	bc 89       	ldd	r27, Y+20	; 0x14
     c20:	29 8d       	ldd	r18, Y+25	; 0x19
     c22:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c24:	ac 01       	movw	r20, r24
     c26:	bd 01       	movw	r22, r26
     c28:	c9 01       	movw	r24, r18
     c2a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	8d 8b       	std	Y+21, r24	; 0x15
     c34:	9e 8b       	std	Y+22, r25	; 0x16
     c36:	af 8b       	std	Y+23, r26	; 0x17
     c38:	b8 8f       	std	Y+24, r27	; 0x18
	
	model->YawControl(yawControl);
     c3a:	89 8d       	ldd	r24, Y+25	; 0x19
     c3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c3e:	fc 01       	movw	r30, r24
     c40:	20 81       	ld	r18, Z
     c42:	31 81       	ldd	r19, Z+1	; 0x01
     c44:	8d 89       	ldd	r24, Y+21	; 0x15
     c46:	9e 89       	ldd	r25, Y+22	; 0x16
     c48:	af 89       	ldd	r26, Y+23	; 0x17
     c4a:	b8 8d       	ldd	r27, Y+24	; 0x18
     c4c:	ac 01       	movw	r20, r24
     c4e:	bd 01       	movw	r22, r26
     c50:	c9 01       	movw	r24, r18
     c52:	0e 94 23 01 	call	0x246	; 0x246 <_ZN10helicopter5model11SystemModel10YawControlEd>
	model->YawControlBeforeServoLimitsAdjustment(yawControlBeforeServoLimitsAdjustment);
     c56:	89 8d       	ldd	r24, Y+25	; 0x19
     c58:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	89 89       	ldd	r24, Y+17	; 0x11
     c62:	9a 89       	ldd	r25, Y+18	; 0x12
     c64:	ab 89       	ldd	r26, Y+19	; 0x13
     c66:	bc 89       	ldd	r27, Y+20	; 0x14
     c68:	ac 01       	movw	r20, r24
     c6a:	bd 01       	movw	r22, r26
     c6c:	c9 01       	movw	r24, r18
     c6e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>
	model->YawIntegral(weightedYawIntegral);
     c72:	89 8d       	ldd	r24, Y+25	; 0x19
     c74:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c76:	fc 01       	movw	r30, r24
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	ab 85       	ldd	r26, Y+11	; 0x0b
     c82:	bc 85       	ldd	r27, Y+12	; 0x0c
     c84:	ac 01       	movw	r20, r24
     c86:	bd 01       	movw	r22, r26
     c88:	c9 01       	movw	r24, r18
     c8a:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN10helicopter5model11SystemModel11YawIntegralEd>
	model->YawProportional(yawProportional);
     c8e:	89 8d       	ldd	r24, Y+25	; 0x19
     c90:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c92:	fc 01       	movw	r30, r24
     c94:	20 81       	ld	r18, Z
     c96:	31 81       	ldd	r19, Z+1	; 0x01
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	ab 81       	ldd	r26, Y+3	; 0x03
     c9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ca0:	ac 01       	movw	r20, r24
     ca2:	bd 01       	movw	r22, r26
     ca4:	c9 01       	movw	r24, r18
     ca6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN10helicopter5model11SystemModel15YawProportionalEd>
	model->YawDerivativeError(yawDerivativeError);
     caa:	89 8d       	ldd	r24, Y+25	; 0x19
     cac:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cae:	fc 01       	movw	r30, r24
     cb0:	20 81       	ld	r18, Z
     cb2:	31 81       	ldd	r19, Z+1	; 0x01
     cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb8:	af 85       	ldd	r26, Y+15	; 0x0f
     cba:	b8 89       	ldd	r27, Y+16	; 0x10
     cbc:	ac 01       	movw	r20, r24
     cbe:	bd 01       	movw	r22, r26
     cc0:	c9 01       	movw	r24, r18
     cc2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>
	
	servoDriver->controlTailRotorCollective(yawControl);
     cc6:	89 8d       	ldd	r24, Y+25	; 0x19
     cc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cca:	fc 01       	movw	r30, r24
     ccc:	22 81       	ldd	r18, Z+2	; 0x02
     cce:	33 81       	ldd	r19, Z+3	; 0x03
     cd0:	8d 89       	ldd	r24, Y+21	; 0x15
     cd2:	9e 89       	ldd	r25, Y+22	; 0x16
     cd4:	af 89       	ldd	r26, Y+23	; 0x17
     cd6:	b8 8d       	ldd	r27, Y+24	; 0x18
     cd8:	ac 01       	movw	r20, r24
     cda:	bd 01       	movw	r22, r26
     cdc:	c9 01       	movw	r24, r18
     cde:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>
}
     ce2:	6a 96       	adiw	r28, 0x1a	; 26
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	08 95       	ret

00000d00 <_ZN10helicopter10controller13PIDController13addBlownFrameEv>:

void PIDController::addBlownFrame()
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	1f 92       	push	r1
     d06:	1f 92       	push	r1
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
	model->BlownFrames(model->BlownFrames() + 1);
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	9a 81       	ldd	r25, Y+2	; 0x02
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	0e 94 1b 02 	call	0x436	; 0x436 <_ZNK10helicopter5model11SystemModel11BlownFramesEv>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	a1 1d       	adc	r26, r1
     d26:	b1 1d       	adc	r27, r1
     d28:	29 81       	ldd	r18, Y+1	; 0x01
     d2a:	3a 81       	ldd	r19, Y+2	; 0x02
     d2c:	f9 01       	movw	r30, r18
     d2e:	20 81       	ld	r18, Z
     d30:	31 81       	ldd	r19, Z+1	; 0x01
     d32:	ac 01       	movw	r20, r24
     d34:	bd 01       	movw	r22, r26
     d36:	c9 01       	movw	r24, r18
     d38:	0e 94 31 02 	call	0x462	; 0x462 <_ZN10helicopter5model11SystemModel11BlownFramesEl>
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	1f 92       	push	r1
     d4c:	1f 92       	push	r1
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
				{
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	2a e0       	ldi	r18, 0x0A	; 10
     d5c:	32 e0       	ldi	r19, 0x02	; 2
     d5e:	fc 01       	movw	r30, r24
     d60:	31 83       	std	Z+1, r19	; 0x01
     d62:	20 83       	st	Z, r18
					
				}
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	99 27       	eor	r25, r25
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	21 f0       	breq	.+8      	; 0xd78 <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	1f 92       	push	r1
     d88:	1f 92       	push	r1
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	0e 94 a3 06 	call	0xd46	; 0xd46 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "CommonHeader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     db2:	1f 92       	push	r1
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9c 83       	std	Y+4, r25	; 0x04
     dba:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     dbc:	1a 82       	std	Y+2, r1	; 0x02
     dbe:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	fc 01       	movw	r30, r24
     dc6:	82 85       	ldd	r24, Z+10	; 0x0a
     dc8:	88 23       	and	r24, r24
     dca:	b9 f1       	breq	.+110    	; 0xe3a <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	fc 01       	movw	r30, r24
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	a4 81       	ldd	r26, Z+4	; 0x04
     dd8:	b5 81       	ldd	r27, Z+5	; 0x05
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	aa 1f       	adc	r26, r26
     de0:	bb 1f       	adc	r27, r27
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	aa 1f       	adc	r26, r26
     de8:	bb 1f       	adc	r27, r27
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	aa 1f       	adc	r26, r26
     df0:	bb 1f       	adc	r27, r27
     df2:	9c 01       	movw	r18, r24
     df4:	ad 01       	movw	r20, r26
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	94 e2       	ldi	r25, 0x24	; 36
     dfa:	a4 ef       	ldi	r26, 0xF4	; 244
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	bc 01       	movw	r22, r24
     e00:	cd 01       	movw	r24, r26
     e02:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
     e06:	da 01       	movw	r26, r20
     e08:	c9 01       	movw	r24, r18
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	a1 09       	sbc	r26, r1
     e0e:	b1 09       	sbc	r27, r1
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__floatunsisf>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <floor>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	3a c0       	rjmp	.+116    	; 0xeae <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	fc 01       	movw	r30, r24
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	a4 81       	ldd	r26, Z+4	; 0x04
     e46:	b5 81       	ldd	r27, Z+5	; 0x05
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	aa 1f       	adc	r26, r26
     e4e:	bb 1f       	adc	r27, r27
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	aa 1f       	adc	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	aa 1f       	adc	r26, r26
     e5e:	bb 1f       	adc	r27, r27
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	aa 1f       	adc	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	9c 01       	movw	r18, r24
     e6a:	ad 01       	movw	r20, r26
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	94 e2       	ldi	r25, 0x24	; 36
     e70:	a4 ef       	ldi	r26, 0xF4	; 244
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
     e7c:	da 01       	movw	r26, r20
     e7e:	c9 01       	movw	r24, r18
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	a1 09       	sbc	r26, r1
     e84:	b1 09       	sbc	r27, r1
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__floatunsisf>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <floor>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	fc 01       	movw	r30, r24
     eb4:	86 81       	ldd	r24, Z+6	; 0x06
     eb6:	88 23       	and	r24, r24
     eb8:	41 f5       	brne	.+80     	; 0xf0a <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     eba:	84 ec       	ldi	r24, 0xC4	; 196
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	29 81       	ldd	r18, Y+1	; 0x01
     ec0:	3a 81       	ldd	r19, Y+2	; 0x02
     ec2:	fc 01       	movw	r30, r24
     ec4:	31 83       	std	Z+1, r19	; 0x01
     ec6:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     ec8:	82 ec       	ldi	r24, 0xC2	; 194
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	22 ec       	ldi	r18, 0xC2	; 194
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	f9 01       	movw	r30, r18
     ed2:	20 81       	ld	r18, Z
     ed4:	26 60       	ori	r18, 0x06	; 6
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	fc 01       	movw	r30, r24
     ee0:	82 85       	ldd	r24, Z+10	; 0x0a
     ee2:	88 23       	and	r24, r24
     ee4:	49 f0       	breq	.+18     	; 0xef8 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     ee6:	80 ec       	ldi	r24, 0xC0	; 192
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	20 ec       	ldi	r18, 0xC0	; 192
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	f9 01       	movw	r30, r18
     ef0:	20 81       	ld	r18, Z
     ef2:	22 60       	ori	r18, 0x02	; 2
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     ef8:	81 ec       	ldi	r24, 0xC1	; 193
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	21 ec       	ldi	r18, 0xC1	; 193
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	28 61       	ori	r18, 0x18	; 24
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
	}
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>:

int SerialDriver::transmitByte(byte byteToSend)
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6b 83       	std	Y+3, r22	; 0x03
	if (uartPort == Zero)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	fc 01       	movw	r30, r24
     f2e:	86 81       	ldd	r24, Z+6	; 0x06
     f30:	88 23       	and	r24, r24
     f32:	09 f0       	breq	.+2      	; 0xf36 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x1e>
     f34:	42 c0       	rjmp	.+132    	; 0xfba <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa2>
	{
		if (isTimeoutEnabled)
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	fc 01       	movw	r30, r24
     f3c:	81 85       	ldd	r24, Z+9	; 0x09
     f3e:	88 23       	and	r24, r24
     f40:	09 f1       	breq	.+66     	; 0xf84 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			timer->startTimer();
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	87 81       	ldd	r24, Z+7	; 0x07
     f4a:	90 85       	ldd	r25, Z+8	; 0x08
     f4c:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <_ZN10helicopter4util5Timer10startTimerEv>
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     f50:	19 c0       	rjmp	.+50     	; 0xf84 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	fc 01       	movw	r30, r24
     f58:	81 85       	ldd	r24, Z+9	; 0x09
     f5a:	88 23       	and	r24, r24
     f5c:	a1 f0       	breq	.+40     	; 0xf86 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
			{
				if (timer->hasTimedout())
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	fc 01       	movw	r30, r24
     f64:	87 81       	ldd	r24, Z+7	; 0x07
     f66:	90 85       	ldd	r25, Z+8	; 0x08
     f68:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_ZN10helicopter4util5Timer11hasTimedoutEv>
     f6c:	88 23       	and	r24, r24
     f6e:	59 f0       	breq	.+22     	; 0xf86 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
				{
					timer->stopTimer();
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	fc 01       	movw	r30, r24
     f76:	87 81       	ldd	r24, Z+7	; 0x07
     f78:	90 85       	ldd	r25, Z+8	; 0x08
     f7a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <_ZN10helicopter4util5Timer9stopTimerEv>
					return -1;
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	1d c0       	rjmp	.+58     	; 0xfbe <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa6>
		{
			timer->startTimer();
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     f84:	00 00       	nop
     f86:	80 ec       	ldi	r24, 0xC0	; 192
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 72       	andi	r24, 0x20	; 32
     f94:	99 27       	eor	r25, r25
     f96:	21 e0       	ldi	r18, 0x01	; 1
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	09 f0       	breq	.+2      	; 0xf9e <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x86>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	22 23       	and	r18, r18
     fa0:	c1 f6       	brne	.-80     	; 0xf52 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x3a>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     fa2:	86 ec       	ldi	r24, 0xC6	; 198
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	2b 81       	ldd	r18, Y+3	; 0x03
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
		
		timer->stopTimer();
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	87 81       	ldd	r24, Z+7	; 0x07
     fb4:	90 85       	ldd	r25, Z+8	; 0x08
     fb6:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <_ZN10helicopter4util5Timer9stopTimerEv>
	}
	
	return 0;
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6>
     fd0:	1f 92       	push	r1
     fd2:	1f 92       	push	r1
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	7d 83       	std	Y+5, r23	; 0x05
     fde:	6c 83       	std	Y+4, r22	; 0x04
	bool hasDataOverrun = false;
     fe0:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	fc 01       	movw	r30, r24
     fe8:	86 81       	ldd	r24, Z+6	; 0x06
     fea:	88 23       	and	r24, r24
     fec:	09 f0       	breq	.+2      	; 0xff0 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x26>
     fee:	41 c0       	rjmp	.+130    	; 0x1072 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xa8>
	{
		
		if (isTimeoutEnabled)
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	fc 01       	movw	r30, r24
     ff6:	81 85       	ldd	r24, Z+9	; 0x09
     ff8:	88 23       	and	r24, r24
     ffa:	d9 f0       	breq	.+54     	; 0x1032 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			timer->startTimer();
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	fc 01       	movw	r30, r24
    1002:	87 81       	ldd	r24, Z+7	; 0x07
    1004:	90 85       	ldd	r25, Z+8	; 0x08
    1006:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <_ZN10helicopter4util5Timer10startTimerEv>
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
    100a:	13 c0       	rjmp	.+38     	; 0x1032 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			if (timer->hasTimedout())
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	fc 01       	movw	r30, r24
    1012:	87 81       	ldd	r24, Z+7	; 0x07
    1014:	90 85       	ldd	r25, Z+8	; 0x08
    1016:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_ZN10helicopter4util5Timer11hasTimedoutEv>
    101a:	88 23       	and	r24, r24
    101c:	59 f0       	breq	.+22     	; 0x1034 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6a>
			{
				timer->stopTimer();
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	fc 01       	movw	r30, r24
    1024:	87 81       	ldd	r24, Z+7	; 0x07
    1026:	90 85       	ldd	r25, Z+8	; 0x08
    1028:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <_ZN10helicopter4util5Timer9stopTimerEv>
				return -1;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	9f ef       	ldi	r25, 0xFF	; 255
    1030:	29 c0       	rjmp	.+82     	; 0x1084 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xba>
			timer->startTimer();
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
    1032:	00 00       	nop
    1034:	80 ec       	ldi	r24, 0xC0	; 192
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	fc 01       	movw	r30, r24
    103a:	80 81       	ld	r24, Z
    103c:	80 95       	com	r24
    103e:	88 1f       	adc	r24, r24
    1040:	88 27       	eor	r24, r24
    1042:	88 1f       	adc	r24, r24
    1044:	88 23       	and	r24, r24
    1046:	11 f7       	brne	.-60     	; 0x100c <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x42>
			}*/
		}
		
		//determine if there has been a data overrun.
		//Swallow the overrun because nothing can be done.
		hasDataOverrun = (UCSR0A & (1 << DOR0)) != 0;
    1048:	80 ec       	ldi	r24, 0xC0	; 192
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	fc 01       	movw	r30, r24
    104e:	80 81       	ld	r24, Z
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	88 70       	andi	r24, 0x08	; 8
    1056:	99 27       	eor	r25, r25
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	09 f4       	brne	.+2      	; 0x1060 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x96>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	29 83       	std	Y+1, r18	; 0x01
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
    1062:	86 ec       	ldi	r24, 0xC6	; 198
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	fc 01       	movw	r30, r24
    1068:	20 81       	ld	r18, Z
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
	}
	
	timer->stopTimer();
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	fc 01       	movw	r30, r24
    1078:	87 81       	ldd	r24, Z+7	; 0x07
    107a:	90 85       	ldd	r25, Z+8	; 0x08
    107c:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return 0;
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <_ZN10helicopter7drivers11ServoDriverD1Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	1f 92       	push	r1
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
				{
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	28 e1       	ldi	r18, 0x18	; 24
    10aa:	32 e0       	ldi	r19, 0x02	; 2
    10ac:	fc 01       	movw	r30, r24
    10ae:	31 83       	std	Z+1, r19	; 0x01
    10b0:	20 83       	st	Z, r18
					
				}
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	81 70       	andi	r24, 0x01	; 1
    10b8:	99 27       	eor	r25, r25
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <_ZN10helicopter7drivers11ServoDriverD1Ev+0x32>
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <_ZN10helicopter7drivers11ServoDriverD0Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	1f 92       	push	r1
    10d6:	1f 92       	push	r1
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN10helicopter7drivers11ServoDriverD1Ev>
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>:
#include "ServoDriver.h"

using namespace helicopter::drivers;

void ServoDriver::controlTailRotorCollective(double controlTailRotorCollective)
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	2a 97       	sbiw	r28, 0x0a	; 10
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	4f 83       	std	Y+7, r20	; 0x07
    1114:	58 87       	std	Y+8, r21	; 0x08
    1116:	69 87       	std	Y+9, r22	; 0x09
    1118:	7a 87       	std	Y+10, r23	; 0x0a
	double control = controlTailRotorCollective;
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
    111c:	98 85       	ldd	r25, Y+8	; 0x08
    111e:	a9 85       	ldd	r26, Y+9	; 0x09
    1120:	ba 85       	ldd	r27, Y+10	; 0x0a
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	ab 83       	std	Y+3, r26	; 0x03
    1128:	bc 83       	std	Y+4, r27	; 0x04
	
	if (control > maxControlValue)
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	fc 01       	movw	r30, r24
    1130:	86 81       	ldd	r24, Z+6	; 0x06
    1132:	97 81       	ldd	r25, Z+7	; 0x07
    1134:	a0 85       	ldd	r26, Z+8	; 0x08
    1136:	b1 85       	ldd	r27, Z+9	; 0x09
    1138:	29 81       	ldd	r18, Y+1	; 0x01
    113a:	3a 81       	ldd	r19, Y+2	; 0x02
    113c:	4b 81       	ldd	r20, Y+3	; 0x03
    113e:	5c 81       	ldd	r21, Y+4	; 0x04
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__cmpsf2>
    1148:	88 23       	and	r24, r24
    114a:	5c f4       	brge	.+22     	; 0x1162 <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0x68>
	{
		control = maxControlValue;
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	9e 81       	ldd	r25, Y+6	; 0x06
    1150:	fc 01       	movw	r30, r24
    1152:	86 81       	ldd	r24, Z+6	; 0x06
    1154:	97 81       	ldd	r25, Z+7	; 0x07
    1156:	a0 85       	ldd	r26, Z+8	; 0x08
    1158:	b1 85       	ldd	r27, Z+9	; 0x09
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	ab 83       	std	Y+3, r26	; 0x03
    1160:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	if (control < minControlValue)
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	fc 01       	movw	r30, r24
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	a4 81       	ldd	r26, Z+4	; 0x04
    116e:	b5 81       	ldd	r27, Z+5	; 0x05
    1170:	29 81       	ldd	r18, Y+1	; 0x01
    1172:	3a 81       	ldd	r19, Y+2	; 0x02
    1174:	4b 81       	ldd	r20, Y+3	; 0x03
    1176:	5c 81       	ldd	r21, Y+4	; 0x04
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	0e 94 bf 20 	call	0x417e	; 0x417e <__gesf2>
    1180:	18 16       	cp	r1, r24
    1182:	5c f4       	brge	.+22     	; 0x119a <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0xa0>
	{
		control = minControlValue;
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	fc 01       	movw	r30, r24
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	a4 81       	ldd	r26, Z+4	; 0x04
    1190:	b5 81       	ldd	r27, Z+5	; 0x05
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	ab 83       	std	Y+3, r26	; 0x03
    1198:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	controlTailRotorCollectiveImpl(control);
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	fc 01       	movw	r30, r24
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	04 96       	adiw	r24, 0x04	; 4
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 81       	ld	r18, Z
    11aa:	31 81       	ldd	r19, Z+1	; 0x01
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	ab 81       	ldd	r26, Y+3	; 0x03
    11b2:	bc 81       	ldd	r27, Y+4	; 0x04
    11b4:	ed 81       	ldd	r30, Y+5	; 0x05
    11b6:	fe 81       	ldd	r31, Y+6	; 0x06
    11b8:	ac 01       	movw	r20, r24
    11ba:	bd 01       	movw	r22, r26
    11bc:	cf 01       	movw	r24, r30
    11be:	f9 01       	movw	r30, r18
    11c0:	19 95       	eicall
}
    11c2:	2a 96       	adiw	r28, 0x0a	; 10
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>:


void ServoDriver::controlTailRotorCollectiveImpl(double controlTailRotorCollective)
{
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	00 d0       	rcall	.+0      	; 0x11da <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x8>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	4b 83       	std	Y+3, r20	; 0x03
    11e6:	5c 83       	std	Y+4, r21	; 0x04
    11e8:	6d 83       	std	Y+5, r22	; 0x05
    11ea:	7e 83       	std	Y+6, r23	; 0x06
	
    11ec:	26 96       	adiw	r28, 0x06	; 6
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	1f 92       	push	r1
    1204:	1f 92       	push	r1
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	20 e7       	ldi	r18, 0x70	; 112
    1214:	32 e0       	ldi	r19, 0x02	; 2
    1216:	fc 01       	movw	r30, r24
    1218:	31 83       	std	Z+1, r19	; 0x01
    121a:	20 83       	st	Z, r18
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	99 27       	eor	r25, r25
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	21 f0       	breq	.+8      	; 0x1230 <_ZN10helicopter5tasks4TaskD1Ev+0x32>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <_ZN10helicopter5tasks4TaskD0Ev>:
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	1f 92       	push	r1
    1240:	1f 92       	push	r1
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>:
					
				int ledToBlink;
				
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	28 97       	sbiw	r28, 0x08	; 8
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	7c 83       	std	Y+4, r23	; 0x04
    127e:	6b 83       	std	Y+3, r22	; 0x03
    1280:	5e 83       	std	Y+6, r21	; 0x06
    1282:	4d 83       	std	Y+5, r20	; 0x05
    1284:	38 87       	std	Y+8, r19	; 0x08
    1286:	2f 83       	std	Y+7, r18	; 0x07
				Task(delay, period),
				isOff(false),
				ledToBlink(ledToBlink)
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	4d 81       	ldd	r20, Y+5	; 0x05
    128e:	5e 81       	ldd	r21, Y+6	; 0x06
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	b9 01       	movw	r22, r18
    1296:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN10helicopter5tasks4TaskC1Eii>
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	22 e2       	ldi	r18, 0x22	; 34
    12a0:	32 e0       	ldi	r19, 0x02	; 2
    12a2:	fc 01       	movw	r30, r24
    12a4:	31 83       	std	Z+1, r19	; 0x01
    12a6:	20 83       	st	Z, r18
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	fc 01       	movw	r30, r24
    12ae:	17 82       	std	Z+7, r1	; 0x07
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	2f 81       	ldd	r18, Y+7	; 0x07
    12b6:	38 85       	ldd	r19, Y+8	; 0x08
    12b8:	fc 01       	movw	r30, r24
    12ba:	31 87       	std	Z+9, r19	; 0x09
    12bc:	20 87       	std	Z+8, r18	; 0x08
			{
					
			}
    12be:	28 96       	adiw	r28, 0x08	; 8
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
	
			void init()
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	1f 92       	push	r1
    12d6:	1f 92       	push	r1
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
			{
				DDRA |= (1<<ledToBlink);
    12e0:	81 e2       	ldi	r24, 0x21	; 33
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	21 e2       	ldi	r18, 0x21	; 33
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f9 01       	movw	r30, r18
    12ea:	20 81       	ld	r18, Z
    12ec:	62 2f       	mov	r22, r18
    12ee:	29 81       	ldd	r18, Y+1	; 0x01
    12f0:	3a 81       	ldd	r19, Y+2	; 0x02
    12f2:	f9 01       	movw	r30, r18
    12f4:	40 85       	ldd	r20, Z+8	; 0x08
    12f6:	51 85       	ldd	r21, Z+9	; 0x09
    12f8:	21 e0       	ldi	r18, 0x01	; 1
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	04 2e       	mov	r0, r20
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x34>
    1300:	22 0f       	add	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x30>
    1308:	26 2b       	or	r18, r22
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
			}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	1f 92       	push	r1
    131e:	1f 92       	push	r1
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
				if (isOff)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	fc 01       	movw	r30, r24
    132e:	87 81       	ldd	r24, Z+7	; 0x07
    1330:	88 23       	and	r24, r24
    1332:	e9 f0       	breq	.+58     	; 0x136e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x56>
				{
					//Turn On the LED
					PORTA &= ~(1<<ledToBlink);
    1334:	82 e2       	ldi	r24, 0x22	; 34
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	22 e2       	ldi	r18, 0x22	; 34
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	62 2f       	mov	r22, r18
    1342:	29 81       	ldd	r18, Y+1	; 0x01
    1344:	3a 81       	ldd	r19, Y+2	; 0x02
    1346:	f9 01       	movw	r30, r18
    1348:	40 85       	ldd	r20, Z+8	; 0x08
    134a:	51 85       	ldd	r21, Z+9	; 0x09
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	04 2e       	mov	r0, r20
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x40>
    1354:	22 0f       	add	r18, r18
    1356:	33 1f       	adc	r19, r19
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x3c>
    135c:	20 95       	com	r18
    135e:	26 23       	and	r18, r22
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
					isOff = false;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	fc 01       	movw	r30, r24
    136a:	17 82       	std	Z+7, r1	; 0x07
    136c:	1c c0       	rjmp	.+56     	; 0x13a6 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x8e>
				}else
				{
					//Turn Off the LED
					PORTA |= (1<<ledToBlink);
    136e:	82 e2       	ldi	r24, 0x22	; 34
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	22 e2       	ldi	r18, 0x22	; 34
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	f9 01       	movw	r30, r18
    1378:	20 81       	ld	r18, Z
    137a:	62 2f       	mov	r22, r18
    137c:	29 81       	ldd	r18, Y+1	; 0x01
    137e:	3a 81       	ldd	r19, Y+2	; 0x02
    1380:	f9 01       	movw	r30, r18
    1382:	40 85       	ldd	r20, Z+8	; 0x08
    1384:	51 85       	ldd	r21, Z+9	; 0x09
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	04 2e       	mov	r0, r20
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x7a>
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x76>
    1396:	26 2b       	or	r18, r22
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
					isOff = true;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	fc 01       	movw	r30, r24
    13a4:	27 83       	std	Z+7, r18	; 0x07
				}
			}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEv>:
				 * Detects if the processing was completed before the next scheduler triggered.
				 * @return True if the scheduler timer triggered again before the tasks were fully processes,
				 * False if all the tasks were finished processing (i.e. the dispatch method finished) before
				 * the timer triggered again.
				 */
				bool hasBlownFrame()
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	1f 92       	push	r1
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
				{
					return blowFrameDetected;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	fc 01       	movw	r30, r24
    13c6:	82 8d       	ldd	r24, Z+26	; 0x1a
				}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>:
				 * @timeoutMilliseconds the milliseconds that should go by before the
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	2c 97       	sbiw	r28, 0x0c	; 12
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	4b 83       	std	Y+3, r20	; 0x03
    13f4:	5c 83       	std	Y+4, r21	; 0x04
    13f6:	6d 83       	std	Y+5, r22	; 0x05
    13f8:	7e 83       	std	Y+6, r23	; 0x06
    13fa:	38 87       	std	Y+8, r19	; 0x08
    13fc:	2f 83       	std	Y+7, r18	; 0x07
    13fe:	e9 86       	std	Y+9, r14	; 0x09
    1400:	fa 86       	std	Y+10, r15	; 0x0a
    1402:	0b 87       	std	Y+11, r16	; 0x0b
    1404:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
    1406:	29 81       	ldd	r18, Y+1	; 0x01
    1408:	3a 81       	ldd	r19, Y+2	; 0x02
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	ad 81       	ldd	r26, Y+5	; 0x05
    1410:	be 81       	ldd	r27, Y+6	; 0x06
    1412:	f9 01       	movw	r30, r18
    1414:	80 83       	st	Z, r24
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	a2 83       	std	Z+2, r26	; 0x02
    141a:	b3 83       	std	Z+3, r27	; 0x03
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	2f 81       	ldd	r18, Y+7	; 0x07
    1422:	38 85       	ldd	r19, Y+8	; 0x08
    1424:	fc 01       	movw	r30, r24
    1426:	35 83       	std	Z+5, r19	; 0x05
    1428:	24 83       	std	Z+4, r18	; 0x04
    142a:	29 85       	ldd	r18, Y+9	; 0x09
    142c:	3a 85       	ldd	r19, Y+10	; 0x0a
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	fc 01       	movw	r30, r24
    1434:	37 83       	std	Z+7, r19	; 0x07
    1436:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
    1438:	2c 96       	adiw	r28, 0x0c	; 12
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	08 95       	ret

00001452 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>:
				 * only used when enableTimeout = true.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
    1452:	cf 92       	push	r12
    1454:	ef 92       	push	r14
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	2b 97       	sbiw	r28, 0x0b	; 11
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	4b 83       	std	Y+3, r20	; 0x03
    1474:	5c 83       	std	Y+4, r21	; 0x04
    1476:	6d 83       	std	Y+5, r22	; 0x05
    1478:	7e 83       	std	Y+6, r23	; 0x06
    147a:	2f 83       	std	Y+7, r18	; 0x07
    147c:	19 87       	std	Y+9, r17	; 0x09
    147e:	08 87       	std	Y+8, r16	; 0x08
    1480:	ea 86       	std	Y+10, r14	; 0x0a
    1482:	cb 86       	std	Y+11, r12	; 0x0b
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				timer(timer),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	2a e0       	ldi	r18, 0x0A	; 10
    148a:	32 e0       	ldi	r19, 0x02	; 2
    148c:	fc 01       	movw	r30, r24
    148e:	31 83       	std	Z+1, r19	; 0x01
    1490:	20 83       	st	Z, r18
    1492:	29 81       	ldd	r18, Y+1	; 0x01
    1494:	3a 81       	ldd	r19, Y+2	; 0x02
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	ad 81       	ldd	r26, Y+5	; 0x05
    149c:	be 81       	ldd	r27, Y+6	; 0x06
    149e:	f9 01       	movw	r30, r18
    14a0:	82 83       	std	Z+2, r24	; 0x02
    14a2:	93 83       	std	Z+3, r25	; 0x03
    14a4:	a4 83       	std	Z+4, r26	; 0x04
    14a6:	b5 83       	std	Z+5, r27	; 0x05
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	2f 81       	ldd	r18, Y+7	; 0x07
    14ae:	fc 01       	movw	r30, r24
    14b0:	26 83       	std	Z+6, r18	; 0x06
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	28 85       	ldd	r18, Y+8	; 0x08
    14b8:	39 85       	ldd	r19, Y+9	; 0x09
    14ba:	fc 01       	movw	r30, r24
    14bc:	30 87       	std	Z+8, r19	; 0x08
    14be:	27 83       	std	Z+7, r18	; 0x07
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    14c6:	fc 01       	movw	r30, r24
    14c8:	21 87       	std	Z+9, r18	; 0x09
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    14d0:	fc 01       	movw	r30, r24
    14d2:	22 87       	std	Z+10, r18	; 0x0a
				{
					
				}
    14d4:	2b 96       	adiw	r28, 0x0b	; 11
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ef 90       	pop	r14
    14ea:	cf 90       	pop	r12
    14ec:	08 95       	ret

000014ee <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * at the same time interval (i.e. 20 milliseconds) for both transmitting a byte as well
				 * as receiving a byte.
				 * @param serialDriver the driver used to communicate with the serial port
				 * which is used to communicate with the Ground Control Station.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver):
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
    14f4:	1f 92       	push	r1
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	7c 83       	std	Y+4, r23	; 0x04
    1500:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	fc 01       	movw	r30, r24
    150c:	31 83       	std	Z+1, r19	; 0x01
    150e:	20 83       	st	Z, r18
					{}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <_ZN10helicopter5model11SystemModelC1Ev>:
			
			long numOfFramesBlown;
			
			public:
			
			SystemModel():
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	1f 92       	push	r1
    1524:	1f 92       	push	r1
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
			yawProportional(0),
			yawDerivativeError(0),
			timeouts(0),
			unrecognizedMsgTypes(0),
			checksumErrors(0),
			numOfFramesBlown(0)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	fc 01       	movw	r30, r24
    1534:	10 82       	st	Z, r1
    1536:	11 82       	std	Z+1, r1	; 0x01
    1538:	12 82       	std	Z+2, r1	; 0x02
    153a:	13 82       	std	Z+3, r1	; 0x03
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	fc 01       	movw	r30, r24
    1542:	14 82       	std	Z+4, r1	; 0x04
    1544:	15 82       	std	Z+5, r1	; 0x05
    1546:	16 82       	std	Z+6, r1	; 0x06
    1548:	17 82       	std	Z+7, r1	; 0x07
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	fc 01       	movw	r30, r24
    1550:	10 86       	std	Z+8, r1	; 0x08
    1552:	11 86       	std	Z+9, r1	; 0x09
    1554:	12 86       	std	Z+10, r1	; 0x0a
    1556:	13 86       	std	Z+11, r1	; 0x0b
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	fc 01       	movw	r30, r24
    155e:	14 86       	std	Z+12, r1	; 0x0c
    1560:	15 86       	std	Z+13, r1	; 0x0d
    1562:	16 86       	std	Z+14, r1	; 0x0e
    1564:	17 86       	std	Z+15, r1	; 0x0f
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	fc 01       	movw	r30, r24
    156c:	10 8a       	std	Z+16, r1	; 0x10
    156e:	11 8a       	std	Z+17, r1	; 0x11
    1570:	12 8a       	std	Z+18, r1	; 0x12
    1572:	13 8a       	std	Z+19, r1	; 0x13
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	fc 01       	movw	r30, r24
    157a:	14 8a       	std	Z+20, r1	; 0x14
    157c:	15 8a       	std	Z+21, r1	; 0x15
    157e:	16 8a       	std	Z+22, r1	; 0x16
    1580:	17 8a       	std	Z+23, r1	; 0x17
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	fc 01       	movw	r30, r24
    1588:	10 8e       	std	Z+24, r1	; 0x18
    158a:	11 8e       	std	Z+25, r1	; 0x19
    158c:	12 8e       	std	Z+26, r1	; 0x1a
    158e:	13 8e       	std	Z+27, r1	; 0x1b
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	fc 01       	movw	r30, r24
    1596:	14 8e       	std	Z+28, r1	; 0x1c
    1598:	15 8e       	std	Z+29, r1	; 0x1d
    159a:	16 8e       	std	Z+30, r1	; 0x1e
    159c:	17 8e       	std	Z+31, r1	; 0x1f
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	fc 01       	movw	r30, r24
    15a4:	10 a2       	std	Z+32, r1	; 0x20
    15a6:	11 a2       	std	Z+33, r1	; 0x21
    15a8:	12 a2       	std	Z+34, r1	; 0x22
    15aa:	13 a2       	std	Z+35, r1	; 0x23
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	fc 01       	movw	r30, r24
    15b2:	14 a2       	std	Z+36, r1	; 0x24
    15b4:	15 a2       	std	Z+37, r1	; 0x25
    15b6:	16 a2       	std	Z+38, r1	; 0x26
    15b8:	17 a2       	std	Z+39, r1	; 0x27
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	fc 01       	movw	r30, r24
    15c0:	10 a6       	std	Z+40, r1	; 0x28
    15c2:	11 a6       	std	Z+41, r1	; 0x29
    15c4:	12 a6       	std	Z+42, r1	; 0x2a
    15c6:	13 a6       	std	Z+43, r1	; 0x2b
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	fc 01       	movw	r30, r24
    15ce:	14 a6       	std	Z+44, r1	; 0x2c
    15d0:	15 a6       	std	Z+45, r1	; 0x2d
    15d2:	16 a6       	std	Z+46, r1	; 0x2e
    15d4:	17 a6       	std	Z+47, r1	; 0x2f
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	fc 01       	movw	r30, r24
    15dc:	10 aa       	std	Z+48, r1	; 0x30
    15de:	11 aa       	std	Z+49, r1	; 0x31
    15e0:	12 aa       	std	Z+50, r1	; 0x32
    15e2:	13 aa       	std	Z+51, r1	; 0x33
			{
				
			}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>:
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x8>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	4b 83       	std	Y+3, r20	; 0x03
    1600:	5c 83       	std	Y+4, r21	; 0x04
    1602:	6d 83       	std	Y+5, r22	; 0x05
    1604:	7e 83       	std	Y+6, r23	; 0x06
    1606:	29 81       	ldd	r18, Y+1	; 0x01
    1608:	3a 81       	ldd	r19, Y+2	; 0x02
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	ad 81       	ldd	r26, Y+5	; 0x05
    1610:	be 81       	ldd	r27, Y+6	; 0x06
    1612:	f9 01       	movw	r30, r18
    1614:	84 83       	std	Z+4, r24	; 0x04
    1616:	95 83       	std	Z+5, r25	; 0x05
    1618:	a6 83       	std	Z+6, r26	; 0x06
    161a:	b7 83       	std	Z+7, r27	; 0x07
    161c:	26 96       	adiw	r28, 0x06	; 6
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	00 d0       	rcall	.+0      	; 0x1634 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	4b 83       	std	Y+3, r20	; 0x03
    1640:	5c 83       	std	Y+4, r21	; 0x04
    1642:	6d 83       	std	Y+5, r22	; 0x05
    1644:	7e 83       	std	Y+6, r23	; 0x06
    1646:	29 81       	ldd	r18, Y+1	; 0x01
    1648:	3a 81       	ldd	r19, Y+2	; 0x02
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	ad 81       	ldd	r26, Y+5	; 0x05
    1650:	be 81       	ldd	r27, Y+6	; 0x06
    1652:	f9 01       	movw	r30, r18
    1654:	84 8b       	std	Z+20, r24	; 0x14
    1656:	95 8b       	std	Z+21, r25	; 0x15
    1658:	a6 8b       	std	Z+22, r26	; 0x16
    165a:	b7 8b       	std	Z+23, r27	; 0x17
    165c:	26 96       	adiw	r28, 0x06	; 6
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <_ZN10helicopter7drivers11ServoDriverC1Ev>:
				double minControlValue;
				double maxControlValue;
					
				
			public:
				ServoDriver(): 
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	1f 92       	push	r1
    1674:	1f 92       	push	r1
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
					minControlValue(0), 
					maxControlValue(0)
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	28 e1       	ldi	r18, 0x18	; 24
    1684:	32 e0       	ldi	r19, 0x02	; 2
    1686:	fc 01       	movw	r30, r24
    1688:	31 83       	std	Z+1, r19	; 0x01
    168a:	20 83       	st	Z, r18
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	fc 01       	movw	r30, r24
    1692:	12 82       	std	Z+2, r1	; 0x02
    1694:	13 82       	std	Z+3, r1	; 0x03
    1696:	14 82       	std	Z+4, r1	; 0x04
    1698:	15 82       	std	Z+5, r1	; 0x05
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	fc 01       	movw	r30, r24
    16a0:	16 82       	std	Z+6, r1	; 0x06
    16a2:	17 82       	std	Z+7, r1	; 0x07
    16a4:	10 86       	std	Z+8, r1	; 0x08
    16a6:	11 86       	std	Z+9, r1	; 0x09
				{
					
				}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	08 95       	ret

000016b2 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>:
				}
				
				/**
				 * Gain value applied to the yaw proportional error
				 */
				void setYawProportionalGain(double yawProportionalGain)
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x8>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	4b 83       	std	Y+3, r20	; 0x03
    16c4:	5c 83       	std	Y+4, r21	; 0x04
    16c6:	6d 83       	std	Y+5, r22	; 0x05
    16c8:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawProportionalGain = yawProportionalGain;
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	3a 81       	ldd	r19, Y+2	; 0x02
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	ad 81       	ldd	r26, Y+5	; 0x05
    16d4:	be 81       	ldd	r27, Y+6	; 0x06
    16d6:	f9 01       	movw	r30, r18
    16d8:	84 87       	std	Z+12, r24	; 0x0c
    16da:	95 87       	std	Z+13, r25	; 0x0d
    16dc:	a6 87       	std	Z+14, r26	; 0x0e
    16de:	b7 87       	std	Z+15, r27	; 0x0f
				}
    16e0:	26 96       	adiw	r28, 0x06	; 6
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	08 95       	ret

000016f2 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>:
				
				/**
				 * Gain value applied to the yaw integral
				 */
				void setYawIntegralGain(double yawIntegralGain)
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x8>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	4b 83       	std	Y+3, r20	; 0x03
    1704:	5c 83       	std	Y+4, r21	; 0x04
    1706:	6d 83       	std	Y+5, r22	; 0x05
    1708:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawIntegralGain = yawIntegralGain;
    170a:	29 81       	ldd	r18, Y+1	; 0x01
    170c:	3a 81       	ldd	r19, Y+2	; 0x02
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	ad 81       	ldd	r26, Y+5	; 0x05
    1714:	be 81       	ldd	r27, Y+6	; 0x06
    1716:	f9 01       	movw	r30, r18
    1718:	84 83       	std	Z+4, r24	; 0x04
    171a:	95 83       	std	Z+5, r25	; 0x05
    171c:	a6 83       	std	Z+6, r26	; 0x06
    171e:	b7 83       	std	Z+7, r27	; 0x07
				}
    1720:	26 96       	adiw	r28, 0x06	; 6
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>:
				
				/**
				 * Gain value applied to the derivative
				 */
				void setYawDerivativeGain(double yawDerivativeGain)
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	00 d0       	rcall	.+0      	; 0x1738 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x8>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	4b 83       	std	Y+3, r20	; 0x03
    1744:	5c 83       	std	Y+4, r21	; 0x04
    1746:	6d 83       	std	Y+5, r22	; 0x05
    1748:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawDerivativeGain = yawDerivativeGain;
    174a:	29 81       	ldd	r18, Y+1	; 0x01
    174c:	3a 81       	ldd	r19, Y+2	; 0x02
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	ad 81       	ldd	r26, Y+5	; 0x05
    1754:	be 81       	ldd	r27, Y+6	; 0x06
    1756:	f9 01       	movw	r30, r18
    1758:	80 87       	std	Z+8, r24	; 0x08
    175a:	91 87       	std	Z+9, r25	; 0x09
    175c:	a2 87       	std	Z+10, r26	; 0x0a
    175e:	b3 87       	std	Z+11, r27	; 0x0b
				}
    1760:	26 96       	adiw	r28, 0x06	; 6
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>:
				
				/**
				 * The number of seconds between pid controller updates. This number
				 * should generally be less than 1. Like .05 for a 20 hz rate.
				 */
				void setIntervalPeriodSecs(double intervalPeriodSecs)
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	00 d0       	rcall	.+0      	; 0x1778 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x6>
    1778:	00 d0       	rcall	.+0      	; 0x177a <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x8>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	4b 83       	std	Y+3, r20	; 0x03
    1784:	5c 83       	std	Y+4, r21	; 0x04
    1786:	6d 83       	std	Y+5, r22	; 0x05
    1788:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->intervalPeriodSecs = intervalPeriodSecs;
    178a:	29 81       	ldd	r18, Y+1	; 0x01
    178c:	3a 81       	ldd	r19, Y+2	; 0x02
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	ad 81       	ldd	r26, Y+5	; 0x05
    1794:	be 81       	ldd	r27, Y+6	; 0x06
    1796:	f9 01       	movw	r30, r18
    1798:	80 a3       	std	Z+32, r24	; 0x20
    179a:	91 a3       	std	Z+33, r25	; 0x21
    179c:	a2 a3       	std	Z+34, r26	; 0x22
    179e:	b3 a3       	std	Z+35, r27	; 0x23
				}
    17a0:	26 96       	adiw	r28, 0x06	; 6
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>:
				 * keeps increasing despite the helicopter already at the maximum possible control values.
				 * @param yawAntiWindupGain The gain value which represents how fast the integral will
				 * go back to 0 when the servos are saturated.
				 * Some simple rule that have been suggested for the tracking time are ~ Tt = TiTd and Tt = (Ti + Td)/2.
				 */
				void setYawAntiWindupGain(double yawAntiWindupGain)
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x8>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	4b 83       	std	Y+3, r20	; 0x03
    17c4:	5c 83       	std	Y+4, r21	; 0x04
    17c6:	6d 83       	std	Y+5, r22	; 0x05
    17c8:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawAntiWindupGain = yawAntiWindupGain;
    17ca:	29 81       	ldd	r18, Y+1	; 0x01
    17cc:	3a 81       	ldd	r19, Y+2	; 0x02
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	ad 81       	ldd	r26, Y+5	; 0x05
    17d4:	be 81       	ldd	r27, Y+6	; 0x06
    17d6:	f9 01       	movw	r30, r18
    17d8:	80 8b       	std	Z+16, r24	; 0x10
    17da:	91 8b       	std	Z+17, r25	; 0x11
    17dc:	a2 8b       	std	Z+18, r26	; 0x12
    17de:	b3 8b       	std	Z+19, r27	; 0x13
				}
    17e0:	26 96       	adiw	r28, 0x06	; 6
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd>:
				/**
				 * The minimum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no smaller than the controlMinValue (e.g. no less than -1)
				 */
				void setMinTailRotorCollectiveControlValue (double minYawServoControlValue)
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd+0x8>
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	4b 83       	std	Y+3, r20	; 0x03
    1804:	5c 83       	std	Y+4, r21	; 0x04
    1806:	6d 83       	std	Y+5, r22	; 0x05
    1808:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->minYawServoControlValue = minYawServoControlValue;
    180a:	29 81       	ldd	r18, Y+1	; 0x01
    180c:	3a 81       	ldd	r19, Y+2	; 0x02
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	ad 81       	ldd	r26, Y+5	; 0x05
    1814:	be 81       	ldd	r27, Y+6	; 0x06
    1816:	f9 01       	movw	r30, r18
    1818:	84 8b       	std	Z+20, r24	; 0x14
    181a:	95 8b       	std	Z+21, r25	; 0x15
    181c:	a6 8b       	std	Z+22, r26	; 0x16
    181e:	b7 8b       	std	Z+23, r27	; 0x17
				}
    1820:	26 96       	adiw	r28, 0x06	; 6
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd>:
				/**
				 * The maximum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no larger than the controlMaxValue (e.g. no greater than 1)
				 */
				void setMaxTailRotorCollectiveValue(double maxYawServoControlValue)
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	00 d0       	rcall	.+0      	; 0x1838 <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd+0x6>
    1838:	00 d0       	rcall	.+0      	; 0x183a <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd+0x8>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	4b 83       	std	Y+3, r20	; 0x03
    1844:	5c 83       	std	Y+4, r21	; 0x04
    1846:	6d 83       	std	Y+5, r22	; 0x05
    1848:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->maxYawServoControlValue = maxYawServoControlValue;
    184a:	29 81       	ldd	r18, Y+1	; 0x01
    184c:	3a 81       	ldd	r19, Y+2	; 0x02
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	ad 81       	ldd	r26, Y+5	; 0x05
    1854:	be 81       	ldd	r27, Y+6	; 0x06
    1856:	f9 01       	movw	r30, r18
    1858:	80 8f       	std	Z+24, r24	; 0x18
    185a:	91 8f       	std	Z+25, r25	; 0x19
    185c:	a2 8f       	std	Z+26, r26	; 0x1a
    185e:	b3 8f       	std	Z+27, r27	; 0x1b
				}
    1860:	26 96       	adiw	r28, 0x06	; 6
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>:
				
				/**
				 * This is the maximum possible output value for a control signal.
				 * Generally, this should be set to 1.
				 */
				void setControlMaxValue(double controlMaxValue)
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x8>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	4b 83       	std	Y+3, r20	; 0x03
    1884:	5c 83       	std	Y+4, r21	; 0x04
    1886:	6d 83       	std	Y+5, r22	; 0x05
    1888:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMaxValue = controlMaxValue;
    188a:	29 81       	ldd	r18, Y+1	; 0x01
    188c:	3a 81       	ldd	r19, Y+2	; 0x02
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	ad 81       	ldd	r26, Y+5	; 0x05
    1894:	be 81       	ldd	r27, Y+6	; 0x06
    1896:	f9 01       	movw	r30, r18
    1898:	84 a3       	std	Z+36, r24	; 0x24
    189a:	95 a3       	std	Z+37, r25	; 0x25
    189c:	a6 a3       	std	Z+38, r26	; 0x26
    189e:	b7 a3       	std	Z+39, r27	; 0x27
				}
    18a0:	26 96       	adiw	r28, 0x06	; 6
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>:
				
				/**
				 * This is the minimum possible value for a control signal.
				 * Generally, this should be set to -1.
				 */
				void setControlMinValue(double controlMinValue)
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x8>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	4b 83       	std	Y+3, r20	; 0x03
    18c4:	5c 83       	std	Y+4, r21	; 0x04
    18c6:	6d 83       	std	Y+5, r22	; 0x05
    18c8:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMinValue = controlMinValue;
    18ca:	29 81       	ldd	r18, Y+1	; 0x01
    18cc:	3a 81       	ldd	r19, Y+2	; 0x02
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	ad 81       	ldd	r26, Y+5	; 0x05
    18d4:	be 81       	ldd	r27, Y+6	; 0x06
    18d6:	f9 01       	movw	r30, r18
    18d8:	80 a7       	std	Z+40, r24	; 0x28
    18da:	91 a7       	std	Z+41, r25	; 0x29
    18dc:	a2 a7       	std	Z+42, r26	; 0x2a
    18de:	b3 a7       	std	Z+43, r27	; 0x2b
				}			
    18e0:	26 96       	adiw	r28, 0x06	; 6
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>:
using namespace helicopter::interfaces;
using namespace helicopter::model;
using namespace helicopter::controller;

void setupDefaultsandReferencePosition(SystemModel *model, PIDController *pidController)
{	
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE+0x6>
    18f8:	1f 92       	push	r1
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	7c 83       	std	Y+4, r23	; 0x04
    1904:	6b 83       	std	Y+3, r22	; 0x03
	model->ReferenceMagYawDegrees(0.0);
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	ba 01       	movw	r22, r20
    1910:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>
	model->ReferenceYawVelocityDegreesPerSecond(0.0);
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	ba 01       	movw	r22, r20
    191e:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>
	
	pidController->setYawProportionalGain(3.0);
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	60 e4       	ldi	r22, 0x40	; 64
    192c:	70 e4       	ldi	r23, 0x40	; 64
    192e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>
	pidController->setYawIntegralGain(.008);
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	4f e6       	ldi	r20, 0x6F	; 111
    1938:	52 e1       	ldi	r21, 0x12	; 18
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	7c e3       	ldi	r23, 0x3C	; 60
    193e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>
	pidController->setYawDerivativeGain(.85);
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	4a e9       	ldi	r20, 0x9A	; 154
    1948:	59 e9       	ldi	r21, 0x99	; 153
    194a:	69 e5       	ldi	r22, 0x59	; 89
    194c:	7f e3       	ldi	r23, 0x3F	; 63
    194e:	0e 94 99 0b 	call	0x1732	; 0x1732 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>

	//TODO: Don't forget that there is a difference between how often the sensors
	//are read and how often the control algorithm runs. 
	pidController->setIntervalPeriodSecs(PID_OUTER_LOOP_PERIOD);
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	4d ec       	ldi	r20, 0xCD	; 205
    1958:	5c ec       	ldi	r21, 0xCC	; 204
    195a:	6c e4       	ldi	r22, 0x4C	; 76
    195c:	7d e3       	ldi	r23, 0x3D	; 61
    195e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>
	pidController->setYawAntiWindupGain(.1);
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	4d ec       	ldi	r20, 0xCD	; 205
    1968:	5c ec       	ldi	r21, 0xCC	; 204
    196a:	6c ec       	ldi	r22, 0xCC	; 204
    196c:	7d e3       	ldi	r23, 0x3D	; 61
    196e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>
/*	
	pidController->setMinTailRotorCollectiveControlValue (-.8);
	pidController->setMaxTailRotorCollectiveValue(.8);
	*/

pidController->setMinTailRotorCollectiveControlValue (-10);
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	60 e2       	ldi	r22, 0x20	; 32
    197c:	71 ec       	ldi	r23, 0xC1	; 193
    197e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd>
pidController->setMaxTailRotorCollectiveValue(10);
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	60 e2       	ldi	r22, 0x20	; 32
    198c:	71 e4       	ldi	r23, 0x41	; 65
    198e:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd>
	pidController->setControlMaxValue(1.0);
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	60 e8       	ldi	r22, 0x80	; 128
    199c:	7f e3       	ldi	r23, 0x3F	; 63
    199e:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>
	pidController->setControlMinValue(-1.0);
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	60 e8       	ldi	r22, 0x80	; 128
    19ac:	7f eb       	ldi	r23, 0xBF	; 191
    19ae:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	08 95       	ret

000019c0 <main>:


int main(void)
{	
    19c0:	af 92       	push	r10
    19c2:	bf 92       	push	r11
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	66 97       	sbiw	r28, 0x16	; 22
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
    19e4:	84 e3       	ldi	r24, 0x34	; 52
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    19ec:	8c 01       	movw	r16, r24
    19ee:	c8 01       	movw	r24, r16
    19f0:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN10helicopter5model11SystemModelC1Ev>
    19f4:	1a 83       	std	Y+2, r17	; 0x02
    19f6:	09 83       	std	Y+1, r16	; 0x01
	
	//TODO: This somehow needs to be a simulator servo driver
	//TODO: Setup the code so that it can be setup for a simulator or not setup for a simulator.
	ServoDriver *servoDriver = new ServoDriver();
    19f8:	8a e0       	ldi	r24, 0x0A	; 10
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1a00:	8c 01       	movw	r16, r24
    1a02:	c8 01       	movw	r24, r16
    1a04:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN10helicopter7drivers11ServoDriverC1Ev>
    1a08:	1c 83       	std	Y+4, r17	; 0x04
    1a0a:	0b 83       	std	Y+3, r16	; 0x03
	
	PIDController *pidController = new PIDController(model, servoDriver);
    1a0c:	8c e2       	ldi	r24, 0x2C	; 44
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1a14:	8c 01       	movw	r16, r24
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	a9 01       	movw	r20, r18
    1a20:	bc 01       	movw	r22, r24
    1a22:	c8 01       	movw	r24, r16
    1a24:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>
    1a28:	1e 83       	std	Y+6, r17	; 0x06
    1a2a:	0d 83       	std	Y+5, r16	; 0x05
	
	setupDefaultsandReferencePosition(model, pidController);
    1a2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	b9 01       	movw	r22, r18
    1a36:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 10); //Good timeout when using the USB
    1a3a:	88 e0       	ldi	r24, 0x08	; 8
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1a42:	6c 01       	movw	r12, r24
    1a44:	1a e0       	ldi	r17, 0x0A	; 10
    1a46:	e1 2e       	mov	r14, r17
    1a48:	f1 2c       	mov	r15, r1
    1a4a:	00 e0       	ldi	r16, 0x00	; 0
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	34 e0       	ldi	r19, 0x04	; 4
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	54 e2       	ldi	r21, 0x24	; 36
    1a56:	64 ef       	ldi	r22, 0xF4	; 244
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	c6 01       	movw	r24, r12
    1a5c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>
    1a60:	d8 86       	std	Y+8, r13	; 0x08
    1a62:	cf 82       	std	Y+7, r12	; 0x07
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);  
    1a64:	8b e0       	ldi	r24, 0x0B	; 11
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1a6c:	5c 01       	movw	r10, r24
    1a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a70:	98 85       	ldd	r25, Y+8	; 0x08
    1a72:	cc 24       	eor	r12, r12
    1a74:	c3 94       	inc	r12
    1a76:	ee 24       	eor	r14, r14
    1a78:	e3 94       	inc	r14
    1a7a:	8c 01       	movw	r16, r24
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	51 ee       	ldi	r21, 0xE1	; 225
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	c5 01       	movw	r24, r10
    1a88:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>
    1a8c:	ba 86       	std	Y+10, r11	; 0x0a
    1a8e:	a9 86       	std	Y+9, r10	; 0x09
	serialDriver->initialize();
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	fc 01       	movw	r30, r24
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	04 96       	adiw	r24, 0x04	; 4
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 81       	ld	r18, Z
    1aa0:	31 81       	ldd	r19, Z+1	; 0x01
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	f9 01       	movw	r30, r18
    1aa8:	19 95       	eicall
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver);
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1ab2:	8c 01       	movw	r16, r24
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	bc 01       	movw	r22, r24
    1aba:	c8 01       	movw	r24, r16
    1abc:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>
    1ac0:	1c 87       	std	Y+12, r17	; 0x0c
    1ac2:	0b 87       	std	Y+11, r16	; 0x0b
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 20 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 20 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, 0, 4);//starting at tick 0, execute 50 times a second
    1ac4:	8b e0       	ldi	r24, 0x0B	; 11
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1acc:	7c 01       	movw	r14, r24
    1ace:	49 81       	ldd	r20, Y+1	; 0x01
    1ad0:	5a 81       	ldd	r21, Y+2	; 0x02
    1ad2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ad6:	04 e0       	ldi	r16, 0x04	; 4
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	bc 01       	movw	r22, r24
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	0e 94 42 1b 	call	0x3684	; 0x3684 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    1ae6:	fe 86       	std	Y+14, r15	; 0x0e
    1ae8:	ed 86       	std	Y+13, r14	; 0x0d
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
    1aea:	8b e0       	ldi	r24, 0x0B	; 11
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1af2:	7c 01       	movw	r14, r24
    1af4:	49 81       	ldd	r20, Y+1	; 0x01
    1af6:	5a 81       	ldd	r21, Y+2	; 0x02
    1af8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1afa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1afc:	04 e0       	ldi	r16, 0x04	; 4
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	21 e0       	ldi	r18, 0x01	; 1
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	bc 01       	movw	r22, r24
    1b06:	c7 01       	movw	r24, r14
    1b08:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    1b0c:	f8 8a       	std	Y+16, r15	; 0x10
    1b0e:	ef 86       	std	Y+15, r14	; 0x0f
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
    1b10:	8a e0       	ldi	r24, 0x0A	; 10
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1b18:	8c 01       	movw	r16, r24
    1b1a:	23 e0       	ldi	r18, 0x03	; 3
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	48 ec       	ldi	r20, 0xC8	; 200
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	62 e0       	ldi	r22, 0x02	; 2
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	c8 01       	movw	r24, r16
    1b28:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>
    1b2c:	1a 8b       	std	Y+18, r17	; 0x12
    1b2e:	09 8b       	std	Y+17, r16	; 0x11
		
		
	//execute the pid outer loop at the PID_OUTER_LOOP_PERIOD rate. The division is to convert the period into ticks for the scheduler.
	PIDOuterLoopTask *pidOuterLoop = new PIDOuterLoopTask(pidController, 3, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    1b30:	89 e0       	ldi	r24, 0x09	; 9
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    1b38:	8c 01       	movw	r16, r24
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	2a e0       	ldi	r18, 0x0A	; 10
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	43 e0       	ldi	r20, 0x03	; 3
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	bc 01       	movw	r22, r24
    1b48:	c8 01       	movw	r24, r16
    1b4a:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>
    1b4e:	1c 8b       	std	Y+20, r17	; 0x14
    1b50:	0b 8b       	std	Y+19, r16	; 0x13
	
	

	Scheduler *scheduler = Scheduler::getScheduler();
    1b52:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1b56:	9e 8b       	std	Y+22, r25	; 0x16
    1b58:	8d 8b       	std	Y+21, r24	; 0x15
	
	scheduler->addTask(flashTask);
    1b5a:	29 89       	ldd	r18, Y+17	; 0x11
    1b5c:	3a 89       	ldd	r19, Y+18	; 0x12
    1b5e:	8d 89       	ldd	r24, Y+21	; 0x15
    1b60:	9e 89       	ldd	r25, Y+22	; 0x16
    1b62:	b9 01       	movw	r22, r18
    1b64:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
    1b68:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b6a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b6c:	8d 89       	ldd	r24, Y+21	; 0x15
    1b6e:	9e 89       	ldd	r25, Y+22	; 0x16
    1b70:	b9 01       	movw	r22, r18
    1b72:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
    1b76:	2f 85       	ldd	r18, Y+15	; 0x0f
    1b78:	38 89       	ldd	r19, Y+16	; 0x10
    1b7a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b7c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b7e:	b9 01       	movw	r22, r18
    1b80:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidOuterLoop);
    1b84:	2b 89       	ldd	r18, Y+19	; 0x13
    1b86:	3c 89       	ldd	r19, Y+20	; 0x14
    1b88:	8d 89       	ldd	r24, Y+21	; 0x15
    1b8a:	9e 89       	ldd	r25, Y+22	; 0x16
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
    1b92:	8d 89       	ldd	r24, Y+21	; 0x15
    1b94:	9e 89       	ldd	r25, Y+22	; 0x16
    1b96:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
    1b9a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b9e:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN10helicopter9scheduler9Scheduler5startEv>
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <main+0x1e6>
	
	
	while(1)
    1ba4:	00 00       	nop
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
    1ba6:	8d 89       	ldd	r24, Y+21	; 0x15
    1ba8:	9e 89       	ldd	r25, Y+22	; 0x16
    1baa:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
		
		/**
		 * Determine if the last processing frame was blown.
		 */
		if (scheduler->hasBlownFrame())
    1bae:	8d 89       	ldd	r24, Y+21	; 0x15
    1bb0:	9e 89       	ldd	r25, Y+22	; 0x16
    1bb2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEv>
    1bb6:	88 23       	and	r24, r24
    1bb8:	a9 f3       	breq	.-22     	; 0x1ba4 <main+0x1e4>
		{
			pidController->addBlownFrame();
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN10helicopter10controller13PIDController13addBlownFrameEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
    1bc2:	f0 cf       	rjmp	.-32     	; 0x1ba4 <main+0x1e4>

00001bc4 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	1f 92       	push	r1
    1bca:	1f 92       	push	r1
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	22 e2       	ldi	r18, 0x22	; 34
    1bda:	32 e0       	ldi	r19, 0x02	; 2
    1bdc:	fc 01       	movw	r30, r24
    1bde:	31 83       	std	Z+1, r19	; 0x01
    1be0:	20 83       	st	Z, r18
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	81 70       	andi	r24, 0x01	; 1
    1bf0:	99 27       	eor	r25, r25
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <_ZN10helicopter5tasks12FlashLEDTaskD1Ev+0x3a>
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	1f 92       	push	r1
    1c0e:	1f 92       	push	r1
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	08 95       	ret

00001c32 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	2d 97       	sbiw	r28, 0x0d	; 13
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	9d 83       	std	Y+5, r25	; 0x05
    1c4c:	8c 83       	std	Y+4, r24	; 0x04
    1c4e:	7f 83       	std	Y+7, r23	; 0x07
    1c50:	6e 83       	std	Y+6, r22	; 0x06
    1c52:	59 87       	std	Y+9, r21	; 0x09
    1c54:	48 87       	std	Y+8, r20	; 0x08
    1c56:	3b 87       	std	Y+11, r19	; 0x0b
    1c58:	2a 87       	std	Y+10, r18	; 0x0a
    1c5a:	1d 87       	std	Y+13, r17	; 0x0d
    1c5c:	0c 87       	std	Y+12, r16	; 0x0c
	for (int i = 0; i < payloadSize; i++)
    1c5e:	1a 82       	std	Y+2, r1	; 0x02
    1c60:	19 82       	std	Y+1, r1	; 0x01
    1c62:	26 c0       	rjmp	.+76     	; 0x1cb0 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x7e>
	{
		byte b = msgPayload[i];
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	fc 01       	movw	r30, r24
    1c72:	80 81       	ld	r24, Z
    1c74:	8b 83       	std	Y+3, r24	; 0x03
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
    1c76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	90 81       	ld	r25, Z
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	29 2f       	mov	r18, r25
    1c82:	28 0f       	add	r18, r24
    1c84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
    1c8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 81       	ld	r18, Z
    1c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c98:	fc 01       	movw	r30, r24
    1c9a:	80 81       	ld	r24, Z
    1c9c:	28 0f       	add	r18, r24
    1c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ca0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	88 85       	ldd	r24, Y+8	; 0x08
    1cb8:	99 85       	ldd	r25, Y+9	; 0x09
    1cba:	28 17       	cp	r18, r24
    1cbc:	39 07       	cpc	r19, r25
    1cbe:	0c f0       	brlt	.+2      	; 0x1cc2 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x90>
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	44 23       	and	r20, r20
    1cc4:	79 f6       	brne	.-98     	; 0x1c64 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x32>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
    1cc6:	2d 96       	adiw	r28, 0x0d	; 13
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
    1cdc:	cf 92       	push	r12
    1cde:	df 92       	push	r13
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	cf 93       	push	r28
    1cea:	df 93       	push	r29
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	64 97       	sbiw	r28, 0x14	; 20
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	89 8b       	std	Y+17, r24	; 0x11
    1d00:	7c 8b       	std	Y+20, r23	; 0x14
    1d02:	6b 8b       	std	Y+19, r22	; 0x13
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
    1d04:	ed b6       	in	r14, 0x3d	; 61
    1d06:	fe b6       	in	r15, 0x3e	; 62
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
    1d08:	1a 82       	std	Y+2, r1	; 0x02
    1d0a:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3a>
    1d14:	b3 c0       	rjmp	.+358    	; 0x1e7c <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1a0>
    1d16:	8d b7       	in	r24, 0x3d	; 61
    1d18:	9e b7       	in	r25, 0x3e	; 62
    1d1a:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
    1d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d20:	fc 01       	movw	r30, r24
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	04 96       	adiw	r24, 0x04	; 4
    1d28:	fc 01       	movw	r30, r24
    1d2a:	20 81       	ld	r18, Z
    1d2c:	31 81       	ldd	r19, Z+1	; 0x01
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	f9 01       	movw	r30, r18
    1d34:	19 95       	eicall
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
    1d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3e:	0e 94 ef 10 	call	0x21de	; 0x21de <_ZN10helicopter8messages7Message14getMessageSizeEv>
    1d42:	98 87       	std	Y+8, r25	; 0x08
    1d44:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
    1d46:	8f 81       	ldd	r24, Y+7	; 0x07
    1d48:	98 85       	ldd	r25, Y+8	; 0x08
    1d4a:	05 96       	adiw	r24, 0x05	; 5
    1d4c:	9a 87       	std	Y+10, r25	; 0x0a
    1d4e:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	9c 87       	std	Y+12, r25	; 0x0c
    1d58:	8b 87       	std	Y+11, r24	; 0x0b
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	2d b7       	in	r18, 0x3d	; 61
    1d5e:	3e b7       	in	r19, 0x3e	; 62
    1d60:	28 1b       	sub	r18, r24
    1d62:	39 0b       	sbc	r19, r25
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	3e bf       	out	0x3e, r19	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	2d bf       	out	0x3d, r18	; 61
    1d6e:	8d b7       	in	r24, 0x3d	; 61
    1d70:	9e b7       	in	r25, 0x3e	; 62
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	9e 87       	std	Y+14, r25	; 0x0e
    1d76:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
    1d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7c:	25 eb       	ldi	r18, 0xB5	; 181
    1d7e:	fc 01       	movw	r30, r24
    1d80:	20 83       	st	Z, r18
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
    1d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d86:	22 e6       	ldi	r18, 0x62	; 98
    1d88:	fc 01       	movw	r30, r24
    1d8a:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
    1d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d90:	27 ed       	ldi	r18, 0xD7	; 215
    1d92:	fc 01       	movw	r30, r24
    1d94:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
    1d96:	4f 81       	ldd	r20, Y+7	; 0x07
    1d98:	58 85       	ldd	r21, Y+8	; 0x08
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	03 96       	adiw	r24, 0x03	; 3
    1da0:	2d 81       	ldd	r18, Y+5	; 0x05
    1da2:	3e 81       	ldd	r19, Y+6	; 0x06
    1da4:	b9 01       	movw	r22, r18
    1da6:	0e 94 aa 22 	call	0x4554	; 0x4554 <memcpy>
		
		byte checksumA = 0;
    1daa:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
    1dac:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
    1dae:	fe 01       	movw	r30, r28
    1db0:	70 96       	adiw	r30, 0x10	; 16
    1db2:	9e 01       	movw	r18, r28
    1db4:	21 5f       	subi	r18, 0xF1	; 241
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	4f 81       	ldd	r20, Y+7	; 0x07
    1dba:	58 85       	ldd	r21, Y+8	; 0x08
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	89 89       	ldd	r24, Y+17	; 0x11
    1dc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc4:	8f 01       	movw	r16, r30
    1dc6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	02 97       	sbiw	r24, 0x02	; 2
    1dd0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1dd2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dd4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dd6:	82 0f       	add	r24, r18
    1dd8:	93 1f       	adc	r25, r19
    1dda:	fc 01       	movw	r30, r24
    1ddc:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	48 89       	ldd	r20, Y+16	; 0x10
    1de6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1de8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dea:	82 0f       	add	r24, r18
    1dec:	93 1f       	adc	r25, r19
    1dee:	fc 01       	movw	r30, r24
    1df0:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1df2:	1c 82       	std	Y+4, r1	; 0x04
    1df4:	1b 82       	std	Y+3, r1	; 0x03
    1df6:	23 c0       	rjmp	.+70     	; 0x1e3e <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x162>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
    1df8:	89 89       	ldd	r24, Y+17	; 0x11
    1dfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	fc 01       	movw	r30, r24
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	06 96       	adiw	r24, 0x06	; 6
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 81       	ld	r18, Z
    1e0e:	31 81       	ldd	r19, Z+1	; 0x01
    1e10:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e12:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	84 0f       	add	r24, r20
    1e1a:	95 1f       	adc	r25, r21
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	40 81       	ld	r20, Z
    1e20:	89 89       	ldd	r24, Y+17	; 0x11
    1e22:	9a 89       	ldd	r25, Y+18	; 0x12
    1e24:	fc 01       	movw	r30, r24
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	64 2f       	mov	r22, r20
    1e2c:	f9 01       	movw	r30, r18
    1e2e:	19 95       	eicall
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e40:	3c 81       	ldd	r19, Y+4	; 0x04
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	28 17       	cp	r18, r24
    1e48:	39 07       	cpc	r19, r25
    1e4a:	34 f4       	brge	.+12     	; 0x1e58 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	11 f4       	brne	.+4      	; 0x1e58 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	01 c0       	rjmp	.+2      	; 0x1e5a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17e>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	88 23       	and	r24, r24
    1e5c:	69 f6       	brne	.-102    	; 0x1df8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x11c>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete [] msgPayload;
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	21 f0       	breq	.+8      	; 0x1e6e <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x192>
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZdaPv>
		msgPayload = NULL;
    1e6e:	1e 82       	std	Y+6, r1	; 0x06
    1e70:	1d 82       	std	Y+5, r1	; 0x05
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de be       	out	0x3e, r13	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	fe be       	out	0x3e, r15	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	ed be       	out	0x3d, r14	; 61
    1e8a:	64 96       	adiw	r28, 0x14	; 20
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	08 95       	ret

00001ea8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	66 97       	sbiw	r28, 0x16	; 22
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	9c 8b       	std	Y+20, r25	; 0x14
    1eca:	8b 8b       	std	Y+19, r24	; 0x13
    1ecc:	7e 8b       	std	Y+22, r23	; 0x16
    1ece:	6d 8b       	std	Y+21, r22	; 0x15
	{
		receivedMessage = NULL;
	}
	
	return status;
    1ed0:	ed b6       	in	r14, 0x3d	; 61
    1ed2:	fe b6       	in	r15, 0x3e	; 62
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
    1ed4:	1a 82       	std	Y+2, r1	; 0x02
    1ed6:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
    1ed8:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
    1eda:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
    1edc:	1d 86       	std	Y+13, r1	; 0x0d
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1ede:	1d c0       	rjmp	.+58     	; 0x1f1a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x72>
	{
		firstSyncByte = secondSyncByte;
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
    1ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee6:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte);
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	fc 01       	movw	r30, r24
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	08 96       	adiw	r24, 0x08	; 8
    1efa:	fc 01       	movw	r30, r24
    1efc:	20 81       	ld	r18, Z
    1efe:	31 81       	ldd	r19, Z+1	; 0x01
    1f00:	8b 89       	ldd	r24, Y+19	; 0x13
    1f02:	9c 89       	ldd	r25, Y+20	; 0x14
    1f04:	fc 01       	movw	r30, r24
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	ae 01       	movw	r20, r28
    1f0c:	43 5f       	subi	r20, 0xF3	; 243
    1f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f10:	ba 01       	movw	r22, r20
    1f12:	f9 01       	movw	r30, r18
    1f14:	19 95       	eicall
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    byte thirdSyncByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	85 3b       	cpi	r24, 0xB5	; 181
    1f1e:	31 f4       	brne	.+12     	; 0x1f2c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	82 36       	cpi	r24, 0x62	; 98
    1f24:	19 f4       	brne	.+6      	; 0x1f2c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f28:	87 3d       	cpi	r24, 0xD7	; 215
    1f2a:	31 f0       	breq	.+12     	; 0x1f38 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	11 f4       	brne	.+4      	; 0x1f38 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x92>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	88 23       	and	r24, r24
    1f3c:	89 f6       	brne	.-94     	; 0x1ee0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x38>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receiveByte(thirdSyncByte);
	}
	
	if (status == 0)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa0>
    1f46:	f9 c0       	rjmp	.+498    	; 0x213a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
    1f48:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType);
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	fc 01       	movw	r30, r24
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	08 96       	adiw	r24, 0x08	; 8
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	20 81       	ld	r18, Z
    1f60:	31 81       	ldd	r19, Z+1	; 0x01
    1f62:	8b 89       	ldd	r24, Y+19	; 0x13
    1f64:	9c 89       	ldd	r25, Y+20	; 0x14
    1f66:	fc 01       	movw	r30, r24
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	ae 01       	movw	r20, r28
    1f6e:	42 5f       	subi	r20, 0xF2	; 242
    1f70:	5f 4f       	sbci	r21, 0xFF	; 255
    1f72:	ba 01       	movw	r22, r20
    1f74:	f9 01       	movw	r30, r18
    1f76:	19 95       	eicall
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xde>
    1f84:	da c0       	rjmp	.+436    	; 0x213a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
		{
			int msgSize = 0;
    1f86:	1e 82       	std	Y+6, r1	; 0x06
    1f88:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
    1f8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f8c:	88 2f       	mov	r24, r24
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	91 05       	cpc	r25, r1
    1f94:	29 f4       	brne	.+10     	; 0x1fa0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xf8>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
    1f96:	89 e2       	ldi	r24, 0x29	; 41
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
					break;
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x102>
				default:
					//unrecognized message type.
					status = -2;
    1fa0:	8e ef       	ldi	r24, 0xFE	; 254
    1fa2:	9f ef       	ldi	r25, 0xFF	; 255
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	89 83       	std	Y+1, r24	; 0x01
					break;
    1fa8:	00 00       	nop
			}
			
			if (status == 0)
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x10c>
    1fb2:	c3 c0       	rjmp	.+390    	; 0x213a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
    1fb4:	8d b7       	in	r24, 0x3d	; 61
    1fb6:	9e b7       	in	r25, 0x3e	; 62
    1fb8:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	9a 87       	std	Y+10, r25	; 0x0a
    1fc2:	89 87       	std	Y+9, r24	; 0x09
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	2d b7       	in	r18, 0x3d	; 61
    1fc8:	3e b7       	in	r19, 0x3e	; 62
    1fca:	28 1b       	sub	r18, r24
    1fcc:	39 0b       	sbc	r19, r25
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	3e bf       	out	0x3e, r19	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	2d bf       	out	0x3d, r18	; 61
    1fd8:	8d b7       	in	r24, 0x3d	; 61
    1fda:	9e b7       	in	r25, 0x3e	; 62
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	9c 87       	std	Y+12, r25	; 0x0c
    1fe0:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
    1fe2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fe4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fe6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fe8:	fc 01       	movw	r30, r24
    1fea:	20 83       	st	Z, r18
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	98 87       	std	Y+8, r25	; 0x08
    1ff2:	8f 83       	std	Y+7, r24	; 0x07
    1ff4:	21 c0       	rjmp	.+66     	; 0x2038 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x190>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	fc 01       	movw	r30, r24
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	08 96       	adiw	r24, 0x08	; 8
    2008:	fc 01       	movw	r30, r24
    200a:	20 81       	ld	r18, Z
    200c:	31 81       	ldd	r19, Z+1	; 0x01
    200e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2010:	5c 85       	ldd	r21, Y+12	; 0x0c
    2012:	8f 81       	ldd	r24, Y+7	; 0x07
    2014:	98 85       	ldd	r25, Y+8	; 0x08
    2016:	48 0f       	add	r20, r24
    2018:	59 1f       	adc	r21, r25
    201a:	8b 89       	ldd	r24, Y+19	; 0x13
    201c:	9c 89       	ldd	r25, Y+20	; 0x14
    201e:	fc 01       	movw	r30, r24
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	ba 01       	movw	r22, r20
    2026:	f9 01       	movw	r30, r18
    2028:	19 95       	eicall
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    202e:	8f 81       	ldd	r24, Y+7	; 0x07
    2030:	98 85       	ldd	r25, Y+8	; 0x08
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	98 87       	std	Y+8, r25	; 0x08
    2036:	8f 83       	std	Y+7, r24	; 0x07
    2038:	2f 81       	ldd	r18, Y+7	; 0x07
    203a:	38 85       	ldd	r19, Y+8	; 0x08
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	28 17       	cp	r18, r24
    2042:	39 07       	cpc	r19, r25
    2044:	34 f4       	brge	.+12     	; 0x2052 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	11 f4       	brne	.+4      	; 0x2052 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ac>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	88 23       	and	r24, r24
    2056:	79 f6       	brne	.-98     	; 0x1ff6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x14e>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
				}
							
				if (status == 0)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	09 f0       	breq	.+2      	; 0x2062 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ba>
    2060:	67 c0       	rjmp	.+206    	; 0x2130 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
    2062:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
    2064:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
    2066:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
    2068:	1a 8a       	std	Y+18, r1	; 0x12
								
					//Note: status is getting overwritten here.
					status = serialDriver->receiveByte(messageChecksumA);
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	fc 01       	movw	r30, r24
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	fc 01       	movw	r30, r24
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	08 96       	adiw	r24, 0x08	; 8
    207c:	fc 01       	movw	r30, r24
    207e:	20 81       	ld	r18, Z
    2080:	31 81       	ldd	r19, Z+1	; 0x01
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	fc 01       	movw	r30, r24
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	ae 01       	movw	r20, r28
    208e:	41 5f       	subi	r20, 0xF1	; 241
    2090:	5f 4f       	sbci	r21, 0xFF	; 255
    2092:	ba 01       	movw	r22, r20
    2094:	f9 01       	movw	r30, r18
    2096:	19 95       	eicall
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB);
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	fc 01       	movw	r30, r24
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	fc 01       	movw	r30, r24
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	08 96       	adiw	r24, 0x08	; 8
    20ae:	fc 01       	movw	r30, r24
    20b0:	20 81       	ld	r18, Z
    20b2:	31 81       	ldd	r19, Z+1	; 0x01
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	fc 01       	movw	r30, r24
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	ae 01       	movw	r20, r28
    20c0:	40 5f       	subi	r20, 0xF0	; 240
    20c2:	5f 4f       	sbci	r21, 0xFF	; 255
    20c4:	ba 01       	movw	r22, r20
    20c6:	f9 01       	movw	r30, r18
    20c8:	19 95       	eicall
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	fe 01       	movw	r30, r28
    20d4:	72 96       	adiw	r30, 0x12	; 18
    20d6:	9e 01       	movw	r18, r28
    20d8:	2f 5e       	subi	r18, 0xEF	; 239
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	4d 81       	ldd	r20, Y+5	; 0x05
    20de:	5e 81       	ldd	r21, Y+6	; 0x06
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	9c 89       	ldd	r25, Y+20	; 0x14
    20e4:	8f 01       	movw	r16, r30
    20e6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
    20ea:	99 89       	ldd	r25, Y+17	; 0x11
    20ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ee:	98 17       	cp	r25, r24
    20f0:	d9 f4       	brne	.+54     	; 0x2128 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
    20f2:	9a 89       	ldd	r25, Y+18	; 0x12
    20f4:	88 89       	ldd	r24, Y+16	; 0x10
    20f6:	98 17       	cp	r25, r24
    20f8:	b9 f4       	brne	.+46     	; 0x2128 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
					{
						//build the message
						switch(msgType)
    20fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	82 30       	cpi	r24, 0x02	; 2
    2102:	91 05       	cpc	r25, r1
    2104:	59 f4       	brne	.+22     	; 0x211c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x274>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
    2106:	8b 85       	ldd	r24, Y+11	; 0x0b
    2108:	9c 85       	ldd	r25, Y+12	; 0x0c
    210a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
    210e:	9c 01       	movw	r18, r24
    2110:	8d 89       	ldd	r24, Y+21	; 0x15
    2112:	9e 89       	ldd	r25, Y+22	; 0x16
    2114:	fc 01       	movw	r30, r24
    2116:	31 83       	std	Z+1, r19	; 0x01
    2118:	20 83       	st	Z, r18
							break;
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x27e>
							default:
								//unrecognized message type.
								status = -2;
    211c:	8e ef       	ldi	r24, 0xFE	; 254
    211e:	9f ef       	ldi	r25, 0xFF	; 255
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
							break;
    2124:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -3;
    2128:	8d ef       	ldi	r24, 0xFD	; 253
    212a:	9f ef       	ldi	r25, 0xFF	; 255
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de be       	out	0x3e, r13	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	29 f0       	breq	.+10     	; 0x214c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2a4>
	{
		receivedMessage = NULL;
    2142:	8d 89       	ldd	r24, Y+21	; 0x15
    2144:	9e 89       	ldd	r25, Y+22	; 0x16
    2146:	fc 01       	movw	r30, r24
    2148:	11 82       	std	Z+1, r1	; 0x01
    214a:	10 82       	st	Z, r1
	}
	
	return status;
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	fe be       	out	0x3e, r15	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	ed be       	out	0x3d, r14	; 61
    215a:	66 96       	adiw	r28, 0x16	; 22
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	df 90       	pop	r13
    2174:	cf 90       	pop	r12
    2176:	08 95       	ret

00002178 <_ZN10helicopter8messages7MessageD1Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	1f 92       	push	r1
    217e:	1f 92       	push	r1
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
				{
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	20 e3       	ldi	r18, 0x30	; 48
    218e:	32 e0       	ldi	r19, 0x02	; 2
    2190:	fc 01       	movw	r30, r24
    2192:	31 83       	std	Z+1, r19	; 0x01
    2194:	20 83       	st	Z, r18
					
				}
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	81 70       	andi	r24, 0x01	; 1
    219c:	99 27       	eor	r25, r25
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	21 f0       	breq	.+8      	; 0x21aa <_ZN10helicopter8messages7MessageD1Ev+0x32>
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret

000021b4 <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	1f 92       	push	r1
    21ba:	1f 92       	push	r1
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	0e 94 bc 10 	call	0x2178	; 0x2178 <_ZN10helicopter8messages7MessageD1Ev>
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	08 95       	ret

000021de <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	1f 92       	push	r1
    21e4:	1f 92       	push	r1
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01
	return msgSize;
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	9a 81       	ldd	r25, Y+2	; 0x02
    21f2:	fc 01       	movw	r30, r24
    21f4:	83 81       	ldd	r24, Z+3	; 0x03
    21f6:	94 81       	ldd	r25, Z+4	; 0x04
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	08 95       	ret

00002202 <_ZN10helicopter8messages7Message8getBytesEv>:
				
/**
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	1f 92       	push	r1
    2208:	1f 92       	push	r1
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
	return NULL;
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	00 d0       	rcall	.+0      	; 0x2226 <_ZN10helicopter8messages7Message12buildMessageEPh+0x6>
    2226:	1f 92       	push	r1
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	7c 83       	std	Y+4, r23	; 0x04
    2232:	6b 83       	std	Y+3, r22	; 0x03
	//noop. subclass should implement this.
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <_ZN10helicopter8messages7MessageC1Ehi>:
			
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	00 d0       	rcall	.+0      	; 0x2248 <_ZN10helicopter8messages7MessageC1Ehi+0x6>
    2248:	1f 92       	push	r1
    224a:	1f 92       	push	r1
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	6b 83       	std	Y+3, r22	; 0x03
    2256:	5d 83       	std	Y+5, r21	; 0x05
    2258:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	20 e3       	ldi	r18, 0x30	; 48
    2260:	32 e0       	ldi	r19, 0x02	; 2
    2262:	fc 01       	movw	r30, r24
    2264:	31 83       	std	Z+1, r19	; 0x01
    2266:	20 83       	st	Z, r18
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	2b 81       	ldd	r18, Y+3	; 0x03
    226e:	fc 01       	movw	r30, r24
    2270:	22 83       	std	Z+2, r18	; 0x02
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	2c 81       	ldd	r18, Y+4	; 0x04
    2278:	3d 81       	ldd	r19, Y+5	; 0x05
    227a:	fc 01       	movw	r30, r24
    227c:	34 83       	std	Z+4, r19	; 0x04
    227e:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	1f 92       	push	r1
    2296:	1f 92       	push	r1
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	63 e0       	ldi	r22, 0x03	; 3
    22aa:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN10helicopter8messages7MessageC1Ehi>
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	2c e3       	ldi	r18, 0x3C	; 60
    22b4:	32 e0       	ldi	r19, 0x02	; 2
    22b6:	fc 01       	movw	r30, r24
    22b8:	31 83       	std	Z+1, r19	; 0x01
    22ba:	20 83       	st	Z, r18
				{
								
				}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <_ZN10helicopter8messages11SyncMessageD1Ev>:
				
				~SyncMessage()
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	1f 92       	push	r1
    22cc:	1f 92       	push	r1
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
				{
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	2c e3       	ldi	r18, 0x3C	; 60
    22dc:	32 e0       	ldi	r19, 0x02	; 2
    22de:	fc 01       	movw	r30, r24
    22e0:	31 83       	std	Z+1, r19	; 0x01
    22e2:	20 83       	st	Z, r18
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	0e 94 bc 10 	call	0x2178	; 0x2178 <_ZN10helicopter8messages7MessageD1Ev>
					
				}
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	81 70       	andi	r24, 0x01	; 1
    22f2:	99 27       	eor	r25, r25
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	21 f0       	breq	.+8      	; 0x2300 <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	9a 81       	ldd	r25, Y+2	; 0x02
    22fc:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	08 95       	ret

0000230a <_ZN10helicopter8messages11SyncMessageD0Ev>:
				SyncMessage(): Message(MessageType,MessageSize)
				{
								
				}
				
				~SyncMessage()
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	1f 92       	push	r1
    2310:	1f 92       	push	r1
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <_ZN10helicopter8messages11SyncMessageD1Ev>
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	08 95       	ret

00002334 <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	00 d0       	rcall	.+0      	; 0x233a <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
    233a:	00 d0       	rcall	.+0      	; 0x233c <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <_Znaj>
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	fc 01       	movw	r30, r24
    235e:	22 81       	ldd	r18, Z+2	; 0x02
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	fc 01       	movw	r30, r24
    2366:	20 83       	st	Z, r18
	
	return msg;
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    236c:	26 96       	adiw	r28, 0x06	; 6
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	08 95       	ret

0000237e <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:

void SyncMessage::buildMessage(byte *message)
{
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	00 d0       	rcall	.+0      	; 0x2384 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x6>
    2384:	1f 92       	push	r1
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	7c 83       	std	Y+4, r23	; 0x04
    2390:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	41 f0       	breq	.+16     	; 0x23aa <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x2c>
	{
		msgType = message[0];
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	fc 01       	movw	r30, r24
    23a0:	20 81       	ld	r18, Z
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	fc 01       	movw	r30, r24
    23a8:	22 83       	std	Z+2, r18	; 0x02
	}
}
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <_ZN10helicopter8messages7Message6encodeERPhRl>:
				
				/**
				 * Mem copies the value into the buffer pointer then increments
				 * the pointer location by the size of the value copied.
				 */
				void encode (byte *&buffPtr, long &val)
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	00 d0       	rcall	.+0      	; 0x23be <_ZN10helicopter8messages7Message6encodeERPhRl+0x6>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <_ZN10helicopter8messages7Message6encodeERPhRl+0x8>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	7c 83       	std	Y+4, r23	; 0x04
    23ca:	6b 83       	std	Y+3, r22	; 0x03
    23cc:	5e 83       	std	Y+6, r21	; 0x06
    23ce:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	fc 01       	movw	r30, r24
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	2d 81       	ldd	r18, Y+5	; 0x05
    23dc:	3e 81       	ldd	r19, Y+6	; 0x06
    23de:	44 e0       	ldi	r20, 0x04	; 4
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	b9 01       	movw	r22, r18
    23e4:	0e 94 aa 22 	call	0x4554	; 0x4554 <memcpy>
					buffPtr += sizeof(val);
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	fc 01       	movw	r30, r24
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	9c 01       	movw	r18, r24
    23f4:	2c 5f       	subi	r18, 0xFC	; 252
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	fc 01       	movw	r30, r24
    23fe:	31 83       	std	Z+1, r19	; 0x01
    2400:	20 83       	st	Z, r18
				}
    2402:	26 96       	adiw	r28, 0x06	; 6
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <_ZN10helicopter8messages7Message6encodeERPhRm>:
				
				void encode (byte *&buffPtr, unsigned long &val)
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	00 d0       	rcall	.+0      	; 0x241a <_ZN10helicopter8messages7Message6encodeERPhRm+0x6>
    241a:	00 d0       	rcall	.+0      	; 0x241c <_ZN10helicopter8messages7Message6encodeERPhRm+0x8>
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	7c 83       	std	Y+4, r23	; 0x04
    2426:	6b 83       	std	Y+3, r22	; 0x03
    2428:	5e 83       	std	Y+6, r21	; 0x06
    242a:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	fc 01       	movw	r30, r24
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	2d 81       	ldd	r18, Y+5	; 0x05
    2438:	3e 81       	ldd	r19, Y+6	; 0x06
    243a:	44 e0       	ldi	r20, 0x04	; 4
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	b9 01       	movw	r22, r18
    2440:	0e 94 aa 22 	call	0x4554	; 0x4554 <memcpy>
					buffPtr += sizeof(val);
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	fc 01       	movw	r30, r24
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	9c 01       	movw	r18, r24
    2450:	2c 5f       	subi	r18, 0xFC	; 252
    2452:	3f 4f       	sbci	r19, 0xFF	; 255
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	fc 01       	movw	r30, r24
    245a:	31 83       	std	Z+1, r19	; 0x01
    245c:	20 83       	st	Z, r18
				}		
    245e:	26 96       	adiw	r28, 0x06	; 6
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	08 95       	ret

00002470 <_ZN10helicopter8messages7Message6encodeERPhRh>:
				
				void encode (byte *&buffPtr, byte &val)
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	00 d0       	rcall	.+0      	; 0x2476 <_ZN10helicopter8messages7Message6encodeERPhRh+0x6>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <_ZN10helicopter8messages7Message6encodeERPhRh+0x8>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	7c 83       	std	Y+4, r23	; 0x04
    2482:	6b 83       	std	Y+3, r22	; 0x03
    2484:	5e 83       	std	Y+6, r21	; 0x06
    2486:	4d 83       	std	Y+5, r20	; 0x05
				{
					*buffPtr = val;
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	fc 01       	movw	r30, r24
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	2d 81       	ldd	r18, Y+5	; 0x05
    2494:	3e 81       	ldd	r19, Y+6	; 0x06
    2496:	f9 01       	movw	r30, r18
    2498:	20 81       	ld	r18, Z
    249a:	fc 01       	movw	r30, r24
    249c:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	fc 01       	movw	r30, r24
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	9c 01       	movw	r18, r24
    24aa:	2f 5f       	subi	r18, 0xFF	; 255
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	fc 01       	movw	r30, r24
    24b4:	31 83       	std	Z+1, r19	; 0x01
    24b6:	20 83       	st	Z, r18
				}
    24b8:	26 96       	adiw	r28, 0x06	; 6
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	08 95       	ret

000024ca <_ZN10helicopter8messages7Message6decodeERPhRh>:
				
				/**
				 * Copies the the value at the buff pointer location into the given val parameter and
				 * increments the buffer by the sizeof(val)
				 */
				void decode (byte *&buffPtr, byte &val)
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <_ZN10helicopter8messages7Message6decodeERPhRh+0x6>
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <_ZN10helicopter8messages7Message6decodeERPhRh+0x8>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	7c 83       	std	Y+4, r23	; 0x04
    24dc:	6b 83       	std	Y+3, r22	; 0x03
    24de:	5e 83       	std	Y+6, r21	; 0x06
    24e0:	4d 83       	std	Y+5, r20	; 0x05
				{
					val = *buffPtr;
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	fc 01       	movw	r30, r24
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	fc 01       	movw	r30, r24
    24ee:	20 81       	ld	r18, Z
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	fc 01       	movw	r30, r24
    24f6:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	fc 01       	movw	r30, r24
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	9c 01       	movw	r18, r24
    2504:	2f 5f       	subi	r18, 0xFF	; 255
    2506:	3f 4f       	sbci	r19, 0xFF	; 255
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	fc 01       	movw	r30, r24
    250e:	31 83       	std	Z+1, r19	; 0x01
    2510:	20 83       	st	Z, r18
				}
    2512:	26 96       	adiw	r28, 0x06	; 6
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	08 95       	ret

00002524 <_ZN10helicopter8messages7Message6decodeERPhRl>:
				
				void decode (byte *&buffPtr, long &val)
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	00 d0       	rcall	.+0      	; 0x252a <_ZN10helicopter8messages7Message6decodeERPhRl+0x6>
    252a:	00 d0       	rcall	.+0      	; 0x252c <_ZN10helicopter8messages7Message6decodeERPhRl+0x8>
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	9a 83       	std	Y+2, r25	; 0x02
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	7c 83       	std	Y+4, r23	; 0x04
    2536:	6b 83       	std	Y+3, r22	; 0x03
    2538:	5e 83       	std	Y+6, r21	; 0x06
    253a:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	fc 01       	movw	r30, r24
    2542:	20 81       	ld	r18, Z
    2544:	31 81       	ldd	r19, Z+1	; 0x01
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	44 e0       	ldi	r20, 0x04	; 4
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	b9 01       	movw	r22, r18
    2550:	0e 94 aa 22 	call	0x4554	; 0x4554 <memcpy>
					buffPtr += sizeof(val);
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	fc 01       	movw	r30, r24
    255a:	80 81       	ld	r24, Z
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	9c 01       	movw	r18, r24
    2560:	2c 5f       	subi	r18, 0xFC	; 252
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	fc 01       	movw	r30, r24
    256a:	31 83       	std	Z+1, r19	; 0x01
    256c:	20 83       	st	Z, r18
				}
    256e:	26 96       	adiw	r28, 0x06	; 6
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <_ZN10helicopter8messages7Message6decodeERPhRm>:
				
				void decode (byte *&buffPtr, unsigned long &val)
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	00 d0       	rcall	.+0      	; 0x2586 <_ZN10helicopter8messages7Message6decodeERPhRm+0x6>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <_ZN10helicopter8messages7Message6decodeERPhRm+0x8>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	7c 83       	std	Y+4, r23	; 0x04
    2592:	6b 83       	std	Y+3, r22	; 0x03
    2594:	5e 83       	std	Y+6, r21	; 0x06
    2596:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	fc 01       	movw	r30, r24
    259e:	20 81       	ld	r18, Z
    25a0:	31 81       	ldd	r19, Z+1	; 0x01
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	44 e0       	ldi	r20, 0x04	; 4
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	b9 01       	movw	r22, r18
    25ac:	0e 94 aa 22 	call	0x4554	; 0x4554 <memcpy>
					buffPtr += sizeof(val);
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	fc 01       	movw	r30, r24
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	9c 01       	movw	r18, r24
    25bc:	2c 5f       	subi	r18, 0xFC	; 252
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	fc 01       	movw	r30, r24
    25c6:	31 83       	std	Z+1, r19	; 0x01
    25c8:	20 83       	st	Z, r18
				}
    25ca:	26 96       	adiw	r28, 0x06	; 6
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	08 95       	ret

000025dc <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>:
			 * Z axis is pointing up out of the FC
			 */
			

			double MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(double val) { magYawDegrees = val; }	
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x6>
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x8>
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	4b 83       	std	Y+3, r20	; 0x03
    25ee:	5c 83       	std	Y+4, r21	; 0x04
    25f0:	6d 83       	std	Y+5, r22	; 0x05
    25f2:	7e 83       	std	Y+6, r23	; 0x06
    25f4:	29 81       	ldd	r18, Y+1	; 0x01
    25f6:	3a 81       	ldd	r19, Y+2	; 0x02
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	ad 81       	ldd	r26, Y+5	; 0x05
    25fe:	be 81       	ldd	r27, Y+6	; 0x06
    2600:	f9 01       	movw	r30, r18
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
    260a:	26 96       	adiw	r28, 0x06	; 6
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	00 d0       	rcall	.+0      	; 0x2622 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x6>
    2622:	00 d0       	rcall	.+0      	; 0x2624 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x8>
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	4b 83       	std	Y+3, r20	; 0x03
    262e:	5c 83       	std	Y+4, r21	; 0x04
    2630:	6d 83       	std	Y+5, r22	; 0x05
    2632:	7e 83       	std	Y+6, r23	; 0x06
    2634:	29 81       	ldd	r18, Y+1	; 0x01
    2636:	3a 81       	ldd	r19, Y+2	; 0x02
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	ad 81       	ldd	r26, Y+5	; 0x05
    263e:	be 81       	ldd	r27, Y+6	; 0x06
    2640:	f9 01       	movw	r30, r18
    2642:	80 8b       	std	Z+16, r24	; 0x10
    2644:	91 8b       	std	Z+17, r25	; 0x11
    2646:	a2 8b       	std	Z+18, r26	; 0x12
    2648:	b3 8b       	std	Z+19, r27	; 0x13
    264a:	26 96       	adiw	r28, 0x06	; 6
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	08 95       	ret

0000265c <_ZNK10helicopter5model11SystemModel15YawProportionalEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
			void YawIntegral(double val) { yawIntegral = val;}

			double YawProportional() const {return yawProportional;}
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	1f 92       	push	r1
    2662:	1f 92       	push	r1
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	fc 01       	movw	r30, r24
    2672:	84 8d       	ldd	r24, Z+28	; 0x1c
    2674:	95 8d       	ldd	r25, Z+29	; 0x1d
    2676:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2678:	b7 8d       	ldd	r27, Z+31	; 0x1f
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	08 95       	ret

00002688 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>:
			void YawProportional(double val) { yawProportional = val;}

			double YawDerivativeError() const {return yawDerivativeError;}
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	1f 92       	push	r1
    268e:	1f 92       	push	r1
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	9a 83       	std	Y+2, r25	; 0x02
    2696:	89 83       	std	Y+1, r24	; 0x01
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02
    269c:	fc 01       	movw	r30, r24
    269e:	80 a1       	ldd	r24, Z+32	; 0x20
    26a0:	91 a1       	ldd	r25, Z+33	; 0x21
    26a2:	a2 a1       	ldd	r26, Z+34	; 0x22
    26a4:	b3 a1       	ldd	r27, Z+35	; 0x23
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>:
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
																							
						
			long Timeouts() const {return timeouts; }
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	1f 92       	push	r1
    26ba:	1f 92       	push	r1
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	9a 83       	std	Y+2, r25	; 0x02
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	fc 01       	movw	r30, r24
    26ca:	84 a1       	ldd	r24, Z+36	; 0x24
    26cc:	95 a1       	ldd	r25, Z+37	; 0x25
    26ce:	a6 a1       	ldd	r26, Z+38	; 0x26
    26d0:	b7 a1       	ldd	r27, Z+39	; 0x27
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <_ZN10helicopter5model11SystemModel8TimeoutsEl>:
			void Timeouts(long val) { timeouts = val; }
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <_ZN10helicopter5model11SystemModel8TimeoutsEl+0x6>
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <_ZN10helicopter5model11SystemModel8TimeoutsEl+0x8>
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	4b 83       	std	Y+3, r20	; 0x03
    26f2:	5c 83       	std	Y+4, r21	; 0x04
    26f4:	6d 83       	std	Y+5, r22	; 0x05
    26f6:	7e 83       	std	Y+6, r23	; 0x06
    26f8:	29 81       	ldd	r18, Y+1	; 0x01
    26fa:	3a 81       	ldd	r19, Y+2	; 0x02
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	ad 81       	ldd	r26, Y+5	; 0x05
    2702:	be 81       	ldd	r27, Y+6	; 0x06
    2704:	f9 01       	movw	r30, r18
    2706:	84 a3       	std	Z+36, r24	; 0x24
    2708:	95 a3       	std	Z+37, r25	; 0x25
    270a:	a6 a3       	std	Z+38, r26	; 0x26
    270c:	b7 a3       	std	Z+39, r27	; 0x27
    270e:	26 96       	adiw	r28, 0x06	; 6
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret

00002720 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>:
			
			long UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	1f 92       	push	r1
    2726:	1f 92       	push	r1
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	fc 01       	movw	r30, r24
    2736:	80 a5       	ldd	r24, Z+40	; 0x28
    2738:	91 a5       	ldd	r25, Z+41	; 0x29
    273a:	a2 a5       	ldd	r26, Z+42	; 0x2a
    273c:	b3 a5       	ldd	r27, Z+43	; 0x2b
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl>:
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	00 d0       	rcall	.+0      	; 0x2752 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl+0x6>
    2752:	00 d0       	rcall	.+0      	; 0x2754 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl+0x8>
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	4b 83       	std	Y+3, r20	; 0x03
    275e:	5c 83       	std	Y+4, r21	; 0x04
    2760:	6d 83       	std	Y+5, r22	; 0x05
    2762:	7e 83       	std	Y+6, r23	; 0x06
    2764:	29 81       	ldd	r18, Y+1	; 0x01
    2766:	3a 81       	ldd	r19, Y+2	; 0x02
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	ad 81       	ldd	r26, Y+5	; 0x05
    276e:	be 81       	ldd	r27, Y+6	; 0x06
    2770:	f9 01       	movw	r30, r18
    2772:	80 a7       	std	Z+40, r24	; 0x28
    2774:	91 a7       	std	Z+41, r25	; 0x29
    2776:	a2 a7       	std	Z+42, r26	; 0x2a
    2778:	b3 a7       	std	Z+43, r27	; 0x2b
    277a:	26 96       	adiw	r28, 0x06	; 6
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>:
			
			long ChecksumErrors() const {return checksumErrors; }
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	1f 92       	push	r1
    2792:	1f 92       	push	r1
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	fc 01       	movw	r30, r24
    27a2:	84 a5       	ldd	r24, Z+44	; 0x2c
    27a4:	95 a5       	ldd	r25, Z+45	; 0x2d
    27a6:	a6 a5       	ldd	r26, Z+46	; 0x2e
    27a8:	b7 a5       	ldd	r27, Z+47	; 0x2f
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	08 95       	ret

000027b8 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl>:
			void ChecksumErrors(long val) { checksumErrors = val; }
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	00 d0       	rcall	.+0      	; 0x27be <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl+0x6>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl+0x8>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	4b 83       	std	Y+3, r20	; 0x03
    27ca:	5c 83       	std	Y+4, r21	; 0x04
    27cc:	6d 83       	std	Y+5, r22	; 0x05
    27ce:	7e 83       	std	Y+6, r23	; 0x06
    27d0:	29 81       	ldd	r18, Y+1	; 0x01
    27d2:	3a 81       	ldd	r19, Y+2	; 0x02
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	9c 81       	ldd	r25, Y+4	; 0x04
    27d8:	ad 81       	ldd	r26, Y+5	; 0x05
    27da:	be 81       	ldd	r27, Y+6	; 0x06
    27dc:	f9 01       	movw	r30, r18
    27de:	84 a7       	std	Z+44, r24	; 0x2c
    27e0:	95 a7       	std	Z+45, r25	; 0x2d
    27e2:	a6 a7       	std	Z+46, r26	; 0x2e
    27e4:	b7 a7       	std	Z+47, r27	; 0x2f
    27e6:	26 96       	adiw	r28, 0x06	; 6
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(Timeouts) + 
				sizeof(UnrecognizedMsgTypes) + 
				sizeof(ChecksumErrors) + 
				sizeof(NumOfBlownFrames);
			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	1f 92       	push	r1
    27fe:	1f 92       	push	r1
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
					YawDerivativeError(0),
					YawControl(0),					
					Timeouts(0),
					UnrecognizedMsgTypes(0),
					ChecksumErrors(0),
					NumOfBlownFrames(0)
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	49 e2       	ldi	r20, 0x29	; 41
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN10helicopter8messages7MessageC1Ehi>
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	28 e4       	ldi	r18, 0x48	; 72
    281c:	32 e0       	ldi	r19, 0x02	; 2
    281e:	fc 01       	movw	r30, r24
    2820:	31 83       	std	Z+1, r19	; 0x01
    2822:	20 83       	st	Z, r18
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	fc 01       	movw	r30, r24
    282a:	15 82       	std	Z+5, r1	; 0x05
    282c:	16 82       	std	Z+6, r1	; 0x06
    282e:	17 82       	std	Z+7, r1	; 0x07
    2830:	10 86       	std	Z+8, r1	; 0x08
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	fc 01       	movw	r30, r24
    2838:	11 86       	std	Z+9, r1	; 0x09
    283a:	12 86       	std	Z+10, r1	; 0x0a
    283c:	13 86       	std	Z+11, r1	; 0x0b
    283e:	14 86       	std	Z+12, r1	; 0x0c
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	fc 01       	movw	r30, r24
    2846:	15 86       	std	Z+13, r1	; 0x0d
    2848:	16 86       	std	Z+14, r1	; 0x0e
    284a:	17 86       	std	Z+15, r1	; 0x0f
    284c:	10 8a       	std	Z+16, r1	; 0x10
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	fc 01       	movw	r30, r24
    2854:	11 8a       	std	Z+17, r1	; 0x11
    2856:	12 8a       	std	Z+18, r1	; 0x12
    2858:	13 8a       	std	Z+19, r1	; 0x13
    285a:	14 8a       	std	Z+20, r1	; 0x14
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	fc 01       	movw	r30, r24
    2862:	15 8a       	std	Z+21, r1	; 0x15
    2864:	16 8a       	std	Z+22, r1	; 0x16
    2866:	17 8a       	std	Z+23, r1	; 0x17
    2868:	10 8e       	std	Z+24, r1	; 0x18
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	fc 01       	movw	r30, r24
    2870:	11 8e       	std	Z+25, r1	; 0x19
    2872:	12 8e       	std	Z+26, r1	; 0x1a
    2874:	13 8e       	std	Z+27, r1	; 0x1b
    2876:	14 8e       	std	Z+28, r1	; 0x1c
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	fc 01       	movw	r30, r24
    287e:	15 8e       	std	Z+29, r1	; 0x1d
    2880:	16 8e       	std	Z+30, r1	; 0x1e
    2882:	17 8e       	std	Z+31, r1	; 0x1f
    2884:	10 a2       	std	Z+32, r1	; 0x20
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	fc 01       	movw	r30, r24
    288c:	11 a2       	std	Z+33, r1	; 0x21
    288e:	12 a2       	std	Z+34, r1	; 0x22
    2890:	13 a2       	std	Z+35, r1	; 0x23
    2892:	14 a2       	std	Z+36, r1	; 0x24
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	fc 01       	movw	r30, r24
    289a:	15 a2       	std	Z+37, r1	; 0x25
    289c:	16 a2       	std	Z+38, r1	; 0x26
    289e:	17 a2       	std	Z+39, r1	; 0x27
    28a0:	10 a6       	std	Z+40, r1	; 0x28
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	fc 01       	movw	r30, r24
    28a8:	11 a6       	std	Z+41, r1	; 0x29
    28aa:	12 a6       	std	Z+42, r1	; 0x2a
    28ac:	13 a6       	std	Z+43, r1	; 0x2b
    28ae:	14 a6       	std	Z+44, r1	; 0x2c
				{
				
				}
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	08 95       	ret

000028ba <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	1f 92       	push	r1
    28c0:	1f 92       	push	r1
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	28 e4       	ldi	r18, 0x48	; 72
    28d0:	32 e0       	ldi	r19, 0x02	; 2
    28d2:	fc 01       	movw	r30, r24
    28d4:	31 83       	std	Z+1, r19	; 0x01
    28d6:	20 83       	st	Z, r18
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	0e 94 bc 10 	call	0x2178	; 0x2178 <_ZN10helicopter8messages7MessageD1Ev>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	81 70       	andi	r24, 0x01	; 1
    28e6:	99 27       	eor	r25, r25
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	21 f0       	breq	.+8      	; 0x28f4 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	1f 92       	push	r1
    2904:	1f 92       	push	r1
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	08 95       	ret

00002928 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	00 d0       	rcall	.+0      	; 0x292e <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    292e:	00 d0       	rcall	.+0      	; 0x2930 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    2938:	89 e2       	ldi	r24, 0x29	; 41
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <_Znaj>
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	8b 83       	std	Y+3, r24	; 0x03
	
	encode (msgPtr, msgType);
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	ac 01       	movw	r20, r24
    2952:	4e 5f       	subi	r20, 0xFE	; 254
    2954:	5f 4f       	sbci	r21, 0xFF	; 255
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	9e 01       	movw	r18, r28
    295c:	2d 5f       	subi	r18, 0xFD	; 253
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	b9 01       	movw	r22, r18
    2962:	0e 94 38 12 	call	0x2470	; 0x2470 <_ZN10helicopter8messages7Message6encodeERPhRh>
	encode (msgPtr, MagYaw);
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	ac 01       	movw	r20, r24
    296c:	4b 5f       	subi	r20, 0xFB	; 251
    296e:	5f 4f       	sbci	r21, 0xFF	; 255
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	9e 01       	movw	r18, r28
    2976:	2d 5f       	subi	r18, 0xFD	; 253
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	b9 01       	movw	r22, r18
    297c:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN10helicopter8messages7Message6encodeERPhRm>
	encode (msgPtr, YawVelocityDegreesPerSecond);
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	ac 01       	movw	r20, r24
    2986:	47 5f       	subi	r20, 0xF7	; 247
    2988:	5f 4f       	sbci	r21, 0xFF	; 255
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	9e 01       	movw	r18, r28
    2990:	2d 5f       	subi	r18, 0xFD	; 253
    2992:	3f 4f       	sbci	r19, 0xFF	; 255
    2994:	b9 01       	movw	r22, r18
    2996:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawIntegral);
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	ac 01       	movw	r20, r24
    29a0:	43 5f       	subi	r20, 0xF3	; 243
    29a2:	5f 4f       	sbci	r21, 0xFF	; 255
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	9e 01       	movw	r18, r28
    29aa:	2d 5f       	subi	r18, 0xFD	; 253
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	b9 01       	movw	r22, r18
    29b0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawProportional);
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	ac 01       	movw	r20, r24
    29ba:	4f 5e       	subi	r20, 0xEF	; 239
    29bc:	5f 4f       	sbci	r21, 0xFF	; 255
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	9e 01       	movw	r18, r28
    29c4:	2d 5f       	subi	r18, 0xFD	; 253
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	b9 01       	movw	r22, r18
    29ca:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawDerivativeError);
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	ac 01       	movw	r20, r24
    29d4:	4b 5e       	subi	r20, 0xEB	; 235
    29d6:	5f 4f       	sbci	r21, 0xFF	; 255
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	9e 01       	movw	r18, r28
    29de:	2d 5f       	subi	r18, 0xFD	; 253
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	b9 01       	movw	r22, r18
    29e4:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawControl);
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	ac 01       	movw	r20, r24
    29ee:	47 5e       	subi	r20, 0xE7	; 231
    29f0:	5f 4f       	sbci	r21, 0xFF	; 255
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	9e 81       	ldd	r25, Y+6	; 0x06
    29f6:	9e 01       	movw	r18, r28
    29f8:	2d 5f       	subi	r18, 0xFD	; 253
    29fa:	3f 4f       	sbci	r19, 0xFF	; 255
    29fc:	b9 01       	movw	r22, r18
    29fe:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, Timeouts);
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	ac 01       	movw	r20, r24
    2a08:	43 5e       	subi	r20, 0xE3	; 227
    2a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	9e 01       	movw	r18, r28
    2a12:	2d 5f       	subi	r18, 0xFD	; 253
    2a14:	3f 4f       	sbci	r19, 0xFF	; 255
    2a16:	b9 01       	movw	r22, r18
    2a18:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, UnrecognizedMsgTypes);
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	ac 01       	movw	r20, r24
    2a22:	4f 5d       	subi	r20, 0xDF	; 223
    2a24:	5f 4f       	sbci	r21, 0xFF	; 255
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	9e 01       	movw	r18, r28
    2a2c:	2d 5f       	subi	r18, 0xFD	; 253
    2a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a30:	b9 01       	movw	r22, r18
    2a32:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, ChecksumErrors);
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	ac 01       	movw	r20, r24
    2a3c:	4b 5d       	subi	r20, 0xDB	; 219
    2a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	9e 01       	movw	r18, r28
    2a46:	2d 5f       	subi	r18, 0xFD	; 253
    2a48:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4a:	b9 01       	movw	r22, r18
    2a4c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, NumOfBlownFrames);
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	9e 81       	ldd	r25, Y+6	; 0x06
    2a54:	ac 01       	movw	r20, r24
    2a56:	47 5d       	subi	r20, 0xD7	; 215
    2a58:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	9e 01       	movw	r18, r28
    2a60:	2d 5f       	subi	r18, 0xFD	; 253
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	b9 01       	movw	r22, r18
    2a66:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN10helicopter8messages7Message6encodeERPhRl>
				
	return msg;
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a6e:	26 96       	adiw	r28, 0x06	; 6
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	08 95       	ret

00002a80 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x6>
    2a86:	1f 92       	push	r1
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	7c 83       	std	Y+4, r23	; 0x04
    2a92:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	9c 81       	ldd	r25, Y+4	; 0x04
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1e>
    2a9c:	8f c0       	rjmp	.+286    	; 0x2bbc <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x13c>
	{
		decode (message,msgType);
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	ac 01       	movw	r20, r24
    2aa4:	4e 5f       	subi	r20, 0xFE	; 254
    2aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	9e 01       	movw	r18, r28
    2aae:	2d 5f       	subi	r18, 0xFD	; 253
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN10helicopter8messages7Message6decodeERPhRh>
		decode (message,MagYaw);
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	ac 01       	movw	r20, r24
    2abe:	4b 5f       	subi	r20, 0xFB	; 251
    2ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac6:	9e 01       	movw	r18, r28
    2ac8:	2d 5f       	subi	r18, 0xFD	; 253
    2aca:	3f 4f       	sbci	r19, 0xFF	; 255
    2acc:	b9 01       	movw	r22, r18
    2ace:	0e 94 c0 12 	call	0x2580	; 0x2580 <_ZN10helicopter8messages7Message6decodeERPhRm>
		decode (message,YawVelocityDegreesPerSecond);
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	ac 01       	movw	r20, r24
    2ad8:	47 5f       	subi	r20, 0xF7	; 247
    2ada:	5f 4f       	sbci	r21, 0xFF	; 255
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	9e 01       	movw	r18, r28
    2ae2:	2d 5f       	subi	r18, 0xFD	; 253
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	b9 01       	movw	r22, r18
    2ae8:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawIntegral);
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	ac 01       	movw	r20, r24
    2af2:	43 5f       	subi	r20, 0xF3	; 243
    2af4:	5f 4f       	sbci	r21, 0xFF	; 255
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	9e 01       	movw	r18, r28
    2afc:	2d 5f       	subi	r18, 0xFD	; 253
    2afe:	3f 4f       	sbci	r19, 0xFF	; 255
    2b00:	b9 01       	movw	r22, r18
    2b02:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawProportional);
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	4f 5e       	subi	r20, 0xEF	; 239
    2b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	9e 01       	movw	r18, r28
    2b16:	2d 5f       	subi	r18, 0xFD	; 253
    2b18:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1a:	b9 01       	movw	r22, r18
    2b1c:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawDerivativeError);	
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	ac 01       	movw	r20, r24
    2b26:	4b 5e       	subi	r20, 0xEB	; 235
    2b28:	5f 4f       	sbci	r21, 0xFF	; 255
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	9e 01       	movw	r18, r28
    2b30:	2d 5f       	subi	r18, 0xFD	; 253
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	b9 01       	movw	r22, r18
    2b36:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, YawControl);					
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	ac 01       	movw	r20, r24
    2b40:	47 5e       	subi	r20, 0xE7	; 231
    2b42:	5f 4f       	sbci	r21, 0xFF	; 255
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	9a 81       	ldd	r25, Y+2	; 0x02
    2b48:	9e 01       	movw	r18, r28
    2b4a:	2d 5f       	subi	r18, 0xFD	; 253
    2b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4e:	b9 01       	movw	r22, r18
    2b50:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,Timeouts);
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	ac 01       	movw	r20, r24
    2b5a:	43 5e       	subi	r20, 0xE3	; 227
    2b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	9a 81       	ldd	r25, Y+2	; 0x02
    2b62:	9e 01       	movw	r18, r28
    2b64:	2d 5f       	subi	r18, 0xFD	; 253
    2b66:	3f 4f       	sbci	r19, 0xFF	; 255
    2b68:	b9 01       	movw	r22, r18
    2b6a:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,UnrecognizedMsgTypes);
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	ac 01       	movw	r20, r24
    2b74:	4f 5d       	subi	r20, 0xDF	; 223
    2b76:	5f 4f       	sbci	r21, 0xFF	; 255
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	9e 01       	movw	r18, r28
    2b7e:	2d 5f       	subi	r18, 0xFD	; 253
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	b9 01       	movw	r22, r18
    2b84:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,ChecksumErrors);
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	ac 01       	movw	r20, r24
    2b8e:	4b 5d       	subi	r20, 0xDB	; 219
    2b90:	5f 4f       	sbci	r21, 0xFF	; 255
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	9e 01       	movw	r18, r28
    2b98:	2d 5f       	subi	r18, 0xFD	; 253
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9c:	b9 01       	movw	r22, r18
    2b9e:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,NumOfBlownFrames);
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba6:	ac 01       	movw	r20, r24
    2ba8:	47 5d       	subi	r20, 0xD7	; 215
    2baa:	5f 4f       	sbci	r21, 0xFF	; 255
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	9e 01       	movw	r18, r28
    2bb2:	2d 5f       	subi	r18, 0xFD	; 253
    2bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb6:	b9 01       	movw	r22, r18
    2bb8:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN10helicopter8messages7Message6decodeERPhRl>
	}
}
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	08 95       	ret

00002bca <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh+0xa>
    2bd4:	1f 92       	push	r1
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    2bde:	8d e2       	ldi	r24, 0x2D	; 45
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    2be6:	8c 01       	movw	r16, r24
    2be8:	c8 01       	movw	r24, r16
    2bea:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    2bee:	1a 83       	std	Y+2, r17	; 0x02
    2bf0:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	06 96       	adiw	r24, 0x06	; 6
    2bfe:	fc 01       	movw	r30, r24
    2c00:	20 81       	ld	r18, Z
    2c02:	31 81       	ldd	r19, Z+1	; 0x01
    2c04:	4b 81       	ldd	r20, Y+3	; 0x03
    2c06:	5c 81       	ldd	r21, Y+4	; 0x04
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	ba 01       	movw	r22, r20
    2c0e:	f9 01       	movw	r30, r18
    2c10:	19 95       	eicall
	
	return msg;
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	08 95       	ret

00002c28 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>:

SystemTelemetryMessage * SystemTelemetryMessage::buildMessageFromModel(SystemModel *model)
{
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE+0xa>
    2c32:	1f 92       	push	r1
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
	//throw std::exception("The method or operation is not implemented.");
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    2c3c:	8d e2       	ldi	r24, 0x2D	; 45
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    2c44:	8c 01       	movw	r16, r24
    2c46:	c8 01       	movw	r24, r16
    2c48:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    2c4c:	1a 83       	std	Y+2, r17	; 0x02
    2c4e:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagYaw = model->MagYawDegrees() * 100;
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	48 ec       	ldi	r20, 0xC8	; 200
    2c62:	52 e4       	ldi	r21, 0x42	; 66
    2c64:	bc 01       	movw	r22, r24
    2c66:	cd 01       	movw	r24, r26
    2c68:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	29 81       	ldd	r18, Y+1	; 0x01
    2c7e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c80:	f9 01       	movw	r30, r18
    2c82:	85 83       	std	Z+5, r24	; 0x05
    2c84:	96 83       	std	Z+6, r25	; 0x06
    2c86:	a7 83       	std	Z+7, r26	; 0x07
    2c88:	b0 87       	std	Z+8, r27	; 0x08
	message->YawDerivativeError = model->YawDerivativeError() * 100;
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	48 ec       	ldi	r20, 0xC8	; 200
    2c9c:	52 e4       	ldi	r21, 0x42	; 66
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__fixsfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	29 81       	ldd	r18, Y+1	; 0x01
    2cb8:	3a 81       	ldd	r19, Y+2	; 0x02
    2cba:	f9 01       	movw	r30, r18
    2cbc:	85 8b       	std	Z+21, r24	; 0x15
    2cbe:	96 8b       	std	Z+22, r25	; 0x16
    2cc0:	a7 8b       	std	Z+23, r26	; 0x17
    2cc2:	b0 8f       	std	Z+24, r27	; 0x18
	message->YawIntegral = model->YawIntegral() * 100;
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	48 ec       	ldi	r20, 0xC8	; 200
    2cd6:	52 e4       	ldi	r21, 0x42	; 66
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__fixsfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	29 81       	ldd	r18, Y+1	; 0x01
    2cf2:	3a 81       	ldd	r19, Y+2	; 0x02
    2cf4:	f9 01       	movw	r30, r18
    2cf6:	85 87       	std	Z+13, r24	; 0x0d
    2cf8:	96 87       	std	Z+14, r25	; 0x0e
    2cfa:	a7 87       	std	Z+15, r26	; 0x0f
    2cfc:	b0 8b       	std	Z+16, r27	; 0x10
	message->YawProportional = model->YawProportional() * 100;
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZNK10helicopter5model11SystemModel15YawProportionalEv>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	48 ec       	ldi	r20, 0xC8	; 200
    2d10:	52 e4       	ldi	r21, 0x42	; 66
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__fixsfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	29 81       	ldd	r18, Y+1	; 0x01
    2d2c:	3a 81       	ldd	r19, Y+2	; 0x02
    2d2e:	f9 01       	movw	r30, r18
    2d30:	81 8b       	std	Z+17, r24	; 0x11
    2d32:	92 8b       	std	Z+18, r25	; 0x12
    2d34:	a3 8b       	std	Z+19, r26	; 0x13
    2d36:	b4 8b       	std	Z+20, r27	; 0x14
	message->YawVelocityDegreesPerSecond = model->YawVelocityDegreesPerSecond() * 100;
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	48 ec       	ldi	r20, 0xC8	; 200
    2d4a:	52 e4       	ldi	r21, 0x42	; 66
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__fixsfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	29 81       	ldd	r18, Y+1	; 0x01
    2d66:	3a 81       	ldd	r19, Y+2	; 0x02
    2d68:	f9 01       	movw	r30, r18
    2d6a:	81 87       	std	Z+9, r24	; 0x09
    2d6c:	92 87       	std	Z+10, r25	; 0x0a
    2d6e:	a3 87       	std	Z+11, r26	; 0x0b
    2d70:	b4 87       	std	Z+12, r27	; 0x0c
	message->YawControl = model->YawControl() * 100;
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	9c 81       	ldd	r25, Y+4	; 0x04
    2d76:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK10helicopter5model11SystemModel10YawControlEv>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	48 ec       	ldi	r20, 0xC8	; 200
    2d84:	52 e4       	ldi	r21, 0x42	; 66
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 c3 20 	call	0x4186	; 0x4186 <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__fixsfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	29 81       	ldd	r18, Y+1	; 0x01
    2da0:	3a 81       	ldd	r19, Y+2	; 0x02
    2da2:	f9 01       	movw	r30, r18
    2da4:	81 8f       	std	Z+25, r24	; 0x19
    2da6:	92 8f       	std	Z+26, r25	; 0x1a
    2da8:	a3 8f       	std	Z+27, r26	; 0x1b
    2daa:	b4 8f       	std	Z+28, r27	; 0x1c
	message->ChecksumErrors = model->ChecksumErrors();
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	0e 94 c6 13 	call	0x278c	; 0x278c <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	29 81       	ldd	r18, Y+1	; 0x01
    2dba:	3a 81       	ldd	r19, Y+2	; 0x02
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	85 a3       	std	Z+37, r24	; 0x25
    2dc0:	96 a3       	std	Z+38, r25	; 0x26
    2dc2:	a7 a3       	std	Z+39, r26	; 0x27
    2dc4:	b0 a7       	std	Z+40, r27	; 0x28
	message->Timeouts = model->Timeouts();
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	29 81       	ldd	r18, Y+1	; 0x01
    2dd4:	3a 81       	ldd	r19, Y+2	; 0x02
    2dd6:	f9 01       	movw	r30, r18
    2dd8:	85 8f       	std	Z+29, r24	; 0x1d
    2dda:	96 8f       	std	Z+30, r25	; 0x1e
    2ddc:	a7 8f       	std	Z+31, r26	; 0x1f
    2dde:	b0 a3       	std	Z+32, r27	; 0x20
	message->UnrecognizedMsgTypes = model->UnrecognizedMsgTypes();
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	29 81       	ldd	r18, Y+1	; 0x01
    2dee:	3a 81       	ldd	r19, Y+2	; 0x02
    2df0:	f9 01       	movw	r30, r18
    2df2:	81 a3       	std	Z+33, r24	; 0x21
    2df4:	92 a3       	std	Z+34, r25	; 0x22
    2df6:	a3 a3       	std	Z+35, r26	; 0x23
    2df8:	b4 a3       	std	Z+36, r27	; 0x24
	message->NumOfBlownFrames = model->BlownFrames();
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	0e 94 1b 02 	call	0x436	; 0x436 <_ZNK10helicopter5model11SystemModel11BlownFramesEv>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	29 81       	ldd	r18, Y+1	; 0x01
    2e08:	3a 81       	ldd	r19, Y+2	; 0x02
    2e0a:	f9 01       	movw	r30, r18
    2e0c:	81 a7       	std	Z+41, r24	; 0x29
    2e0e:	92 a7       	std	Z+42, r25	; 0x2a
    2e10:	a3 a7       	std	Z+43, r26	; 0x2b
    2e12:	b4 a7       	std	Z+44, r27	; 0x2c
	
	return message;
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	1f 91       	pop	r17
    2e26:	0f 91       	pop	r16
    2e28:	08 95       	ret

00002e2a <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>:
	model->ChecksumErrors(this->ChecksumErrors);
	model->BlownFrames(this->NumOfBlownFrames);
}

void SystemTelemetryMessage::updateModelFromMessageFromSimulator (SystemModel *model)
{
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE+0x6>
    2e30:	1f 92       	push	r1
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	7c 83       	std	Y+4, r23	; 0x04
    2e3c:	6b 83       	std	Y+3, r22	; 0x03
	model->MagYawDegrees((double) this->MagYaw / 100);
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	fc 01       	movw	r30, r24
    2e44:	85 81       	ldd	r24, Z+5	; 0x05
    2e46:	96 81       	ldd	r25, Z+6	; 0x06
    2e48:	a7 81       	ldd	r26, Z+7	; 0x07
    2e4a:	b0 85       	ldd	r27, Z+8	; 0x08
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__floatunsisf>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	48 ec       	ldi	r20, 0xC8	; 200
    2e5e:	52 e4       	ldi	r21, 0x42	; 66
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__divsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e70:	ac 01       	movw	r20, r24
    2e72:	bd 01       	movw	r22, r26
    2e74:	c9 01       	movw	r24, r18
    2e76:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>
	model->YawVelocityDegreesPerSecond((double) this->YawVelocityDegreesPerSecond / 100);
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7e:	fc 01       	movw	r30, r24
    2e80:	81 85       	ldd	r24, Z+9	; 0x09
    2e82:	92 85       	ldd	r25, Z+10	; 0x0a
    2e84:	a3 85       	ldd	r26, Z+11	; 0x0b
    2e86:	b4 85       	ldd	r27, Z+12	; 0x0c
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <__floatsisf>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	48 ec       	ldi	r20, 0xC8	; 200
    2e9a:	52 e4       	ldi	r21, 0x42	; 66
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__divsf3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eaa:	3c 81       	ldd	r19, Y+4	; 0x04
    2eac:	ac 01       	movw	r20, r24
    2eae:	bd 01       	movw	r22, r26
    2eb0:	c9 01       	movw	r24, r18
    2eb2:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	08 95       	ret

00002ec4 <_ZN10helicopter5tasks4Task8getDelayEv>:
				 * subclasses runTaskImpl to execute the actual task logic.
				 */
				virtual void runTask();
				
					
				int getDelay()
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	1f 92       	push	r1
    2eca:	1f 92       	push	r1
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed8:	fc 01       	movw	r30, r24
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
				}
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	08 95       	ret

00002ee8 <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	1f 92       	push	r1
    2eee:	1f 92       	push	r1
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	9a 83       	std	Y+2, r25	; 0x02
    2ef6:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	9a 81       	ldd	r25, Y+2	; 0x02
    2efc:	fc 01       	movw	r30, r24
    2efe:	84 81       	ldd	r24, Z+4	; 0x04
    2f00:	95 81       	ldd	r25, Z+5	; 0x05
				}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	08 95       	ret

00002f0c <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	00 d0       	rcall	.+0      	; 0x2f12 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    2f12:	1f 92       	push	r1
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	7c 83       	std	Y+4, r23	; 0x04
    2f1e:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	2b 81       	ldd	r18, Y+3	; 0x03
    2f26:	3c 81       	ldd	r19, Y+4	; 0x04
    2f28:	fc 01       	movw	r30, r24
    2f2a:	33 83       	std	Z+3, r19	; 0x03
    2f2c:	22 83       	std	Z+2, r18	; 0x02
				}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	08 95       	ret

00002f3c <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	1f 92       	push	r1
    2f42:	1f 92       	push	r1
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f50:	fc 01       	movw	r30, r24
    2f52:	86 81       	ldd	r24, Z+6	; 0x06
				}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	08 95       	ret

00002f5e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	2b 81       	ldd	r18, Y+3	; 0x03
    2f74:	fc 01       	movw	r30, r24
    2f76:	26 83       	std	Z+6, r18	; 0x06
				}
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	08 95       	ret

00002f84 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	1f 92       	push	r1
    2f8a:	1f 92       	push	r1
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	fc 01       	movw	r30, r24
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	9c 01       	movw	r18, r24
    2fa0:	21 50       	subi	r18, 0x01	; 1
    2fa2:	31 09       	sbc	r19, r1
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	fc 01       	movw	r30, r24
    2faa:	33 83       	std	Z+3, r19	; 0x03
    2fac:	22 83       	std	Z+2, r18	; 0x02
				}
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	08 95       	ret

00002fb8 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for determining which tasks are ready to run.
				*/
				void start();
				
				int getNumOfTasks()
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	1f 92       	push	r1
    2fbe:	1f 92       	push	r1
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
    2fcc:	fc 01       	movw	r30, r24
    2fce:	84 89       	ldd	r24, Z+20	; 0x14
    2fd0:	95 89       	ldd	r25, Z+21	; 0x15
				}
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	08 95       	ret

00002fdc <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	1f 92       	push	r1
    2fe2:	1f 92       	push	r1
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	08 95       	ret

00002ffa <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb>:
				/**
				 * Sets whether a blown frame was detected. (I.e. the dispatcher didn't finish before
				 * the scheduler timmer was triggered again)
				 * @param blownFrameDetected true if a frame was blown, false otherwise.
				 */
				void hasBlownFrame(bool blowFrameDetected)
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	00 d0       	rcall	.+0      	; 0x3000 <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb+0x6>
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->blowFrameDetected = blowFrameDetected;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	9a 81       	ldd	r25, Y+2	; 0x02
    300e:	2b 81       	ldd	r18, Y+3	; 0x03
    3010:	fc 01       	movw	r30, r24
    3012:	22 8f       	std	Z+26, r18	; 0x1a
				}
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	df 91       	pop	r29
    301c:	cf 91       	pop	r28
    301e:	08 95       	ret

00003020 <_ZN10helicopter9scheduler9Scheduler20hasCompletedDispatchEv>:
				/**
				 * Returns a flag indicating that the dispatch method has completed. This is for
				 * use by the scheduler to determine if the dispatcher blew a frame.
				 * @return true if the dispatch method completed, false otherwise. 
				 */
				bool hasCompletedDispatch()
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	1f 92       	push	r1
    3026:	1f 92       	push	r1
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
				{
					return completedDispatch;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	fc 01       	movw	r30, r24
    3036:	83 8d       	ldd	r24, Z+27	; 0x1b
				}
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	08 95       	ret

00003042 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    3052:	80 91 88 02 	lds	r24, 0x0288
    3056:	90 91 89 02 	lds	r25, 0x0289
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	a1 f4       	brne	.+40     	; 0x3086 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x44>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    305e:	8c e1       	ldi	r24, 0x1C	; 28
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_Znwj>
    3066:	7c 01       	movw	r14, r24
    3068:	08 ec       	ldi	r16, 0xC8	; 200
    306a:	10 e0       	ldi	r17, 0x00	; 0
    306c:	20 e4       	ldi	r18, 0x40	; 64
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	54 e2       	ldi	r21, 0x24	; 36
    3074:	64 ef       	ldi	r22, 0xF4	; 244
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	c7 01       	movw	r24, r14
    307a:	0e 94 4e 18 	call	0x309c	; 0x309c <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    307e:	f0 92 89 02 	sts	0x0289, r15
    3082:	e0 92 88 02 	sts	0x0288, r14
	}

	return scheduler;
    3086:	80 91 88 02 	lds	r24, 0x0288
    308a:	90 91 89 02 	lds	r25, 0x0289
}
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
    3092:	1f 91       	pop	r17
    3094:	0f 91       	pop	r16
    3096:	ff 90       	pop	r15
    3098:	ef 90       	pop	r14
    309a:	08 95       	ret

0000309c <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    309c:	0f 93       	push	r16
    309e:	1f 93       	push	r17
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	2a 97       	sbiw	r28, 0x0a	; 10
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	4b 83       	std	Y+3, r20	; 0x03
    30ba:	5c 83       	std	Y+4, r21	; 0x04
    30bc:	6d 83       	std	Y+5, r22	; 0x05
    30be:	7e 83       	std	Y+6, r23	; 0x06
    30c0:	38 87       	std	Y+8, r19	; 0x08
    30c2:	2f 83       	std	Y+7, r18	; 0x07
    30c4:	1a 87       	std	Y+10, r17	; 0x0a
    30c6:	09 87       	std	Y+9, r16	; 0x09
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    30c8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ca:	98 85       	ldd	r25, Y+8	; 0x08
    30cc:	9c 01       	movw	r18, r24
    30ce:	44 27       	eor	r20, r20
    30d0:	37 fd       	sbrc	r19, 7
    30d2:	40 95       	com	r20
    30d4:	54 2f       	mov	r21, r20
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	9c 81       	ldd	r25, Y+4	; 0x04
    30da:	ad 81       	ldd	r26, Y+5	; 0x05
    30dc:	be 81       	ldd	r27, Y+6	; 0x06
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
    30e6:	da 01       	movw	r26, r20
    30e8:	c9 01       	movw	r24, r18
    30ea:	29 85       	ldd	r18, Y+9	; 0x09
    30ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    30ee:	44 27       	eor	r20, r20
    30f0:	37 fd       	sbrc	r19, 7
    30f2:	40 95       	com	r20
    30f4:	54 2f       	mov	r21, r20
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
    30fe:	da 01       	movw	r26, r20
    3100:	c9 01       	movw	r24, r18
    3102:	9c 01       	movw	r18, r24
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	9a 81       	ldd	r25, Y+2	; 0x02
    3108:	fc 01       	movw	r30, r24
    310a:	37 8b       	std	Z+23, r19	; 0x17
    310c:	26 8b       	std	Z+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	9a 81       	ldd	r25, Y+2	; 0x02
    3112:	fc 01       	movw	r30, r24
    3114:	26 89       	ldd	r18, Z+22	; 0x16
    3116:	37 89       	ldd	r19, Z+23	; 0x17
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	fc 01       	movw	r30, r24
    311e:	37 8b       	std	Z+23, r19	; 0x17
    3120:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescaler;
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	9a 81       	ldd	r25, Y+2	; 0x02
    3126:	2f 81       	ldd	r18, Y+7	; 0x07
    3128:	38 85       	ldd	r19, Y+8	; 0x08
    312a:	fc 01       	movw	r30, r24
    312c:	31 8f       	std	Z+25, r19	; 0x19
    312e:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	fc 01       	movw	r30, r24
    3136:	15 8a       	std	Z+21, r1	; 0x15
    3138:	14 8a       	std	Z+20, r1	; 0x14
	
	blowFrameDetected = false;
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	9a 81       	ldd	r25, Y+2	; 0x02
    313e:	fc 01       	movw	r30, r24
    3140:	12 8e       	std	Z+26, r1	; 0x1a
	
	completedDispatch = true;
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	21 e0       	ldi	r18, 0x01	; 1
    3148:	fc 01       	movw	r30, r24
    314a:	23 8f       	std	Z+27, r18	; 0x1b
}
    314c:	2a 96       	adiw	r28, 0x0a	; 10
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	08 95       	ret

00003162 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	00 d0       	rcall	.+0      	; 0x3168 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    3168:	1f 92       	push	r1
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	7c 83       	std	Y+4, r23	; 0x04
    3174:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	fc 01       	movw	r30, r24
    317c:	84 89       	ldd	r24, Z+20	; 0x14
    317e:	95 89       	ldd	r25, Z+21	; 0x15
    3180:	8a 30       	cpi	r24, 0x0A	; 10
    3182:	91 05       	cpc	r25, r1
    3184:	04 f5       	brge	.+64     	; 0x31c6 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	fc 01       	movw	r30, r24
    318c:	84 89       	ldd	r24, Z+20	; 0x14
    318e:	95 89       	ldd	r25, Z+21	; 0x15
    3190:	29 81       	ldd	r18, Y+1	; 0x01
    3192:	3a 81       	ldd	r19, Y+2	; 0x02
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	82 0f       	add	r24, r18
    319a:	93 1f       	adc	r25, r19
    319c:	2b 81       	ldd	r18, Y+3	; 0x03
    319e:	3c 81       	ldd	r19, Y+4	; 0x04
    31a0:	fc 01       	movw	r30, r24
    31a2:	31 83       	std	Z+1, r19	; 0x01
    31a4:	20 83       	st	Z, r18
		numOfTasks++;
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	fc 01       	movw	r30, r24
    31ac:	84 89       	ldd	r24, Z+20	; 0x14
    31ae:	95 89       	ldd	r25, Z+21	; 0x15
    31b0:	9c 01       	movw	r18, r24
    31b2:	2f 5f       	subi	r18, 0xFF	; 255
    31b4:	3f 4f       	sbci	r19, 0xFF	; 255
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	fc 01       	movw	r30, r24
    31bc:	35 8b       	std	Z+21, r19	; 0x15
    31be:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	9f ef       	ldi	r25, 0xFF	; 255
}
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	08 95       	ret

000031d8 <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	00 d0       	rcall	.+0      	; 0x31de <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    31de:	1f 92       	push	r1
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    31e8:	1a 82       	std	Y+2, r1	; 0x02
    31ea:	19 82       	std	Y+1, r1	; 0x01
    31ec:	24 c0       	rjmp	.+72     	; 0x3236 <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    31ee:	2b 81       	ldd	r18, Y+3	; 0x03
    31f0:	3c 81       	ldd	r19, Y+4	; 0x04
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	9a 81       	ldd	r25, Y+2	; 0x02
    31f6:	88 0f       	add	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	82 0f       	add	r24, r18
    31fc:	93 1f       	adc	r25, r19
    31fe:	fc 01       	movw	r30, r24
    3200:	80 81       	ld	r24, Z
    3202:	91 81       	ldd	r25, Z+1	; 0x01
    3204:	fc 01       	movw	r30, r24
    3206:	80 81       	ld	r24, Z
    3208:	91 81       	ldd	r25, Z+1	; 0x01
    320a:	06 96       	adiw	r24, 0x06	; 6
    320c:	fc 01       	movw	r30, r24
    320e:	20 81       	ld	r18, Z
    3210:	31 81       	ldd	r19, Z+1	; 0x01
    3212:	4b 81       	ldd	r20, Y+3	; 0x03
    3214:	5c 81       	ldd	r21, Y+4	; 0x04
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	84 0f       	add	r24, r20
    3220:	95 1f       	adc	r25, r21
    3222:	fc 01       	movw	r30, r24
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	f9 01       	movw	r30, r18
    322a:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	01 96       	adiw	r24, 0x01	; 1
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	9c 81       	ldd	r25, Y+4	; 0x04
    323a:	fc 01       	movw	r30, r24
    323c:	24 89       	ldd	r18, Z+20	; 0x14
    323e:	35 89       	ldd	r19, Z+21	; 0x15
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	9a 81       	ldd	r25, Y+2	; 0x02
    3246:	82 17       	cp	r24, r18
    3248:	93 07       	cpc	r25, r19
    324a:	0c f0       	brlt	.+2      	; 0x324e <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	44 23       	and	r20, r20
    3250:	71 f6       	brne	.-100    	; 0x31ee <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    3252:	88 e8       	ldi	r24, 0x88	; 136
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	2b 81       	ldd	r18, Y+3	; 0x03
    3258:	3c 81       	ldd	r19, Y+4	; 0x04
    325a:	f9 01       	movw	r30, r18
    325c:	26 89       	ldd	r18, Z+22	; 0x16
    325e:	37 89       	ldd	r19, Z+23	; 0x17
    3260:	fc 01       	movw	r30, r24
    3262:	31 83       	std	Z+1, r19	; 0x01
    3264:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    3266:	81 e8       	ldi	r24, 0x81	; 129
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	21 e8       	ldi	r18, 0x81	; 129
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	f9 01       	movw	r30, r18
    3270:	20 81       	ld	r18, Z
    3272:	28 60       	ori	r18, 0x08	; 8
    3274:	fc 01       	movw	r30, r24
    3276:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    3278:	8f e6       	ldi	r24, 0x6F	; 111
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	2f e6       	ldi	r18, 0x6F	; 111
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	f9 01       	movw	r30, r18
    3282:	20 81       	ld	r18, Z
    3284:	22 60       	ori	r18, 0x02	; 2
    3286:	fc 01       	movw	r30, r24
    3288:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    328a:	78 94       	sei
}
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	08 95       	ret

0000329a <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	9e 83       	std	Y+6, r25	; 0x06
    32a8:	8d 83       	std	Y+5, r24	; 0x05
	completedDispatch = false;
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	fc 01       	movw	r30, r24
    32b0:	13 8e       	std	Z+27, r1	; 0x1b
	blowFrameDetected = false;
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	9e 81       	ldd	r25, Y+6	; 0x06
    32b6:	fc 01       	movw	r30, r24
    32b8:	12 8e       	std	Z+26, r1	; 0x1a
	
	Task *task = NULL;
    32ba:	1c 82       	std	Y+4, r1	; 0x04
    32bc:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    32be:	1a 82       	std	Y+2, r1	; 0x02
    32c0:	19 82       	std	Y+1, r1	; 0x01
    32c2:	2a c0       	rjmp	.+84     	; 0x3318 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x7e>
	{
		task = tasks[i];
    32c4:	2d 81       	ldd	r18, Y+5	; 0x05
    32c6:	3e 81       	ldd	r19, Y+6	; 0x06
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	9a 81       	ldd	r25, Y+2	; 0x02
    32cc:	88 0f       	add	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	82 0f       	add	r24, r18
    32d2:	93 1f       	adc	r25, r19
    32d4:	fc 01       	movw	r30, r24
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	9c 83       	std	Y+4, r25	; 0x04
    32dc:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	9c 81       	ldd	r25, Y+4	; 0x04
    32e2:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    32e6:	88 23       	and	r24, r24
    32e8:	91 f0       	breq	.+36     	; 0x330e <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x74>
		{
			task->setIsReadyToRun(false);
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    32f4:	8b 81       	ldd	r24, Y+3	; 0x03
    32f6:	9c 81       	ldd	r25, Y+4	; 0x04
    32f8:	fc 01       	movw	r30, r24
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	08 96       	adiw	r24, 0x08	; 8
    3300:	fc 01       	movw	r30, r24
    3302:	20 81       	ld	r18, Z
    3304:	31 81       	ldd	r19, Z+1	; 0x01
    3306:	8b 81       	ldd	r24, Y+3	; 0x03
    3308:	9c 81       	ldd	r25, Y+4	; 0x04
    330a:	f9 01       	movw	r30, r18
    330c:	19 95       	eicall
	completedDispatch = false;
	blowFrameDetected = false;
	
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	8d 81       	ldd	r24, Y+5	; 0x05
    331a:	9e 81       	ldd	r25, Y+6	; 0x06
    331c:	fc 01       	movw	r30, r24
    331e:	24 89       	ldd	r18, Z+20	; 0x14
    3320:	35 89       	ldd	r19, Z+21	; 0x15
    3322:	41 e0       	ldi	r20, 0x01	; 1
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	82 17       	cp	r24, r18
    332a:	93 07       	cpc	r25, r19
    332c:	0c f0       	brlt	.+2      	; 0x3330 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x96>
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	44 23       	and	r20, r20
    3332:	41 f6       	brne	.-112    	; 0x32c4 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x2a>
	/*if ((TIFR1 & (1<<OCF1A)) != 0)
	{
		model->SystemModel->
	}*/
	
	completedDispatch = true;
    3334:	8d 81       	ldd	r24, Y+5	; 0x05
    3336:	9e 81       	ldd	r25, Y+6	; 0x06
    3338:	21 e0       	ldi	r18, 0x01	; 1
    333a:	fc 01       	movw	r30, r24
    333c:	23 8f       	std	Z+27, r18	; 0x1b
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    333e:	83 e5       	ldi	r24, 0x53	; 83
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	23 e5       	ldi	r18, 0x53	; 83
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	f9 01       	movw	r30, r18
    3348:	20 81       	ld	r18, Z
    334a:	21 7f       	andi	r18, 0xF1	; 241
    334c:	fc 01       	movw	r30, r24
    334e:	20 83       	st	Z, r18
	sleep_mode();
    3350:	83 e5       	ldi	r24, 0x53	; 83
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	23 e5       	ldi	r18, 0x53	; 83
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	f9 01       	movw	r30, r18
    335a:	20 81       	ld	r18, Z
    335c:	21 60       	ori	r18, 0x01	; 1
    335e:	fc 01       	movw	r30, r24
    3360:	20 83       	st	Z, r18
    3362:	88 95       	sleep
    3364:	83 e5       	ldi	r24, 0x53	; 83
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	23 e5       	ldi	r18, 0x53	; 83
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	f9 01       	movw	r30, r18
    336e:	20 81       	ld	r18, Z
    3370:	2e 7f       	andi	r18, 0xFE	; 254
    3372:	fc 01       	movw	r30, r24
    3374:	20 83       	st	Z, r18
}
    3376:	26 96       	adiw	r28, 0x06	; 6
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	1f 92       	push	r1
    338e:	1f 92       	push	r1
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	9a 81       	ldd	r25, Y+2	; 0x02
    339c:	fc 01       	movw	r30, r24
    339e:	80 8d       	ldd	r24, Z+24	; 0x18
    33a0:	91 8d       	ldd	r25, Z+25	; 0x19
    33a2:	80 34       	cpi	r24, 0x40	; 64
    33a4:	91 05       	cpc	r25, r1
    33a6:	39 f1       	breq	.+78     	; 0x33f6 <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    33a8:	81 34       	cpi	r24, 0x41	; 65
    33aa:	91 05       	cpc	r25, r1
    33ac:	3c f4       	brge	.+14     	; 0x33bc <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    33ae:	81 30       	cpi	r24, 0x01	; 1
    33b0:	91 05       	cpc	r25, r1
    33b2:	69 f0       	breq	.+26     	; 0x33ce <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    33b4:	88 30       	cpi	r24, 0x08	; 8
    33b6:	91 05       	cpc	r25, r1
    33b8:	a1 f0       	breq	.+40     	; 0x33e2 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    33ba:	3b c0       	rjmp	.+118    	; 0x3432 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    33bc:	81 15       	cp	r24, r1
    33be:	f1 e0       	ldi	r31, 0x01	; 1
    33c0:	9f 07       	cpc	r25, r31
    33c2:	19 f1       	breq	.+70     	; 0x340a <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    33c4:	81 15       	cp	r24, r1
    33c6:	24 e0       	ldi	r18, 0x04	; 4
    33c8:	92 07       	cpc	r25, r18
    33ca:	49 f1       	breq	.+82     	; 0x341e <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    33cc:	32 c0       	rjmp	.+100    	; 0x3432 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    33ce:	81 e8       	ldi	r24, 0x81	; 129
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	21 e8       	ldi	r18, 0x81	; 129
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	f9 01       	movw	r30, r18
    33d8:	20 81       	ld	r18, Z
    33da:	21 60       	ori	r18, 0x01	; 1
    33dc:	fc 01       	movw	r30, r24
    33de:	20 83       	st	Z, r18
			break;
    33e0:	31 c0       	rjmp	.+98     	; 0x3444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    33e2:	81 e8       	ldi	r24, 0x81	; 129
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	21 e8       	ldi	r18, 0x81	; 129
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	f9 01       	movw	r30, r18
    33ec:	20 81       	ld	r18, Z
    33ee:	22 60       	ori	r18, 0x02	; 2
    33f0:	fc 01       	movw	r30, r24
    33f2:	20 83       	st	Z, r18
			break;
    33f4:	27 c0       	rjmp	.+78     	; 0x3444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    33f6:	81 e8       	ldi	r24, 0x81	; 129
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	21 e8       	ldi	r18, 0x81	; 129
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	f9 01       	movw	r30, r18
    3400:	20 81       	ld	r18, Z
    3402:	23 60       	ori	r18, 0x03	; 3
    3404:	fc 01       	movw	r30, r24
    3406:	20 83       	st	Z, r18
			break;
    3408:	1d c0       	rjmp	.+58     	; 0x3444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    340a:	81 e8       	ldi	r24, 0x81	; 129
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	21 e8       	ldi	r18, 0x81	; 129
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	f9 01       	movw	r30, r18
    3414:	20 81       	ld	r18, Z
    3416:	24 60       	ori	r18, 0x04	; 4
    3418:	fc 01       	movw	r30, r24
    341a:	20 83       	st	Z, r18
			break;
    341c:	13 c0       	rjmp	.+38     	; 0x3444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    341e:	81 e8       	ldi	r24, 0x81	; 129
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	21 e8       	ldi	r18, 0x81	; 129
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	f9 01       	movw	r30, r18
    3428:	20 81       	ld	r18, Z
    342a:	25 60       	ori	r18, 0x05	; 5
    342c:	fc 01       	movw	r30, r24
    342e:	20 83       	st	Z, r18
			break;
    3430:	09 c0       	rjmp	.+18     	; 0x3444 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    3432:	81 e8       	ldi	r24, 0x81	; 129
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	21 e8       	ldi	r18, 0x81	; 129
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	f9 01       	movw	r30, r18
    343c:	20 81       	ld	r18, Z
    343e:	21 60       	ori	r18, 0x01	; 1
    3440:	fc 01       	movw	r30, r24
    3442:	20 83       	st	Z, r18
	}
}
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	08 95       	ret

0000344e <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    344e:	1f 92       	push	r1
    3450:	0f 92       	push	r0
    3452:	00 90 5f 00 	lds	r0, 0x005F
    3456:	0f 92       	push	r0
    3458:	11 24       	eor	r1, r1
    345a:	00 90 5b 00 	lds	r0, 0x005B
    345e:	0f 92       	push	r0
    3460:	2f 93       	push	r18
    3462:	3f 93       	push	r19
    3464:	4f 93       	push	r20
    3466:	5f 93       	push	r21
    3468:	6f 93       	push	r22
    346a:	7f 93       	push	r23
    346c:	8f 93       	push	r24
    346e:	9f 93       	push	r25
    3470:	af 93       	push	r26
    3472:	bf 93       	push	r27
    3474:	ef 93       	push	r30
    3476:	ff 93       	push	r31
    3478:	cf 93       	push	r28
    347a:	df 93       	push	r29
    347c:	00 d0       	rcall	.+0      	; 0x347e <__vector_17+0x30>
    347e:	00 d0       	rcall	.+0      	; 0x3480 <__vector_17+0x32>
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
	//TODO do we want to stop interrupts in this method?
	Scheduler *scheduler = Scheduler::getScheduler();
    3484:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    3488:	9c 83       	std	Y+4, r25	; 0x04
    348a:	8b 83       	std	Y+3, r24	; 0x03
	
	//Detect if the scheduler blew a frame
	if (!scheduler->hasCompletedDispatch())
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	0e 94 10 18 	call	0x3020	; 0x3020 <_ZN10helicopter9scheduler9Scheduler20hasCompletedDispatchEv>
    3494:	98 2f       	mov	r25, r24
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	89 27       	eor	r24, r25
    349a:	88 23       	and	r24, r24
    349c:	29 f0       	breq	.+10     	; 0x34a8 <__vector_17+0x5a>
	{
		scheduler->hasBlownFrame(true);
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	9c 81       	ldd	r25, Y+4	; 0x04
    34a2:	61 e0       	ldi	r22, 0x01	; 1
    34a4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN10helicopter9scheduler9Scheduler13hasBlownFrameEb>
	}
	
	Task *task = NULL;
    34a8:	1e 82       	std	Y+6, r1	; 0x06
    34aa:	1d 82       	std	Y+5, r1	; 0x05
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    34ac:	1a 82       	std	Y+2, r1	; 0x02
    34ae:	19 82       	std	Y+1, r1	; 0x01
    34b0:	33 c0       	rjmp	.+102    	; 0x3518 <__vector_17+0xca>
	{
		task = scheduler->getTasks()[i];
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    34ba:	9c 01       	movw	r18, r24
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	9a 81       	ldd	r25, Y+2	; 0x02
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	82 0f       	add	r24, r18
    34c6:	93 1f       	adc	r25, r19
    34c8:	fc 01       	movw	r30, r24
    34ca:	80 81       	ld	r24, Z
    34cc:	91 81       	ldd	r25, Z+1	; 0x01
    34ce:	9e 83       	std	Y+6, r25	; 0x06
    34d0:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    34d2:	8d 81       	ldd	r24, Y+5	; 0x05
    34d4:	9e 81       	ldd	r25, Y+6	; 0x06
    34d6:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN10helicopter5tasks4Task8getDelayEv>
    34da:	21 e0       	ldi	r18, 0x01	; 1
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	09 f0       	breq	.+2      	; 0x34e2 <__vector_17+0x94>
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	22 23       	and	r18, r18
    34e4:	81 f0       	breq	.+32     	; 0x3506 <__vector_17+0xb8>
		{
			//Mark the task as ready to run
			task->setIsReadyToRun(true);
    34e6:	8d 81       	ldd	r24, Y+5	; 0x05
    34e8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ea:	61 e0       	ldi	r22, 0x01	; 1
    34ec:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    34f0:	8d 81       	ldd	r24, Y+5	; 0x05
    34f2:	9e 81       	ldd	r25, Y+6	; 0x06
    34f4:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <_ZN10helicopter5tasks4Task9getPeriodEv>
    34f8:	9c 01       	movw	r18, r24
    34fa:	8d 81       	ldd	r24, Y+5	; 0x05
    34fc:	9e 81       	ldd	r25, Y+6	; 0x06
    34fe:	b9 01       	movw	r22, r18
    3500:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN10helicopter5tasks4Task8setDelayEi>
    3504:	04 c0       	rjmp	.+8      	; 0x350e <__vector_17+0xc0>
		}else
		{
			task->reduceDelay();
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN10helicopter5tasks4Task11reduceDelayEv>
	
	Task *task = NULL;
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	9a 81       	ldd	r25, Y+2	; 0x02
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	9a 83       	std	Y+2, r25	; 0x02
    3516:	89 83       	std	Y+1, r24	; 0x01
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	9c 81       	ldd	r25, Y+4	; 0x04
    351c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    3520:	9c 01       	movw	r18, r24
    3522:	41 e0       	ldi	r20, 0x01	; 1
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	82 17       	cp	r24, r18
    352a:	93 07       	cpc	r25, r19
    352c:	0c f0       	brlt	.+2      	; 0x3530 <__vector_17+0xe2>
    352e:	40 e0       	ldi	r20, 0x00	; 0
    3530:	44 23       	and	r20, r20
    3532:	09 f0       	breq	.+2      	; 0x3536 <__vector_17+0xe8>
    3534:	be cf       	rjmp	.-132    	; 0x34b2 <__vector_17+0x64>
		}else
		{
			task->reduceDelay();
		}
	}
}
    3536:	26 96       	adiw	r28, 0x06	; 6
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	ff 91       	pop	r31
    3548:	ef 91       	pop	r30
    354a:	bf 91       	pop	r27
    354c:	af 91       	pop	r26
    354e:	9f 91       	pop	r25
    3550:	8f 91       	pop	r24
    3552:	7f 91       	pop	r23
    3554:	6f 91       	pop	r22
    3556:	5f 91       	pop	r21
    3558:	4f 91       	pop	r20
    355a:	3f 91       	pop	r19
    355c:	2f 91       	pop	r18
    355e:	0f 90       	pop	r0
    3560:	00 92 5b 00 	sts	0x005B, r0
    3564:	0f 90       	pop	r0
    3566:	00 92 5f 00 	sts	0x005F, r0
    356a:	0f 90       	pop	r0
    356c:	1f 90       	pop	r1
    356e:	18 95       	reti

00003570 <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	1f 92       	push	r1
    3576:	1f 92       	push	r1
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	08 95       	ret

0000358a <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDOuterLoopTask.h"

using namespace helicopter::tasks;

PIDOuterLoopTask::PIDOuterLoopTask (PIDController *pidController, int delay, int period) :
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	28 97       	sbiw	r28, 0x08	; 8
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	9a 83       	std	Y+2, r25	; 0x02
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	7c 83       	std	Y+4, r23	; 0x04
    35a4:	6b 83       	std	Y+3, r22	; 0x03
    35a6:	5e 83       	std	Y+6, r21	; 0x06
    35a8:	4d 83       	std	Y+5, r20	; 0x05
    35aa:	38 87       	std	Y+8, r19	; 0x08
    35ac:	2f 83       	std	Y+7, r18	; 0x07
Task(delay, period),
pidController(pidController)
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	9a 81       	ldd	r25, Y+2	; 0x02
    35b2:	4f 81       	ldd	r20, Y+7	; 0x07
    35b4:	58 85       	ldd	r21, Y+8	; 0x08
    35b6:	2d 81       	ldd	r18, Y+5	; 0x05
    35b8:	3e 81       	ldd	r19, Y+6	; 0x06
    35ba:	b9 01       	movw	r22, r18
    35bc:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN10helicopter5tasks4TaskC1Eii>
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	24 e5       	ldi	r18, 0x54	; 84
    35c6:	32 e0       	ldi	r19, 0x02	; 2
    35c8:	fc 01       	movw	r30, r24
    35ca:	31 83       	std	Z+1, r19	; 0x01
    35cc:	20 83       	st	Z, r18
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	9a 81       	ldd	r25, Y+2	; 0x02
    35d2:	2b 81       	ldd	r18, Y+3	; 0x03
    35d4:	3c 81       	ldd	r19, Y+4	; 0x04
    35d6:	fc 01       	movw	r30, r24
    35d8:	30 87       	std	Z+8, r19	; 0x08
    35da:	27 83       	std	Z+7, r18	; 0x07
{
	
}
    35dc:	28 96       	adiw	r28, 0x08	; 8
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	08 95       	ret

000035ee <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>:

void PIDOuterLoopTask::runTaskImpl()
{
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
    35f2:	1f 92       	push	r1
    35f4:	1f 92       	push	r1
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
	pidController->tailRotorCollectiveOuterLoopUpdate();
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	9a 81       	ldd	r25, Y+2	; 0x02
    3602:	fc 01       	movw	r30, r24
    3604:	87 81       	ldd	r24, Z+7	; 0x07
    3606:	90 85       	ldd	r25, Z+8	; 0x08
    3608:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>
}
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	08 95       	ret

00003616 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDOuterLoopTask : public Task
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	1f 92       	push	r1
    361c:	1f 92       	push	r1
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	9a 83       	std	Y+2, r25	; 0x02
    3624:	89 83       	std	Y+1, r24	; 0x01
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	24 e5       	ldi	r18, 0x54	; 84
    362c:	32 e0       	ldi	r19, 0x02	; 2
    362e:	fc 01       	movw	r30, r24
    3630:	31 83       	std	Z+1, r19	; 0x01
    3632:	20 83       	st	Z, r18
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	81 70       	andi	r24, 0x01	; 1
    3642:	99 27       	eor	r25, r25
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	21 f0       	breq	.+8      	; 0x3650 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev+0x3a>
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	08 95       	ret

0000365a <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>:
    365a:	cf 93       	push	r28
    365c:	df 93       	push	r29
    365e:	1f 92       	push	r1
    3660:	1f 92       	push	r1
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	df 91       	pop	r29
    3680:	cf 91       	pop	r28
    3682:	08 95       	ret

00003684 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	2a 97       	sbiw	r28, 0x0a	; 10
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	7c 83       	std	Y+4, r23	; 0x04
    36a2:	6b 83       	std	Y+3, r22	; 0x03
    36a4:	5e 83       	std	Y+6, r21	; 0x06
    36a6:	4d 83       	std	Y+5, r20	; 0x05
    36a8:	38 87       	std	Y+8, r19	; 0x08
    36aa:	2f 83       	std	Y+7, r18	; 0x07
    36ac:	1a 87       	std	Y+10, r17	; 0x0a
    36ae:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	9a 81       	ldd	r25, Y+2	; 0x02
    36b4:	49 85       	ldd	r20, Y+9	; 0x09
    36b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    36b8:	2f 81       	ldd	r18, Y+7	; 0x07
    36ba:	38 85       	ldd	r19, Y+8	; 0x08
    36bc:	b9 01       	movw	r22, r18
    36be:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN10helicopter5tasks4TaskC1Eii>
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	9a 81       	ldd	r25, Y+2	; 0x02
    36c6:	22 e6       	ldi	r18, 0x62	; 98
    36c8:	32 e0       	ldi	r19, 0x02	; 2
    36ca:	fc 01       	movw	r30, r24
    36cc:	31 83       	std	Z+1, r19	; 0x01
    36ce:	20 83       	st	Z, r18
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	2b 81       	ldd	r18, Y+3	; 0x03
    36d6:	3c 81       	ldd	r19, Y+4	; 0x04
    36d8:	fc 01       	movw	r30, r24
    36da:	30 87       	std	Z+8, r19	; 0x08
    36dc:	27 83       	std	Z+7, r18	; 0x07
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	2d 81       	ldd	r18, Y+5	; 0x05
    36e4:	3e 81       	ldd	r19, Y+6	; 0x06
    36e6:	fc 01       	movw	r30, r24
    36e8:	32 87       	std	Z+10, r19	; 0x0a
    36ea:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    36ec:	2a 96       	adiw	r28, 0x0a	; 10
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	08 95       	ret

00003702 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:

void SimTelemetryTask::runTaskImpl() 
{
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	2d 97       	sbiw	r28, 0x0d	; 13
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	9d 87       	std	Y+13, r25	; 0x0d
    3718:	8c 87       	std	Y+12, r24	; 0x0c
	
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    371a:	ce 01       	movw	r24, r28
    371c:	05 96       	adiw	r24, 0x05	; 5
    371e:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    3722:	8c 85       	ldd	r24, Y+12	; 0x0c
    3724:	9d 85       	ldd	r25, Y+13	; 0x0d
    3726:	fc 01       	movw	r30, r24
    3728:	87 81       	ldd	r24, Z+7	; 0x07
    372a:	90 85       	ldd	r25, Z+8	; 0x08
    372c:	9e 01       	movw	r18, r28
    372e:	2b 5f       	subi	r18, 0xFB	; 251
    3730:	3f 4f       	sbci	r19, 0xFF	; 255
    3732:	b9 01       	movw	r22, r18
    3734:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	b1 f5       	brne	.+108    	; 0x37b0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    3744:	1b 86       	std	Y+11, r1	; 0x0b
    3746:	1a 86       	std	Y+10, r1	; 0x0a
	
		status = radioInterface->receive(message);
    3748:	8c 85       	ldd	r24, Y+12	; 0x0c
    374a:	9d 85       	ldd	r25, Y+13	; 0x0d
    374c:	fc 01       	movw	r30, r24
    374e:	87 81       	ldd	r24, Z+7	; 0x07
    3750:	90 85       	ldd	r25, Z+8	; 0x08
    3752:	9e 01       	movw	r18, r28
    3754:	26 5f       	subi	r18, 0xF6	; 246
    3756:	3f 4f       	sbci	r19, 0xFF	; 255
    3758:	b9 01       	movw	r22, r18
    375a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    375e:	9a 83       	std	Y+2, r25	; 0x02
    3760:	89 83       	std	Y+1, r24	; 0x01
	
		if (status == 0 && message != NULL)
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	19 f5       	brne	.+70     	; 0x37b0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
    376a:	8a 85       	ldd	r24, Y+10	; 0x0a
    376c:	9b 85       	ldd	r25, Y+11	; 0x0b
    376e:	00 97       	sbiw	r24, 0x00	; 0
    3770:	f9 f0       	breq	.+62     	; 0x37b0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    3772:	8a 85       	ldd	r24, Y+10	; 0x0a
    3774:	9b 85       	ldd	r25, Y+11	; 0x0b
    3776:	9c 83       	std	Y+4, r25	; 0x04
    3778:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			telemMsg->updateModelFromMessageFromSimulator(model);
    377a:	8c 85       	ldd	r24, Y+12	; 0x0c
    377c:	9d 85       	ldd	r25, Y+13	; 0x0d
    377e:	fc 01       	movw	r30, r24
    3780:	21 85       	ldd	r18, Z+9	; 0x09
    3782:	32 85       	ldd	r19, Z+10	; 0x0a
    3784:	8b 81       	ldd	r24, Y+3	; 0x03
    3786:	9c 81       	ldd	r25, Y+4	; 0x04
    3788:	b9 01       	movw	r22, r18
    378a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>
		
			delete message;
    378e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3790:	9b 85       	ldd	r25, Y+11	; 0x0b
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	69 f0       	breq	.+26     	; 0x37b0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
    3796:	8a 85       	ldd	r24, Y+10	; 0x0a
    3798:	9b 85       	ldd	r25, Y+11	; 0x0b
    379a:	fc 01       	movw	r30, r24
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	02 96       	adiw	r24, 0x02	; 2
    37a2:	fc 01       	movw	r30, r24
    37a4:	20 81       	ld	r18, Z
    37a6:	31 81       	ldd	r19, Z+1	; 0x01
    37a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    37aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    37ac:	f9 01       	movw	r30, r18
    37ae:	19 95       	eicall
		}
	}
	
	//Update instrumentation fields
	switch (status)
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	8e 3f       	cpi	r24, 0xFE	; 254
    37b6:	ff ef       	ldi	r31, 0xFF	; 255
    37b8:	9f 07       	cpc	r25, r31
    37ba:	41 f1       	breq	.+80     	; 0x380c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x10a>
    37bc:	8f 3f       	cpi	r24, 0xFF	; 255
    37be:	2f ef       	ldi	r18, 0xFF	; 255
    37c0:	92 07       	cpc	r25, r18
    37c2:	2c f4       	brge	.+10     	; 0x37ce <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xcc>
    37c4:	8d 3f       	cpi	r24, 0xFD	; 253
    37c6:	ef ef       	ldi	r30, 0xFF	; 255
    37c8:	9e 07       	cpc	r25, r30
    37ca:	b9 f1       	breq	.+110    	; 0x383a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x138>
    37cc:	4d c0       	rjmp	.+154    	; 0x3868 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x166>
    37ce:	8f 3f       	cpi	r24, 0xFF	; 255
    37d0:	ff ef       	ldi	r31, 0xFF	; 255
    37d2:	9f 07       	cpc	r25, r31
    37d4:	21 f0       	breq	.+8      	; 0x37de <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xdc>
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	09 f4       	brne	.+2      	; 0x37dc <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xda>
    37da:	47 c0       	rjmp	.+142    	; 0x386a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x168>
    37dc:	45 c0       	rjmp	.+138    	; 0x3868 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x166>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    37de:	8c 85       	ldd	r24, Y+12	; 0x0c
    37e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    37e2:	fc 01       	movw	r30, r24
    37e4:	81 85       	ldd	r24, Z+9	; 0x09
    37e6:	92 85       	ldd	r25, Z+10	; 0x0a
    37e8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	01 96       	adiw	r24, 0x01	; 1
    37f2:	a1 1d       	adc	r26, r1
    37f4:	b1 1d       	adc	r27, r1
    37f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    37f8:	3d 85       	ldd	r19, Y+13	; 0x0d
    37fa:	f9 01       	movw	r30, r18
    37fc:	21 85       	ldd	r18, Z+9	; 0x09
    37fe:	32 85       	ldd	r19, Z+10	; 0x0a
    3800:	ac 01       	movw	r20, r24
    3802:	bd 01       	movw	r22, r26
    3804:	c9 01       	movw	r24, r18
    3806:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_ZN10helicopter5model11SystemModel8TimeoutsEl>
			break;
    380a:	30 c0       	rjmp	.+96     	; 0x386c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x16a>
		case -2:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    380c:	8c 85       	ldd	r24, Y+12	; 0x0c
    380e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3810:	fc 01       	movw	r30, r24
    3812:	81 85       	ldd	r24, Z+9	; 0x09
    3814:	92 85       	ldd	r25, Z+10	; 0x0a
    3816:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	01 96       	adiw	r24, 0x01	; 1
    3820:	a1 1d       	adc	r26, r1
    3822:	b1 1d       	adc	r27, r1
    3824:	2c 85       	ldd	r18, Y+12	; 0x0c
    3826:	3d 85       	ldd	r19, Y+13	; 0x0d
    3828:	f9 01       	movw	r30, r18
    382a:	21 85       	ldd	r18, Z+9	; 0x09
    382c:	32 85       	ldd	r19, Z+10	; 0x0a
    382e:	ac 01       	movw	r20, r24
    3830:	bd 01       	movw	r22, r26
    3832:	c9 01       	movw	r24, r18
    3834:	0e 94 a6 13 	call	0x274c	; 0x274c <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEl>
			break;
    3838:	19 c0       	rjmp	.+50     	; 0x386c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x16a>
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    383a:	8c 85       	ldd	r24, Y+12	; 0x0c
    383c:	9d 85       	ldd	r25, Y+13	; 0x0d
    383e:	fc 01       	movw	r30, r24
    3840:	81 85       	ldd	r24, Z+9	; 0x09
    3842:	92 85       	ldd	r25, Z+10	; 0x0a
    3844:	0e 94 c6 13 	call	0x278c	; 0x278c <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	a1 1d       	adc	r26, r1
    3850:	b1 1d       	adc	r27, r1
    3852:	2c 85       	ldd	r18, Y+12	; 0x0c
    3854:	3d 85       	ldd	r19, Y+13	; 0x0d
    3856:	f9 01       	movw	r30, r18
    3858:	21 85       	ldd	r18, Z+9	; 0x09
    385a:	32 85       	ldd	r19, Z+10	; 0x0a
    385c:	ac 01       	movw	r20, r24
    385e:	bd 01       	movw	r22, r26
    3860:	c9 01       	movw	r24, r18
    3862:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEl>
		default:
			break;
    3866:	02 c0       	rjmp	.+4      	; 0x386c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x16a>
    3868:	01 c0       	rjmp	.+2      	; 0x386c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x16a>
	
	//Update instrumentation fields
	switch (status)
	{
		case 0:
			break;
    386a:	00 00       	nop
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
		default:
			break;
		
	}
    386c:	ce 01       	movw	r24, r28
    386e:	05 96       	adiw	r24, 0x05	; 5
    3870:	0e 94 63 11 	call	0x22c6	; 0x22c6 <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    3874:	2d 96       	adiw	r28, 0x0d	; 13
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	1f 92       	push	r1
    388c:	1f 92       	push	r1
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	9a 83       	std	Y+2, r25	; 0x02
    3894:	89 83       	std	Y+1, r24	; 0x01
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	9a 81       	ldd	r25, Y+2	; 0x02
    389a:	22 e6       	ldi	r18, 0x62	; 98
    389c:	32 e0       	ldi	r19, 0x02	; 2
    389e:	fc 01       	movw	r30, r24
    38a0:	31 83       	std	Z+1, r19	; 0x01
    38a2:	20 83       	st	Z, r18
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	81 70       	andi	r24, 0x01	; 1
    38b2:	99 27       	eor	r25, r25
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	21 f0       	breq	.+8      	; 0x38c0 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev+0x3a>
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	9a 81       	ldd	r25, Y+2	; 0x02
    38bc:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	08 95       	ret

000038ca <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    38ca:	cf 93       	push	r28
    38cc:	df 93       	push	r29
    38ce:	1f 92       	push	r1
    38d0:	1f 92       	push	r1
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	9a 83       	std	Y+2, r25	; 0x02
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	9a 81       	ldd	r25, Y+2	; 0x02
    38de:	0e 94 43 1c 	call	0x3886	; 0x3886 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	9a 81       	ldd	r25, Y+2	; 0x02
    38e6:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	08 95       	ret

000038f4 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	1f 92       	push	r1
    38fa:	1f 92       	push	r1
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	9a 83       	std	Y+2, r25	; 0x02
    3902:	89 83       	std	Y+1, r24	; 0x01
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

0000390e <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	00 d0       	rcall	.+0      	; 0x3914 <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    3914:	00 d0       	rcall	.+0      	; 0x3916 <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	9a 83       	std	Y+2, r25	; 0x02
    391c:	89 83       	std	Y+1, r24	; 0x01
    391e:	7c 83       	std	Y+4, r23	; 0x04
    3920:	6b 83       	std	Y+3, r22	; 0x03
    3922:	5e 83       	std	Y+6, r21	; 0x06
    3924:	4d 83       	std	Y+5, r20	; 0x05
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	9a 81       	ldd	r25, Y+2	; 0x02
    392a:	20 e7       	ldi	r18, 0x70	; 112
    392c:	32 e0       	ldi	r19, 0x02	; 2
    392e:	fc 01       	movw	r30, r24
    3930:	31 83       	std	Z+1, r19	; 0x01
    3932:	20 83       	st	Z, r18
{
	this->delay = delay;
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	2b 81       	ldd	r18, Y+3	; 0x03
    393a:	3c 81       	ldd	r19, Y+4	; 0x04
    393c:	fc 01       	movw	r30, r24
    393e:	33 83       	std	Z+3, r19	; 0x03
    3940:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
    3946:	2d 81       	ldd	r18, Y+5	; 0x05
    3948:	3e 81       	ldd	r19, Y+6	; 0x06
    394a:	fc 01       	movw	r30, r24
    394c:	35 83       	std	Z+5, r19	; 0x05
    394e:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	9a 81       	ldd	r25, Y+2	; 0x02
    3954:	fc 01       	movw	r30, r24
    3956:	16 82       	std	Z+6, r1	; 0x06
}
    3958:	26 96       	adiw	r28, 0x06	; 6
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	08 95       	ret

0000396a <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	1f 92       	push	r1
    3970:	1f 92       	push	r1
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    397a:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	fc 01       	movw	r30, r24
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	fc 01       	movw	r30, r24
    3988:	20 81       	ld	r18, Z
    398a:	31 81       	ldd	r19, Z+1	; 0x01
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	9a 81       	ldd	r25, Y+2	; 0x02
    3990:	f9 01       	movw	r30, r18
    3992:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    3994:	78 94       	sei
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	08 95       	ret

000039a0 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
    39ac:	2a 97       	sbiw	r28, 0x0a	; 10
    39ae:	0f b6       	in	r0, 0x3f	; 63
    39b0:	f8 94       	cli
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	cd bf       	out	0x3d, r28	; 61
    39b8:	9a 83       	std	Y+2, r25	; 0x02
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	7c 83       	std	Y+4, r23	; 0x04
    39be:	6b 83       	std	Y+3, r22	; 0x03
    39c0:	5e 83       	std	Y+6, r21	; 0x06
    39c2:	4d 83       	std	Y+5, r20	; 0x05
    39c4:	38 87       	std	Y+8, r19	; 0x08
    39c6:	2f 83       	std	Y+7, r18	; 0x07
    39c8:	1a 87       	std	Y+10, r17	; 0x0a
    39ca:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	9a 81       	ldd	r25, Y+2	; 0x02
    39d0:	49 85       	ldd	r20, Y+9	; 0x09
    39d2:	5a 85       	ldd	r21, Y+10	; 0x0a
    39d4:	2f 81       	ldd	r18, Y+7	; 0x07
    39d6:	38 85       	ldd	r19, Y+8	; 0x08
    39d8:	b9 01       	movw	r22, r18
    39da:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN10helicopter5tasks4TaskC1Eii>
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	2e e7       	ldi	r18, 0x7E	; 126
    39e4:	32 e0       	ldi	r19, 0x02	; 2
    39e6:	fc 01       	movw	r30, r24
    39e8:	31 83       	std	Z+1, r19	; 0x01
    39ea:	20 83       	st	Z, r18
    39ec:	89 81       	ldd	r24, Y+1	; 0x01
    39ee:	9a 81       	ldd	r25, Y+2	; 0x02
    39f0:	2b 81       	ldd	r18, Y+3	; 0x03
    39f2:	3c 81       	ldd	r19, Y+4	; 0x04
    39f4:	fc 01       	movw	r30, r24
    39f6:	30 87       	std	Z+8, r19	; 0x08
    39f8:	27 83       	std	Z+7, r18	; 0x07
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	9a 81       	ldd	r25, Y+2	; 0x02
    39fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3a00:	3e 81       	ldd	r19, Y+6	; 0x06
    3a02:	fc 01       	movw	r30, r24
    3a04:	32 87       	std	Z+10, r19	; 0x0a
    3a06:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    3a08:	2a 96       	adiw	r28, 0x0a	; 10
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	1f 91       	pop	r17
    3a1a:	0f 91       	pop	r16
    3a1c:	08 95       	ret

00003a1e <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    3a1e:	cf 93       	push	r28
    3a20:	df 93       	push	r29
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    3a24:	1f 92       	push	r1
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	9c 83       	std	Y+4, r25	; 0x04
    3a2c:	8b 83       	std	Y+3, r24	; 0x03
	//SystemTelemetryMessage *message = model->CreateTelemetryMessage();
	SystemTelemetryMessage *message = SystemTelemetryMessage::buildMessageFromModel(model);
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	9c 81       	ldd	r25, Y+4	; 0x04
    3a32:	fc 01       	movw	r30, r24
    3a34:	81 85       	ldd	r24, Z+9	; 0x09
    3a36:	92 85       	ldd	r25, Z+10	; 0x0a
    3a38:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>
    3a3c:	9a 83       	std	Y+2, r25	; 0x02
    3a3e:	89 83       	std	Y+1, r24	; 0x01
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    3a40:	8b 81       	ldd	r24, Y+3	; 0x03
    3a42:	9c 81       	ldd	r25, Y+4	; 0x04
    3a44:	fc 01       	movw	r30, r24
    3a46:	87 81       	ldd	r24, Z+7	; 0x07
    3a48:	90 85       	ldd	r25, Z+8	; 0x08
    3a4a:	29 81       	ldd	r18, Y+1	; 0x01
    3a4c:	3a 81       	ldd	r19, Y+2	; 0x02
    3a4e:	b9 01       	movw	r22, r18
    3a50:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	9a 81       	ldd	r25, Y+2	; 0x02
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	69 f0       	breq	.+26     	; 0x3a76 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	fc 01       	movw	r30, r24
    3a62:	80 81       	ld	r24, Z
    3a64:	91 81       	ldd	r25, Z+1	; 0x01
    3a66:	02 96       	adiw	r24, 0x02	; 2
    3a68:	fc 01       	movw	r30, r24
    3a6a:	20 81       	ld	r18, Z
    3a6c:	31 81       	ldd	r19, Z+1	; 0x01
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	f9 01       	movw	r30, r18
    3a74:	19 95       	eicall
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	08 95       	ret

00003a84 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    3a84:	cf 93       	push	r28
    3a86:	df 93       	push	r29
    3a88:	1f 92       	push	r1
    3a8a:	1f 92       	push	r1
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	2e e7       	ldi	r18, 0x7E	; 126
    3a9a:	32 e0       	ldi	r19, 0x02	; 2
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	31 83       	std	Z+1, r19	; 0x01
    3aa0:	20 83       	st	Z, r18
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN10helicopter5tasks4TaskD1Ev>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	81 70       	andi	r24, 0x01	; 1
    3ab0:	99 27       	eor	r25, r25
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	21 f0       	breq	.+8      	; 0x3abe <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev+0x3a>
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aba:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	08 95       	ret

00003ac8 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	1f 92       	push	r1
    3ace:	1f 92       	push	r1
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	9a 81       	ldd	r25, Y+2	; 0x02
    3adc:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <_ZdlPv>
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	08 95       	ret

00003af2 <_Znwj>:
 *  Author: HP User
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	1f 92       	push	r1
    3af8:	1f 92       	push	r1
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
    3afe:	9a 83       	std	Y+2, r25	; 0x02
    3b00:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	9a 81       	ldd	r25, Y+2	; 0x02
    3b06:	0e 94 70 21 	call	0x42e0	; 0x42e0 <malloc>
}
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	df 91       	pop	r29
    3b10:	cf 91       	pop	r28
    3b12:	08 95       	ret

00003b14 <_ZdlPv>:

void operator delete(void * ptr)
{
    3b14:	cf 93       	push	r28
    3b16:	df 93       	push	r29
    3b18:	1f 92       	push	r1
    3b1a:	1f 92       	push	r1
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
    3b20:	9a 83       	std	Y+2, r25	; 0x02
    3b22:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	9a 81       	ldd	r25, Y+2	; 0x02
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	21 f0       	breq	.+8      	; 0x3b34 <_ZdlPv+0x20>
	{
		free(ptr);
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b30:	0e 94 0b 22 	call	0x4416	; 0x4416 <free>
	}
}
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	df 91       	pop	r29
    3b3a:	cf 91       	pop	r28
    3b3c:	08 95       	ret

00003b3e <_Znaj>:

void * operator new[](size_t size)
{
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	1f 92       	push	r1
    3b44:	1f 92       	push	r1
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	9a 83       	std	Y+2, r25	; 0x02
    3b4c:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	9a 81       	ldd	r25, Y+2	; 0x02
    3b52:	0e 94 70 21 	call	0x42e0	; 0x42e0 <malloc>
}
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	08 95       	ret

00003b60 <_ZdaPv>:

void operator delete[](void * ptr)
{
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	1f 92       	push	r1
    3b66:	1f 92       	push	r1
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	9a 83       	std	Y+2, r25	; 0x02
    3b6e:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	9a 81       	ldd	r25, Y+2	; 0x02
    3b74:	00 97       	sbiw	r24, 0x00	; 0
    3b76:	21 f0       	breq	.+8      	; 0x3b80 <_ZdaPv+0x20>
	{
		free(ptr);
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7c:	0e 94 0b 22 	call	0x4416	; 0x4416 <free>
	}
	
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	08 95       	ret

00003b8a <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	cf 93       	push	r28
    3b90:	df 93       	push	r29
    3b92:	00 d0       	rcall	.+0      	; 0x3b94 <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    3b94:	1f 92       	push	r1
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	9c 83       	std	Y+4, r25	; 0x04
    3b9c:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba2:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
    3ba6:	1a 82       	std	Y+2, r1	; 0x02
    3ba8:	19 82       	std	Y+1, r1	; 0x01
	
	if (timeoutMilliseconds > 1000) 
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	9c 81       	ldd	r25, Y+4	; 0x04
    3bae:	fc 01       	movw	r30, r24
    3bb0:	86 81       	ldd	r24, Z+6	; 0x06
    3bb2:	97 81       	ldd	r25, Z+7	; 0x07
    3bb4:	89 3e       	cpi	r24, 0xE9	; 233
    3bb6:	f3 e0       	ldi	r31, 0x03	; 3
    3bb8:	9f 07       	cpc	r25, r31
    3bba:	2c f0       	brlt	.+10     	; 0x3bc6 <_ZN10helicopter4util5Timer10startTimerEv+0x3c>
	{
		frequency = 1;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	9a 83       	std	Y+2, r25	; 0x02
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	0d c0       	rjmp	.+26     	; 0x3be0 <_ZN10helicopter4util5Timer10startTimerEv+0x56>
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    3bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bca:	fc 01       	movw	r30, r24
    3bcc:	26 81       	ldd	r18, Z+6	; 0x06
    3bce:	37 81       	ldd	r19, Z+7	; 0x07
    3bd0:	88 ee       	ldi	r24, 0xE8	; 232
    3bd2:	93 e0       	ldi	r25, 0x03	; 3
    3bd4:	b9 01       	movw	r22, r18
    3bd6:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
    3bda:	9b 01       	movw	r18, r22
    3bdc:	3a 83       	std	Y+2, r19	; 0x02
    3bde:	29 83       	std	Y+1, r18	; 0x01
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    3be0:	08 e9       	ldi	r16, 0x98	; 152
    3be2:	10 e0       	ldi	r17, 0x00	; 0
    3be4:	8b 81       	ldd	r24, Y+3	; 0x03
    3be6:	9c 81       	ldd	r25, Y+4	; 0x04
    3be8:	fc 01       	movw	r30, r24
    3bea:	80 81       	ld	r24, Z
    3bec:	91 81       	ldd	r25, Z+1	; 0x01
    3bee:	a2 81       	ldd	r26, Z+2	; 0x02
    3bf0:	b3 81       	ldd	r27, Z+3	; 0x03
    3bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    3bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    3bf6:	f9 01       	movw	r30, r18
    3bf8:	24 81       	ldd	r18, Z+4	; 0x04
    3bfa:	35 81       	ldd	r19, Z+5	; 0x05
    3bfc:	44 27       	eor	r20, r20
    3bfe:	37 fd       	sbrc	r19, 7
    3c00:	40 95       	com	r20
    3c02:	54 2f       	mov	r21, r20
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
    3c0c:	da 01       	movw	r26, r20
    3c0e:	c9 01       	movw	r24, r18
    3c10:	29 81       	ldd	r18, Y+1	; 0x01
    3c12:	3a 81       	ldd	r19, Y+2	; 0x02
    3c14:	44 27       	eor	r20, r20
    3c16:	37 fd       	sbrc	r19, 7
    3c18:	40 95       	com	r20
    3c1a:	54 2f       	mov	r21, r20
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
    3c24:	da 01       	movw	r26, r20
    3c26:	c9 01       	movw	r24, r18
    3c28:	f8 01       	movw	r30, r16
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    3c2e:	81 e9       	ldi	r24, 0x91	; 145
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	21 e9       	ldi	r18, 0x91	; 145
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	f9 01       	movw	r30, r18
    3c38:	20 81       	ld	r18, Z
    3c3a:	28 60       	ori	r18, 0x08	; 8
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	20 83       	st	Z, r18
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	9c 81       	ldd	r25, Y+4	; 0x04
    3c44:	fc 01       	movw	r30, r24
    3c46:	84 81       	ldd	r24, Z+4	; 0x04
    3c48:	95 81       	ldd	r25, Z+5	; 0x05
    3c4a:	80 34       	cpi	r24, 0x40	; 64
    3c4c:	91 05       	cpc	r25, r1
    3c4e:	39 f1       	breq	.+78     	; 0x3c9e <_ZN10helicopter4util5Timer10startTimerEv+0x114>
    3c50:	81 34       	cpi	r24, 0x41	; 65
    3c52:	91 05       	cpc	r25, r1
    3c54:	3c f4       	brge	.+14     	; 0x3c64 <_ZN10helicopter4util5Timer10startTimerEv+0xda>
    3c56:	81 30       	cpi	r24, 0x01	; 1
    3c58:	91 05       	cpc	r25, r1
    3c5a:	69 f0       	breq	.+26     	; 0x3c76 <_ZN10helicopter4util5Timer10startTimerEv+0xec>
    3c5c:	88 30       	cpi	r24, 0x08	; 8
    3c5e:	91 05       	cpc	r25, r1
    3c60:	a1 f0       	breq	.+40     	; 0x3c8a <_ZN10helicopter4util5Timer10startTimerEv+0x100>
    3c62:	3b c0       	rjmp	.+118    	; 0x3cda <_ZN10helicopter4util5Timer10startTimerEv+0x150>
    3c64:	81 15       	cp	r24, r1
    3c66:	f1 e0       	ldi	r31, 0x01	; 1
    3c68:	9f 07       	cpc	r25, r31
    3c6a:	19 f1       	breq	.+70     	; 0x3cb2 <_ZN10helicopter4util5Timer10startTimerEv+0x128>
    3c6c:	81 15       	cp	r24, r1
    3c6e:	24 e0       	ldi	r18, 0x04	; 4
    3c70:	92 07       	cpc	r25, r18
    3c72:	49 f1       	breq	.+82     	; 0x3cc6 <_ZN10helicopter4util5Timer10startTimerEv+0x13c>
    3c74:	32 c0       	rjmp	.+100    	; 0x3cda <_ZN10helicopter4util5Timer10startTimerEv+0x150>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    3c76:	81 e9       	ldi	r24, 0x91	; 145
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	21 e9       	ldi	r18, 0x91	; 145
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	f9 01       	movw	r30, r18
    3c80:	20 81       	ld	r18, Z
    3c82:	21 60       	ori	r18, 0x01	; 1
    3c84:	fc 01       	movw	r30, r24
    3c86:	20 83       	st	Z, r18
		break;
    3c88:	31 c0       	rjmp	.+98     	; 0x3cec <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    3c8a:	81 e9       	ldi	r24, 0x91	; 145
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	21 e9       	ldi	r18, 0x91	; 145
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	f9 01       	movw	r30, r18
    3c94:	20 81       	ld	r18, Z
    3c96:	22 60       	ori	r18, 0x02	; 2
    3c98:	fc 01       	movw	r30, r24
    3c9a:	20 83       	st	Z, r18
		break;
    3c9c:	27 c0       	rjmp	.+78     	; 0x3cec <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    3c9e:	81 e9       	ldi	r24, 0x91	; 145
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	21 e9       	ldi	r18, 0x91	; 145
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	f9 01       	movw	r30, r18
    3ca8:	20 81       	ld	r18, Z
    3caa:	23 60       	ori	r18, 0x03	; 3
    3cac:	fc 01       	movw	r30, r24
    3cae:	20 83       	st	Z, r18
		break;
    3cb0:	1d c0       	rjmp	.+58     	; 0x3cec <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    3cb2:	81 e9       	ldi	r24, 0x91	; 145
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	21 e9       	ldi	r18, 0x91	; 145
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	f9 01       	movw	r30, r18
    3cbc:	20 81       	ld	r18, Z
    3cbe:	24 60       	ori	r18, 0x04	; 4
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	20 83       	st	Z, r18
		break;
    3cc4:	13 c0       	rjmp	.+38     	; 0x3cec <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    3cc6:	81 e9       	ldi	r24, 0x91	; 145
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	21 e9       	ldi	r18, 0x91	; 145
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	f9 01       	movw	r30, r18
    3cd0:	20 81       	ld	r18, Z
    3cd2:	25 60       	ori	r18, 0x05	; 5
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	20 83       	st	Z, r18
		break;
    3cd8:	09 c0       	rjmp	.+18     	; 0x3cec <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		default:
		TCCR3B |= NoPrescaling;
    3cda:	81 e9       	ldi	r24, 0x91	; 145
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	21 e9       	ldi	r18, 0x91	; 145
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	f9 01       	movw	r30, r18
    3ce4:	20 81       	ld	r18, Z
    3ce6:	21 60       	ori	r18, 0x01	; 1
    3ce8:	fc 01       	movw	r30, r24
    3cea:	20 83       	st	Z, r18
	}
}
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	df 91       	pop	r29
    3cf6:	cf 91       	pop	r28
    3cf8:	1f 91       	pop	r17
    3cfa:	0f 91       	pop	r16
    3cfc:	08 95       	ret

00003cfe <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	1f 92       	push	r1
    3d04:	1f 92       	push	r1
    3d06:	cd b7       	in	r28, 0x3d	; 61
    3d08:	de b7       	in	r29, 0x3e	; 62
    3d0a:	9a 83       	std	Y+2, r25	; 0x02
    3d0c:	89 83       	std	Y+1, r24	; 0x01
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    3d0e:	88 e3       	ldi	r24, 0x38	; 56
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	fc 01       	movw	r30, r24
    3d14:	80 81       	ld	r24, Z
    3d16:	88 2f       	mov	r24, r24
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	82 70       	andi	r24, 0x02	; 2
    3d1c:	99 27       	eor	r25, r25
    3d1e:	21 e0       	ldi	r18, 0x01	; 1
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <_ZN10helicopter4util5Timer11hasTimedoutEv+0x28>
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	82 2f       	mov	r24, r18
}
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	08 95       	ret

00003d32 <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	1f 92       	push	r1
    3d38:	1f 92       	push	r1
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	9a 83       	std	Y+2, r25	; 0x02
    3d40:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    3d42:	81 e9       	ldi	r24, 0x91	; 145
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	fc 01       	movw	r30, r24
    3d48:	10 82       	st	Z, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    3d4a:	84 e9       	ldi	r24, 0x94	; 148
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	fc 01       	movw	r30, r24
    3d50:	11 82       	std	Z+1, r1	; 0x01
    3d52:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    3d54:	88 e3       	ldi	r24, 0x38	; 56
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	28 e3       	ldi	r18, 0x38	; 56
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	f9 01       	movw	r30, r18
    3d5e:	20 81       	ld	r18, Z
    3d60:	22 60       	ori	r18, 0x02	; 2
    3d62:	fc 01       	movw	r30, r24
    3d64:	20 83       	st	Z, r18
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	08 95       	ret

00003d70 <__subsf3>:
    3d70:	50 58       	subi	r21, 0x80	; 128

00003d72 <__addsf3>:
    3d72:	bb 27       	eor	r27, r27
    3d74:	aa 27       	eor	r26, r26
    3d76:	0e d0       	rcall	.+28     	; 0x3d94 <__addsf3x>
    3d78:	b1 c1       	rjmp	.+866    	; 0x40dc <__fp_round>
    3d7a:	a2 d1       	rcall	.+836    	; 0x40c0 <__fp_pscA>
    3d7c:	30 f0       	brcs	.+12     	; 0x3d8a <__addsf3+0x18>
    3d7e:	a7 d1       	rcall	.+846    	; 0x40ce <__fp_pscB>
    3d80:	20 f0       	brcs	.+8      	; 0x3d8a <__addsf3+0x18>
    3d82:	31 f4       	brne	.+12     	; 0x3d90 <__addsf3+0x1e>
    3d84:	9f 3f       	cpi	r25, 0xFF	; 255
    3d86:	11 f4       	brne	.+4      	; 0x3d8c <__addsf3+0x1a>
    3d88:	1e f4       	brtc	.+6      	; 0x3d90 <__addsf3+0x1e>
    3d8a:	97 c1       	rjmp	.+814    	; 0x40ba <__fp_nan>
    3d8c:	0e f4       	brtc	.+2      	; 0x3d90 <__addsf3+0x1e>
    3d8e:	e0 95       	com	r30
    3d90:	e7 fb       	bst	r30, 7
    3d92:	64 c1       	rjmp	.+712    	; 0x405c <__fp_inf>

00003d94 <__addsf3x>:
    3d94:	e9 2f       	mov	r30, r25
    3d96:	b3 d1       	rcall	.+870    	; 0x40fe <__fp_split3>
    3d98:	80 f3       	brcs	.-32     	; 0x3d7a <__addsf3+0x8>
    3d9a:	ba 17       	cp	r27, r26
    3d9c:	62 07       	cpc	r22, r18
    3d9e:	73 07       	cpc	r23, r19
    3da0:	84 07       	cpc	r24, r20
    3da2:	95 07       	cpc	r25, r21
    3da4:	18 f0       	brcs	.+6      	; 0x3dac <__addsf3x+0x18>
    3da6:	71 f4       	brne	.+28     	; 0x3dc4 <__addsf3x+0x30>
    3da8:	9e f5       	brtc	.+102    	; 0x3e10 <__addsf3x+0x7c>
    3daa:	e2 c1       	rjmp	.+964    	; 0x4170 <__fp_zero>
    3dac:	0e f4       	brtc	.+2      	; 0x3db0 <__addsf3x+0x1c>
    3dae:	e0 95       	com	r30
    3db0:	0b 2e       	mov	r0, r27
    3db2:	ba 2f       	mov	r27, r26
    3db4:	a0 2d       	mov	r26, r0
    3db6:	0b 01       	movw	r0, r22
    3db8:	b9 01       	movw	r22, r18
    3dba:	90 01       	movw	r18, r0
    3dbc:	0c 01       	movw	r0, r24
    3dbe:	ca 01       	movw	r24, r20
    3dc0:	a0 01       	movw	r20, r0
    3dc2:	11 24       	eor	r1, r1
    3dc4:	ff 27       	eor	r31, r31
    3dc6:	59 1b       	sub	r21, r25
    3dc8:	99 f0       	breq	.+38     	; 0x3df0 <__addsf3x+0x5c>
    3dca:	59 3f       	cpi	r21, 0xF9	; 249
    3dcc:	50 f4       	brcc	.+20     	; 0x3de2 <__addsf3x+0x4e>
    3dce:	50 3e       	cpi	r21, 0xE0	; 224
    3dd0:	68 f1       	brcs	.+90     	; 0x3e2c <__addsf3x+0x98>
    3dd2:	1a 16       	cp	r1, r26
    3dd4:	f0 40       	sbci	r31, 0x00	; 0
    3dd6:	a2 2f       	mov	r26, r18
    3dd8:	23 2f       	mov	r18, r19
    3dda:	34 2f       	mov	r19, r20
    3ddc:	44 27       	eor	r20, r20
    3dde:	58 5f       	subi	r21, 0xF8	; 248
    3de0:	f3 cf       	rjmp	.-26     	; 0x3dc8 <__addsf3x+0x34>
    3de2:	46 95       	lsr	r20
    3de4:	37 95       	ror	r19
    3de6:	27 95       	ror	r18
    3de8:	a7 95       	ror	r26
    3dea:	f0 40       	sbci	r31, 0x00	; 0
    3dec:	53 95       	inc	r21
    3dee:	c9 f7       	brne	.-14     	; 0x3de2 <__addsf3x+0x4e>
    3df0:	7e f4       	brtc	.+30     	; 0x3e10 <__addsf3x+0x7c>
    3df2:	1f 16       	cp	r1, r31
    3df4:	ba 0b       	sbc	r27, r26
    3df6:	62 0b       	sbc	r22, r18
    3df8:	73 0b       	sbc	r23, r19
    3dfa:	84 0b       	sbc	r24, r20
    3dfc:	ba f0       	brmi	.+46     	; 0x3e2c <__addsf3x+0x98>
    3dfe:	91 50       	subi	r25, 0x01	; 1
    3e00:	a1 f0       	breq	.+40     	; 0x3e2a <__addsf3x+0x96>
    3e02:	ff 0f       	add	r31, r31
    3e04:	bb 1f       	adc	r27, r27
    3e06:	66 1f       	adc	r22, r22
    3e08:	77 1f       	adc	r23, r23
    3e0a:	88 1f       	adc	r24, r24
    3e0c:	c2 f7       	brpl	.-16     	; 0x3dfe <__addsf3x+0x6a>
    3e0e:	0e c0       	rjmp	.+28     	; 0x3e2c <__addsf3x+0x98>
    3e10:	ba 0f       	add	r27, r26
    3e12:	62 1f       	adc	r22, r18
    3e14:	73 1f       	adc	r23, r19
    3e16:	84 1f       	adc	r24, r20
    3e18:	48 f4       	brcc	.+18     	; 0x3e2c <__addsf3x+0x98>
    3e1a:	87 95       	ror	r24
    3e1c:	77 95       	ror	r23
    3e1e:	67 95       	ror	r22
    3e20:	b7 95       	ror	r27
    3e22:	f7 95       	ror	r31
    3e24:	9e 3f       	cpi	r25, 0xFE	; 254
    3e26:	08 f0       	brcs	.+2      	; 0x3e2a <__addsf3x+0x96>
    3e28:	b3 cf       	rjmp	.-154    	; 0x3d90 <__addsf3+0x1e>
    3e2a:	93 95       	inc	r25
    3e2c:	88 0f       	add	r24, r24
    3e2e:	08 f0       	brcs	.+2      	; 0x3e32 <__addsf3x+0x9e>
    3e30:	99 27       	eor	r25, r25
    3e32:	ee 0f       	add	r30, r30
    3e34:	97 95       	ror	r25
    3e36:	87 95       	ror	r24
    3e38:	08 95       	ret

00003e3a <__cmpsf2>:
    3e3a:	ec d0       	rcall	.+472    	; 0x4014 <__fp_cmp>
    3e3c:	08 f4       	brcc	.+2      	; 0x3e40 <__cmpsf2+0x6>
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	08 95       	ret

00003e42 <__divsf3>:
    3e42:	0c d0       	rcall	.+24     	; 0x3e5c <__divsf3x>
    3e44:	4b c1       	rjmp	.+662    	; 0x40dc <__fp_round>
    3e46:	43 d1       	rcall	.+646    	; 0x40ce <__fp_pscB>
    3e48:	40 f0       	brcs	.+16     	; 0x3e5a <__divsf3+0x18>
    3e4a:	3a d1       	rcall	.+628    	; 0x40c0 <__fp_pscA>
    3e4c:	30 f0       	brcs	.+12     	; 0x3e5a <__divsf3+0x18>
    3e4e:	21 f4       	brne	.+8      	; 0x3e58 <__divsf3+0x16>
    3e50:	5f 3f       	cpi	r21, 0xFF	; 255
    3e52:	19 f0       	breq	.+6      	; 0x3e5a <__divsf3+0x18>
    3e54:	03 c1       	rjmp	.+518    	; 0x405c <__fp_inf>
    3e56:	51 11       	cpse	r21, r1
    3e58:	8c c1       	rjmp	.+792    	; 0x4172 <__fp_szero>
    3e5a:	2f c1       	rjmp	.+606    	; 0x40ba <__fp_nan>

00003e5c <__divsf3x>:
    3e5c:	50 d1       	rcall	.+672    	; 0x40fe <__fp_split3>
    3e5e:	98 f3       	brcs	.-26     	; 0x3e46 <__divsf3+0x4>

00003e60 <__divsf3_pse>:
    3e60:	99 23       	and	r25, r25
    3e62:	c9 f3       	breq	.-14     	; 0x3e56 <__divsf3+0x14>
    3e64:	55 23       	and	r21, r21
    3e66:	b1 f3       	breq	.-20     	; 0x3e54 <__divsf3+0x12>
    3e68:	95 1b       	sub	r25, r21
    3e6a:	55 0b       	sbc	r21, r21
    3e6c:	bb 27       	eor	r27, r27
    3e6e:	aa 27       	eor	r26, r26
    3e70:	62 17       	cp	r22, r18
    3e72:	73 07       	cpc	r23, r19
    3e74:	84 07       	cpc	r24, r20
    3e76:	38 f0       	brcs	.+14     	; 0x3e86 <__divsf3_pse+0x26>
    3e78:	9f 5f       	subi	r25, 0xFF	; 255
    3e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e7c:	22 0f       	add	r18, r18
    3e7e:	33 1f       	adc	r19, r19
    3e80:	44 1f       	adc	r20, r20
    3e82:	aa 1f       	adc	r26, r26
    3e84:	a9 f3       	breq	.-22     	; 0x3e70 <__divsf3_pse+0x10>
    3e86:	33 d0       	rcall	.+102    	; 0x3eee <__divsf3_pse+0x8e>
    3e88:	0e 2e       	mov	r0, r30
    3e8a:	3a f0       	brmi	.+14     	; 0x3e9a <__divsf3_pse+0x3a>
    3e8c:	e0 e8       	ldi	r30, 0x80	; 128
    3e8e:	30 d0       	rcall	.+96     	; 0x3ef0 <__divsf3_pse+0x90>
    3e90:	91 50       	subi	r25, 0x01	; 1
    3e92:	50 40       	sbci	r21, 0x00	; 0
    3e94:	e6 95       	lsr	r30
    3e96:	00 1c       	adc	r0, r0
    3e98:	ca f7       	brpl	.-14     	; 0x3e8c <__divsf3_pse+0x2c>
    3e9a:	29 d0       	rcall	.+82     	; 0x3eee <__divsf3_pse+0x8e>
    3e9c:	fe 2f       	mov	r31, r30
    3e9e:	27 d0       	rcall	.+78     	; 0x3eee <__divsf3_pse+0x8e>
    3ea0:	66 0f       	add	r22, r22
    3ea2:	77 1f       	adc	r23, r23
    3ea4:	88 1f       	adc	r24, r24
    3ea6:	bb 1f       	adc	r27, r27
    3ea8:	26 17       	cp	r18, r22
    3eaa:	37 07       	cpc	r19, r23
    3eac:	48 07       	cpc	r20, r24
    3eae:	ab 07       	cpc	r26, r27
    3eb0:	b0 e8       	ldi	r27, 0x80	; 128
    3eb2:	09 f0       	breq	.+2      	; 0x3eb6 <__divsf3_pse+0x56>
    3eb4:	bb 0b       	sbc	r27, r27
    3eb6:	80 2d       	mov	r24, r0
    3eb8:	bf 01       	movw	r22, r30
    3eba:	ff 27       	eor	r31, r31
    3ebc:	93 58       	subi	r25, 0x83	; 131
    3ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec0:	2a f0       	brmi	.+10     	; 0x3ecc <__divsf3_pse+0x6c>
    3ec2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ec4:	51 05       	cpc	r21, r1
    3ec6:	68 f0       	brcs	.+26     	; 0x3ee2 <__divsf3_pse+0x82>
    3ec8:	c9 c0       	rjmp	.+402    	; 0x405c <__fp_inf>
    3eca:	53 c1       	rjmp	.+678    	; 0x4172 <__fp_szero>
    3ecc:	5f 3f       	cpi	r21, 0xFF	; 255
    3ece:	ec f3       	brlt	.-6      	; 0x3eca <__divsf3_pse+0x6a>
    3ed0:	98 3e       	cpi	r25, 0xE8	; 232
    3ed2:	dc f3       	brlt	.-10     	; 0x3eca <__divsf3_pse+0x6a>
    3ed4:	86 95       	lsr	r24
    3ed6:	77 95       	ror	r23
    3ed8:	67 95       	ror	r22
    3eda:	b7 95       	ror	r27
    3edc:	f7 95       	ror	r31
    3ede:	9f 5f       	subi	r25, 0xFF	; 255
    3ee0:	c9 f7       	brne	.-14     	; 0x3ed4 <__divsf3_pse+0x74>
    3ee2:	88 0f       	add	r24, r24
    3ee4:	91 1d       	adc	r25, r1
    3ee6:	96 95       	lsr	r25
    3ee8:	87 95       	ror	r24
    3eea:	97 f9       	bld	r25, 7
    3eec:	08 95       	ret
    3eee:	e1 e0       	ldi	r30, 0x01	; 1
    3ef0:	66 0f       	add	r22, r22
    3ef2:	77 1f       	adc	r23, r23
    3ef4:	88 1f       	adc	r24, r24
    3ef6:	bb 1f       	adc	r27, r27
    3ef8:	62 17       	cp	r22, r18
    3efa:	73 07       	cpc	r23, r19
    3efc:	84 07       	cpc	r24, r20
    3efe:	ba 07       	cpc	r27, r26
    3f00:	20 f0       	brcs	.+8      	; 0x3f0a <__divsf3_pse+0xaa>
    3f02:	62 1b       	sub	r22, r18
    3f04:	73 0b       	sbc	r23, r19
    3f06:	84 0b       	sbc	r24, r20
    3f08:	ba 0b       	sbc	r27, r26
    3f0a:	ee 1f       	adc	r30, r30
    3f0c:	88 f7       	brcc	.-30     	; 0x3ef0 <__divsf3_pse+0x90>
    3f0e:	e0 95       	com	r30
    3f10:	08 95       	ret

00003f12 <__fixsfsi>:
    3f12:	04 d0       	rcall	.+8      	; 0x3f1c <__fixunssfsi>
    3f14:	68 94       	set
    3f16:	b1 11       	cpse	r27, r1
    3f18:	2c c1       	rjmp	.+600    	; 0x4172 <__fp_szero>
    3f1a:	08 95       	ret

00003f1c <__fixunssfsi>:
    3f1c:	f8 d0       	rcall	.+496    	; 0x410e <__fp_splitA>
    3f1e:	88 f0       	brcs	.+34     	; 0x3f42 <__fixunssfsi+0x26>
    3f20:	9f 57       	subi	r25, 0x7F	; 127
    3f22:	90 f0       	brcs	.+36     	; 0x3f48 <__fixunssfsi+0x2c>
    3f24:	b9 2f       	mov	r27, r25
    3f26:	99 27       	eor	r25, r25
    3f28:	b7 51       	subi	r27, 0x17	; 23
    3f2a:	a0 f0       	brcs	.+40     	; 0x3f54 <__fixunssfsi+0x38>
    3f2c:	d1 f0       	breq	.+52     	; 0x3f62 <__fixunssfsi+0x46>
    3f2e:	66 0f       	add	r22, r22
    3f30:	77 1f       	adc	r23, r23
    3f32:	88 1f       	adc	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	1a f0       	brmi	.+6      	; 0x3f3e <__fixunssfsi+0x22>
    3f38:	ba 95       	dec	r27
    3f3a:	c9 f7       	brne	.-14     	; 0x3f2e <__fixunssfsi+0x12>
    3f3c:	12 c0       	rjmp	.+36     	; 0x3f62 <__fixunssfsi+0x46>
    3f3e:	b1 30       	cpi	r27, 0x01	; 1
    3f40:	81 f0       	breq	.+32     	; 0x3f62 <__fixunssfsi+0x46>
    3f42:	16 d1       	rcall	.+556    	; 0x4170 <__fp_zero>
    3f44:	b1 e0       	ldi	r27, 0x01	; 1
    3f46:	08 95       	ret
    3f48:	13 c1       	rjmp	.+550    	; 0x4170 <__fp_zero>
    3f4a:	67 2f       	mov	r22, r23
    3f4c:	78 2f       	mov	r23, r24
    3f4e:	88 27       	eor	r24, r24
    3f50:	b8 5f       	subi	r27, 0xF8	; 248
    3f52:	39 f0       	breq	.+14     	; 0x3f62 <__fixunssfsi+0x46>
    3f54:	b9 3f       	cpi	r27, 0xF9	; 249
    3f56:	cc f3       	brlt	.-14     	; 0x3f4a <__fixunssfsi+0x2e>
    3f58:	86 95       	lsr	r24
    3f5a:	77 95       	ror	r23
    3f5c:	67 95       	ror	r22
    3f5e:	b3 95       	inc	r27
    3f60:	d9 f7       	brne	.-10     	; 0x3f58 <__fixunssfsi+0x3c>
    3f62:	3e f4       	brtc	.+14     	; 0x3f72 <__fixunssfsi+0x56>
    3f64:	90 95       	com	r25
    3f66:	80 95       	com	r24
    3f68:	70 95       	com	r23
    3f6a:	61 95       	neg	r22
    3f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f70:	9f 4f       	sbci	r25, 0xFF	; 255
    3f72:	08 95       	ret

00003f74 <__floatunsisf>:
    3f74:	e8 94       	clt
    3f76:	09 c0       	rjmp	.+18     	; 0x3f8a <__floatsisf+0x12>

00003f78 <__floatsisf>:
    3f78:	97 fb       	bst	r25, 7
    3f7a:	3e f4       	brtc	.+14     	; 0x3f8a <__floatsisf+0x12>
    3f7c:	90 95       	com	r25
    3f7e:	80 95       	com	r24
    3f80:	70 95       	com	r23
    3f82:	61 95       	neg	r22
    3f84:	7f 4f       	sbci	r23, 0xFF	; 255
    3f86:	8f 4f       	sbci	r24, 0xFF	; 255
    3f88:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8a:	99 23       	and	r25, r25
    3f8c:	a9 f0       	breq	.+42     	; 0x3fb8 <__floatsisf+0x40>
    3f8e:	f9 2f       	mov	r31, r25
    3f90:	96 e9       	ldi	r25, 0x96	; 150
    3f92:	bb 27       	eor	r27, r27
    3f94:	93 95       	inc	r25
    3f96:	f6 95       	lsr	r31
    3f98:	87 95       	ror	r24
    3f9a:	77 95       	ror	r23
    3f9c:	67 95       	ror	r22
    3f9e:	b7 95       	ror	r27
    3fa0:	f1 11       	cpse	r31, r1
    3fa2:	f8 cf       	rjmp	.-16     	; 0x3f94 <__floatsisf+0x1c>
    3fa4:	fa f4       	brpl	.+62     	; 0x3fe4 <__floatsisf+0x6c>
    3fa6:	bb 0f       	add	r27, r27
    3fa8:	11 f4       	brne	.+4      	; 0x3fae <__floatsisf+0x36>
    3faa:	60 ff       	sbrs	r22, 0
    3fac:	1b c0       	rjmp	.+54     	; 0x3fe4 <__floatsisf+0x6c>
    3fae:	6f 5f       	subi	r22, 0xFF	; 255
    3fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb6:	16 c0       	rjmp	.+44     	; 0x3fe4 <__floatsisf+0x6c>
    3fb8:	88 23       	and	r24, r24
    3fba:	11 f0       	breq	.+4      	; 0x3fc0 <__floatsisf+0x48>
    3fbc:	96 e9       	ldi	r25, 0x96	; 150
    3fbe:	11 c0       	rjmp	.+34     	; 0x3fe2 <__floatsisf+0x6a>
    3fc0:	77 23       	and	r23, r23
    3fc2:	21 f0       	breq	.+8      	; 0x3fcc <__floatsisf+0x54>
    3fc4:	9e e8       	ldi	r25, 0x8E	; 142
    3fc6:	87 2f       	mov	r24, r23
    3fc8:	76 2f       	mov	r23, r22
    3fca:	05 c0       	rjmp	.+10     	; 0x3fd6 <__floatsisf+0x5e>
    3fcc:	66 23       	and	r22, r22
    3fce:	71 f0       	breq	.+28     	; 0x3fec <__floatsisf+0x74>
    3fd0:	96 e8       	ldi	r25, 0x86	; 134
    3fd2:	86 2f       	mov	r24, r22
    3fd4:	70 e0       	ldi	r23, 0x00	; 0
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	2a f0       	brmi	.+10     	; 0x3fe4 <__floatsisf+0x6c>
    3fda:	9a 95       	dec	r25
    3fdc:	66 0f       	add	r22, r22
    3fde:	77 1f       	adc	r23, r23
    3fe0:	88 1f       	adc	r24, r24
    3fe2:	da f7       	brpl	.-10     	; 0x3fda <__floatsisf+0x62>
    3fe4:	88 0f       	add	r24, r24
    3fe6:	96 95       	lsr	r25
    3fe8:	87 95       	ror	r24
    3fea:	97 f9       	bld	r25, 7
    3fec:	08 95       	ret

00003fee <floor>:
    3fee:	a9 d0       	rcall	.+338    	; 0x4142 <__fp_trunc>
    3ff0:	80 f0       	brcs	.+32     	; 0x4012 <floor+0x24>
    3ff2:	9f 37       	cpi	r25, 0x7F	; 127
    3ff4:	40 f4       	brcc	.+16     	; 0x4006 <floor+0x18>
    3ff6:	91 11       	cpse	r25, r1
    3ff8:	0e f0       	brts	.+2      	; 0x3ffc <floor+0xe>
    3ffa:	bb c0       	rjmp	.+374    	; 0x4172 <__fp_szero>
    3ffc:	60 e0       	ldi	r22, 0x00	; 0
    3ffe:	70 e0       	ldi	r23, 0x00	; 0
    4000:	80 e8       	ldi	r24, 0x80	; 128
    4002:	9f eb       	ldi	r25, 0xBF	; 191
    4004:	08 95       	ret
    4006:	26 f4       	brtc	.+8      	; 0x4010 <floor+0x22>
    4008:	1b 16       	cp	r1, r27
    400a:	61 1d       	adc	r22, r1
    400c:	71 1d       	adc	r23, r1
    400e:	81 1d       	adc	r24, r1
    4010:	2b c0       	rjmp	.+86     	; 0x4068 <__fp_mintl>
    4012:	45 c0       	rjmp	.+138    	; 0x409e <__fp_mpack>

00004014 <__fp_cmp>:
    4014:	99 0f       	add	r25, r25
    4016:	00 08       	sbc	r0, r0
    4018:	55 0f       	add	r21, r21
    401a:	aa 0b       	sbc	r26, r26
    401c:	e0 e8       	ldi	r30, 0x80	; 128
    401e:	fe ef       	ldi	r31, 0xFE	; 254
    4020:	16 16       	cp	r1, r22
    4022:	17 06       	cpc	r1, r23
    4024:	e8 07       	cpc	r30, r24
    4026:	f9 07       	cpc	r31, r25
    4028:	c0 f0       	brcs	.+48     	; 0x405a <__fp_cmp+0x46>
    402a:	12 16       	cp	r1, r18
    402c:	13 06       	cpc	r1, r19
    402e:	e4 07       	cpc	r30, r20
    4030:	f5 07       	cpc	r31, r21
    4032:	98 f0       	brcs	.+38     	; 0x405a <__fp_cmp+0x46>
    4034:	62 1b       	sub	r22, r18
    4036:	73 0b       	sbc	r23, r19
    4038:	84 0b       	sbc	r24, r20
    403a:	95 0b       	sbc	r25, r21
    403c:	39 f4       	brne	.+14     	; 0x404c <__fp_cmp+0x38>
    403e:	0a 26       	eor	r0, r26
    4040:	61 f0       	breq	.+24     	; 0x405a <__fp_cmp+0x46>
    4042:	23 2b       	or	r18, r19
    4044:	24 2b       	or	r18, r20
    4046:	25 2b       	or	r18, r21
    4048:	21 f4       	brne	.+8      	; 0x4052 <__fp_cmp+0x3e>
    404a:	08 95       	ret
    404c:	0a 26       	eor	r0, r26
    404e:	09 f4       	brne	.+2      	; 0x4052 <__fp_cmp+0x3e>
    4050:	a1 40       	sbci	r26, 0x01	; 1
    4052:	a6 95       	lsr	r26
    4054:	8f ef       	ldi	r24, 0xFF	; 255
    4056:	81 1d       	adc	r24, r1
    4058:	81 1d       	adc	r24, r1
    405a:	08 95       	ret

0000405c <__fp_inf>:
    405c:	97 f9       	bld	r25, 7
    405e:	9f 67       	ori	r25, 0x7F	; 127
    4060:	80 e8       	ldi	r24, 0x80	; 128
    4062:	70 e0       	ldi	r23, 0x00	; 0
    4064:	60 e0       	ldi	r22, 0x00	; 0
    4066:	08 95       	ret

00004068 <__fp_mintl>:
    4068:	88 23       	and	r24, r24
    406a:	71 f4       	brne	.+28     	; 0x4088 <__fp_mintl+0x20>
    406c:	77 23       	and	r23, r23
    406e:	21 f0       	breq	.+8      	; 0x4078 <__fp_mintl+0x10>
    4070:	98 50       	subi	r25, 0x08	; 8
    4072:	87 2b       	or	r24, r23
    4074:	76 2f       	mov	r23, r22
    4076:	07 c0       	rjmp	.+14     	; 0x4086 <__fp_mintl+0x1e>
    4078:	66 23       	and	r22, r22
    407a:	11 f4       	brne	.+4      	; 0x4080 <__fp_mintl+0x18>
    407c:	99 27       	eor	r25, r25
    407e:	0d c0       	rjmp	.+26     	; 0x409a <__fp_mintl+0x32>
    4080:	90 51       	subi	r25, 0x10	; 16
    4082:	86 2b       	or	r24, r22
    4084:	70 e0       	ldi	r23, 0x00	; 0
    4086:	60 e0       	ldi	r22, 0x00	; 0
    4088:	2a f0       	brmi	.+10     	; 0x4094 <__fp_mintl+0x2c>
    408a:	9a 95       	dec	r25
    408c:	66 0f       	add	r22, r22
    408e:	77 1f       	adc	r23, r23
    4090:	88 1f       	adc	r24, r24
    4092:	da f7       	brpl	.-10     	; 0x408a <__fp_mintl+0x22>
    4094:	88 0f       	add	r24, r24
    4096:	96 95       	lsr	r25
    4098:	87 95       	ror	r24
    409a:	97 f9       	bld	r25, 7
    409c:	08 95       	ret

0000409e <__fp_mpack>:
    409e:	9f 3f       	cpi	r25, 0xFF	; 255
    40a0:	31 f0       	breq	.+12     	; 0x40ae <__fp_mpack_finite+0xc>

000040a2 <__fp_mpack_finite>:
    40a2:	91 50       	subi	r25, 0x01	; 1
    40a4:	20 f4       	brcc	.+8      	; 0x40ae <__fp_mpack_finite+0xc>
    40a6:	87 95       	ror	r24
    40a8:	77 95       	ror	r23
    40aa:	67 95       	ror	r22
    40ac:	b7 95       	ror	r27
    40ae:	88 0f       	add	r24, r24
    40b0:	91 1d       	adc	r25, r1
    40b2:	96 95       	lsr	r25
    40b4:	87 95       	ror	r24
    40b6:	97 f9       	bld	r25, 7
    40b8:	08 95       	ret

000040ba <__fp_nan>:
    40ba:	9f ef       	ldi	r25, 0xFF	; 255
    40bc:	80 ec       	ldi	r24, 0xC0	; 192
    40be:	08 95       	ret

000040c0 <__fp_pscA>:
    40c0:	00 24       	eor	r0, r0
    40c2:	0a 94       	dec	r0
    40c4:	16 16       	cp	r1, r22
    40c6:	17 06       	cpc	r1, r23
    40c8:	18 06       	cpc	r1, r24
    40ca:	09 06       	cpc	r0, r25
    40cc:	08 95       	ret

000040ce <__fp_pscB>:
    40ce:	00 24       	eor	r0, r0
    40d0:	0a 94       	dec	r0
    40d2:	12 16       	cp	r1, r18
    40d4:	13 06       	cpc	r1, r19
    40d6:	14 06       	cpc	r1, r20
    40d8:	05 06       	cpc	r0, r21
    40da:	08 95       	ret

000040dc <__fp_round>:
    40dc:	09 2e       	mov	r0, r25
    40de:	03 94       	inc	r0
    40e0:	00 0c       	add	r0, r0
    40e2:	11 f4       	brne	.+4      	; 0x40e8 <__fp_round+0xc>
    40e4:	88 23       	and	r24, r24
    40e6:	52 f0       	brmi	.+20     	; 0x40fc <__fp_round+0x20>
    40e8:	bb 0f       	add	r27, r27
    40ea:	40 f4       	brcc	.+16     	; 0x40fc <__fp_round+0x20>
    40ec:	bf 2b       	or	r27, r31
    40ee:	11 f4       	brne	.+4      	; 0x40f4 <__fp_round+0x18>
    40f0:	60 ff       	sbrs	r22, 0
    40f2:	04 c0       	rjmp	.+8      	; 0x40fc <__fp_round+0x20>
    40f4:	6f 5f       	subi	r22, 0xFF	; 255
    40f6:	7f 4f       	sbci	r23, 0xFF	; 255
    40f8:	8f 4f       	sbci	r24, 0xFF	; 255
    40fa:	9f 4f       	sbci	r25, 0xFF	; 255
    40fc:	08 95       	ret

000040fe <__fp_split3>:
    40fe:	57 fd       	sbrc	r21, 7
    4100:	90 58       	subi	r25, 0x80	; 128
    4102:	44 0f       	add	r20, r20
    4104:	55 1f       	adc	r21, r21
    4106:	59 f0       	breq	.+22     	; 0x411e <__fp_splitA+0x10>
    4108:	5f 3f       	cpi	r21, 0xFF	; 255
    410a:	71 f0       	breq	.+28     	; 0x4128 <__fp_splitA+0x1a>
    410c:	47 95       	ror	r20

0000410e <__fp_splitA>:
    410e:	88 0f       	add	r24, r24
    4110:	97 fb       	bst	r25, 7
    4112:	99 1f       	adc	r25, r25
    4114:	61 f0       	breq	.+24     	; 0x412e <__fp_splitA+0x20>
    4116:	9f 3f       	cpi	r25, 0xFF	; 255
    4118:	79 f0       	breq	.+30     	; 0x4138 <__fp_splitA+0x2a>
    411a:	87 95       	ror	r24
    411c:	08 95       	ret
    411e:	12 16       	cp	r1, r18
    4120:	13 06       	cpc	r1, r19
    4122:	14 06       	cpc	r1, r20
    4124:	55 1f       	adc	r21, r21
    4126:	f2 cf       	rjmp	.-28     	; 0x410c <__fp_split3+0xe>
    4128:	46 95       	lsr	r20
    412a:	f1 df       	rcall	.-30     	; 0x410e <__fp_splitA>
    412c:	08 c0       	rjmp	.+16     	; 0x413e <__fp_splitA+0x30>
    412e:	16 16       	cp	r1, r22
    4130:	17 06       	cpc	r1, r23
    4132:	18 06       	cpc	r1, r24
    4134:	99 1f       	adc	r25, r25
    4136:	f1 cf       	rjmp	.-30     	; 0x411a <__fp_splitA+0xc>
    4138:	86 95       	lsr	r24
    413a:	71 05       	cpc	r23, r1
    413c:	61 05       	cpc	r22, r1
    413e:	08 94       	sec
    4140:	08 95       	ret

00004142 <__fp_trunc>:
    4142:	e5 df       	rcall	.-54     	; 0x410e <__fp_splitA>
    4144:	a0 f0       	brcs	.+40     	; 0x416e <__fp_trunc+0x2c>
    4146:	be e7       	ldi	r27, 0x7E	; 126
    4148:	b9 17       	cp	r27, r25
    414a:	88 f4       	brcc	.+34     	; 0x416e <__fp_trunc+0x2c>
    414c:	bb 27       	eor	r27, r27
    414e:	9f 38       	cpi	r25, 0x8F	; 143
    4150:	60 f4       	brcc	.+24     	; 0x416a <__fp_trunc+0x28>
    4152:	16 16       	cp	r1, r22
    4154:	b1 1d       	adc	r27, r1
    4156:	67 2f       	mov	r22, r23
    4158:	78 2f       	mov	r23, r24
    415a:	88 27       	eor	r24, r24
    415c:	98 5f       	subi	r25, 0xF8	; 248
    415e:	f7 cf       	rjmp	.-18     	; 0x414e <__fp_trunc+0xc>
    4160:	86 95       	lsr	r24
    4162:	77 95       	ror	r23
    4164:	67 95       	ror	r22
    4166:	b1 1d       	adc	r27, r1
    4168:	93 95       	inc	r25
    416a:	96 39       	cpi	r25, 0x96	; 150
    416c:	c8 f3       	brcs	.-14     	; 0x4160 <__fp_trunc+0x1e>
    416e:	08 95       	ret

00004170 <__fp_zero>:
    4170:	e8 94       	clt

00004172 <__fp_szero>:
    4172:	bb 27       	eor	r27, r27
    4174:	66 27       	eor	r22, r22
    4176:	77 27       	eor	r23, r23
    4178:	cb 01       	movw	r24, r22
    417a:	97 f9       	bld	r25, 7
    417c:	08 95       	ret

0000417e <__gesf2>:
    417e:	4a df       	rcall	.-364    	; 0x4014 <__fp_cmp>
    4180:	08 f4       	brcc	.+2      	; 0x4184 <__gesf2+0x6>
    4182:	8f ef       	ldi	r24, 0xFF	; 255
    4184:	08 95       	ret

00004186 <__mulsf3>:
    4186:	0b d0       	rcall	.+22     	; 0x419e <__mulsf3x>
    4188:	a9 cf       	rjmp	.-174    	; 0x40dc <__fp_round>
    418a:	9a df       	rcall	.-204    	; 0x40c0 <__fp_pscA>
    418c:	28 f0       	brcs	.+10     	; 0x4198 <__mulsf3+0x12>
    418e:	9f df       	rcall	.-194    	; 0x40ce <__fp_pscB>
    4190:	18 f0       	brcs	.+6      	; 0x4198 <__mulsf3+0x12>
    4192:	95 23       	and	r25, r21
    4194:	09 f0       	breq	.+2      	; 0x4198 <__mulsf3+0x12>
    4196:	62 cf       	rjmp	.-316    	; 0x405c <__fp_inf>
    4198:	90 cf       	rjmp	.-224    	; 0x40ba <__fp_nan>
    419a:	11 24       	eor	r1, r1
    419c:	ea cf       	rjmp	.-44     	; 0x4172 <__fp_szero>

0000419e <__mulsf3x>:
    419e:	af df       	rcall	.-162    	; 0x40fe <__fp_split3>
    41a0:	a0 f3       	brcs	.-24     	; 0x418a <__mulsf3+0x4>

000041a2 <__mulsf3_pse>:
    41a2:	95 9f       	mul	r25, r21
    41a4:	d1 f3       	breq	.-12     	; 0x419a <__mulsf3+0x14>
    41a6:	95 0f       	add	r25, r21
    41a8:	50 e0       	ldi	r21, 0x00	; 0
    41aa:	55 1f       	adc	r21, r21
    41ac:	62 9f       	mul	r22, r18
    41ae:	f0 01       	movw	r30, r0
    41b0:	72 9f       	mul	r23, r18
    41b2:	bb 27       	eor	r27, r27
    41b4:	f0 0d       	add	r31, r0
    41b6:	b1 1d       	adc	r27, r1
    41b8:	63 9f       	mul	r22, r19
    41ba:	aa 27       	eor	r26, r26
    41bc:	f0 0d       	add	r31, r0
    41be:	b1 1d       	adc	r27, r1
    41c0:	aa 1f       	adc	r26, r26
    41c2:	64 9f       	mul	r22, r20
    41c4:	66 27       	eor	r22, r22
    41c6:	b0 0d       	add	r27, r0
    41c8:	a1 1d       	adc	r26, r1
    41ca:	66 1f       	adc	r22, r22
    41cc:	82 9f       	mul	r24, r18
    41ce:	22 27       	eor	r18, r18
    41d0:	b0 0d       	add	r27, r0
    41d2:	a1 1d       	adc	r26, r1
    41d4:	62 1f       	adc	r22, r18
    41d6:	73 9f       	mul	r23, r19
    41d8:	b0 0d       	add	r27, r0
    41da:	a1 1d       	adc	r26, r1
    41dc:	62 1f       	adc	r22, r18
    41de:	83 9f       	mul	r24, r19
    41e0:	a0 0d       	add	r26, r0
    41e2:	61 1d       	adc	r22, r1
    41e4:	22 1f       	adc	r18, r18
    41e6:	74 9f       	mul	r23, r20
    41e8:	33 27       	eor	r19, r19
    41ea:	a0 0d       	add	r26, r0
    41ec:	61 1d       	adc	r22, r1
    41ee:	23 1f       	adc	r18, r19
    41f0:	84 9f       	mul	r24, r20
    41f2:	60 0d       	add	r22, r0
    41f4:	21 1d       	adc	r18, r1
    41f6:	82 2f       	mov	r24, r18
    41f8:	76 2f       	mov	r23, r22
    41fa:	6a 2f       	mov	r22, r26
    41fc:	11 24       	eor	r1, r1
    41fe:	9f 57       	subi	r25, 0x7F	; 127
    4200:	50 40       	sbci	r21, 0x00	; 0
    4202:	8a f0       	brmi	.+34     	; 0x4226 <__mulsf3_pse+0x84>
    4204:	e1 f0       	breq	.+56     	; 0x423e <__mulsf3_pse+0x9c>
    4206:	88 23       	and	r24, r24
    4208:	4a f0       	brmi	.+18     	; 0x421c <__mulsf3_pse+0x7a>
    420a:	ee 0f       	add	r30, r30
    420c:	ff 1f       	adc	r31, r31
    420e:	bb 1f       	adc	r27, r27
    4210:	66 1f       	adc	r22, r22
    4212:	77 1f       	adc	r23, r23
    4214:	88 1f       	adc	r24, r24
    4216:	91 50       	subi	r25, 0x01	; 1
    4218:	50 40       	sbci	r21, 0x00	; 0
    421a:	a9 f7       	brne	.-22     	; 0x4206 <__mulsf3_pse+0x64>
    421c:	9e 3f       	cpi	r25, 0xFE	; 254
    421e:	51 05       	cpc	r21, r1
    4220:	70 f0       	brcs	.+28     	; 0x423e <__mulsf3_pse+0x9c>
    4222:	1c cf       	rjmp	.-456    	; 0x405c <__fp_inf>
    4224:	a6 cf       	rjmp	.-180    	; 0x4172 <__fp_szero>
    4226:	5f 3f       	cpi	r21, 0xFF	; 255
    4228:	ec f3       	brlt	.-6      	; 0x4224 <__mulsf3_pse+0x82>
    422a:	98 3e       	cpi	r25, 0xE8	; 232
    422c:	dc f3       	brlt	.-10     	; 0x4224 <__mulsf3_pse+0x82>
    422e:	86 95       	lsr	r24
    4230:	77 95       	ror	r23
    4232:	67 95       	ror	r22
    4234:	b7 95       	ror	r27
    4236:	f7 95       	ror	r31
    4238:	e7 95       	ror	r30
    423a:	9f 5f       	subi	r25, 0xFF	; 255
    423c:	c1 f7       	brne	.-16     	; 0x422e <__mulsf3_pse+0x8c>
    423e:	fe 2b       	or	r31, r30
    4240:	88 0f       	add	r24, r24
    4242:	91 1d       	adc	r25, r1
    4244:	96 95       	lsr	r25
    4246:	87 95       	ror	r24
    4248:	97 f9       	bld	r25, 7
    424a:	08 95       	ret

0000424c <__divmodhi4>:
    424c:	97 fb       	bst	r25, 7
    424e:	07 2e       	mov	r0, r23
    4250:	16 f4       	brtc	.+4      	; 0x4256 <__divmodhi4+0xa>
    4252:	00 94       	com	r0
    4254:	07 d0       	rcall	.+14     	; 0x4264 <__divmodhi4_neg1>
    4256:	77 fd       	sbrc	r23, 7
    4258:	09 d0       	rcall	.+18     	; 0x426c <__divmodhi4_neg2>
    425a:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__udivmodhi4>
    425e:	07 fc       	sbrc	r0, 7
    4260:	05 d0       	rcall	.+10     	; 0x426c <__divmodhi4_neg2>
    4262:	3e f4       	brtc	.+14     	; 0x4272 <__divmodhi4_exit>

00004264 <__divmodhi4_neg1>:
    4264:	90 95       	com	r25
    4266:	81 95       	neg	r24
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	08 95       	ret

0000426c <__divmodhi4_neg2>:
    426c:	70 95       	com	r23
    426e:	61 95       	neg	r22
    4270:	7f 4f       	sbci	r23, 0xFF	; 255

00004272 <__divmodhi4_exit>:
    4272:	08 95       	ret

00004274 <__udivmodsi4>:
    4274:	a1 e2       	ldi	r26, 0x21	; 33
    4276:	1a 2e       	mov	r1, r26
    4278:	aa 1b       	sub	r26, r26
    427a:	bb 1b       	sub	r27, r27
    427c:	fd 01       	movw	r30, r26
    427e:	0d c0       	rjmp	.+26     	; 0x429a <__udivmodsi4_ep>

00004280 <__udivmodsi4_loop>:
    4280:	aa 1f       	adc	r26, r26
    4282:	bb 1f       	adc	r27, r27
    4284:	ee 1f       	adc	r30, r30
    4286:	ff 1f       	adc	r31, r31
    4288:	a2 17       	cp	r26, r18
    428a:	b3 07       	cpc	r27, r19
    428c:	e4 07       	cpc	r30, r20
    428e:	f5 07       	cpc	r31, r21
    4290:	20 f0       	brcs	.+8      	; 0x429a <__udivmodsi4_ep>
    4292:	a2 1b       	sub	r26, r18
    4294:	b3 0b       	sbc	r27, r19
    4296:	e4 0b       	sbc	r30, r20
    4298:	f5 0b       	sbc	r31, r21

0000429a <__udivmodsi4_ep>:
    429a:	66 1f       	adc	r22, r22
    429c:	77 1f       	adc	r23, r23
    429e:	88 1f       	adc	r24, r24
    42a0:	99 1f       	adc	r25, r25
    42a2:	1a 94       	dec	r1
    42a4:	69 f7       	brne	.-38     	; 0x4280 <__udivmodsi4_loop>
    42a6:	60 95       	com	r22
    42a8:	70 95       	com	r23
    42aa:	80 95       	com	r24
    42ac:	90 95       	com	r25
    42ae:	9b 01       	movw	r18, r22
    42b0:	ac 01       	movw	r20, r24
    42b2:	bd 01       	movw	r22, r26
    42b4:	cf 01       	movw	r24, r30
    42b6:	08 95       	ret

000042b8 <__udivmodhi4>:
    42b8:	aa 1b       	sub	r26, r26
    42ba:	bb 1b       	sub	r27, r27
    42bc:	51 e1       	ldi	r21, 0x11	; 17
    42be:	07 c0       	rjmp	.+14     	; 0x42ce <__udivmodhi4_ep>

000042c0 <__udivmodhi4_loop>:
    42c0:	aa 1f       	adc	r26, r26
    42c2:	bb 1f       	adc	r27, r27
    42c4:	a6 17       	cp	r26, r22
    42c6:	b7 07       	cpc	r27, r23
    42c8:	10 f0       	brcs	.+4      	; 0x42ce <__udivmodhi4_ep>
    42ca:	a6 1b       	sub	r26, r22
    42cc:	b7 0b       	sbc	r27, r23

000042ce <__udivmodhi4_ep>:
    42ce:	88 1f       	adc	r24, r24
    42d0:	99 1f       	adc	r25, r25
    42d2:	5a 95       	dec	r21
    42d4:	a9 f7       	brne	.-22     	; 0x42c0 <__udivmodhi4_loop>
    42d6:	80 95       	com	r24
    42d8:	90 95       	com	r25
    42da:	bc 01       	movw	r22, r24
    42dc:	cd 01       	movw	r24, r26
    42de:	08 95       	ret

000042e0 <malloc>:
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	82 30       	cpi	r24, 0x02	; 2
    42ea:	91 05       	cpc	r25, r1
    42ec:	10 f4       	brcc	.+4      	; 0x42f2 <malloc+0x12>
    42ee:	82 e0       	ldi	r24, 0x02	; 2
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	e0 91 8c 02 	lds	r30, 0x028C
    42f6:	f0 91 8d 02 	lds	r31, 0x028D
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	c0 e0       	ldi	r28, 0x00	; 0
    4300:	d0 e0       	ldi	r29, 0x00	; 0
    4302:	23 c0       	rjmp	.+70     	; 0x434a <malloc+0x6a>
    4304:	40 81       	ld	r20, Z
    4306:	51 81       	ldd	r21, Z+1	; 0x01
    4308:	48 17       	cp	r20, r24
    430a:	59 07       	cpc	r21, r25
    430c:	a8 f0       	brcs	.+42     	; 0x4338 <malloc+0x58>
    430e:	48 17       	cp	r20, r24
    4310:	59 07       	cpc	r21, r25
    4312:	61 f4       	brne	.+24     	; 0x432c <malloc+0x4c>
    4314:	82 81       	ldd	r24, Z+2	; 0x02
    4316:	93 81       	ldd	r25, Z+3	; 0x03
    4318:	20 97       	sbiw	r28, 0x00	; 0
    431a:	19 f0       	breq	.+6      	; 0x4322 <malloc+0x42>
    431c:	9b 83       	std	Y+3, r25	; 0x03
    431e:	8a 83       	std	Y+2, r24	; 0x02
    4320:	2e c0       	rjmp	.+92     	; 0x437e <malloc+0x9e>
    4322:	90 93 8d 02 	sts	0x028D, r25
    4326:	80 93 8c 02 	sts	0x028C, r24
    432a:	29 c0       	rjmp	.+82     	; 0x437e <malloc+0x9e>
    432c:	21 15       	cp	r18, r1
    432e:	31 05       	cpc	r19, r1
    4330:	29 f0       	breq	.+10     	; 0x433c <malloc+0x5c>
    4332:	42 17       	cp	r20, r18
    4334:	53 07       	cpc	r21, r19
    4336:	10 f0       	brcs	.+4      	; 0x433c <malloc+0x5c>
    4338:	a9 01       	movw	r20, r18
    433a:	02 c0       	rjmp	.+4      	; 0x4340 <malloc+0x60>
    433c:	be 01       	movw	r22, r28
    433e:	df 01       	movw	r26, r30
    4340:	02 81       	ldd	r16, Z+2	; 0x02
    4342:	13 81       	ldd	r17, Z+3	; 0x03
    4344:	ef 01       	movw	r28, r30
    4346:	9a 01       	movw	r18, r20
    4348:	f8 01       	movw	r30, r16
    434a:	30 97       	sbiw	r30, 0x00	; 0
    434c:	d9 f6       	brne	.-74     	; 0x4304 <malloc+0x24>
    434e:	21 15       	cp	r18, r1
    4350:	31 05       	cpc	r19, r1
    4352:	09 f1       	breq	.+66     	; 0x4396 <malloc+0xb6>
    4354:	28 1b       	sub	r18, r24
    4356:	39 0b       	sbc	r19, r25
    4358:	24 30       	cpi	r18, 0x04	; 4
    435a:	31 05       	cpc	r19, r1
    435c:	90 f4       	brcc	.+36     	; 0x4382 <malloc+0xa2>
    435e:	12 96       	adiw	r26, 0x02	; 2
    4360:	8d 91       	ld	r24, X+
    4362:	9c 91       	ld	r25, X
    4364:	13 97       	sbiw	r26, 0x03	; 3
    4366:	61 15       	cp	r22, r1
    4368:	71 05       	cpc	r23, r1
    436a:	21 f0       	breq	.+8      	; 0x4374 <malloc+0x94>
    436c:	fb 01       	movw	r30, r22
    436e:	93 83       	std	Z+3, r25	; 0x03
    4370:	82 83       	std	Z+2, r24	; 0x02
    4372:	04 c0       	rjmp	.+8      	; 0x437c <malloc+0x9c>
    4374:	90 93 8d 02 	sts	0x028D, r25
    4378:	80 93 8c 02 	sts	0x028C, r24
    437c:	fd 01       	movw	r30, r26
    437e:	32 96       	adiw	r30, 0x02	; 2
    4380:	44 c0       	rjmp	.+136    	; 0x440a <malloc+0x12a>
    4382:	fd 01       	movw	r30, r26
    4384:	e2 0f       	add	r30, r18
    4386:	f3 1f       	adc	r31, r19
    4388:	81 93       	st	Z+, r24
    438a:	91 93       	st	Z+, r25
    438c:	22 50       	subi	r18, 0x02	; 2
    438e:	31 09       	sbc	r19, r1
    4390:	2d 93       	st	X+, r18
    4392:	3c 93       	st	X, r19
    4394:	3a c0       	rjmp	.+116    	; 0x440a <malloc+0x12a>
    4396:	20 91 8a 02 	lds	r18, 0x028A
    439a:	30 91 8b 02 	lds	r19, 0x028B
    439e:	23 2b       	or	r18, r19
    43a0:	41 f4       	brne	.+16     	; 0x43b2 <malloc+0xd2>
    43a2:	20 91 02 02 	lds	r18, 0x0202
    43a6:	30 91 03 02 	lds	r19, 0x0203
    43aa:	30 93 8b 02 	sts	0x028B, r19
    43ae:	20 93 8a 02 	sts	0x028A, r18
    43b2:	20 91 00 02 	lds	r18, 0x0200
    43b6:	30 91 01 02 	lds	r19, 0x0201
    43ba:	21 15       	cp	r18, r1
    43bc:	31 05       	cpc	r19, r1
    43be:	41 f4       	brne	.+16     	; 0x43d0 <malloc+0xf0>
    43c0:	2d b7       	in	r18, 0x3d	; 61
    43c2:	3e b7       	in	r19, 0x3e	; 62
    43c4:	40 91 04 02 	lds	r20, 0x0204
    43c8:	50 91 05 02 	lds	r21, 0x0205
    43cc:	24 1b       	sub	r18, r20
    43ce:	35 0b       	sbc	r19, r21
    43d0:	e0 91 8a 02 	lds	r30, 0x028A
    43d4:	f0 91 8b 02 	lds	r31, 0x028B
    43d8:	e2 17       	cp	r30, r18
    43da:	f3 07       	cpc	r31, r19
    43dc:	a0 f4       	brcc	.+40     	; 0x4406 <malloc+0x126>
    43de:	2e 1b       	sub	r18, r30
    43e0:	3f 0b       	sbc	r19, r31
    43e2:	28 17       	cp	r18, r24
    43e4:	39 07       	cpc	r19, r25
    43e6:	78 f0       	brcs	.+30     	; 0x4406 <malloc+0x126>
    43e8:	ac 01       	movw	r20, r24
    43ea:	4e 5f       	subi	r20, 0xFE	; 254
    43ec:	5f 4f       	sbci	r21, 0xFF	; 255
    43ee:	24 17       	cp	r18, r20
    43f0:	35 07       	cpc	r19, r21
    43f2:	48 f0       	brcs	.+18     	; 0x4406 <malloc+0x126>
    43f4:	4e 0f       	add	r20, r30
    43f6:	5f 1f       	adc	r21, r31
    43f8:	50 93 8b 02 	sts	0x028B, r21
    43fc:	40 93 8a 02 	sts	0x028A, r20
    4400:	81 93       	st	Z+, r24
    4402:	91 93       	st	Z+, r25
    4404:	02 c0       	rjmp	.+4      	; 0x440a <malloc+0x12a>
    4406:	e0 e0       	ldi	r30, 0x00	; 0
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	cf 01       	movw	r24, r30
    440c:	df 91       	pop	r29
    440e:	cf 91       	pop	r28
    4410:	1f 91       	pop	r17
    4412:	0f 91       	pop	r16
    4414:	08 95       	ret

00004416 <free>:
    4416:	ef 92       	push	r14
    4418:	ff 92       	push	r15
    441a:	0f 93       	push	r16
    441c:	1f 93       	push	r17
    441e:	cf 93       	push	r28
    4420:	df 93       	push	r29
    4422:	00 97       	sbiw	r24, 0x00	; 0
    4424:	09 f4       	brne	.+2      	; 0x4428 <free+0x12>
    4426:	8f c0       	rjmp	.+286    	; 0x4546 <free+0x130>
    4428:	dc 01       	movw	r26, r24
    442a:	12 97       	sbiw	r26, 0x02	; 2
    442c:	13 96       	adiw	r26, 0x03	; 3
    442e:	1c 92       	st	X, r1
    4430:	1e 92       	st	-X, r1
    4432:	12 97       	sbiw	r26, 0x02	; 2
    4434:	e0 90 8c 02 	lds	r14, 0x028C
    4438:	f0 90 8d 02 	lds	r15, 0x028D
    443c:	e1 14       	cp	r14, r1
    443e:	f1 04       	cpc	r15, r1
    4440:	89 f4       	brne	.+34     	; 0x4464 <free+0x4e>
    4442:	2d 91       	ld	r18, X+
    4444:	3c 91       	ld	r19, X
    4446:	11 97       	sbiw	r26, 0x01	; 1
    4448:	28 0f       	add	r18, r24
    444a:	39 1f       	adc	r19, r25
    444c:	80 91 8a 02 	lds	r24, 0x028A
    4450:	90 91 8b 02 	lds	r25, 0x028B
    4454:	82 17       	cp	r24, r18
    4456:	93 07       	cpc	r25, r19
    4458:	89 f5       	brne	.+98     	; 0x44bc <free+0xa6>
    445a:	b0 93 8b 02 	sts	0x028B, r27
    445e:	a0 93 8a 02 	sts	0x028A, r26
    4462:	71 c0       	rjmp	.+226    	; 0x4546 <free+0x130>
    4464:	e7 01       	movw	r28, r14
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	01 c0       	rjmp	.+2      	; 0x446e <free+0x58>
    446c:	ea 01       	movw	r28, r20
    446e:	ca 17       	cp	r28, r26
    4470:	db 07       	cpc	r29, r27
    4472:	38 f4       	brcc	.+14     	; 0x4482 <free+0x6c>
    4474:	4a 81       	ldd	r20, Y+2	; 0x02
    4476:	5b 81       	ldd	r21, Y+3	; 0x03
    4478:	9e 01       	movw	r18, r28
    447a:	41 15       	cp	r20, r1
    447c:	51 05       	cpc	r21, r1
    447e:	b1 f7       	brne	.-20     	; 0x446c <free+0x56>
    4480:	22 c0       	rjmp	.+68     	; 0x44c6 <free+0xb0>
    4482:	bc 01       	movw	r22, r24
    4484:	62 50       	subi	r22, 0x02	; 2
    4486:	71 09       	sbc	r23, r1
    4488:	fb 01       	movw	r30, r22
    448a:	d3 83       	std	Z+3, r29	; 0x03
    448c:	c2 83       	std	Z+2, r28	; 0x02
    448e:	00 81       	ld	r16, Z
    4490:	11 81       	ldd	r17, Z+1	; 0x01
    4492:	ac 01       	movw	r20, r24
    4494:	40 0f       	add	r20, r16
    4496:	51 1f       	adc	r21, r17
    4498:	4c 17       	cp	r20, r28
    449a:	5d 07       	cpc	r21, r29
    449c:	61 f4       	brne	.+24     	; 0x44b6 <free+0xa0>
    449e:	48 81       	ld	r20, Y
    44a0:	59 81       	ldd	r21, Y+1	; 0x01
    44a2:	40 0f       	add	r20, r16
    44a4:	51 1f       	adc	r21, r17
    44a6:	4e 5f       	subi	r20, 0xFE	; 254
    44a8:	5f 4f       	sbci	r21, 0xFF	; 255
    44aa:	51 83       	std	Z+1, r21	; 0x01
    44ac:	40 83       	st	Z, r20
    44ae:	4a 81       	ldd	r20, Y+2	; 0x02
    44b0:	5b 81       	ldd	r21, Y+3	; 0x03
    44b2:	53 83       	std	Z+3, r21	; 0x03
    44b4:	42 83       	std	Z+2, r20	; 0x02
    44b6:	21 15       	cp	r18, r1
    44b8:	31 05       	cpc	r19, r1
    44ba:	29 f4       	brne	.+10     	; 0x44c6 <free+0xb0>
    44bc:	b0 93 8d 02 	sts	0x028D, r27
    44c0:	a0 93 8c 02 	sts	0x028C, r26
    44c4:	40 c0       	rjmp	.+128    	; 0x4546 <free+0x130>
    44c6:	f9 01       	movw	r30, r18
    44c8:	b3 83       	std	Z+3, r27	; 0x03
    44ca:	a2 83       	std	Z+2, r26	; 0x02
    44cc:	e9 01       	movw	r28, r18
    44ce:	69 91       	ld	r22, Y+
    44d0:	79 91       	ld	r23, Y+
    44d2:	c6 0f       	add	r28, r22
    44d4:	d7 1f       	adc	r29, r23
    44d6:	ac 17       	cp	r26, r28
    44d8:	bd 07       	cpc	r27, r29
    44da:	79 f4       	brne	.+30     	; 0x44fa <free+0xe4>
    44dc:	dc 01       	movw	r26, r24
    44de:	5e 91       	ld	r21, -X
    44e0:	4e 91       	ld	r20, -X
    44e2:	46 0f       	add	r20, r22
    44e4:	57 1f       	adc	r21, r23
    44e6:	4e 5f       	subi	r20, 0xFE	; 254
    44e8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ea:	51 83       	std	Z+1, r21	; 0x01
    44ec:	40 83       	st	Z, r20
    44ee:	12 96       	adiw	r26, 0x02	; 2
    44f0:	8d 91       	ld	r24, X+
    44f2:	9c 91       	ld	r25, X
    44f4:	13 97       	sbiw	r26, 0x03	; 3
    44f6:	93 83       	std	Z+3, r25	; 0x03
    44f8:	82 83       	std	Z+2, r24	; 0x02
    44fa:	a0 e0       	ldi	r26, 0x00	; 0
    44fc:	b0 e0       	ldi	r27, 0x00	; 0
    44fe:	02 c0       	rjmp	.+4      	; 0x4504 <free+0xee>
    4500:	d7 01       	movw	r26, r14
    4502:	7c 01       	movw	r14, r24
    4504:	f7 01       	movw	r30, r14
    4506:	82 81       	ldd	r24, Z+2	; 0x02
    4508:	93 81       	ldd	r25, Z+3	; 0x03
    450a:	00 97       	sbiw	r24, 0x00	; 0
    450c:	c9 f7       	brne	.-14     	; 0x4500 <free+0xea>
    450e:	c7 01       	movw	r24, r14
    4510:	02 96       	adiw	r24, 0x02	; 2
    4512:	20 81       	ld	r18, Z
    4514:	31 81       	ldd	r19, Z+1	; 0x01
    4516:	82 0f       	add	r24, r18
    4518:	93 1f       	adc	r25, r19
    451a:	20 91 8a 02 	lds	r18, 0x028A
    451e:	30 91 8b 02 	lds	r19, 0x028B
    4522:	28 17       	cp	r18, r24
    4524:	39 07       	cpc	r19, r25
    4526:	79 f4       	brne	.+30     	; 0x4546 <free+0x130>
    4528:	10 97       	sbiw	r26, 0x00	; 0
    452a:	29 f4       	brne	.+10     	; 0x4536 <free+0x120>
    452c:	10 92 8d 02 	sts	0x028D, r1
    4530:	10 92 8c 02 	sts	0x028C, r1
    4534:	04 c0       	rjmp	.+8      	; 0x453e <free+0x128>
    4536:	13 96       	adiw	r26, 0x03	; 3
    4538:	1c 92       	st	X, r1
    453a:	1e 92       	st	-X, r1
    453c:	12 97       	sbiw	r26, 0x02	; 2
    453e:	f0 92 8b 02 	sts	0x028B, r15
    4542:	e0 92 8a 02 	sts	0x028A, r14
    4546:	df 91       	pop	r29
    4548:	cf 91       	pop	r28
    454a:	1f 91       	pop	r17
    454c:	0f 91       	pop	r16
    454e:	ff 90       	pop	r15
    4550:	ef 90       	pop	r14
    4552:	08 95       	ret

00004554 <memcpy>:
    4554:	fb 01       	movw	r30, r22
    4556:	dc 01       	movw	r26, r24
    4558:	02 c0       	rjmp	.+4      	; 0x455e <memcpy+0xa>
    455a:	01 90       	ld	r0, Z+
    455c:	0d 92       	st	X+, r0
    455e:	41 50       	subi	r20, 0x01	; 1
    4560:	50 40       	sbci	r21, 0x00	; 0
    4562:	d8 f7       	brcc	.-10     	; 0x455a <memcpy+0x6>
    4564:	08 95       	ret

00004566 <_exit>:
    4566:	f8 94       	cli

00004568 <__stop_program>:
    4568:	ff cf       	rjmp	.-2      	; 0x4568 <__stop_program>
