
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  00004322  000043b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800288  00800288  0000443e  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00004440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b77  00000000  00000000  00006dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000794b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000800  00000000  00000000  0000797a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008a6f  00000000  00000000  0000817a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002841  00000000  00000000  00010be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002111  00000000  00000000  0001342a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001c10  00000000  00000000  0001553c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003666  00000000  00000000  0001714c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004024  00000000  00000000  0001a7b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006a8  00000000  00000000  0001e7d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      68:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      6c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      7c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      80:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      84:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      88:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      90:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      94:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      98:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      ac:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	}
}
      b4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      bc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      cc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      dc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      e0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
      e8:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <_ZN10helicopter5tasks4Task4initEv>
      ec:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
      f0:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
      f4:	0c 94 a6 08 	jmp	0x114c	; 0x114c <_ZN10helicopter5tasks4TaskD1Ev>
      f8:	0c 94 85 14 	jmp	0x290a	; 0x290a <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
      fc:	0c 94 91 08 	jmp	0x1122	; 0x1122 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>
     100:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>
     104:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     108:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     10c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     110:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <_ZN10helicopter8messages7Message8getBytesEv>
     114:	0c 94 af 13 	jmp	0x275e	; 0x275e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     118:	0c 94 17 11 	jmp	0x222e	; 0x222e <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     11c:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_ZN10helicopter8messages7Message12buildMessageEPh>
     120:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     124:	0c 94 0f 08 	jmp	0x101e	; 0x101e <_ZN10helicopter7drivers11ServoDriverD0Ev>
     128:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>
     12c:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     130:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <_ZN10helicopter5tasks4Task7runTaskEv>
     134:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
     138:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
     13c:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     140:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <_ZN10helicopter5tasks4TaskD0Ev>
     144:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <_ZN10helicopter5tasks4Task11runTaskImplEv>
     148:	0c 94 33 07 	jmp	0xe66	; 0xe66 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>
     14c:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <_ZN10helicopter7drivers11ServoDriverD1Ev>
     150:	0c 94 0f 09 	jmp	0x121e	; 0x121e <_ZN10helicopter5tasks12FlashLEDTask4initEv>
     154:	0c 94 33 09 	jmp	0x1266	; 0x1266 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
     158:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <_ZN10helicopter8messages11SyncMessageD1Ev>
     15c:	0c 94 16 1a 	jmp	0x342c	; 0x342c <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>
     160:	0c 94 39 10 	jmp	0x2072	; 0x2072 <_ZN10helicopter8messages7MessageD1Ev>
     164:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <_ZN10helicopter8messages7MessageD0Ev>
     168:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
     16c:	0c 94 02 11 	jmp	0x2204	; 0x2204 <_ZN10helicopter8messages11SyncMessageD0Ev>
     170:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     174:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>
     178:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	12 e0       	ldi	r17, 0x02	; 2
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e2 e2       	ldi	r30, 0x22	; 34
     194:	f3 e4       	ldi	r31, 0x43	; 67
     196:	00 e0       	ldi	r16, 0x00	; 0
     198:	0b bf       	out	0x3b, r16	; 59
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x14>
     19c:	07 90       	elpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a8 38       	cpi	r26, 0x88	; 136
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x10>

000001a6 <__do_clear_bss>:
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	a8 e8       	ldi	r26, 0x88	; 136
     1aa:	b2 e0       	ldi	r27, 0x02	; 2
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	ae 38       	cpi	r26, 0x8E	; 142
     1b2:	b2 07       	cpc	r27, r18
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <main>
     1ba:	0c 94 8f 21 	jmp	0x431e	; 0x431e <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>:
	model->YawProportional((double) this->YawProportional / 100);
	model->YawDerivativeError((double) this->YawDerivativeError / 100);
	model->YawControl((double) this->YawControl / 100);
	model->Timeouts(this->Timeouts);
	model->UnrecognizedMsgTypes(this->UnrecognizedMsgTypes);
	model->ChecksumErrors(this->ChecksumErrors);
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	1f 92       	push	r1
     1c8:	1f 92       	push	r1
}
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	9a 83       	std	Y+2, r25	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	fc 01       	movw	r30, r24
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			

			double MagYawDegrees() const { return magYawDegrees; }
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	a2 81       	ldd	r26, Z+2	; 0x02
     1de:	b3 81       	ldd	r27, Z+3	; 0x03
     1e0:	bc 01       	movw	r22, r24
     1e2:	cd 01       	movw	r24, r26
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>:
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	1f 92       	push	r1
     1f4:	1f 92       	push	r1
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	9a 83       	std	Y+2, r25	; 0x02
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	fc 01       	movw	r30, r24
     204:	84 81       	ldd	r24, Z+4	; 0x04
     206:	95 81       	ldd	r25, Z+5	; 0x05
     208:	a6 81       	ldd	r26, Z+6	; 0x06
     20a:	b7 81       	ldd	r27, Z+7	; 0x07
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <_ZNK10helicopter5model11SystemModel10YawControlEv>:
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
				
				
			double YawControl() const {return yawControl;}
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	1f 92       	push	r1
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	fc 01       	movw	r30, r24
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	91 85       	ldd	r25, Z+9	; 0x09
     234:	a2 85       	ldd	r26, Z+10	; 0x0a
     236:	b3 85       	ldd	r27, Z+11	; 0x0b
     238:	bc 01       	movw	r22, r24
     23a:	cd 01       	movw	r24, r26
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <_ZN10helicopter5model11SystemModel10YawControlEd>:
			void YawControl(double val) { yawControl = val;}
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <_ZN10helicopter5model11SystemModel10YawControlEd+0x6>
     24c:	00 d0       	rcall	.+0      	; 0x24e <_ZN10helicopter5model11SystemModel10YawControlEd+0x8>
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	9a 83       	std	Y+2, r25	; 0x02
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	4b 83       	std	Y+3, r20	; 0x03
     258:	5c 83       	std	Y+4, r21	; 0x04
     25a:	6d 83       	std	Y+5, r22	; 0x05
     25c:	7e 83       	std	Y+6, r23	; 0x06
     25e:	29 81       	ldd	r18, Y+1	; 0x01
     260:	3a 81       	ldd	r19, Y+2	; 0x02
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	9c 81       	ldd	r25, Y+4	; 0x04
     266:	ad 81       	ldd	r26, Y+5	; 0x05
     268:	be 81       	ldd	r27, Y+6	; 0x06
     26a:	f9 01       	movw	r30, r18
     26c:	80 87       	std	Z+8, r24	; 0x08
     26e:	91 87       	std	Z+9, r25	; 0x09
     270:	a2 87       	std	Z+10, r26	; 0x0a
     272:	b3 87       	std	Z+11, r27	; 0x0b
     274:	26 96       	adiw	r28, 0x06	; 6
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	1f 92       	push	r1
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	84 85       	ldd	r24, Z+12	; 0x0c
     29e:	95 85       	ldd	r25, Z+13	; 0x0d
     2a0:	a6 85       	ldd	r26, Z+14	; 0x0e
     2a2:	b7 85       	ldd	r27, Z+15	; 0x0f
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>:
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x6>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x8>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	9a 83       	std	Y+2, r25	; 0x02
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	4b 83       	std	Y+3, r20	; 0x03
     2c4:	5c 83       	std	Y+4, r21	; 0x04
     2c6:	6d 83       	std	Y+5, r22	; 0x05
     2c8:	7e 83       	std	Y+6, r23	; 0x06
     2ca:	29 81       	ldd	r18, Y+1	; 0x01
     2cc:	3a 81       	ldd	r19, Y+2	; 0x02
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	ad 81       	ldd	r26, Y+5	; 0x05
     2d4:	be 81       	ldd	r27, Y+6	; 0x06
     2d6:	f9 01       	movw	r30, r18
     2d8:	84 87       	std	Z+12, r24	; 0x0c
     2da:	95 87       	std	Z+13, r25	; 0x0d
     2dc:	a6 87       	std	Z+14, r26	; 0x0e
     2de:	b7 87       	std	Z+15, r27	; 0x0f
     2e0:	26 96       	adiw	r28, 0x06	; 6
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	1f 92       	push	r1
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	fc 01       	movw	r30, r24
     308:	80 89       	ldd	r24, Z+16	; 0x10
     30a:	91 89       	ldd	r25, Z+17	; 0x11
     30c:	a2 89       	ldd	r26, Z+18	; 0x12
     30e:	b3 89       	ldd	r27, Z+19	; 0x13
     310:	bc 01       	movw	r22, r24
     312:	cd 01       	movw	r24, r26
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>:
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	1f 92       	push	r1
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	fc 01       	movw	r30, r24
     334:	84 89       	ldd	r24, Z+20	; 0x14
     336:	95 89       	ldd	r25, Z+21	; 0x15
     338:	a6 89       	ldd	r26, Z+22	; 0x16
     33a:	b7 89       	ldd	r27, Z+23	; 0x17
     33c:	bc 01       	movw	r22, r24
     33e:	cd 01       	movw	r24, r26
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	1f 92       	push	r1
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	fc 01       	movw	r30, r24
     360:	80 8d       	ldd	r24, Z+24	; 0x18
     362:	91 8d       	ldd	r25, Z+25	; 0x19
     364:	a2 8d       	ldd	r26, Z+26	; 0x1a
     366:	b3 8d       	ldd	r27, Z+27	; 0x1b
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <_ZN10helicopter5model11SystemModel11YawIntegralEd>:
			void YawIntegral(double val) { yawIntegral = val;}
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	4b 83       	std	Y+3, r20	; 0x03
     388:	5c 83       	std	Y+4, r21	; 0x04
     38a:	6d 83       	std	Y+5, r22	; 0x05
     38c:	7e 83       	std	Y+6, r23	; 0x06
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	3a 81       	ldd	r19, Y+2	; 0x02
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	ad 81       	ldd	r26, Y+5	; 0x05
     398:	be 81       	ldd	r27, Y+6	; 0x06
     39a:	f9 01       	movw	r30, r18
     39c:	80 8f       	std	Z+24, r24	; 0x18
     39e:	91 8f       	std	Z+25, r25	; 0x19
     3a0:	a2 8f       	std	Z+26, r26	; 0x1a
     3a2:	b3 8f       	std	Z+27, r27	; 0x1b
     3a4:	26 96       	adiw	r28, 0x06	; 6
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <_ZN10helicopter5model11SystemModel15YawProportionalEd>:

			double YawProportional() const {return yawProportional;}
			void YawProportional(double val) { yawProportional = val;}
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x6>
     3bc:	00 d0       	rcall	.+0      	; 0x3be <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x8>
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	4b 83       	std	Y+3, r20	; 0x03
     3c8:	5c 83       	std	Y+4, r21	; 0x04
     3ca:	6d 83       	std	Y+5, r22	; 0x05
     3cc:	7e 83       	std	Y+6, r23	; 0x06
     3ce:	29 81       	ldd	r18, Y+1	; 0x01
     3d0:	3a 81       	ldd	r19, Y+2	; 0x02
     3d2:	8b 81       	ldd	r24, Y+3	; 0x03
     3d4:	9c 81       	ldd	r25, Y+4	; 0x04
     3d6:	ad 81       	ldd	r26, Y+5	; 0x05
     3d8:	be 81       	ldd	r27, Y+6	; 0x06
     3da:	f9 01       	movw	r30, r18
     3dc:	84 8f       	std	Z+28, r24	; 0x1c
     3de:	95 8f       	std	Z+29, r25	; 0x1d
     3e0:	a6 8f       	std	Z+30, r26	; 0x1e
     3e2:	b7 8f       	std	Z+31, r27	; 0x1f
     3e4:	26 96       	adiw	r28, 0x06	; 6
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>:

			double YawDerivativeError() const {return yawDerivativeError;}
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x6>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x8>
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
     406:	4b 83       	std	Y+3, r20	; 0x03
     408:	5c 83       	std	Y+4, r21	; 0x04
     40a:	6d 83       	std	Y+5, r22	; 0x05
     40c:	7e 83       	std	Y+6, r23	; 0x06
     40e:	29 81       	ldd	r18, Y+1	; 0x01
     410:	3a 81       	ldd	r19, Y+2	; 0x02
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	ad 81       	ldd	r26, Y+5	; 0x05
     418:	be 81       	ldd	r27, Y+6	; 0x06
     41a:	f9 01       	movw	r30, r18
     41c:	80 a3       	std	Z+32, r24	; 0x20
     41e:	91 a3       	std	Z+33, r25	; 0x21
     420:	a2 a3       	std	Z+34, r26	; 0x22
     422:	b3 a3       	std	Z+35, r27	; 0x23
     424:	26 96       	adiw	r28, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>:

#include "PIDController.h"

using namespace helicopter::controller;

PIDController::PIDController(SystemModel *model, ServoDriver *servoDriver): 
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	00 d0       	rcall	.+0      	; 0x43c <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x6>
     43c:	00 d0       	rcall	.+0      	; 0x43e <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x8>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	9a 83       	std	Y+2, r25	; 0x02
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	7c 83       	std	Y+4, r23	; 0x04
     448:	6b 83       	std	Y+3, r22	; 0x03
     44a:	5e 83       	std	Y+6, r21	; 0x06
     44c:	4d 83       	std	Y+5, r20	; 0x05
minYawServoControlValue(0),
maxYawServoControlValue(0),
yawServoTrim(0),
intervalPeriodSecs(0),
controlMaxValue(0),
controlMinValue(0)
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	2b 81       	ldd	r18, Y+3	; 0x03
     454:	3c 81       	ldd	r19, Y+4	; 0x04
     456:	fc 01       	movw	r30, r24
     458:	31 83       	std	Z+1, r19	; 0x01
     45a:	20 83       	st	Z, r18
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	2d 81       	ldd	r18, Y+5	; 0x05
     462:	3e 81       	ldd	r19, Y+6	; 0x06
     464:	fc 01       	movw	r30, r24
     466:	33 83       	std	Z+3, r19	; 0x03
     468:	22 83       	std	Z+2, r18	; 0x02
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	fc 01       	movw	r30, r24
     470:	14 82       	std	Z+4, r1	; 0x04
     472:	15 82       	std	Z+5, r1	; 0x05
     474:	16 82       	std	Z+6, r1	; 0x06
     476:	17 82       	std	Z+7, r1	; 0x07
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	fc 01       	movw	r30, r24
     47e:	10 86       	std	Z+8, r1	; 0x08
     480:	11 86       	std	Z+9, r1	; 0x09
     482:	12 86       	std	Z+10, r1	; 0x0a
     484:	13 86       	std	Z+11, r1	; 0x0b
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	fc 01       	movw	r30, r24
     48c:	14 86       	std	Z+12, r1	; 0x0c
     48e:	15 86       	std	Z+13, r1	; 0x0d
     490:	16 86       	std	Z+14, r1	; 0x0e
     492:	17 86       	std	Z+15, r1	; 0x0f
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	fc 01       	movw	r30, r24
     49a:	10 8a       	std	Z+16, r1	; 0x10
     49c:	11 8a       	std	Z+17, r1	; 0x11
     49e:	12 8a       	std	Z+18, r1	; 0x12
     4a0:	13 8a       	std	Z+19, r1	; 0x13
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	fc 01       	movw	r30, r24
     4a8:	14 8a       	std	Z+20, r1	; 0x14
     4aa:	15 8a       	std	Z+21, r1	; 0x15
     4ac:	16 8a       	std	Z+22, r1	; 0x16
     4ae:	17 8a       	std	Z+23, r1	; 0x17
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	fc 01       	movw	r30, r24
     4b6:	10 8e       	std	Z+24, r1	; 0x18
     4b8:	11 8e       	std	Z+25, r1	; 0x19
     4ba:	12 8e       	std	Z+26, r1	; 0x1a
     4bc:	13 8e       	std	Z+27, r1	; 0x1b
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
     4c2:	fc 01       	movw	r30, r24
     4c4:	14 8e       	std	Z+28, r1	; 0x1c
     4c6:	15 8e       	std	Z+29, r1	; 0x1d
     4c8:	16 8e       	std	Z+30, r1	; 0x1e
     4ca:	17 8e       	std	Z+31, r1	; 0x1f
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	9a 81       	ldd	r25, Y+2	; 0x02
     4d0:	fc 01       	movw	r30, r24
     4d2:	10 a2       	std	Z+32, r1	; 0x20
     4d4:	11 a2       	std	Z+33, r1	; 0x21
     4d6:	12 a2       	std	Z+34, r1	; 0x22
     4d8:	13 a2       	std	Z+35, r1	; 0x23
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	fc 01       	movw	r30, r24
     4e0:	14 a2       	std	Z+36, r1	; 0x24
     4e2:	15 a2       	std	Z+37, r1	; 0x25
     4e4:	16 a2       	std	Z+38, r1	; 0x26
     4e6:	17 a2       	std	Z+39, r1	; 0x27
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	fc 01       	movw	r30, r24
     4ee:	10 a6       	std	Z+40, r1	; 0x28
     4f0:	11 a6       	std	Z+41, r1	; 0x29
     4f2:	12 a6       	std	Z+42, r1	; 0x2a
     4f4:	13 a6       	std	Z+43, r1	; 0x2b
{
	
}
     4f6:	26 96       	adiw	r28, 0x06	; 6
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>:
	delete model;
}

//TODO refactor to make this common for all PID calculations
double PIDController::calculateYawProportional(double currentYawDegrees, double referenceYawDegrees)
{
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	2e 97       	sbiw	r28, 0x0e	; 14
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	9e 83       	std	Y+6, r25	; 0x06
     522:	8d 83       	std	Y+5, r24	; 0x05
     524:	4f 83       	std	Y+7, r20	; 0x07
     526:	58 87       	std	Y+8, r21	; 0x08
     528:	69 87       	std	Y+9, r22	; 0x09
     52a:	7a 87       	std	Y+10, r23	; 0x0a
     52c:	0b 87       	std	Y+11, r16	; 0x0b
     52e:	1c 87       	std	Y+12, r17	; 0x0c
     530:	2d 87       	std	Y+13, r18	; 0x0d
     532:	3e 87       	std	Y+14, r19	; 0x0e
	double yawError = currentYawDegrees - referenceYawDegrees;
     534:	2b 85       	ldd	r18, Y+11	; 0x0b
     536:	3c 85       	ldd	r19, Y+12	; 0x0c
     538:	4d 85       	ldd	r20, Y+13	; 0x0d
     53a:	5e 85       	ldd	r21, Y+14	; 0x0e
     53c:	6f 81       	ldd	r22, Y+7	; 0x07
     53e:	78 85       	ldd	r23, Y+8	; 0x08
     540:	89 85       	ldd	r24, Y+9	; 0x09
     542:	9a 85       	ldd	r25, Y+10	; 0x0a
     544:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__subsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	89 83       	std	Y+1, r24	; 0x01
     54e:	9a 83       	std	Y+2, r25	; 0x02
     550:	ab 83       	std	Y+3, r26	; 0x03
     552:	bc 83       	std	Y+4, r27	; 0x04
	
	if (yawError >= 180)
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	44 e3       	ldi	r20, 0x34	; 52
     55a:	53 e4       	ldi	r21, 0x43	; 67
     55c:	69 81       	ldd	r22, Y+1	; 0x01
     55e:	7a 81       	ldd	r23, Y+2	; 0x02
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__gesf2>
     568:	88 23       	and	r24, r24
     56a:	8c f0       	brlt	.+34     	; 0x58e <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0x86>
	{
		yawError = yawError - 360;
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	44 eb       	ldi	r20, 0xB4	; 180
     572:	53 e4       	ldi	r21, 0x43	; 67
     574:	69 81       	ldd	r22, Y+1	; 0x01
     576:	7a 81       	ldd	r23, Y+2	; 0x02
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__subsf3>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	ab 83       	std	Y+3, r26	; 0x03
     58a:	bc 83       	std	Y+4, r27	; 0x04
     58c:	1c c0       	rjmp	.+56     	; 0x5c6 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	}
	else if (yawError < -180)
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	44 e3       	ldi	r20, 0x34	; 52
     594:	53 ec       	ldi	r21, 0xC3	; 195
     596:	69 81       	ldd	r22, Y+1	; 0x01
     598:	7a 81       	ldd	r23, Y+2	; 0x02
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	9c 81       	ldd	r25, Y+4	; 0x04
     59e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	84 f4       	brge	.+32     	; 0x5c6 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	{
		yawError = yawError + 360;
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	44 eb       	ldi	r20, 0xB4	; 180
     5ac:	53 e4       	ldi	r21, 0x43	; 67
     5ae:	69 81       	ldd	r22, Y+1	; 0x01
     5b0:	7a 81       	ldd	r23, Y+2	; 0x02
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	9c 81       	ldd	r25, Y+4	; 0x04
     5b6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__addsf3>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	89 83       	std	Y+1, r24	; 0x01
     5c0:	9a 83       	std	Y+2, r25	; 0x02
     5c2:	ab 83       	std	Y+3, r26	; 0x03
     5c4:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return yawError;
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	ab 81       	ldd	r26, Y+3	; 0x03
     5cc:	bc 81       	ldd	r27, Y+4	; 0x04
}
     5ce:	bc 01       	movw	r22, r24
     5d0:	cd 01       	movw	r24, r26
     5d2:	2e 96       	adiw	r28, 0x0e	; 14
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEdd>:


//TODO refactor to make this common for all PID calculations. I'll want to include the specific
//variables max values as parameters so I can 'generalize' it.
double PIDController::calculateYawIntegralAntiWindup(double oldYawControlPreServoAdj, double oldYawControl)
{
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	2e 97       	sbiw	r28, 0x0e	; 14
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	9e 83       	std	Y+6, r25	; 0x06
     60a:	8d 83       	std	Y+5, r24	; 0x05
     60c:	4f 83       	std	Y+7, r20	; 0x07
     60e:	58 87       	std	Y+8, r21	; 0x08
     610:	69 87       	std	Y+9, r22	; 0x09
     612:	7a 87       	std	Y+10, r23	; 0x0a
     614:	0b 87       	std	Y+11, r16	; 0x0b
     616:	1c 87       	std	Y+12, r17	; 0x0c
     618:	2d 87       	std	Y+13, r18	; 0x0d
     61a:	3e 87       	std	Y+14, r19	; 0x0e
	double antiWindup = 0;
     61c:	19 82       	std	Y+1, r1	; 0x01
     61e:	1a 82       	std	Y+2, r1	; 0x02
     620:	1b 82       	std	Y+3, r1	; 0x03
     622:	1c 82       	std	Y+4, r1	; 0x04
	
	antiWindup = yawAntiWindupGain * (oldYawControlPreServoAdj - oldYawControl);
     624:	8d 81       	ldd	r24, Y+5	; 0x05
     626:	9e 81       	ldd	r25, Y+6	; 0x06
     628:	fc 01       	movw	r30, r24
     62a:	c0 88       	ldd	r12, Z+16	; 0x10
     62c:	d1 88       	ldd	r13, Z+17	; 0x11
     62e:	e2 88       	ldd	r14, Z+18	; 0x12
     630:	f3 88       	ldd	r15, Z+19	; 0x13
     632:	2b 85       	ldd	r18, Y+11	; 0x0b
     634:	3c 85       	ldd	r19, Y+12	; 0x0c
     636:	4d 85       	ldd	r20, Y+13	; 0x0d
     638:	5e 85       	ldd	r21, Y+14	; 0x0e
     63a:	6f 81       	ldd	r22, Y+7	; 0x07
     63c:	78 85       	ldd	r23, Y+8	; 0x08
     63e:	89 85       	ldd	r24, Y+9	; 0x09
     640:	9a 85       	ldd	r25, Y+10	; 0x0a
     642:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__subsf3>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	9c 01       	movw	r18, r24
     64c:	ad 01       	movw	r20, r26
     64e:	c7 01       	movw	r24, r14
     650:	b6 01       	movw	r22, r12
     652:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	89 83       	std	Y+1, r24	; 0x01
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	ab 83       	std	Y+3, r26	; 0x03
     660:	bc 83       	std	Y+4, r27	; 0x04
	{
		antiWindup = yawAntiWindupGain * (oldYawControlValue - minYawServoControlValue);
	}
	*/
	
	return antiWindup;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	ab 81       	ldd	r26, Y+3	; 0x03
     668:	bc 81       	ldd	r27, Y+4	; 0x04
}
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	2e 96       	adiw	r28, 0x0e	; 14
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	08 95       	ret

0000068c <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>:

/**
 * Anti-windup algorithm provided by Control Systems Design by Karl Johan Astrom 2002. chapter 6
 */
double PIDController::calculateYawIntegral(double yawProportionalDegrees, double oldYawIntegral, double yawAntiWindup)
{
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	62 97       	sbiw	r28, 0x12	; 18
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	9e 83       	std	Y+6, r25	; 0x06
     6ae:	8d 83       	std	Y+5, r24	; 0x05
     6b0:	4f 83       	std	Y+7, r20	; 0x07
     6b2:	58 87       	std	Y+8, r21	; 0x08
     6b4:	69 87       	std	Y+9, r22	; 0x09
     6b6:	7a 87       	std	Y+10, r23	; 0x0a
     6b8:	0b 87       	std	Y+11, r16	; 0x0b
     6ba:	1c 87       	std	Y+12, r17	; 0x0c
     6bc:	2d 87       	std	Y+13, r18	; 0x0d
     6be:	3e 87       	std	Y+14, r19	; 0x0e
     6c0:	cf 86       	std	Y+15, r12	; 0x0f
     6c2:	d8 8a       	std	Y+16, r13	; 0x10
     6c4:	e9 8a       	std	Y+17, r14	; 0x11
     6c6:	fa 8a       	std	Y+18, r15	; 0x12
	
	double workingIntegral = 0;
     6c8:	19 82       	std	Y+1, r1	; 0x01
     6ca:	1a 82       	std	Y+2, r1	; 0x02
     6cc:	1b 82       	std	Y+3, r1	; 0x03
     6ce:	1c 82       	std	Y+4, r1	; 0x04
	
	workingIntegral = yawProportionalDegrees * intervalPeriodSecs * yawIntegralGain;
     6d0:	8d 81       	ldd	r24, Y+5	; 0x05
     6d2:	9e 81       	ldd	r25, Y+6	; 0x06
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 a1       	ldd	r24, Z+32	; 0x20
     6d8:	91 a1       	ldd	r25, Z+33	; 0x21
     6da:	a2 a1       	ldd	r26, Z+34	; 0x22
     6dc:	b3 a1       	ldd	r27, Z+35	; 0x23
     6de:	2f 81       	ldd	r18, Y+7	; 0x07
     6e0:	38 85       	ldd	r19, Y+8	; 0x08
     6e2:	49 85       	ldd	r20, Y+9	; 0x09
     6e4:	5a 85       	ldd	r21, Y+10	; 0x0a
     6e6:	bc 01       	movw	r22, r24
     6e8:	cd 01       	movw	r24, r26
     6ea:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	2d 81       	ldd	r18, Y+5	; 0x05
     6f4:	3e 81       	ldd	r19, Y+6	; 0x06
     6f6:	f9 01       	movw	r30, r18
     6f8:	24 81       	ldd	r18, Z+4	; 0x04
     6fa:	35 81       	ldd	r19, Z+5	; 0x05
     6fc:	46 81       	ldd	r20, Z+6	; 0x06
     6fe:	57 81       	ldd	r21, Z+7	; 0x07
     700:	bc 01       	movw	r22, r24
     702:	cd 01       	movw	r24, r26
     704:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	89 83       	std	Y+1, r24	; 0x01
     70e:	9a 83       	std	Y+2, r25	; 0x02
     710:	ab 83       	std	Y+3, r26	; 0x03
     712:	bc 83       	std	Y+4, r27	; 0x04
	//Integrate (i.e. sum this working value with the current integral value).
	//Note: i'm going out of order from what is defined in the book referenced above.
	//I am summing before subtracting the antiwindup value to make it easier.
	//I also find it odd that the integral 'gain' is being applied before 
	//accounting for the anti-windup. But this could be to compensate for large errors.
	workingIntegral = workingIntegral + oldYawIntegral;
     714:	2b 85       	ldd	r18, Y+11	; 0x0b
     716:	3c 85       	ldd	r19, Y+12	; 0x0c
     718:	4d 85       	ldd	r20, Y+13	; 0x0d
     71a:	5e 85       	ldd	r21, Y+14	; 0x0e
     71c:	69 81       	ldd	r22, Y+1	; 0x01
     71e:	7a 81       	ldd	r23, Y+2	; 0x02
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__addsf3>
     728:	dc 01       	movw	r26, r24
     72a:	cb 01       	movw	r24, r22
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	ab 83       	std	Y+3, r26	; 0x03
     732:	bc 83       	std	Y+4, r27	; 0x04
	
	if (yawAntiWindup != 0)
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	a9 01       	movw	r20, r18
     73a:	6f 85       	ldd	r22, Y+15	; 0x0f
     73c:	78 89       	ldd	r23, Y+16	; 0x10
     73e:	89 89       	ldd	r24, Y+17	; 0x11
     740:	9a 89       	ldd	r25, Y+18	; 0x12
     742:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__cmpsf2>
     746:	88 23       	and	r24, r24
     748:	09 f4       	brne	.+2      	; 0x74c <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xc0>
     74a:	52 c0       	rjmp	.+164    	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x164>
	{
		//We want to know if the integral is greater than 0 or less than 0 so that when we subtract
		//the antiwindup value, we get closer to 0, and don't exceed 0.
		if (workingIntegral > 0 && yawAntiWindup > workingIntegral)
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	a9 01       	movw	r20, r18
     752:	69 81       	ldd	r22, Y+1	; 0x01
     754:	7a 81       	ldd	r23, Y+2	; 0x02
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	9c 81       	ldd	r25, Y+4	; 0x04
     75a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__gesf2>
     75e:	18 16       	cp	r1, r24
     760:	8c f4       	brge	.+34     	; 0x784 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xf8>
     762:	29 81       	ldd	r18, Y+1	; 0x01
     764:	3a 81       	ldd	r19, Y+2	; 0x02
     766:	4b 81       	ldd	r20, Y+3	; 0x03
     768:	5c 81       	ldd	r21, Y+4	; 0x04
     76a:	6f 85       	ldd	r22, Y+15	; 0x0f
     76c:	78 89       	ldd	r23, Y+16	; 0x10
     76e:	89 89       	ldd	r24, Y+17	; 0x11
     770:	9a 89       	ldd	r25, Y+18	; 0x12
     772:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__gesf2>
     776:	18 16       	cp	r1, r24
     778:	2c f4       	brge	.+10     	; 0x784 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xf8>
		{
			workingIntegral = 0;
     77a:	19 82       	std	Y+1, r1	; 0x01
     77c:	1a 82       	std	Y+2, r1	; 0x02
     77e:	1b 82       	std	Y+3, r1	; 0x03
     780:	1c 82       	std	Y+4, r1	; 0x04
     782:	1b c0       	rjmp	.+54     	; 0x7ba <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
		}else if (workingIntegral < 0 && yawAntiWindup < workingIntegral)
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	a9 01       	movw	r20, r18
     78a:	69 81       	ldd	r22, Y+1	; 0x01
     78c:	7a 81       	ldd	r23, Y+2	; 0x02
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	9c 81       	ldd	r25, Y+4	; 0x04
     792:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__cmpsf2>
     796:	88 23       	and	r24, r24
     798:	84 f4       	brge	.+32     	; 0x7ba <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
     79a:	29 81       	ldd	r18, Y+1	; 0x01
     79c:	3a 81       	ldd	r19, Y+2	; 0x02
     79e:	4b 81       	ldd	r20, Y+3	; 0x03
     7a0:	5c 81       	ldd	r21, Y+4	; 0x04
     7a2:	6f 85       	ldd	r22, Y+15	; 0x0f
     7a4:	78 89       	ldd	r23, Y+16	; 0x10
     7a6:	89 89       	ldd	r24, Y+17	; 0x11
     7a8:	9a 89       	ldd	r25, Y+18	; 0x12
     7aa:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__cmpsf2>
     7ae:	88 23       	and	r24, r24
     7b0:	24 f4       	brge	.+8      	; 0x7ba <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x12e>
		{
			workingIntegral = 0;
     7b2:	19 82       	std	Y+1, r1	; 0x01
     7b4:	1a 82       	std	Y+2, r1	; 0x02
     7b6:	1b 82       	std	Y+3, r1	; 0x03
     7b8:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		if (workingIntegral != 0)
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	a9 01       	movw	r20, r18
     7c0:	69 81       	ldd	r22, Y+1	; 0x01
     7c2:	7a 81       	ldd	r23, Y+2	; 0x02
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	9c 81       	ldd	r25, Y+4	; 0x04
     7c8:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__cmpsf2>
     7cc:	88 23       	and	r24, r24
     7ce:	81 f0       	breq	.+32     	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x164>
		{
				//Subtract the anti-windup value from the working integral. 
			workingIntegral = workingIntegral - yawAntiWindup;
     7d0:	2f 85       	ldd	r18, Y+15	; 0x0f
     7d2:	38 89       	ldd	r19, Y+16	; 0x10
     7d4:	49 89       	ldd	r20, Y+17	; 0x11
     7d6:	5a 89       	ldd	r21, Y+18	; 0x12
     7d8:	69 81       	ldd	r22, Y+1	; 0x01
     7da:	7a 81       	ldd	r23, Y+2	; 0x02
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	9c 81       	ldd	r25, Y+4	; 0x04
     7e0:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__subsf3>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	9a 83       	std	Y+2, r25	; 0x02
     7ec:	ab 83       	std	Y+3, r26	; 0x03
     7ee:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	
	return workingIntegral;
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	ab 81       	ldd	r26, Y+3	; 0x03
     7f6:	bc 81       	ldd	r27, Y+4	; 0x04
}
     7f8:	bc 01       	movw	r22, r24
     7fa:	cd 01       	movw	r24, r26
     7fc:	62 96       	adiw	r28, 0x12	; 18
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	08 95       	ret

0000081a <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>:
	//return integral;
//}


double PIDController::calculateYawVelocityError(double yawVelocityDegreesPerSecond, double referenceYawVelocityDegreesPerSecond)
{
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	2a 97       	sbiw	r28, 0x0a	; 10
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	cd bf       	out	0x3d, r28	; 61
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	4b 83       	std	Y+3, r20	; 0x03
     838:	5c 83       	std	Y+4, r21	; 0x04
     83a:	6d 83       	std	Y+5, r22	; 0x05
     83c:	7e 83       	std	Y+6, r23	; 0x06
     83e:	0f 83       	std	Y+7, r16	; 0x07
     840:	18 87       	std	Y+8, r17	; 0x08
     842:	29 87       	std	Y+9, r18	; 0x09
     844:	3a 87       	std	Y+10, r19	; 0x0a
	return yawVelocityDegreesPerSecond - referenceYawVelocityDegreesPerSecond;
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	49 85       	ldd	r20, Y+9	; 0x09
     84c:	5a 85       	ldd	r21, Y+10	; 0x0a
     84e:	6b 81       	ldd	r22, Y+3	; 0x03
     850:	7c 81       	ldd	r23, Y+4	; 0x04
     852:	8d 81       	ldd	r24, Y+5	; 0x05
     854:	9e 81       	ldd	r25, Y+6	; 0x06
     856:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__subsf3>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
}
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	2a 96       	adiw	r28, 0x0a	; 10
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>:

double PIDController::calculateYawControlValue(double yawProportionalDegrees, double yawVelocityErrorDegreesPerSecond, double yawIntegral)
{
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	62 97       	sbiw	r28, 0x12	; 18
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	9e 83       	std	Y+6, r25	; 0x06
     89a:	8d 83       	std	Y+5, r24	; 0x05
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	69 87       	std	Y+9, r22	; 0x09
     8a2:	7a 87       	std	Y+10, r23	; 0x0a
     8a4:	0b 87       	std	Y+11, r16	; 0x0b
     8a6:	1c 87       	std	Y+12, r17	; 0x0c
     8a8:	2d 87       	std	Y+13, r18	; 0x0d
     8aa:	3e 87       	std	Y+14, r19	; 0x0e
     8ac:	cf 86       	std	Y+15, r12	; 0x0f
     8ae:	d8 8a       	std	Y+16, r13	; 0x10
     8b0:	e9 8a       	std	Y+17, r14	; 0x11
     8b2:	fa 8a       	std	Y+18, r15	; 0x12
	double controlValue = 0;
     8b4:	19 82       	std	Y+1, r1	; 0x01
     8b6:	1a 82       	std	Y+2, r1	; 0x02
     8b8:	1b 82       	std	Y+3, r1	; 0x03
     8ba:	1c 82       	std	Y+4, r1	; 0x04
	
	controlValue = yawIntegral  + yawProportionalDegrees * yawProportionalGain + yawVelocityErrorDegreesPerSecond * yawDerivativeGain;
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	9e 81       	ldd	r25, Y+6	; 0x06
     8c0:	fc 01       	movw	r30, r24
     8c2:	84 85       	ldd	r24, Z+12	; 0x0c
     8c4:	95 85       	ldd	r25, Z+13	; 0x0d
     8c6:	a6 85       	ldd	r26, Z+14	; 0x0e
     8c8:	b7 85       	ldd	r27, Z+15	; 0x0f
     8ca:	2f 81       	ldd	r18, Y+7	; 0x07
     8cc:	38 85       	ldd	r19, Y+8	; 0x08
     8ce:	49 85       	ldd	r20, Y+9	; 0x09
     8d0:	5a 85       	ldd	r21, Y+10	; 0x0a
     8d2:	bc 01       	movw	r22, r24
     8d4:	cd 01       	movw	r24, r26
     8d6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	2f 85       	ldd	r18, Y+15	; 0x0f
     8e0:	38 89       	ldd	r19, Y+16	; 0x10
     8e2:	49 89       	ldd	r20, Y+17	; 0x11
     8e4:	5a 89       	ldd	r21, Y+18	; 0x12
     8e6:	bc 01       	movw	r22, r24
     8e8:	cd 01       	movw	r24, r26
     8ea:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__addsf3>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	6c 01       	movw	r12, r24
     8f4:	7d 01       	movw	r14, r26
     8f6:	8d 81       	ldd	r24, Y+5	; 0x05
     8f8:	9e 81       	ldd	r25, Y+6	; 0x06
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 85       	ldd	r24, Z+8	; 0x08
     8fe:	91 85       	ldd	r25, Z+9	; 0x09
     900:	a2 85       	ldd	r26, Z+10	; 0x0a
     902:	b3 85       	ldd	r27, Z+11	; 0x0b
     904:	2b 85       	ldd	r18, Y+11	; 0x0b
     906:	3c 85       	ldd	r19, Y+12	; 0x0c
     908:	4d 85       	ldd	r20, Y+13	; 0x0d
     90a:	5e 85       	ldd	r21, Y+14	; 0x0e
     90c:	bc 01       	movw	r22, r24
     90e:	cd 01       	movw	r24, r26
     910:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	9c 01       	movw	r18, r24
     91a:	ad 01       	movw	r20, r26
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__addsf3>
     924:	dc 01       	movw	r26, r24
     926:	cb 01       	movw	r24, r22
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	ab 83       	std	Y+3, r26	; 0x03
     92e:	bc 83       	std	Y+4, r27	; 0x04
	{
		controlValue = controlMinValue;
	}
	*/
	
	return controlValue;
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	ab 81       	ldd	r26, Y+3	; 0x03
     936:	bc 81       	ldd	r27, Y+4	; 0x04
}
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	62 96       	adiw	r28, 0x12	; 18
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	08 95       	ret

0000095a <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>:


double PIDController::adjustControlForServoLimits( double controlValueToAdjust )
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	2a 97       	sbiw	r28, 0x0a	; 10
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	9e 83       	std	Y+6, r25	; 0x06
     970:	8d 83       	std	Y+5, r24	; 0x05
     972:	4f 83       	std	Y+7, r20	; 0x07
     974:	58 87       	std	Y+8, r21	; 0x08
     976:	69 87       	std	Y+9, r22	; 0x09
     978:	7a 87       	std	Y+10, r23	; 0x0a
	double controlValue = controlValueToAdjust;
     97a:	8f 81       	ldd	r24, Y+7	; 0x07
     97c:	98 85       	ldd	r25, Y+8	; 0x08
     97e:	a9 85       	ldd	r26, Y+9	; 0x09
     980:	ba 85       	ldd	r27, Y+10	; 0x0a
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	ab 83       	std	Y+3, r26	; 0x03
     988:	bc 83       	std	Y+4, r27	; 0x04
	
	//TODO: when generalizing ensure to change this value. 
	controlValue += yawServoTrim;
     98a:	8d 81       	ldd	r24, Y+5	; 0x05
     98c:	9e 81       	ldd	r25, Y+6	; 0x06
     98e:	fc 01       	movw	r30, r24
     990:	84 8d       	ldd	r24, Z+28	; 0x1c
     992:	95 8d       	ldd	r25, Z+29	; 0x1d
     994:	a6 8d       	ldd	r26, Z+30	; 0x1e
     996:	b7 8d       	ldd	r27, Z+31	; 0x1f
     998:	9c 01       	movw	r18, r24
     99a:	ad 01       	movw	r20, r26
     99c:	69 81       	ldd	r22, Y+1	; 0x01
     99e:	7a 81       	ldd	r23, Y+2	; 0x02
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	9c 81       	ldd	r25, Y+4	; 0x04
     9a4:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__addsf3>
     9a8:	dc 01       	movw	r26, r24
     9aa:	cb 01       	movw	r24, r22
     9ac:	89 83       	std	Y+1, r24	; 0x01
     9ae:	9a 83       	std	Y+2, r25	; 0x02
     9b0:	ab 83       	std	Y+3, r26	; 0x03
     9b2:	bc 83       	std	Y+4, r27	; 0x04
	
	if (controlValue > maxYawServoControlValue)
     9b4:	8d 81       	ldd	r24, Y+5	; 0x05
     9b6:	9e 81       	ldd	r25, Y+6	; 0x06
     9b8:	fc 01       	movw	r30, r24
     9ba:	80 8d       	ldd	r24, Z+24	; 0x18
     9bc:	91 8d       	ldd	r25, Z+25	; 0x19
     9be:	a2 8d       	ldd	r26, Z+26	; 0x1a
     9c0:	b3 8d       	ldd	r27, Z+27	; 0x1b
     9c2:	29 81       	ldd	r18, Y+1	; 0x01
     9c4:	3a 81       	ldd	r19, Y+2	; 0x02
     9c6:	4b 81       	ldd	r20, Y+3	; 0x03
     9c8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ca:	bc 01       	movw	r22, r24
     9cc:	cd 01       	movw	r24, r26
     9ce:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__cmpsf2>
     9d2:	88 23       	and	r24, r24
     9d4:	64 f4       	brge	.+24     	; 0x9ee <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0x94>
	{
		controlValue = maxYawServoControlValue;
     9d6:	8d 81       	ldd	r24, Y+5	; 0x05
     9d8:	9e 81       	ldd	r25, Y+6	; 0x06
     9da:	fc 01       	movw	r30, r24
     9dc:	80 8d       	ldd	r24, Z+24	; 0x18
     9de:	91 8d       	ldd	r25, Z+25	; 0x19
     9e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
     9e2:	b3 8d       	ldd	r27, Z+27	; 0x1b
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	9a 83       	std	Y+2, r25	; 0x02
     9e8:	ab 83       	std	Y+3, r26	; 0x03
     9ea:	bc 83       	std	Y+4, r27	; 0x04
     9ec:	1c c0       	rjmp	.+56     	; 0xa26 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	}else if (controlValue < minYawServoControlValue)
     9ee:	8d 81       	ldd	r24, Y+5	; 0x05
     9f0:	9e 81       	ldd	r25, Y+6	; 0x06
     9f2:	fc 01       	movw	r30, r24
     9f4:	84 89       	ldd	r24, Z+20	; 0x14
     9f6:	95 89       	ldd	r25, Z+21	; 0x15
     9f8:	a6 89       	ldd	r26, Z+22	; 0x16
     9fa:	b7 89       	ldd	r27, Z+23	; 0x17
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	3a 81       	ldd	r19, Y+2	; 0x02
     a00:	4b 81       	ldd	r20, Y+3	; 0x03
     a02:	5c 81       	ldd	r21, Y+4	; 0x04
     a04:	bc 01       	movw	r22, r24
     a06:	cd 01       	movw	r24, r26
     a08:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__gesf2>
     a0c:	18 16       	cp	r1, r24
     a0e:	5c f4       	brge	.+22     	; 0xa26 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	{
		controlValue = minYawServoControlValue;
     a10:	8d 81       	ldd	r24, Y+5	; 0x05
     a12:	9e 81       	ldd	r25, Y+6	; 0x06
     a14:	fc 01       	movw	r30, r24
     a16:	84 89       	ldd	r24, Z+20	; 0x14
     a18:	95 89       	ldd	r25, Z+21	; 0x15
     a1a:	a6 89       	ldd	r26, Z+22	; 0x16
     a1c:	b7 89       	ldd	r27, Z+23	; 0x17
     a1e:	89 83       	std	Y+1, r24	; 0x01
     a20:	9a 83       	std	Y+2, r25	; 0x02
     a22:	ab 83       	std	Y+3, r26	; 0x03
     a24:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return controlValue;
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	ab 81       	ldd	r26, Y+3	; 0x03
     a2c:	bc 81       	ldd	r27, Y+4	; 0x04
}
     a2e:	bc 01       	movw	r22, r24
     a30:	cd 01       	movw	r24, r26
     a32:	2a 96       	adiw	r28, 0x0a	; 10
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>:

void PIDController::tailRotorCollectiveOuterLoopUpdate()
{
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	6a 97       	sbiw	r28, 0x1a	; 26
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	9a 8f       	std	Y+26, r25	; 0x1a
     a66:	89 8f       	std	Y+25, r24	; 0x19
	double yawProportional = calculateYawProportional(model->MagYawDegrees(), model->ReferenceMagYawDegrees());
     a68:	89 8d       	ldd	r24, Y+25	; 0x19
     a6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>
     a76:	6b 01       	movw	r12, r22
     a78:	7c 01       	movw	r14, r24
     a7a:	89 8d       	ldd	r24, Y+25	; 0x19
     a7c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a7e:	fc 01       	movw	r30, r24
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	e9 8d       	ldd	r30, Y+25	; 0x19
     a8e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a90:	97 01       	movw	r18, r14
     a92:	86 01       	movw	r16, r12
     a94:	ac 01       	movw	r20, r24
     a96:	bd 01       	movw	r22, r26
     a98:	cf 01       	movw	r24, r30
     a9a:	0e 94 84 02 	call	0x508	; 0x508 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	ab 83       	std	Y+3, r26	; 0x03
     aa8:	bc 83       	std	Y+4, r27	; 0x04
	double yawAntiWindup = calculateYawIntegralAntiWindup(model->YawControlBeforeServoLimitsAdjustment(), model->YawControl());
     aaa:	89 8d       	ldd	r24, Y+25	; 0x19
     aac:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK10helicopter5model11SystemModel10YawControlEv>
     ab8:	6b 01       	movw	r12, r22
     aba:	7c 01       	movw	r14, r24
     abc:	89 8d       	ldd	r24, Y+25	; 0x19
     abe:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	0e 94 43 01 	call	0x286	; 0x286 <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>
     aca:	dc 01       	movw	r26, r24
     acc:	cb 01       	movw	r24, r22
     ace:	e9 8d       	ldd	r30, Y+25	; 0x19
     ad0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ad2:	97 01       	movw	r18, r14
     ad4:	86 01       	movw	r16, r12
     ad6:	ac 01       	movw	r20, r24
     ad8:	bd 01       	movw	r22, r26
     ada:	cf 01       	movw	r24, r30
     adc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEdd>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	8d 83       	std	Y+5, r24	; 0x05
     ae6:	9e 83       	std	Y+6, r25	; 0x06
     ae8:	af 83       	std	Y+7, r26	; 0x07
     aea:	b8 87       	std	Y+8, r27	; 0x08
	double weightedYawIntegral = calculateYawIntegral(yawProportional, model->YawIntegral(), yawAntiWindup);
     aec:	89 8d       	ldd	r24, Y+25	; 0x19
     aee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     af0:	fc 01       	movw	r30, r24
     af2:	80 81       	ld	r24, Z
     af4:	91 81       	ldd	r25, Z+1	; 0x01
     af6:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	ed 80       	ldd	r14, Y+5	; 0x05
     b00:	fe 80       	ldd	r15, Y+6	; 0x06
     b02:	0f 81       	ldd	r16, Y+7	; 0x07
     b04:	18 85       	ldd	r17, Y+8	; 0x08
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	ab 81       	ldd	r26, Y+3	; 0x03
     b0c:	bc 81       	ldd	r27, Y+4	; 0x04
     b0e:	e9 8d       	ldd	r30, Y+25	; 0x19
     b10:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b12:	67 01       	movw	r12, r14
     b14:	78 01       	movw	r14, r16
     b16:	89 01       	movw	r16, r18
     b18:	9a 01       	movw	r18, r20
     b1a:	ac 01       	movw	r20, r24
     b1c:	bd 01       	movw	r22, r26
     b1e:	cf 01       	movw	r24, r30
     b20:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	89 87       	std	Y+9, r24	; 0x09
     b2a:	9a 87       	std	Y+10, r25	; 0x0a
     b2c:	ab 87       	std	Y+11, r26	; 0x0b
     b2e:	bc 87       	std	Y+12, r27	; 0x0c
	double yawDerivativeError = calculateYawVelocityError(model->YawVelocityDegreesPerSecond(), model->ReferenceYawVelocityDegreesPerSecond());
     b30:	89 8d       	ldd	r24, Y+25	; 0x19
     b32:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>
     b3e:	6b 01       	movw	r12, r22
     b40:	7c 01       	movw	r14, r24
     b42:	89 8d       	ldd	r24, Y+25	; 0x19
     b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	91 81       	ldd	r25, Z+1	; 0x01
     b4c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	e9 8d       	ldd	r30, Y+25	; 0x19
     b56:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b58:	97 01       	movw	r18, r14
     b5a:	86 01       	movw	r16, r12
     b5c:	ac 01       	movw	r20, r24
     b5e:	bd 01       	movw	r22, r26
     b60:	cf 01       	movw	r24, r30
     b62:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	8d 87       	std	Y+13, r24	; 0x0d
     b6c:	9e 87       	std	Y+14, r25	; 0x0e
     b6e:	af 87       	std	Y+15, r26	; 0x0f
     b70:	b8 8b       	std	Y+16, r27	; 0x10
	double yawControlBeforeServoLimitsAdjustment = calculateYawControlValue(yawProportional, yawDerivativeError, weightedYawIntegral);
     b72:	e9 84       	ldd	r14, Y+9	; 0x09
     b74:	fa 84       	ldd	r15, Y+10	; 0x0a
     b76:	0b 85       	ldd	r16, Y+11	; 0x0b
     b78:	1c 85       	ldd	r17, Y+12	; 0x0c
     b7a:	2d 85       	ldd	r18, Y+13	; 0x0d
     b7c:	3e 85       	ldd	r19, Y+14	; 0x0e
     b7e:	4f 85       	ldd	r20, Y+15	; 0x0f
     b80:	58 89       	ldd	r21, Y+16	; 0x10
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	ab 81       	ldd	r26, Y+3	; 0x03
     b88:	bc 81       	ldd	r27, Y+4	; 0x04
     b8a:	e9 8d       	ldd	r30, Y+25	; 0x19
     b8c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b8e:	67 01       	movw	r12, r14
     b90:	78 01       	movw	r14, r16
     b92:	89 01       	movw	r16, r18
     b94:	9a 01       	movw	r18, r20
     b96:	ac 01       	movw	r20, r24
     b98:	bd 01       	movw	r22, r26
     b9a:	cf 01       	movw	r24, r30
     b9c:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	89 8b       	std	Y+17, r24	; 0x11
     ba6:	9a 8b       	std	Y+18, r25	; 0x12
     ba8:	ab 8b       	std	Y+19, r26	; 0x13
     baa:	bc 8b       	std	Y+20, r27	; 0x14
	double yawControl = adjustControlForServoLimits(yawControlBeforeServoLimitsAdjustment);
     bac:	89 89       	ldd	r24, Y+17	; 0x11
     bae:	9a 89       	ldd	r25, Y+18	; 0x12
     bb0:	ab 89       	ldd	r26, Y+19	; 0x13
     bb2:	bc 89       	ldd	r27, Y+20	; 0x14
     bb4:	29 8d       	ldd	r18, Y+25	; 0x19
     bb6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     bb8:	ac 01       	movw	r20, r24
     bba:	bd 01       	movw	r22, r26
     bbc:	c9 01       	movw	r24, r18
     bbe:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	8d 8b       	std	Y+21, r24	; 0x15
     bc8:	9e 8b       	std	Y+22, r25	; 0x16
     bca:	af 8b       	std	Y+23, r26	; 0x17
     bcc:	b8 8f       	std	Y+24, r27	; 0x18
	
	model->YawControl(yawControl);
     bce:	89 8d       	ldd	r24, Y+25	; 0x19
     bd0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 81       	ld	r18, Z
     bd6:	31 81       	ldd	r19, Z+1	; 0x01
     bd8:	8d 89       	ldd	r24, Y+21	; 0x15
     bda:	9e 89       	ldd	r25, Y+22	; 0x16
     bdc:	af 89       	ldd	r26, Y+23	; 0x17
     bde:	b8 8d       	ldd	r27, Y+24	; 0x18
     be0:	ac 01       	movw	r20, r24
     be2:	bd 01       	movw	r22, r26
     be4:	c9 01       	movw	r24, r18
     be6:	0e 94 23 01 	call	0x246	; 0x246 <_ZN10helicopter5model11SystemModel10YawControlEd>
	model->YawControlBeforeServoLimitsAdjustment(yawControlBeforeServoLimitsAdjustment);
     bea:	89 8d       	ldd	r24, Y+25	; 0x19
     bec:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bee:	fc 01       	movw	r30, r24
     bf0:	20 81       	ld	r18, Z
     bf2:	31 81       	ldd	r19, Z+1	; 0x01
     bf4:	89 89       	ldd	r24, Y+17	; 0x11
     bf6:	9a 89       	ldd	r25, Y+18	; 0x12
     bf8:	ab 89       	ldd	r26, Y+19	; 0x13
     bfa:	bc 89       	ldd	r27, Y+20	; 0x14
     bfc:	ac 01       	movw	r20, r24
     bfe:	bd 01       	movw	r22, r26
     c00:	c9 01       	movw	r24, r18
     c02:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>
	model->YawIntegral(weightedYawIntegral);
     c06:	89 8d       	ldd	r24, Y+25	; 0x19
     c08:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 81       	ld	r18, Z
     c0e:	31 81       	ldd	r19, Z+1	; 0x01
     c10:	89 85       	ldd	r24, Y+9	; 0x09
     c12:	9a 85       	ldd	r25, Y+10	; 0x0a
     c14:	ab 85       	ldd	r26, Y+11	; 0x0b
     c16:	bc 85       	ldd	r27, Y+12	; 0x0c
     c18:	ac 01       	movw	r20, r24
     c1a:	bd 01       	movw	r22, r26
     c1c:	c9 01       	movw	r24, r18
     c1e:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN10helicopter5model11SystemModel11YawIntegralEd>
	model->YawProportional(yawProportional);
     c22:	89 8d       	ldd	r24, Y+25	; 0x19
     c24:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c26:	fc 01       	movw	r30, r24
     c28:	20 81       	ld	r18, Z
     c2a:	31 81       	ldd	r19, Z+1	; 0x01
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	ab 81       	ldd	r26, Y+3	; 0x03
     c32:	bc 81       	ldd	r27, Y+4	; 0x04
     c34:	ac 01       	movw	r20, r24
     c36:	bd 01       	movw	r22, r26
     c38:	c9 01       	movw	r24, r18
     c3a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN10helicopter5model11SystemModel15YawProportionalEd>
	model->YawDerivativeError(yawDerivativeError);
     c3e:	89 8d       	ldd	r24, Y+25	; 0x19
     c40:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c42:	fc 01       	movw	r30, r24
     c44:	20 81       	ld	r18, Z
     c46:	31 81       	ldd	r19, Z+1	; 0x01
     c48:	8d 85       	ldd	r24, Y+13	; 0x0d
     c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c4c:	af 85       	ldd	r26, Y+15	; 0x0f
     c4e:	b8 89       	ldd	r27, Y+16	; 0x10
     c50:	ac 01       	movw	r20, r24
     c52:	bd 01       	movw	r22, r26
     c54:	c9 01       	movw	r24, r18
     c56:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>
	
	servoDriver->controlTailRotorCollective(yawControl);
     c5a:	89 8d       	ldd	r24, Y+25	; 0x19
     c5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c5e:	fc 01       	movw	r30, r24
     c60:	22 81       	ldd	r18, Z+2	; 0x02
     c62:	33 81       	ldd	r19, Z+3	; 0x03
     c64:	8d 89       	ldd	r24, Y+21	; 0x15
     c66:	9e 89       	ldd	r25, Y+22	; 0x16
     c68:	af 89       	ldd	r26, Y+23	; 0x17
     c6a:	b8 8d       	ldd	r27, Y+24	; 0x18
     c6c:	ac 01       	movw	r20, r24
     c6e:	bd 01       	movw	r22, r26
     c70:	c9 01       	movw	r24, r18
     c72:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>
}
     c76:	6a 96       	adiw	r28, 0x1a	; 26
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	08 95       	ret

00000c94 <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	1f 92       	push	r1
     c9a:	1f 92       	push	r1
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
				{
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	2a e0       	ldi	r18, 0x0A	; 10
     caa:	32 e0       	ldi	r19, 0x02	; 2
     cac:	fc 01       	movw	r30, r24
     cae:	31 83       	std	Z+1, r19	; 0x01
     cb0:	20 83       	st	Z, r18
					
				}
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	81 70       	andi	r24, 0x01	; 1
     cb8:	99 27       	eor	r25, r25
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	21 f0       	breq	.+8      	; 0xcc6 <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	1f 92       	push	r1
     cd6:	1f 92       	push	r1
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	0e 94 4a 06 	call	0xc94	; 0xc94 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "CommonHeader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     d00:	1f 92       	push	r1
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	9c 83       	std	Y+4, r25	; 0x04
     d08:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     d0a:	1a 82       	std	Y+2, r1	; 0x02
     d0c:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	fc 01       	movw	r30, r24
     d14:	82 85       	ldd	r24, Z+10	; 0x0a
     d16:	88 23       	and	r24, r24
     d18:	b9 f1       	breq	.+110    	; 0xd88 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	fc 01       	movw	r30, r24
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	a4 81       	ldd	r26, Z+4	; 0x04
     d26:	b5 81       	ldd	r27, Z+5	; 0x05
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	aa 1f       	adc	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	aa 1f       	adc	r26, r26
     d3e:	bb 1f       	adc	r27, r27
     d40:	9c 01       	movw	r18, r24
     d42:	ad 01       	movw	r20, r26
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	94 e2       	ldi	r25, 0x24	; 36
     d48:	a4 ef       	ldi	r26, 0xF4	; 244
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 16 20 	call	0x402c	; 0x402c <__udivmodsi4>
     d54:	da 01       	movw	r26, r20
     d56:	c9 01       	movw	r24, r18
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	a1 09       	sbc	r26, r1
     d5c:	b1 09       	sbc	r27, r1
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__floatunsisf>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <floor>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	3a c0       	rjmp	.+116    	; 0xdfc <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	fc 01       	movw	r30, r24
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	a4 81       	ldd	r26, Z+4	; 0x04
     d94:	b5 81       	ldd	r27, Z+5	; 0x05
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	aa 1f       	adc	r26, r26
     d9c:	bb 1f       	adc	r27, r27
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	aa 1f       	adc	r26, r26
     da4:	bb 1f       	adc	r27, r27
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 1f       	adc	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	aa 1f       	adc	r26, r26
     db4:	bb 1f       	adc	r27, r27
     db6:	9c 01       	movw	r18, r24
     db8:	ad 01       	movw	r20, r26
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	94 e2       	ldi	r25, 0x24	; 36
     dbe:	a4 ef       	ldi	r26, 0xF4	; 244
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 16 20 	call	0x402c	; 0x402c <__udivmodsi4>
     dca:	da 01       	movw	r26, r20
     dcc:	c9 01       	movw	r24, r18
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	a1 09       	sbc	r26, r1
     dd2:	b1 09       	sbc	r27, r1
     dd4:	bc 01       	movw	r22, r24
     dd6:	cd 01       	movw	r24, r26
     dd8:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__floatunsisf>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	bc 01       	movw	r22, r24
     de2:	cd 01       	movw	r24, r26
     de4:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <floor>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__fixunssfsi>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	fc 01       	movw	r30, r24
     e02:	86 81       	ldd	r24, Z+6	; 0x06
     e04:	88 23       	and	r24, r24
     e06:	41 f5       	brne	.+80     	; 0xe58 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     e08:	84 ec       	ldi	r24, 0xC4	; 196
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	29 81       	ldd	r18, Y+1	; 0x01
     e0e:	3a 81       	ldd	r19, Y+2	; 0x02
     e10:	fc 01       	movw	r30, r24
     e12:	31 83       	std	Z+1, r19	; 0x01
     e14:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     e16:	82 ec       	ldi	r24, 0xC2	; 194
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	22 ec       	ldi	r18, 0xC2	; 194
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	f9 01       	movw	r30, r18
     e20:	20 81       	ld	r18, Z
     e22:	26 60       	ori	r18, 0x06	; 6
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	fc 01       	movw	r30, r24
     e2e:	82 85       	ldd	r24, Z+10	; 0x0a
     e30:	88 23       	and	r24, r24
     e32:	49 f0       	breq	.+18     	; 0xe46 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     e34:	80 ec       	ldi	r24, 0xC0	; 192
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	20 ec       	ldi	r18, 0xC0	; 192
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	f9 01       	movw	r30, r18
     e3e:	20 81       	ld	r18, Z
     e40:	22 60       	ori	r18, 0x02	; 2
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     e46:	81 ec       	ldi	r24, 0xC1	; 193
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	21 ec       	ldi	r18, 0xC1	; 193
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	f9 01       	movw	r30, r18
     e50:	20 81       	ld	r18, Z
     e52:	28 61       	ori	r18, 0x18	; 24
     e54:	fc 01       	movw	r30, r24
     e56:	20 83       	st	Z, r18
	}
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>:

int SerialDriver::transmitByte(byte byteToSend)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	6b 83       	std	Y+3, r22	; 0x03
	if (uartPort == Zero)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	fc 01       	movw	r30, r24
     e7c:	86 81       	ldd	r24, Z+6	; 0x06
     e7e:	88 23       	and	r24, r24
     e80:	09 f0       	breq	.+2      	; 0xe84 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x1e>
     e82:	42 c0       	rjmp	.+132    	; 0xf08 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa2>
	{
		if (isTimeoutEnabled)
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	fc 01       	movw	r30, r24
     e8a:	81 85       	ldd	r24, Z+9	; 0x09
     e8c:	88 23       	and	r24, r24
     e8e:	09 f1       	breq	.+66     	; 0xed2 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			timer->startTimer();
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	fc 01       	movw	r30, r24
     e96:	87 81       	ldd	r24, Z+7	; 0x07
     e98:	90 85       	ldd	r25, Z+8	; 0x08
     e9a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     e9e:	19 c0       	rjmp	.+50     	; 0xed2 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	fc 01       	movw	r30, r24
     ea6:	81 85       	ldd	r24, Z+9	; 0x09
     ea8:	88 23       	and	r24, r24
     eaa:	a1 f0       	breq	.+40     	; 0xed4 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
			{
				if (timer->hasTimedout())
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	87 81       	ldd	r24, Z+7	; 0x07
     eb4:	90 85       	ldd	r25, Z+8	; 0x08
     eb6:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <_ZN10helicopter4util5Timer11hasTimedoutEv>
     eba:	88 23       	and	r24, r24
     ebc:	59 f0       	breq	.+22     	; 0xed4 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
				{
					timer->stopTimer();
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	fc 01       	movw	r30, r24
     ec4:	87 81       	ldd	r24, Z+7	; 0x07
     ec6:	90 85       	ldd	r25, Z+8	; 0x08
     ec8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN10helicopter4util5Timer9stopTimerEv>
					return -1;
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	9f ef       	ldi	r25, 0xFF	; 255
     ed0:	1d c0       	rjmp	.+58     	; 0xf0c <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa6>
		{
			timer->startTimer();
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     ed2:	00 00       	nop
     ed4:	80 ec       	ldi	r24, 0xC0	; 192
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	fc 01       	movw	r30, r24
     eda:	80 81       	ld	r24, Z
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	80 72       	andi	r24, 0x20	; 32
     ee2:	99 27       	eor	r25, r25
     ee4:	21 e0       	ldi	r18, 0x01	; 1
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	09 f0       	breq	.+2      	; 0xeec <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x86>
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	22 23       	and	r18, r18
     eee:	c1 f6       	brne	.-80     	; 0xea0 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x3a>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     ef0:	86 ec       	ldi	r24, 0xC6	; 198
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	2b 81       	ldd	r18, Y+3	; 0x03
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
		
		timer->stopTimer();
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	fc 01       	movw	r30, r24
     f00:	87 81       	ldd	r24, Z+7	; 0x07
     f02:	90 85       	ldd	r25, Z+8	; 0x08
     f04:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN10helicopter4util5Timer9stopTimerEv>
	}
	
	return 0;
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6>
     f1e:	1f 92       	push	r1
     f20:	1f 92       	push	r1
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	9b 83       	std	Y+3, r25	; 0x03
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	7d 83       	std	Y+5, r23	; 0x05
     f2c:	6c 83       	std	Y+4, r22	; 0x04
	bool hasDataOverrun = false;
     f2e:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	9b 81       	ldd	r25, Y+3	; 0x03
     f34:	fc 01       	movw	r30, r24
     f36:	86 81       	ldd	r24, Z+6	; 0x06
     f38:	88 23       	and	r24, r24
     f3a:	09 f0       	breq	.+2      	; 0xf3e <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x26>
     f3c:	41 c0       	rjmp	.+130    	; 0xfc0 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xa8>
	{
		
		if (isTimeoutEnabled)
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	fc 01       	movw	r30, r24
     f44:	81 85       	ldd	r24, Z+9	; 0x09
     f46:	88 23       	and	r24, r24
     f48:	d9 f0       	breq	.+54     	; 0xf80 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			timer->startTimer();
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	fc 01       	movw	r30, r24
     f50:	87 81       	ldd	r24, Z+7	; 0x07
     f52:	90 85       	ldd	r25, Z+8	; 0x08
     f54:	0e 94 a1 1c 	call	0x3942	; 0x3942 <_ZN10helicopter4util5Timer10startTimerEv>
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     f58:	13 c0       	rjmp	.+38     	; 0xf80 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			if (timer->hasTimedout())
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	9b 81       	ldd	r25, Y+3	; 0x03
     f5e:	fc 01       	movw	r30, r24
     f60:	87 81       	ldd	r24, Z+7	; 0x07
     f62:	90 85       	ldd	r25, Z+8	; 0x08
     f64:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <_ZN10helicopter4util5Timer11hasTimedoutEv>
     f68:	88 23       	and	r24, r24
     f6a:	59 f0       	breq	.+22     	; 0xf82 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6a>
			{
				timer->stopTimer();
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	fc 01       	movw	r30, r24
     f72:	87 81       	ldd	r24, Z+7	; 0x07
     f74:	90 85       	ldd	r25, Z+8	; 0x08
     f76:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN10helicopter4util5Timer9stopTimerEv>
				return -1;
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	29 c0       	rjmp	.+82     	; 0xfd2 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xba>
			timer->startTimer();
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     f80:	00 00       	nop
     f82:	80 ec       	ldi	r24, 0xC0	; 192
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	fc 01       	movw	r30, r24
     f88:	80 81       	ld	r24, Z
     f8a:	80 95       	com	r24
     f8c:	88 1f       	adc	r24, r24
     f8e:	88 27       	eor	r24, r24
     f90:	88 1f       	adc	r24, r24
     f92:	88 23       	and	r24, r24
     f94:	11 f7       	brne	.-60     	; 0xf5a <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x42>
			}*/
		}
		
		//determine if there has been a data overrun.
		//Swallow the overrun because nothing can be done.
		hasDataOverrun = (UCSR0A & (1 << DOR0)) != 0;
     f96:	80 ec       	ldi	r24, 0xC0	; 192
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	88 70       	andi	r24, 0x08	; 8
     fa4:	99 27       	eor	r25, r25
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	09 f4       	brne	.+2      	; 0xfae <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x96>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	29 83       	std	Y+1, r18	; 0x01
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
     fb0:	86 ec       	ldi	r24, 0xC6	; 198
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 81       	ld	r18, Z
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 83       	st	Z, r18
	}
	
	timer->stopTimer();
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	fc 01       	movw	r30, r24
     fc6:	87 81       	ldd	r24, Z+7	; 0x07
     fc8:	90 85       	ldd	r25, Z+8	; 0x08
     fca:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return 0;
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <_ZN10helicopter7drivers11ServoDriverD1Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	1f 92       	push	r1
     fe8:	1f 92       	push	r1
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
				{
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	28 e1       	ldi	r18, 0x18	; 24
     ff8:	32 e0       	ldi	r19, 0x02	; 2
     ffa:	fc 01       	movw	r30, r24
     ffc:	31 83       	std	Z+1, r19	; 0x01
     ffe:	20 83       	st	Z, r18
					
				}
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	99 27       	eor	r25, r25
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	21 f0       	breq	.+8      	; 0x1014 <_ZN10helicopter7drivers11ServoDriverD1Ev+0x32>
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <_ZN10helicopter7drivers11ServoDriverD0Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	1f 92       	push	r1
    1024:	1f 92       	push	r1
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN10helicopter7drivers11ServoDriverD1Ev>
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>:
#include "ServoDriver.h"

using namespace helicopter::drivers;

void ServoDriver::controlTailRotorCollective(double controlTailRotorCollective)
{
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	2a 97       	sbiw	r28, 0x0a	; 10
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	4f 83       	std	Y+7, r20	; 0x07
    1062:	58 87       	std	Y+8, r21	; 0x08
    1064:	69 87       	std	Y+9, r22	; 0x09
    1066:	7a 87       	std	Y+10, r23	; 0x0a
	double control = controlTailRotorCollective;
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
    106a:	98 85       	ldd	r25, Y+8	; 0x08
    106c:	a9 85       	ldd	r26, Y+9	; 0x09
    106e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	ab 83       	std	Y+3, r26	; 0x03
    1076:	bc 83       	std	Y+4, r27	; 0x04
	
	if (control > maxControlValue)
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	fc 01       	movw	r30, r24
    107e:	86 81       	ldd	r24, Z+6	; 0x06
    1080:	97 81       	ldd	r25, Z+7	; 0x07
    1082:	a0 85       	ldd	r26, Z+8	; 0x08
    1084:	b1 85       	ldd	r27, Z+9	; 0x09
    1086:	29 81       	ldd	r18, Y+1	; 0x01
    1088:	3a 81       	ldd	r19, Y+2	; 0x02
    108a:	4b 81       	ldd	r20, Y+3	; 0x03
    108c:	5c 81       	ldd	r21, Y+4	; 0x04
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__cmpsf2>
    1096:	88 23       	and	r24, r24
    1098:	5c f4       	brge	.+22     	; 0x10b0 <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0x68>
	{
		control = maxControlValue;
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	fc 01       	movw	r30, r24
    10a0:	86 81       	ldd	r24, Z+6	; 0x06
    10a2:	97 81       	ldd	r25, Z+7	; 0x07
    10a4:	a0 85       	ldd	r26, Z+8	; 0x08
    10a6:	b1 85       	ldd	r27, Z+9	; 0x09
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	ab 83       	std	Y+3, r26	; 0x03
    10ae:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	if (control < minControlValue)
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	fc 01       	movw	r30, r24
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	a4 81       	ldd	r26, Z+4	; 0x04
    10bc:	b5 81       	ldd	r27, Z+5	; 0x05
    10be:	29 81       	ldd	r18, Y+1	; 0x01
    10c0:	3a 81       	ldd	r19, Y+2	; 0x02
    10c2:	4b 81       	ldd	r20, Y+3	; 0x03
    10c4:	5c 81       	ldd	r21, Y+4	; 0x04
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__gesf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	5c f4       	brge	.+22     	; 0x10e8 <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0xa0>
	{
		control = minControlValue;
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	fc 01       	movw	r30, r24
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	a4 81       	ldd	r26, Z+4	; 0x04
    10de:	b5 81       	ldd	r27, Z+5	; 0x05
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	ab 83       	std	Y+3, r26	; 0x03
    10e6:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	controlTailRotorCollectiveImpl(control);
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	fc 01       	movw	r30, r24
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	04 96       	adiw	r24, 0x04	; 4
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 81       	ld	r18, Z
    10f8:	31 81       	ldd	r19, Z+1	; 0x01
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1100:	bc 81       	ldd	r27, Y+4	; 0x04
    1102:	ed 81       	ldd	r30, Y+5	; 0x05
    1104:	fe 81       	ldd	r31, Y+6	; 0x06
    1106:	ac 01       	movw	r20, r24
    1108:	bd 01       	movw	r22, r26
    110a:	cf 01       	movw	r24, r30
    110c:	f9 01       	movw	r30, r18
    110e:	19 95       	eicall
}
    1110:	2a 96       	adiw	r28, 0x0a	; 10
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>:


void ServoDriver::controlTailRotorCollectiveImpl(double controlTailRotorCollective)
{
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	00 d0       	rcall	.+0      	; 0x1128 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x6>
    1128:	00 d0       	rcall	.+0      	; 0x112a <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x8>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	4b 83       	std	Y+3, r20	; 0x03
    1134:	5c 83       	std	Y+4, r21	; 0x04
    1136:	6d 83       	std	Y+5, r22	; 0x05
    1138:	7e 83       	std	Y+6, r23	; 0x06
	
    113a:	26 96       	adiw	r28, 0x06	; 6
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	1f 92       	push	r1
    1152:	1f 92       	push	r1
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	20 e7       	ldi	r18, 0x70	; 112
    1162:	32 e0       	ldi	r19, 0x02	; 2
    1164:	fc 01       	movw	r30, r24
    1166:	31 83       	std	Z+1, r19	; 0x01
    1168:	20 83       	st	Z, r18
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	99 27       	eor	r25, r25
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	21 f0       	breq	.+8      	; 0x117e <_ZN10helicopter5tasks4TaskD1Ev+0x32>
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <_ZN10helicopter5tasks4TaskD0Ev>:
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	1f 92       	push	r1
    118e:	1f 92       	push	r1
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN10helicopter5tasks4TaskD1Ev>
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>:
					
				int ledToBlink;
				
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	28 97       	sbiw	r28, 0x08	; 8
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	7c 83       	std	Y+4, r23	; 0x04
    11cc:	6b 83       	std	Y+3, r22	; 0x03
    11ce:	5e 83       	std	Y+6, r21	; 0x06
    11d0:	4d 83       	std	Y+5, r20	; 0x05
    11d2:	38 87       	std	Y+8, r19	; 0x08
    11d4:	2f 83       	std	Y+7, r18	; 0x07
				Task(delay, period),
				isOff(false),
				ledToBlink(ledToBlink)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	4d 81       	ldd	r20, Y+5	; 0x05
    11dc:	5e 81       	ldd	r21, Y+6	; 0x06
    11de:	2b 81       	ldd	r18, Y+3	; 0x03
    11e0:	3c 81       	ldd	r19, Y+4	; 0x04
    11e2:	b9 01       	movw	r22, r18
    11e4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN10helicopter5tasks4TaskC1Eii>
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	22 e2       	ldi	r18, 0x22	; 34
    11ee:	32 e0       	ldi	r19, 0x02	; 2
    11f0:	fc 01       	movw	r30, r24
    11f2:	31 83       	std	Z+1, r19	; 0x01
    11f4:	20 83       	st	Z, r18
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	fc 01       	movw	r30, r24
    11fc:	17 82       	std	Z+7, r1	; 0x07
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	2f 81       	ldd	r18, Y+7	; 0x07
    1204:	38 85       	ldd	r19, Y+8	; 0x08
    1206:	fc 01       	movw	r30, r24
    1208:	31 87       	std	Z+9, r19	; 0x09
    120a:	20 87       	std	Z+8, r18	; 0x08
			{
					
			}
    120c:	28 96       	adiw	r28, 0x08	; 8
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
	
			void init()
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	1f 92       	push	r1
    1224:	1f 92       	push	r1
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
			{
				DDRA |= (1<<ledToBlink);
    122e:	81 e2       	ldi	r24, 0x21	; 33
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	21 e2       	ldi	r18, 0x21	; 33
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	f9 01       	movw	r30, r18
    1238:	20 81       	ld	r18, Z
    123a:	62 2f       	mov	r22, r18
    123c:	29 81       	ldd	r18, Y+1	; 0x01
    123e:	3a 81       	ldd	r19, Y+2	; 0x02
    1240:	f9 01       	movw	r30, r18
    1242:	40 85       	ldd	r20, Z+8	; 0x08
    1244:	51 85       	ldd	r21, Z+9	; 0x09
    1246:	21 e0       	ldi	r18, 0x01	; 1
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	04 2e       	mov	r0, r20
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x34>
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x30>
    1256:	26 2b       	or	r18, r22
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
			}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	1f 92       	push	r1
    126c:	1f 92       	push	r1
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
				if (isOff)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	fc 01       	movw	r30, r24
    127c:	87 81       	ldd	r24, Z+7	; 0x07
    127e:	88 23       	and	r24, r24
    1280:	e9 f0       	breq	.+58     	; 0x12bc <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x56>
				{
					//Turn On the LED
					PORTA &= ~(1<<ledToBlink);
    1282:	82 e2       	ldi	r24, 0x22	; 34
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	22 e2       	ldi	r18, 0x22	; 34
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	20 81       	ld	r18, Z
    128e:	62 2f       	mov	r22, r18
    1290:	29 81       	ldd	r18, Y+1	; 0x01
    1292:	3a 81       	ldd	r19, Y+2	; 0x02
    1294:	f9 01       	movw	r30, r18
    1296:	40 85       	ldd	r20, Z+8	; 0x08
    1298:	51 85       	ldd	r21, Z+9	; 0x09
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	04 2e       	mov	r0, r20
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x40>
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x3c>
    12aa:	20 95       	com	r18
    12ac:	26 23       	and	r18, r22
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
					isOff = false;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	fc 01       	movw	r30, r24
    12b8:	17 82       	std	Z+7, r1	; 0x07
    12ba:	1c c0       	rjmp	.+56     	; 0x12f4 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x8e>
				}else
				{
					//Turn Off the LED
					PORTA |= (1<<ledToBlink);
    12bc:	82 e2       	ldi	r24, 0x22	; 34
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	22 e2       	ldi	r18, 0x22	; 34
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	f9 01       	movw	r30, r18
    12c6:	20 81       	ld	r18, Z
    12c8:	62 2f       	mov	r22, r18
    12ca:	29 81       	ldd	r18, Y+1	; 0x01
    12cc:	3a 81       	ldd	r19, Y+2	; 0x02
    12ce:	f9 01       	movw	r30, r18
    12d0:	40 85       	ldd	r20, Z+8	; 0x08
    12d2:	51 85       	ldd	r21, Z+9	; 0x09
    12d4:	21 e0       	ldi	r18, 0x01	; 1
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	04 2e       	mov	r0, r20
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x7a>
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x76>
    12e4:	26 2b       	or	r18, r22
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
					isOff = true;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	21 e0       	ldi	r18, 0x01	; 1
    12f0:	fc 01       	movw	r30, r24
    12f2:	27 83       	std	Z+7, r18	; 0x07
				}
			}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <_ZN10helicopter4util5TimerC1Em9PRESCALERm>:
				 * @timeoutMilliseconds the milliseconds that should go by before the
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	2c 97       	sbiw	r28, 0x0c	; 12
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	4b 83       	std	Y+3, r20	; 0x03
    1320:	5c 83       	std	Y+4, r21	; 0x04
    1322:	6d 83       	std	Y+5, r22	; 0x05
    1324:	7e 83       	std	Y+6, r23	; 0x06
    1326:	38 87       	std	Y+8, r19	; 0x08
    1328:	2f 83       	std	Y+7, r18	; 0x07
    132a:	e9 86       	std	Y+9, r14	; 0x09
    132c:	fa 86       	std	Y+10, r15	; 0x0a
    132e:	0b 87       	std	Y+11, r16	; 0x0b
    1330:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
    1332:	29 81       	ldd	r18, Y+1	; 0x01
    1334:	3a 81       	ldd	r19, Y+2	; 0x02
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	ad 81       	ldd	r26, Y+5	; 0x05
    133c:	be 81       	ldd	r27, Y+6	; 0x06
    133e:	f9 01       	movw	r30, r18
    1340:	80 83       	st	Z, r24
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	a2 83       	std	Z+2, r26	; 0x02
    1346:	b3 83       	std	Z+3, r27	; 0x03
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	2f 81       	ldd	r18, Y+7	; 0x07
    134e:	38 85       	ldd	r19, Y+8	; 0x08
    1350:	fc 01       	movw	r30, r24
    1352:	35 83       	std	Z+5, r19	; 0x05
    1354:	24 83       	std	Z+4, r18	; 0x04
    1356:	29 85       	ldd	r18, Y+9	; 0x09
    1358:	3a 85       	ldd	r19, Y+10	; 0x0a
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	fc 01       	movw	r30, r24
    1360:	37 83       	std	Z+7, r19	; 0x07
    1362:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
    1364:	2c 96       	adiw	r28, 0x0c	; 12
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	08 95       	ret

0000137e <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>:
				 * only used when enableTimeout = true.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
    137e:	cf 92       	push	r12
    1380:	ef 92       	push	r14
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	2b 97       	sbiw	r28, 0x0b	; 11
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	4b 83       	std	Y+3, r20	; 0x03
    13a0:	5c 83       	std	Y+4, r21	; 0x04
    13a2:	6d 83       	std	Y+5, r22	; 0x05
    13a4:	7e 83       	std	Y+6, r23	; 0x06
    13a6:	2f 83       	std	Y+7, r18	; 0x07
    13a8:	19 87       	std	Y+9, r17	; 0x09
    13aa:	08 87       	std	Y+8, r16	; 0x08
    13ac:	ea 86       	std	Y+10, r14	; 0x0a
    13ae:	cb 86       	std	Y+11, r12	; 0x0b
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				timer(timer),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	2a e0       	ldi	r18, 0x0A	; 10
    13b6:	32 e0       	ldi	r19, 0x02	; 2
    13b8:	fc 01       	movw	r30, r24
    13ba:	31 83       	std	Z+1, r19	; 0x01
    13bc:	20 83       	st	Z, r18
    13be:	29 81       	ldd	r18, Y+1	; 0x01
    13c0:	3a 81       	ldd	r19, Y+2	; 0x02
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	ad 81       	ldd	r26, Y+5	; 0x05
    13c8:	be 81       	ldd	r27, Y+6	; 0x06
    13ca:	f9 01       	movw	r30, r18
    13cc:	82 83       	std	Z+2, r24	; 0x02
    13ce:	93 83       	std	Z+3, r25	; 0x03
    13d0:	a4 83       	std	Z+4, r26	; 0x04
    13d2:	b5 83       	std	Z+5, r27	; 0x05
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	2f 81       	ldd	r18, Y+7	; 0x07
    13da:	fc 01       	movw	r30, r24
    13dc:	26 83       	std	Z+6, r18	; 0x06
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	28 85       	ldd	r18, Y+8	; 0x08
    13e4:	39 85       	ldd	r19, Y+9	; 0x09
    13e6:	fc 01       	movw	r30, r24
    13e8:	30 87       	std	Z+8, r19	; 0x08
    13ea:	27 83       	std	Z+7, r18	; 0x07
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    13f2:	fc 01       	movw	r30, r24
    13f4:	21 87       	std	Z+9, r18	; 0x09
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    13fc:	fc 01       	movw	r30, r24
    13fe:	22 87       	std	Z+10, r18	; 0x0a
				{
					
				}
    1400:	2b 96       	adiw	r28, 0x0b	; 11
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ef 90       	pop	r14
    1416:	cf 90       	pop	r12
    1418:	08 95       	ret

0000141a <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * at the same time interval (i.e. 20 milliseconds) for both transmitting a byte as well
				 * as receiving a byte.
				 * @param serialDriver the driver used to communicate with the serial port
				 * which is used to communicate with the Ground Control Station.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver):
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	00 d0       	rcall	.+0      	; 0x1420 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
    1420:	1f 92       	push	r1
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	7c 83       	std	Y+4, r23	; 0x04
    142c:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	fc 01       	movw	r30, r24
    1438:	31 83       	std	Z+1, r19	; 0x01
    143a:	20 83       	st	Z, r18
					{}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int checksumErrors;
			
			public:
			
			SystemModel():
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	1f 92       	push	r1
    1450:	1f 92       	push	r1
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
			yawIntegral(0),
			yawProportional(0),
			yawDerivativeError(0),
			timeouts(0),
			unrecognizedMsgTypes(0),
			checksumErrors(0)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	fc 01       	movw	r30, r24
    1460:	10 82       	st	Z, r1
    1462:	11 82       	std	Z+1, r1	; 0x01
    1464:	12 82       	std	Z+2, r1	; 0x02
    1466:	13 82       	std	Z+3, r1	; 0x03
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	fc 01       	movw	r30, r24
    146e:	14 82       	std	Z+4, r1	; 0x04
    1470:	15 82       	std	Z+5, r1	; 0x05
    1472:	16 82       	std	Z+6, r1	; 0x06
    1474:	17 82       	std	Z+7, r1	; 0x07
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	fc 01       	movw	r30, r24
    147c:	10 86       	std	Z+8, r1	; 0x08
    147e:	11 86       	std	Z+9, r1	; 0x09
    1480:	12 86       	std	Z+10, r1	; 0x0a
    1482:	13 86       	std	Z+11, r1	; 0x0b
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	fc 01       	movw	r30, r24
    148a:	14 86       	std	Z+12, r1	; 0x0c
    148c:	15 86       	std	Z+13, r1	; 0x0d
    148e:	16 86       	std	Z+14, r1	; 0x0e
    1490:	17 86       	std	Z+15, r1	; 0x0f
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	fc 01       	movw	r30, r24
    1498:	10 8a       	std	Z+16, r1	; 0x10
    149a:	11 8a       	std	Z+17, r1	; 0x11
    149c:	12 8a       	std	Z+18, r1	; 0x12
    149e:	13 8a       	std	Z+19, r1	; 0x13
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	fc 01       	movw	r30, r24
    14a6:	14 8a       	std	Z+20, r1	; 0x14
    14a8:	15 8a       	std	Z+21, r1	; 0x15
    14aa:	16 8a       	std	Z+22, r1	; 0x16
    14ac:	17 8a       	std	Z+23, r1	; 0x17
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	fc 01       	movw	r30, r24
    14b4:	10 8e       	std	Z+24, r1	; 0x18
    14b6:	11 8e       	std	Z+25, r1	; 0x19
    14b8:	12 8e       	std	Z+26, r1	; 0x1a
    14ba:	13 8e       	std	Z+27, r1	; 0x1b
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	fc 01       	movw	r30, r24
    14c2:	14 8e       	std	Z+28, r1	; 0x1c
    14c4:	15 8e       	std	Z+29, r1	; 0x1d
    14c6:	16 8e       	std	Z+30, r1	; 0x1e
    14c8:	17 8e       	std	Z+31, r1	; 0x1f
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	fc 01       	movw	r30, r24
    14d0:	10 a2       	std	Z+32, r1	; 0x20
    14d2:	11 a2       	std	Z+33, r1	; 0x21
    14d4:	12 a2       	std	Z+34, r1	; 0x22
    14d6:	13 a2       	std	Z+35, r1	; 0x23
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	fc 01       	movw	r30, r24
    14de:	15 a2       	std	Z+37, r1	; 0x25
    14e0:	14 a2       	std	Z+36, r1	; 0x24
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	fc 01       	movw	r30, r24
    14e8:	17 a2       	std	Z+39, r1	; 0x27
    14ea:	16 a2       	std	Z+38, r1	; 0x26
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	fc 01       	movw	r30, r24
    14f2:	11 a6       	std	Z+41, r1	; 0x29
    14f4:	10 a6       	std	Z+40, r1	; 0x28
			{
				
			}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>:
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	00 d0       	rcall	.+0      	; 0x1506 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x8>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	4b 83       	std	Y+3, r20	; 0x03
    1512:	5c 83       	std	Y+4, r21	; 0x04
    1514:	6d 83       	std	Y+5, r22	; 0x05
    1516:	7e 83       	std	Y+6, r23	; 0x06
    1518:	29 81       	ldd	r18, Y+1	; 0x01
    151a:	3a 81       	ldd	r19, Y+2	; 0x02
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	ad 81       	ldd	r26, Y+5	; 0x05
    1522:	be 81       	ldd	r27, Y+6	; 0x06
    1524:	f9 01       	movw	r30, r18
    1526:	84 83       	std	Z+4, r24	; 0x04
    1528:	95 83       	std	Z+5, r25	; 0x05
    152a:	a6 83       	std	Z+6, r26	; 0x06
    152c:	b7 83       	std	Z+7, r27	; 0x07
    152e:	26 96       	adiw	r28, 0x06	; 6
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	00 d0       	rcall	.+0      	; 0x1546 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x8>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	4b 83       	std	Y+3, r20	; 0x03
    1552:	5c 83       	std	Y+4, r21	; 0x04
    1554:	6d 83       	std	Y+5, r22	; 0x05
    1556:	7e 83       	std	Y+6, r23	; 0x06
    1558:	29 81       	ldd	r18, Y+1	; 0x01
    155a:	3a 81       	ldd	r19, Y+2	; 0x02
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	ad 81       	ldd	r26, Y+5	; 0x05
    1562:	be 81       	ldd	r27, Y+6	; 0x06
    1564:	f9 01       	movw	r30, r18
    1566:	84 8b       	std	Z+20, r24	; 0x14
    1568:	95 8b       	std	Z+21, r25	; 0x15
    156a:	a6 8b       	std	Z+22, r26	; 0x16
    156c:	b7 8b       	std	Z+23, r27	; 0x17
    156e:	26 96       	adiw	r28, 0x06	; 6
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <_ZN10helicopter7drivers11ServoDriverC1Ev>:
				double minControlValue;
				double maxControlValue;
					
				
			public:
				ServoDriver(): 
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	1f 92       	push	r1
    1586:	1f 92       	push	r1
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
					minControlValue(0), 
					maxControlValue(0)
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	28 e1       	ldi	r18, 0x18	; 24
    1596:	32 e0       	ldi	r19, 0x02	; 2
    1598:	fc 01       	movw	r30, r24
    159a:	31 83       	std	Z+1, r19	; 0x01
    159c:	20 83       	st	Z, r18
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	fc 01       	movw	r30, r24
    15a4:	12 82       	std	Z+2, r1	; 0x02
    15a6:	13 82       	std	Z+3, r1	; 0x03
    15a8:	14 82       	std	Z+4, r1	; 0x04
    15aa:	15 82       	std	Z+5, r1	; 0x05
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	fc 01       	movw	r30, r24
    15b2:	16 82       	std	Z+6, r1	; 0x06
    15b4:	17 82       	std	Z+7, r1	; 0x07
    15b6:	10 86       	std	Z+8, r1	; 0x08
    15b8:	11 86       	std	Z+9, r1	; 0x09
				{
					
				}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>:
				}
				
				/**
				 * Gain value applied to the yaw proportional error
				 */
				void setYawProportionalGain(double yawProportionalGain)
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	4b 83       	std	Y+3, r20	; 0x03
    15d6:	5c 83       	std	Y+4, r21	; 0x04
    15d8:	6d 83       	std	Y+5, r22	; 0x05
    15da:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawProportionalGain = yawProportionalGain;
    15dc:	29 81       	ldd	r18, Y+1	; 0x01
    15de:	3a 81       	ldd	r19, Y+2	; 0x02
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	ad 81       	ldd	r26, Y+5	; 0x05
    15e6:	be 81       	ldd	r27, Y+6	; 0x06
    15e8:	f9 01       	movw	r30, r18
    15ea:	84 87       	std	Z+12, r24	; 0x0c
    15ec:	95 87       	std	Z+13, r25	; 0x0d
    15ee:	a6 87       	std	Z+14, r26	; 0x0e
    15f0:	b7 87       	std	Z+15, r27	; 0x0f
				}
    15f2:	26 96       	adiw	r28, 0x06	; 6
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>:
				
				/**
				 * Gain value applied to the yaw integral
				 */
				void setYawIntegralGain(double yawIntegralGain)
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	00 d0       	rcall	.+0      	; 0x160a <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x6>
    160a:	00 d0       	rcall	.+0      	; 0x160c <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x8>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	4b 83       	std	Y+3, r20	; 0x03
    1616:	5c 83       	std	Y+4, r21	; 0x04
    1618:	6d 83       	std	Y+5, r22	; 0x05
    161a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawIntegralGain = yawIntegralGain;
    161c:	29 81       	ldd	r18, Y+1	; 0x01
    161e:	3a 81       	ldd	r19, Y+2	; 0x02
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	ad 81       	ldd	r26, Y+5	; 0x05
    1626:	be 81       	ldd	r27, Y+6	; 0x06
    1628:	f9 01       	movw	r30, r18
    162a:	84 83       	std	Z+4, r24	; 0x04
    162c:	95 83       	std	Z+5, r25	; 0x05
    162e:	a6 83       	std	Z+6, r26	; 0x06
    1630:	b7 83       	std	Z+7, r27	; 0x07
				}
    1632:	26 96       	adiw	r28, 0x06	; 6
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>:
				
				/**
				 * Gain value applied to the derivative
				 */
				void setYawDerivativeGain(double yawDerivativeGain)
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	00 d0       	rcall	.+0      	; 0x164a <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x8>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	4b 83       	std	Y+3, r20	; 0x03
    1656:	5c 83       	std	Y+4, r21	; 0x04
    1658:	6d 83       	std	Y+5, r22	; 0x05
    165a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawDerivativeGain = yawDerivativeGain;
    165c:	29 81       	ldd	r18, Y+1	; 0x01
    165e:	3a 81       	ldd	r19, Y+2	; 0x02
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	ad 81       	ldd	r26, Y+5	; 0x05
    1666:	be 81       	ldd	r27, Y+6	; 0x06
    1668:	f9 01       	movw	r30, r18
    166a:	80 87       	std	Z+8, r24	; 0x08
    166c:	91 87       	std	Z+9, r25	; 0x09
    166e:	a2 87       	std	Z+10, r26	; 0x0a
    1670:	b3 87       	std	Z+11, r27	; 0x0b
				}
    1672:	26 96       	adiw	r28, 0x06	; 6
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>:
				
				/**
				 * The number of seconds between pid controller updates. This number
				 * should generally be less than 1. Like .05 for a 20 hz rate.
				 */
				void setIntervalPeriodSecs(double intervalPeriodSecs)
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	00 d0       	rcall	.+0      	; 0x168a <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x8>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	4b 83       	std	Y+3, r20	; 0x03
    1696:	5c 83       	std	Y+4, r21	; 0x04
    1698:	6d 83       	std	Y+5, r22	; 0x05
    169a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->intervalPeriodSecs = intervalPeriodSecs;
    169c:	29 81       	ldd	r18, Y+1	; 0x01
    169e:	3a 81       	ldd	r19, Y+2	; 0x02
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	ad 81       	ldd	r26, Y+5	; 0x05
    16a6:	be 81       	ldd	r27, Y+6	; 0x06
    16a8:	f9 01       	movw	r30, r18
    16aa:	80 a3       	std	Z+32, r24	; 0x20
    16ac:	91 a3       	std	Z+33, r25	; 0x21
    16ae:	a2 a3       	std	Z+34, r26	; 0x22
    16b0:	b3 a3       	std	Z+35, r27	; 0x23
				}
    16b2:	26 96       	adiw	r28, 0x06	; 6
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

000016c4 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>:
				 * keeps increasing despite the helicopter already at the maximum possible control values.
				 * @param yawAntiWindupGain The gain value which represents how fast the integral will
				 * go back to 0 when the servos are saturated.
				 * Some simple rule that have been suggested for the tracking time are ~ Tt = TiTd and Tt = (Ti + Td)/2.
				 */
				void setYawAntiWindupGain(double yawAntiWindupGain)
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x8>
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	4b 83       	std	Y+3, r20	; 0x03
    16d6:	5c 83       	std	Y+4, r21	; 0x04
    16d8:	6d 83       	std	Y+5, r22	; 0x05
    16da:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawAntiWindupGain = yawAntiWindupGain;
    16dc:	29 81       	ldd	r18, Y+1	; 0x01
    16de:	3a 81       	ldd	r19, Y+2	; 0x02
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	ad 81       	ldd	r26, Y+5	; 0x05
    16e6:	be 81       	ldd	r27, Y+6	; 0x06
    16e8:	f9 01       	movw	r30, r18
    16ea:	80 8b       	std	Z+16, r24	; 0x10
    16ec:	91 8b       	std	Z+17, r25	; 0x11
    16ee:	a2 8b       	std	Z+18, r26	; 0x12
    16f0:	b3 8b       	std	Z+19, r27	; 0x13
				}
    16f2:	26 96       	adiw	r28, 0x06	; 6
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd>:
				/**
				 * The minimum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no smaller than the controlMinValue (e.g. no less than -1)
				 */
				void setMinTailRotorCollectiveControlValue (double minYawServoControlValue)
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 d0       	rcall	.+0      	; 0x170a <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd+0x6>
    170a:	00 d0       	rcall	.+0      	; 0x170c <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd+0x8>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	4b 83       	std	Y+3, r20	; 0x03
    1716:	5c 83       	std	Y+4, r21	; 0x04
    1718:	6d 83       	std	Y+5, r22	; 0x05
    171a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->minYawServoControlValue = minYawServoControlValue;
    171c:	29 81       	ldd	r18, Y+1	; 0x01
    171e:	3a 81       	ldd	r19, Y+2	; 0x02
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	ad 81       	ldd	r26, Y+5	; 0x05
    1726:	be 81       	ldd	r27, Y+6	; 0x06
    1728:	f9 01       	movw	r30, r18
    172a:	84 8b       	std	Z+20, r24	; 0x14
    172c:	95 8b       	std	Z+21, r25	; 0x15
    172e:	a6 8b       	std	Z+22, r26	; 0x16
    1730:	b7 8b       	std	Z+23, r27	; 0x17
				}
    1732:	26 96       	adiw	r28, 0x06	; 6
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd>:
				/**
				 * The maximum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no larger than the controlMaxValue (e.g. no greater than 1)
				 */
				void setMaxTailRotorCollectiveValue(double maxYawServoControlValue)
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	00 d0       	rcall	.+0      	; 0x174a <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd+0x8>
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	4b 83       	std	Y+3, r20	; 0x03
    1756:	5c 83       	std	Y+4, r21	; 0x04
    1758:	6d 83       	std	Y+5, r22	; 0x05
    175a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->maxYawServoControlValue = maxYawServoControlValue;
    175c:	29 81       	ldd	r18, Y+1	; 0x01
    175e:	3a 81       	ldd	r19, Y+2	; 0x02
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	ad 81       	ldd	r26, Y+5	; 0x05
    1766:	be 81       	ldd	r27, Y+6	; 0x06
    1768:	f9 01       	movw	r30, r18
    176a:	80 8f       	std	Z+24, r24	; 0x18
    176c:	91 8f       	std	Z+25, r25	; 0x19
    176e:	a2 8f       	std	Z+26, r26	; 0x1a
    1770:	b3 8f       	std	Z+27, r27	; 0x1b
				}
    1772:	26 96       	adiw	r28, 0x06	; 6
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>:
				
				/**
				 * This is the maximum possible output value for a control signal.
				 * Generally, this should be set to 1.
				 */
				void setControlMaxValue(double controlMaxValue)
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	00 d0       	rcall	.+0      	; 0x178a <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x6>
    178a:	00 d0       	rcall	.+0      	; 0x178c <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x8>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	4b 83       	std	Y+3, r20	; 0x03
    1796:	5c 83       	std	Y+4, r21	; 0x04
    1798:	6d 83       	std	Y+5, r22	; 0x05
    179a:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMaxValue = controlMaxValue;
    179c:	29 81       	ldd	r18, Y+1	; 0x01
    179e:	3a 81       	ldd	r19, Y+2	; 0x02
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	ad 81       	ldd	r26, Y+5	; 0x05
    17a6:	be 81       	ldd	r27, Y+6	; 0x06
    17a8:	f9 01       	movw	r30, r18
    17aa:	84 a3       	std	Z+36, r24	; 0x24
    17ac:	95 a3       	std	Z+37, r25	; 0x25
    17ae:	a6 a3       	std	Z+38, r26	; 0x26
    17b0:	b7 a3       	std	Z+39, r27	; 0x27
				}
    17b2:	26 96       	adiw	r28, 0x06	; 6
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>:
				
				/**
				 * This is the minimum possible value for a control signal.
				 * Generally, this should be set to -1.
				 */
				void setControlMinValue(double controlMinValue)
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x6>
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x8>
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	4b 83       	std	Y+3, r20	; 0x03
    17d6:	5c 83       	std	Y+4, r21	; 0x04
    17d8:	6d 83       	std	Y+5, r22	; 0x05
    17da:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMinValue = controlMinValue;
    17dc:	29 81       	ldd	r18, Y+1	; 0x01
    17de:	3a 81       	ldd	r19, Y+2	; 0x02
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	ad 81       	ldd	r26, Y+5	; 0x05
    17e6:	be 81       	ldd	r27, Y+6	; 0x06
    17e8:	f9 01       	movw	r30, r18
    17ea:	80 a7       	std	Z+40, r24	; 0x28
    17ec:	91 a7       	std	Z+41, r25	; 0x29
    17ee:	a2 a7       	std	Z+42, r26	; 0x2a
    17f0:	b3 a7       	std	Z+43, r27	; 0x2b
				}			
    17f2:	26 96       	adiw	r28, 0x06	; 6
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>:
using namespace helicopter::interfaces;
using namespace helicopter::model;
using namespace helicopter::controller;

void setupDefaultsandReferencePosition(SystemModel *model, PIDController *pidController)
{	
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	00 d0       	rcall	.+0      	; 0x180a <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE+0x6>
    180a:	1f 92       	push	r1
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	9a 83       	std	Y+2, r25	; 0x02
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	7c 83       	std	Y+4, r23	; 0x04
    1816:	6b 83       	std	Y+3, r22	; 0x03
	model->ReferenceMagYawDegrees(0.0);
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	9a 81       	ldd	r25, Y+2	; 0x02
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	ba 01       	movw	r22, r20
    1822:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>
	model->ReferenceYawVelocityDegreesPerSecond(0.0);
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	ba 01       	movw	r22, r20
    1830:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>
	
	pidController->setYawProportionalGain(3.0);
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	60 e4       	ldi	r22, 0x40	; 64
    183e:	70 e4       	ldi	r23, 0x40	; 64
    1840:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>
	pidController->setYawIntegralGain(.008);
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	4f e6       	ldi	r20, 0x6F	; 111
    184a:	52 e1       	ldi	r21, 0x12	; 18
    184c:	63 e0       	ldi	r22, 0x03	; 3
    184e:	7c e3       	ldi	r23, 0x3C	; 60
    1850:	0e 94 02 0b 	call	0x1604	; 0x1604 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>
	pidController->setYawDerivativeGain(.85);
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	4a e9       	ldi	r20, 0x9A	; 154
    185a:	59 e9       	ldi	r21, 0x99	; 153
    185c:	69 e5       	ldi	r22, 0x59	; 89
    185e:	7f e3       	ldi	r23, 0x3F	; 63
    1860:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>

	//TODO: Don't forget that there is a difference between how often the sensors
	//are read and how often the control algorithm runs. 
	pidController->setIntervalPeriodSecs(PID_OUTER_LOOP_PERIOD);
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	4d ec       	ldi	r20, 0xCD	; 205
    186a:	5c ec       	ldi	r21, 0xCC	; 204
    186c:	6c e4       	ldi	r22, 0x4C	; 76
    186e:	7d e3       	ldi	r23, 0x3D	; 61
    1870:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>
	pidController->setYawAntiWindupGain(.1);
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	4d ec       	ldi	r20, 0xCD	; 205
    187a:	5c ec       	ldi	r21, 0xCC	; 204
    187c:	6c ec       	ldi	r22, 0xCC	; 204
    187e:	7d e3       	ldi	r23, 0x3D	; 61
    1880:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>
/*	
	pidController->setMinTailRotorCollectiveControlValue (-.8);
	pidController->setMaxTailRotorCollectiveValue(.8);
	*/

pidController->setMinTailRotorCollectiveControlValue (-10);
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e2       	ldi	r22, 0x20	; 32
    188e:	71 ec       	ldi	r23, 0xC1	; 193
    1890:	0e 94 82 0b 	call	0x1704	; 0x1704 <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd>
pidController->setMaxTailRotorCollectiveValue(10);
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	60 e2       	ldi	r22, 0x20	; 32
    189e:	71 e4       	ldi	r23, 0x41	; 65
    18a0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd>
	pidController->setControlMaxValue(1.0);
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	60 e8       	ldi	r22, 0x80	; 128
    18ae:	7f e3       	ldi	r23, 0x3F	; 63
    18b0:	0e 94 c2 0b 	call	0x1784	; 0x1784 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>
	pidController->setControlMinValue(-1.0);
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	60 e8       	ldi	r22, 0x80	; 128
    18be:	7f eb       	ldi	r23, 0xBF	; 191
    18c0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <main>:


int main(void)
{	
    18d2:	af 92       	push	r10
    18d4:	bf 92       	push	r11
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	66 97       	sbiw	r28, 0x16	; 22
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
    18f6:	8a e2       	ldi	r24, 0x2A	; 42
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    18fe:	8c 01       	movw	r16, r24
    1900:	c8 01       	movw	r24, r16
    1902:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN10helicopter5model11SystemModelC1Ev>
    1906:	1a 83       	std	Y+2, r17	; 0x02
    1908:	09 83       	std	Y+1, r16	; 0x01
	
	//TODO: This somehow needs to be a simulator servo driver
	//TODO: Setup the code so that it can be setup for a simulator or not setup for a simulator.
	ServoDriver *servoDriver = new ServoDriver();
    190a:	8a e0       	ldi	r24, 0x0A	; 10
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    1912:	8c 01       	movw	r16, r24
    1914:	c8 01       	movw	r24, r16
    1916:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN10helicopter7drivers11ServoDriverC1Ev>
    191a:	1c 83       	std	Y+4, r17	; 0x04
    191c:	0b 83       	std	Y+3, r16	; 0x03
	
	PIDController *pidController = new PIDController(model, servoDriver);
    191e:	8c e2       	ldi	r24, 0x2C	; 44
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    1926:	8c 01       	movw	r16, r24
    1928:	2b 81       	ldd	r18, Y+3	; 0x03
    192a:	3c 81       	ldd	r19, Y+4	; 0x04
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	a9 01       	movw	r20, r18
    1932:	bc 01       	movw	r22, r24
    1934:	c8 01       	movw	r24, r16
    1936:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>
    193a:	1e 83       	std	Y+6, r17	; 0x06
    193c:	0d 83       	std	Y+5, r16	; 0x05
	
	setupDefaultsandReferencePosition(model, pidController);
    193e:	2d 81       	ldd	r18, Y+5	; 0x05
    1940:	3e 81       	ldd	r19, Y+6	; 0x06
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	b9 01       	movw	r22, r18
    1948:	0e 94 02 0c 	call	0x1804	; 0x1804 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 10); //Good timeout when using the USB
    194c:	88 e0       	ldi	r24, 0x08	; 8
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    1954:	6c 01       	movw	r12, r24
    1956:	1a e0       	ldi	r17, 0x0A	; 10
    1958:	e1 2e       	mov	r14, r17
    195a:	f1 2c       	mov	r15, r1
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	34 e0       	ldi	r19, 0x04	; 4
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	54 e2       	ldi	r21, 0x24	; 36
    1968:	64 ef       	ldi	r22, 0xF4	; 244
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	c6 01       	movw	r24, r12
    196e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN10helicopter4util5TimerC1Em9PRESCALERm>
    1972:	d8 86       	std	Y+8, r13	; 0x08
    1974:	cf 82       	std	Y+7, r12	; 0x07
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);  
    1976:	8b e0       	ldi	r24, 0x0B	; 11
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    197e:	5c 01       	movw	r10, r24
    1980:	8f 81       	ldd	r24, Y+7	; 0x07
    1982:	98 85       	ldd	r25, Y+8	; 0x08
    1984:	cc 24       	eor	r12, r12
    1986:	c3 94       	inc	r12
    1988:	ee 24       	eor	r14, r14
    198a:	e3 94       	inc	r14
    198c:	8c 01       	movw	r16, r24
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	51 ee       	ldi	r21, 0xE1	; 225
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	c5 01       	movw	r24, r10
    199a:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>
    199e:	ba 86       	std	Y+10, r11	; 0x0a
    19a0:	a9 86       	std	Y+9, r10	; 0x09
	serialDriver->initialize();
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	fc 01       	movw	r30, r24
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	04 96       	adiw	r24, 0x04	; 4
    19ae:	fc 01       	movw	r30, r24
    19b0:	20 81       	ld	r18, Z
    19b2:	31 81       	ldd	r19, Z+1	; 0x01
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	f9 01       	movw	r30, r18
    19ba:	19 95       	eicall
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver);
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    19c4:	8c 01       	movw	r16, r24
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	bc 01       	movw	r22, r24
    19cc:	c8 01       	movw	r24, r16
    19ce:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>
    19d2:	1c 87       	std	Y+12, r17	; 0x0c
    19d4:	0b 87       	std	Y+11, r16	; 0x0b
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 20 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 20 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, 0, 4);//starting at tick 0, execute 50 times a second
    19d6:	8b e0       	ldi	r24, 0x0B	; 11
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    19de:	7c 01       	movw	r14, r24
    19e0:	49 81       	ldd	r20, Y+1	; 0x01
    19e2:	5a 81       	ldd	r21, Y+2	; 0x02
    19e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19e8:	04 e0       	ldi	r16, 0x04	; 4
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	bc 01       	movw	r22, r24
    19f2:	c7 01       	movw	r24, r14
    19f4:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    19f8:	fe 86       	std	Y+14, r15	; 0x0e
    19fa:	ed 86       	std	Y+13, r14	; 0x0d
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
    19fc:	8b e0       	ldi	r24, 0x0B	; 11
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    1a04:	7c 01       	movw	r14, r24
    1a06:	49 81       	ldd	r20, Y+1	; 0x01
    1a08:	5a 81       	ldd	r21, Y+2	; 0x02
    1a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a0e:	04 e0       	ldi	r16, 0x04	; 4
    1a10:	10 e0       	ldi	r17, 0x00	; 0
    1a12:	21 e0       	ldi	r18, 0x01	; 1
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	bc 01       	movw	r22, r24
    1a18:	c7 01       	movw	r24, r14
    1a1a:	0e 94 ac 1b 	call	0x3758	; 0x3758 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    1a1e:	f8 8a       	std	Y+16, r15	; 0x10
    1a20:	ef 86       	std	Y+15, r14	; 0x0f
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
    1a22:	8a e0       	ldi	r24, 0x0A	; 10
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    1a2a:	8c 01       	movw	r16, r24
    1a2c:	23 e0       	ldi	r18, 0x03	; 3
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	48 ec       	ldi	r20, 0xC8	; 200
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	62 e0       	ldi	r22, 0x02	; 2
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	c8 01       	movw	r24, r16
    1a3a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>
    1a3e:	1a 8b       	std	Y+18, r17	; 0x12
    1a40:	09 8b       	std	Y+17, r16	; 0x11
		
		
	//execute the pid outer loop at the PID_OUTER_LOOP_PERIOD rate. The division is to convert the period into ticks for the scheduler.
	PIDOuterLoopTask *pidOuterLoop = new PIDOuterLoopTask(pidController, 3, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    1a42:	89 e0       	ldi	r24, 0x09	; 9
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    1a4a:	8c 01       	movw	r16, r24
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	2a e0       	ldi	r18, 0x0A	; 10
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	43 e0       	ldi	r20, 0x03	; 3
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	bc 01       	movw	r22, r24
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	0e 94 ae 19 	call	0x335c	; 0x335c <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>
    1a60:	1c 8b       	std	Y+20, r17	; 0x14
    1a62:	0b 8b       	std	Y+19, r16	; 0x13
	
	

	Scheduler *scheduler = Scheduler::getScheduler();
    1a64:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1a68:	9e 8b       	std	Y+22, r25	; 0x16
    1a6a:	8d 8b       	std	Y+21, r24	; 0x15
	
	scheduler->addTask(flashTask);
    1a6c:	29 89       	ldd	r18, Y+17	; 0x11
    1a6e:	3a 89       	ldd	r19, Y+18	; 0x12
    1a70:	8d 89       	ldd	r24, Y+21	; 0x15
    1a72:	9e 89       	ldd	r25, Y+22	; 0x16
    1a74:	b9 01       	movw	r22, r18
    1a76:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
    1a7a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a7c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a7e:	8d 89       	ldd	r24, Y+21	; 0x15
    1a80:	9e 89       	ldd	r25, Y+22	; 0x16
    1a82:	b9 01       	movw	r22, r18
    1a84:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
    1a88:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a8a:	38 89       	ldd	r19, Y+16	; 0x10
    1a8c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a8e:	9e 89       	ldd	r25, Y+22	; 0x16
    1a90:	b9 01       	movw	r22, r18
    1a92:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidOuterLoop);
    1a96:	2b 89       	ldd	r18, Y+19	; 0x13
    1a98:	3c 89       	ldd	r19, Y+20	; 0x14
    1a9a:	8d 89       	ldd	r24, Y+21	; 0x15
    1a9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
    1aa4:	8d 89       	ldd	r24, Y+21	; 0x15
    1aa6:	9e 89       	ldd	r25, Y+22	; 0x16
    1aa8:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
    1aac:	8d 89       	ldd	r24, Y+21	; 0x15
    1aae:	9e 89       	ldd	r25, Y+22	; 0x16
    1ab0:	0e 94 bb 18 	call	0x3176	; 0x3176 <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	while(1)
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
    1ab4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ab6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ab8:	0e 94 51 18 	call	0x30a2	; 0x30a2 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
    1abc:	fb cf       	rjmp	.-10     	; 0x1ab4 <main+0x1e2>

00001abe <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	1f 92       	push	r1
    1ac4:	1f 92       	push	r1
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	22 e2       	ldi	r18, 0x22	; 34
    1ad4:	32 e0       	ldi	r19, 0x02	; 2
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	31 83       	std	Z+1, r19	; 0x01
    1ada:	20 83       	st	Z, r18
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN10helicopter5tasks4TaskD1Ev>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	81 70       	andi	r24, 0x01	; 1
    1aea:	99 27       	eor	r25, r25
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	21 f0       	breq	.+8      	; 0x1af8 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev+0x3a>
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	1f 92       	push	r1
    1b08:	1f 92       	push	r1
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	08 95       	ret

00001b2c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	2d 97       	sbiw	r28, 0x0d	; 13
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	9d 83       	std	Y+5, r25	; 0x05
    1b46:	8c 83       	std	Y+4, r24	; 0x04
    1b48:	7f 83       	std	Y+7, r23	; 0x07
    1b4a:	6e 83       	std	Y+6, r22	; 0x06
    1b4c:	59 87       	std	Y+9, r21	; 0x09
    1b4e:	48 87       	std	Y+8, r20	; 0x08
    1b50:	3b 87       	std	Y+11, r19	; 0x0b
    1b52:	2a 87       	std	Y+10, r18	; 0x0a
    1b54:	1d 87       	std	Y+13, r17	; 0x0d
    1b56:	0c 87       	std	Y+12, r16	; 0x0c
	for (int i = 0; i < payloadSize; i++)
    1b58:	1a 82       	std	Y+2, r1	; 0x02
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	26 c0       	rjmp	.+76     	; 0x1baa <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x7e>
	{
		byte b = msgPayload[i];
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	9a 81       	ldd	r25, Y+2	; 0x02
    1b62:	2e 81       	ldd	r18, Y+6	; 0x06
    1b64:	3f 81       	ldd	r19, Y+7	; 0x07
    1b66:	82 0f       	add	r24, r18
    1b68:	93 1f       	adc	r25, r19
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	80 81       	ld	r24, Z
    1b6e:	8b 83       	std	Y+3, r24	; 0x03
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
    1b70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b74:	fc 01       	movw	r30, r24
    1b76:	90 81       	ld	r25, Z
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	29 2f       	mov	r18, r25
    1b7c:	28 0f       	add	r18, r24
    1b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b82:	fc 01       	movw	r30, r24
    1b84:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
    1b86:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b88:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	20 81       	ld	r18, Z
    1b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b92:	fc 01       	movw	r30, r24
    1b94:	80 81       	ld	r24, Z
    1b96:	28 0f       	add	r18, r24
    1b98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	20 83       	st	Z, r18
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	29 81       	ldd	r18, Y+1	; 0x01
    1bae:	3a 81       	ldd	r19, Y+2	; 0x02
    1bb0:	88 85       	ldd	r24, Y+8	; 0x08
    1bb2:	99 85       	ldd	r25, Y+9	; 0x09
    1bb4:	28 17       	cp	r18, r24
    1bb6:	39 07       	cpc	r19, r25
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x90>
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	44 23       	and	r20, r20
    1bbe:	79 f6       	brne	.-98     	; 0x1b5e <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x32>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
    1bc0:	2d 96       	adiw	r28, 0x0d	; 13
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	64 97       	sbiw	r28, 0x14	; 20
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	9a 8b       	std	Y+18, r25	; 0x12
    1bf8:	89 8b       	std	Y+17, r24	; 0x11
    1bfa:	7c 8b       	std	Y+20, r23	; 0x14
    1bfc:	6b 8b       	std	Y+19, r22	; 0x13
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
    1bfe:	ed b6       	in	r14, 0x3d	; 61
    1c00:	fe b6       	in	r15, 0x3e	; 62
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
    1c02:	1a 82       	std	Y+2, r1	; 0x02
    1c04:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
    1c06:	8b 89       	ldd	r24, Y+19	; 0x13
    1c08:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3a>
    1c0e:	b3 c0       	rjmp	.+358    	; 0x1d76 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1a0>
    1c10:	8d b7       	in	r24, 0x3d	; 61
    1c12:	9e b7       	in	r25, 0x3e	; 62
    1c14:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
    1c16:	8b 89       	ldd	r24, Y+19	; 0x13
    1c18:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	80 81       	ld	r24, Z
    1c1e:	91 81       	ldd	r25, Z+1	; 0x01
    1c20:	04 96       	adiw	r24, 0x04	; 4
    1c22:	fc 01       	movw	r30, r24
    1c24:	20 81       	ld	r18, Z
    1c26:	31 81       	ldd	r19, Z+1	; 0x01
    1c28:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2c:	f9 01       	movw	r30, r18
    1c2e:	19 95       	eicall
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
    1c34:	8b 89       	ldd	r24, Y+19	; 0x13
    1c36:	9c 89       	ldd	r25, Y+20	; 0x14
    1c38:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN10helicopter8messages7Message14getMessageSizeEv>
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
    1c40:	8f 81       	ldd	r24, Y+7	; 0x07
    1c42:	98 85       	ldd	r25, Y+8	; 0x08
    1c44:	05 96       	adiw	r24, 0x05	; 5
    1c46:	9a 87       	std	Y+10, r25	; 0x0a
    1c48:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9c 87       	std	Y+12, r25	; 0x0c
    1c52:	8b 87       	std	Y+11, r24	; 0x0b
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	2d b7       	in	r18, 0x3d	; 61
    1c58:	3e b7       	in	r19, 0x3e	; 62
    1c5a:	28 1b       	sub	r18, r24
    1c5c:	39 0b       	sbc	r19, r25
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	3e bf       	out	0x3e, r19	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	2d bf       	out	0x3d, r18	; 61
    1c68:	8d b7       	in	r24, 0x3d	; 61
    1c6a:	9e b7       	in	r25, 0x3e	; 62
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	9e 87       	std	Y+14, r25	; 0x0e
    1c70:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
    1c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c76:	25 eb       	ldi	r18, 0xB5	; 181
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 83       	st	Z, r18
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	22 e6       	ldi	r18, 0x62	; 98
    1c82:	fc 01       	movw	r30, r24
    1c84:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	27 ed       	ldi	r18, 0xD7	; 215
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
    1c90:	4f 81       	ldd	r20, Y+7	; 0x07
    1c92:	58 85       	ldd	r21, Y+8	; 0x08
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	03 96       	adiw	r24, 0x03	; 3
    1c9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c9e:	b9 01       	movw	r22, r18
    1ca0:	0e 94 86 21 	call	0x430c	; 0x430c <memcpy>
		
		byte checksumA = 0;
    1ca4:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
    1ca6:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
    1ca8:	fe 01       	movw	r30, r28
    1caa:	70 96       	adiw	r30, 0x10	; 16
    1cac:	9e 01       	movw	r18, r28
    1cae:	21 5f       	subi	r18, 0xF1	; 241
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	4f 81       	ldd	r20, Y+7	; 0x07
    1cb4:	58 85       	ldd	r21, Y+8	; 0x08
    1cb6:	6d 81       	ldd	r22, Y+5	; 0x05
    1cb8:	7e 81       	ldd	r23, Y+6	; 0x06
    1cba:	89 89       	ldd	r24, Y+17	; 0x11
    1cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1cbe:	8f 01       	movw	r16, r30
    1cc0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	02 97       	sbiw	r24, 0x02	; 2
    1cca:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ccc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cce:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cd0:	82 0f       	add	r24, r18
    1cd2:	93 1f       	adc	r25, r19
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	48 89       	ldd	r20, Y+16	; 0x10
    1ce0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ce2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ce4:	82 0f       	add	r24, r18
    1ce6:	93 1f       	adc	r25, r19
    1ce8:	fc 01       	movw	r30, r24
    1cea:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1cec:	1c 82       	std	Y+4, r1	; 0x04
    1cee:	1b 82       	std	Y+3, r1	; 0x03
    1cf0:	23 c0       	rjmp	.+70     	; 0x1d38 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x162>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
    1cf2:	89 89       	ldd	r24, Y+17	; 0x11
    1cf4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	06 96       	adiw	r24, 0x06	; 6
    1d04:	fc 01       	movw	r30, r24
    1d06:	20 81       	ld	r18, Z
    1d08:	31 81       	ldd	r19, Z+1	; 0x01
    1d0a:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d0c:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	84 0f       	add	r24, r20
    1d14:	95 1f       	adc	r25, r21
    1d16:	fc 01       	movw	r30, r24
    1d18:	40 81       	ld	r20, Z
    1d1a:	89 89       	ldd	r24, Y+17	; 0x11
    1d1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	64 2f       	mov	r22, r20
    1d26:	f9 01       	movw	r30, r18
    1d28:	19 95       	eicall
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	28 17       	cp	r18, r24
    1d42:	39 07       	cpc	r19, r25
    1d44:	34 f4       	brge	.+12     	; 0x1d52 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17e>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	88 23       	and	r24, r24
    1d56:	69 f6       	brne	.-102    	; 0x1cf2 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x11c>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete [] msgPayload;
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	21 f0       	breq	.+8      	; 0x1d68 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x192>
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZdaPv>
		msgPayload = NULL;
    1d68:	1e 82       	std	Y+6, r1	; 0x06
    1d6a:	1d 82       	std	Y+5, r1	; 0x05
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de be       	out	0x3e, r13	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	fe be       	out	0x3e, r15	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	ed be       	out	0x3d, r14	; 61
    1d84:	64 96       	adiw	r28, 0x14	; 20
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	08 95       	ret

00001da2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	66 97       	sbiw	r28, 0x16	; 22
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	9c 8b       	std	Y+20, r25	; 0x14
    1dc4:	8b 8b       	std	Y+19, r24	; 0x13
    1dc6:	7e 8b       	std	Y+22, r23	; 0x16
    1dc8:	6d 8b       	std	Y+21, r22	; 0x15
	{
		receivedMessage = NULL;
	}
	
	return status;
    1dca:	ed b6       	in	r14, 0x3d	; 61
    1dcc:	fe b6       	in	r15, 0x3e	; 62
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
    1dce:	1a 82       	std	Y+2, r1	; 0x02
    1dd0:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
    1dd2:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
    1dd4:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
    1dd6:	1d 86       	std	Y+13, r1	; 0x0d
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1dd8:	1d c0       	rjmp	.+58     	; 0x1e14 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x72>
	{
		firstSyncByte = secondSyncByte;
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte);
    1de2:	8b 89       	ldd	r24, Y+19	; 0x13
    1de4:	9c 89       	ldd	r25, Y+20	; 0x14
    1de6:	fc 01       	movw	r30, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	fc 01       	movw	r30, r24
    1dee:	80 81       	ld	r24, Z
    1df0:	91 81       	ldd	r25, Z+1	; 0x01
    1df2:	08 96       	adiw	r24, 0x08	; 8
    1df4:	fc 01       	movw	r30, r24
    1df6:	20 81       	ld	r18, Z
    1df8:	31 81       	ldd	r19, Z+1	; 0x01
    1dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfe:	fc 01       	movw	r30, r24
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	ae 01       	movw	r20, r28
    1e06:	43 5f       	subi	r20, 0xF3	; 243
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	ba 01       	movw	r22, r20
    1e0c:	f9 01       	movw	r30, r18
    1e0e:	19 95       	eicall
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
    byte thirdSyncByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	85 3b       	cpi	r24, 0xB5	; 181
    1e18:	31 f4       	brne	.+12     	; 0x1e26 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	82 36       	cpi	r24, 0x62	; 98
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e22:	87 3d       	cpi	r24, 0xD7	; 215
    1e24:	31 f0       	breq	.+12     	; 0x1e32 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x92>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	88 23       	and	r24, r24
    1e36:	89 f6       	brne	.-94     	; 0x1dda <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x38>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receiveByte(thirdSyncByte);
	}
	
	if (status == 0)
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa0>
    1e40:	f9 c0       	rjmp	.+498    	; 0x2034 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
    1e42:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType);
    1e44:	8b 89       	ldd	r24, Y+19	; 0x13
    1e46:	9c 89       	ldd	r25, Y+20	; 0x14
    1e48:	fc 01       	movw	r30, r24
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	fc 01       	movw	r30, r24
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	08 96       	adiw	r24, 0x08	; 8
    1e56:	fc 01       	movw	r30, r24
    1e58:	20 81       	ld	r18, Z
    1e5a:	31 81       	ldd	r19, Z+1	; 0x01
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	fc 01       	movw	r30, r24
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	ae 01       	movw	r20, r28
    1e68:	42 5f       	subi	r20, 0xF2	; 242
    1e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6c:	ba 01       	movw	r22, r20
    1e6e:	f9 01       	movw	r30, r18
    1e70:	19 95       	eicall
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xde>
    1e7e:	da c0       	rjmp	.+436    	; 0x2034 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
		{
			int msgSize = 0;
    1e80:	1e 82       	std	Y+6, r1	; 0x06
    1e82:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
    1e84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	29 f4       	brne	.+10     	; 0x1e9a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xf8>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
    1e90:	85 e2       	ldi	r24, 0x25	; 37
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
					break;
    1e98:	05 c0       	rjmp	.+10     	; 0x1ea4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x102>
				default:
					//unrecognized message type.
					status = -2;
    1e9a:	8e ef       	ldi	r24, 0xFE	; 254
    1e9c:	9f ef       	ldi	r25, 0xFF	; 255
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
					break;
    1ea2:	00 00       	nop
			}
			
			if (status == 0)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x10c>
    1eac:	c3 c0       	rjmp	.+390    	; 0x2034 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
    1eae:	8d b7       	in	r24, 0x3d	; 61
    1eb0:	9e b7       	in	r25, 0x3e	; 62
    1eb2:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	9a 87       	std	Y+10, r25	; 0x0a
    1ebc:	89 87       	std	Y+9, r24	; 0x09
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	2d b7       	in	r18, 0x3d	; 61
    1ec2:	3e b7       	in	r19, 0x3e	; 62
    1ec4:	28 1b       	sub	r18, r24
    1ec6:	39 0b       	sbc	r19, r25
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	3e bf       	out	0x3e, r19	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	2d bf       	out	0x3d, r18	; 61
    1ed2:	8d b7       	in	r24, 0x3d	; 61
    1ed4:	9e b7       	in	r25, 0x3e	; 62
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	9c 87       	std	Y+12, r25	; 0x0c
    1eda:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
    1edc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ede:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 83       	st	Z, r18
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	98 87       	std	Y+8, r25	; 0x08
    1eec:	8f 83       	std	Y+7, r24	; 0x07
    1eee:	21 c0       	rjmp	.+66     	; 0x1f32 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x190>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	fc 01       	movw	r30, r24
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	08 96       	adiw	r24, 0x08	; 8
    1f02:	fc 01       	movw	r30, r24
    1f04:	20 81       	ld	r18, Z
    1f06:	31 81       	ldd	r19, Z+1	; 0x01
    1f08:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f0a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0e:	98 85       	ldd	r25, Y+8	; 0x08
    1f10:	48 0f       	add	r20, r24
    1f12:	59 1f       	adc	r21, r25
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	fc 01       	movw	r30, r24
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	ba 01       	movw	r22, r20
    1f20:	f9 01       	movw	r30, r18
    1f22:	19 95       	eicall
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    1f28:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2a:	98 85       	ldd	r25, Y+8	; 0x08
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	98 87       	std	Y+8, r25	; 0x08
    1f30:	8f 83       	std	Y+7, r24	; 0x07
    1f32:	2f 81       	ldd	r18, Y+7	; 0x07
    1f34:	38 85       	ldd	r19, Y+8	; 0x08
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	28 17       	cp	r18, r24
    1f3c:	39 07       	cpc	r19, r25
    1f3e:	34 f4       	brge	.+12     	; 0x1f4c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ac>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	88 23       	and	r24, r24
    1f50:	79 f6       	brne	.-98     	; 0x1ef0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x14e>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
				}
							
				if (status == 0)
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ba>
    1f5a:	67 c0       	rjmp	.+206    	; 0x202a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
    1f5c:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
    1f5e:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
    1f60:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
    1f62:	1a 8a       	std	Y+18, r1	; 0x12
								
					//Note: status is getting overwritten here.
					status = serialDriver->receiveByte(messageChecksumA);
    1f64:	8b 89       	ldd	r24, Y+19	; 0x13
    1f66:	9c 89       	ldd	r25, Y+20	; 0x14
    1f68:	fc 01       	movw	r30, r24
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	fc 01       	movw	r30, r24
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	08 96       	adiw	r24, 0x08	; 8
    1f76:	fc 01       	movw	r30, r24
    1f78:	20 81       	ld	r18, Z
    1f7a:	31 81       	ldd	r19, Z+1	; 0x01
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	fc 01       	movw	r30, r24
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	ae 01       	movw	r20, r28
    1f88:	41 5f       	subi	r20, 0xF1	; 241
    1f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8c:	ba 01       	movw	r22, r20
    1f8e:	f9 01       	movw	r30, r18
    1f90:	19 95       	eicall
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB);
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	08 96       	adiw	r24, 0x08	; 8
    1fa8:	fc 01       	movw	r30, r24
    1faa:	20 81       	ld	r18, Z
    1fac:	31 81       	ldd	r19, Z+1	; 0x01
    1fae:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	ae 01       	movw	r20, r28
    1fba:	40 5f       	subi	r20, 0xF0	; 240
    1fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbe:	ba 01       	movw	r22, r20
    1fc0:	f9 01       	movw	r30, r18
    1fc2:	19 95       	eicall
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	fe 01       	movw	r30, r28
    1fce:	72 96       	adiw	r30, 0x12	; 18
    1fd0:	9e 01       	movw	r18, r28
    1fd2:	2f 5e       	subi	r18, 0xEF	; 239
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	4d 81       	ldd	r20, Y+5	; 0x05
    1fd8:	5e 81       	ldd	r21, Y+6	; 0x06
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fde:	8f 01       	movw	r16, r30
    1fe0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
    1fe4:	99 89       	ldd	r25, Y+17	; 0x11
    1fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe8:	98 17       	cp	r25, r24
    1fea:	d9 f4       	brne	.+54     	; 0x2022 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
    1fec:	9a 89       	ldd	r25, Y+18	; 0x12
    1fee:	88 89       	ldd	r24, Y+16	; 0x10
    1ff0:	98 17       	cp	r25, r24
    1ff2:	b9 f4       	brne	.+46     	; 0x2022 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
					{
						//build the message
						switch(msgType)
    1ff4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	59 f4       	brne	.+22     	; 0x2016 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x274>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
    2000:	8b 85       	ldd	r24, Y+11	; 0x0b
    2002:	9c 85       	ldd	r25, Y+12	; 0x0c
    2004:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
    2008:	9c 01       	movw	r18, r24
    200a:	8d 89       	ldd	r24, Y+21	; 0x15
    200c:	9e 89       	ldd	r25, Y+22	; 0x16
    200e:	fc 01       	movw	r30, r24
    2010:	31 83       	std	Z+1, r19	; 0x01
    2012:	20 83       	st	Z, r18
							break;
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x27e>
							default:
								//unrecognized message type.
								status = -2;
    2016:	8e ef       	ldi	r24, 0xFE	; 254
    2018:	9f ef       	ldi	r25, 0xFF	; 255
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
							break;
    201e:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
    2020:	04 c0       	rjmp	.+8      	; 0x202a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -3;
    2022:	8d ef       	ldi	r24, 0xFD	; 253
    2024:	9f ef       	ldi	r25, 0xFF	; 255
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de be       	out	0x3e, r13	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	29 f0       	breq	.+10     	; 0x2046 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2a4>
	{
		receivedMessage = NULL;
    203c:	8d 89       	ldd	r24, Y+21	; 0x15
    203e:	9e 89       	ldd	r25, Y+22	; 0x16
    2040:	fc 01       	movw	r30, r24
    2042:	11 82       	std	Z+1, r1	; 0x01
    2044:	10 82       	st	Z, r1
	}
	
	return status;
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	fe be       	out	0x3e, r15	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	ed be       	out	0x3d, r14	; 61
    2054:	66 96       	adiw	r28, 0x16	; 22
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	08 95       	ret

00002072 <_ZN10helicopter8messages7MessageD1Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	1f 92       	push	r1
    2078:	1f 92       	push	r1
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
				{
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	20 e3       	ldi	r18, 0x30	; 48
    2088:	32 e0       	ldi	r19, 0x02	; 2
    208a:	fc 01       	movw	r30, r24
    208c:	31 83       	std	Z+1, r19	; 0x01
    208e:	20 83       	st	Z, r18
					
				}
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	81 70       	andi	r24, 0x01	; 1
    2096:	99 27       	eor	r25, r25
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	21 f0       	breq	.+8      	; 0x20a4 <_ZN10helicopter8messages7MessageD1Ev+0x32>
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	08 95       	ret

000020ae <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	1f 92       	push	r1
    20b4:	1f 92       	push	r1
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN10helicopter8messages7MessageD1Ev>
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	08 95       	ret

000020d8 <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	1f 92       	push	r1
    20de:	1f 92       	push	r1
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
	return msgSize;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	fc 01       	movw	r30, r24
    20ee:	83 81       	ldd	r24, Z+3	; 0x03
    20f0:	94 81       	ldd	r25, Z+4	; 0x04
}
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	08 95       	ret

000020fc <_ZN10helicopter8messages7Message8getBytesEv>:
				
/**
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	1f 92       	push	r1
    2102:	1f 92       	push	r1
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
	return NULL;
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	00 d0       	rcall	.+0      	; 0x2120 <_ZN10helicopter8messages7Message12buildMessageEPh+0x6>
    2120:	1f 92       	push	r1
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	7c 83       	std	Y+4, r23	; 0x04
    212c:	6b 83       	std	Y+3, r22	; 0x03
	//noop. subclass should implement this.
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <_ZN10helicopter8messages7MessageC1Ehi>:
			
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 d0       	rcall	.+0      	; 0x2142 <_ZN10helicopter8messages7MessageC1Ehi+0x6>
    2142:	1f 92       	push	r1
    2144:	1f 92       	push	r1
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	6b 83       	std	Y+3, r22	; 0x03
    2150:	5d 83       	std	Y+5, r21	; 0x05
    2152:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	20 e3       	ldi	r18, 0x30	; 48
    215a:	32 e0       	ldi	r19, 0x02	; 2
    215c:	fc 01       	movw	r30, r24
    215e:	31 83       	std	Z+1, r19	; 0x01
    2160:	20 83       	st	Z, r18
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	2b 81       	ldd	r18, Y+3	; 0x03
    2168:	fc 01       	movw	r30, r24
    216a:	22 83       	std	Z+2, r18	; 0x02
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	2c 81       	ldd	r18, Y+4	; 0x04
    2172:	3d 81       	ldd	r19, Y+5	; 0x05
    2174:	fc 01       	movw	r30, r24
    2176:	34 83       	std	Z+4, r19	; 0x04
    2178:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	1f 92       	push	r1
    2190:	1f 92       	push	r1
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	41 e0       	ldi	r20, 0x01	; 1
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	63 e0       	ldi	r22, 0x03	; 3
    21a4:	0e 94 9e 10 	call	0x213c	; 0x213c <_ZN10helicopter8messages7MessageC1Ehi>
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	2c e3       	ldi	r18, 0x3C	; 60
    21ae:	32 e0       	ldi	r19, 0x02	; 2
    21b0:	fc 01       	movw	r30, r24
    21b2:	31 83       	std	Z+1, r19	; 0x01
    21b4:	20 83       	st	Z, r18
				{
								
				}
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <_ZN10helicopter8messages11SyncMessageD1Ev>:
				
				~SyncMessage()
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	1f 92       	push	r1
    21c6:	1f 92       	push	r1
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
				{
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	2c e3       	ldi	r18, 0x3C	; 60
    21d6:	32 e0       	ldi	r19, 0x02	; 2
    21d8:	fc 01       	movw	r30, r24
    21da:	31 83       	std	Z+1, r19	; 0x01
    21dc:	20 83       	st	Z, r18
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN10helicopter8messages7MessageD1Ev>
					
				}
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	81 70       	andi	r24, 0x01	; 1
    21ec:	99 27       	eor	r25, r25
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	21 f0       	breq	.+8      	; 0x21fa <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <_ZN10helicopter8messages11SyncMessageD0Ev>:
				SyncMessage(): Message(MessageType,MessageSize)
				{
								
				}
				
				~SyncMessage()
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	1f 92       	push	r1
    220a:	1f 92       	push	r1
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10helicopter8messages11SyncMessageD1Ev>
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	08 95       	ret

0000222e <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	00 d0       	rcall	.+0      	; 0x2234 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_Znaj>
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	9a 81       	ldd	r25, Y+2	; 0x02
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	fc 01       	movw	r30, r24
    2258:	22 81       	ldd	r18, Z+2	; 0x02
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	fc 01       	movw	r30, r24
    2260:	20 83       	st	Z, r18
	
	return msg;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2266:	26 96       	adiw	r28, 0x06	; 6
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	08 95       	ret

00002278 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:

void SyncMessage::buildMessage(byte *message)
{
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	00 d0       	rcall	.+0      	; 0x227e <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x6>
    227e:	1f 92       	push	r1
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	7c 83       	std	Y+4, r23	; 0x04
    228a:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	41 f0       	breq	.+16     	; 0x22a4 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x2c>
	{
		msgType = message[0];
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	fc 01       	movw	r30, r24
    229a:	20 81       	ld	r18, Z
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	fc 01       	movw	r30, r24
    22a2:	22 83       	std	Z+2, r18	; 0x02
	}
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <_ZN10helicopter8messages7Message6encodeERPhRl>:
				
				/**
				 * Mem copies the value into the buffer pointer then increments
				 * the pointer location by the size of the value copied.
				 */
				void encode (byte *&buffPtr, long &val)
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <_ZN10helicopter8messages7Message6encodeERPhRl+0x6>
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <_ZN10helicopter8messages7Message6encodeERPhRl+0x8>
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	7c 83       	std	Y+4, r23	; 0x04
    22c4:	6b 83       	std	Y+3, r22	; 0x03
    22c6:	5e 83       	std	Y+6, r21	; 0x06
    22c8:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	fc 01       	movw	r30, r24
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	2d 81       	ldd	r18, Y+5	; 0x05
    22d6:	3e 81       	ldd	r19, Y+6	; 0x06
    22d8:	44 e0       	ldi	r20, 0x04	; 4
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	b9 01       	movw	r22, r18
    22de:	0e 94 86 21 	call	0x430c	; 0x430c <memcpy>
					buffPtr += sizeof(val);
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	fc 01       	movw	r30, r24
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	9c 01       	movw	r18, r24
    22ee:	2c 5f       	subi	r18, 0xFC	; 252
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	fc 01       	movw	r30, r24
    22f8:	31 83       	std	Z+1, r19	; 0x01
    22fa:	20 83       	st	Z, r18
				}
    22fc:	26 96       	adiw	r28, 0x06	; 6
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	08 95       	ret

0000230e <_ZN10helicopter8messages7Message6encodeERPhRm>:
				
				void encode (byte *&buffPtr, unsigned long &val)
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	00 d0       	rcall	.+0      	; 0x2314 <_ZN10helicopter8messages7Message6encodeERPhRm+0x6>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <_ZN10helicopter8messages7Message6encodeERPhRm+0x8>
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	9a 83       	std	Y+2, r25	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	7c 83       	std	Y+4, r23	; 0x04
    2320:	6b 83       	std	Y+3, r22	; 0x03
    2322:	5e 83       	std	Y+6, r21	; 0x06
    2324:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	fc 01       	movw	r30, r24
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	2d 81       	ldd	r18, Y+5	; 0x05
    2332:	3e 81       	ldd	r19, Y+6	; 0x06
    2334:	44 e0       	ldi	r20, 0x04	; 4
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	b9 01       	movw	r22, r18
    233a:	0e 94 86 21 	call	0x430c	; 0x430c <memcpy>
					buffPtr += sizeof(val);
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	fc 01       	movw	r30, r24
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	9c 01       	movw	r18, r24
    234a:	2c 5f       	subi	r18, 0xFC	; 252
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	fc 01       	movw	r30, r24
    2354:	31 83       	std	Z+1, r19	; 0x01
    2356:	20 83       	st	Z, r18
				}		
    2358:	26 96       	adiw	r28, 0x06	; 6
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <_ZN10helicopter8messages7Message6encodeERPhRh>:
				
				void encode (byte *&buffPtr, byte &val)
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	00 d0       	rcall	.+0      	; 0x2370 <_ZN10helicopter8messages7Message6encodeERPhRh+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <_ZN10helicopter8messages7Message6encodeERPhRh+0x8>
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	7c 83       	std	Y+4, r23	; 0x04
    237c:	6b 83       	std	Y+3, r22	; 0x03
    237e:	5e 83       	std	Y+6, r21	; 0x06
    2380:	4d 83       	std	Y+5, r20	; 0x05
				{
					*buffPtr = val;
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	fc 01       	movw	r30, r24
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	2d 81       	ldd	r18, Y+5	; 0x05
    238e:	3e 81       	ldd	r19, Y+6	; 0x06
    2390:	f9 01       	movw	r30, r18
    2392:	20 81       	ld	r18, Z
    2394:	fc 01       	movw	r30, r24
    2396:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	fc 01       	movw	r30, r24
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	9c 01       	movw	r18, r24
    23a4:	2f 5f       	subi	r18, 0xFF	; 255
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	fc 01       	movw	r30, r24
    23ae:	31 83       	std	Z+1, r19	; 0x01
    23b0:	20 83       	st	Z, r18
				}
    23b2:	26 96       	adiw	r28, 0x06	; 6
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	08 95       	ret

000023c4 <_ZN10helicopter8messages7Message6decodeERPhRh>:
				
				/**
				 * Copies the the value at the buff pointer location into the given val parameter and
				 * increments the buffer by the sizeof(val)
				 */
				void decode (byte *&buffPtr, byte &val)
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <_ZN10helicopter8messages7Message6decodeERPhRh+0x6>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <_ZN10helicopter8messages7Message6decodeERPhRh+0x8>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	7c 83       	std	Y+4, r23	; 0x04
    23d6:	6b 83       	std	Y+3, r22	; 0x03
    23d8:	5e 83       	std	Y+6, r21	; 0x06
    23da:	4d 83       	std	Y+5, r20	; 0x05
				{
					val = *buffPtr;
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	fc 01       	movw	r30, r24
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	fc 01       	movw	r30, r24
    23e8:	20 81       	ld	r18, Z
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	fc 01       	movw	r30, r24
    23f0:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	fc 01       	movw	r30, r24
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	9c 01       	movw	r18, r24
    23fe:	2f 5f       	subi	r18, 0xFF	; 255
    2400:	3f 4f       	sbci	r19, 0xFF	; 255
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	fc 01       	movw	r30, r24
    2408:	31 83       	std	Z+1, r19	; 0x01
    240a:	20 83       	st	Z, r18
				}
    240c:	26 96       	adiw	r28, 0x06	; 6
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	08 95       	ret

0000241e <_ZN10helicopter8messages7Message6decodeERPhRl>:
				
				void decode (byte *&buffPtr, long &val)
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	00 d0       	rcall	.+0      	; 0x2424 <_ZN10helicopter8messages7Message6decodeERPhRl+0x6>
    2424:	00 d0       	rcall	.+0      	; 0x2426 <_ZN10helicopter8messages7Message6decodeERPhRl+0x8>
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	7c 83       	std	Y+4, r23	; 0x04
    2430:	6b 83       	std	Y+3, r22	; 0x03
    2432:	5e 83       	std	Y+6, r21	; 0x06
    2434:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	fc 01       	movw	r30, r24
    243c:	20 81       	ld	r18, Z
    243e:	31 81       	ldd	r19, Z+1	; 0x01
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	44 e0       	ldi	r20, 0x04	; 4
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	b9 01       	movw	r22, r18
    244a:	0e 94 86 21 	call	0x430c	; 0x430c <memcpy>
					buffPtr += sizeof(val);
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	fc 01       	movw	r30, r24
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	9c 01       	movw	r18, r24
    245a:	2c 5f       	subi	r18, 0xFC	; 252
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	9c 81       	ldd	r25, Y+4	; 0x04
    2462:	fc 01       	movw	r30, r24
    2464:	31 83       	std	Z+1, r19	; 0x01
    2466:	20 83       	st	Z, r18
				}
    2468:	26 96       	adiw	r28, 0x06	; 6
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

0000247a <_ZN10helicopter8messages7Message6decodeERPhRm>:
				
				void decode (byte *&buffPtr, unsigned long &val)
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	00 d0       	rcall	.+0      	; 0x2480 <_ZN10helicopter8messages7Message6decodeERPhRm+0x6>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <_ZN10helicopter8messages7Message6decodeERPhRm+0x8>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	7c 83       	std	Y+4, r23	; 0x04
    248c:	6b 83       	std	Y+3, r22	; 0x03
    248e:	5e 83       	std	Y+6, r21	; 0x06
    2490:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	fc 01       	movw	r30, r24
    2498:	20 81       	ld	r18, Z
    249a:	31 81       	ldd	r19, Z+1	; 0x01
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	44 e0       	ldi	r20, 0x04	; 4
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	b9 01       	movw	r22, r18
    24a6:	0e 94 86 21 	call	0x430c	; 0x430c <memcpy>
					buffPtr += sizeof(val);
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	9c 81       	ldd	r25, Y+4	; 0x04
    24ae:	fc 01       	movw	r30, r24
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	9c 01       	movw	r18, r24
    24b6:	2c 5f       	subi	r18, 0xFC	; 252
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	fc 01       	movw	r30, r24
    24c0:	31 83       	std	Z+1, r19	; 0x01
    24c2:	20 83       	st	Z, r18
				}
    24c4:	26 96       	adiw	r28, 0x06	; 6
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	08 95       	ret

000024d6 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>:
			 * Z axis is pointing up out of the FC
			 */
			

			double MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(double val) { magYawDegrees = val; }	
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	00 d0       	rcall	.+0      	; 0x24dc <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x6>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x8>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	4b 83       	std	Y+3, r20	; 0x03
    24e8:	5c 83       	std	Y+4, r21	; 0x04
    24ea:	6d 83       	std	Y+5, r22	; 0x05
    24ec:	7e 83       	std	Y+6, r23	; 0x06
    24ee:	29 81       	ldd	r18, Y+1	; 0x01
    24f0:	3a 81       	ldd	r19, Y+2	; 0x02
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	ad 81       	ldd	r26, Y+5	; 0x05
    24f8:	be 81       	ldd	r27, Y+6	; 0x06
    24fa:	f9 01       	movw	r30, r18
    24fc:	80 83       	st	Z, r24
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	a2 83       	std	Z+2, r26	; 0x02
    2502:	b3 83       	std	Z+3, r27	; 0x03
    2504:	26 96       	adiw	r28, 0x06	; 6
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	08 95       	ret

00002516 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	00 d0       	rcall	.+0      	; 0x251c <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x6>
    251c:	00 d0       	rcall	.+0      	; 0x251e <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x8>
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	4b 83       	std	Y+3, r20	; 0x03
    2528:	5c 83       	std	Y+4, r21	; 0x04
    252a:	6d 83       	std	Y+5, r22	; 0x05
    252c:	7e 83       	std	Y+6, r23	; 0x06
    252e:	29 81       	ldd	r18, Y+1	; 0x01
    2530:	3a 81       	ldd	r19, Y+2	; 0x02
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	ad 81       	ldd	r26, Y+5	; 0x05
    2538:	be 81       	ldd	r27, Y+6	; 0x06
    253a:	f9 01       	movw	r30, r18
    253c:	80 8b       	std	Z+16, r24	; 0x10
    253e:	91 8b       	std	Z+17, r25	; 0x11
    2540:	a2 8b       	std	Z+18, r26	; 0x12
    2542:	b3 8b       	std	Z+19, r27	; 0x13
    2544:	26 96       	adiw	r28, 0x06	; 6
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	08 95       	ret

00002556 <_ZNK10helicopter5model11SystemModel15YawProportionalEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
			void YawIntegral(double val) { yawIntegral = val;}

			double YawProportional() const {return yawProportional;}
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	1f 92       	push	r1
    255c:	1f 92       	push	r1
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	fc 01       	movw	r30, r24
    256c:	84 8d       	ldd	r24, Z+28	; 0x1c
    256e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2570:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2572:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	08 95       	ret

00002582 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>:
			void YawProportional(double val) { yawProportional = val;}

			double YawDerivativeError() const {return yawDerivativeError;}
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	1f 92       	push	r1
    2588:	1f 92       	push	r1
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	fc 01       	movw	r30, r24
    2598:	80 a1       	ldd	r24, Z+32	; 0x20
    259a:	91 a1       	ldd	r25, Z+33	; 0x21
    259c:	a2 a1       	ldd	r26, Z+34	; 0x22
    259e:	b3 a1       	ldd	r27, Z+35	; 0x23
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	08 95       	ret

000025ae <_ZNK10helicopter5model11SystemModel8TimeoutsEv>:
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
																							
						
			int Timeouts() const {return timeouts; }
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	1f 92       	push	r1
    25b4:	1f 92       	push	r1
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	9a 81       	ldd	r25, Y+2	; 0x02
    25c2:	fc 01       	movw	r30, r24
    25c4:	84 a1       	ldd	r24, Z+36	; 0x24
    25c6:	95 a1       	ldd	r25, Z+37	; 0x25
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	08 95       	ret

000025d2 <_ZN10helicopter5model11SystemModel8TimeoutsEi>:
			void Timeouts(int val) { timeouts = val; }
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <_ZN10helicopter5model11SystemModel8TimeoutsEi+0x6>
    25d8:	1f 92       	push	r1
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	7c 83       	std	Y+4, r23	; 0x04
    25e4:	6b 83       	std	Y+3, r22	; 0x03
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	2b 81       	ldd	r18, Y+3	; 0x03
    25ec:	3c 81       	ldd	r19, Y+4	; 0x04
    25ee:	fc 01       	movw	r30, r24
    25f0:	35 a3       	std	Z+37, r19	; 0x25
    25f2:	24 a3       	std	Z+36, r18	; 0x24
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	08 95       	ret

00002602 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>:
			
			int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	1f 92       	push	r1
    2608:	1f 92       	push	r1
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	fc 01       	movw	r30, r24
    2618:	86 a1       	ldd	r24, Z+38	; 0x26
    261a:	97 a1       	ldd	r25, Z+39	; 0x27
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	08 95       	ret

00002626 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>:
			void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	00 d0       	rcall	.+0      	; 0x262c <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi+0x6>
    262c:	1f 92       	push	r1
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	7c 83       	std	Y+4, r23	; 0x04
    2638:	6b 83       	std	Y+3, r22	; 0x03
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	2b 81       	ldd	r18, Y+3	; 0x03
    2640:	3c 81       	ldd	r19, Y+4	; 0x04
    2642:	fc 01       	movw	r30, r24
    2644:	37 a3       	std	Z+39, r19	; 0x27
    2646:	26 a3       	std	Z+38, r18	; 0x26
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	08 95       	ret

00002656 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>:
			
			int ChecksumErrors() const {return checksumErrors; }
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	1f 92       	push	r1
    265c:	1f 92       	push	r1
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	9a 83       	std	Y+2, r25	; 0x02
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	fc 01       	movw	r30, r24
    266c:	80 a5       	ldd	r24, Z+40	; 0x28
    266e:	91 a5       	ldd	r25, Z+41	; 0x29
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>:
			void ChecksumErrors(int val) { checksumErrors = val; }
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	00 d0       	rcall	.+0      	; 0x2680 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi+0x6>
    2680:	1f 92       	push	r1
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	7c 83       	std	Y+4, r23	; 0x04
    268c:	6b 83       	std	Y+3, r22	; 0x03
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	2b 81       	ldd	r18, Y+3	; 0x03
    2694:	3c 81       	ldd	r19, Y+4	; 0x04
    2696:	fc 01       	movw	r30, r24
    2698:	31 a7       	std	Z+41, r19	; 0x29
    269a:	20 a7       	std	Z+40, r18	; 0x28
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	08 95       	ret

000026aa <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(YawControl) +
				sizeof(Timeouts) + 
				sizeof(UnrecognizedMsgTypes) + 
				sizeof(ChecksumErrors);
			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	1f 92       	push	r1
    26b0:	1f 92       	push	r1
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
					YawProportional(0),
					YawDerivativeError(0),
					YawControl(0),					
					Timeouts(0),
					UnrecognizedMsgTypes(0),
					ChecksumErrors(0)
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	45 e2       	ldi	r20, 0x25	; 37
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	62 e0       	ldi	r22, 0x02	; 2
    26c4:	0e 94 9e 10 	call	0x213c	; 0x213c <_ZN10helicopter8messages7MessageC1Ehi>
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	28 e4       	ldi	r18, 0x48	; 72
    26ce:	32 e0       	ldi	r19, 0x02	; 2
    26d0:	fc 01       	movw	r30, r24
    26d2:	31 83       	std	Z+1, r19	; 0x01
    26d4:	20 83       	st	Z, r18
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	fc 01       	movw	r30, r24
    26dc:	15 82       	std	Z+5, r1	; 0x05
    26de:	16 82       	std	Z+6, r1	; 0x06
    26e0:	17 82       	std	Z+7, r1	; 0x07
    26e2:	10 86       	std	Z+8, r1	; 0x08
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	fc 01       	movw	r30, r24
    26ea:	11 86       	std	Z+9, r1	; 0x09
    26ec:	12 86       	std	Z+10, r1	; 0x0a
    26ee:	13 86       	std	Z+11, r1	; 0x0b
    26f0:	14 86       	std	Z+12, r1	; 0x0c
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	fc 01       	movw	r30, r24
    26f8:	15 86       	std	Z+13, r1	; 0x0d
    26fa:	16 86       	std	Z+14, r1	; 0x0e
    26fc:	17 86       	std	Z+15, r1	; 0x0f
    26fe:	10 8a       	std	Z+16, r1	; 0x10
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	fc 01       	movw	r30, r24
    2706:	11 8a       	std	Z+17, r1	; 0x11
    2708:	12 8a       	std	Z+18, r1	; 0x12
    270a:	13 8a       	std	Z+19, r1	; 0x13
    270c:	14 8a       	std	Z+20, r1	; 0x14
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	fc 01       	movw	r30, r24
    2714:	15 8a       	std	Z+21, r1	; 0x15
    2716:	16 8a       	std	Z+22, r1	; 0x16
    2718:	17 8a       	std	Z+23, r1	; 0x17
    271a:	10 8e       	std	Z+24, r1	; 0x18
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	fc 01       	movw	r30, r24
    2722:	11 8e       	std	Z+25, r1	; 0x19
    2724:	12 8e       	std	Z+26, r1	; 0x1a
    2726:	13 8e       	std	Z+27, r1	; 0x1b
    2728:	14 8e       	std	Z+28, r1	; 0x1c
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	fc 01       	movw	r30, r24
    2730:	15 8e       	std	Z+29, r1	; 0x1d
    2732:	16 8e       	std	Z+30, r1	; 0x1e
    2734:	17 8e       	std	Z+31, r1	; 0x1f
    2736:	10 a2       	std	Z+32, r1	; 0x20
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	fc 01       	movw	r30, r24
    273e:	11 a2       	std	Z+33, r1	; 0x21
    2740:	12 a2       	std	Z+34, r1	; 0x22
    2742:	13 a2       	std	Z+35, r1	; 0x23
    2744:	14 a2       	std	Z+36, r1	; 0x24
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	fc 01       	movw	r30, r24
    274c:	15 a2       	std	Z+37, r1	; 0x25
    274e:	16 a2       	std	Z+38, r1	; 0x26
    2750:	17 a2       	std	Z+39, r1	; 0x27
    2752:	10 a6       	std	Z+40, r1	; 0x28
				{
				
				}
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

0000275e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	1f 92       	push	r1
    2764:	1f 92       	push	r1
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	28 e4       	ldi	r18, 0x48	; 72
    2774:	32 e0       	ldi	r19, 0x02	; 2
    2776:	fc 01       	movw	r30, r24
    2778:	31 83       	std	Z+1, r19	; 0x01
    277a:	20 83       	st	Z, r18
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN10helicopter8messages7MessageD1Ev>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	81 70       	andi	r24, 0x01	; 1
    278a:	99 27       	eor	r25, r25
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	21 f0       	breq	.+8      	; 0x2798 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	08 95       	ret

000027a2 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	1f 92       	push	r1
    27a8:	1f 92       	push	r1
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	0e 94 af 13 	call	0x275e	; 0x275e <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	08 95       	ret

000027cc <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    27dc:	85 e2       	ldi	r24, 0x25	; 37
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_Znaj>
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
	
	encode (msgPtr, msgType);
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	ac 01       	movw	r20, r24
    27f6:	4e 5f       	subi	r20, 0xFE	; 254
    27f8:	5f 4f       	sbci	r21, 0xFF	; 255
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	9e 01       	movw	r18, r28
    2800:	2d 5f       	subi	r18, 0xFD	; 253
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
    2804:	b9 01       	movw	r22, r18
    2806:	0e 94 b5 11 	call	0x236a	; 0x236a <_ZN10helicopter8messages7Message6encodeERPhRh>
	encode (msgPtr, MagYaw);
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	ac 01       	movw	r20, r24
    2810:	4b 5f       	subi	r20, 0xFB	; 251
    2812:	5f 4f       	sbci	r21, 0xFF	; 255
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	9e 01       	movw	r18, r28
    281a:	2d 5f       	subi	r18, 0xFD	; 253
    281c:	3f 4f       	sbci	r19, 0xFF	; 255
    281e:	b9 01       	movw	r22, r18
    2820:	0e 94 87 11 	call	0x230e	; 0x230e <_ZN10helicopter8messages7Message6encodeERPhRm>
	encode (msgPtr, YawVelocityDegreesPerSecond);
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	ac 01       	movw	r20, r24
    282a:	47 5f       	subi	r20, 0xF7	; 247
    282c:	5f 4f       	sbci	r21, 0xFF	; 255
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	9e 01       	movw	r18, r28
    2834:	2d 5f       	subi	r18, 0xFD	; 253
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	b9 01       	movw	r22, r18
    283a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawIntegral);
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	ac 01       	movw	r20, r24
    2844:	43 5f       	subi	r20, 0xF3	; 243
    2846:	5f 4f       	sbci	r21, 0xFF	; 255
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	9e 01       	movw	r18, r28
    284e:	2d 5f       	subi	r18, 0xFD	; 253
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	b9 01       	movw	r22, r18
    2854:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawProportional);
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	ac 01       	movw	r20, r24
    285e:	4f 5e       	subi	r20, 0xEF	; 239
    2860:	5f 4f       	sbci	r21, 0xFF	; 255
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	9e 01       	movw	r18, r28
    2868:	2d 5f       	subi	r18, 0xFD	; 253
    286a:	3f 4f       	sbci	r19, 0xFF	; 255
    286c:	b9 01       	movw	r22, r18
    286e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawDerivativeError);
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	ac 01       	movw	r20, r24
    2878:	4b 5e       	subi	r20, 0xEB	; 235
    287a:	5f 4f       	sbci	r21, 0xFF	; 255
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	9e 01       	movw	r18, r28
    2882:	2d 5f       	subi	r18, 0xFD	; 253
    2884:	3f 4f       	sbci	r19, 0xFF	; 255
    2886:	b9 01       	movw	r22, r18
    2888:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, YawControl);
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	ac 01       	movw	r20, r24
    2892:	47 5e       	subi	r20, 0xE7	; 231
    2894:	5f 4f       	sbci	r21, 0xFF	; 255
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	9e 01       	movw	r18, r28
    289c:	2d 5f       	subi	r18, 0xFD	; 253
    289e:	3f 4f       	sbci	r19, 0xFF	; 255
    28a0:	b9 01       	movw	r22, r18
    28a2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, Timeouts);
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	9e 81       	ldd	r25, Y+6	; 0x06
    28aa:	ac 01       	movw	r20, r24
    28ac:	43 5e       	subi	r20, 0xE3	; 227
    28ae:	5f 4f       	sbci	r21, 0xFF	; 255
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	9e 01       	movw	r18, r28
    28b6:	2d 5f       	subi	r18, 0xFD	; 253
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	b9 01       	movw	r22, r18
    28bc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, UnrecognizedMsgTypes);
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	ac 01       	movw	r20, r24
    28c6:	4f 5d       	subi	r20, 0xDF	; 223
    28c8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	9e 01       	movw	r18, r28
    28d0:	2d 5f       	subi	r18, 0xFD	; 253
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	b9 01       	movw	r22, r18
    28d6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
	encode (msgPtr, ChecksumErrors);
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	ac 01       	movw	r20, r24
    28e0:	4b 5d       	subi	r20, 0xDB	; 219
    28e2:	5f 4f       	sbci	r21, 0xFF	; 255
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	9e 01       	movw	r18, r28
    28ea:	2d 5f       	subi	r18, 0xFD	; 253
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	b9 01       	movw	r22, r18
    28f0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN10helicopter8messages7Message6encodeERPhRl>
				
	return msg;
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28f8:	26 96       	adiw	r28, 0x06	; 6
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	08 95       	ret

0000290a <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	00 d0       	rcall	.+0      	; 0x2910 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x6>
    2910:	1f 92       	push	r1
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	7c 83       	std	Y+4, r23	; 0x04
    291c:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	09 f4       	brne	.+2      	; 0x2928 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1e>
    2926:	82 c0       	rjmp	.+260    	; 0x2a2c <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x122>
	{
		decode (message,msgType);
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	ac 01       	movw	r20, r24
    292e:	4e 5f       	subi	r20, 0xFE	; 254
    2930:	5f 4f       	sbci	r21, 0xFF	; 255
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	9e 01       	movw	r18, r28
    2938:	2d 5f       	subi	r18, 0xFD	; 253
    293a:	3f 4f       	sbci	r19, 0xFF	; 255
    293c:	b9 01       	movw	r22, r18
    293e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_ZN10helicopter8messages7Message6decodeERPhRh>
		decode (message,MagYaw);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	ac 01       	movw	r20, r24
    2948:	4b 5f       	subi	r20, 0xFB	; 251
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	9e 01       	movw	r18, r28
    2952:	2d 5f       	subi	r18, 0xFD	; 253
    2954:	3f 4f       	sbci	r19, 0xFF	; 255
    2956:	b9 01       	movw	r22, r18
    2958:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN10helicopter8messages7Message6decodeERPhRm>
		decode (message,YawVelocityDegreesPerSecond);
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	ac 01       	movw	r20, r24
    2962:	47 5f       	subi	r20, 0xF7	; 247
    2964:	5f 4f       	sbci	r21, 0xFF	; 255
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	9e 01       	movw	r18, r28
    296c:	2d 5f       	subi	r18, 0xFD	; 253
    296e:	3f 4f       	sbci	r19, 0xFF	; 255
    2970:	b9 01       	movw	r22, r18
    2972:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawIntegral);
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	9a 81       	ldd	r25, Y+2	; 0x02
    297a:	ac 01       	movw	r20, r24
    297c:	43 5f       	subi	r20, 0xF3	; 243
    297e:	5f 4f       	sbci	r21, 0xFF	; 255
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	9e 01       	movw	r18, r28
    2986:	2d 5f       	subi	r18, 0xFD	; 253
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
    298a:	b9 01       	movw	r22, r18
    298c:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawProportional);
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	9a 81       	ldd	r25, Y+2	; 0x02
    2994:	ac 01       	movw	r20, r24
    2996:	4f 5e       	subi	r20, 0xEF	; 239
    2998:	5f 4f       	sbci	r21, 0xFF	; 255
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	9a 81       	ldd	r25, Y+2	; 0x02
    299e:	9e 01       	movw	r18, r28
    29a0:	2d 5f       	subi	r18, 0xFD	; 253
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	b9 01       	movw	r22, r18
    29a6:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,YawDerivativeError);	
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	ac 01       	movw	r20, r24
    29b0:	4b 5e       	subi	r20, 0xEB	; 235
    29b2:	5f 4f       	sbci	r21, 0xFF	; 255
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	9e 01       	movw	r18, r28
    29ba:	2d 5f       	subi	r18, 0xFD	; 253
    29bc:	3f 4f       	sbci	r19, 0xFF	; 255
    29be:	b9 01       	movw	r22, r18
    29c0:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message, YawControl);					
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	9a 81       	ldd	r25, Y+2	; 0x02
    29c8:	ac 01       	movw	r20, r24
    29ca:	47 5e       	subi	r20, 0xE7	; 231
    29cc:	5f 4f       	sbci	r21, 0xFF	; 255
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	9e 01       	movw	r18, r28
    29d4:	2d 5f       	subi	r18, 0xFD	; 253
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	b9 01       	movw	r22, r18
    29da:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,Timeouts);
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	ac 01       	movw	r20, r24
    29e4:	43 5e       	subi	r20, 0xE3	; 227
    29e6:	5f 4f       	sbci	r21, 0xFF	; 255
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	9a 81       	ldd	r25, Y+2	; 0x02
    29ec:	9e 01       	movw	r18, r28
    29ee:	2d 5f       	subi	r18, 0xFD	; 253
    29f0:	3f 4f       	sbci	r19, 0xFF	; 255
    29f2:	b9 01       	movw	r22, r18
    29f4:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,UnrecognizedMsgTypes);
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	ac 01       	movw	r20, r24
    29fe:	4f 5d       	subi	r20, 0xDF	; 223
    2a00:	5f 4f       	sbci	r21, 0xFF	; 255
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	9e 01       	movw	r18, r28
    2a08:	2d 5f       	subi	r18, 0xFD	; 253
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	b9 01       	movw	r22, r18
    2a0e:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
		decode (message,ChecksumErrors);
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	9a 81       	ldd	r25, Y+2	; 0x02
    2a16:	ac 01       	movw	r20, r24
    2a18:	4b 5d       	subi	r20, 0xDB	; 219
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	9e 01       	movw	r18, r28
    2a22:	2d 5f       	subi	r18, 0xFD	; 253
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	b9 01       	movw	r22, r18
    2a28:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN10helicopter8messages7Message6decodeERPhRl>
	}
}
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh+0xa>
    2a44:	1f 92       	push	r1
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    2a4e:	89 e2       	ldi	r24, 0x29	; 41
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    2a56:	8c 01       	movw	r16, r24
    2a58:	c8 01       	movw	r24, r16
    2a5a:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    2a5e:	1a 83       	std	Y+2, r17	; 0x02
    2a60:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	fc 01       	movw	r30, r24
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	06 96       	adiw	r24, 0x06	; 6
    2a6e:	fc 01       	movw	r30, r24
    2a70:	20 81       	ld	r18, Z
    2a72:	31 81       	ldd	r19, Z+1	; 0x01
    2a74:	4b 81       	ldd	r20, Y+3	; 0x03
    2a76:	5c 81       	ldd	r21, Y+4	; 0x04
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	ba 01       	movw	r22, r20
    2a7e:	f9 01       	movw	r30, r18
    2a80:	19 95       	eicall
	
	return msg;
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	08 95       	ret

00002a98 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>:

SystemTelemetryMessage * SystemTelemetryMessage::buildMessageFromModel(SystemModel *model)
{
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE+0xa>
    2aa2:	1f 92       	push	r1
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	9c 83       	std	Y+4, r25	; 0x04
    2aaa:	8b 83       	std	Y+3, r24	; 0x03
	//throw std::exception("The method or operation is not implemented.");
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    2aac:	89 e2       	ldi	r24, 0x29	; 41
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    2ab4:	8c 01       	movw	r16, r24
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    2abc:	1a 83       	std	Y+2, r17	; 0x02
    2abe:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagYaw = model->MagYawDegrees() * 100;
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	48 ec       	ldi	r20, 0xC8	; 200
    2ad2:	52 e4       	ldi	r21, 0x42	; 66
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	29 81       	ldd	r18, Y+1	; 0x01
    2aee:	3a 81       	ldd	r19, Y+2	; 0x02
    2af0:	f9 01       	movw	r30, r18
    2af2:	85 83       	std	Z+5, r24	; 0x05
    2af4:	96 83       	std	Z+6, r25	; 0x06
    2af6:	a7 83       	std	Z+7, r26	; 0x07
    2af8:	b0 87       	std	Z+8, r27	; 0x08
	message->YawDerivativeError = model->YawDerivativeError() * 100;
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	0e 94 c1 12 	call	0x2582	; 0x2582 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	48 ec       	ldi	r20, 0xC8	; 200
    2b0c:	52 e4       	ldi	r21, 0x42	; 66
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fixsfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	29 81       	ldd	r18, Y+1	; 0x01
    2b28:	3a 81       	ldd	r19, Y+2	; 0x02
    2b2a:	f9 01       	movw	r30, r18
    2b2c:	85 8b       	std	Z+21, r24	; 0x15
    2b2e:	96 8b       	std	Z+22, r25	; 0x16
    2b30:	a7 8b       	std	Z+23, r26	; 0x17
    2b32:	b0 8f       	std	Z+24, r27	; 0x18
	message->YawIntegral = model->YawIntegral() * 100;
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	48 ec       	ldi	r20, 0xC8	; 200
    2b46:	52 e4       	ldi	r21, 0x42	; 66
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fixsfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	29 81       	ldd	r18, Y+1	; 0x01
    2b62:	3a 81       	ldd	r19, Y+2	; 0x02
    2b64:	f9 01       	movw	r30, r18
    2b66:	85 87       	std	Z+13, r24	; 0x0d
    2b68:	96 87       	std	Z+14, r25	; 0x0e
    2b6a:	a7 87       	std	Z+15, r26	; 0x0f
    2b6c:	b0 8b       	std	Z+16, r27	; 0x10
	message->YawProportional = model->YawProportional() * 100;
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZNK10helicopter5model11SystemModel15YawProportionalEv>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	48 ec       	ldi	r20, 0xC8	; 200
    2b80:	52 e4       	ldi	r21, 0x42	; 66
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fixsfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	29 81       	ldd	r18, Y+1	; 0x01
    2b9c:	3a 81       	ldd	r19, Y+2	; 0x02
    2b9e:	f9 01       	movw	r30, r18
    2ba0:	81 8b       	std	Z+17, r24	; 0x11
    2ba2:	92 8b       	std	Z+18, r25	; 0x12
    2ba4:	a3 8b       	std	Z+19, r26	; 0x13
    2ba6:	b4 8b       	std	Z+20, r27	; 0x14
	message->YawVelocityDegreesPerSecond = model->YawVelocityDegreesPerSecond() * 100;
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	48 ec       	ldi	r20, 0xC8	; 200
    2bba:	52 e4       	ldi	r21, 0x42	; 66
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fixsfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	29 81       	ldd	r18, Y+1	; 0x01
    2bd6:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd8:	f9 01       	movw	r30, r18
    2bda:	81 87       	std	Z+9, r24	; 0x09
    2bdc:	92 87       	std	Z+10, r25	; 0x0a
    2bde:	a3 87       	std	Z+11, r26	; 0x0b
    2be0:	b4 87       	std	Z+12, r27	; 0x0c
	message->YawControl = model->YawControl() * 100;
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK10helicopter5model11SystemModel10YawControlEv>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	48 ec       	ldi	r20, 0xC8	; 200
    2bf4:	52 e4       	ldi	r21, 0x42	; 66
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fixsfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	29 81       	ldd	r18, Y+1	; 0x01
    2c10:	3a 81       	ldd	r19, Y+2	; 0x02
    2c12:	f9 01       	movw	r30, r18
    2c14:	81 8f       	std	Z+25, r24	; 0x19
    2c16:	92 8f       	std	Z+26, r25	; 0x1a
    2c18:	a3 8f       	std	Z+27, r26	; 0x1b
    2c1a:	b4 8f       	std	Z+28, r27	; 0x1c
	message->ChecksumErrors = model->ChecksumErrors();
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c20:	0e 94 2b 13 	call	0x2656	; 0x2656 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    2c24:	aa 27       	eor	r26, r26
    2c26:	97 fd       	sbrc	r25, 7
    2c28:	a0 95       	com	r26
    2c2a:	ba 2f       	mov	r27, r26
    2c2c:	29 81       	ldd	r18, Y+1	; 0x01
    2c2e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c30:	f9 01       	movw	r30, r18
    2c32:	85 a3       	std	Z+37, r24	; 0x25
    2c34:	96 a3       	std	Z+38, r25	; 0x26
    2c36:	a7 a3       	std	Z+39, r26	; 0x27
    2c38:	b0 a7       	std	Z+40, r27	; 0x28
	message->Timeouts = model->Timeouts();
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    2c42:	aa 27       	eor	r26, r26
    2c44:	97 fd       	sbrc	r25, 7
    2c46:	a0 95       	com	r26
    2c48:	ba 2f       	mov	r27, r26
    2c4a:	29 81       	ldd	r18, Y+1	; 0x01
    2c4c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c4e:	f9 01       	movw	r30, r18
    2c50:	85 8f       	std	Z+29, r24	; 0x1d
    2c52:	96 8f       	std	Z+30, r25	; 0x1e
    2c54:	a7 8f       	std	Z+31, r26	; 0x1f
    2c56:	b0 a3       	std	Z+32, r27	; 0x20
	message->UnrecognizedMsgTypes = model->UnrecognizedMsgTypes();
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    2c60:	aa 27       	eor	r26, r26
    2c62:	97 fd       	sbrc	r25, 7
    2c64:	a0 95       	com	r26
    2c66:	ba 2f       	mov	r27, r26
    2c68:	29 81       	ldd	r18, Y+1	; 0x01
    2c6a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c6c:	f9 01       	movw	r30, r18
    2c6e:	81 a3       	std	Z+33, r24	; 0x21
    2c70:	92 a3       	std	Z+34, r25	; 0x22
    2c72:	a3 a3       	std	Z+35, r26	; 0x23
    2c74:	b4 a3       	std	Z+36, r27	; 0x24
	
	return message;
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	08 95       	ret

00002c8c <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>:
	model->UnrecognizedMsgTypes(this->UnrecognizedMsgTypes);
	model->ChecksumErrors(this->ChecksumErrors);
}

void SystemTelemetryMessage::updateModelFromMessageFromSimulator (SystemModel *model)
{
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	00 d0       	rcall	.+0      	; 0x2c92 <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE+0x6>
    2c92:	1f 92       	push	r1
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	7c 83       	std	Y+4, r23	; 0x04
    2c9e:	6b 83       	std	Y+3, r22	; 0x03
	model->MagYawDegrees((double) this->MagYaw / 100);
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	85 81       	ldd	r24, Z+5	; 0x05
    2ca8:	96 81       	ldd	r25, Z+6	; 0x06
    2caa:	a7 81       	ldd	r26, Z+7	; 0x07
    2cac:	b0 85       	ldd	r27, Z+8	; 0x08
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__floatunsisf>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	48 ec       	ldi	r20, 0xC8	; 200
    2cc0:	52 e4       	ldi	r21, 0x42	; 66
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__divsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd2:	ac 01       	movw	r20, r24
    2cd4:	bd 01       	movw	r22, r26
    2cd6:	c9 01       	movw	r24, r18
    2cd8:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>
	model->YawVelocityDegreesPerSecond((double) this->YawVelocityDegreesPerSecond / 100);
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	81 85       	ldd	r24, Z+9	; 0x09
    2ce4:	92 85       	ldd	r25, Z+10	; 0x0a
    2ce6:	a3 85       	ldd	r26, Z+11	; 0x0b
    2ce8:	b4 85       	ldd	r27, Z+12	; 0x0c
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <__floatsisf>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	48 ec       	ldi	r20, 0xC8	; 200
    2cfc:	52 e4       	ldi	r21, 0x42	; 66
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__divsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d0e:	ac 01       	movw	r20, r24
    2d10:	bd 01       	movw	r22, r26
    2d12:	c9 01       	movw	r24, r18
    2d14:	0e 94 8b 12 	call	0x2516	; 0x2516 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	08 95       	ret

00002d26 <_ZN10helicopter5tasks4Task8getDelayEv>:
				 * subclasses runTaskImpl to execute the actual task logic.
				 */
				virtual void runTask();
				
					
				int getDelay()
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	1f 92       	push	r1
    2d2c:	1f 92       	push	r1
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	9a 83       	std	Y+2, r25	; 0x02
    2d34:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
				}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	08 95       	ret

00002d4a <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	1f 92       	push	r1
    2d50:	1f 92       	push	r1
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	9a 83       	std	Y+2, r25	; 0x02
    2d58:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	fc 01       	movw	r30, r24
    2d60:	84 81       	ldd	r24, Z+4	; 0x04
    2d62:	95 81       	ldd	r25, Z+5	; 0x05
				}
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	08 95       	ret

00002d6e <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    2d74:	1f 92       	push	r1
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	7c 83       	std	Y+4, r23	; 0x04
    2d80:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	2b 81       	ldd	r18, Y+3	; 0x03
    2d88:	3c 81       	ldd	r19, Y+4	; 0x04
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	33 83       	std	Z+3, r19	; 0x03
    2d8e:	22 83       	std	Z+2, r18	; 0x02
				}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	08 95       	ret

00002d9e <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	1f 92       	push	r1
    2da4:	1f 92       	push	r1
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	9a 83       	std	Y+2, r25	; 0x02
    2dac:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	9a 81       	ldd	r25, Y+2	; 0x02
    2db2:	fc 01       	movw	r30, r24
    2db4:	86 81       	ldd	r24, Z+6	; 0x06
				}
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	08 95       	ret

00002dc0 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
    2dce:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	26 83       	std	Z+6, r18	; 0x06
				}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	df 91       	pop	r29
    2de2:	cf 91       	pop	r28
    2de4:	08 95       	ret

00002de6 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	1f 92       	push	r1
    2dec:	1f 92       	push	r1
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	9c 01       	movw	r18, r24
    2e02:	21 50       	subi	r18, 0x01	; 1
    2e04:	31 09       	sbc	r19, r1
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	33 83       	std	Z+3, r19	; 0x03
    2e0e:	22 83       	std	Z+2, r18	; 0x02
				}
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	08 95       	ret

00002e1a <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for determining which tasks are ready to run.
				*/
				void start();
				
				int getNumOfTasks()
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	1f 92       	push	r1
    2e20:	1f 92       	push	r1
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	9a 83       	std	Y+2, r25	; 0x02
    2e28:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2e:	fc 01       	movw	r30, r24
    2e30:	84 89       	ldd	r24, Z+20	; 0x14
    2e32:	95 89       	ldd	r25, Z+21	; 0x15
				}
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	08 95       	ret

00002e3e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	1f 92       	push	r1
    2e44:	1f 92       	push	r1
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	08 95       	ret

00002e5c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	0f 93       	push	r16
    2e62:	1f 93       	push	r17
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    2e6c:	80 91 88 02 	lds	r24, 0x0288
    2e70:	90 91 89 02 	lds	r25, 0x0289
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	a1 f4       	brne	.+40     	; 0x2ea0 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x44>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    2e78:	8a e1       	ldi	r24, 0x1A	; 26
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_Znwj>
    2e80:	7c 01       	movw	r14, r24
    2e82:	08 ec       	ldi	r16, 0xC8	; 200
    2e84:	10 e0       	ldi	r17, 0x00	; 0
    2e86:	20 e4       	ldi	r18, 0x40	; 64
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	54 e2       	ldi	r21, 0x24	; 36
    2e8e:	64 ef       	ldi	r22, 0xF4	; 244
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	c7 01       	movw	r24, r14
    2e94:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    2e98:	f0 92 89 02 	sts	0x0289, r15
    2e9c:	e0 92 88 02 	sts	0x0288, r14
	}

	return scheduler;
    2ea0:	80 91 88 02 	lds	r24, 0x0288
    2ea4:	90 91 89 02 	lds	r25, 0x0289
}
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	ff 90       	pop	r15
    2eb2:	ef 90       	pop	r14
    2eb4:	08 95       	ret

00002eb6 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	2a 97       	sbiw	r28, 0x0a	; 10
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	4b 83       	std	Y+3, r20	; 0x03
    2ed4:	5c 83       	std	Y+4, r21	; 0x04
    2ed6:	6d 83       	std	Y+5, r22	; 0x05
    2ed8:	7e 83       	std	Y+6, r23	; 0x06
    2eda:	38 87       	std	Y+8, r19	; 0x08
    2edc:	2f 83       	std	Y+7, r18	; 0x07
    2ede:	1a 87       	std	Y+10, r17	; 0x0a
    2ee0:	09 87       	std	Y+9, r16	; 0x09
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    2ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee4:	98 85       	ldd	r25, Y+8	; 0x08
    2ee6:	9c 01       	movw	r18, r24
    2ee8:	44 27       	eor	r20, r20
    2eea:	37 fd       	sbrc	r19, 7
    2eec:	40 95       	com	r20
    2eee:	54 2f       	mov	r21, r20
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	ad 81       	ldd	r26, Y+5	; 0x05
    2ef6:	be 81       	ldd	r27, Y+6	; 0x06
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 16 20 	call	0x402c	; 0x402c <__udivmodsi4>
    2f00:	da 01       	movw	r26, r20
    2f02:	c9 01       	movw	r24, r18
    2f04:	29 85       	ldd	r18, Y+9	; 0x09
    2f06:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f08:	44 27       	eor	r20, r20
    2f0a:	37 fd       	sbrc	r19, 7
    2f0c:	40 95       	com	r20
    2f0e:	54 2f       	mov	r21, r20
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	0e 94 16 20 	call	0x402c	; 0x402c <__udivmodsi4>
    2f18:	da 01       	movw	r26, r20
    2f1a:	c9 01       	movw	r24, r18
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	9a 81       	ldd	r25, Y+2	; 0x02
    2f22:	fc 01       	movw	r30, r24
    2f24:	37 8b       	std	Z+23, r19	; 0x17
    2f26:	26 8b       	std	Z+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	26 89       	ldd	r18, Z+22	; 0x16
    2f30:	37 89       	ldd	r19, Z+23	; 0x17
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	9a 81       	ldd	r25, Y+2	; 0x02
    2f36:	fc 01       	movw	r30, r24
    2f38:	37 8b       	std	Z+23, r19	; 0x17
    2f3a:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescaler;
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	2f 81       	ldd	r18, Y+7	; 0x07
    2f42:	38 85       	ldd	r19, Y+8	; 0x08
    2f44:	fc 01       	movw	r30, r24
    2f46:	31 8f       	std	Z+25, r19	; 0x19
    2f48:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	fc 01       	movw	r30, r24
    2f50:	15 8a       	std	Z+21, r1	; 0x15
    2f52:	14 8a       	std	Z+20, r1	; 0x14
}
    2f54:	2a 96       	adiw	r28, 0x0a	; 10
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	1f 91       	pop	r17
    2f66:	0f 91       	pop	r16
    2f68:	08 95       	ret

00002f6a <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    2f70:	1f 92       	push	r1
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	9a 83       	std	Y+2, r25	; 0x02
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	7c 83       	std	Y+4, r23	; 0x04
    2f7c:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	fc 01       	movw	r30, r24
    2f84:	84 89       	ldd	r24, Z+20	; 0x14
    2f86:	95 89       	ldd	r25, Z+21	; 0x15
    2f88:	8a 30       	cpi	r24, 0x0A	; 10
    2f8a:	91 05       	cpc	r25, r1
    2f8c:	04 f5       	brge	.+64     	; 0x2fce <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	fc 01       	movw	r30, r24
    2f94:	84 89       	ldd	r24, Z+20	; 0x14
    2f96:	95 89       	ldd	r25, Z+21	; 0x15
    2f98:	29 81       	ldd	r18, Y+1	; 0x01
    2f9a:	3a 81       	ldd	r19, Y+2	; 0x02
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	82 0f       	add	r24, r18
    2fa2:	93 1f       	adc	r25, r19
    2fa4:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa6:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa8:	fc 01       	movw	r30, r24
    2faa:	31 83       	std	Z+1, r19	; 0x01
    2fac:	20 83       	st	Z, r18
		numOfTasks++;
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	84 89       	ldd	r24, Z+20	; 0x14
    2fb6:	95 89       	ldd	r25, Z+21	; 0x15
    2fb8:	9c 01       	movw	r18, r24
    2fba:	2f 5f       	subi	r18, 0xFF	; 255
    2fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	35 8b       	std	Z+21, r19	; 0x15
    2fc6:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    2fce:	8f ef       	ldi	r24, 0xFF	; 255
    2fd0:	9f ef       	ldi	r25, 0xFF	; 255
}
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	08 95       	ret

00002fe0 <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    2fe6:	1f 92       	push	r1
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    2ff0:	1a 82       	std	Y+2, r1	; 0x02
    2ff2:	19 82       	std	Y+1, r1	; 0x01
    2ff4:	24 c0       	rjmp	.+72     	; 0x303e <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    2ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	82 0f       	add	r24, r18
    3004:	93 1f       	adc	r25, r19
    3006:	fc 01       	movw	r30, r24
    3008:	80 81       	ld	r24, Z
    300a:	91 81       	ldd	r25, Z+1	; 0x01
    300c:	fc 01       	movw	r30, r24
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	06 96       	adiw	r24, 0x06	; 6
    3014:	fc 01       	movw	r30, r24
    3016:	20 81       	ld	r18, Z
    3018:	31 81       	ldd	r19, Z+1	; 0x01
    301a:	4b 81       	ldd	r20, Y+3	; 0x03
    301c:	5c 81       	ldd	r21, Y+4	; 0x04
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	84 0f       	add	r24, r20
    3028:	95 1f       	adc	r25, r21
    302a:	fc 01       	movw	r30, r24
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	f9 01       	movw	r30, r18
    3032:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	01 96       	adiw	r24, 0x01	; 1
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	fc 01       	movw	r30, r24
    3044:	24 89       	ldd	r18, Z+20	; 0x14
    3046:	35 89       	ldd	r19, Z+21	; 0x15
    3048:	41 e0       	ldi	r20, 0x01	; 1
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	82 17       	cp	r24, r18
    3050:	93 07       	cpc	r25, r19
    3052:	0c f0       	brlt	.+2      	; 0x3056 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	44 23       	and	r20, r20
    3058:	71 f6       	brne	.-100    	; 0x2ff6 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    305a:	88 e8       	ldi	r24, 0x88	; 136
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	2b 81       	ldd	r18, Y+3	; 0x03
    3060:	3c 81       	ldd	r19, Y+4	; 0x04
    3062:	f9 01       	movw	r30, r18
    3064:	26 89       	ldd	r18, Z+22	; 0x16
    3066:	37 89       	ldd	r19, Z+23	; 0x17
    3068:	fc 01       	movw	r30, r24
    306a:	31 83       	std	Z+1, r19	; 0x01
    306c:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    306e:	81 e8       	ldi	r24, 0x81	; 129
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	21 e8       	ldi	r18, 0x81	; 129
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	f9 01       	movw	r30, r18
    3078:	20 81       	ld	r18, Z
    307a:	28 60       	ori	r18, 0x08	; 8
    307c:	fc 01       	movw	r30, r24
    307e:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    3080:	8f e6       	ldi	r24, 0x6F	; 111
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	2f e6       	ldi	r18, 0x6F	; 111
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	f9 01       	movw	r30, r18
    308a:	20 81       	ld	r18, Z
    308c:	22 60       	ori	r18, 0x02	; 2
    308e:	fc 01       	movw	r30, r24
    3090:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    3092:	78 94       	sei
}
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	08 95       	ret

000030a2 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	00 d0       	rcall	.+0      	; 0x30a8 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	9e 83       	std	Y+6, r25	; 0x06
    30b0:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    30b2:	1c 82       	std	Y+4, r1	; 0x04
    30b4:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    30b6:	1a 82       	std	Y+2, r1	; 0x02
    30b8:	19 82       	std	Y+1, r1	; 0x01
    30ba:	2a c0       	rjmp	.+84     	; 0x3110 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
	{
		task = tasks[i];
    30bc:	2d 81       	ldd	r18, Y+5	; 0x05
    30be:	3e 81       	ldd	r19, Y+6	; 0x06
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	82 0f       	add	r24, r18
    30ca:	93 1f       	adc	r25, r19
    30cc:	fc 01       	movw	r30, r24
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	9c 83       	std	Y+4, r25	; 0x04
    30d4:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	9c 81       	ldd	r25, Y+4	; 0x04
    30da:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    30de:	88 23       	and	r24, r24
    30e0:	91 f0       	breq	.+36     	; 0x3106 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x64>
		{
			task->setIsReadyToRun(false);
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	fc 01       	movw	r30, r24
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	08 96       	adiw	r24, 0x08	; 8
    30f8:	fc 01       	movw	r30, r24
    30fa:	20 81       	ld	r18, Z
    30fc:	31 81       	ldd	r19, Z+1	; 0x01
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	9c 81       	ldd	r25, Y+4	; 0x04
    3102:	f9 01       	movw	r30, r18
    3104:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	9e 81       	ldd	r25, Y+6	; 0x06
    3114:	fc 01       	movw	r30, r24
    3116:	24 89       	ldd	r18, Z+20	; 0x14
    3118:	35 89       	ldd	r19, Z+21	; 0x15
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	82 17       	cp	r24, r18
    3122:	93 07       	cpc	r25, r19
    3124:	0c f0       	brlt	.+2      	; 0x3128 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x86>
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	44 23       	and	r20, r20
    312a:	41 f6       	brne	.-112    	; 0x30bc <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
	}*/
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    312c:	83 e5       	ldi	r24, 0x53	; 83
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	23 e5       	ldi	r18, 0x53	; 83
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	f9 01       	movw	r30, r18
    3136:	20 81       	ld	r18, Z
    3138:	21 7f       	andi	r18, 0xF1	; 241
    313a:	fc 01       	movw	r30, r24
    313c:	20 83       	st	Z, r18
	sleep_mode();
    313e:	83 e5       	ldi	r24, 0x53	; 83
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	23 e5       	ldi	r18, 0x53	; 83
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	f9 01       	movw	r30, r18
    3148:	20 81       	ld	r18, Z
    314a:	21 60       	ori	r18, 0x01	; 1
    314c:	fc 01       	movw	r30, r24
    314e:	20 83       	st	Z, r18
    3150:	88 95       	sleep
    3152:	83 e5       	ldi	r24, 0x53	; 83
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	23 e5       	ldi	r18, 0x53	; 83
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	f9 01       	movw	r30, r18
    315c:	20 81       	ld	r18, Z
    315e:	2e 7f       	andi	r18, 0xFE	; 254
    3160:	fc 01       	movw	r30, r24
    3162:	20 83       	st	Z, r18
}
    3164:	26 96       	adiw	r28, 0x06	; 6
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	08 95       	ret

00003176 <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	1f 92       	push	r1
    317c:	1f 92       	push	r1
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	fc 01       	movw	r30, r24
    318c:	80 8d       	ldd	r24, Z+24	; 0x18
    318e:	91 8d       	ldd	r25, Z+25	; 0x19
    3190:	80 34       	cpi	r24, 0x40	; 64
    3192:	91 05       	cpc	r25, r1
    3194:	39 f1       	breq	.+78     	; 0x31e4 <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    3196:	81 34       	cpi	r24, 0x41	; 65
    3198:	91 05       	cpc	r25, r1
    319a:	3c f4       	brge	.+14     	; 0x31aa <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    319c:	81 30       	cpi	r24, 0x01	; 1
    319e:	91 05       	cpc	r25, r1
    31a0:	69 f0       	breq	.+26     	; 0x31bc <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    31a2:	88 30       	cpi	r24, 0x08	; 8
    31a4:	91 05       	cpc	r25, r1
    31a6:	a1 f0       	breq	.+40     	; 0x31d0 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    31a8:	3b c0       	rjmp	.+118    	; 0x3220 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    31aa:	81 15       	cp	r24, r1
    31ac:	f1 e0       	ldi	r31, 0x01	; 1
    31ae:	9f 07       	cpc	r25, r31
    31b0:	19 f1       	breq	.+70     	; 0x31f8 <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    31b2:	81 15       	cp	r24, r1
    31b4:	24 e0       	ldi	r18, 0x04	; 4
    31b6:	92 07       	cpc	r25, r18
    31b8:	49 f1       	breq	.+82     	; 0x320c <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    31ba:	32 c0       	rjmp	.+100    	; 0x3220 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    31bc:	81 e8       	ldi	r24, 0x81	; 129
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	21 e8       	ldi	r18, 0x81	; 129
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	f9 01       	movw	r30, r18
    31c6:	20 81       	ld	r18, Z
    31c8:	21 60       	ori	r18, 0x01	; 1
    31ca:	fc 01       	movw	r30, r24
    31cc:	20 83       	st	Z, r18
			break;
    31ce:	31 c0       	rjmp	.+98     	; 0x3232 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    31d0:	81 e8       	ldi	r24, 0x81	; 129
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	21 e8       	ldi	r18, 0x81	; 129
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	f9 01       	movw	r30, r18
    31da:	20 81       	ld	r18, Z
    31dc:	22 60       	ori	r18, 0x02	; 2
    31de:	fc 01       	movw	r30, r24
    31e0:	20 83       	st	Z, r18
			break;
    31e2:	27 c0       	rjmp	.+78     	; 0x3232 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    31e4:	81 e8       	ldi	r24, 0x81	; 129
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	21 e8       	ldi	r18, 0x81	; 129
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	f9 01       	movw	r30, r18
    31ee:	20 81       	ld	r18, Z
    31f0:	23 60       	ori	r18, 0x03	; 3
    31f2:	fc 01       	movw	r30, r24
    31f4:	20 83       	st	Z, r18
			break;
    31f6:	1d c0       	rjmp	.+58     	; 0x3232 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    31f8:	81 e8       	ldi	r24, 0x81	; 129
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	21 e8       	ldi	r18, 0x81	; 129
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	f9 01       	movw	r30, r18
    3202:	20 81       	ld	r18, Z
    3204:	24 60       	ori	r18, 0x04	; 4
    3206:	fc 01       	movw	r30, r24
    3208:	20 83       	st	Z, r18
			break;
    320a:	13 c0       	rjmp	.+38     	; 0x3232 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    320c:	81 e8       	ldi	r24, 0x81	; 129
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	21 e8       	ldi	r18, 0x81	; 129
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	f9 01       	movw	r30, r18
    3216:	20 81       	ld	r18, Z
    3218:	25 60       	ori	r18, 0x05	; 5
    321a:	fc 01       	movw	r30, r24
    321c:	20 83       	st	Z, r18
			break;
    321e:	09 c0       	rjmp	.+18     	; 0x3232 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    3220:	81 e8       	ldi	r24, 0x81	; 129
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	21 e8       	ldi	r18, 0x81	; 129
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	f9 01       	movw	r30, r18
    322a:	20 81       	ld	r18, Z
    322c:	21 60       	ori	r18, 0x01	; 1
    322e:	fc 01       	movw	r30, r24
    3230:	20 83       	st	Z, r18
	}
}
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	08 95       	ret

0000323c <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    323c:	1f 92       	push	r1
    323e:	0f 92       	push	r0
    3240:	00 90 5f 00 	lds	r0, 0x005F
    3244:	0f 92       	push	r0
    3246:	11 24       	eor	r1, r1
    3248:	00 90 5b 00 	lds	r0, 0x005B
    324c:	0f 92       	push	r0
    324e:	2f 93       	push	r18
    3250:	3f 93       	push	r19
    3252:	4f 93       	push	r20
    3254:	5f 93       	push	r21
    3256:	6f 93       	push	r22
    3258:	7f 93       	push	r23
    325a:	8f 93       	push	r24
    325c:	9f 93       	push	r25
    325e:	af 93       	push	r26
    3260:	bf 93       	push	r27
    3262:	ef 93       	push	r30
    3264:	ff 93       	push	r31
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	00 d0       	rcall	.+0      	; 0x326c <__vector_17+0x30>
    326c:	00 d0       	rcall	.+0      	; 0x326e <__vector_17+0x32>
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
	//TODO do we want to stop interrupts in this method?
	Scheduler *scheduler = Scheduler::getScheduler();
    3272:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    3276:	9c 83       	std	Y+4, r25	; 0x04
    3278:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    327a:	1e 82       	std	Y+6, r1	; 0x06
    327c:	1d 82       	std	Y+5, r1	; 0x05
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    327e:	1a 82       	std	Y+2, r1	; 0x02
    3280:	19 82       	std	Y+1, r1	; 0x01
    3282:	33 c0       	rjmp	.+102    	; 0x32ea <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	9c 81       	ldd	r25, Y+4	; 0x04
    3288:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    328c:	9c 01       	movw	r18, r24
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	82 0f       	add	r24, r18
    3298:	93 1f       	adc	r25, r19
    329a:	fc 01       	movw	r30, r24
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <_ZN10helicopter5tasks4Task8getDelayEv>
    32ac:	21 e0       	ldi	r18, 0x01	; 1
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <__vector_17+0x78>
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	22 23       	and	r18, r18
    32b6:	81 f0       	breq	.+32     	; 0x32d8 <__vector_17+0x9c>
		{
			//Mark the task as ready to run
			task->setIsReadyToRun(true);
    32b8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ba:	9e 81       	ldd	r25, Y+6	; 0x06
    32bc:	61 e0       	ldi	r22, 0x01	; 1
    32be:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_ZN10helicopter5tasks4Task9getPeriodEv>
    32ca:	9c 01       	movw	r18, r24
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	b9 01       	movw	r22, r18
    32d2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <_ZN10helicopter5tasks4Task8setDelayEi>
    32d6:	04 c0       	rjmp	.+8      	; 0x32e0 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_ZN10helicopter5tasks4Task11reduceDelayEv>
	
	Task *task = NULL;
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	01 96       	adiw	r24, 0x01	; 1
    32e6:	9a 83       	std	Y+2, r25	; 0x02
    32e8:	89 83       	std	Y+1, r24	; 0x01
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    32f2:	9c 01       	movw	r18, r24
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	9a 81       	ldd	r25, Y+2	; 0x02
    32fa:	82 17       	cp	r24, r18
    32fc:	93 07       	cpc	r25, r19
    32fe:	0c f0       	brlt	.+2      	; 0x3302 <__vector_17+0xc6>
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	44 23       	and	r20, r20
    3304:	09 f0       	breq	.+2      	; 0x3308 <__vector_17+0xcc>
    3306:	be cf       	rjmp	.-132    	; 0x3284 <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    3308:	26 96       	adiw	r28, 0x06	; 6
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	ff 91       	pop	r31
    331a:	ef 91       	pop	r30
    331c:	bf 91       	pop	r27
    331e:	af 91       	pop	r26
    3320:	9f 91       	pop	r25
    3322:	8f 91       	pop	r24
    3324:	7f 91       	pop	r23
    3326:	6f 91       	pop	r22
    3328:	5f 91       	pop	r21
    332a:	4f 91       	pop	r20
    332c:	3f 91       	pop	r19
    332e:	2f 91       	pop	r18
    3330:	0f 90       	pop	r0
    3332:	00 92 5b 00 	sts	0x005B, r0
    3336:	0f 90       	pop	r0
    3338:	00 92 5f 00 	sts	0x005F, r0
    333c:	0f 90       	pop	r0
    333e:	1f 90       	pop	r1
    3340:	18 95       	reti

00003342 <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	1f 92       	push	r1
    3348:	1f 92       	push	r1
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	9a 83       	std	Y+2, r25	; 0x02
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDOuterLoopTask.h"

using namespace helicopter::tasks;

PIDOuterLoopTask::PIDOuterLoopTask (PIDController *pidController, int delay, int period) :
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	28 97       	sbiw	r28, 0x08	; 8
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	7c 83       	std	Y+4, r23	; 0x04
    3376:	6b 83       	std	Y+3, r22	; 0x03
    3378:	5e 83       	std	Y+6, r21	; 0x06
    337a:	4d 83       	std	Y+5, r20	; 0x05
    337c:	38 87       	std	Y+8, r19	; 0x08
    337e:	2f 83       	std	Y+7, r18	; 0x07
Task(delay, period),
pidController(pidController)
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	9a 81       	ldd	r25, Y+2	; 0x02
    3384:	4f 81       	ldd	r20, Y+7	; 0x07
    3386:	58 85       	ldd	r21, Y+8	; 0x08
    3388:	2d 81       	ldd	r18, Y+5	; 0x05
    338a:	3e 81       	ldd	r19, Y+6	; 0x06
    338c:	b9 01       	movw	r22, r18
    338e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN10helicopter5tasks4TaskC1Eii>
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	9a 81       	ldd	r25, Y+2	; 0x02
    3396:	24 e5       	ldi	r18, 0x54	; 84
    3398:	32 e0       	ldi	r19, 0x02	; 2
    339a:	fc 01       	movw	r30, r24
    339c:	31 83       	std	Z+1, r19	; 0x01
    339e:	20 83       	st	Z, r18
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	9a 81       	ldd	r25, Y+2	; 0x02
    33a4:	2b 81       	ldd	r18, Y+3	; 0x03
    33a6:	3c 81       	ldd	r19, Y+4	; 0x04
    33a8:	fc 01       	movw	r30, r24
    33aa:	30 87       	std	Z+8, r19	; 0x08
    33ac:	27 83       	std	Z+7, r18	; 0x07
{
	
}
    33ae:	28 96       	adiw	r28, 0x08	; 8
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	08 95       	ret

000033c0 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>:

void PIDOuterLoopTask::runTaskImpl()
{
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	1f 92       	push	r1
    33c6:	1f 92       	push	r1
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	9a 83       	std	Y+2, r25	; 0x02
    33ce:	89 83       	std	Y+1, r24	; 0x01
	pidController->tailRotorCollectiveOuterLoopUpdate();
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	9a 81       	ldd	r25, Y+2	; 0x02
    33d4:	fc 01       	movw	r30, r24
    33d6:	87 81       	ldd	r24, Z+7	; 0x07
    33d8:	90 85       	ldd	r25, Z+8	; 0x08
    33da:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>
}
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	08 95       	ret

000033e8 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDOuterLoopTask : public Task
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	1f 92       	push	r1
    33ee:	1f 92       	push	r1
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	9a 81       	ldd	r25, Y+2	; 0x02
    33fc:	24 e5       	ldi	r18, 0x54	; 84
    33fe:	32 e0       	ldi	r19, 0x02	; 2
    3400:	fc 01       	movw	r30, r24
    3402:	31 83       	std	Z+1, r19	; 0x01
    3404:	20 83       	st	Z, r18
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN10helicopter5tasks4TaskD1Ev>
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	81 70       	andi	r24, 0x01	; 1
    3414:	99 27       	eor	r25, r25
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	21 f0       	breq	.+8      	; 0x3422 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev+0x3a>
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	9a 81       	ldd	r25, Y+2	; 0x02
    341e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	08 95       	ret

0000342c <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>:
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	1f 92       	push	r1
    3432:	1f 92       	push	r1
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	9a 81       	ldd	r25, Y+2	; 0x02
    3440:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	08 95       	ret

00003456 <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	2a 97       	sbiw	r28, 0x0a	; 10
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	89 83       	std	Y+1, r24	; 0x01
    3472:	7c 83       	std	Y+4, r23	; 0x04
    3474:	6b 83       	std	Y+3, r22	; 0x03
    3476:	5e 83       	std	Y+6, r21	; 0x06
    3478:	4d 83       	std	Y+5, r20	; 0x05
    347a:	38 87       	std	Y+8, r19	; 0x08
    347c:	2f 83       	std	Y+7, r18	; 0x07
    347e:	1a 87       	std	Y+10, r17	; 0x0a
    3480:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	49 85       	ldd	r20, Y+9	; 0x09
    3488:	5a 85       	ldd	r21, Y+10	; 0x0a
    348a:	2f 81       	ldd	r18, Y+7	; 0x07
    348c:	38 85       	ldd	r19, Y+8	; 0x08
    348e:	b9 01       	movw	r22, r18
    3490:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN10helicopter5tasks4TaskC1Eii>
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	9a 81       	ldd	r25, Y+2	; 0x02
    3498:	22 e6       	ldi	r18, 0x62	; 98
    349a:	32 e0       	ldi	r19, 0x02	; 2
    349c:	fc 01       	movw	r30, r24
    349e:	31 83       	std	Z+1, r19	; 0x01
    34a0:	20 83       	st	Z, r18
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	2b 81       	ldd	r18, Y+3	; 0x03
    34a8:	3c 81       	ldd	r19, Y+4	; 0x04
    34aa:	fc 01       	movw	r30, r24
    34ac:	30 87       	std	Z+8, r19	; 0x08
    34ae:	27 83       	std	Z+7, r18	; 0x07
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	2d 81       	ldd	r18, Y+5	; 0x05
    34b6:	3e 81       	ldd	r19, Y+6	; 0x06
    34b8:	fc 01       	movw	r30, r24
    34ba:	32 87       	std	Z+10, r19	; 0x0a
    34bc:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    34be:	2a 96       	adiw	r28, 0x0a	; 10
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:

void SimTelemetryTask::runTaskImpl() 
{
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	2d 97       	sbiw	r28, 0x0d	; 13
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	9d 87       	std	Y+13, r25	; 0x0d
    34ea:	8c 87       	std	Y+12, r24	; 0x0c
	
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    34ec:	ce 01       	movw	r24, r28
    34ee:	05 96       	adiw	r24, 0x05	; 5
    34f0:	0e 94 c5 10 	call	0x218a	; 0x218a <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    34f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    34f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    34f8:	fc 01       	movw	r30, r24
    34fa:	87 81       	ldd	r24, Z+7	; 0x07
    34fc:	90 85       	ldd	r25, Z+8	; 0x08
    34fe:	9e 01       	movw	r18, r28
    3500:	2b 5f       	subi	r18, 0xFB	; 251
    3502:	3f 4f       	sbci	r19, 0xFF	; 255
    3504:	b9 01       	movw	r22, r18
    3506:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    350a:	9a 83       	std	Y+2, r25	; 0x02
    350c:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	9a 81       	ldd	r25, Y+2	; 0x02
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	b1 f5       	brne	.+108    	; 0x3582 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    3516:	1b 86       	std	Y+11, r1	; 0x0b
    3518:	1a 86       	std	Y+10, r1	; 0x0a
	
		status = radioInterface->receive(message);
    351a:	8c 85       	ldd	r24, Y+12	; 0x0c
    351c:	9d 85       	ldd	r25, Y+13	; 0x0d
    351e:	fc 01       	movw	r30, r24
    3520:	87 81       	ldd	r24, Z+7	; 0x07
    3522:	90 85       	ldd	r25, Z+8	; 0x08
    3524:	9e 01       	movw	r18, r28
    3526:	26 5f       	subi	r18, 0xF6	; 246
    3528:	3f 4f       	sbci	r19, 0xFF	; 255
    352a:	b9 01       	movw	r22, r18
    352c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    3530:	9a 83       	std	Y+2, r25	; 0x02
    3532:	89 83       	std	Y+1, r24	; 0x01
	
		if (status == 0 && message != NULL)
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	9a 81       	ldd	r25, Y+2	; 0x02
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	19 f5       	brne	.+70     	; 0x3582 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
    353c:	8a 85       	ldd	r24, Y+10	; 0x0a
    353e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	f9 f0       	breq	.+62     	; 0x3582 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    3544:	8a 85       	ldd	r24, Y+10	; 0x0a
    3546:	9b 85       	ldd	r25, Y+11	; 0x0b
    3548:	9c 83       	std	Y+4, r25	; 0x04
    354a:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			telemMsg->updateModelFromMessageFromSimulator(model);
    354c:	8c 85       	ldd	r24, Y+12	; 0x0c
    354e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3550:	fc 01       	movw	r30, r24
    3552:	21 85       	ldd	r18, Z+9	; 0x09
    3554:	32 85       	ldd	r19, Z+10	; 0x0a
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	9c 81       	ldd	r25, Y+4	; 0x04
    355a:	b9 01       	movw	r22, r18
    355c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>
		
			delete message;
    3560:	8a 85       	ldd	r24, Y+10	; 0x0a
    3562:	9b 85       	ldd	r25, Y+11	; 0x0b
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	69 f0       	breq	.+26     	; 0x3582 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xae>
    3568:	8a 85       	ldd	r24, Y+10	; 0x0a
    356a:	9b 85       	ldd	r25, Y+11	; 0x0b
    356c:	fc 01       	movw	r30, r24
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	02 96       	adiw	r24, 0x02	; 2
    3574:	fc 01       	movw	r30, r24
    3576:	20 81       	ld	r18, Z
    3578:	31 81       	ldd	r19, Z+1	; 0x01
    357a:	8a 85       	ldd	r24, Y+10	; 0x0a
    357c:	9b 85       	ldd	r25, Y+11	; 0x0b
    357e:	f9 01       	movw	r30, r18
    3580:	19 95       	eicall
		}
	}
	
	//Update instrumentation fields
	switch (status)
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	8e 3f       	cpi	r24, 0xFE	; 254
    3588:	ff ef       	ldi	r31, 0xFF	; 255
    358a:	9f 07       	cpc	r25, r31
    358c:	19 f1       	breq	.+70     	; 0x35d4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x100>
    358e:	8f 3f       	cpi	r24, 0xFF	; 255
    3590:	2f ef       	ldi	r18, 0xFF	; 255
    3592:	92 07       	cpc	r25, r18
    3594:	2c f4       	brge	.+10     	; 0x35a0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xcc>
    3596:	8d 3f       	cpi	r24, 0xFD	; 253
    3598:	ef ef       	ldi	r30, 0xFF	; 255
    359a:	9e 07       	cpc	r25, r30
    359c:	71 f1       	breq	.+92     	; 0x35fa <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x126>
    359e:	40 c0       	rjmp	.+128    	; 0x3620 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x14c>
    35a0:	8f 3f       	cpi	r24, 0xFF	; 255
    35a2:	ff ef       	ldi	r31, 0xFF	; 255
    35a4:	9f 07       	cpc	r25, r31
    35a6:	19 f0       	breq	.+6      	; 0x35ae <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0xda>
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	d9 f1       	breq	.+118    	; 0x3622 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x14e>
    35ac:	39 c0       	rjmp	.+114    	; 0x3620 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x14c>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    35ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    35b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    35b2:	fc 01       	movw	r30, r24
    35b4:	81 85       	ldd	r24, Z+9	; 0x09
    35b6:	92 85       	ldd	r25, Z+10	; 0x0a
    35b8:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    35bc:	9c 01       	movw	r18, r24
    35be:	2f 5f       	subi	r18, 0xFF	; 255
    35c0:	3f 4f       	sbci	r19, 0xFF	; 255
    35c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    35c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    35c6:	fc 01       	movw	r30, r24
    35c8:	81 85       	ldd	r24, Z+9	; 0x09
    35ca:	92 85       	ldd	r25, Z+10	; 0x0a
    35cc:	b9 01       	movw	r22, r18
    35ce:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN10helicopter5model11SystemModel8TimeoutsEi>
			break;
    35d2:	28 c0       	rjmp	.+80     	; 0x3624 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x150>
		case -2:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    35d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    35d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    35d8:	fc 01       	movw	r30, r24
    35da:	81 85       	ldd	r24, Z+9	; 0x09
    35dc:	92 85       	ldd	r25, Z+10	; 0x0a
    35de:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    35e2:	9c 01       	movw	r18, r24
    35e4:	2f 5f       	subi	r18, 0xFF	; 255
    35e6:	3f 4f       	sbci	r19, 0xFF	; 255
    35e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    35ec:	fc 01       	movw	r30, r24
    35ee:	81 85       	ldd	r24, Z+9	; 0x09
    35f0:	92 85       	ldd	r25, Z+10	; 0x0a
    35f2:	b9 01       	movw	r22, r18
    35f4:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>
			break;
    35f8:	15 c0       	rjmp	.+42     	; 0x3624 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x150>
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    35fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    35fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    35fe:	fc 01       	movw	r30, r24
    3600:	81 85       	ldd	r24, Z+9	; 0x09
    3602:	92 85       	ldd	r25, Z+10	; 0x0a
    3604:	0e 94 2b 13 	call	0x2656	; 0x2656 <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    3608:	9c 01       	movw	r18, r24
    360a:	2f 5f       	subi	r18, 0xFF	; 255
    360c:	3f 4f       	sbci	r19, 0xFF	; 255
    360e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3610:	9d 85       	ldd	r25, Y+13	; 0x0d
    3612:	fc 01       	movw	r30, r24
    3614:	81 85       	ldd	r24, Z+9	; 0x09
    3616:	92 85       	ldd	r25, Z+10	; 0x0a
    3618:	b9 01       	movw	r22, r18
    361a:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>
		default:
			break;
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x150>
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x150>
	
	//Update instrumentation fields
	switch (status)
	{
		case 0:
			break;
    3622:	00 00       	nop
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
		default:
			break;
		
	}
    3624:	ce 01       	movw	r24, r28
    3626:	05 96       	adiw	r24, 0x05	; 5
    3628:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    362c:	2d 96       	adiw	r28, 0x0d	; 13
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	08 95       	ret

0000363e <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	1f 92       	push	r1
    3644:	1f 92       	push	r1
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	22 e6       	ldi	r18, 0x62	; 98
    3654:	32 e0       	ldi	r19, 0x02	; 2
    3656:	fc 01       	movw	r30, r24
    3658:	31 83       	std	Z+1, r19	; 0x01
    365a:	20 83       	st	Z, r18
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	9a 81       	ldd	r25, Y+2	; 0x02
    3660:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN10helicopter5tasks4TaskD1Ev>
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	81 70       	andi	r24, 0x01	; 1
    366a:	99 27       	eor	r25, r25
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	21 f0       	breq	.+8      	; 0x3678 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev+0x3a>
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    3678:	0f 90       	pop	r0
    367a:	0f 90       	pop	r0
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	08 95       	ret

00003682 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	1f 92       	push	r1
    3688:	1f 92       	push	r1
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	9a 83       	std	Y+2, r25	; 0x02
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	08 95       	ret

000036ac <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	1f 92       	push	r1
    36b2:	1f 92       	push	r1
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	9a 83       	std	Y+2, r25	; 0x02
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	df 91       	pop	r29
    36c2:	cf 91       	pop	r28
    36c4:	08 95       	ret

000036c6 <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	9a 83       	std	Y+2, r25	; 0x02
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	7c 83       	std	Y+4, r23	; 0x04
    36d8:	6b 83       	std	Y+3, r22	; 0x03
    36da:	5e 83       	std	Y+6, r21	; 0x06
    36dc:	4d 83       	std	Y+5, r20	; 0x05
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	20 e7       	ldi	r18, 0x70	; 112
    36e4:	32 e0       	ldi	r19, 0x02	; 2
    36e6:	fc 01       	movw	r30, r24
    36e8:	31 83       	std	Z+1, r19	; 0x01
    36ea:	20 83       	st	Z, r18
{
	this->delay = delay;
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	2b 81       	ldd	r18, Y+3	; 0x03
    36f2:	3c 81       	ldd	r19, Y+4	; 0x04
    36f4:	fc 01       	movw	r30, r24
    36f6:	33 83       	std	Z+3, r19	; 0x03
    36f8:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3700:	3e 81       	ldd	r19, Y+6	; 0x06
    3702:	fc 01       	movw	r30, r24
    3704:	35 83       	std	Z+5, r19	; 0x05
    3706:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	9a 81       	ldd	r25, Y+2	; 0x02
    370c:	fc 01       	movw	r30, r24
    370e:	16 82       	std	Z+6, r1	; 0x06
}
    3710:	26 96       	adiw	r28, 0x06	; 6
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	08 95       	ret

00003722 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	1f 92       	push	r1
    3728:	1f 92       	push	r1
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	9a 83       	std	Y+2, r25	; 0x02
    3730:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    3732:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	fc 01       	movw	r30, r24
    373a:	80 81       	ld	r24, Z
    373c:	91 81       	ldd	r25, Z+1	; 0x01
    373e:	fc 01       	movw	r30, r24
    3740:	20 81       	ld	r18, Z
    3742:	31 81       	ldd	r19, Z+1	; 0x01
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	9a 81       	ldd	r25, Y+2	; 0x02
    3748:	f9 01       	movw	r30, r18
    374a:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    374c:	78 94       	sei
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	08 95       	ret

00003758 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	2a 97       	sbiw	r28, 0x0a	; 10
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	9a 83       	std	Y+2, r25	; 0x02
    3772:	89 83       	std	Y+1, r24	; 0x01
    3774:	7c 83       	std	Y+4, r23	; 0x04
    3776:	6b 83       	std	Y+3, r22	; 0x03
    3778:	5e 83       	std	Y+6, r21	; 0x06
    377a:	4d 83       	std	Y+5, r20	; 0x05
    377c:	38 87       	std	Y+8, r19	; 0x08
    377e:	2f 83       	std	Y+7, r18	; 0x07
    3780:	1a 87       	std	Y+10, r17	; 0x0a
    3782:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	49 85       	ldd	r20, Y+9	; 0x09
    378a:	5a 85       	ldd	r21, Y+10	; 0x0a
    378c:	2f 81       	ldd	r18, Y+7	; 0x07
    378e:	38 85       	ldd	r19, Y+8	; 0x08
    3790:	b9 01       	movw	r22, r18
    3792:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN10helicopter5tasks4TaskC1Eii>
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	9a 81       	ldd	r25, Y+2	; 0x02
    379a:	2e e7       	ldi	r18, 0x7E	; 126
    379c:	32 e0       	ldi	r19, 0x02	; 2
    379e:	fc 01       	movw	r30, r24
    37a0:	31 83       	std	Z+1, r19	; 0x01
    37a2:	20 83       	st	Z, r18
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
    37a8:	2b 81       	ldd	r18, Y+3	; 0x03
    37aa:	3c 81       	ldd	r19, Y+4	; 0x04
    37ac:	fc 01       	movw	r30, r24
    37ae:	30 87       	std	Z+8, r19	; 0x08
    37b0:	27 83       	std	Z+7, r18	; 0x07
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	9a 81       	ldd	r25, Y+2	; 0x02
    37b6:	2d 81       	ldd	r18, Y+5	; 0x05
    37b8:	3e 81       	ldd	r19, Y+6	; 0x06
    37ba:	fc 01       	movw	r30, r24
    37bc:	32 87       	std	Z+10, r19	; 0x0a
    37be:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    37c0:	2a 96       	adiw	r28, 0x0a	; 10
    37c2:	0f b6       	in	r0, 0x3f	; 63
    37c4:	f8 94       	cli
    37c6:	de bf       	out	0x3e, r29	; 62
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	cd bf       	out	0x3d, r28	; 61
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	1f 91       	pop	r17
    37d2:	0f 91       	pop	r16
    37d4:	08 95       	ret

000037d6 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	00 d0       	rcall	.+0      	; 0x37dc <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    37dc:	1f 92       	push	r1
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
    37e2:	9c 83       	std	Y+4, r25	; 0x04
    37e4:	8b 83       	std	Y+3, r24	; 0x03
	//SystemTelemetryMessage *message = model->CreateTelemetryMessage();
	SystemTelemetryMessage *message = SystemTelemetryMessage::buildMessageFromModel(model);
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	fc 01       	movw	r30, r24
    37ec:	81 85       	ldd	r24, Z+9	; 0x09
    37ee:	92 85       	ldd	r25, Z+10	; 0x0a
    37f0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	89 83       	std	Y+1, r24	; 0x01
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    37f8:	8b 81       	ldd	r24, Y+3	; 0x03
    37fa:	9c 81       	ldd	r25, Y+4	; 0x04
    37fc:	fc 01       	movw	r30, r24
    37fe:	87 81       	ldd	r24, Z+7	; 0x07
    3800:	90 85       	ldd	r25, Z+8	; 0x08
    3802:	29 81       	ldd	r18, Y+1	; 0x01
    3804:	3a 81       	ldd	r19, Y+2	; 0x02
    3806:	b9 01       	movw	r22, r18
    3808:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	9a 81       	ldd	r25, Y+2	; 0x02
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	69 f0       	breq	.+26     	; 0x382e <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	9a 81       	ldd	r25, Y+2	; 0x02
    3818:	fc 01       	movw	r30, r24
    381a:	80 81       	ld	r24, Z
    381c:	91 81       	ldd	r25, Z+1	; 0x01
    381e:	02 96       	adiw	r24, 0x02	; 2
    3820:	fc 01       	movw	r30, r24
    3822:	20 81       	ld	r18, Z
    3824:	31 81       	ldd	r19, Z+1	; 0x01
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	f9 01       	movw	r30, r18
    382c:	19 95       	eicall
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	08 95       	ret

0000383c <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	1f 92       	push	r1
    3842:	1f 92       	push	r1
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	89 83       	std	Y+1, r24	; 0x01
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	9a 81       	ldd	r25, Y+2	; 0x02
    3850:	2e e7       	ldi	r18, 0x7E	; 126
    3852:	32 e0       	ldi	r19, 0x02	; 2
    3854:	fc 01       	movw	r30, r24
    3856:	31 83       	std	Z+1, r19	; 0x01
    3858:	20 83       	st	Z, r18
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN10helicopter5tasks4TaskD1Ev>
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	81 70       	andi	r24, 0x01	; 1
    3868:	99 27       	eor	r25, r25
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	21 f0       	breq	.+8      	; 0x3876 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev+0x3a>
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	9a 81       	ldd	r25, Y+2	; 0x02
    3872:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	08 95       	ret

00003880 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	1f 92       	push	r1
    3886:	1f 92       	push	r1
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	9a 83       	std	Y+2, r25	; 0x02
    388e:	89 83       	std	Y+1, r24	; 0x01
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	0e 94 1e 1c 	call	0x383c	; 0x383c <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	9a 81       	ldd	r25, Y+2	; 0x02
    389c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZdlPv>
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	df 91       	pop	r29
    38a6:	cf 91       	pop	r28
    38a8:	08 95       	ret

000038aa <_Znwj>:
 *  Author: HP User
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
    38aa:	cf 93       	push	r28
    38ac:	df 93       	push	r29
    38ae:	1f 92       	push	r1
    38b0:	1f 92       	push	r1
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	9a 83       	std	Y+2, r25	; 0x02
    38b8:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	9a 81       	ldd	r25, Y+2	; 0x02
    38be:	0e 94 4c 20 	call	0x4098	; 0x4098 <malloc>
}
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	df 91       	pop	r29
    38c8:	cf 91       	pop	r28
    38ca:	08 95       	ret

000038cc <_ZdlPv>:

void operator delete(void * ptr)
{
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	1f 92       	push	r1
    38d2:	1f 92       	push	r1
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	9a 81       	ldd	r25, Y+2	; 0x02
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	21 f0       	breq	.+8      	; 0x38ec <_ZdlPv+0x20>
	{
		free(ptr);
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	9a 81       	ldd	r25, Y+2	; 0x02
    38e8:	0e 94 e7 20 	call	0x41ce	; 0x41ce <free>
	}
}
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	08 95       	ret

000038f6 <_Znaj>:

void * operator new[](size_t size)
{
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	1f 92       	push	r1
    38fc:	1f 92       	push	r1
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	9a 83       	std	Y+2, r25	; 0x02
    3904:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	9a 81       	ldd	r25, Y+2	; 0x02
    390a:	0e 94 4c 20 	call	0x4098	; 0x4098 <malloc>
}
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	08 95       	ret

00003918 <_ZdaPv>:

void operator delete[](void * ptr)
{
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	1f 92       	push	r1
    391e:	1f 92       	push	r1
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	9a 81       	ldd	r25, Y+2	; 0x02
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	21 f0       	breq	.+8      	; 0x3938 <_ZdaPv+0x20>
	{
		free(ptr);
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	9a 81       	ldd	r25, Y+2	; 0x02
    3934:	0e 94 e7 20 	call	0x41ce	; 0x41ce <free>
	}
	
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	08 95       	ret

00003942 <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	00 d0       	rcall	.+0      	; 0x394c <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    394c:	1f 92       	push	r1
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	9c 83       	std	Y+4, r25	; 0x04
    3954:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    3956:	8b 81       	ldd	r24, Y+3	; 0x03
    3958:	9c 81       	ldd	r25, Y+4	; 0x04
    395a:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
    395e:	1a 82       	std	Y+2, r1	; 0x02
    3960:	19 82       	std	Y+1, r1	; 0x01
	
	if (timeoutMilliseconds > 1000) 
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	fc 01       	movw	r30, r24
    3968:	86 81       	ldd	r24, Z+6	; 0x06
    396a:	97 81       	ldd	r25, Z+7	; 0x07
    396c:	89 3e       	cpi	r24, 0xE9	; 233
    396e:	f3 e0       	ldi	r31, 0x03	; 3
    3970:	9f 07       	cpc	r25, r31
    3972:	2c f0       	brlt	.+10     	; 0x397e <_ZN10helicopter4util5Timer10startTimerEv+0x3c>
	{
		frequency = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	9a 83       	std	Y+2, r25	; 0x02
    397a:	89 83       	std	Y+1, r24	; 0x01
    397c:	0d c0       	rjmp	.+26     	; 0x3998 <_ZN10helicopter4util5Timer10startTimerEv+0x56>
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    397e:	8b 81       	ldd	r24, Y+3	; 0x03
    3980:	9c 81       	ldd	r25, Y+4	; 0x04
    3982:	fc 01       	movw	r30, r24
    3984:	26 81       	ldd	r18, Z+6	; 0x06
    3986:	37 81       	ldd	r19, Z+7	; 0x07
    3988:	88 ee       	ldi	r24, 0xE8	; 232
    398a:	93 e0       	ldi	r25, 0x03	; 3
    398c:	b9 01       	movw	r22, r18
    398e:	0e 94 02 20 	call	0x4004	; 0x4004 <__divmodhi4>
    3992:	9b 01       	movw	r18, r22
    3994:	3a 83       	std	Y+2, r19	; 0x02
    3996:	29 83       	std	Y+1, r18	; 0x01
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    3998:	08 e9       	ldi	r16, 0x98	; 152
    399a:	10 e0       	ldi	r17, 0x00	; 0
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	9c 81       	ldd	r25, Y+4	; 0x04
    39a0:	fc 01       	movw	r30, r24
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	a2 81       	ldd	r26, Z+2	; 0x02
    39a8:	b3 81       	ldd	r27, Z+3	; 0x03
    39aa:	2b 81       	ldd	r18, Y+3	; 0x03
    39ac:	3c 81       	ldd	r19, Y+4	; 0x04
    39ae:	f9 01       	movw	r30, r18
    39b0:	24 81       	ldd	r18, Z+4	; 0x04
    39b2:	35 81       	ldd	r19, Z+5	; 0x05
    39b4:	44 27       	eor	r20, r20
    39b6:	37 fd       	sbrc	r19, 7
    39b8:	40 95       	com	r20
    39ba:	54 2f       	mov	r21, r20
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 16 20 	call	0x402c	; 0x402c <__udivmodsi4>
    39c4:	da 01       	movw	r26, r20
    39c6:	c9 01       	movw	r24, r18
    39c8:	29 81       	ldd	r18, Y+1	; 0x01
    39ca:	3a 81       	ldd	r19, Y+2	; 0x02
    39cc:	44 27       	eor	r20, r20
    39ce:	37 fd       	sbrc	r19, 7
    39d0:	40 95       	com	r20
    39d2:	54 2f       	mov	r21, r20
    39d4:	bc 01       	movw	r22, r24
    39d6:	cd 01       	movw	r24, r26
    39d8:	0e 94 16 20 	call	0x402c	; 0x402c <__udivmodsi4>
    39dc:	da 01       	movw	r26, r20
    39de:	c9 01       	movw	r24, r18
    39e0:	f8 01       	movw	r30, r16
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    39e6:	81 e9       	ldi	r24, 0x91	; 145
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	21 e9       	ldi	r18, 0x91	; 145
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	f9 01       	movw	r30, r18
    39f0:	20 81       	ld	r18, Z
    39f2:	28 60       	ori	r18, 0x08	; 8
    39f4:	fc 01       	movw	r30, r24
    39f6:	20 83       	st	Z, r18
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    39f8:	8b 81       	ldd	r24, Y+3	; 0x03
    39fa:	9c 81       	ldd	r25, Y+4	; 0x04
    39fc:	fc 01       	movw	r30, r24
    39fe:	84 81       	ldd	r24, Z+4	; 0x04
    3a00:	95 81       	ldd	r25, Z+5	; 0x05
    3a02:	80 34       	cpi	r24, 0x40	; 64
    3a04:	91 05       	cpc	r25, r1
    3a06:	39 f1       	breq	.+78     	; 0x3a56 <_ZN10helicopter4util5Timer10startTimerEv+0x114>
    3a08:	81 34       	cpi	r24, 0x41	; 65
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	3c f4       	brge	.+14     	; 0x3a1c <_ZN10helicopter4util5Timer10startTimerEv+0xda>
    3a0e:	81 30       	cpi	r24, 0x01	; 1
    3a10:	91 05       	cpc	r25, r1
    3a12:	69 f0       	breq	.+26     	; 0x3a2e <_ZN10helicopter4util5Timer10startTimerEv+0xec>
    3a14:	88 30       	cpi	r24, 0x08	; 8
    3a16:	91 05       	cpc	r25, r1
    3a18:	a1 f0       	breq	.+40     	; 0x3a42 <_ZN10helicopter4util5Timer10startTimerEv+0x100>
    3a1a:	3b c0       	rjmp	.+118    	; 0x3a92 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
    3a1c:	81 15       	cp	r24, r1
    3a1e:	f1 e0       	ldi	r31, 0x01	; 1
    3a20:	9f 07       	cpc	r25, r31
    3a22:	19 f1       	breq	.+70     	; 0x3a6a <_ZN10helicopter4util5Timer10startTimerEv+0x128>
    3a24:	81 15       	cp	r24, r1
    3a26:	24 e0       	ldi	r18, 0x04	; 4
    3a28:	92 07       	cpc	r25, r18
    3a2a:	49 f1       	breq	.+82     	; 0x3a7e <_ZN10helicopter4util5Timer10startTimerEv+0x13c>
    3a2c:	32 c0       	rjmp	.+100    	; 0x3a92 <_ZN10helicopter4util5Timer10startTimerEv+0x150>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    3a2e:	81 e9       	ldi	r24, 0x91	; 145
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	21 e9       	ldi	r18, 0x91	; 145
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	f9 01       	movw	r30, r18
    3a38:	20 81       	ld	r18, Z
    3a3a:	21 60       	ori	r18, 0x01	; 1
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	20 83       	st	Z, r18
		break;
    3a40:	31 c0       	rjmp	.+98     	; 0x3aa4 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    3a42:	81 e9       	ldi	r24, 0x91	; 145
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	21 e9       	ldi	r18, 0x91	; 145
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	f9 01       	movw	r30, r18
    3a4c:	20 81       	ld	r18, Z
    3a4e:	22 60       	ori	r18, 0x02	; 2
    3a50:	fc 01       	movw	r30, r24
    3a52:	20 83       	st	Z, r18
		break;
    3a54:	27 c0       	rjmp	.+78     	; 0x3aa4 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    3a56:	81 e9       	ldi	r24, 0x91	; 145
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	21 e9       	ldi	r18, 0x91	; 145
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	f9 01       	movw	r30, r18
    3a60:	20 81       	ld	r18, Z
    3a62:	23 60       	ori	r18, 0x03	; 3
    3a64:	fc 01       	movw	r30, r24
    3a66:	20 83       	st	Z, r18
		break;
    3a68:	1d c0       	rjmp	.+58     	; 0x3aa4 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    3a6a:	81 e9       	ldi	r24, 0x91	; 145
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	21 e9       	ldi	r18, 0x91	; 145
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	f9 01       	movw	r30, r18
    3a74:	20 81       	ld	r18, Z
    3a76:	24 60       	ori	r18, 0x04	; 4
    3a78:	fc 01       	movw	r30, r24
    3a7a:	20 83       	st	Z, r18
		break;
    3a7c:	13 c0       	rjmp	.+38     	; 0x3aa4 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    3a7e:	81 e9       	ldi	r24, 0x91	; 145
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	21 e9       	ldi	r18, 0x91	; 145
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	f9 01       	movw	r30, r18
    3a88:	20 81       	ld	r18, Z
    3a8a:	25 60       	ori	r18, 0x05	; 5
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	20 83       	st	Z, r18
		break;
    3a90:	09 c0       	rjmp	.+18     	; 0x3aa4 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		default:
		TCCR3B |= NoPrescaling;
    3a92:	81 e9       	ldi	r24, 0x91	; 145
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	21 e9       	ldi	r18, 0x91	; 145
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	f9 01       	movw	r30, r18
    3a9c:	20 81       	ld	r18, Z
    3a9e:	21 60       	ori	r18, 0x01	; 1
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	20 83       	st	Z, r18
	}
}
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	08 95       	ret

00003ab6 <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    3ab6:	cf 93       	push	r28
    3ab8:	df 93       	push	r29
    3aba:	1f 92       	push	r1
    3abc:	1f 92       	push	r1
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	9a 83       	std	Y+2, r25	; 0x02
    3ac4:	89 83       	std	Y+1, r24	; 0x01
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    3ac6:	88 e3       	ldi	r24, 0x38	; 56
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	fc 01       	movw	r30, r24
    3acc:	80 81       	ld	r24, Z
    3ace:	88 2f       	mov	r24, r24
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	82 70       	andi	r24, 0x02	; 2
    3ad4:	99 27       	eor	r25, r25
    3ad6:	21 e0       	ldi	r18, 0x01	; 1
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	09 f4       	brne	.+2      	; 0x3ade <_ZN10helicopter4util5Timer11hasTimedoutEv+0x28>
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	82 2f       	mov	r24, r18
}
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	df 91       	pop	r29
    3ae6:	cf 91       	pop	r28
    3ae8:	08 95       	ret

00003aea <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	1f 92       	push	r1
    3af0:	1f 92       	push	r1
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    3afa:	81 e9       	ldi	r24, 0x91	; 145
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	fc 01       	movw	r30, r24
    3b00:	10 82       	st	Z, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    3b02:	84 e9       	ldi	r24, 0x94	; 148
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	fc 01       	movw	r30, r24
    3b08:	11 82       	std	Z+1, r1	; 0x01
    3b0a:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    3b0c:	88 e3       	ldi	r24, 0x38	; 56
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	28 e3       	ldi	r18, 0x38	; 56
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	f9 01       	movw	r30, r18
    3b16:	20 81       	ld	r18, Z
    3b18:	22 60       	ori	r18, 0x02	; 2
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	20 83       	st	Z, r18
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	08 95       	ret

00003b28 <__subsf3>:
    3b28:	50 58       	subi	r21, 0x80	; 128

00003b2a <__addsf3>:
    3b2a:	bb 27       	eor	r27, r27
    3b2c:	aa 27       	eor	r26, r26
    3b2e:	0e d0       	rcall	.+28     	; 0x3b4c <__addsf3x>
    3b30:	b1 c1       	rjmp	.+866    	; 0x3e94 <__fp_round>
    3b32:	a2 d1       	rcall	.+836    	; 0x3e78 <__fp_pscA>
    3b34:	30 f0       	brcs	.+12     	; 0x3b42 <__addsf3+0x18>
    3b36:	a7 d1       	rcall	.+846    	; 0x3e86 <__fp_pscB>
    3b38:	20 f0       	brcs	.+8      	; 0x3b42 <__addsf3+0x18>
    3b3a:	31 f4       	brne	.+12     	; 0x3b48 <__addsf3+0x1e>
    3b3c:	9f 3f       	cpi	r25, 0xFF	; 255
    3b3e:	11 f4       	brne	.+4      	; 0x3b44 <__addsf3+0x1a>
    3b40:	1e f4       	brtc	.+6      	; 0x3b48 <__addsf3+0x1e>
    3b42:	97 c1       	rjmp	.+814    	; 0x3e72 <__fp_nan>
    3b44:	0e f4       	brtc	.+2      	; 0x3b48 <__addsf3+0x1e>
    3b46:	e0 95       	com	r30
    3b48:	e7 fb       	bst	r30, 7
    3b4a:	64 c1       	rjmp	.+712    	; 0x3e14 <__fp_inf>

00003b4c <__addsf3x>:
    3b4c:	e9 2f       	mov	r30, r25
    3b4e:	b3 d1       	rcall	.+870    	; 0x3eb6 <__fp_split3>
    3b50:	80 f3       	brcs	.-32     	; 0x3b32 <__addsf3+0x8>
    3b52:	ba 17       	cp	r27, r26
    3b54:	62 07       	cpc	r22, r18
    3b56:	73 07       	cpc	r23, r19
    3b58:	84 07       	cpc	r24, r20
    3b5a:	95 07       	cpc	r25, r21
    3b5c:	18 f0       	brcs	.+6      	; 0x3b64 <__addsf3x+0x18>
    3b5e:	71 f4       	brne	.+28     	; 0x3b7c <__addsf3x+0x30>
    3b60:	9e f5       	brtc	.+102    	; 0x3bc8 <__addsf3x+0x7c>
    3b62:	e2 c1       	rjmp	.+964    	; 0x3f28 <__fp_zero>
    3b64:	0e f4       	brtc	.+2      	; 0x3b68 <__addsf3x+0x1c>
    3b66:	e0 95       	com	r30
    3b68:	0b 2e       	mov	r0, r27
    3b6a:	ba 2f       	mov	r27, r26
    3b6c:	a0 2d       	mov	r26, r0
    3b6e:	0b 01       	movw	r0, r22
    3b70:	b9 01       	movw	r22, r18
    3b72:	90 01       	movw	r18, r0
    3b74:	0c 01       	movw	r0, r24
    3b76:	ca 01       	movw	r24, r20
    3b78:	a0 01       	movw	r20, r0
    3b7a:	11 24       	eor	r1, r1
    3b7c:	ff 27       	eor	r31, r31
    3b7e:	59 1b       	sub	r21, r25
    3b80:	99 f0       	breq	.+38     	; 0x3ba8 <__addsf3x+0x5c>
    3b82:	59 3f       	cpi	r21, 0xF9	; 249
    3b84:	50 f4       	brcc	.+20     	; 0x3b9a <__addsf3x+0x4e>
    3b86:	50 3e       	cpi	r21, 0xE0	; 224
    3b88:	68 f1       	brcs	.+90     	; 0x3be4 <__addsf3x+0x98>
    3b8a:	1a 16       	cp	r1, r26
    3b8c:	f0 40       	sbci	r31, 0x00	; 0
    3b8e:	a2 2f       	mov	r26, r18
    3b90:	23 2f       	mov	r18, r19
    3b92:	34 2f       	mov	r19, r20
    3b94:	44 27       	eor	r20, r20
    3b96:	58 5f       	subi	r21, 0xF8	; 248
    3b98:	f3 cf       	rjmp	.-26     	; 0x3b80 <__addsf3x+0x34>
    3b9a:	46 95       	lsr	r20
    3b9c:	37 95       	ror	r19
    3b9e:	27 95       	ror	r18
    3ba0:	a7 95       	ror	r26
    3ba2:	f0 40       	sbci	r31, 0x00	; 0
    3ba4:	53 95       	inc	r21
    3ba6:	c9 f7       	brne	.-14     	; 0x3b9a <__addsf3x+0x4e>
    3ba8:	7e f4       	brtc	.+30     	; 0x3bc8 <__addsf3x+0x7c>
    3baa:	1f 16       	cp	r1, r31
    3bac:	ba 0b       	sbc	r27, r26
    3bae:	62 0b       	sbc	r22, r18
    3bb0:	73 0b       	sbc	r23, r19
    3bb2:	84 0b       	sbc	r24, r20
    3bb4:	ba f0       	brmi	.+46     	; 0x3be4 <__addsf3x+0x98>
    3bb6:	91 50       	subi	r25, 0x01	; 1
    3bb8:	a1 f0       	breq	.+40     	; 0x3be2 <__addsf3x+0x96>
    3bba:	ff 0f       	add	r31, r31
    3bbc:	bb 1f       	adc	r27, r27
    3bbe:	66 1f       	adc	r22, r22
    3bc0:	77 1f       	adc	r23, r23
    3bc2:	88 1f       	adc	r24, r24
    3bc4:	c2 f7       	brpl	.-16     	; 0x3bb6 <__addsf3x+0x6a>
    3bc6:	0e c0       	rjmp	.+28     	; 0x3be4 <__addsf3x+0x98>
    3bc8:	ba 0f       	add	r27, r26
    3bca:	62 1f       	adc	r22, r18
    3bcc:	73 1f       	adc	r23, r19
    3bce:	84 1f       	adc	r24, r20
    3bd0:	48 f4       	brcc	.+18     	; 0x3be4 <__addsf3x+0x98>
    3bd2:	87 95       	ror	r24
    3bd4:	77 95       	ror	r23
    3bd6:	67 95       	ror	r22
    3bd8:	b7 95       	ror	r27
    3bda:	f7 95       	ror	r31
    3bdc:	9e 3f       	cpi	r25, 0xFE	; 254
    3bde:	08 f0       	brcs	.+2      	; 0x3be2 <__addsf3x+0x96>
    3be0:	b3 cf       	rjmp	.-154    	; 0x3b48 <__addsf3+0x1e>
    3be2:	93 95       	inc	r25
    3be4:	88 0f       	add	r24, r24
    3be6:	08 f0       	brcs	.+2      	; 0x3bea <__addsf3x+0x9e>
    3be8:	99 27       	eor	r25, r25
    3bea:	ee 0f       	add	r30, r30
    3bec:	97 95       	ror	r25
    3bee:	87 95       	ror	r24
    3bf0:	08 95       	ret

00003bf2 <__cmpsf2>:
    3bf2:	ec d0       	rcall	.+472    	; 0x3dcc <__fp_cmp>
    3bf4:	08 f4       	brcc	.+2      	; 0x3bf8 <__cmpsf2+0x6>
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	08 95       	ret

00003bfa <__divsf3>:
    3bfa:	0c d0       	rcall	.+24     	; 0x3c14 <__divsf3x>
    3bfc:	4b c1       	rjmp	.+662    	; 0x3e94 <__fp_round>
    3bfe:	43 d1       	rcall	.+646    	; 0x3e86 <__fp_pscB>
    3c00:	40 f0       	brcs	.+16     	; 0x3c12 <__divsf3+0x18>
    3c02:	3a d1       	rcall	.+628    	; 0x3e78 <__fp_pscA>
    3c04:	30 f0       	brcs	.+12     	; 0x3c12 <__divsf3+0x18>
    3c06:	21 f4       	brne	.+8      	; 0x3c10 <__divsf3+0x16>
    3c08:	5f 3f       	cpi	r21, 0xFF	; 255
    3c0a:	19 f0       	breq	.+6      	; 0x3c12 <__divsf3+0x18>
    3c0c:	03 c1       	rjmp	.+518    	; 0x3e14 <__fp_inf>
    3c0e:	51 11       	cpse	r21, r1
    3c10:	8c c1       	rjmp	.+792    	; 0x3f2a <__fp_szero>
    3c12:	2f c1       	rjmp	.+606    	; 0x3e72 <__fp_nan>

00003c14 <__divsf3x>:
    3c14:	50 d1       	rcall	.+672    	; 0x3eb6 <__fp_split3>
    3c16:	98 f3       	brcs	.-26     	; 0x3bfe <__divsf3+0x4>

00003c18 <__divsf3_pse>:
    3c18:	99 23       	and	r25, r25
    3c1a:	c9 f3       	breq	.-14     	; 0x3c0e <__divsf3+0x14>
    3c1c:	55 23       	and	r21, r21
    3c1e:	b1 f3       	breq	.-20     	; 0x3c0c <__divsf3+0x12>
    3c20:	95 1b       	sub	r25, r21
    3c22:	55 0b       	sbc	r21, r21
    3c24:	bb 27       	eor	r27, r27
    3c26:	aa 27       	eor	r26, r26
    3c28:	62 17       	cp	r22, r18
    3c2a:	73 07       	cpc	r23, r19
    3c2c:	84 07       	cpc	r24, r20
    3c2e:	38 f0       	brcs	.+14     	; 0x3c3e <__divsf3_pse+0x26>
    3c30:	9f 5f       	subi	r25, 0xFF	; 255
    3c32:	5f 4f       	sbci	r21, 0xFF	; 255
    3c34:	22 0f       	add	r18, r18
    3c36:	33 1f       	adc	r19, r19
    3c38:	44 1f       	adc	r20, r20
    3c3a:	aa 1f       	adc	r26, r26
    3c3c:	a9 f3       	breq	.-22     	; 0x3c28 <__divsf3_pse+0x10>
    3c3e:	33 d0       	rcall	.+102    	; 0x3ca6 <__divsf3_pse+0x8e>
    3c40:	0e 2e       	mov	r0, r30
    3c42:	3a f0       	brmi	.+14     	; 0x3c52 <__divsf3_pse+0x3a>
    3c44:	e0 e8       	ldi	r30, 0x80	; 128
    3c46:	30 d0       	rcall	.+96     	; 0x3ca8 <__divsf3_pse+0x90>
    3c48:	91 50       	subi	r25, 0x01	; 1
    3c4a:	50 40       	sbci	r21, 0x00	; 0
    3c4c:	e6 95       	lsr	r30
    3c4e:	00 1c       	adc	r0, r0
    3c50:	ca f7       	brpl	.-14     	; 0x3c44 <__divsf3_pse+0x2c>
    3c52:	29 d0       	rcall	.+82     	; 0x3ca6 <__divsf3_pse+0x8e>
    3c54:	fe 2f       	mov	r31, r30
    3c56:	27 d0       	rcall	.+78     	; 0x3ca6 <__divsf3_pse+0x8e>
    3c58:	66 0f       	add	r22, r22
    3c5a:	77 1f       	adc	r23, r23
    3c5c:	88 1f       	adc	r24, r24
    3c5e:	bb 1f       	adc	r27, r27
    3c60:	26 17       	cp	r18, r22
    3c62:	37 07       	cpc	r19, r23
    3c64:	48 07       	cpc	r20, r24
    3c66:	ab 07       	cpc	r26, r27
    3c68:	b0 e8       	ldi	r27, 0x80	; 128
    3c6a:	09 f0       	breq	.+2      	; 0x3c6e <__divsf3_pse+0x56>
    3c6c:	bb 0b       	sbc	r27, r27
    3c6e:	80 2d       	mov	r24, r0
    3c70:	bf 01       	movw	r22, r30
    3c72:	ff 27       	eor	r31, r31
    3c74:	93 58       	subi	r25, 0x83	; 131
    3c76:	5f 4f       	sbci	r21, 0xFF	; 255
    3c78:	2a f0       	brmi	.+10     	; 0x3c84 <__divsf3_pse+0x6c>
    3c7a:	9e 3f       	cpi	r25, 0xFE	; 254
    3c7c:	51 05       	cpc	r21, r1
    3c7e:	68 f0       	brcs	.+26     	; 0x3c9a <__divsf3_pse+0x82>
    3c80:	c9 c0       	rjmp	.+402    	; 0x3e14 <__fp_inf>
    3c82:	53 c1       	rjmp	.+678    	; 0x3f2a <__fp_szero>
    3c84:	5f 3f       	cpi	r21, 0xFF	; 255
    3c86:	ec f3       	brlt	.-6      	; 0x3c82 <__divsf3_pse+0x6a>
    3c88:	98 3e       	cpi	r25, 0xE8	; 232
    3c8a:	dc f3       	brlt	.-10     	; 0x3c82 <__divsf3_pse+0x6a>
    3c8c:	86 95       	lsr	r24
    3c8e:	77 95       	ror	r23
    3c90:	67 95       	ror	r22
    3c92:	b7 95       	ror	r27
    3c94:	f7 95       	ror	r31
    3c96:	9f 5f       	subi	r25, 0xFF	; 255
    3c98:	c9 f7       	brne	.-14     	; 0x3c8c <__divsf3_pse+0x74>
    3c9a:	88 0f       	add	r24, r24
    3c9c:	91 1d       	adc	r25, r1
    3c9e:	96 95       	lsr	r25
    3ca0:	87 95       	ror	r24
    3ca2:	97 f9       	bld	r25, 7
    3ca4:	08 95       	ret
    3ca6:	e1 e0       	ldi	r30, 0x01	; 1
    3ca8:	66 0f       	add	r22, r22
    3caa:	77 1f       	adc	r23, r23
    3cac:	88 1f       	adc	r24, r24
    3cae:	bb 1f       	adc	r27, r27
    3cb0:	62 17       	cp	r22, r18
    3cb2:	73 07       	cpc	r23, r19
    3cb4:	84 07       	cpc	r24, r20
    3cb6:	ba 07       	cpc	r27, r26
    3cb8:	20 f0       	brcs	.+8      	; 0x3cc2 <__divsf3_pse+0xaa>
    3cba:	62 1b       	sub	r22, r18
    3cbc:	73 0b       	sbc	r23, r19
    3cbe:	84 0b       	sbc	r24, r20
    3cc0:	ba 0b       	sbc	r27, r26
    3cc2:	ee 1f       	adc	r30, r30
    3cc4:	88 f7       	brcc	.-30     	; 0x3ca8 <__divsf3_pse+0x90>
    3cc6:	e0 95       	com	r30
    3cc8:	08 95       	ret

00003cca <__fixsfsi>:
    3cca:	04 d0       	rcall	.+8      	; 0x3cd4 <__fixunssfsi>
    3ccc:	68 94       	set
    3cce:	b1 11       	cpse	r27, r1
    3cd0:	2c c1       	rjmp	.+600    	; 0x3f2a <__fp_szero>
    3cd2:	08 95       	ret

00003cd4 <__fixunssfsi>:
    3cd4:	f8 d0       	rcall	.+496    	; 0x3ec6 <__fp_splitA>
    3cd6:	88 f0       	brcs	.+34     	; 0x3cfa <__fixunssfsi+0x26>
    3cd8:	9f 57       	subi	r25, 0x7F	; 127
    3cda:	90 f0       	brcs	.+36     	; 0x3d00 <__fixunssfsi+0x2c>
    3cdc:	b9 2f       	mov	r27, r25
    3cde:	99 27       	eor	r25, r25
    3ce0:	b7 51       	subi	r27, 0x17	; 23
    3ce2:	a0 f0       	brcs	.+40     	; 0x3d0c <__fixunssfsi+0x38>
    3ce4:	d1 f0       	breq	.+52     	; 0x3d1a <__fixunssfsi+0x46>
    3ce6:	66 0f       	add	r22, r22
    3ce8:	77 1f       	adc	r23, r23
    3cea:	88 1f       	adc	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	1a f0       	brmi	.+6      	; 0x3cf6 <__fixunssfsi+0x22>
    3cf0:	ba 95       	dec	r27
    3cf2:	c9 f7       	brne	.-14     	; 0x3ce6 <__fixunssfsi+0x12>
    3cf4:	12 c0       	rjmp	.+36     	; 0x3d1a <__fixunssfsi+0x46>
    3cf6:	b1 30       	cpi	r27, 0x01	; 1
    3cf8:	81 f0       	breq	.+32     	; 0x3d1a <__fixunssfsi+0x46>
    3cfa:	16 d1       	rcall	.+556    	; 0x3f28 <__fp_zero>
    3cfc:	b1 e0       	ldi	r27, 0x01	; 1
    3cfe:	08 95       	ret
    3d00:	13 c1       	rjmp	.+550    	; 0x3f28 <__fp_zero>
    3d02:	67 2f       	mov	r22, r23
    3d04:	78 2f       	mov	r23, r24
    3d06:	88 27       	eor	r24, r24
    3d08:	b8 5f       	subi	r27, 0xF8	; 248
    3d0a:	39 f0       	breq	.+14     	; 0x3d1a <__fixunssfsi+0x46>
    3d0c:	b9 3f       	cpi	r27, 0xF9	; 249
    3d0e:	cc f3       	brlt	.-14     	; 0x3d02 <__fixunssfsi+0x2e>
    3d10:	86 95       	lsr	r24
    3d12:	77 95       	ror	r23
    3d14:	67 95       	ror	r22
    3d16:	b3 95       	inc	r27
    3d18:	d9 f7       	brne	.-10     	; 0x3d10 <__fixunssfsi+0x3c>
    3d1a:	3e f4       	brtc	.+14     	; 0x3d2a <__fixunssfsi+0x56>
    3d1c:	90 95       	com	r25
    3d1e:	80 95       	com	r24
    3d20:	70 95       	com	r23
    3d22:	61 95       	neg	r22
    3d24:	7f 4f       	sbci	r23, 0xFF	; 255
    3d26:	8f 4f       	sbci	r24, 0xFF	; 255
    3d28:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2a:	08 95       	ret

00003d2c <__floatunsisf>:
    3d2c:	e8 94       	clt
    3d2e:	09 c0       	rjmp	.+18     	; 0x3d42 <__floatsisf+0x12>

00003d30 <__floatsisf>:
    3d30:	97 fb       	bst	r25, 7
    3d32:	3e f4       	brtc	.+14     	; 0x3d42 <__floatsisf+0x12>
    3d34:	90 95       	com	r25
    3d36:	80 95       	com	r24
    3d38:	70 95       	com	r23
    3d3a:	61 95       	neg	r22
    3d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d40:	9f 4f       	sbci	r25, 0xFF	; 255
    3d42:	99 23       	and	r25, r25
    3d44:	a9 f0       	breq	.+42     	; 0x3d70 <__floatsisf+0x40>
    3d46:	f9 2f       	mov	r31, r25
    3d48:	96 e9       	ldi	r25, 0x96	; 150
    3d4a:	bb 27       	eor	r27, r27
    3d4c:	93 95       	inc	r25
    3d4e:	f6 95       	lsr	r31
    3d50:	87 95       	ror	r24
    3d52:	77 95       	ror	r23
    3d54:	67 95       	ror	r22
    3d56:	b7 95       	ror	r27
    3d58:	f1 11       	cpse	r31, r1
    3d5a:	f8 cf       	rjmp	.-16     	; 0x3d4c <__floatsisf+0x1c>
    3d5c:	fa f4       	brpl	.+62     	; 0x3d9c <__floatsisf+0x6c>
    3d5e:	bb 0f       	add	r27, r27
    3d60:	11 f4       	brne	.+4      	; 0x3d66 <__floatsisf+0x36>
    3d62:	60 ff       	sbrs	r22, 0
    3d64:	1b c0       	rjmp	.+54     	; 0x3d9c <__floatsisf+0x6c>
    3d66:	6f 5f       	subi	r22, 0xFF	; 255
    3d68:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6e:	16 c0       	rjmp	.+44     	; 0x3d9c <__floatsisf+0x6c>
    3d70:	88 23       	and	r24, r24
    3d72:	11 f0       	breq	.+4      	; 0x3d78 <__floatsisf+0x48>
    3d74:	96 e9       	ldi	r25, 0x96	; 150
    3d76:	11 c0       	rjmp	.+34     	; 0x3d9a <__floatsisf+0x6a>
    3d78:	77 23       	and	r23, r23
    3d7a:	21 f0       	breq	.+8      	; 0x3d84 <__floatsisf+0x54>
    3d7c:	9e e8       	ldi	r25, 0x8E	; 142
    3d7e:	87 2f       	mov	r24, r23
    3d80:	76 2f       	mov	r23, r22
    3d82:	05 c0       	rjmp	.+10     	; 0x3d8e <__floatsisf+0x5e>
    3d84:	66 23       	and	r22, r22
    3d86:	71 f0       	breq	.+28     	; 0x3da4 <__floatsisf+0x74>
    3d88:	96 e8       	ldi	r25, 0x86	; 134
    3d8a:	86 2f       	mov	r24, r22
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	60 e0       	ldi	r22, 0x00	; 0
    3d90:	2a f0       	brmi	.+10     	; 0x3d9c <__floatsisf+0x6c>
    3d92:	9a 95       	dec	r25
    3d94:	66 0f       	add	r22, r22
    3d96:	77 1f       	adc	r23, r23
    3d98:	88 1f       	adc	r24, r24
    3d9a:	da f7       	brpl	.-10     	; 0x3d92 <__floatsisf+0x62>
    3d9c:	88 0f       	add	r24, r24
    3d9e:	96 95       	lsr	r25
    3da0:	87 95       	ror	r24
    3da2:	97 f9       	bld	r25, 7
    3da4:	08 95       	ret

00003da6 <floor>:
    3da6:	a9 d0       	rcall	.+338    	; 0x3efa <__fp_trunc>
    3da8:	80 f0       	brcs	.+32     	; 0x3dca <floor+0x24>
    3daa:	9f 37       	cpi	r25, 0x7F	; 127
    3dac:	40 f4       	brcc	.+16     	; 0x3dbe <floor+0x18>
    3dae:	91 11       	cpse	r25, r1
    3db0:	0e f0       	brts	.+2      	; 0x3db4 <floor+0xe>
    3db2:	bb c0       	rjmp	.+374    	; 0x3f2a <__fp_szero>
    3db4:	60 e0       	ldi	r22, 0x00	; 0
    3db6:	70 e0       	ldi	r23, 0x00	; 0
    3db8:	80 e8       	ldi	r24, 0x80	; 128
    3dba:	9f eb       	ldi	r25, 0xBF	; 191
    3dbc:	08 95       	ret
    3dbe:	26 f4       	brtc	.+8      	; 0x3dc8 <floor+0x22>
    3dc0:	1b 16       	cp	r1, r27
    3dc2:	61 1d       	adc	r22, r1
    3dc4:	71 1d       	adc	r23, r1
    3dc6:	81 1d       	adc	r24, r1
    3dc8:	2b c0       	rjmp	.+86     	; 0x3e20 <__fp_mintl>
    3dca:	45 c0       	rjmp	.+138    	; 0x3e56 <__fp_mpack>

00003dcc <__fp_cmp>:
    3dcc:	99 0f       	add	r25, r25
    3dce:	00 08       	sbc	r0, r0
    3dd0:	55 0f       	add	r21, r21
    3dd2:	aa 0b       	sbc	r26, r26
    3dd4:	e0 e8       	ldi	r30, 0x80	; 128
    3dd6:	fe ef       	ldi	r31, 0xFE	; 254
    3dd8:	16 16       	cp	r1, r22
    3dda:	17 06       	cpc	r1, r23
    3ddc:	e8 07       	cpc	r30, r24
    3dde:	f9 07       	cpc	r31, r25
    3de0:	c0 f0       	brcs	.+48     	; 0x3e12 <__fp_cmp+0x46>
    3de2:	12 16       	cp	r1, r18
    3de4:	13 06       	cpc	r1, r19
    3de6:	e4 07       	cpc	r30, r20
    3de8:	f5 07       	cpc	r31, r21
    3dea:	98 f0       	brcs	.+38     	; 0x3e12 <__fp_cmp+0x46>
    3dec:	62 1b       	sub	r22, r18
    3dee:	73 0b       	sbc	r23, r19
    3df0:	84 0b       	sbc	r24, r20
    3df2:	95 0b       	sbc	r25, r21
    3df4:	39 f4       	brne	.+14     	; 0x3e04 <__fp_cmp+0x38>
    3df6:	0a 26       	eor	r0, r26
    3df8:	61 f0       	breq	.+24     	; 0x3e12 <__fp_cmp+0x46>
    3dfa:	23 2b       	or	r18, r19
    3dfc:	24 2b       	or	r18, r20
    3dfe:	25 2b       	or	r18, r21
    3e00:	21 f4       	brne	.+8      	; 0x3e0a <__fp_cmp+0x3e>
    3e02:	08 95       	ret
    3e04:	0a 26       	eor	r0, r26
    3e06:	09 f4       	brne	.+2      	; 0x3e0a <__fp_cmp+0x3e>
    3e08:	a1 40       	sbci	r26, 0x01	; 1
    3e0a:	a6 95       	lsr	r26
    3e0c:	8f ef       	ldi	r24, 0xFF	; 255
    3e0e:	81 1d       	adc	r24, r1
    3e10:	81 1d       	adc	r24, r1
    3e12:	08 95       	ret

00003e14 <__fp_inf>:
    3e14:	97 f9       	bld	r25, 7
    3e16:	9f 67       	ori	r25, 0x7F	; 127
    3e18:	80 e8       	ldi	r24, 0x80	; 128
    3e1a:	70 e0       	ldi	r23, 0x00	; 0
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	08 95       	ret

00003e20 <__fp_mintl>:
    3e20:	88 23       	and	r24, r24
    3e22:	71 f4       	brne	.+28     	; 0x3e40 <__fp_mintl+0x20>
    3e24:	77 23       	and	r23, r23
    3e26:	21 f0       	breq	.+8      	; 0x3e30 <__fp_mintl+0x10>
    3e28:	98 50       	subi	r25, 0x08	; 8
    3e2a:	87 2b       	or	r24, r23
    3e2c:	76 2f       	mov	r23, r22
    3e2e:	07 c0       	rjmp	.+14     	; 0x3e3e <__fp_mintl+0x1e>
    3e30:	66 23       	and	r22, r22
    3e32:	11 f4       	brne	.+4      	; 0x3e38 <__fp_mintl+0x18>
    3e34:	99 27       	eor	r25, r25
    3e36:	0d c0       	rjmp	.+26     	; 0x3e52 <__fp_mintl+0x32>
    3e38:	90 51       	subi	r25, 0x10	; 16
    3e3a:	86 2b       	or	r24, r22
    3e3c:	70 e0       	ldi	r23, 0x00	; 0
    3e3e:	60 e0       	ldi	r22, 0x00	; 0
    3e40:	2a f0       	brmi	.+10     	; 0x3e4c <__fp_mintl+0x2c>
    3e42:	9a 95       	dec	r25
    3e44:	66 0f       	add	r22, r22
    3e46:	77 1f       	adc	r23, r23
    3e48:	88 1f       	adc	r24, r24
    3e4a:	da f7       	brpl	.-10     	; 0x3e42 <__fp_mintl+0x22>
    3e4c:	88 0f       	add	r24, r24
    3e4e:	96 95       	lsr	r25
    3e50:	87 95       	ror	r24
    3e52:	97 f9       	bld	r25, 7
    3e54:	08 95       	ret

00003e56 <__fp_mpack>:
    3e56:	9f 3f       	cpi	r25, 0xFF	; 255
    3e58:	31 f0       	breq	.+12     	; 0x3e66 <__fp_mpack_finite+0xc>

00003e5a <__fp_mpack_finite>:
    3e5a:	91 50       	subi	r25, 0x01	; 1
    3e5c:	20 f4       	brcc	.+8      	; 0x3e66 <__fp_mpack_finite+0xc>
    3e5e:	87 95       	ror	r24
    3e60:	77 95       	ror	r23
    3e62:	67 95       	ror	r22
    3e64:	b7 95       	ror	r27
    3e66:	88 0f       	add	r24, r24
    3e68:	91 1d       	adc	r25, r1
    3e6a:	96 95       	lsr	r25
    3e6c:	87 95       	ror	r24
    3e6e:	97 f9       	bld	r25, 7
    3e70:	08 95       	ret

00003e72 <__fp_nan>:
    3e72:	9f ef       	ldi	r25, 0xFF	; 255
    3e74:	80 ec       	ldi	r24, 0xC0	; 192
    3e76:	08 95       	ret

00003e78 <__fp_pscA>:
    3e78:	00 24       	eor	r0, r0
    3e7a:	0a 94       	dec	r0
    3e7c:	16 16       	cp	r1, r22
    3e7e:	17 06       	cpc	r1, r23
    3e80:	18 06       	cpc	r1, r24
    3e82:	09 06       	cpc	r0, r25
    3e84:	08 95       	ret

00003e86 <__fp_pscB>:
    3e86:	00 24       	eor	r0, r0
    3e88:	0a 94       	dec	r0
    3e8a:	12 16       	cp	r1, r18
    3e8c:	13 06       	cpc	r1, r19
    3e8e:	14 06       	cpc	r1, r20
    3e90:	05 06       	cpc	r0, r21
    3e92:	08 95       	ret

00003e94 <__fp_round>:
    3e94:	09 2e       	mov	r0, r25
    3e96:	03 94       	inc	r0
    3e98:	00 0c       	add	r0, r0
    3e9a:	11 f4       	brne	.+4      	; 0x3ea0 <__fp_round+0xc>
    3e9c:	88 23       	and	r24, r24
    3e9e:	52 f0       	brmi	.+20     	; 0x3eb4 <__fp_round+0x20>
    3ea0:	bb 0f       	add	r27, r27
    3ea2:	40 f4       	brcc	.+16     	; 0x3eb4 <__fp_round+0x20>
    3ea4:	bf 2b       	or	r27, r31
    3ea6:	11 f4       	brne	.+4      	; 0x3eac <__fp_round+0x18>
    3ea8:	60 ff       	sbrs	r22, 0
    3eaa:	04 c0       	rjmp	.+8      	; 0x3eb4 <__fp_round+0x20>
    3eac:	6f 5f       	subi	r22, 0xFF	; 255
    3eae:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb4:	08 95       	ret

00003eb6 <__fp_split3>:
    3eb6:	57 fd       	sbrc	r21, 7
    3eb8:	90 58       	subi	r25, 0x80	; 128
    3eba:	44 0f       	add	r20, r20
    3ebc:	55 1f       	adc	r21, r21
    3ebe:	59 f0       	breq	.+22     	; 0x3ed6 <__fp_splitA+0x10>
    3ec0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ec2:	71 f0       	breq	.+28     	; 0x3ee0 <__fp_splitA+0x1a>
    3ec4:	47 95       	ror	r20

00003ec6 <__fp_splitA>:
    3ec6:	88 0f       	add	r24, r24
    3ec8:	97 fb       	bst	r25, 7
    3eca:	99 1f       	adc	r25, r25
    3ecc:	61 f0       	breq	.+24     	; 0x3ee6 <__fp_splitA+0x20>
    3ece:	9f 3f       	cpi	r25, 0xFF	; 255
    3ed0:	79 f0       	breq	.+30     	; 0x3ef0 <__fp_splitA+0x2a>
    3ed2:	87 95       	ror	r24
    3ed4:	08 95       	ret
    3ed6:	12 16       	cp	r1, r18
    3ed8:	13 06       	cpc	r1, r19
    3eda:	14 06       	cpc	r1, r20
    3edc:	55 1f       	adc	r21, r21
    3ede:	f2 cf       	rjmp	.-28     	; 0x3ec4 <__fp_split3+0xe>
    3ee0:	46 95       	lsr	r20
    3ee2:	f1 df       	rcall	.-30     	; 0x3ec6 <__fp_splitA>
    3ee4:	08 c0       	rjmp	.+16     	; 0x3ef6 <__fp_splitA+0x30>
    3ee6:	16 16       	cp	r1, r22
    3ee8:	17 06       	cpc	r1, r23
    3eea:	18 06       	cpc	r1, r24
    3eec:	99 1f       	adc	r25, r25
    3eee:	f1 cf       	rjmp	.-30     	; 0x3ed2 <__fp_splitA+0xc>
    3ef0:	86 95       	lsr	r24
    3ef2:	71 05       	cpc	r23, r1
    3ef4:	61 05       	cpc	r22, r1
    3ef6:	08 94       	sec
    3ef8:	08 95       	ret

00003efa <__fp_trunc>:
    3efa:	e5 df       	rcall	.-54     	; 0x3ec6 <__fp_splitA>
    3efc:	a0 f0       	brcs	.+40     	; 0x3f26 <__fp_trunc+0x2c>
    3efe:	be e7       	ldi	r27, 0x7E	; 126
    3f00:	b9 17       	cp	r27, r25
    3f02:	88 f4       	brcc	.+34     	; 0x3f26 <__fp_trunc+0x2c>
    3f04:	bb 27       	eor	r27, r27
    3f06:	9f 38       	cpi	r25, 0x8F	; 143
    3f08:	60 f4       	brcc	.+24     	; 0x3f22 <__fp_trunc+0x28>
    3f0a:	16 16       	cp	r1, r22
    3f0c:	b1 1d       	adc	r27, r1
    3f0e:	67 2f       	mov	r22, r23
    3f10:	78 2f       	mov	r23, r24
    3f12:	88 27       	eor	r24, r24
    3f14:	98 5f       	subi	r25, 0xF8	; 248
    3f16:	f7 cf       	rjmp	.-18     	; 0x3f06 <__fp_trunc+0xc>
    3f18:	86 95       	lsr	r24
    3f1a:	77 95       	ror	r23
    3f1c:	67 95       	ror	r22
    3f1e:	b1 1d       	adc	r27, r1
    3f20:	93 95       	inc	r25
    3f22:	96 39       	cpi	r25, 0x96	; 150
    3f24:	c8 f3       	brcs	.-14     	; 0x3f18 <__fp_trunc+0x1e>
    3f26:	08 95       	ret

00003f28 <__fp_zero>:
    3f28:	e8 94       	clt

00003f2a <__fp_szero>:
    3f2a:	bb 27       	eor	r27, r27
    3f2c:	66 27       	eor	r22, r22
    3f2e:	77 27       	eor	r23, r23
    3f30:	cb 01       	movw	r24, r22
    3f32:	97 f9       	bld	r25, 7
    3f34:	08 95       	ret

00003f36 <__gesf2>:
    3f36:	4a df       	rcall	.-364    	; 0x3dcc <__fp_cmp>
    3f38:	08 f4       	brcc	.+2      	; 0x3f3c <__gesf2+0x6>
    3f3a:	8f ef       	ldi	r24, 0xFF	; 255
    3f3c:	08 95       	ret

00003f3e <__mulsf3>:
    3f3e:	0b d0       	rcall	.+22     	; 0x3f56 <__mulsf3x>
    3f40:	a9 cf       	rjmp	.-174    	; 0x3e94 <__fp_round>
    3f42:	9a df       	rcall	.-204    	; 0x3e78 <__fp_pscA>
    3f44:	28 f0       	brcs	.+10     	; 0x3f50 <__mulsf3+0x12>
    3f46:	9f df       	rcall	.-194    	; 0x3e86 <__fp_pscB>
    3f48:	18 f0       	brcs	.+6      	; 0x3f50 <__mulsf3+0x12>
    3f4a:	95 23       	and	r25, r21
    3f4c:	09 f0       	breq	.+2      	; 0x3f50 <__mulsf3+0x12>
    3f4e:	62 cf       	rjmp	.-316    	; 0x3e14 <__fp_inf>
    3f50:	90 cf       	rjmp	.-224    	; 0x3e72 <__fp_nan>
    3f52:	11 24       	eor	r1, r1
    3f54:	ea cf       	rjmp	.-44     	; 0x3f2a <__fp_szero>

00003f56 <__mulsf3x>:
    3f56:	af df       	rcall	.-162    	; 0x3eb6 <__fp_split3>
    3f58:	a0 f3       	brcs	.-24     	; 0x3f42 <__mulsf3+0x4>

00003f5a <__mulsf3_pse>:
    3f5a:	95 9f       	mul	r25, r21
    3f5c:	d1 f3       	breq	.-12     	; 0x3f52 <__mulsf3+0x14>
    3f5e:	95 0f       	add	r25, r21
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	55 1f       	adc	r21, r21
    3f64:	62 9f       	mul	r22, r18
    3f66:	f0 01       	movw	r30, r0
    3f68:	72 9f       	mul	r23, r18
    3f6a:	bb 27       	eor	r27, r27
    3f6c:	f0 0d       	add	r31, r0
    3f6e:	b1 1d       	adc	r27, r1
    3f70:	63 9f       	mul	r22, r19
    3f72:	aa 27       	eor	r26, r26
    3f74:	f0 0d       	add	r31, r0
    3f76:	b1 1d       	adc	r27, r1
    3f78:	aa 1f       	adc	r26, r26
    3f7a:	64 9f       	mul	r22, r20
    3f7c:	66 27       	eor	r22, r22
    3f7e:	b0 0d       	add	r27, r0
    3f80:	a1 1d       	adc	r26, r1
    3f82:	66 1f       	adc	r22, r22
    3f84:	82 9f       	mul	r24, r18
    3f86:	22 27       	eor	r18, r18
    3f88:	b0 0d       	add	r27, r0
    3f8a:	a1 1d       	adc	r26, r1
    3f8c:	62 1f       	adc	r22, r18
    3f8e:	73 9f       	mul	r23, r19
    3f90:	b0 0d       	add	r27, r0
    3f92:	a1 1d       	adc	r26, r1
    3f94:	62 1f       	adc	r22, r18
    3f96:	83 9f       	mul	r24, r19
    3f98:	a0 0d       	add	r26, r0
    3f9a:	61 1d       	adc	r22, r1
    3f9c:	22 1f       	adc	r18, r18
    3f9e:	74 9f       	mul	r23, r20
    3fa0:	33 27       	eor	r19, r19
    3fa2:	a0 0d       	add	r26, r0
    3fa4:	61 1d       	adc	r22, r1
    3fa6:	23 1f       	adc	r18, r19
    3fa8:	84 9f       	mul	r24, r20
    3faa:	60 0d       	add	r22, r0
    3fac:	21 1d       	adc	r18, r1
    3fae:	82 2f       	mov	r24, r18
    3fb0:	76 2f       	mov	r23, r22
    3fb2:	6a 2f       	mov	r22, r26
    3fb4:	11 24       	eor	r1, r1
    3fb6:	9f 57       	subi	r25, 0x7F	; 127
    3fb8:	50 40       	sbci	r21, 0x00	; 0
    3fba:	8a f0       	brmi	.+34     	; 0x3fde <__mulsf3_pse+0x84>
    3fbc:	e1 f0       	breq	.+56     	; 0x3ff6 <__mulsf3_pse+0x9c>
    3fbe:	88 23       	and	r24, r24
    3fc0:	4a f0       	brmi	.+18     	; 0x3fd4 <__mulsf3_pse+0x7a>
    3fc2:	ee 0f       	add	r30, r30
    3fc4:	ff 1f       	adc	r31, r31
    3fc6:	bb 1f       	adc	r27, r27
    3fc8:	66 1f       	adc	r22, r22
    3fca:	77 1f       	adc	r23, r23
    3fcc:	88 1f       	adc	r24, r24
    3fce:	91 50       	subi	r25, 0x01	; 1
    3fd0:	50 40       	sbci	r21, 0x00	; 0
    3fd2:	a9 f7       	brne	.-22     	; 0x3fbe <__mulsf3_pse+0x64>
    3fd4:	9e 3f       	cpi	r25, 0xFE	; 254
    3fd6:	51 05       	cpc	r21, r1
    3fd8:	70 f0       	brcs	.+28     	; 0x3ff6 <__mulsf3_pse+0x9c>
    3fda:	1c cf       	rjmp	.-456    	; 0x3e14 <__fp_inf>
    3fdc:	a6 cf       	rjmp	.-180    	; 0x3f2a <__fp_szero>
    3fde:	5f 3f       	cpi	r21, 0xFF	; 255
    3fe0:	ec f3       	brlt	.-6      	; 0x3fdc <__mulsf3_pse+0x82>
    3fe2:	98 3e       	cpi	r25, 0xE8	; 232
    3fe4:	dc f3       	brlt	.-10     	; 0x3fdc <__mulsf3_pse+0x82>
    3fe6:	86 95       	lsr	r24
    3fe8:	77 95       	ror	r23
    3fea:	67 95       	ror	r22
    3fec:	b7 95       	ror	r27
    3fee:	f7 95       	ror	r31
    3ff0:	e7 95       	ror	r30
    3ff2:	9f 5f       	subi	r25, 0xFF	; 255
    3ff4:	c1 f7       	brne	.-16     	; 0x3fe6 <__mulsf3_pse+0x8c>
    3ff6:	fe 2b       	or	r31, r30
    3ff8:	88 0f       	add	r24, r24
    3ffa:	91 1d       	adc	r25, r1
    3ffc:	96 95       	lsr	r25
    3ffe:	87 95       	ror	r24
    4000:	97 f9       	bld	r25, 7
    4002:	08 95       	ret

00004004 <__divmodhi4>:
    4004:	97 fb       	bst	r25, 7
    4006:	07 2e       	mov	r0, r23
    4008:	16 f4       	brtc	.+4      	; 0x400e <__divmodhi4+0xa>
    400a:	00 94       	com	r0
    400c:	07 d0       	rcall	.+14     	; 0x401c <__divmodhi4_neg1>
    400e:	77 fd       	sbrc	r23, 7
    4010:	09 d0       	rcall	.+18     	; 0x4024 <__divmodhi4_neg2>
    4012:	0e 94 38 20 	call	0x4070	; 0x4070 <__udivmodhi4>
    4016:	07 fc       	sbrc	r0, 7
    4018:	05 d0       	rcall	.+10     	; 0x4024 <__divmodhi4_neg2>
    401a:	3e f4       	brtc	.+14     	; 0x402a <__divmodhi4_exit>

0000401c <__divmodhi4_neg1>:
    401c:	90 95       	com	r25
    401e:	81 95       	neg	r24
    4020:	9f 4f       	sbci	r25, 0xFF	; 255
    4022:	08 95       	ret

00004024 <__divmodhi4_neg2>:
    4024:	70 95       	com	r23
    4026:	61 95       	neg	r22
    4028:	7f 4f       	sbci	r23, 0xFF	; 255

0000402a <__divmodhi4_exit>:
    402a:	08 95       	ret

0000402c <__udivmodsi4>:
    402c:	a1 e2       	ldi	r26, 0x21	; 33
    402e:	1a 2e       	mov	r1, r26
    4030:	aa 1b       	sub	r26, r26
    4032:	bb 1b       	sub	r27, r27
    4034:	fd 01       	movw	r30, r26
    4036:	0d c0       	rjmp	.+26     	; 0x4052 <__udivmodsi4_ep>

00004038 <__udivmodsi4_loop>:
    4038:	aa 1f       	adc	r26, r26
    403a:	bb 1f       	adc	r27, r27
    403c:	ee 1f       	adc	r30, r30
    403e:	ff 1f       	adc	r31, r31
    4040:	a2 17       	cp	r26, r18
    4042:	b3 07       	cpc	r27, r19
    4044:	e4 07       	cpc	r30, r20
    4046:	f5 07       	cpc	r31, r21
    4048:	20 f0       	brcs	.+8      	; 0x4052 <__udivmodsi4_ep>
    404a:	a2 1b       	sub	r26, r18
    404c:	b3 0b       	sbc	r27, r19
    404e:	e4 0b       	sbc	r30, r20
    4050:	f5 0b       	sbc	r31, r21

00004052 <__udivmodsi4_ep>:
    4052:	66 1f       	adc	r22, r22
    4054:	77 1f       	adc	r23, r23
    4056:	88 1f       	adc	r24, r24
    4058:	99 1f       	adc	r25, r25
    405a:	1a 94       	dec	r1
    405c:	69 f7       	brne	.-38     	; 0x4038 <__udivmodsi4_loop>
    405e:	60 95       	com	r22
    4060:	70 95       	com	r23
    4062:	80 95       	com	r24
    4064:	90 95       	com	r25
    4066:	9b 01       	movw	r18, r22
    4068:	ac 01       	movw	r20, r24
    406a:	bd 01       	movw	r22, r26
    406c:	cf 01       	movw	r24, r30
    406e:	08 95       	ret

00004070 <__udivmodhi4>:
    4070:	aa 1b       	sub	r26, r26
    4072:	bb 1b       	sub	r27, r27
    4074:	51 e1       	ldi	r21, 0x11	; 17
    4076:	07 c0       	rjmp	.+14     	; 0x4086 <__udivmodhi4_ep>

00004078 <__udivmodhi4_loop>:
    4078:	aa 1f       	adc	r26, r26
    407a:	bb 1f       	adc	r27, r27
    407c:	a6 17       	cp	r26, r22
    407e:	b7 07       	cpc	r27, r23
    4080:	10 f0       	brcs	.+4      	; 0x4086 <__udivmodhi4_ep>
    4082:	a6 1b       	sub	r26, r22
    4084:	b7 0b       	sbc	r27, r23

00004086 <__udivmodhi4_ep>:
    4086:	88 1f       	adc	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	5a 95       	dec	r21
    408c:	a9 f7       	brne	.-22     	; 0x4078 <__udivmodhi4_loop>
    408e:	80 95       	com	r24
    4090:	90 95       	com	r25
    4092:	bc 01       	movw	r22, r24
    4094:	cd 01       	movw	r24, r26
    4096:	08 95       	ret

00004098 <malloc>:
    4098:	0f 93       	push	r16
    409a:	1f 93       	push	r17
    409c:	cf 93       	push	r28
    409e:	df 93       	push	r29
    40a0:	82 30       	cpi	r24, 0x02	; 2
    40a2:	91 05       	cpc	r25, r1
    40a4:	10 f4       	brcc	.+4      	; 0x40aa <malloc+0x12>
    40a6:	82 e0       	ldi	r24, 0x02	; 2
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	e0 91 8c 02 	lds	r30, 0x028C
    40ae:	f0 91 8d 02 	lds	r31, 0x028D
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	c0 e0       	ldi	r28, 0x00	; 0
    40b8:	d0 e0       	ldi	r29, 0x00	; 0
    40ba:	23 c0       	rjmp	.+70     	; 0x4102 <malloc+0x6a>
    40bc:	40 81       	ld	r20, Z
    40be:	51 81       	ldd	r21, Z+1	; 0x01
    40c0:	48 17       	cp	r20, r24
    40c2:	59 07       	cpc	r21, r25
    40c4:	a8 f0       	brcs	.+42     	; 0x40f0 <malloc+0x58>
    40c6:	48 17       	cp	r20, r24
    40c8:	59 07       	cpc	r21, r25
    40ca:	61 f4       	brne	.+24     	; 0x40e4 <malloc+0x4c>
    40cc:	82 81       	ldd	r24, Z+2	; 0x02
    40ce:	93 81       	ldd	r25, Z+3	; 0x03
    40d0:	20 97       	sbiw	r28, 0x00	; 0
    40d2:	19 f0       	breq	.+6      	; 0x40da <malloc+0x42>
    40d4:	9b 83       	std	Y+3, r25	; 0x03
    40d6:	8a 83       	std	Y+2, r24	; 0x02
    40d8:	2e c0       	rjmp	.+92     	; 0x4136 <malloc+0x9e>
    40da:	90 93 8d 02 	sts	0x028D, r25
    40de:	80 93 8c 02 	sts	0x028C, r24
    40e2:	29 c0       	rjmp	.+82     	; 0x4136 <malloc+0x9e>
    40e4:	21 15       	cp	r18, r1
    40e6:	31 05       	cpc	r19, r1
    40e8:	29 f0       	breq	.+10     	; 0x40f4 <malloc+0x5c>
    40ea:	42 17       	cp	r20, r18
    40ec:	53 07       	cpc	r21, r19
    40ee:	10 f0       	brcs	.+4      	; 0x40f4 <malloc+0x5c>
    40f0:	a9 01       	movw	r20, r18
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <malloc+0x60>
    40f4:	be 01       	movw	r22, r28
    40f6:	df 01       	movw	r26, r30
    40f8:	02 81       	ldd	r16, Z+2	; 0x02
    40fa:	13 81       	ldd	r17, Z+3	; 0x03
    40fc:	ef 01       	movw	r28, r30
    40fe:	9a 01       	movw	r18, r20
    4100:	f8 01       	movw	r30, r16
    4102:	30 97       	sbiw	r30, 0x00	; 0
    4104:	d9 f6       	brne	.-74     	; 0x40bc <malloc+0x24>
    4106:	21 15       	cp	r18, r1
    4108:	31 05       	cpc	r19, r1
    410a:	09 f1       	breq	.+66     	; 0x414e <malloc+0xb6>
    410c:	28 1b       	sub	r18, r24
    410e:	39 0b       	sbc	r19, r25
    4110:	24 30       	cpi	r18, 0x04	; 4
    4112:	31 05       	cpc	r19, r1
    4114:	90 f4       	brcc	.+36     	; 0x413a <malloc+0xa2>
    4116:	12 96       	adiw	r26, 0x02	; 2
    4118:	8d 91       	ld	r24, X+
    411a:	9c 91       	ld	r25, X
    411c:	13 97       	sbiw	r26, 0x03	; 3
    411e:	61 15       	cp	r22, r1
    4120:	71 05       	cpc	r23, r1
    4122:	21 f0       	breq	.+8      	; 0x412c <malloc+0x94>
    4124:	fb 01       	movw	r30, r22
    4126:	93 83       	std	Z+3, r25	; 0x03
    4128:	82 83       	std	Z+2, r24	; 0x02
    412a:	04 c0       	rjmp	.+8      	; 0x4134 <malloc+0x9c>
    412c:	90 93 8d 02 	sts	0x028D, r25
    4130:	80 93 8c 02 	sts	0x028C, r24
    4134:	fd 01       	movw	r30, r26
    4136:	32 96       	adiw	r30, 0x02	; 2
    4138:	44 c0       	rjmp	.+136    	; 0x41c2 <malloc+0x12a>
    413a:	fd 01       	movw	r30, r26
    413c:	e2 0f       	add	r30, r18
    413e:	f3 1f       	adc	r31, r19
    4140:	81 93       	st	Z+, r24
    4142:	91 93       	st	Z+, r25
    4144:	22 50       	subi	r18, 0x02	; 2
    4146:	31 09       	sbc	r19, r1
    4148:	2d 93       	st	X+, r18
    414a:	3c 93       	st	X, r19
    414c:	3a c0       	rjmp	.+116    	; 0x41c2 <malloc+0x12a>
    414e:	20 91 8a 02 	lds	r18, 0x028A
    4152:	30 91 8b 02 	lds	r19, 0x028B
    4156:	23 2b       	or	r18, r19
    4158:	41 f4       	brne	.+16     	; 0x416a <malloc+0xd2>
    415a:	20 91 02 02 	lds	r18, 0x0202
    415e:	30 91 03 02 	lds	r19, 0x0203
    4162:	30 93 8b 02 	sts	0x028B, r19
    4166:	20 93 8a 02 	sts	0x028A, r18
    416a:	20 91 00 02 	lds	r18, 0x0200
    416e:	30 91 01 02 	lds	r19, 0x0201
    4172:	21 15       	cp	r18, r1
    4174:	31 05       	cpc	r19, r1
    4176:	41 f4       	brne	.+16     	; 0x4188 <malloc+0xf0>
    4178:	2d b7       	in	r18, 0x3d	; 61
    417a:	3e b7       	in	r19, 0x3e	; 62
    417c:	40 91 04 02 	lds	r20, 0x0204
    4180:	50 91 05 02 	lds	r21, 0x0205
    4184:	24 1b       	sub	r18, r20
    4186:	35 0b       	sbc	r19, r21
    4188:	e0 91 8a 02 	lds	r30, 0x028A
    418c:	f0 91 8b 02 	lds	r31, 0x028B
    4190:	e2 17       	cp	r30, r18
    4192:	f3 07       	cpc	r31, r19
    4194:	a0 f4       	brcc	.+40     	; 0x41be <malloc+0x126>
    4196:	2e 1b       	sub	r18, r30
    4198:	3f 0b       	sbc	r19, r31
    419a:	28 17       	cp	r18, r24
    419c:	39 07       	cpc	r19, r25
    419e:	78 f0       	brcs	.+30     	; 0x41be <malloc+0x126>
    41a0:	ac 01       	movw	r20, r24
    41a2:	4e 5f       	subi	r20, 0xFE	; 254
    41a4:	5f 4f       	sbci	r21, 0xFF	; 255
    41a6:	24 17       	cp	r18, r20
    41a8:	35 07       	cpc	r19, r21
    41aa:	48 f0       	brcs	.+18     	; 0x41be <malloc+0x126>
    41ac:	4e 0f       	add	r20, r30
    41ae:	5f 1f       	adc	r21, r31
    41b0:	50 93 8b 02 	sts	0x028B, r21
    41b4:	40 93 8a 02 	sts	0x028A, r20
    41b8:	81 93       	st	Z+, r24
    41ba:	91 93       	st	Z+, r25
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <malloc+0x12a>
    41be:	e0 e0       	ldi	r30, 0x00	; 0
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	cf 01       	movw	r24, r30
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	1f 91       	pop	r17
    41ca:	0f 91       	pop	r16
    41cc:	08 95       	ret

000041ce <free>:
    41ce:	ef 92       	push	r14
    41d0:	ff 92       	push	r15
    41d2:	0f 93       	push	r16
    41d4:	1f 93       	push	r17
    41d6:	cf 93       	push	r28
    41d8:	df 93       	push	r29
    41da:	00 97       	sbiw	r24, 0x00	; 0
    41dc:	09 f4       	brne	.+2      	; 0x41e0 <free+0x12>
    41de:	8f c0       	rjmp	.+286    	; 0x42fe <free+0x130>
    41e0:	dc 01       	movw	r26, r24
    41e2:	12 97       	sbiw	r26, 0x02	; 2
    41e4:	13 96       	adiw	r26, 0x03	; 3
    41e6:	1c 92       	st	X, r1
    41e8:	1e 92       	st	-X, r1
    41ea:	12 97       	sbiw	r26, 0x02	; 2
    41ec:	e0 90 8c 02 	lds	r14, 0x028C
    41f0:	f0 90 8d 02 	lds	r15, 0x028D
    41f4:	e1 14       	cp	r14, r1
    41f6:	f1 04       	cpc	r15, r1
    41f8:	89 f4       	brne	.+34     	; 0x421c <free+0x4e>
    41fa:	2d 91       	ld	r18, X+
    41fc:	3c 91       	ld	r19, X
    41fe:	11 97       	sbiw	r26, 0x01	; 1
    4200:	28 0f       	add	r18, r24
    4202:	39 1f       	adc	r19, r25
    4204:	80 91 8a 02 	lds	r24, 0x028A
    4208:	90 91 8b 02 	lds	r25, 0x028B
    420c:	82 17       	cp	r24, r18
    420e:	93 07       	cpc	r25, r19
    4210:	89 f5       	brne	.+98     	; 0x4274 <free+0xa6>
    4212:	b0 93 8b 02 	sts	0x028B, r27
    4216:	a0 93 8a 02 	sts	0x028A, r26
    421a:	71 c0       	rjmp	.+226    	; 0x42fe <free+0x130>
    421c:	e7 01       	movw	r28, r14
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	01 c0       	rjmp	.+2      	; 0x4226 <free+0x58>
    4224:	ea 01       	movw	r28, r20
    4226:	ca 17       	cp	r28, r26
    4228:	db 07       	cpc	r29, r27
    422a:	38 f4       	brcc	.+14     	; 0x423a <free+0x6c>
    422c:	4a 81       	ldd	r20, Y+2	; 0x02
    422e:	5b 81       	ldd	r21, Y+3	; 0x03
    4230:	9e 01       	movw	r18, r28
    4232:	41 15       	cp	r20, r1
    4234:	51 05       	cpc	r21, r1
    4236:	b1 f7       	brne	.-20     	; 0x4224 <free+0x56>
    4238:	22 c0       	rjmp	.+68     	; 0x427e <free+0xb0>
    423a:	bc 01       	movw	r22, r24
    423c:	62 50       	subi	r22, 0x02	; 2
    423e:	71 09       	sbc	r23, r1
    4240:	fb 01       	movw	r30, r22
    4242:	d3 83       	std	Z+3, r29	; 0x03
    4244:	c2 83       	std	Z+2, r28	; 0x02
    4246:	00 81       	ld	r16, Z
    4248:	11 81       	ldd	r17, Z+1	; 0x01
    424a:	ac 01       	movw	r20, r24
    424c:	40 0f       	add	r20, r16
    424e:	51 1f       	adc	r21, r17
    4250:	4c 17       	cp	r20, r28
    4252:	5d 07       	cpc	r21, r29
    4254:	61 f4       	brne	.+24     	; 0x426e <free+0xa0>
    4256:	48 81       	ld	r20, Y
    4258:	59 81       	ldd	r21, Y+1	; 0x01
    425a:	40 0f       	add	r20, r16
    425c:	51 1f       	adc	r21, r17
    425e:	4e 5f       	subi	r20, 0xFE	; 254
    4260:	5f 4f       	sbci	r21, 0xFF	; 255
    4262:	51 83       	std	Z+1, r21	; 0x01
    4264:	40 83       	st	Z, r20
    4266:	4a 81       	ldd	r20, Y+2	; 0x02
    4268:	5b 81       	ldd	r21, Y+3	; 0x03
    426a:	53 83       	std	Z+3, r21	; 0x03
    426c:	42 83       	std	Z+2, r20	; 0x02
    426e:	21 15       	cp	r18, r1
    4270:	31 05       	cpc	r19, r1
    4272:	29 f4       	brne	.+10     	; 0x427e <free+0xb0>
    4274:	b0 93 8d 02 	sts	0x028D, r27
    4278:	a0 93 8c 02 	sts	0x028C, r26
    427c:	40 c0       	rjmp	.+128    	; 0x42fe <free+0x130>
    427e:	f9 01       	movw	r30, r18
    4280:	b3 83       	std	Z+3, r27	; 0x03
    4282:	a2 83       	std	Z+2, r26	; 0x02
    4284:	e9 01       	movw	r28, r18
    4286:	69 91       	ld	r22, Y+
    4288:	79 91       	ld	r23, Y+
    428a:	c6 0f       	add	r28, r22
    428c:	d7 1f       	adc	r29, r23
    428e:	ac 17       	cp	r26, r28
    4290:	bd 07       	cpc	r27, r29
    4292:	79 f4       	brne	.+30     	; 0x42b2 <free+0xe4>
    4294:	dc 01       	movw	r26, r24
    4296:	5e 91       	ld	r21, -X
    4298:	4e 91       	ld	r20, -X
    429a:	46 0f       	add	r20, r22
    429c:	57 1f       	adc	r21, r23
    429e:	4e 5f       	subi	r20, 0xFE	; 254
    42a0:	5f 4f       	sbci	r21, 0xFF	; 255
    42a2:	51 83       	std	Z+1, r21	; 0x01
    42a4:	40 83       	st	Z, r20
    42a6:	12 96       	adiw	r26, 0x02	; 2
    42a8:	8d 91       	ld	r24, X+
    42aa:	9c 91       	ld	r25, X
    42ac:	13 97       	sbiw	r26, 0x03	; 3
    42ae:	93 83       	std	Z+3, r25	; 0x03
    42b0:	82 83       	std	Z+2, r24	; 0x02
    42b2:	a0 e0       	ldi	r26, 0x00	; 0
    42b4:	b0 e0       	ldi	r27, 0x00	; 0
    42b6:	02 c0       	rjmp	.+4      	; 0x42bc <free+0xee>
    42b8:	d7 01       	movw	r26, r14
    42ba:	7c 01       	movw	r14, r24
    42bc:	f7 01       	movw	r30, r14
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	93 81       	ldd	r25, Z+3	; 0x03
    42c2:	00 97       	sbiw	r24, 0x00	; 0
    42c4:	c9 f7       	brne	.-14     	; 0x42b8 <free+0xea>
    42c6:	c7 01       	movw	r24, r14
    42c8:	02 96       	adiw	r24, 0x02	; 2
    42ca:	20 81       	ld	r18, Z
    42cc:	31 81       	ldd	r19, Z+1	; 0x01
    42ce:	82 0f       	add	r24, r18
    42d0:	93 1f       	adc	r25, r19
    42d2:	20 91 8a 02 	lds	r18, 0x028A
    42d6:	30 91 8b 02 	lds	r19, 0x028B
    42da:	28 17       	cp	r18, r24
    42dc:	39 07       	cpc	r19, r25
    42de:	79 f4       	brne	.+30     	; 0x42fe <free+0x130>
    42e0:	10 97       	sbiw	r26, 0x00	; 0
    42e2:	29 f4       	brne	.+10     	; 0x42ee <free+0x120>
    42e4:	10 92 8d 02 	sts	0x028D, r1
    42e8:	10 92 8c 02 	sts	0x028C, r1
    42ec:	04 c0       	rjmp	.+8      	; 0x42f6 <free+0x128>
    42ee:	13 96       	adiw	r26, 0x03	; 3
    42f0:	1c 92       	st	X, r1
    42f2:	1e 92       	st	-X, r1
    42f4:	12 97       	sbiw	r26, 0x02	; 2
    42f6:	f0 92 8b 02 	sts	0x028B, r15
    42fa:	e0 92 8a 02 	sts	0x028A, r14
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	08 95       	ret

0000430c <memcpy>:
    430c:	fb 01       	movw	r30, r22
    430e:	dc 01       	movw	r26, r24
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <memcpy+0xa>
    4312:	01 90       	ld	r0, Z+
    4314:	0d 92       	st	X+, r0
    4316:	41 50       	subi	r20, 0x01	; 1
    4318:	50 40       	sbci	r21, 0x00	; 0
    431a:	d8 f7       	brcc	.-10     	; 0x4312 <memcpy+0x6>
    431c:	08 95       	ret

0000431e <_exit>:
    431e:	f8 94       	cli

00004320 <__stop_program>:
    4320:	ff cf       	rjmp	.-2      	; 0x4320 <__stop_program>
