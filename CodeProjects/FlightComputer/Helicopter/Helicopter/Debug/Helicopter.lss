
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  000047ae  00004842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800288  00800288  000048ca  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  000048cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b77  00000000  00000000  00007260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007dd7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000868  00000000  00000000  00007e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009a73  00000000  00000000  0000866e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000029dc  00000000  00000000  000120e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022c5  00000000  00000000  00014abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001db8  00000000  00000000  00016d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003be5  00000000  00000000  00018b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000043b2  00000000  00000000  0001c721  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000718  00000000  00000000  00020ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      68:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      6c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      7c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      80:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      84:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      88:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      90:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      94:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      98:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      ac:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
	}
}
      b4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      b8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      bc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      c4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      cc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      d8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      dc:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      e0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
      e8:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <_ZN10helicopter5tasks4Task7runTaskEv>
      ec:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
      f0:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
      f4:	0c 94 00 09 	jmp	0x1200	; 0x1200 <_ZN10helicopter5tasks4TaskD1Ev>
      f8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <_ZN10helicopter5tasks4Task4initEv>
      fc:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>
     100:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
     104:	0c 94 d7 06 	jmp	0xdae	; 0xdae <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     108:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     10c:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <_ZN10helicopter8messages7Message8getBytesEv>
     110:	0c 94 80 11 	jmp	0x2300	; 0x2300 <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     114:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <_ZN10helicopter8messages7Message12buildMessageEPh>
     118:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     11c:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <_ZN10helicopter7drivers11ServoDriverD0Ev>
     120:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>
     124:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>
     128:	0c 94 a5 11 	jmp	0x234a	; 0x234a <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     12c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>
     130:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>
     134:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
     138:	0c 94 48 13 	jmp	0x2690	; 0x2690 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     13c:	0c 94 1e 09 	jmp	0x123c	; 0x123c <_ZN10helicopter5tasks4TaskD0Ev>
     140:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
     144:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
     148:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>
     14c:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <_ZN10helicopter7drivers11ServoDriverD1Ev>
     150:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     154:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <_ZN10helicopter5tasks12FlashLEDTask4initEv>
     158:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
     15c:	0c 94 26 13 	jmp	0x264c	; 0x264c <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     160:	0c 94 16 14 	jmp	0x282c	; 0x282c <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
     164:	0c 94 49 11 	jmp	0x2292	; 0x2292 <_ZN10helicopter8messages11SyncMessageD1Ev>
     168:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <_ZN10helicopter8messages7MessageD1Ev>
     16c:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <_ZN10helicopter8messages7MessageD0Ev>
     170:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <_ZN10helicopter8messages11SyncMessageD0Ev>
     174:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <_ZN10helicopter5tasks4Task11runTaskImplEv>
     178:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <_ZN10helicopter7drivers12SerialDriverD0Ev>

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	12 e0       	ldi	r17, 0x02	; 2
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ee ea       	ldi	r30, 0xAE	; 174
     194:	f7 e4       	ldi	r31, 0x47	; 71
     196:	00 e0       	ldi	r16, 0x00	; 0
     198:	0b bf       	out	0x3b, r16	; 59
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x14>
     19c:	07 90       	elpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a8 38       	cpi	r26, 0x88	; 136
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x10>

000001a6 <__do_clear_bss>:
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	a8 e8       	ldi	r26, 0x88	; 136
     1aa:	b2 e0       	ldi	r27, 0x02	; 2
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	ae 38       	cpi	r26, 0x8E	; 142
     1b2:	b2 07       	cpc	r27, r18
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <main>
     1ba:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
				

			double MagYawDegrees() const { return magYawDegrees; }
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	1f 92       	push	r1
     1c8:	1f 92       	push	r1
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	9a 83       	std	Y+2, r25	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	fc 01       	movw	r30, r24
     1d8:	86 81       	ldd	r24, Z+6	; 0x06
     1da:	97 81       	ldd	r25, Z+7	; 0x07
     1dc:	a0 85       	ldd	r26, Z+8	; 0x08
     1de:	b1 85       	ldd	r27, Z+9	; 0x09
     1e0:	bc 01       	movw	r22, r24
     1e2:	cd 01       	movw	r24, r26
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>:
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	1f 92       	push	r1
     1f4:	1f 92       	push	r1
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	9a 83       	std	Y+2, r25	; 0x02
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	fc 01       	movw	r30, r24
     204:	82 85       	ldd	r24, Z+10	; 0x0a
     206:	93 85       	ldd	r25, Z+11	; 0x0b
     208:	a4 85       	ldd	r26, Z+12	; 0x0c
     20a:	b5 85       	ldd	r27, Z+13	; 0x0d
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <_ZN10helicopter5model11SystemModel10YawControlEd>:
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
				
				
			double YawControl() const {return yawControl;}
			void YawControl(double val) { yawControl = val;}
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <_ZN10helicopter5model11SystemModel10YawControlEd+0x6>
     220:	00 d0       	rcall	.+0      	; 0x222 <_ZN10helicopter5model11SystemModel10YawControlEd+0x8>
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	4b 83       	std	Y+3, r20	; 0x03
     22c:	5c 83       	std	Y+4, r21	; 0x04
     22e:	6d 83       	std	Y+5, r22	; 0x05
     230:	7e 83       	std	Y+6, r23	; 0x06
     232:	29 81       	ldd	r18, Y+1	; 0x01
     234:	3a 81       	ldd	r19, Y+2	; 0x02
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	ad 81       	ldd	r26, Y+5	; 0x05
     23c:	be 81       	ldd	r27, Y+6	; 0x06
     23e:	f9 01       	movw	r30, r18
     240:	86 87       	std	Z+14, r24	; 0x0e
     242:	97 87       	std	Z+15, r25	; 0x0f
     244:	a0 8b       	std	Z+16, r26	; 0x10
     246:	b1 8b       	std	Z+17, r27	; 0x11
     248:	26 96       	adiw	r28, 0x06	; 6
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	1f 92       	push	r1
     260:	1f 92       	push	r1
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	9a 83       	std	Y+2, r25	; 0x02
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	fc 01       	movw	r30, r24
     270:	82 89       	ldd	r24, Z+18	; 0x12
     272:	93 89       	ldd	r25, Z+19	; 0x13
     274:	a4 89       	ldd	r26, Z+20	; 0x14
     276:	b5 89       	ldd	r27, Z+21	; 0x15
     278:	bc 01       	movw	r22, r24
     27a:	cd 01       	movw	r24, r26
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>:
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	00 d0       	rcall	.+0      	; 0x28c <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x6>
     28c:	00 d0       	rcall	.+0      	; 0x28e <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd+0x8>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	4b 83       	std	Y+3, r20	; 0x03
     298:	5c 83       	std	Y+4, r21	; 0x04
     29a:	6d 83       	std	Y+5, r22	; 0x05
     29c:	7e 83       	std	Y+6, r23	; 0x06
     29e:	29 81       	ldd	r18, Y+1	; 0x01
     2a0:	3a 81       	ldd	r19, Y+2	; 0x02
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	ad 81       	ldd	r26, Y+5	; 0x05
     2a8:	be 81       	ldd	r27, Y+6	; 0x06
     2aa:	f9 01       	movw	r30, r18
     2ac:	82 8b       	std	Z+18, r24	; 0x12
     2ae:	93 8b       	std	Z+19, r25	; 0x13
     2b0:	a4 8b       	std	Z+20, r26	; 0x14
     2b2:	b5 8b       	std	Z+21, r27	; 0x15
     2b4:	26 96       	adiw	r28, 0x06	; 6
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	1f 92       	push	r1
     2cc:	1f 92       	push	r1
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	9a 83       	std	Y+2, r25	; 0x02
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	9a 81       	ldd	r25, Y+2	; 0x02
     2da:	fc 01       	movw	r30, r24
     2dc:	86 89       	ldd	r24, Z+22	; 0x16
     2de:	97 89       	ldd	r25, Z+23	; 0x17
     2e0:	a0 8d       	ldd	r26, Z+24	; 0x18
     2e2:	b1 8d       	ldd	r27, Z+25	; 0x19
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>:
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	1f 92       	push	r1
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	fc 01       	movw	r30, r24
     308:	82 8d       	ldd	r24, Z+26	; 0x1a
     30a:	93 8d       	ldd	r25, Z+27	; 0x1b
     30c:	a4 8d       	ldd	r26, Z+28	; 0x1c
     30e:	b5 8d       	ldd	r27, Z+29	; 0x1d
     310:	bc 01       	movw	r22, r24
     312:	cd 01       	movw	r24, r26
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <_ZNK10helicopter5model11SystemModel11YawIntegralEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	1f 92       	push	r1
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	fc 01       	movw	r30, r24
     334:	86 8d       	ldd	r24, Z+30	; 0x1e
     336:	97 8d       	ldd	r25, Z+31	; 0x1f
     338:	a0 a1       	ldd	r26, Z+32	; 0x20
     33a:	b1 a1       	ldd	r27, Z+33	; 0x21
     33c:	bc 01       	movw	r22, r24
     33e:	cd 01       	movw	r24, r26
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <_ZN10helicopter5model11SystemModel11YawIntegralEd>:
			void YawIntegral(double val) { yawIntegral = val;}
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	00 d0       	rcall	.+0      	; 0x350 <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x6>
     350:	00 d0       	rcall	.+0      	; 0x352 <_ZN10helicopter5model11SystemModel11YawIntegralEd+0x8>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	4b 83       	std	Y+3, r20	; 0x03
     35c:	5c 83       	std	Y+4, r21	; 0x04
     35e:	6d 83       	std	Y+5, r22	; 0x05
     360:	7e 83       	std	Y+6, r23	; 0x06
     362:	29 81       	ldd	r18, Y+1	; 0x01
     364:	3a 81       	ldd	r19, Y+2	; 0x02
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	9c 81       	ldd	r25, Y+4	; 0x04
     36a:	ad 81       	ldd	r26, Y+5	; 0x05
     36c:	be 81       	ldd	r27, Y+6	; 0x06
     36e:	f9 01       	movw	r30, r18
     370:	86 8f       	std	Z+30, r24	; 0x1e
     372:	97 8f       	std	Z+31, r25	; 0x1f
     374:	a0 a3       	std	Z+32, r26	; 0x20
     376:	b1 a3       	std	Z+33, r27	; 0x21
     378:	26 96       	adiw	r28, 0x06	; 6
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <_ZN10helicopter5model11SystemModel15YawProportionalEd>:

			double YawProportional() const {return yawProportional;}
			void YawProportional(double val) { yawProportional = val;}
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	00 d0       	rcall	.+0      	; 0x390 <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x6>
     390:	00 d0       	rcall	.+0      	; 0x392 <_ZN10helicopter5model11SystemModel15YawProportionalEd+0x8>
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	9a 83       	std	Y+2, r25	; 0x02
     398:	89 83       	std	Y+1, r24	; 0x01
     39a:	4b 83       	std	Y+3, r20	; 0x03
     39c:	5c 83       	std	Y+4, r21	; 0x04
     39e:	6d 83       	std	Y+5, r22	; 0x05
     3a0:	7e 83       	std	Y+6, r23	; 0x06
     3a2:	29 81       	ldd	r18, Y+1	; 0x01
     3a4:	3a 81       	ldd	r19, Y+2	; 0x02
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	9c 81       	ldd	r25, Y+4	; 0x04
     3aa:	ad 81       	ldd	r26, Y+5	; 0x05
     3ac:	be 81       	ldd	r27, Y+6	; 0x06
     3ae:	f9 01       	movw	r30, r18
     3b0:	82 a3       	std	Z+34, r24	; 0x22
     3b2:	93 a3       	std	Z+35, r25	; 0x23
     3b4:	a4 a3       	std	Z+36, r26	; 0x24
     3b6:	b5 a3       	std	Z+37, r27	; 0x25
     3b8:	26 96       	adiw	r28, 0x06	; 6
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>:

			double YawDerivativeError() const {return yawDerivativeError;}
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x6>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd+0x8>
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	9a 83       	std	Y+2, r25	; 0x02
     3d8:	89 83       	std	Y+1, r24	; 0x01
     3da:	4b 83       	std	Y+3, r20	; 0x03
     3dc:	5c 83       	std	Y+4, r21	; 0x04
     3de:	6d 83       	std	Y+5, r22	; 0x05
     3e0:	7e 83       	std	Y+6, r23	; 0x06
     3e2:	29 81       	ldd	r18, Y+1	; 0x01
     3e4:	3a 81       	ldd	r19, Y+2	; 0x02
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ea:	ad 81       	ldd	r26, Y+5	; 0x05
     3ec:	be 81       	ldd	r27, Y+6	; 0x06
     3ee:	f9 01       	movw	r30, r18
     3f0:	86 a3       	std	Z+38, r24	; 0x26
     3f2:	97 a3       	std	Z+39, r25	; 0x27
     3f4:	a0 a7       	std	Z+40, r26	; 0x28
     3f6:	b1 a7       	std	Z+41, r27	; 0x29
     3f8:	26 96       	adiw	r28, 0x06	; 6
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>:

#include "PIDController.h"

using namespace helicopter::controller;

PIDController::PIDController(SystemModel *model, ServoDriver *servoDriver): 
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x6>
     410:	00 d0       	rcall	.+0      	; 0x412 <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE+0x8>
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	7c 83       	std	Y+4, r23	; 0x04
     41c:	6b 83       	std	Y+3, r22	; 0x03
     41e:	5e 83       	std	Y+6, r21	; 0x06
     420:	4d 83       	std	Y+5, r20	; 0x05
minYawServoControlValue(0),
maxYawServoControlValue(0),
yawServoTrim(0),
intervalPeriodSecs(0),
controlMaxValue(0),
controlMinValue(0)
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	2b 81       	ldd	r18, Y+3	; 0x03
     428:	3c 81       	ldd	r19, Y+4	; 0x04
     42a:	fc 01       	movw	r30, r24
     42c:	31 83       	std	Z+1, r19	; 0x01
     42e:	20 83       	st	Z, r18
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	2d 81       	ldd	r18, Y+5	; 0x05
     436:	3e 81       	ldd	r19, Y+6	; 0x06
     438:	fc 01       	movw	r30, r24
     43a:	33 83       	std	Z+3, r19	; 0x03
     43c:	22 83       	std	Z+2, r18	; 0x02
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	fc 01       	movw	r30, r24
     444:	14 82       	std	Z+4, r1	; 0x04
     446:	15 82       	std	Z+5, r1	; 0x05
     448:	16 82       	std	Z+6, r1	; 0x06
     44a:	17 82       	std	Z+7, r1	; 0x07
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	9a 81       	ldd	r25, Y+2	; 0x02
     450:	fc 01       	movw	r30, r24
     452:	10 86       	std	Z+8, r1	; 0x08
     454:	11 86       	std	Z+9, r1	; 0x09
     456:	12 86       	std	Z+10, r1	; 0x0a
     458:	13 86       	std	Z+11, r1	; 0x0b
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	fc 01       	movw	r30, r24
     460:	14 86       	std	Z+12, r1	; 0x0c
     462:	15 86       	std	Z+13, r1	; 0x0d
     464:	16 86       	std	Z+14, r1	; 0x0e
     466:	17 86       	std	Z+15, r1	; 0x0f
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	fc 01       	movw	r30, r24
     46e:	10 8a       	std	Z+16, r1	; 0x10
     470:	11 8a       	std	Z+17, r1	; 0x11
     472:	12 8a       	std	Z+18, r1	; 0x12
     474:	13 8a       	std	Z+19, r1	; 0x13
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	14 8a       	std	Z+20, r1	; 0x14
     47e:	15 8a       	std	Z+21, r1	; 0x15
     480:	16 8a       	std	Z+22, r1	; 0x16
     482:	17 8a       	std	Z+23, r1	; 0x17
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	fc 01       	movw	r30, r24
     48a:	10 8e       	std	Z+24, r1	; 0x18
     48c:	11 8e       	std	Z+25, r1	; 0x19
     48e:	12 8e       	std	Z+26, r1	; 0x1a
     490:	13 8e       	std	Z+27, r1	; 0x1b
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	9a 81       	ldd	r25, Y+2	; 0x02
     496:	fc 01       	movw	r30, r24
     498:	14 8e       	std	Z+28, r1	; 0x1c
     49a:	15 8e       	std	Z+29, r1	; 0x1d
     49c:	16 8e       	std	Z+30, r1	; 0x1e
     49e:	17 8e       	std	Z+31, r1	; 0x1f
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	fc 01       	movw	r30, r24
     4a6:	10 a2       	std	Z+32, r1	; 0x20
     4a8:	11 a2       	std	Z+33, r1	; 0x21
     4aa:	12 a2       	std	Z+34, r1	; 0x22
     4ac:	13 a2       	std	Z+35, r1	; 0x23
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	fc 01       	movw	r30, r24
     4b4:	14 a2       	std	Z+36, r1	; 0x24
     4b6:	15 a2       	std	Z+37, r1	; 0x25
     4b8:	16 a2       	std	Z+38, r1	; 0x26
     4ba:	17 a2       	std	Z+39, r1	; 0x27
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	fc 01       	movw	r30, r24
     4c2:	10 a6       	std	Z+40, r1	; 0x28
     4c4:	11 a6       	std	Z+41, r1	; 0x29
     4c6:	12 a6       	std	Z+42, r1	; 0x2a
     4c8:	13 a6       	std	Z+43, r1	; 0x2b
{
	
}
     4ca:	26 96       	adiw	r28, 0x06	; 6
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>:
	delete model;
}

//TODO refactor to make this common for all PID calculations
double PIDController::calculateYawProportional(double currentYawDegrees, double referenceYawDegrees)
{
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	2e 97       	sbiw	r28, 0x0e	; 14
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	9e 83       	std	Y+6, r25	; 0x06
     4f6:	8d 83       	std	Y+5, r24	; 0x05
     4f8:	4f 83       	std	Y+7, r20	; 0x07
     4fa:	58 87       	std	Y+8, r21	; 0x08
     4fc:	69 87       	std	Y+9, r22	; 0x09
     4fe:	7a 87       	std	Y+10, r23	; 0x0a
     500:	0b 87       	std	Y+11, r16	; 0x0b
     502:	1c 87       	std	Y+12, r17	; 0x0c
     504:	2d 87       	std	Y+13, r18	; 0x0d
     506:	3e 87       	std	Y+14, r19	; 0x0e
	double yawError = currentYawDegrees - referenceYawDegrees;
     508:	2b 85       	ldd	r18, Y+11	; 0x0b
     50a:	3c 85       	ldd	r19, Y+12	; 0x0c
     50c:	4d 85       	ldd	r20, Y+13	; 0x0d
     50e:	5e 85       	ldd	r21, Y+14	; 0x0e
     510:	6f 81       	ldd	r22, Y+7	; 0x07
     512:	78 85       	ldd	r23, Y+8	; 0x08
     514:	89 85       	ldd	r24, Y+9	; 0x09
     516:	9a 85       	ldd	r25, Y+10	; 0x0a
     518:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__subsf3>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	9a 83       	std	Y+2, r25	; 0x02
     524:	ab 83       	std	Y+3, r26	; 0x03
     526:	bc 83       	std	Y+4, r27	; 0x04
	
	if (yawError >= 180)
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	44 e3       	ldi	r20, 0x34	; 52
     52e:	53 e4       	ldi	r21, 0x43	; 67
     530:	69 81       	ldd	r22, Y+1	; 0x01
     532:	7a 81       	ldd	r23, Y+2	; 0x02
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__gesf2>
     53c:	88 23       	and	r24, r24
     53e:	8c f0       	brlt	.+34     	; 0x562 <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0x86>
	{
		yawError = yawError - 360;
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	44 eb       	ldi	r20, 0xB4	; 180
     546:	53 e4       	ldi	r21, 0x43	; 67
     548:	69 81       	ldd	r22, Y+1	; 0x01
     54a:	7a 81       	ldd	r23, Y+2	; 0x02
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__subsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	89 83       	std	Y+1, r24	; 0x01
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	ab 83       	std	Y+3, r26	; 0x03
     55e:	bc 83       	std	Y+4, r27	; 0x04
     560:	1c c0       	rjmp	.+56     	; 0x59a <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	}
	else if (yawError < -180)
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	44 e3       	ldi	r20, 0x34	; 52
     568:	53 ec       	ldi	r21, 0xC3	; 195
     56a:	69 81       	ldd	r22, Y+1	; 0x01
     56c:	7a 81       	ldd	r23, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     576:	88 23       	and	r24, r24
     578:	84 f4       	brge	.+32     	; 0x59a <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd+0xbe>
	{
		yawError = yawError + 360;
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	44 eb       	ldi	r20, 0xB4	; 180
     580:	53 e4       	ldi	r21, 0x43	; 67
     582:	69 81       	ldd	r22, Y+1	; 0x01
     584:	7a 81       	ldd	r23, Y+2	; 0x02
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	9c 81       	ldd	r25, Y+4	; 0x04
     58a:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__addsf3>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	89 83       	std	Y+1, r24	; 0x01
     594:	9a 83       	std	Y+2, r25	; 0x02
     596:	ab 83       	std	Y+3, r26	; 0x03
     598:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return yawError;
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	ab 81       	ldd	r26, Y+3	; 0x03
     5a0:	bc 81       	ldd	r27, Y+4	; 0x04
}
     5a2:	bc 01       	movw	r22, r24
     5a4:	cd 01       	movw	r24, r26
     5a6:	2e 96       	adiw	r28, 0x0e	; 14
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEd>:

//TODO refactor to make this common for all PID calculations. I'll want to include the specific
//variables max values as parameters so I can 'generalize' it.
double PIDController::calculateYawIntegralAntiWindup(double oldYawControlValue)
{
     5bc:	cf 92       	push	r12
     5be:	df 92       	push	r13
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	2a 97       	sbiw	r28, 0x0a	; 10
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	9e 83       	std	Y+6, r25	; 0x06
     5da:	8d 83       	std	Y+5, r24	; 0x05
     5dc:	4f 83       	std	Y+7, r20	; 0x07
     5de:	58 87       	std	Y+8, r21	; 0x08
     5e0:	69 87       	std	Y+9, r22	; 0x09
     5e2:	7a 87       	std	Y+10, r23	; 0x0a
	double antiWindup = 0;
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	1a 82       	std	Y+2, r1	; 0x02
     5e8:	1b 82       	std	Y+3, r1	; 0x03
     5ea:	1c 82       	std	Y+4, r1	; 0x04
	
	if (oldYawControlValue > maxYawServoControlValue)
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 8d       	ldd	r24, Z+24	; 0x18
     5f4:	91 8d       	ldd	r25, Z+25	; 0x19
     5f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
     5f8:	b3 8d       	ldd	r27, Z+27	; 0x1b
     5fa:	2f 81       	ldd	r18, Y+7	; 0x07
     5fc:	38 85       	ldd	r19, Y+8	; 0x08
     5fe:	49 85       	ldd	r20, Y+9	; 0x09
     600:	5a 85       	ldd	r21, Y+10	; 0x0a
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     60a:	88 23       	and	r24, r24
     60c:	2c f5       	brge	.+74     	; 0x658 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEd+0x9c>
	{
		antiWindup = yawAntiWindupGain * (oldYawControlValue - maxYawServoControlValue);
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	9e 81       	ldd	r25, Y+6	; 0x06
     612:	fc 01       	movw	r30, r24
     614:	c0 88       	ldd	r12, Z+16	; 0x10
     616:	d1 88       	ldd	r13, Z+17	; 0x11
     618:	e2 88       	ldd	r14, Z+18	; 0x12
     61a:	f3 88       	ldd	r15, Z+19	; 0x13
     61c:	8d 81       	ldd	r24, Y+5	; 0x05
     61e:	9e 81       	ldd	r25, Y+6	; 0x06
     620:	fc 01       	movw	r30, r24
     622:	80 8d       	ldd	r24, Z+24	; 0x18
     624:	91 8d       	ldd	r25, Z+25	; 0x19
     626:	a2 8d       	ldd	r26, Z+26	; 0x1a
     628:	b3 8d       	ldd	r27, Z+27	; 0x1b
     62a:	9c 01       	movw	r18, r24
     62c:	ad 01       	movw	r20, r26
     62e:	6f 81       	ldd	r22, Y+7	; 0x07
     630:	78 85       	ldd	r23, Y+8	; 0x08
     632:	89 85       	ldd	r24, Y+9	; 0x09
     634:	9a 85       	ldd	r25, Y+10	; 0x0a
     636:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__subsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	9c 01       	movw	r18, r24
     640:	ad 01       	movw	r20, r26
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__mulsf3>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	89 83       	std	Y+1, r24	; 0x01
     650:	9a 83       	std	Y+2, r25	; 0x02
     652:	ab 83       	std	Y+3, r26	; 0x03
     654:	bc 83       	std	Y+4, r27	; 0x04
     656:	35 c0       	rjmp	.+106    	; 0x6c2 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEd+0x106>
	}else if (oldYawControlValue < minYawServoControlValue)
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	9e 81       	ldd	r25, Y+6	; 0x06
     65c:	fc 01       	movw	r30, r24
     65e:	84 89       	ldd	r24, Z+20	; 0x14
     660:	95 89       	ldd	r25, Z+21	; 0x15
     662:	a6 89       	ldd	r26, Z+22	; 0x16
     664:	b7 89       	ldd	r27, Z+23	; 0x17
     666:	2f 81       	ldd	r18, Y+7	; 0x07
     668:	38 85       	ldd	r19, Y+8	; 0x08
     66a:	49 85       	ldd	r20, Y+9	; 0x09
     66c:	5a 85       	ldd	r21, Y+10	; 0x0a
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__gesf2>
     676:	18 16       	cp	r1, r24
     678:	24 f5       	brge	.+72     	; 0x6c2 <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEd+0x106>
	{
		antiWindup = yawAntiWindupGain * (oldYawControlValue - minYawServoControlValue);
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	fc 01       	movw	r30, r24
     680:	c0 88       	ldd	r12, Z+16	; 0x10
     682:	d1 88       	ldd	r13, Z+17	; 0x11
     684:	e2 88       	ldd	r14, Z+18	; 0x12
     686:	f3 88       	ldd	r15, Z+19	; 0x13
     688:	8d 81       	ldd	r24, Y+5	; 0x05
     68a:	9e 81       	ldd	r25, Y+6	; 0x06
     68c:	fc 01       	movw	r30, r24
     68e:	84 89       	ldd	r24, Z+20	; 0x14
     690:	95 89       	ldd	r25, Z+21	; 0x15
     692:	a6 89       	ldd	r26, Z+22	; 0x16
     694:	b7 89       	ldd	r27, Z+23	; 0x17
     696:	9c 01       	movw	r18, r24
     698:	ad 01       	movw	r20, r26
     69a:	6f 81       	ldd	r22, Y+7	; 0x07
     69c:	78 85       	ldd	r23, Y+8	; 0x08
     69e:	89 85       	ldd	r24, Y+9	; 0x09
     6a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__subsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	9c 01       	movw	r18, r24
     6ac:	ad 01       	movw	r20, r26
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__mulsf3>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	9a 83       	std	Y+2, r25	; 0x02
     6be:	ab 83       	std	Y+3, r26	; 0x03
     6c0:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return antiWindup;
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	ab 81       	ldd	r26, Y+3	; 0x03
     6c8:	bc 81       	ldd	r27, Y+4	; 0x04
}
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	2a 96       	adiw	r28, 0x0a	; 10
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	08 95       	ret

000006e8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>:

//TODO refactor to make this common for all PID calculations
double PIDController::calculateYawIntegral(double yawProportionalDegrees, double oldYawIntegral, double yawAntiWindup)
{
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	62 97       	sbiw	r28, 0x12	; 18
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	9e 83       	std	Y+6, r25	; 0x06
     70a:	8d 83       	std	Y+5, r24	; 0x05
     70c:	4f 83       	std	Y+7, r20	; 0x07
     70e:	58 87       	std	Y+8, r21	; 0x08
     710:	69 87       	std	Y+9, r22	; 0x09
     712:	7a 87       	std	Y+10, r23	; 0x0a
     714:	0b 87       	std	Y+11, r16	; 0x0b
     716:	1c 87       	std	Y+12, r17	; 0x0c
     718:	2d 87       	std	Y+13, r18	; 0x0d
     71a:	3e 87       	std	Y+14, r19	; 0x0e
     71c:	cf 86       	std	Y+15, r12	; 0x0f
     71e:	d8 8a       	std	Y+16, r13	; 0x10
     720:	e9 8a       	std	Y+17, r14	; 0x11
     722:	fa 8a       	std	Y+18, r15	; 0x12
	double integral = 0;
     724:	19 82       	std	Y+1, r1	; 0x01
     726:	1a 82       	std	Y+2, r1	; 0x02
     728:	1b 82       	std	Y+3, r1	; 0x03
     72a:	1c 82       	std	Y+4, r1	; 0x04
	
	integral = oldYawIntegral + yawProportionalDegrees * intervalPeriodSecs;
     72c:	8d 81       	ldd	r24, Y+5	; 0x05
     72e:	9e 81       	ldd	r25, Y+6	; 0x06
     730:	fc 01       	movw	r30, r24
     732:	80 a1       	ldd	r24, Z+32	; 0x20
     734:	91 a1       	ldd	r25, Z+33	; 0x21
     736:	a2 a1       	ldd	r26, Z+34	; 0x22
     738:	b3 a1       	ldd	r27, Z+35	; 0x23
     73a:	2f 81       	ldd	r18, Y+7	; 0x07
     73c:	38 85       	ldd	r19, Y+8	; 0x08
     73e:	49 85       	ldd	r20, Y+9	; 0x09
     740:	5a 85       	ldd	r21, Y+10	; 0x0a
     742:	bc 01       	movw	r22, r24
     744:	cd 01       	movw	r24, r26
     746:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__mulsf3>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	2b 85       	ldd	r18, Y+11	; 0x0b
     750:	3c 85       	ldd	r19, Y+12	; 0x0c
     752:	4d 85       	ldd	r20, Y+13	; 0x0d
     754:	5e 85       	ldd	r21, Y+14	; 0x0e
     756:	bc 01       	movw	r22, r24
     758:	cd 01       	movw	r24, r26
     75a:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__addsf3>
     75e:	dc 01       	movw	r26, r24
     760:	cb 01       	movw	r24, r22
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	ab 83       	std	Y+3, r26	; 0x03
     768:	bc 83       	std	Y+4, r27	; 0x04
	
	if (yawAntiWindup != 0)
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	a9 01       	movw	r20, r18
     770:	6f 85       	ldd	r22, Y+15	; 0x0f
     772:	78 89       	ldd	r23, Y+16	; 0x10
     774:	89 89       	ldd	r24, Y+17	; 0x11
     776:	9a 89       	ldd	r25, Y+18	; 0x12
     778:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     77c:	88 23       	and	r24, r24
     77e:	09 f4       	brne	.+2      	; 0x782 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x9a>
     780:	52 c0       	rjmp	.+164    	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x13e>
	{
		//We want to know if the integral is greater than 0 or less than 0 so that when we subtract
		//the antiwindup value, we get closer to 0, and don't exceed 0. 
		if (integral > 0 && yawAntiWindup > integral)
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	69 81       	ldd	r22, Y+1	; 0x01
     78a:	7a 81       	ldd	r23, Y+2	; 0x02
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__gesf2>
     794:	18 16       	cp	r1, r24
     796:	8c f4       	brge	.+34     	; 0x7ba <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xd2>
     798:	29 81       	ldd	r18, Y+1	; 0x01
     79a:	3a 81       	ldd	r19, Y+2	; 0x02
     79c:	4b 81       	ldd	r20, Y+3	; 0x03
     79e:	5c 81       	ldd	r21, Y+4	; 0x04
     7a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     7a2:	78 89       	ldd	r23, Y+16	; 0x10
     7a4:	89 89       	ldd	r24, Y+17	; 0x11
     7a6:	9a 89       	ldd	r25, Y+18	; 0x12
     7a8:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__gesf2>
     7ac:	18 16       	cp	r1, r24
     7ae:	2c f4       	brge	.+10     	; 0x7ba <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0xd2>
		{
			integral = 0;
     7b0:	19 82       	std	Y+1, r1	; 0x01
     7b2:	1a 82       	std	Y+2, r1	; 0x02
     7b4:	1b 82       	std	Y+3, r1	; 0x03
     7b6:	1c 82       	std	Y+4, r1	; 0x04
     7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x108>
		}else if (integral < 0 && yawAntiWindup < integral)
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	a9 01       	movw	r20, r18
     7c0:	69 81       	ldd	r22, Y+1	; 0x01
     7c2:	7a 81       	ldd	r23, Y+2	; 0x02
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	9c 81       	ldd	r25, Y+4	; 0x04
     7c8:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     7cc:	88 23       	and	r24, r24
     7ce:	84 f4       	brge	.+32     	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x108>
     7d0:	29 81       	ldd	r18, Y+1	; 0x01
     7d2:	3a 81       	ldd	r19, Y+2	; 0x02
     7d4:	4b 81       	ldd	r20, Y+3	; 0x03
     7d6:	5c 81       	ldd	r21, Y+4	; 0x04
     7d8:	6f 85       	ldd	r22, Y+15	; 0x0f
     7da:	78 89       	ldd	r23, Y+16	; 0x10
     7dc:	89 89       	ldd	r24, Y+17	; 0x11
     7de:	9a 89       	ldd	r25, Y+18	; 0x12
     7e0:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	24 f4       	brge	.+8      	; 0x7f0 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x108>
		{
			integral = 0;
     7e8:	19 82       	std	Y+1, r1	; 0x01
     7ea:	1a 82       	std	Y+2, r1	; 0x02
     7ec:	1b 82       	std	Y+3, r1	; 0x03
     7ee:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		if (integral != 0)
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	a9 01       	movw	r20, r18
     7f6:	69 81       	ldd	r22, Y+1	; 0x01
     7f8:	7a 81       	ldd	r23, Y+2	; 0x02
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     802:	88 23       	and	r24, r24
     804:	81 f0       	breq	.+32     	; 0x826 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd+0x13e>
		{
			integral = integral - yawAntiWindup;
     806:	2f 85       	ldd	r18, Y+15	; 0x0f
     808:	38 89       	ldd	r19, Y+16	; 0x10
     80a:	49 89       	ldd	r20, Y+17	; 0x11
     80c:	5a 89       	ldd	r21, Y+18	; 0x12
     80e:	69 81       	ldd	r22, Y+1	; 0x01
     810:	7a 81       	ldd	r23, Y+2	; 0x02
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	9c 81       	ldd	r25, Y+4	; 0x04
     816:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__subsf3>
     81a:	dc 01       	movw	r26, r24
     81c:	cb 01       	movw	r24, r22
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	ab 83       	std	Y+3, r26	; 0x03
     824:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	
	return integral;
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	ab 81       	ldd	r26, Y+3	; 0x03
     82c:	bc 81       	ldd	r27, Y+4	; 0x04
}
     82e:	bc 01       	movw	r22, r24
     830:	cd 01       	movw	r24, r26
     832:	62 96       	adiw	r28, 0x12	; 18
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	08 95       	ret

00000850 <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>:


double PIDController::calculateYawVelocityError(double yawVelocityDegreesPerSecond, double referenceYawVelocityDegreesPerSecond)
{
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	2a 97       	sbiw	r28, 0x0a	; 10
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	9a 83       	std	Y+2, r25	; 0x02
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	4b 83       	std	Y+3, r20	; 0x03
     86e:	5c 83       	std	Y+4, r21	; 0x04
     870:	6d 83       	std	Y+5, r22	; 0x05
     872:	7e 83       	std	Y+6, r23	; 0x06
     874:	0f 83       	std	Y+7, r16	; 0x07
     876:	18 87       	std	Y+8, r17	; 0x08
     878:	29 87       	std	Y+9, r18	; 0x09
     87a:	3a 87       	std	Y+10, r19	; 0x0a
	return yawVelocityDegreesPerSecond - referenceYawVelocityDegreesPerSecond;
     87c:	2f 81       	ldd	r18, Y+7	; 0x07
     87e:	38 85       	ldd	r19, Y+8	; 0x08
     880:	49 85       	ldd	r20, Y+9	; 0x09
     882:	5a 85       	ldd	r21, Y+10	; 0x0a
     884:	6b 81       	ldd	r22, Y+3	; 0x03
     886:	7c 81       	ldd	r23, Y+4	; 0x04
     888:	8d 81       	ldd	r24, Y+5	; 0x05
     88a:	9e 81       	ldd	r25, Y+6	; 0x06
     88c:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__subsf3>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
}
     894:	bc 01       	movw	r22, r24
     896:	cd 01       	movw	r24, r26
     898:	2a 96       	adiw	r28, 0x0a	; 10
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>:

double PIDController::calculateYawControlValue(double yawProportionalDegrees, double yawVelocityErrorDegreesPerSecond, double yawIntegral)
{
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	62 97       	sbiw	r28, 0x12	; 18
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	9e 83       	std	Y+6, r25	; 0x06
     8d0:	8d 83       	std	Y+5, r24	; 0x05
     8d2:	4f 83       	std	Y+7, r20	; 0x07
     8d4:	58 87       	std	Y+8, r21	; 0x08
     8d6:	69 87       	std	Y+9, r22	; 0x09
     8d8:	7a 87       	std	Y+10, r23	; 0x0a
     8da:	0b 87       	std	Y+11, r16	; 0x0b
     8dc:	1c 87       	std	Y+12, r17	; 0x0c
     8de:	2d 87       	std	Y+13, r18	; 0x0d
     8e0:	3e 87       	std	Y+14, r19	; 0x0e
     8e2:	cf 86       	std	Y+15, r12	; 0x0f
     8e4:	d8 8a       	std	Y+16, r13	; 0x10
     8e6:	e9 8a       	std	Y+17, r14	; 0x11
     8e8:	fa 8a       	std	Y+18, r15	; 0x12
	double controlValue = 0;
     8ea:	19 82       	std	Y+1, r1	; 0x01
     8ec:	1a 82       	std	Y+2, r1	; 0x02
     8ee:	1b 82       	std	Y+3, r1	; 0x03
     8f0:	1c 82       	std	Y+4, r1	; 0x04
	
	controlValue = yawIntegral * yawIntegralGain + yawProportionalDegrees * yawProportionalGain + yawVelocityErrorDegreesPerSecond * yawDerivativeGain;
     8f2:	8d 81       	ldd	r24, Y+5	; 0x05
     8f4:	9e 81       	ldd	r25, Y+6	; 0x06
     8f6:	fc 01       	movw	r30, r24
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	95 81       	ldd	r25, Z+5	; 0x05
     8fc:	a6 81       	ldd	r26, Z+6	; 0x06
     8fe:	b7 81       	ldd	r27, Z+7	; 0x07
     900:	2f 85       	ldd	r18, Y+15	; 0x0f
     902:	38 89       	ldd	r19, Y+16	; 0x10
     904:	49 89       	ldd	r20, Y+17	; 0x11
     906:	5a 89       	ldd	r21, Y+18	; 0x12
     908:	bc 01       	movw	r22, r24
     90a:	cd 01       	movw	r24, r26
     90c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__mulsf3>
     910:	dc 01       	movw	r26, r24
     912:	cb 01       	movw	r24, r22
     914:	6c 01       	movw	r12, r24
     916:	7d 01       	movw	r14, r26
     918:	8d 81       	ldd	r24, Y+5	; 0x05
     91a:	9e 81       	ldd	r25, Y+6	; 0x06
     91c:	fc 01       	movw	r30, r24
     91e:	84 85       	ldd	r24, Z+12	; 0x0c
     920:	95 85       	ldd	r25, Z+13	; 0x0d
     922:	a6 85       	ldd	r26, Z+14	; 0x0e
     924:	b7 85       	ldd	r27, Z+15	; 0x0f
     926:	2f 81       	ldd	r18, Y+7	; 0x07
     928:	38 85       	ldd	r19, Y+8	; 0x08
     92a:	49 85       	ldd	r20, Y+9	; 0x09
     92c:	5a 85       	ldd	r21, Y+10	; 0x0a
     92e:	bc 01       	movw	r22, r24
     930:	cd 01       	movw	r24, r26
     932:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__mulsf3>
     936:	dc 01       	movw	r26, r24
     938:	cb 01       	movw	r24, r22
     93a:	9c 01       	movw	r18, r24
     93c:	ad 01       	movw	r20, r26
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__addsf3>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	6c 01       	movw	r12, r24
     94c:	7d 01       	movw	r14, r26
     94e:	8d 81       	ldd	r24, Y+5	; 0x05
     950:	9e 81       	ldd	r25, Y+6	; 0x06
     952:	fc 01       	movw	r30, r24
     954:	80 85       	ldd	r24, Z+8	; 0x08
     956:	91 85       	ldd	r25, Z+9	; 0x09
     958:	a2 85       	ldd	r26, Z+10	; 0x0a
     95a:	b3 85       	ldd	r27, Z+11	; 0x0b
     95c:	2b 85       	ldd	r18, Y+11	; 0x0b
     95e:	3c 85       	ldd	r19, Y+12	; 0x0c
     960:	4d 85       	ldd	r20, Y+13	; 0x0d
     962:	5e 85       	ldd	r21, Y+14	; 0x0e
     964:	bc 01       	movw	r22, r24
     966:	cd 01       	movw	r24, r26
     968:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__mulsf3>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	9c 01       	movw	r18, r24
     972:	ad 01       	movw	r20, r26
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__addsf3>
     97c:	dc 01       	movw	r26, r24
     97e:	cb 01       	movw	r24, r22
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	9a 83       	std	Y+2, r25	; 0x02
     984:	ab 83       	std	Y+3, r26	; 0x03
     986:	bc 83       	std	Y+4, r27	; 0x04
	
	if (controlValue > controlMaxValue)
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	9e 81       	ldd	r25, Y+6	; 0x06
     98c:	fc 01       	movw	r30, r24
     98e:	84 a1       	ldd	r24, Z+36	; 0x24
     990:	95 a1       	ldd	r25, Z+37	; 0x25
     992:	a6 a1       	ldd	r26, Z+38	; 0x26
     994:	b7 a1       	ldd	r27, Z+39	; 0x27
     996:	29 81       	ldd	r18, Y+1	; 0x01
     998:	3a 81       	ldd	r19, Y+2	; 0x02
     99a:	4b 81       	ldd	r20, Y+3	; 0x03
     99c:	5c 81       	ldd	r21, Y+4	; 0x04
     99e:	bc 01       	movw	r22, r24
     9a0:	cd 01       	movw	r24, r26
     9a2:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     9a6:	88 23       	and	r24, r24
     9a8:	64 f4       	brge	.+24     	; 0x9c2 <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd+0x114>
	{
		controlValue = controlMaxValue;
     9aa:	8d 81       	ldd	r24, Y+5	; 0x05
     9ac:	9e 81       	ldd	r25, Y+6	; 0x06
     9ae:	fc 01       	movw	r30, r24
     9b0:	84 a1       	ldd	r24, Z+36	; 0x24
     9b2:	95 a1       	ldd	r25, Z+37	; 0x25
     9b4:	a6 a1       	ldd	r26, Z+38	; 0x26
     9b6:	b7 a1       	ldd	r27, Z+39	; 0x27
     9b8:	89 83       	std	Y+1, r24	; 0x01
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	ab 83       	std	Y+3, r26	; 0x03
     9be:	bc 83       	std	Y+4, r27	; 0x04
     9c0:	1c c0       	rjmp	.+56     	; 0x9fa <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd+0x14c>
	}else if (controlValue < controlMinValue)
     9c2:	8d 81       	ldd	r24, Y+5	; 0x05
     9c4:	9e 81       	ldd	r25, Y+6	; 0x06
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 a5       	ldd	r24, Z+40	; 0x28
     9ca:	91 a5       	ldd	r25, Z+41	; 0x29
     9cc:	a2 a5       	ldd	r26, Z+42	; 0x2a
     9ce:	b3 a5       	ldd	r27, Z+43	; 0x2b
     9d0:	29 81       	ldd	r18, Y+1	; 0x01
     9d2:	3a 81       	ldd	r19, Y+2	; 0x02
     9d4:	4b 81       	ldd	r20, Y+3	; 0x03
     9d6:	5c 81       	ldd	r21, Y+4	; 0x04
     9d8:	bc 01       	movw	r22, r24
     9da:	cd 01       	movw	r24, r26
     9dc:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__gesf2>
     9e0:	18 16       	cp	r1, r24
     9e2:	5c f4       	brge	.+22     	; 0x9fa <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd+0x14c>
	{
		controlValue = controlMinValue;
     9e4:	8d 81       	ldd	r24, Y+5	; 0x05
     9e6:	9e 81       	ldd	r25, Y+6	; 0x06
     9e8:	fc 01       	movw	r30, r24
     9ea:	80 a5       	ldd	r24, Z+40	; 0x28
     9ec:	91 a5       	ldd	r25, Z+41	; 0x29
     9ee:	a2 a5       	ldd	r26, Z+42	; 0x2a
     9f0:	b3 a5       	ldd	r27, Z+43	; 0x2b
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	9a 83       	std	Y+2, r25	; 0x02
     9f6:	ab 83       	std	Y+3, r26	; 0x03
     9f8:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return controlValue;
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	9a 81       	ldd	r25, Y+2	; 0x02
     9fe:	ab 81       	ldd	r26, Y+3	; 0x03
     a00:	bc 81       	ldd	r27, Y+4	; 0x04
}
     a02:	bc 01       	movw	r22, r24
     a04:	cd 01       	movw	r24, r26
     a06:	62 96       	adiw	r28, 0x12	; 18
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	08 95       	ret

00000a24 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>:


double PIDController::adjustControlForServoLimits( double controlValueToAdjust )
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	2a 97       	sbiw	r28, 0x0a	; 10
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	9e 83       	std	Y+6, r25	; 0x06
     a3a:	8d 83       	std	Y+5, r24	; 0x05
     a3c:	4f 83       	std	Y+7, r20	; 0x07
     a3e:	58 87       	std	Y+8, r21	; 0x08
     a40:	69 87       	std	Y+9, r22	; 0x09
     a42:	7a 87       	std	Y+10, r23	; 0x0a
	double controlValue = controlValueToAdjust;
     a44:	8f 81       	ldd	r24, Y+7	; 0x07
     a46:	98 85       	ldd	r25, Y+8	; 0x08
     a48:	a9 85       	ldd	r26, Y+9	; 0x09
     a4a:	ba 85       	ldd	r27, Y+10	; 0x0a
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	ab 83       	std	Y+3, r26	; 0x03
     a52:	bc 83       	std	Y+4, r27	; 0x04
	
	//TODO: when generalizing ensure to change this value. 
	controlValue += yawServoTrim;
     a54:	8d 81       	ldd	r24, Y+5	; 0x05
     a56:	9e 81       	ldd	r25, Y+6	; 0x06
     a58:	fc 01       	movw	r30, r24
     a5a:	84 8d       	ldd	r24, Z+28	; 0x1c
     a5c:	95 8d       	ldd	r25, Z+29	; 0x1d
     a5e:	a6 8d       	ldd	r26, Z+30	; 0x1e
     a60:	b7 8d       	ldd	r27, Z+31	; 0x1f
     a62:	9c 01       	movw	r18, r24
     a64:	ad 01       	movw	r20, r26
     a66:	69 81       	ldd	r22, Y+1	; 0x01
     a68:	7a 81       	ldd	r23, Y+2	; 0x02
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	9c 81       	ldd	r25, Y+4	; 0x04
     a6e:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__addsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	9a 83       	std	Y+2, r25	; 0x02
     a7a:	ab 83       	std	Y+3, r26	; 0x03
     a7c:	bc 83       	std	Y+4, r27	; 0x04
	
	if (controlValue > maxYawServoControlValue)
     a7e:	8d 81       	ldd	r24, Y+5	; 0x05
     a80:	9e 81       	ldd	r25, Y+6	; 0x06
     a82:	fc 01       	movw	r30, r24
     a84:	80 8d       	ldd	r24, Z+24	; 0x18
     a86:	91 8d       	ldd	r25, Z+25	; 0x19
     a88:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a8a:	b3 8d       	ldd	r27, Z+27	; 0x1b
     a8c:	29 81       	ldd	r18, Y+1	; 0x01
     a8e:	3a 81       	ldd	r19, Y+2	; 0x02
     a90:	4b 81       	ldd	r20, Y+3	; 0x03
     a92:	5c 81       	ldd	r21, Y+4	; 0x04
     a94:	bc 01       	movw	r22, r24
     a96:	cd 01       	movw	r24, r26
     a98:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
     a9c:	88 23       	and	r24, r24
     a9e:	64 f4       	brge	.+24     	; 0xab8 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0x94>
	{
		controlValue = maxYawServoControlValue;
     aa0:	8d 81       	ldd	r24, Y+5	; 0x05
     aa2:	9e 81       	ldd	r25, Y+6	; 0x06
     aa4:	fc 01       	movw	r30, r24
     aa6:	80 8d       	ldd	r24, Z+24	; 0x18
     aa8:	91 8d       	ldd	r25, Z+25	; 0x19
     aaa:	a2 8d       	ldd	r26, Z+26	; 0x1a
     aac:	b3 8d       	ldd	r27, Z+27	; 0x1b
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	ab 83       	std	Y+3, r26	; 0x03
     ab4:	bc 83       	std	Y+4, r27	; 0x04
     ab6:	1c c0       	rjmp	.+56     	; 0xaf0 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	}else if (controlValue < minYawServoControlValue)
     ab8:	8d 81       	ldd	r24, Y+5	; 0x05
     aba:	9e 81       	ldd	r25, Y+6	; 0x06
     abc:	fc 01       	movw	r30, r24
     abe:	84 89       	ldd	r24, Z+20	; 0x14
     ac0:	95 89       	ldd	r25, Z+21	; 0x15
     ac2:	a6 89       	ldd	r26, Z+22	; 0x16
     ac4:	b7 89       	ldd	r27, Z+23	; 0x17
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	4b 81       	ldd	r20, Y+3	; 0x03
     acc:	5c 81       	ldd	r21, Y+4	; 0x04
     ace:	bc 01       	movw	r22, r24
     ad0:	cd 01       	movw	r24, r26
     ad2:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__gesf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	5c f4       	brge	.+22     	; 0xaf0 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd+0xcc>
	{
		controlValue = minYawServoControlValue;
     ada:	8d 81       	ldd	r24, Y+5	; 0x05
     adc:	9e 81       	ldd	r25, Y+6	; 0x06
     ade:	fc 01       	movw	r30, r24
     ae0:	84 89       	ldd	r24, Z+20	; 0x14
     ae2:	95 89       	ldd	r25, Z+21	; 0x15
     ae4:	a6 89       	ldd	r26, Z+22	; 0x16
     ae6:	b7 89       	ldd	r27, Z+23	; 0x17
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	ab 83       	std	Y+3, r26	; 0x03
     aee:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	return controlValue;
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	ab 81       	ldd	r26, Y+3	; 0x03
     af6:	bc 81       	ldd	r27, Y+4	; 0x04
}
     af8:	bc 01       	movw	r22, r24
     afa:	cd 01       	movw	r24, r26
     afc:	2a 96       	adiw	r28, 0x0a	; 10
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>:

void PIDController::tailRotorCollectiveOuterLoopUpdate()
{
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	6a 97       	sbiw	r28, 0x1a	; 26
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	9a 8f       	std	Y+26, r25	; 0x1a
     b30:	89 8f       	std	Y+25, r24	; 0x19
	double yawProportional = calculateYawProportional(model->MagYawDegrees(), model->ReferenceMagYawDegrees());
     b32:	89 8d       	ldd	r24, Y+25	; 0x19
     b34:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b36:	fc 01       	movw	r30, r24
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZNK10helicopter5model11SystemModel22ReferenceMagYawDegreesEv>
     b40:	6b 01       	movw	r12, r22
     b42:	7c 01       	movw	r14, r24
     b44:	89 8d       	ldd	r24, Y+25	; 0x19
     b46:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b48:	fc 01       	movw	r30, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
     b52:	dc 01       	movw	r26, r24
     b54:	cb 01       	movw	r24, r22
     b56:	e9 8d       	ldd	r30, Y+25	; 0x19
     b58:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b5a:	97 01       	movw	r18, r14
     b5c:	86 01       	movw	r16, r12
     b5e:	ac 01       	movw	r20, r24
     b60:	bd 01       	movw	r22, r26
     b62:	cf 01       	movw	r24, r30
     b64:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN10helicopter10controller13PIDController24calculateYawProportionalEdd>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	89 83       	std	Y+1, r24	; 0x01
     b6e:	9a 83       	std	Y+2, r25	; 0x02
     b70:	ab 83       	std	Y+3, r26	; 0x03
     b72:	bc 83       	std	Y+4, r27	; 0x04
	double yawAntiWindup = calculateYawIntegralAntiWindup(model->YawControlBeforeServoLimitsAdjustment());
     b74:	89 8d       	ldd	r24, Y+25	; 0x19
     b76:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b78:	fc 01       	movw	r30, r24
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZNK10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEv>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	29 8d       	ldd	r18, Y+25	; 0x19
     b88:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b8a:	ac 01       	movw	r20, r24
     b8c:	bd 01       	movw	r22, r26
     b8e:	c9 01       	movw	r24, r18
     b90:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN10helicopter10controller13PIDController30calculateYawIntegralAntiWindupEd>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	8d 83       	std	Y+5, r24	; 0x05
     b9a:	9e 83       	std	Y+6, r25	; 0x06
     b9c:	af 83       	std	Y+7, r26	; 0x07
     b9e:	b8 87       	std	Y+8, r27	; 0x08
	double yawIntegral = calculateYawIntegral(yawProportional, model->YawIntegral(), yawAntiWindup);
     ba0:	89 8d       	ldd	r24, Y+25	; 0x19
     ba2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ba4:	fc 01       	movw	r30, r24
     ba6:	80 81       	ld	r24, Z
     ba8:	91 81       	ldd	r25, Z+1	; 0x01
     baa:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	ed 80       	ldd	r14, Y+5	; 0x05
     bb4:	fe 80       	ldd	r15, Y+6	; 0x06
     bb6:	0f 81       	ldd	r16, Y+7	; 0x07
     bb8:	18 85       	ldd	r17, Y+8	; 0x08
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	ab 81       	ldd	r26, Y+3	; 0x03
     bc0:	bc 81       	ldd	r27, Y+4	; 0x04
     bc2:	e9 8d       	ldd	r30, Y+25	; 0x19
     bc4:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bc6:	67 01       	movw	r12, r14
     bc8:	78 01       	movw	r14, r16
     bca:	89 01       	movw	r16, r18
     bcc:	9a 01       	movw	r18, r20
     bce:	ac 01       	movw	r20, r24
     bd0:	bd 01       	movw	r22, r26
     bd2:	cf 01       	movw	r24, r30
     bd4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN10helicopter10controller13PIDController20calculateYawIntegralEddd>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	89 87       	std	Y+9, r24	; 0x09
     bde:	9a 87       	std	Y+10, r25	; 0x0a
     be0:	ab 87       	std	Y+11, r26	; 0x0b
     be2:	bc 87       	std	Y+12, r27	; 0x0c
	double yawDerivativeError = calculateYawVelocityError(model->YawVelocityDegreesPerSecond(), model->ReferenceYawVelocityDegreesPerSecond());
     be4:	89 8d       	ldd	r24, Y+25	; 0x19
     be6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZNK10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEv>
     bf2:	6b 01       	movw	r12, r22
     bf4:	7c 01       	movw	r14, r24
     bf6:	89 8d       	ldd	r24, Y+25	; 0x19
     bf8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	e9 8d       	ldd	r30, Y+25	; 0x19
     c0a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     c0c:	97 01       	movw	r18, r14
     c0e:	86 01       	movw	r16, r12
     c10:	ac 01       	movw	r20, r24
     c12:	bd 01       	movw	r22, r26
     c14:	cf 01       	movw	r24, r30
     c16:	0e 94 28 04 	call	0x850	; 0x850 <_ZN10helicopter10controller13PIDController25calculateYawVelocityErrorEdd>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	8d 87       	std	Y+13, r24	; 0x0d
     c20:	9e 87       	std	Y+14, r25	; 0x0e
     c22:	af 87       	std	Y+15, r26	; 0x0f
     c24:	b8 8b       	std	Y+16, r27	; 0x10
	double yawControlBeforeServoLimitsAdjustment = calculateYawControlValue(yawProportional, yawDerivativeError, yawIntegral);
     c26:	e9 84       	ldd	r14, Y+9	; 0x09
     c28:	fa 84       	ldd	r15, Y+10	; 0x0a
     c2a:	0b 85       	ldd	r16, Y+11	; 0x0b
     c2c:	1c 85       	ldd	r17, Y+12	; 0x0c
     c2e:	2d 85       	ldd	r18, Y+13	; 0x0d
     c30:	3e 85       	ldd	r19, Y+14	; 0x0e
     c32:	4f 85       	ldd	r20, Y+15	; 0x0f
     c34:	58 89       	ldd	r21, Y+16	; 0x10
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	ab 81       	ldd	r26, Y+3	; 0x03
     c3c:	bc 81       	ldd	r27, Y+4	; 0x04
     c3e:	e9 8d       	ldd	r30, Y+25	; 0x19
     c40:	fa 8d       	ldd	r31, Y+26	; 0x1a
     c42:	67 01       	movw	r12, r14
     c44:	78 01       	movw	r14, r16
     c46:	89 01       	movw	r16, r18
     c48:	9a 01       	movw	r18, r20
     c4a:	ac 01       	movw	r20, r24
     c4c:	bd 01       	movw	r22, r26
     c4e:	cf 01       	movw	r24, r30
     c50:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN10helicopter10controller13PIDController24calculateYawControlValueEddd>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	89 8b       	std	Y+17, r24	; 0x11
     c5a:	9a 8b       	std	Y+18, r25	; 0x12
     c5c:	ab 8b       	std	Y+19, r26	; 0x13
     c5e:	bc 8b       	std	Y+20, r27	; 0x14
	double yawControl = adjustControlForServoLimits(yawControlBeforeServoLimitsAdjustment);
     c60:	89 89       	ldd	r24, Y+17	; 0x11
     c62:	9a 89       	ldd	r25, Y+18	; 0x12
     c64:	ab 89       	ldd	r26, Y+19	; 0x13
     c66:	bc 89       	ldd	r27, Y+20	; 0x14
     c68:	29 8d       	ldd	r18, Y+25	; 0x19
     c6a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c6c:	ac 01       	movw	r20, r24
     c6e:	bd 01       	movw	r22, r26
     c70:	c9 01       	movw	r24, r18
     c72:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEd>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	8d 8b       	std	Y+21, r24	; 0x15
     c7c:	9e 8b       	std	Y+22, r25	; 0x16
     c7e:	af 8b       	std	Y+23, r26	; 0x17
     c80:	b8 8f       	std	Y+24, r27	; 0x18
	
	model->YawControl(yawControl);
     c82:	89 8d       	ldd	r24, Y+25	; 0x19
     c84:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c86:	fc 01       	movw	r30, r24
     c88:	20 81       	ld	r18, Z
     c8a:	31 81       	ldd	r19, Z+1	; 0x01
     c8c:	8d 89       	ldd	r24, Y+21	; 0x15
     c8e:	9e 89       	ldd	r25, Y+22	; 0x16
     c90:	af 89       	ldd	r26, Y+23	; 0x17
     c92:	b8 8d       	ldd	r27, Y+24	; 0x18
     c94:	ac 01       	movw	r20, r24
     c96:	bd 01       	movw	r22, r26
     c98:	c9 01       	movw	r24, r18
     c9a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN10helicopter5model11SystemModel10YawControlEd>
	model->YawControlBeforeServoLimitsAdjustment(yawControlBeforeServoLimitsAdjustment);
     c9e:	89 8d       	ldd	r24, Y+25	; 0x19
     ca0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 81       	ld	r18, Z
     ca6:	31 81       	ldd	r19, Z+1	; 0x01
     ca8:	89 89       	ldd	r24, Y+17	; 0x11
     caa:	9a 89       	ldd	r25, Y+18	; 0x12
     cac:	ab 89       	ldd	r26, Y+19	; 0x13
     cae:	bc 89       	ldd	r27, Y+20	; 0x14
     cb0:	ac 01       	movw	r20, r24
     cb2:	bd 01       	movw	r22, r26
     cb4:	c9 01       	movw	r24, r18
     cb6:	0e 94 43 01 	call	0x286	; 0x286 <_ZN10helicopter5model11SystemModel37YawControlBeforeServoLimitsAdjustmentEd>
	model->YawIntegral(yawIntegral);
     cba:	89 8d       	ldd	r24, Y+25	; 0x19
     cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	89 85       	ldd	r24, Y+9	; 0x09
     cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc8:	ab 85       	ldd	r26, Y+11	; 0x0b
     cca:	bc 85       	ldd	r27, Y+12	; 0x0c
     ccc:	ac 01       	movw	r20, r24
     cce:	bd 01       	movw	r22, r26
     cd0:	c9 01       	movw	r24, r18
     cd2:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN10helicopter5model11SystemModel11YawIntegralEd>
	model->YawProportional(yawProportional);
     cd6:	89 8d       	ldd	r24, Y+25	; 0x19
     cd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cda:	fc 01       	movw	r30, r24
     cdc:	20 81       	ld	r18, Z
     cde:	31 81       	ldd	r19, Z+1	; 0x01
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	ab 81       	ldd	r26, Y+3	; 0x03
     ce6:	bc 81       	ldd	r27, Y+4	; 0x04
     ce8:	ac 01       	movw	r20, r24
     cea:	bd 01       	movw	r22, r26
     cec:	c9 01       	movw	r24, r18
     cee:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN10helicopter5model11SystemModel15YawProportionalEd>
	model->YawDerivativeError(yawDerivativeError);
     cf2:	89 8d       	ldd	r24, Y+25	; 0x19
     cf4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     d00:	af 85       	ldd	r26, Y+15	; 0x0f
     d02:	b8 89       	ldd	r27, Y+16	; 0x10
     d04:	ac 01       	movw	r20, r24
     d06:	bd 01       	movw	r22, r26
     d08:	c9 01       	movw	r24, r18
     d0a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN10helicopter5model11SystemModel18YawDerivativeErrorEd>
	
	servoDriver->controlTailRotorCollective(yawControl);
     d0e:	89 8d       	ldd	r24, Y+25	; 0x19
     d10:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d12:	fc 01       	movw	r30, r24
     d14:	22 81       	ldd	r18, Z+2	; 0x02
     d16:	33 81       	ldd	r19, Z+3	; 0x03
     d18:	8d 89       	ldd	r24, Y+21	; 0x15
     d1a:	9e 89       	ldd	r25, Y+22	; 0x16
     d1c:	af 89       	ldd	r26, Y+23	; 0x17
     d1e:	b8 8d       	ldd	r27, Y+24	; 0x18
     d20:	ac 01       	movw	r20, r24
     d22:	bd 01       	movw	r22, r26
     d24:	c9 01       	movw	r24, r18
     d26:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>
}
     d2a:	6a 96       	adiw	r28, 0x1a	; 26
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	08 95       	ret

00000d48 <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	1f 92       	push	r1
     d4e:	1f 92       	push	r1
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
				{
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	32 e0       	ldi	r19, 0x02	; 2
     d60:	fc 01       	movw	r30, r24
     d62:	31 83       	std	Z+1, r19	; 0x01
     d64:	20 83       	st	Z, r18
					
				}
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	81 70       	andi	r24, 0x01	; 1
     d6c:	99 27       	eor	r25, r25
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	21 f0       	breq	.+8      	; 0xd7a <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				useDoubleSpeedMode(useDoubleSpeedMode)
				{
					
				}
						
				virtual ~SerialDriver()
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	1f 92       	push	r1
     d8a:	1f 92       	push	r1
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	0e 94 a4 06 	call	0xd48	; 0xd48 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "CommonHeader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     db4:	1f 92       	push	r1
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9c 83       	std	Y+4, r25	; 0x04
     dbc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     dbe:	1a 82       	std	Y+2, r1	; 0x02
     dc0:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	fc 01       	movw	r30, r24
     dc8:	82 85       	ldd	r24, Z+10	; 0x0a
     dca:	88 23       	and	r24, r24
     dcc:	b9 f1       	breq	.+110    	; 0xe3c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	fc 01       	movw	r30, r24
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	a4 81       	ldd	r26, Z+4	; 0x04
     dda:	b5 81       	ldd	r27, Z+5	; 0x05
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	aa 1f       	adc	r26, r26
     de2:	bb 1f       	adc	r27, r27
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	aa 1f       	adc	r26, r26
     dea:	bb 1f       	adc	r27, r27
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	aa 1f       	adc	r26, r26
     df2:	bb 1f       	adc	r27, r27
     df4:	9c 01       	movw	r18, r24
     df6:	ad 01       	movw	r20, r26
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	94 e2       	ldi	r25, 0x24	; 36
     dfc:	a4 ef       	ldi	r26, 0xF4	; 244
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__udivmodsi4>
     e08:	da 01       	movw	r26, r20
     e0a:	c9 01       	movw	r24, r18
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	a1 09       	sbc	r26, r1
     e10:	b1 09       	sbc	r27, r1
     e12:	bc 01       	movw	r22, r24
     e14:	cd 01       	movw	r24, r26
     e16:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__floatunsisf>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 19 21 	call	0x4232	; 0x4232 <floor>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	0e 94 b0 20 	call	0x4160	; 0x4160 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	3a c0       	rjmp	.+116    	; 0xeb0 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	fc 01       	movw	r30, r24
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	a4 81       	ldd	r26, Z+4	; 0x04
     e48:	b5 81       	ldd	r27, Z+5	; 0x05
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	aa 1f       	adc	r26, r26
     e50:	bb 1f       	adc	r27, r27
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	9c 01       	movw	r18, r24
     e6c:	ad 01       	movw	r20, r26
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	94 e2       	ldi	r25, 0x24	; 36
     e72:	a4 ef       	ldi	r26, 0xF4	; 244
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	bc 01       	movw	r22, r24
     e78:	cd 01       	movw	r24, r26
     e7a:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__udivmodsi4>
     e7e:	da 01       	movw	r26, r20
     e80:	c9 01       	movw	r24, r18
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	a1 09       	sbc	r26, r1
     e86:	b1 09       	sbc	r27, r1
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__floatunsisf>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 19 21 	call	0x4232	; 0x4232 <floor>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	bc 01       	movw	r22, r24
     ea2:	cd 01       	movw	r24, r26
     ea4:	0e 94 b0 20 	call	0x4160	; 0x4160 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	fc 01       	movw	r30, r24
     eb6:	86 81       	ldd	r24, Z+6	; 0x06
     eb8:	88 23       	and	r24, r24
     eba:	41 f5       	brne	.+80     	; 0xf0c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     ebc:	84 ec       	ldi	r24, 0xC4	; 196
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	29 81       	ldd	r18, Y+1	; 0x01
     ec2:	3a 81       	ldd	r19, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	31 83       	std	Z+1, r19	; 0x01
     ec8:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     eca:	82 ec       	ldi	r24, 0xC2	; 194
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	22 ec       	ldi	r18, 0xC2	; 194
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	26 60       	ori	r18, 0x06	; 6
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	fc 01       	movw	r30, r24
     ee2:	82 85       	ldd	r24, Z+10	; 0x0a
     ee4:	88 23       	and	r24, r24
     ee6:	49 f0       	breq	.+18     	; 0xefa <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     ee8:	80 ec       	ldi	r24, 0xC0	; 192
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	20 ec       	ldi	r18, 0xC0	; 192
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	22 60       	ori	r18, 0x02	; 2
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     efa:	81 ec       	ldi	r24, 0xC1	; 193
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	21 ec       	ldi	r18, 0xC1	; 193
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	28 61       	ori	r18, 0x18	; 24
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
	}
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <_ZN10helicopter7drivers12SerialDriver12transmitByteEh>:

int SerialDriver::transmitByte(byte byteToSend)
{
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	6b 83       	std	Y+3, r22	; 0x03
	if (uartPort == Zero)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	fc 01       	movw	r30, r24
     f30:	86 81       	ldd	r24, Z+6	; 0x06
     f32:	88 23       	and	r24, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x1e>
     f36:	42 c0       	rjmp	.+132    	; 0xfbc <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa2>
	{
		if (isTimeoutEnabled)
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	fc 01       	movw	r30, r24
     f3e:	81 85       	ldd	r24, Z+9	; 0x09
     f40:	88 23       	and	r24, r24
     f42:	09 f1       	breq	.+66     	; 0xf86 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			timer->startTimer();
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	fc 01       	movw	r30, r24
     f4a:	87 81       	ldd	r24, Z+7	; 0x07
     f4c:	90 85       	ldd	r25, Z+8	; 0x08
     f4e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <_ZN10helicopter4util5Timer10startTimerEv>
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     f52:	19 c0       	rjmp	.+50     	; 0xf86 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6c>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	fc 01       	movw	r30, r24
     f5a:	81 85       	ldd	r24, Z+9	; 0x09
     f5c:	88 23       	and	r24, r24
     f5e:	a1 f0       	breq	.+40     	; 0xf88 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
			{
				if (timer->hasTimedout())
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	fc 01       	movw	r30, r24
     f66:	87 81       	ldd	r24, Z+7	; 0x07
     f68:	90 85       	ldd	r25, Z+8	; 0x08
     f6a:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <_ZN10helicopter4util5Timer11hasTimedoutEv>
     f6e:	88 23       	and	r24, r24
     f70:	59 f0       	breq	.+22     	; 0xf88 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x6e>
				{
					timer->stopTimer();
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	fc 01       	movw	r30, r24
     f78:	87 81       	ldd	r24, Z+7	; 0x07
     f7a:	90 85       	ldd	r25, Z+8	; 0x08
     f7c:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN10helicopter4util5Timer9stopTimerEv>
					return -1;
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	9f ef       	ldi	r25, 0xFF	; 255
     f84:	1d c0       	rjmp	.+58     	; 0xfc0 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0xa6>
		{
			timer->startTimer();
		}
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     f86:	00 00       	nop
     f88:	80 ec       	ldi	r24, 0xC0	; 192
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	fc 01       	movw	r30, r24
     f8e:	80 81       	ld	r24, Z
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	80 72       	andi	r24, 0x20	; 32
     f96:	99 27       	eor	r25, r25
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x86>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	22 23       	and	r18, r18
     fa2:	c1 f6       	brne	.-80     	; 0xf54 <_ZN10helicopter7drivers12SerialDriver12transmitByteEh+0x3a>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     fa4:	86 ec       	ldi	r24, 0xC6	; 198
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	2b 81       	ldd	r18, Y+3	; 0x03
     faa:	fc 01       	movw	r30, r24
     fac:	20 83       	st	Z, r18
		
		timer->stopTimer();
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	fc 01       	movw	r30, r24
     fb4:	87 81       	ldd	r24, Z+7	; 0x07
     fb6:	90 85       	ldd	r25, Z+8	; 0x08
     fb8:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN10helicopter4util5Timer9stopTimerEv>
	}
	
	return 0;
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <_ZN10helicopter7drivers12SerialDriver11receiveByteERh>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6>
     fd2:	1f 92       	push	r1
     fd4:	1f 92       	push	r1
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9b 83       	std	Y+3, r25	; 0x03
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	7d 83       	std	Y+5, r23	; 0x05
     fe0:	6c 83       	std	Y+4, r22	; 0x04
	bool hasDataOverrun = false;
     fe2:	19 82       	std	Y+1, r1	; 0x01
	
	if (uartPort == Zero)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	9b 81       	ldd	r25, Y+3	; 0x03
     fe8:	fc 01       	movw	r30, r24
     fea:	86 81       	ldd	r24, Z+6	; 0x06
     fec:	88 23       	and	r24, r24
     fee:	09 f0       	breq	.+2      	; 0xff2 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x26>
     ff0:	41 c0       	rjmp	.+130    	; 0x1074 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xa8>
	{
		
		if (isTimeoutEnabled)
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	fc 01       	movw	r30, r24
     ff8:	81 85       	ldd	r24, Z+9	; 0x09
     ffa:	88 23       	and	r24, r24
     ffc:	d9 f0       	breq	.+54     	; 0x1034 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			timer->startTimer();
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	fc 01       	movw	r30, r24
    1004:	87 81       	ldd	r24, Z+7	; 0x07
    1006:	90 85       	ldd	r25, Z+8	; 0x08
    1008:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <_ZN10helicopter4util5Timer10startTimerEv>
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
    100c:	13 c0       	rjmp	.+38     	; 0x1034 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x68>
		{
			if (timer->hasTimedout())
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	fc 01       	movw	r30, r24
    1014:	87 81       	ldd	r24, Z+7	; 0x07
    1016:	90 85       	ldd	r25, Z+8	; 0x08
    1018:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <_ZN10helicopter4util5Timer11hasTimedoutEv>
    101c:	88 23       	and	r24, r24
    101e:	59 f0       	breq	.+22     	; 0x1036 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x6a>
			{
				timer->stopTimer();
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	fc 01       	movw	r30, r24
    1026:	87 81       	ldd	r24, Z+7	; 0x07
    1028:	90 85       	ldd	r25, Z+8	; 0x08
    102a:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN10helicopter4util5Timer9stopTimerEv>
				return -1;
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	9f ef       	ldi	r25, 0xFF	; 255
    1032:	29 c0       	rjmp	.+82     	; 0x1086 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0xba>
			timer->startTimer();
		}
		//int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
    1034:	00 00       	nop
    1036:	80 ec       	ldi	r24, 0xC0	; 192
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	80 95       	com	r24
    1040:	88 1f       	adc	r24, r24
    1042:	88 27       	eor	r24, r24
    1044:	88 1f       	adc	r24, r24
    1046:	88 23       	and	r24, r24
    1048:	11 f7       	brne	.-60     	; 0x100e <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x42>
			}*/
		}
		
		//determine if there has been a data overrun.
		//Swallow the overrun because nothing can be done.
		hasDataOverrun = (UCSR0A & (1 << DOR0)) != 0;
    104a:	80 ec       	ldi	r24, 0xC0	; 192
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	fc 01       	movw	r30, r24
    1050:	80 81       	ld	r24, Z
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	88 70       	andi	r24, 0x08	; 8
    1058:	99 27       	eor	r25, r25
    105a:	21 e0       	ldi	r18, 0x01	; 1
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	09 f4       	brne	.+2      	; 0x1062 <_ZN10helicopter7drivers12SerialDriver11receiveByteERh+0x96>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	29 83       	std	Y+1, r18	; 0x01
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
    1064:	86 ec       	ldi	r24, 0xC6	; 198
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	fc 01       	movw	r30, r24
    106a:	20 81       	ld	r18, Z
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
	}
	
	timer->stopTimer();
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	fc 01       	movw	r30, r24
    107a:	87 81       	ldd	r24, Z+7	; 0x07
    107c:	90 85       	ldd	r25, Z+8	; 0x08
    107e:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	return 0;
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <_ZN10helicopter7drivers11ServoDriverD1Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	1f 92       	push	r1
    109c:	1f 92       	push	r1
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
				{
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	28 e1       	ldi	r18, 0x18	; 24
    10ac:	32 e0       	ldi	r19, 0x02	; 2
    10ae:	fc 01       	movw	r30, r24
    10b0:	31 83       	std	Z+1, r19	; 0x01
    10b2:	20 83       	st	Z, r18
					
				}
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	99 27       	eor	r25, r25
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	21 f0       	breq	.+8      	; 0x10c8 <_ZN10helicopter7drivers11ServoDriverD1Ev+0x32>
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <_ZN10helicopter7drivers11ServoDriverD0Ev>:
					maxControlValue(0)
				{
					
				}
				
				virtual ~ServoDriver()
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	1f 92       	push	r1
    10d8:	1f 92       	push	r1
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN10helicopter7drivers11ServoDriverD1Ev>
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd>:
#include "ServoDriver.h"

using namespace helicopter::drivers;

void ServoDriver::controlTailRotorCollective(double controlTailRotorCollective)
{
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	2a 97       	sbiw	r28, 0x0a	; 10
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	9e 83       	std	Y+6, r25	; 0x06
    1112:	8d 83       	std	Y+5, r24	; 0x05
    1114:	4f 83       	std	Y+7, r20	; 0x07
    1116:	58 87       	std	Y+8, r21	; 0x08
    1118:	69 87       	std	Y+9, r22	; 0x09
    111a:	7a 87       	std	Y+10, r23	; 0x0a
	double control = controlTailRotorCollective;
    111c:	8f 81       	ldd	r24, Y+7	; 0x07
    111e:	98 85       	ldd	r25, Y+8	; 0x08
    1120:	a9 85       	ldd	r26, Y+9	; 0x09
    1122:	ba 85       	ldd	r27, Y+10	; 0x0a
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	ab 83       	std	Y+3, r26	; 0x03
    112a:	bc 83       	std	Y+4, r27	; 0x04
	
	if (control > maxControlValue)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	fc 01       	movw	r30, r24
    1132:	86 81       	ldd	r24, Z+6	; 0x06
    1134:	97 81       	ldd	r25, Z+7	; 0x07
    1136:	a0 85       	ldd	r26, Z+8	; 0x08
    1138:	b1 85       	ldd	r27, Z+9	; 0x09
    113a:	29 81       	ldd	r18, Y+1	; 0x01
    113c:	3a 81       	ldd	r19, Y+2	; 0x02
    113e:	4b 81       	ldd	r20, Y+3	; 0x03
    1140:	5c 81       	ldd	r21, Y+4	; 0x04
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 3f 20 	call	0x407e	; 0x407e <__cmpsf2>
    114a:	88 23       	and	r24, r24
    114c:	5c f4       	brge	.+22     	; 0x1164 <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0x68>
	{
		control = maxControlValue;
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	fc 01       	movw	r30, r24
    1154:	86 81       	ldd	r24, Z+6	; 0x06
    1156:	97 81       	ldd	r25, Z+7	; 0x07
    1158:	a0 85       	ldd	r26, Z+8	; 0x08
    115a:	b1 85       	ldd	r27, Z+9	; 0x09
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	ab 83       	std	Y+3, r26	; 0x03
    1162:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	if (control < minControlValue)
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	fc 01       	movw	r30, r24
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	a4 81       	ldd	r26, Z+4	; 0x04
    1170:	b5 81       	ldd	r27, Z+5	; 0x05
    1172:	29 81       	ldd	r18, Y+1	; 0x01
    1174:	3a 81       	ldd	r19, Y+2	; 0x02
    1176:	4b 81       	ldd	r20, Y+3	; 0x03
    1178:	5c 81       	ldd	r21, Y+4	; 0x04
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__gesf2>
    1182:	18 16       	cp	r1, r24
    1184:	5c f4       	brge	.+22     	; 0x119c <_ZN10helicopter7drivers11ServoDriver26controlTailRotorCollectiveEd+0xa0>
	{
		control = minControlValue;
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	fc 01       	movw	r30, r24
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	a4 81       	ldd	r26, Z+4	; 0x04
    1192:	b5 81       	ldd	r27, Z+5	; 0x05
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	ab 83       	std	Y+3, r26	; 0x03
    119a:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	controlTailRotorCollectiveImpl(control);
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	fc 01       	movw	r30, r24
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	04 96       	adiw	r24, 0x04	; 4
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 81       	ld	r18, Z
    11ac:	31 81       	ldd	r19, Z+1	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	ab 81       	ldd	r26, Y+3	; 0x03
    11b4:	bc 81       	ldd	r27, Y+4	; 0x04
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	ac 01       	movw	r20, r24
    11bc:	bd 01       	movw	r22, r26
    11be:	cf 01       	movw	r24, r30
    11c0:	f9 01       	movw	r30, r18
    11c2:	19 95       	eicall
}
    11c4:	2a 96       	adiw	r28, 0x0a	; 10
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd>:


void ServoDriver::controlTailRotorCollectiveImpl(double controlTailRotorCollective)
{
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	00 d0       	rcall	.+0      	; 0x11dc <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <_ZN10helicopter7drivers11ServoDriver30controlTailRotorCollectiveImplEd+0x8>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	4b 83       	std	Y+3, r20	; 0x03
    11e8:	5c 83       	std	Y+4, r21	; 0x04
    11ea:	6d 83       	std	Y+5, r22	; 0x05
    11ec:	7e 83       	std	Y+6, r23	; 0x06
	
    11ee:	26 96       	adiw	r28, 0x06	; 6
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	1f 92       	push	r1
    1206:	1f 92       	push	r1
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	20 e7       	ldi	r18, 0x70	; 112
    1216:	32 e0       	ldi	r19, 0x02	; 2
    1218:	fc 01       	movw	r30, r24
    121a:	31 83       	std	Z+1, r19	; 0x01
    121c:	20 83       	st	Z, r18
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	99 27       	eor	r25, r25
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	21 f0       	breq	.+8      	; 0x1232 <_ZN10helicopter5tasks4TaskD1Ev+0x32>
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <_ZN10helicopter5tasks4TaskD0Ev>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	1f 92       	push	r1
    1242:	1f 92       	push	r1
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN10helicopter5tasks4TaskD1Ev>
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>:
					
				int ledToBlink;
				
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	28 97       	sbiw	r28, 0x08	; 8
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	7c 83       	std	Y+4, r23	; 0x04
    1280:	6b 83       	std	Y+3, r22	; 0x03
    1282:	5e 83       	std	Y+6, r21	; 0x06
    1284:	4d 83       	std	Y+5, r20	; 0x05
    1286:	38 87       	std	Y+8, r19	; 0x08
    1288:	2f 83       	std	Y+7, r18	; 0x07
				Task(delay, period),
				isOn(false),
				ledToBlink(ledToBlink)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	4d 81       	ldd	r20, Y+5	; 0x05
    1290:	5e 81       	ldd	r21, Y+6	; 0x06
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	b9 01       	movw	r22, r18
    1298:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <_ZN10helicopter5tasks4TaskC1Eii>
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	22 e2       	ldi	r18, 0x22	; 34
    12a2:	32 e0       	ldi	r19, 0x02	; 2
    12a4:	fc 01       	movw	r30, r24
    12a6:	31 83       	std	Z+1, r19	; 0x01
    12a8:	20 83       	st	Z, r18
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	fc 01       	movw	r30, r24
    12b0:	17 82       	std	Z+7, r1	; 0x07
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	2f 81       	ldd	r18, Y+7	; 0x07
    12b8:	38 85       	ldd	r19, Y+8	; 0x08
    12ba:	fc 01       	movw	r30, r24
    12bc:	31 87       	std	Z+9, r19	; 0x09
    12be:	20 87       	std	Z+8, r18	; 0x08
			{
					
			}
    12c0:	28 96       	adiw	r28, 0x08	; 8
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
	
			void init()
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	1f 92       	push	r1
    12d8:	1f 92       	push	r1
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
			{
				DDRA |= (1<<ledToBlink);
    12e2:	81 e2       	ldi	r24, 0x21	; 33
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	21 e2       	ldi	r18, 0x21	; 33
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	f9 01       	movw	r30, r18
    12ec:	20 81       	ld	r18, Z
    12ee:	62 2f       	mov	r22, r18
    12f0:	29 81       	ldd	r18, Y+1	; 0x01
    12f2:	3a 81       	ldd	r19, Y+2	; 0x02
    12f4:	f9 01       	movw	r30, r18
    12f6:	40 85       	ldd	r20, Z+8	; 0x08
    12f8:	51 85       	ldd	r21, Z+9	; 0x09
    12fa:	21 e0       	ldi	r18, 0x01	; 1
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	04 2e       	mov	r0, r20
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x34>
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x30>
    130a:	26 2b       	or	r18, r22
    130c:	fc 01       	movw	r30, r24
    130e:	20 83       	st	Z, r18
			}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	1f 92       	push	r1
    1320:	1f 92       	push	r1
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	89 83       	std	Y+1, r24	; 0x01
				if (isOn)
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	fc 01       	movw	r30, r24
    1330:	87 81       	ldd	r24, Z+7	; 0x07
    1332:	88 23       	and	r24, r24
    1334:	e9 f0       	breq	.+58     	; 0x1370 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x56>
				{
					PORTA &= ~(1<<ledToBlink);
    1336:	82 e2       	ldi	r24, 0x22	; 34
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	22 e2       	ldi	r18, 0x22	; 34
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	f9 01       	movw	r30, r18
    1340:	20 81       	ld	r18, Z
    1342:	62 2f       	mov	r22, r18
    1344:	29 81       	ldd	r18, Y+1	; 0x01
    1346:	3a 81       	ldd	r19, Y+2	; 0x02
    1348:	f9 01       	movw	r30, r18
    134a:	40 85       	ldd	r20, Z+8	; 0x08
    134c:	51 85       	ldd	r21, Z+9	; 0x09
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	04 2e       	mov	r0, r20
    1354:	02 c0       	rjmp	.+4      	; 0x135a <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x40>
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x3c>
    135e:	20 95       	com	r18
    1360:	26 23       	and	r18, r22
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
					isOn = false;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	fc 01       	movw	r30, r24
    136c:	17 82       	std	Z+7, r1	; 0x07
    136e:	1c c0       	rjmp	.+56     	; 0x13a8 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x8e>
				}else
				{
					PORTA |= (1<<ledToBlink);
    1370:	82 e2       	ldi	r24, 0x22	; 34
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	22 e2       	ldi	r18, 0x22	; 34
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	62 2f       	mov	r22, r18
    137e:	29 81       	ldd	r18, Y+1	; 0x01
    1380:	3a 81       	ldd	r19, Y+2	; 0x02
    1382:	f9 01       	movw	r30, r18
    1384:	40 85       	ldd	r20, Z+8	; 0x08
    1386:	51 85       	ldd	r21, Z+9	; 0x09
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	04 2e       	mov	r0, r20
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x7a>
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x76>
    1398:	26 2b       	or	r18, r22
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
					isOn = true;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	21 e0       	ldi	r18, 0x01	; 1
    13a4:	fc 01       	movw	r30, r24
    13a6:	27 83       	std	Z+7, r18	; 0x07
				}
			}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>:
				 * @timeoutMilliseconds the milliseconds that should go by before the
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	2c 97       	sbiw	r28, 0x0c	; 12
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	4b 83       	std	Y+3, r20	; 0x03
    13d4:	5c 83       	std	Y+4, r21	; 0x04
    13d6:	6d 83       	std	Y+5, r22	; 0x05
    13d8:	7e 83       	std	Y+6, r23	; 0x06
    13da:	38 87       	std	Y+8, r19	; 0x08
    13dc:	2f 83       	std	Y+7, r18	; 0x07
    13de:	e9 86       	std	Y+9, r14	; 0x09
    13e0:	fa 86       	std	Y+10, r15	; 0x0a
    13e2:	0b 87       	std	Y+11, r16	; 0x0b
    13e4:	1c 87       	std	Y+12, r17	; 0x0c
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
    13e6:	29 81       	ldd	r18, Y+1	; 0x01
    13e8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	ad 81       	ldd	r26, Y+5	; 0x05
    13f0:	be 81       	ldd	r27, Y+6	; 0x06
    13f2:	f9 01       	movw	r30, r18
    13f4:	80 83       	st	Z, r24
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	a2 83       	std	Z+2, r26	; 0x02
    13fa:	b3 83       	std	Z+3, r27	; 0x03
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	2f 81       	ldd	r18, Y+7	; 0x07
    1402:	38 85       	ldd	r19, Y+8	; 0x08
    1404:	fc 01       	movw	r30, r24
    1406:	35 83       	std	Z+5, r19	; 0x05
    1408:	24 83       	std	Z+4, r18	; 0x04
    140a:	29 85       	ldd	r18, Y+9	; 0x09
    140c:	3a 85       	ldd	r19, Y+10	; 0x0a
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	fc 01       	movw	r30, r24
    1414:	37 83       	std	Z+7, r19	; 0x07
    1416:	26 83       	std	Z+6, r18	; 0x06
					{
						
					}
    1418:	2c 96       	adiw	r28, 0x0c	; 12
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	08 95       	ret

00001432 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>:
				 * only used when enableTimeout = true.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
    1432:	cf 92       	push	r12
    1434:	ef 92       	push	r14
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	2b 97       	sbiw	r28, 0x0b	; 11
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	4b 83       	std	Y+3, r20	; 0x03
    1454:	5c 83       	std	Y+4, r21	; 0x04
    1456:	6d 83       	std	Y+5, r22	; 0x05
    1458:	7e 83       	std	Y+6, r23	; 0x06
    145a:	2f 83       	std	Y+7, r18	; 0x07
    145c:	19 87       	std	Y+9, r17	; 0x09
    145e:	08 87       	std	Y+8, r16	; 0x08
    1460:	ea 86       	std	Y+10, r14	; 0x0a
    1462:	cb 86       	std	Y+11, r12	; 0x0b
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				timer(timer),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	2a e0       	ldi	r18, 0x0A	; 10
    146a:	32 e0       	ldi	r19, 0x02	; 2
    146c:	fc 01       	movw	r30, r24
    146e:	31 83       	std	Z+1, r19	; 0x01
    1470:	20 83       	st	Z, r18
    1472:	29 81       	ldd	r18, Y+1	; 0x01
    1474:	3a 81       	ldd	r19, Y+2	; 0x02
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	ad 81       	ldd	r26, Y+5	; 0x05
    147c:	be 81       	ldd	r27, Y+6	; 0x06
    147e:	f9 01       	movw	r30, r18
    1480:	82 83       	std	Z+2, r24	; 0x02
    1482:	93 83       	std	Z+3, r25	; 0x03
    1484:	a4 83       	std	Z+4, r26	; 0x04
    1486:	b5 83       	std	Z+5, r27	; 0x05
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	2f 81       	ldd	r18, Y+7	; 0x07
    148e:	fc 01       	movw	r30, r24
    1490:	26 83       	std	Z+6, r18	; 0x06
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	28 85       	ldd	r18, Y+8	; 0x08
    1498:	39 85       	ldd	r19, Y+9	; 0x09
    149a:	fc 01       	movw	r30, r24
    149c:	30 87       	std	Z+8, r19	; 0x08
    149e:	27 83       	std	Z+7, r18	; 0x07
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    14a6:	fc 01       	movw	r30, r24
    14a8:	21 87       	std	Z+9, r18	; 0x09
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    14b0:	fc 01       	movw	r30, r24
    14b2:	22 87       	std	Z+10, r18	; 0x0a
				{
					
				}
    14b4:	2b 96       	adiw	r28, 0x0b	; 11
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ef 90       	pop	r14
    14ca:	cf 90       	pop	r12
    14cc:	08 95       	ret

000014ce <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>:
				 * at the same time interval (i.e. 20 milliseconds) for both transmitting a byte as well
				 * as receiving a byte.
				 * @param serialDriver the driver used to communicate with the serial port
				 * which is used to communicate with the Ground Control Station.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver):
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE+0x6>
    14d4:	1f 92       	push	r1
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	7c 83       	std	Y+4, r23	; 0x04
    14e0:	6b 83       	std	Y+3, r22	; 0x03
					serialDriver(serialDriver)
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	fc 01       	movw	r30, r24
    14ec:	31 83       	std	Z+1, r19	; 0x01
    14ee:	20 83       	st	Z, r18
					{}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int checksumErrors;
			
			public:
			
			SystemModel():
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	1f 92       	push	r1
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
			yawIntegral(0),
			yawProportional(0),
			yawDerivativeError(0),
			timeouts(0),
			unrecognizedMsgTypes(0),
			checksumErrors(0)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	fc 01       	movw	r30, r24
    1514:	11 82       	std	Z+1, r1	; 0x01
    1516:	10 82       	st	Z, r1
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	fc 01       	movw	r30, r24
    151e:	13 82       	std	Z+3, r1	; 0x03
    1520:	12 82       	std	Z+2, r1	; 0x02
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	fc 01       	movw	r30, r24
    1528:	15 82       	std	Z+5, r1	; 0x05
    152a:	14 82       	std	Z+4, r1	; 0x04
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	fc 01       	movw	r30, r24
    1532:	16 82       	std	Z+6, r1	; 0x06
    1534:	17 82       	std	Z+7, r1	; 0x07
    1536:	10 86       	std	Z+8, r1	; 0x08
    1538:	11 86       	std	Z+9, r1	; 0x09
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	fc 01       	movw	r30, r24
    1540:	12 86       	std	Z+10, r1	; 0x0a
    1542:	13 86       	std	Z+11, r1	; 0x0b
    1544:	14 86       	std	Z+12, r1	; 0x0c
    1546:	15 86       	std	Z+13, r1	; 0x0d
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	16 86       	std	Z+14, r1	; 0x0e
    1550:	17 86       	std	Z+15, r1	; 0x0f
    1552:	10 8a       	std	Z+16, r1	; 0x10
    1554:	11 8a       	std	Z+17, r1	; 0x11
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	fc 01       	movw	r30, r24
    155c:	12 8a       	std	Z+18, r1	; 0x12
    155e:	13 8a       	std	Z+19, r1	; 0x13
    1560:	14 8a       	std	Z+20, r1	; 0x14
    1562:	15 8a       	std	Z+21, r1	; 0x15
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	fc 01       	movw	r30, r24
    156a:	16 8a       	std	Z+22, r1	; 0x16
    156c:	17 8a       	std	Z+23, r1	; 0x17
    156e:	10 8e       	std	Z+24, r1	; 0x18
    1570:	11 8e       	std	Z+25, r1	; 0x19
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	fc 01       	movw	r30, r24
    1578:	12 8e       	std	Z+26, r1	; 0x1a
    157a:	13 8e       	std	Z+27, r1	; 0x1b
    157c:	14 8e       	std	Z+28, r1	; 0x1c
    157e:	15 8e       	std	Z+29, r1	; 0x1d
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	fc 01       	movw	r30, r24
    1586:	16 8e       	std	Z+30, r1	; 0x1e
    1588:	17 8e       	std	Z+31, r1	; 0x1f
    158a:	10 a2       	std	Z+32, r1	; 0x20
    158c:	11 a2       	std	Z+33, r1	; 0x21
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	fc 01       	movw	r30, r24
    1594:	12 a2       	std	Z+34, r1	; 0x22
    1596:	13 a2       	std	Z+35, r1	; 0x23
    1598:	14 a2       	std	Z+36, r1	; 0x24
    159a:	15 a2       	std	Z+37, r1	; 0x25
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	fc 01       	movw	r30, r24
    15a2:	16 a2       	std	Z+38, r1	; 0x26
    15a4:	17 a2       	std	Z+39, r1	; 0x27
    15a6:	10 a6       	std	Z+40, r1	; 0x28
    15a8:	11 a6       	std	Z+41, r1	; 0x29
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	fc 01       	movw	r30, r24
    15b0:	13 a6       	std	Z+43, r1	; 0x2b
    15b2:	12 a6       	std	Z+42, r1	; 0x2a
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	fc 01       	movw	r30, r24
    15ba:	15 a6       	std	Z+45, r1	; 0x2d
    15bc:	14 a6       	std	Z+44, r1	; 0x2c
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	fc 01       	movw	r30, r24
    15c4:	17 a6       	std	Z+47, r1	; 0x2f
    15c6:	16 a6       	std	Z+46, r1	; 0x2e
			{
				
			}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>:
			void MagYawDegrees(double val) { magYawDegrees = val; }	
				
				
				
			double ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(double val) { referenceMagYawDegrees = val;}
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd+0x8>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	4b 83       	std	Y+3, r20	; 0x03
    15e4:	5c 83       	std	Y+4, r21	; 0x04
    15e6:	6d 83       	std	Y+5, r22	; 0x05
    15e8:	7e 83       	std	Y+6, r23	; 0x06
    15ea:	29 81       	ldd	r18, Y+1	; 0x01
    15ec:	3a 81       	ldd	r19, Y+2	; 0x02
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	ad 81       	ldd	r26, Y+5	; 0x05
    15f4:	be 81       	ldd	r27, Y+6	; 0x06
    15f6:	f9 01       	movw	r30, r18
    15f8:	82 87       	std	Z+10, r24	; 0x0a
    15fa:	93 87       	std	Z+11, r25	; 0x0b
    15fc:	a4 87       	std	Z+12, r26	; 0x0c
    15fe:	b5 87       	std	Z+13, r27	; 0x0d
    1600:	26 96       	adiw	r28, 0x06	; 6
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>:
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
				
			double ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	00 d0       	rcall	.+0      	; 0x1618 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd+0x8>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	4b 83       	std	Y+3, r20	; 0x03
    1624:	5c 83       	std	Y+4, r21	; 0x04
    1626:	6d 83       	std	Y+5, r22	; 0x05
    1628:	7e 83       	std	Y+6, r23	; 0x06
    162a:	29 81       	ldd	r18, Y+1	; 0x01
    162c:	3a 81       	ldd	r19, Y+2	; 0x02
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	ad 81       	ldd	r26, Y+5	; 0x05
    1634:	be 81       	ldd	r27, Y+6	; 0x06
    1636:	f9 01       	movw	r30, r18
    1638:	82 8f       	std	Z+26, r24	; 0x1a
    163a:	93 8f       	std	Z+27, r25	; 0x1b
    163c:	a4 8f       	std	Z+28, r26	; 0x1c
    163e:	b5 8f       	std	Z+29, r27	; 0x1d
    1640:	26 96       	adiw	r28, 0x06	; 6
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <_ZN10helicopter7drivers11ServoDriverC1Ev>:
				double minControlValue;
				double maxControlValue;
					
				
			public:
				ServoDriver(): 
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	1f 92       	push	r1
    1658:	1f 92       	push	r1
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	89 83       	std	Y+1, r24	; 0x01
					minControlValue(0), 
					maxControlValue(0)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	28 e1       	ldi	r18, 0x18	; 24
    1668:	32 e0       	ldi	r19, 0x02	; 2
    166a:	fc 01       	movw	r30, r24
    166c:	31 83       	std	Z+1, r19	; 0x01
    166e:	20 83       	st	Z, r18
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	fc 01       	movw	r30, r24
    1676:	12 82       	std	Z+2, r1	; 0x02
    1678:	13 82       	std	Z+3, r1	; 0x03
    167a:	14 82       	std	Z+4, r1	; 0x04
    167c:	15 82       	std	Z+5, r1	; 0x05
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	fc 01       	movw	r30, r24
    1684:	16 82       	std	Z+6, r1	; 0x06
    1686:	17 82       	std	Z+7, r1	; 0x07
    1688:	10 86       	std	Z+8, r1	; 0x08
    168a:	11 86       	std	Z+9, r1	; 0x09
				{
					
				}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>:
				}
				
				/**
				 * Gain value applied to the yaw proportional error
				 */
				void setYawProportionalGain(double yawProportionalGain)
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	00 d0       	rcall	.+0      	; 0x169c <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd+0x8>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	4b 83       	std	Y+3, r20	; 0x03
    16a8:	5c 83       	std	Y+4, r21	; 0x04
    16aa:	6d 83       	std	Y+5, r22	; 0x05
    16ac:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawProportionalGain = yawProportionalGain;
    16ae:	29 81       	ldd	r18, Y+1	; 0x01
    16b0:	3a 81       	ldd	r19, Y+2	; 0x02
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	ad 81       	ldd	r26, Y+5	; 0x05
    16b8:	be 81       	ldd	r27, Y+6	; 0x06
    16ba:	f9 01       	movw	r30, r18
    16bc:	84 87       	std	Z+12, r24	; 0x0c
    16be:	95 87       	std	Z+13, r25	; 0x0d
    16c0:	a6 87       	std	Z+14, r26	; 0x0e
    16c2:	b7 87       	std	Z+15, r27	; 0x0f
				}
    16c4:	26 96       	adiw	r28, 0x06	; 6
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>:
				
				/**
				 * Gain value applied to the yaw integral
				 */
				void setYawIntegralGain(double yawIntegralGain)
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	00 d0       	rcall	.+0      	; 0x16dc <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd+0x8>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	4b 83       	std	Y+3, r20	; 0x03
    16e8:	5c 83       	std	Y+4, r21	; 0x04
    16ea:	6d 83       	std	Y+5, r22	; 0x05
    16ec:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawIntegralGain = yawIntegralGain;
    16ee:	29 81       	ldd	r18, Y+1	; 0x01
    16f0:	3a 81       	ldd	r19, Y+2	; 0x02
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	ad 81       	ldd	r26, Y+5	; 0x05
    16f8:	be 81       	ldd	r27, Y+6	; 0x06
    16fa:	f9 01       	movw	r30, r18
    16fc:	84 83       	std	Z+4, r24	; 0x04
    16fe:	95 83       	std	Z+5, r25	; 0x05
    1700:	a6 83       	std	Z+6, r26	; 0x06
    1702:	b7 83       	std	Z+7, r27	; 0x07
				}
    1704:	26 96       	adiw	r28, 0x06	; 6
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>:
				
				/**
				 * Gain value applied to the derivative
				 */
				void setYawDerivativeGain(double yawDerivativeGain)
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	00 d0       	rcall	.+0      	; 0x171c <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x6>
    171c:	00 d0       	rcall	.+0      	; 0x171e <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd+0x8>
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	4b 83       	std	Y+3, r20	; 0x03
    1728:	5c 83       	std	Y+4, r21	; 0x04
    172a:	6d 83       	std	Y+5, r22	; 0x05
    172c:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawDerivativeGain = yawDerivativeGain;
    172e:	29 81       	ldd	r18, Y+1	; 0x01
    1730:	3a 81       	ldd	r19, Y+2	; 0x02
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	ad 81       	ldd	r26, Y+5	; 0x05
    1738:	be 81       	ldd	r27, Y+6	; 0x06
    173a:	f9 01       	movw	r30, r18
    173c:	80 87       	std	Z+8, r24	; 0x08
    173e:	91 87       	std	Z+9, r25	; 0x09
    1740:	a2 87       	std	Z+10, r26	; 0x0a
    1742:	b3 87       	std	Z+11, r27	; 0x0b
				}
    1744:	26 96       	adiw	r28, 0x06	; 6
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>:
				
				/**
				 * The number of seconds between pid controller updates. This number
				 * should generally be less than 1. Like .05 for a 20 hz rate.
				 */
				void setIntervalPeriodSecs(double intervalPeriodSecs)
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	00 d0       	rcall	.+0      	; 0x175c <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd+0x8>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	4b 83       	std	Y+3, r20	; 0x03
    1768:	5c 83       	std	Y+4, r21	; 0x04
    176a:	6d 83       	std	Y+5, r22	; 0x05
    176c:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->intervalPeriodSecs = intervalPeriodSecs;
    176e:	29 81       	ldd	r18, Y+1	; 0x01
    1770:	3a 81       	ldd	r19, Y+2	; 0x02
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	ad 81       	ldd	r26, Y+5	; 0x05
    1778:	be 81       	ldd	r27, Y+6	; 0x06
    177a:	f9 01       	movw	r30, r18
    177c:	80 a3       	std	Z+32, r24	; 0x20
    177e:	91 a3       	std	Z+33, r25	; 0x21
    1780:	a2 a3       	std	Z+34, r26	; 0x22
    1782:	b3 a3       	std	Z+35, r27	; 0x23
				}
    1784:	26 96       	adiw	r28, 0x06	; 6
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	08 95       	ret

00001796 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>:
				 * keeps increasing despite the helicopter already at the maximum possible control values.
				 * @param yawAntiWindupGain The gain value which represents how fast the integral will
				 * go back to 0 when the servos are saturated.
				 * Some simple rule that have been suggested for the tracking time are ~ Tt = TiTd and Tt = (Ti + Td)/2.
				 */
				void setYawAntiWindupGain(double yawAntiWindupGain)
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	00 d0       	rcall	.+0      	; 0x179c <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	9a 83       	std	Y+2, r25	; 0x02
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	4b 83       	std	Y+3, r20	; 0x03
    17a8:	5c 83       	std	Y+4, r21	; 0x04
    17aa:	6d 83       	std	Y+5, r22	; 0x05
    17ac:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->yawAntiWindupGain = yawAntiWindupGain;
    17ae:	29 81       	ldd	r18, Y+1	; 0x01
    17b0:	3a 81       	ldd	r19, Y+2	; 0x02
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	ad 81       	ldd	r26, Y+5	; 0x05
    17b8:	be 81       	ldd	r27, Y+6	; 0x06
    17ba:	f9 01       	movw	r30, r18
    17bc:	80 8b       	std	Z+16, r24	; 0x10
    17be:	91 8b       	std	Z+17, r25	; 0x11
    17c0:	a2 8b       	std	Z+18, r26	; 0x12
    17c2:	b3 8b       	std	Z+19, r27	; 0x13
				}
    17c4:	26 96       	adiw	r28, 0x06	; 6
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd>:
				/**
				 * The minimum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no smaller than the controlMinValue (e.g. no less than -1)
				 */
				void setMinTailRotorCollectiveControlValue (double minYawServoControlValue)
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	00 d0       	rcall	.+0      	; 0x17dc <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd+0x8>
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	4b 83       	std	Y+3, r20	; 0x03
    17e8:	5c 83       	std	Y+4, r21	; 0x04
    17ea:	6d 83       	std	Y+5, r22	; 0x05
    17ec:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->minYawServoControlValue = minYawServoControlValue;
    17ee:	29 81       	ldd	r18, Y+1	; 0x01
    17f0:	3a 81       	ldd	r19, Y+2	; 0x02
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	ad 81       	ldd	r26, Y+5	; 0x05
    17f8:	be 81       	ldd	r27, Y+6	; 0x06
    17fa:	f9 01       	movw	r30, r18
    17fc:	84 8b       	std	Z+20, r24	; 0x14
    17fe:	95 8b       	std	Z+21, r25	; 0x15
    1800:	a6 8b       	std	Z+22, r26	; 0x16
    1802:	b7 8b       	std	Z+23, r27	; 0x17
				}
    1804:	26 96       	adiw	r28, 0x06	; 6
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd>:
				/**
				 * The maximum control value that the yaw actuators can be set too. This is used for 
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no larger than the controlMaxValue (e.g. no greater than 1)
				 */
				void setMaxTailRotorCollectiveValue(double maxYawServoControlValue)
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	00 d0       	rcall	.+0      	; 0x181c <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	4b 83       	std	Y+3, r20	; 0x03
    1828:	5c 83       	std	Y+4, r21	; 0x04
    182a:	6d 83       	std	Y+5, r22	; 0x05
    182c:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->maxYawServoControlValue = maxYawServoControlValue;
    182e:	29 81       	ldd	r18, Y+1	; 0x01
    1830:	3a 81       	ldd	r19, Y+2	; 0x02
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	ad 81       	ldd	r26, Y+5	; 0x05
    1838:	be 81       	ldd	r27, Y+6	; 0x06
    183a:	f9 01       	movw	r30, r18
    183c:	80 8f       	std	Z+24, r24	; 0x18
    183e:	91 8f       	std	Z+25, r25	; 0x19
    1840:	a2 8f       	std	Z+26, r26	; 0x1a
    1842:	b3 8f       	std	Z+27, r27	; 0x1b
				}
    1844:	26 96       	adiw	r28, 0x06	; 6
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>:
				
				/**
				 * This is the maximum possible output value for a control signal.
				 * Generally, this should be set to 1.
				 */
				void setControlMaxValue(double controlMaxValue)
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 d0       	rcall	.+0      	; 0x185c <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <_ZN10helicopter10controller13PIDController18setControlMaxValueEd+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	4b 83       	std	Y+3, r20	; 0x03
    1868:	5c 83       	std	Y+4, r21	; 0x04
    186a:	6d 83       	std	Y+5, r22	; 0x05
    186c:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMaxValue = controlMaxValue;
    186e:	29 81       	ldd	r18, Y+1	; 0x01
    1870:	3a 81       	ldd	r19, Y+2	; 0x02
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	ad 81       	ldd	r26, Y+5	; 0x05
    1878:	be 81       	ldd	r27, Y+6	; 0x06
    187a:	f9 01       	movw	r30, r18
    187c:	84 a3       	std	Z+36, r24	; 0x24
    187e:	95 a3       	std	Z+37, r25	; 0x25
    1880:	a6 a3       	std	Z+38, r26	; 0x26
    1882:	b7 a3       	std	Z+39, r27	; 0x27
				}
    1884:	26 96       	adiw	r28, 0x06	; 6
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>:
				
				/**
				 * This is the minimum possible value for a control signal.
				 * Generally, this should be set to -1.
				 */
				void setControlMinValue(double controlMinValue)
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	00 d0       	rcall	.+0      	; 0x189c <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <_ZN10helicopter10controller13PIDController18setControlMinValueEd+0x8>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	4b 83       	std	Y+3, r20	; 0x03
    18a8:	5c 83       	std	Y+4, r21	; 0x04
    18aa:	6d 83       	std	Y+5, r22	; 0x05
    18ac:	7e 83       	std	Y+6, r23	; 0x06
				{
					this->controlMinValue = controlMinValue;
    18ae:	29 81       	ldd	r18, Y+1	; 0x01
    18b0:	3a 81       	ldd	r19, Y+2	; 0x02
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	ad 81       	ldd	r26, Y+5	; 0x05
    18b8:	be 81       	ldd	r27, Y+6	; 0x06
    18ba:	f9 01       	movw	r30, r18
    18bc:	80 a7       	std	Z+40, r24	; 0x28
    18be:	91 a7       	std	Z+41, r25	; 0x29
    18c0:	a2 a7       	std	Z+42, r26	; 0x2a
    18c2:	b3 a7       	std	Z+43, r27	; 0x2b
				}			
    18c4:	26 96       	adiw	r28, 0x06	; 6
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>:
using namespace helicopter::interfaces;
using namespace helicopter::model;
using namespace helicopter::controller;

void setupDefaultsandReferencePosition(SystemModel *model, PIDController *pidController)
{	
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	00 d0       	rcall	.+0      	; 0x18dc <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE+0x6>
    18dc:	1f 92       	push	r1
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	7c 83       	std	Y+4, r23	; 0x04
    18e8:	6b 83       	std	Y+3, r22	; 0x03
	model->ReferenceMagYawDegrees(0.0);
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	ba 01       	movw	r22, r20
    18f4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN10helicopter5model11SystemModel22ReferenceMagYawDegreesEd>
	model->ReferenceYawVelocityDegreesPerSecond(0.0);
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	ba 01       	movw	r22, r20
    1902:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10helicopter5model11SystemModel36ReferenceYawVelocityDegreesPerSecondEd>
	
	pidController->setYawProportionalGain(3.0);
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	60 e4       	ldi	r22, 0x40	; 64
    1910:	70 e4       	ldi	r23, 0x40	; 64
    1912:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN10helicopter10controller13PIDController22setYawProportionalGainEd>
	pidController->setYawIntegralGain(.008);
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	4f e6       	ldi	r20, 0x6F	; 111
    191c:	52 e1       	ldi	r21, 0x12	; 18
    191e:	63 e0       	ldi	r22, 0x03	; 3
    1920:	7c e3       	ldi	r23, 0x3C	; 60
    1922:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN10helicopter10controller13PIDController18setYawIntegralGainEd>
	pidController->setYawDerivativeGain(.85);
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	4a e9       	ldi	r20, 0x9A	; 154
    192c:	59 e9       	ldi	r21, 0x99	; 153
    192e:	69 e5       	ldi	r22, 0x59	; 89
    1930:	7f e3       	ldi	r23, 0x3F	; 63
    1932:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN10helicopter10controller13PIDController20setYawDerivativeGainEd>

	//TODO: Don't forget that there is a difference between how often the sensors
	//are read and how often the control algorithm runs. 
	pidController->setIntervalPeriodSecs(PID_OUTER_LOOP_PERIOD);
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	4d ec       	ldi	r20, 0xCD	; 205
    193c:	5c ec       	ldi	r21, 0xCC	; 204
    193e:	6c e4       	ldi	r22, 0x4C	; 76
    1940:	7d e3       	ldi	r23, 0x3D	; 61
    1942:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN10helicopter10controller13PIDController21setIntervalPeriodSecsEd>
	pidController->setYawAntiWindupGain(.1);
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	4d ec       	ldi	r20, 0xCD	; 205
    194c:	5c ec       	ldi	r21, 0xCC	; 204
    194e:	6c ec       	ldi	r22, 0xCC	; 204
    1950:	7d e3       	ldi	r23, 0x3D	; 61
    1952:	0e 94 cb 0b 	call	0x1796	; 0x1796 <_ZN10helicopter10controller13PIDController20setYawAntiWindupGainEd>
	
	pidController->setMinTailRotorCollectiveControlValue (-.8);
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	4d ec       	ldi	r20, 0xCD	; 205
    195c:	5c ec       	ldi	r21, 0xCC	; 204
    195e:	6c e4       	ldi	r22, 0x4C	; 76
    1960:	7f eb       	ldi	r23, 0xBF	; 191
    1962:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN10helicopter10controller13PIDController37setMinTailRotorCollectiveControlValueEd>
	pidController->setMaxTailRotorCollectiveValue(.8);
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	4d ec       	ldi	r20, 0xCD	; 205
    196c:	5c ec       	ldi	r21, 0xCC	; 204
    196e:	6c e4       	ldi	r22, 0x4C	; 76
    1970:	7f e3       	ldi	r23, 0x3F	; 63
    1972:	0e 94 0b 0c 	call	0x1816	; 0x1816 <_ZN10helicopter10controller13PIDController30setMaxTailRotorCollectiveValueEd>
	pidController->setControlMaxValue(1.0);
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	60 e8       	ldi	r22, 0x80	; 128
    1980:	7f e3       	ldi	r23, 0x3F	; 63
    1982:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN10helicopter10controller13PIDController18setControlMaxValueEd>
	pidController->setControlMinValue(-1.0);
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	60 e8       	ldi	r22, 0x80	; 128
    1990:	7f eb       	ldi	r23, 0xBF	; 191
    1992:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN10helicopter10controller13PIDController18setControlMinValueEd>
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <main>:


int main(void)
{	
    19a4:	af 92       	push	r10
    19a6:	bf 92       	push	r11
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	66 97       	sbiw	r28, 0x16	; 22
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
    19c8:	80 e3       	ldi	r24, 0x30	; 48
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    19d0:	8c 01       	movw	r16, r24
    19d2:	c8 01       	movw	r24, r16
    19d4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN10helicopter5model11SystemModelC1Ev>
    19d8:	1a 83       	std	Y+2, r17	; 0x02
    19da:	09 83       	std	Y+1, r16	; 0x01
	
	//TODO: This somehow needs to be a simulator servo driver
	//TODO: Setup the code so that it can be setup for a simulator or not setup for a simulator.
	ServoDriver *servoDriver = new ServoDriver();
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    19e4:	8c 01       	movw	r16, r24
    19e6:	c8 01       	movw	r24, r16
    19e8:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10helicopter7drivers11ServoDriverC1Ev>
    19ec:	1c 83       	std	Y+4, r17	; 0x04
    19ee:	0b 83       	std	Y+3, r16	; 0x03
	
	PIDController *pidController = new PIDController(model, servoDriver);
    19f0:	8c e2       	ldi	r24, 0x2C	; 44
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    19f8:	8c 01       	movw	r16, r24
    19fa:	2b 81       	ldd	r18, Y+3	; 0x03
    19fc:	3c 81       	ldd	r19, Y+4	; 0x04
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	a9 01       	movw	r20, r18
    1a04:	bc 01       	movw	r22, r24
    1a06:	c8 01       	movw	r24, r16
    1a08:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelEPNS_7drivers11ServoDriverE>
    1a0c:	1e 83       	std	Y+6, r17	; 0x06
    1a0e:	0d 83       	std	Y+5, r16	; 0x05
	
	setupDefaultsandReferencePosition(model, pidController);
    1a10:	2d 81       	ldd	r18, Y+5	; 0x05
    1a12:	3e 81       	ldd	r19, Y+6	; 0x06
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	b9 01       	movw	r22, r18
    1a1a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 10); //Good timeout when using the USB
    1a1e:	88 e0       	ldi	r24, 0x08	; 8
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    1a26:	6c 01       	movw	r12, r24
    1a28:	1a e0       	ldi	r17, 0x0A	; 10
    1a2a:	e1 2e       	mov	r14, r17
    1a2c:	f1 2c       	mov	r15, r1
    1a2e:	00 e0       	ldi	r16, 0x00	; 0
    1a30:	10 e0       	ldi	r17, 0x00	; 0
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	34 e0       	ldi	r19, 0x04	; 4
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	54 e2       	ldi	r21, 0x24	; 36
    1a3a:	64 ef       	ldi	r22, 0xF4	; 244
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	c6 01       	movw	r24, r12
    1a40:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_ZN10helicopter4util5TimerC1Em9PRESCALERm>
    1a44:	d8 86       	std	Y+8, r13	; 0x08
    1a46:	cf 82       	std	Y+7, r12	; 0x07
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);  
    1a48:	8b e0       	ldi	r24, 0x0B	; 11
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    1a50:	5c 01       	movw	r10, r24
    1a52:	8f 81       	ldd	r24, Y+7	; 0x07
    1a54:	98 85       	ldd	r25, Y+8	; 0x08
    1a56:	cc 24       	eor	r12, r12
    1a58:	c3 94       	inc	r12
    1a5a:	ee 24       	eor	r14, r14
    1a5c:	e3 94       	inc	r14
    1a5e:	8c 01       	movw	r16, r24
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	51 ee       	ldi	r21, 0xE1	; 225
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	c5 01       	movw	r24, r10
    1a6c:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEPNS_4util5TimerEbb>
    1a70:	ba 86       	std	Y+10, r11	; 0x0a
    1a72:	a9 86       	std	Y+9, r10	; 0x09
	serialDriver->initialize();
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	fc 01       	movw	r30, r24
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	04 96       	adiw	r24, 0x04	; 4
    1a80:	fc 01       	movw	r30, r24
    1a82:	20 81       	ld	r18, Z
    1a84:	31 81       	ldd	r19, Z+1	; 0x01
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	19 95       	eicall
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver);
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    1a96:	8c 01       	movw	r16, r24
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	c8 01       	movw	r24, r16
    1aa0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN10helicopter10interfaces29GroundControlStationInterfaceC1EPNS_7drivers12SerialDriverE>
    1aa4:	1c 87       	std	Y+12, r17	; 0x0c
    1aa6:	0b 87       	std	Y+11, r16	; 0x0b
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 20 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 20 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, 0, 4);//starting at tick 0, execute 50 times a second
    1aa8:	8b e0       	ldi	r24, 0x0B	; 11
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    1ab0:	7c 01       	movw	r14, r24
    1ab2:	49 81       	ldd	r20, Y+1	; 0x01
    1ab4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aba:	04 e0       	ldi	r16, 0x04	; 4
    1abc:	10 e0       	ldi	r17, 0x00	; 0
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	0e 94 0e 1c 	call	0x381c	; 0x381c <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    1aca:	fe 86       	std	Y+14, r15	; 0x0e
    1acc:	ed 86       	std	Y+13, r14	; 0x0d
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
    1ace:	8b e0       	ldi	r24, 0x0B	; 11
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	49 81       	ldd	r20, Y+1	; 0x01
    1ada:	5a 81       	ldd	r21, Y+2	; 0x02
    1adc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ade:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ae0:	04 e0       	ldi	r16, 0x04	; 4
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	bc 01       	movw	r22, r24
    1aea:	c7 01       	movw	r24, r14
    1aec:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
    1af0:	f8 8a       	std	Y+16, r15	; 0x10
    1af2:	ef 86       	std	Y+15, r14	; 0x0f
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
    1af4:	8a e0       	ldi	r24, 0x0A	; 10
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    1afc:	8c 01       	movw	r16, r24
    1afe:	23 e0       	ldi	r18, 0x03	; 3
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	48 ec       	ldi	r20, 0xC8	; 200
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN10helicopter5tasks12FlashLEDTaskC1Eiii>
    1b10:	1a 8b       	std	Y+18, r17	; 0x12
    1b12:	09 8b       	std	Y+17, r16	; 0x11
		
		
	//execute the pid outer loop at the PID_OUTER_LOOP_PERIOD rate. The division is to convert the period into ticks for the scheduler.
	PIDOuterLoopTask *pidOuterLoop = new PIDOuterLoopTask(pidController, 3, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    1b14:	89 e0       	ldi	r24, 0x09	; 9
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    1b1c:	8c 01       	movw	r16, r24
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	2a e0       	ldi	r18, 0x0A	; 10
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	43 e0       	ldi	r20, 0x03	; 3
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>
    1b32:	1c 8b       	std	Y+20, r17	; 0x14
    1b34:	0b 8b       	std	Y+19, r16	; 0x13
	
	

	Scheduler *scheduler = Scheduler::getScheduler();
    1b36:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1b3a:	9e 8b       	std	Y+22, r25	; 0x16
    1b3c:	8d 8b       	std	Y+21, r24	; 0x15
	
	scheduler->addTask(flashTask);
    1b3e:	29 89       	ldd	r18, Y+17	; 0x11
    1b40:	3a 89       	ldd	r19, Y+18	; 0x12
    1b42:	8d 89       	ldd	r24, Y+21	; 0x15
    1b44:	9e 89       	ldd	r25, Y+22	; 0x16
    1b46:	b9 01       	movw	r22, r18
    1b48:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
    1b4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b50:	8d 89       	ldd	r24, Y+21	; 0x15
    1b52:	9e 89       	ldd	r25, Y+22	; 0x16
    1b54:	b9 01       	movw	r22, r18
    1b56:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
    1b5a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1b5c:	38 89       	ldd	r19, Y+16	; 0x10
    1b5e:	8d 89       	ldd	r24, Y+21	; 0x15
    1b60:	9e 89       	ldd	r25, Y+22	; 0x16
    1b62:	b9 01       	movw	r22, r18
    1b64:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidOuterLoop);
    1b68:	2b 89       	ldd	r18, Y+19	; 0x13
    1b6a:	3c 89       	ldd	r19, Y+20	; 0x14
    1b6c:	8d 89       	ldd	r24, Y+21	; 0x15
    1b6e:	9e 89       	ldd	r25, Y+22	; 0x16
    1b70:	b9 01       	movw	r22, r18
    1b72:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
    1b76:	8d 89       	ldd	r24, Y+21	; 0x15
    1b78:	9e 89       	ldd	r25, Y+22	; 0x16
    1b7a:	0e 94 a9 18 	call	0x3152	; 0x3152 <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
    1b7e:	8d 89       	ldd	r24, Y+21	; 0x15
    1b80:	9e 89       	ldd	r25, Y+22	; 0x16
    1b82:	0e 94 74 19 	call	0x32e8	; 0x32e8 <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	while(1)
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
    1b86:	8d 89       	ldd	r24, Y+21	; 0x15
    1b88:	9e 89       	ldd	r25, Y+22	; 0x16
    1b8a:	0e 94 0a 19 	call	0x3214	; 0x3214 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
    1b8e:	fb cf       	rjmp	.-10     	; 0x1b86 <main+0x1e2>

00001b90 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	1f 92       	push	r1
    1b96:	1f 92       	push	r1
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	22 e2       	ldi	r18, 0x22	; 34
    1ba6:	32 e0       	ldi	r19, 0x02	; 2
    1ba8:	fc 01       	movw	r30, r24
    1baa:	31 83       	std	Z+1, r19	; 0x01
    1bac:	20 83       	st	Z, r18
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN10helicopter5tasks4TaskD1Ev>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	99 27       	eor	r25, r25
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	21 f0       	breq	.+8      	; 0x1bca <_ZN10helicopter5tasks12FlashLEDTaskD1Ev+0x3a>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	1f 92       	push	r1
    1bda:	1f 92       	push	r1
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	2d 97       	sbiw	r28, 0x0d	; 13
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	9d 83       	std	Y+5, r25	; 0x05
    1c18:	8c 83       	std	Y+4, r24	; 0x04
    1c1a:	7f 83       	std	Y+7, r23	; 0x07
    1c1c:	6e 83       	std	Y+6, r22	; 0x06
    1c1e:	59 87       	std	Y+9, r21	; 0x09
    1c20:	48 87       	std	Y+8, r20	; 0x08
    1c22:	3b 87       	std	Y+11, r19	; 0x0b
    1c24:	2a 87       	std	Y+10, r18	; 0x0a
    1c26:	1d 87       	std	Y+13, r17	; 0x0d
    1c28:	0c 87       	std	Y+12, r16	; 0x0c
	for (int i = 0; i < payloadSize; i++)
    1c2a:	1a 82       	std	Y+2, r1	; 0x02
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	26 c0       	rjmp	.+76     	; 0x1c7c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x7e>
	{
		byte b = msgPayload[i];
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	2e 81       	ldd	r18, Y+6	; 0x06
    1c36:	3f 81       	ldd	r19, Y+7	; 0x07
    1c38:	82 0f       	add	r24, r18
    1c3a:	93 1f       	adc	r25, r19
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	8b 83       	std	Y+3, r24	; 0x03
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
    1c42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c46:	fc 01       	movw	r30, r24
    1c48:	90 81       	ld	r25, Z
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	29 2f       	mov	r18, r25
    1c4e:	28 0f       	add	r18, r24
    1c50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c54:	fc 01       	movw	r30, r24
    1c56:	20 83       	st	Z, r18
		checksumB = (byte) (checksumB + checksumA);
    1c58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 81       	ld	r18, Z
    1c60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c64:	fc 01       	movw	r30, r24
    1c66:	80 81       	ld	r24, Z
    1c68:	28 0f       	add	r18, r24
    1c6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	29 81       	ldd	r18, Y+1	; 0x01
    1c80:	3a 81       	ldd	r19, Y+2	; 0x02
    1c82:	88 85       	ldd	r24, Y+8	; 0x08
    1c84:	99 85       	ldd	r25, Y+9	; 0x09
    1c86:	28 17       	cp	r18, r24
    1c88:	39 07       	cpc	r19, r25
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x90>
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	44 23       	and	r20, r20
    1c90:	79 f6       	brne	.-98     	; 0x1c30 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x32>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
    1c92:	2d 96       	adiw	r28, 0x0d	; 13
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	08 95       	ret

00001ca8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	64 97       	sbiw	r28, 0x14	; 20
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	9a 8b       	std	Y+18, r25	; 0x12
    1cca:	89 8b       	std	Y+17, r24	; 0x11
    1ccc:	7c 8b       	std	Y+20, r23	; 0x14
    1cce:	6b 8b       	std	Y+19, r22	; 0x13
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
    1cd0:	ed b6       	in	r14, 0x3d	; 61
    1cd2:	fe b6       	in	r15, 0x3e	; 62
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
    1cd4:	1a 82       	std	Y+2, r1	; 0x02
    1cd6:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
    1cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cda:	9c 89       	ldd	r25, Y+20	; 0x14
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3a>
    1ce0:	b3 c0       	rjmp	.+358    	; 0x1e48 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x1a0>
    1ce2:	8d b7       	in	r24, 0x3d	; 61
    1ce4:	9e b7       	in	r25, 0x3e	; 62
    1ce6:	6c 01       	movw	r12, r24
	{
		byte *msgPayload = msgToSend->getBytes();
    1ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cea:	9c 89       	ldd	r25, Y+20	; 0x14
    1cec:	fc 01       	movw	r30, r24
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	04 96       	adiw	r24, 0x04	; 4
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 81       	ld	r18, Z
    1cf8:	31 81       	ldd	r19, Z+1	; 0x01
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	f9 01       	movw	r30, r18
    1d00:	19 95       	eicall
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
		
		int payloadSize = msgToSend->getMessageSize();
    1d06:	8b 89       	ldd	r24, Y+19	; 0x13
    1d08:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN10helicopter8messages7Message14getMessageSizeEv>
    1d0e:	98 87       	std	Y+8, r25	; 0x08
    1d10:	8f 83       	std	Y+7, r24	; 0x07
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
    1d12:	8f 81       	ldd	r24, Y+7	; 0x07
    1d14:	98 85       	ldd	r25, Y+8	; 0x08
    1d16:	05 96       	adiw	r24, 0x05	; 5
    1d18:	9a 87       	std	Y+10, r25	; 0x0a
    1d1a:	89 87       	std	Y+9, r24	; 0x09

		byte completeMsg[completeMsgSize];
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	9c 87       	std	Y+12, r25	; 0x0c
    1d24:	8b 87       	std	Y+11, r24	; 0x0b
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	2d b7       	in	r18, 0x3d	; 61
    1d2a:	3e b7       	in	r19, 0x3e	; 62
    1d2c:	28 1b       	sub	r18, r24
    1d2e:	39 0b       	sbc	r19, r25
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	3e bf       	out	0x3e, r19	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	2d bf       	out	0x3d, r18	; 61
    1d3a:	8d b7       	in	r24, 0x3d	; 61
    1d3c:	9e b7       	in	r25, 0x3e	; 62
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	9e 87       	std	Y+14, r25	; 0x0e
    1d42:	8d 87       	std	Y+13, r24	; 0x0d
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	25 eb       	ldi	r18, 0xB5	; 181
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	20 83       	st	Z, r18
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	22 e6       	ldi	r18, 0x62	; 98
    1d54:	fc 01       	movw	r30, r24
    1d56:	21 83       	std	Z+1, r18	; 0x01
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
    1d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5c:	27 ed       	ldi	r18, 0xD7	; 215
    1d5e:	fc 01       	movw	r30, r24
    1d60:	22 83       	std	Z+2, r18	; 0x02
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
    1d62:	4f 81       	ldd	r20, Y+7	; 0x07
    1d64:	58 85       	ldd	r21, Y+8	; 0x08
    1d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6a:	03 96       	adiw	r24, 0x03	; 3
    1d6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d70:	b9 01       	movw	r22, r18
    1d72:	0e 94 cc 23 	call	0x4798	; 0x4798 <memcpy>
		
		byte checksumA = 0;
    1d76:	1f 86       	std	Y+15, r1	; 0x0f
		byte checksumB = 0;
    1d78:	18 8a       	std	Y+16, r1	; 0x10
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	70 96       	adiw	r30, 0x10	; 16
    1d7e:	9e 01       	movw	r18, r28
    1d80:	21 5f       	subi	r18, 0xF1	; 241
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	4f 81       	ldd	r20, Y+7	; 0x07
    1d86:	58 85       	ldd	r21, Y+8	; 0x08
    1d88:	6d 81       	ldd	r22, Y+5	; 0x05
    1d8a:	7e 81       	ldd	r23, Y+6	; 0x06
    1d8c:	89 89       	ldd	r24, Y+17	; 0x11
    1d8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d90:	8f 01       	movw	r16, r30
    1d92:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	02 97       	sbiw	r24, 0x02	; 2
    1d9c:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1da0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1da2:	82 0f       	add	r24, r18
    1da4:	93 1f       	adc	r25, r19
    1da6:	fc 01       	movw	r30, r24
    1da8:	40 83       	st	Z, r20
		completeMsg[completeMsgSize - 1] = checksumB;
    1daa:	89 85       	ldd	r24, Y+9	; 0x09
    1dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	48 89       	ldd	r20, Y+16	; 0x10
    1db2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1db4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	fc 01       	movw	r30, r24
    1dbc:	40 83       	st	Z, r20
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1dbe:	1c 82       	std	Y+4, r1	; 0x04
    1dc0:	1b 82       	std	Y+3, r1	; 0x03
    1dc2:	23 c0       	rjmp	.+70     	; 0x1e0a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x162>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
    1dc4:	89 89       	ldd	r24, Y+17	; 0x11
    1dc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc8:	fc 01       	movw	r30, r24
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	fc 01       	movw	r30, r24
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	06 96       	adiw	r24, 0x06	; 6
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	20 81       	ld	r18, Z
    1dda:	31 81       	ldd	r19, Z+1	; 0x01
    1ddc:	4d 85       	ldd	r20, Y+13	; 0x0d
    1dde:	5e 85       	ldd	r21, Y+14	; 0x0e
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	84 0f       	add	r24, r20
    1de6:	95 1f       	adc	r25, r21
    1de8:	fc 01       	movw	r30, r24
    1dea:	40 81       	ld	r20, Z
    1dec:	89 89       	ldd	r24, Y+17	; 0x11
    1dee:	9a 89       	ldd	r25, Y+18	; 0x12
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	64 2f       	mov	r22, r20
    1df8:	f9 01       	movw	r30, r18
    1dfa:	19 95       	eicall
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
		
		completeMsg[completeMsgSize - 2] = checksumA;
		completeMsg[completeMsgSize - 1] = checksumB;
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	28 17       	cp	r18, r24
    1e14:	39 07       	cpc	r19, r25
    1e16:	34 f4       	brge	.+12     	; 0x1e24 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	11 f4       	brne	.+4      	; 0x1e24 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17c>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x17e>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	88 23       	and	r24, r24
    1e28:	69 f6       	brne	.-102    	; 0x1dc4 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x11c>
		{
			status = serialDriver->transmitByte(completeMsg[i]);
		}
		
		delete [] msgPayload;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	21 f0       	breq	.+8      	; 0x1e3a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x192>
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <_ZdaPv>
		msgPayload = NULL;
    1e3a:	1e 82       	std	Y+6, r1	; 0x06
    1e3c:	1d 82       	std	Y+5, r1	; 0x05
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de be       	out	0x3e, r13	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd be       	out	0x3d, r12	; 61
	}
	
	return status;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	fe be       	out	0x3e, r15	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	ed be       	out	0x3d, r14	; 61
    1e56:	64 96       	adiw	r28, 0x14	; 20
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	ff 90       	pop	r15
    1e6c:	ef 90       	pop	r14
    1e6e:	df 90       	pop	r13
    1e70:	cf 90       	pop	r12
    1e72:	08 95       	ret

00001e74 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	66 97       	sbiw	r28, 0x16	; 22
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	9c 8b       	std	Y+20, r25	; 0x14
    1e96:	8b 8b       	std	Y+19, r24	; 0x13
    1e98:	7e 8b       	std	Y+22, r23	; 0x16
    1e9a:	6d 8b       	std	Y+21, r22	; 0x15
	{
		receivedMessage = NULL;
	}
	
	return status;
    1e9c:	ed b6       	in	r14, 0x3d	; 61
    1e9e:	fe b6       	in	r15, 0x3e	; 62
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. 
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
    1ea0:	1a 82       	std	Y+2, r1	; 0x02
    1ea2:	19 82       	std	Y+1, r1	; 0x01
	
    byte firstSyncByte = 0;
    1ea4:	1b 82       	std	Y+3, r1	; 0x03
    byte secondSyncByte = 0;
    1ea6:	1c 82       	std	Y+4, r1	; 0x04
    byte thirdSyncByte = 0;
    1ea8:	1d 86       	std	Y+13, r1	; 0x0d
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1eaa:	1d c0       	rjmp	.+58     	; 0x1ee6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x72>
	{
		firstSyncByte = secondSyncByte;
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
		secondSyncByte = thirdSyncByte;
    1eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb2:	8c 83       	std	Y+4, r24	; 0x04
		status = serialDriver->receiveByte(thirdSyncByte);
    1eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb8:	fc 01       	movw	r30, r24
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01
    1ec4:	08 96       	adiw	r24, 0x08	; 8
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 81       	ld	r18, Z
    1eca:	31 81       	ldd	r19, Z+1	; 0x01
    1ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ece:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	80 81       	ld	r24, Z
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	ae 01       	movw	r20, r28
    1ed8:	43 5f       	subi	r20, 0xF3	; 243
    1eda:	5f 4f       	sbci	r21, 0xFF	; 255
    1edc:	ba 01       	movw	r22, r20
    1ede:	f9 01       	movw	r30, r18
    1ee0:	19 95       	eicall
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    byte thirdSyncByte = 0;
	

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	85 3b       	cpi	r24, 0xB5	; 181
    1eea:	31 f4       	brne	.+12     	; 0x1ef8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	82 36       	cpi	r24, 0x62	; 98
    1ef0:	19 f4       	brne	.+6      	; 0x1ef8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x84>
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	87 3d       	cpi	r24, 0xD7	; 215
    1ef6:	31 f0       	breq	.+12     	; 0x1f04 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x90>
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x92>
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	88 23       	and	r24, r24
    1f08:	89 f6       	brne	.-94     	; 0x1eac <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x38>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receiveByte(thirdSyncByte);
	}
	
	if (status == 0)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xa0>
    1f12:	f9 c0       	rjmp	.+498    	; 0x2106 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
    1f14:	1e 86       	std	Y+14, r1	; 0x0e
		
		status = serialDriver->receiveByte(msgType);
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	fc 01       	movw	r30, r24
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	08 96       	adiw	r24, 0x08	; 8
    1f28:	fc 01       	movw	r30, r24
    1f2a:	20 81       	ld	r18, Z
    1f2c:	31 81       	ldd	r19, Z+1	; 0x01
    1f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f30:	9c 89       	ldd	r25, Y+20	; 0x14
    1f32:	fc 01       	movw	r30, r24
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	ae 01       	movw	r20, r28
    1f3a:	42 5f       	subi	r20, 0xF2	; 242
    1f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3e:	ba 01       	movw	r22, r20
    1f40:	f9 01       	movw	r30, r18
    1f42:	19 95       	eicall
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
		
		if (status == 0)
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xde>
    1f50:	da c0       	rjmp	.+436    	; 0x2106 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
		{
			int msgSize = 0;
    1f52:	1e 82       	std	Y+6, r1	; 0x06
    1f54:	1d 82       	std	Y+5, r1	; 0x05
			
			switch(msgType)
    1f56:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	91 05       	cpc	r25, r1
    1f60:	29 f4       	brne	.+10     	; 0x1f6c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xf8>
			{
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
    1f62:	87 e1       	ldi	r24, 0x17	; 23
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
					break;
    1f6a:	05 c0       	rjmp	.+10     	; 0x1f76 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x102>
				default:
					//unrecognized message type.
					status = -2;
    1f6c:	8e ef       	ldi	r24, 0xFE	; 254
    1f6e:	9f ef       	ldi	r25, 0xFF	; 255
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
					break;
    1f74:	00 00       	nop
			}
			
			if (status == 0)
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x10c>
    1f7e:	c3 c0       	rjmp	.+390    	; 0x2106 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x292>
    1f80:	8d b7       	in	r24, 0x3d	; 61
    1f82:	9e b7       	in	r25, 0x3e	; 62
    1f84:	6c 01       	movw	r12, r24
			{
				byte messagePayload[msgSize];
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	9a 87       	std	Y+10, r25	; 0x0a
    1f8e:	89 87       	std	Y+9, r24	; 0x09
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	2d b7       	in	r18, 0x3d	; 61
    1f94:	3e b7       	in	r19, 0x3e	; 62
    1f96:	28 1b       	sub	r18, r24
    1f98:	39 0b       	sbc	r19, r25
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	3e bf       	out	0x3e, r19	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	2d bf       	out	0x3d, r18	; 61
    1fa4:	8d b7       	in	r24, 0x3d	; 61
    1fa6:	9e b7       	in	r25, 0x3e	; 62
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	9c 87       	std	Y+12, r25	; 0x0c
    1fac:	8b 87       	std	Y+11, r24	; 0x0b
							
				messagePayload[0] = msgType;
    1fae:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fb2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	20 83       	st	Z, r18
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	98 87       	std	Y+8, r25	; 0x08
    1fbe:	8f 83       	std	Y+7, r24	; 0x07
    1fc0:	21 c0       	rjmp	.+66     	; 0x2004 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x190>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	fc 01       	movw	r30, r24
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	08 96       	adiw	r24, 0x08	; 8
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	20 81       	ld	r18, Z
    1fd8:	31 81       	ldd	r19, Z+1	; 0x01
    1fda:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fdc:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fde:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe0:	98 85       	ldd	r25, Y+8	; 0x08
    1fe2:	48 0f       	add	r20, r24
    1fe4:	59 1f       	adc	r21, r25
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	fc 01       	movw	r30, r24
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	ba 01       	movw	r22, r20
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	19 95       	eicall
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    1ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffc:	98 85       	ldd	r25, Y+8	; 0x08
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	98 87       	std	Y+8, r25	; 0x08
    2002:	8f 83       	std	Y+7, r24	; 0x07
    2004:	2f 81       	ldd	r18, Y+7	; 0x07
    2006:	38 85       	ldd	r19, Y+8	; 0x08
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	28 17       	cp	r18, r24
    200e:	39 07       	cpc	r19, r25
    2010:	34 f4       	brge	.+12     	; 0x201e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	11 f4       	brne	.+4      	; 0x201e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1aa>
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ac>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	88 23       	and	r24, r24
    2022:	79 f6       	brne	.-98     	; 0x1fc2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x14e>
				{
					status = serialDriver->receiveByte(messagePayload[i]);
				}
							
				if (status == 0)
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	09 f0       	breq	.+2      	; 0x202e <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ba>
    202c:	67 c0       	rjmp	.+206    	; 0x20fc <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
    202e:	1f 86       	std	Y+15, r1	; 0x0f
					byte messageChecksumB = 0;
    2030:	18 8a       	std	Y+16, r1	; 0x10
					byte calculatedChecksumA = 0;
    2032:	19 8a       	std	Y+17, r1	; 0x11
					byte calculatedChecksumB = 0;
    2034:	1a 8a       	std	Y+18, r1	; 0x12
								
					//Note: status is getting overwritten here.
					status = serialDriver->receiveByte(messageChecksumA);
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	fc 01       	movw	r30, r24
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	08 96       	adiw	r24, 0x08	; 8
    2048:	fc 01       	movw	r30, r24
    204a:	20 81       	ld	r18, Z
    204c:	31 81       	ldd	r19, Z+1	; 0x01
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	9c 89       	ldd	r25, Y+20	; 0x14
    2052:	fc 01       	movw	r30, r24
    2054:	80 81       	ld	r24, Z
    2056:	91 81       	ldd	r25, Z+1	; 0x01
    2058:	ae 01       	movw	r20, r28
    205a:	41 5f       	subi	r20, 0xF1	; 241
    205c:	5f 4f       	sbci	r21, 0xFF	; 255
    205e:	ba 01       	movw	r22, r20
    2060:	f9 01       	movw	r30, r18
    2062:	19 95       	eicall
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
					status = serialDriver->receiveByte(messageChecksumB);
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	fc 01       	movw	r30, r24
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	fc 01       	movw	r30, r24
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	08 96       	adiw	r24, 0x08	; 8
    207a:	fc 01       	movw	r30, r24
    207c:	20 81       	ld	r18, Z
    207e:	31 81       	ldd	r19, Z+1	; 0x01
    2080:	8b 89       	ldd	r24, Y+19	; 0x13
    2082:	9c 89       	ldd	r25, Y+20	; 0x14
    2084:	fc 01       	movw	r30, r24
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	ae 01       	movw	r20, r28
    208c:	40 5f       	subi	r20, 0xF0	; 240
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	ba 01       	movw	r22, r20
    2092:	f9 01       	movw	r30, r18
    2094:	19 95       	eicall
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
    209a:	6b 85       	ldd	r22, Y+11	; 0x0b
    209c:	7c 85       	ldd	r23, Y+12	; 0x0c
    209e:	fe 01       	movw	r30, r28
    20a0:	72 96       	adiw	r30, 0x12	; 18
    20a2:	9e 01       	movw	r18, r28
    20a4:	2f 5e       	subi	r18, 0xEF	; 239
    20a6:	3f 4f       	sbci	r19, 0xFF	; 255
    20a8:	4d 81       	ldd	r20, Y+5	; 0x05
    20aa:	5e 81       	ldd	r21, Y+6	; 0x06
    20ac:	8b 89       	ldd	r24, Y+19	; 0x13
    20ae:	9c 89       	ldd	r25, Y+20	; 0x14
    20b0:	8f 01       	movw	r16, r30
    20b2:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
    20b6:	99 89       	ldd	r25, Y+17	; 0x11
    20b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ba:	98 17       	cp	r25, r24
    20bc:	d9 f4       	brne	.+54     	; 0x20f4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
    20be:	9a 89       	ldd	r25, Y+18	; 0x12
    20c0:	88 89       	ldd	r24, Y+16	; 0x10
    20c2:	98 17       	cp	r25, r24
    20c4:	b9 f4       	brne	.+46     	; 0x20f4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x280>
					{
						//build the message
						switch(msgType)
    20c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	82 30       	cpi	r24, 0x02	; 2
    20ce:	91 05       	cpc	r25, r1
    20d0:	59 f4       	brne	.+22     	; 0x20e8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x274>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
    20d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    20d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    20d6:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
    20da:	9c 01       	movw	r18, r24
    20dc:	8d 89       	ldd	r24, Y+21	; 0x15
    20de:	9e 89       	ldd	r25, Y+22	; 0x16
    20e0:	fc 01       	movw	r30, r24
    20e2:	31 83       	std	Z+1, r19	; 0x01
    20e4:	20 83       	st	Z, r18
							break;
    20e6:	05 c0       	rjmp	.+10     	; 0x20f2 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x27e>
							default:
								//unrecognized message type.
								status = -2;
    20e8:	8e ef       	ldi	r24, 0xFE	; 254
    20ea:	9f ef       	ldi	r25, 0xFF	; 255
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
							break;
    20f0:	00 00       	nop
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
					{
						//build the message
						switch(msgType)
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x288>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -3;
    20f4:	8d ef       	ldi	r24, 0xFD	; 253
    20f6:	9f ef       	ldi	r25, 0xFF	; 255
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de be       	out	0x3e, r13	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd be       	out	0x3d, r12	; 61
				}
			}
		}
	}
	
	if (status != 0)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	29 f0       	breq	.+10     	; 0x2118 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x2a4>
	{
		receivedMessage = NULL;
    210e:	8d 89       	ldd	r24, Y+21	; 0x15
    2110:	9e 89       	ldd	r25, Y+22	; 0x16
    2112:	fc 01       	movw	r30, r24
    2114:	11 82       	std	Z+1, r1	; 0x01
    2116:	10 82       	st	Z, r1
	}
	
	return status;
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	fe be       	out	0x3e, r15	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	ed be       	out	0x3d, r14	; 61
    2126:	66 96       	adiw	r28, 0x16	; 22
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	ef 90       	pop	r14
    213e:	df 90       	pop	r13
    2140:	cf 90       	pop	r12
    2142:	08 95       	ret

00002144 <_ZN10helicopter8messages7MessageD1Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	1f 92       	push	r1
    214a:	1f 92       	push	r1
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
				{
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	20 e3       	ldi	r18, 0x30	; 48
    215a:	32 e0       	ldi	r19, 0x02	; 2
    215c:	fc 01       	movw	r30, r24
    215e:	31 83       	std	Z+1, r19	; 0x01
    2160:	20 83       	st	Z, r18
					
				}
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	81 70       	andi	r24, 0x01	; 1
    2168:	99 27       	eor	r25, r25
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	21 f0       	breq	.+8      	; 0x2176 <_ZN10helicopter8messages7MessageD1Ev+0x32>
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <_ZN10helicopter8messages7MessageD0Ev>:
					msgType(msgType), msgSize(msgSize)
				{
					
				}
				
				virtual ~Message()
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	1f 92       	push	r1
    2186:	1f 92       	push	r1
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN10helicopter8messages7MessageD1Ev>
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	1f 92       	push	r1
    21b0:	1f 92       	push	r1
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
	return msgSize;
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	fc 01       	movw	r30, r24
    21c0:	83 81       	ldd	r24, Z+3	; 0x03
    21c2:	94 81       	ldd	r25, Z+4	; 0x04
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <_ZN10helicopter8messages7Message8getBytesEv>:
				
/**
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	1f 92       	push	r1
    21d4:	1f 92       	push	r1
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
	return NULL;
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <_ZN10helicopter8messages7Message12buildMessageEPh+0x6>
    21f2:	1f 92       	push	r1
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	7c 83       	std	Y+4, r23	; 0x04
    21fe:	6b 83       	std	Y+3, r22	; 0x03
	//noop. subclass should implement this.
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	08 95       	ret

0000220e <_ZN10helicopter8messages7MessageC1Ehi>:
			
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	00 d0       	rcall	.+0      	; 0x2214 <_ZN10helicopter8messages7MessageC1Ehi+0x6>
    2214:	1f 92       	push	r1
    2216:	1f 92       	push	r1
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	6b 83       	std	Y+3, r22	; 0x03
    2222:	5d 83       	std	Y+5, r21	; 0x05
    2224:	4c 83       	std	Y+4, r20	; 0x04
					msgType(msgType), msgSize(msgSize)
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	9a 81       	ldd	r25, Y+2	; 0x02
    222a:	20 e3       	ldi	r18, 0x30	; 48
    222c:	32 e0       	ldi	r19, 0x02	; 2
    222e:	fc 01       	movw	r30, r24
    2230:	31 83       	std	Z+1, r19	; 0x01
    2232:	20 83       	st	Z, r18
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	2b 81       	ldd	r18, Y+3	; 0x03
    223a:	fc 01       	movw	r30, r24
    223c:	22 83       	std	Z+2, r18	; 0x02
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	2c 81       	ldd	r18, Y+4	; 0x04
    2244:	3d 81       	ldd	r19, Y+5	; 0x05
    2246:	fc 01       	movw	r30, r24
    2248:	34 83       	std	Z+4, r19	; 0x04
    224a:	23 83       	std	Z+3, r18	; 0x03
				{
					
				}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <_ZN10helicopter8messages11SyncMessageC1Ev>:
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	1f 92       	push	r1
    2262:	1f 92       	push	r1
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	63 e0       	ldi	r22, 0x03	; 3
    2276:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN10helicopter8messages7MessageC1Ehi>
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	2c e3       	ldi	r18, 0x3C	; 60
    2280:	32 e0       	ldi	r19, 0x02	; 2
    2282:	fc 01       	movw	r30, r24
    2284:	31 83       	std	Z+1, r19	; 0x01
    2286:	20 83       	st	Z, r18
				{
								
				}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <_ZN10helicopter8messages11SyncMessageD1Ev>:
				
				~SyncMessage()
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	1f 92       	push	r1
    2298:	1f 92       	push	r1
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
				{
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	9a 81       	ldd	r25, Y+2	; 0x02
    22a6:	2c e3       	ldi	r18, 0x3C	; 60
    22a8:	32 e0       	ldi	r19, 0x02	; 2
    22aa:	fc 01       	movw	r30, r24
    22ac:	31 83       	std	Z+1, r19	; 0x01
    22ae:	20 83       	st	Z, r18
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	9a 81       	ldd	r25, Y+2	; 0x02
    22b4:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN10helicopter8messages7MessageD1Ev>
					
				}
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	81 70       	andi	r24, 0x01	; 1
    22be:	99 27       	eor	r25, r25
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	21 f0       	breq	.+8      	; 0x22cc <_ZN10helicopter8messages11SyncMessageD1Ev+0x3a>
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	08 95       	ret

000022d6 <_ZN10helicopter8messages11SyncMessageD0Ev>:
				SyncMessage(): Message(MessageType,MessageSize)
				{
								
				}
				
				~SyncMessage()
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	1f 92       	push	r1
    22dc:	1f 92       	push	r1
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	0e 94 49 11 	call	0x2292	; 0x2292 <_ZN10helicopter8messages11SyncMessageD1Ev>
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	08 95       	ret

00002300 <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	00 d0       	rcall	.+0      	; 0x2306 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x6>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <_ZN10helicopter8messages11SyncMessage8getBytesEv+0x8>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_Znaj>
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	fc 01       	movw	r30, r24
    232a:	22 81       	ldd	r18, Z+2	; 0x02
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	fc 01       	movw	r30, r24
    2332:	20 83       	st	Z, r18
	
	return msg;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2338:	26 96       	adiw	r28, 0x06	; 6
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:

void SyncMessage::buildMessage(byte *message)
{
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	00 d0       	rcall	.+0      	; 0x2350 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x6>
    2350:	1f 92       	push	r1
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	7c 83       	std	Y+4, r23	; 0x04
    235c:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	41 f0       	breq	.+16     	; 0x2376 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0x2c>
	{
		msgType = message[0];
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	fc 01       	movw	r30, r24
    236c:	20 81       	ld	r18, Z
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	fc 01       	movw	r30, r24
    2374:	22 83       	std	Z+2, r18	; 0x02
	}
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	08 95       	ret

00002384 <_ZN10helicopter8messages7Message6encodeERPhRi>:
				
				/**
				 * Mem copies the value into the buffer pointer then increments
				 * the pointer location by the size of the value copied.
				 */
				void encode (byte *&buffPtr, int &val)
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	00 d0       	rcall	.+0      	; 0x238a <_ZN10helicopter8messages7Message6encodeERPhRi+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <_ZN10helicopter8messages7Message6encodeERPhRi+0x8>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	7c 83       	std	Y+4, r23	; 0x04
    2396:	6b 83       	std	Y+3, r22	; 0x03
    2398:	5e 83       	std	Y+6, r21	; 0x06
    239a:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	fc 01       	movw	r30, r24
    23a2:	80 81       	ld	r24, Z
    23a4:	91 81       	ldd	r25, Z+1	; 0x01
    23a6:	2d 81       	ldd	r18, Y+5	; 0x05
    23a8:	3e 81       	ldd	r19, Y+6	; 0x06
    23aa:	42 e0       	ldi	r20, 0x02	; 2
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	b9 01       	movw	r22, r18
    23b0:	0e 94 cc 23 	call	0x4798	; 0x4798 <memcpy>
					buffPtr += sizeof(val);
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	9c 01       	movw	r18, r24
    23c0:	2e 5f       	subi	r18, 0xFE	; 254
    23c2:	3f 4f       	sbci	r19, 0xFF	; 255
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	fc 01       	movw	r30, r24
    23ca:	31 83       	std	Z+1, r19	; 0x01
    23cc:	20 83       	st	Z, r18
				}
    23ce:	26 96       	adiw	r28, 0x06	; 6
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	08 95       	ret

000023e0 <_ZN10helicopter8messages7Message6encodeERPhRj>:
				
				void encode (byte *&buffPtr, unsigned int &val)
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <_ZN10helicopter8messages7Message6encodeERPhRj+0x6>
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <_ZN10helicopter8messages7Message6encodeERPhRj+0x8>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	7c 83       	std	Y+4, r23	; 0x04
    23f2:	6b 83       	std	Y+3, r22	; 0x03
    23f4:	5e 83       	std	Y+6, r21	; 0x06
    23f6:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(buffPtr, &val, sizeof(val));
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	fc 01       	movw	r30, r24
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	2d 81       	ldd	r18, Y+5	; 0x05
    2404:	3e 81       	ldd	r19, Y+6	; 0x06
    2406:	42 e0       	ldi	r20, 0x02	; 2
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	b9 01       	movw	r22, r18
    240c:	0e 94 cc 23 	call	0x4798	; 0x4798 <memcpy>
					buffPtr += sizeof(val);
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	fc 01       	movw	r30, r24
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	9c 01       	movw	r18, r24
    241c:	2e 5f       	subi	r18, 0xFE	; 254
    241e:	3f 4f       	sbci	r19, 0xFF	; 255
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	fc 01       	movw	r30, r24
    2426:	31 83       	std	Z+1, r19	; 0x01
    2428:	20 83       	st	Z, r18
				}		
    242a:	26 96       	adiw	r28, 0x06	; 6
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <_ZN10helicopter8messages7Message6encodeERPhRh>:
				
				void encode (byte *&buffPtr, byte &val)
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	00 d0       	rcall	.+0      	; 0x2442 <_ZN10helicopter8messages7Message6encodeERPhRh+0x6>
    2442:	00 d0       	rcall	.+0      	; 0x2444 <_ZN10helicopter8messages7Message6encodeERPhRh+0x8>
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	7c 83       	std	Y+4, r23	; 0x04
    244e:	6b 83       	std	Y+3, r22	; 0x03
    2450:	5e 83       	std	Y+6, r21	; 0x06
    2452:	4d 83       	std	Y+5, r20	; 0x05
				{
					*buffPtr = val;
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	fc 01       	movw	r30, r24
    245a:	80 81       	ld	r24, Z
    245c:	91 81       	ldd	r25, Z+1	; 0x01
    245e:	2d 81       	ldd	r18, Y+5	; 0x05
    2460:	3e 81       	ldd	r19, Y+6	; 0x06
    2462:	f9 01       	movw	r30, r18
    2464:	20 81       	ld	r18, Z
    2466:	fc 01       	movw	r30, r24
    2468:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	fc 01       	movw	r30, r24
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	9c 01       	movw	r18, r24
    2476:	2f 5f       	subi	r18, 0xFF	; 255
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	fc 01       	movw	r30, r24
    2480:	31 83       	std	Z+1, r19	; 0x01
    2482:	20 83       	st	Z, r18
				}
    2484:	26 96       	adiw	r28, 0x06	; 6
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <_ZN10helicopter8messages7Message6decodeERPhRh>:
				
				/**
				 * Copies the the value at the buff pointer location into the given val parameter and
				 * increments the buffer by the sizeof(val)
				 */
				void decode (byte *&buffPtr, byte &val)
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	00 d0       	rcall	.+0      	; 0x249c <_ZN10helicopter8messages7Message6decodeERPhRh+0x6>
    249c:	00 d0       	rcall	.+0      	; 0x249e <_ZN10helicopter8messages7Message6decodeERPhRh+0x8>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	7c 83       	std	Y+4, r23	; 0x04
    24a8:	6b 83       	std	Y+3, r22	; 0x03
    24aa:	5e 83       	std	Y+6, r21	; 0x06
    24ac:	4d 83       	std	Y+5, r20	; 0x05
				{
					val = *buffPtr;
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	fc 01       	movw	r30, r24
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	fc 01       	movw	r30, r24
    24ba:	20 81       	ld	r18, Z
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	fc 01       	movw	r30, r24
    24c2:	20 83       	st	Z, r18
					buffPtr += sizeof(val);
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	fc 01       	movw	r30, r24
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	9c 01       	movw	r18, r24
    24d0:	2f 5f       	subi	r18, 0xFF	; 255
    24d2:	3f 4f       	sbci	r19, 0xFF	; 255
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	fc 01       	movw	r30, r24
    24da:	31 83       	std	Z+1, r19	; 0x01
    24dc:	20 83       	st	Z, r18
				}
    24de:	26 96       	adiw	r28, 0x06	; 6
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <_ZN10helicopter8messages7Message6decodeERPhRi>:
				
				void decode (byte *&buffPtr, int &val)
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <_ZN10helicopter8messages7Message6decodeERPhRi+0x6>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <_ZN10helicopter8messages7Message6decodeERPhRi+0x8>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	7c 83       	std	Y+4, r23	; 0x04
    2502:	6b 83       	std	Y+3, r22	; 0x03
    2504:	5e 83       	std	Y+6, r21	; 0x06
    2506:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	fc 01       	movw	r30, r24
    250e:	20 81       	ld	r18, Z
    2510:	31 81       	ldd	r19, Z+1	; 0x01
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	42 e0       	ldi	r20, 0x02	; 2
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	b9 01       	movw	r22, r18
    251c:	0e 94 cc 23 	call	0x4798	; 0x4798 <memcpy>
					buffPtr += sizeof(val);
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	fc 01       	movw	r30, r24
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	9c 01       	movw	r18, r24
    252c:	2e 5f       	subi	r18, 0xFE	; 254
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	fc 01       	movw	r30, r24
    2536:	31 83       	std	Z+1, r19	; 0x01
    2538:	20 83       	st	Z, r18
				}
    253a:	26 96       	adiw	r28, 0x06	; 6
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <_ZN10helicopter8messages7Message6decodeERPhRj>:
				
				void decode (byte *&buffPtr, unsigned int &val)
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	00 d0       	rcall	.+0      	; 0x2552 <_ZN10helicopter8messages7Message6decodeERPhRj+0x6>
    2552:	00 d0       	rcall	.+0      	; 0x2554 <_ZN10helicopter8messages7Message6decodeERPhRj+0x8>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	7c 83       	std	Y+4, r23	; 0x04
    255e:	6b 83       	std	Y+3, r22	; 0x03
    2560:	5e 83       	std	Y+6, r21	; 0x06
    2562:	4d 83       	std	Y+5, r20	; 0x05
				{
					memcpy(&val, buffPtr, sizeof(val));
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	fc 01       	movw	r30, r24
    256a:	20 81       	ld	r18, Z
    256c:	31 81       	ldd	r19, Z+1	; 0x01
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	42 e0       	ldi	r20, 0x02	; 2
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	b9 01       	movw	r22, r18
    2578:	0e 94 cc 23 	call	0x4798	; 0x4798 <memcpy>
					buffPtr += sizeof(val);
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	fc 01       	movw	r30, r24
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	9c 01       	movw	r18, r24
    2588:	2e 5f       	subi	r18, 0xFE	; 254
    258a:	3f 4f       	sbci	r19, 0xFF	; 255
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	fc 01       	movw	r30, r24
    2592:	31 83       	std	Z+1, r19	; 0x01
    2594:	20 83       	st	Z, r18
				}
    2596:	26 96       	adiw	r28, 0x06	; 6
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	08 95       	ret

000025a8 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(yawDerivativeError) +
				sizeof(timeouts) + 
				sizeof(unrecognizedMsgTypes) + 
				sizeof(checksumErrors);
			
				SystemTelemetryMessage(): Message(MessageType,MessageSize),
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	1f 92       	push	r1
    25ae:	1f 92       	push	r1
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
					yawIntegral(0),
					yawProportional(0),
					yawDerivativeError(0),					
					timeouts(0),
					unrecognizedMsgTypes(0),
					checksumErrors(0)
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	47 e1       	ldi	r20, 0x17	; 23
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	62 e0       	ldi	r22, 0x02	; 2
    25c2:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN10helicopter8messages7MessageC1Ehi>
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	28 e4       	ldi	r18, 0x48	; 72
    25cc:	32 e0       	ldi	r19, 0x02	; 2
    25ce:	fc 01       	movw	r30, r24
    25d0:	31 83       	std	Z+1, r19	; 0x01
    25d2:	20 83       	st	Z, r18
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	fc 01       	movw	r30, r24
    25da:	16 82       	std	Z+6, r1	; 0x06
    25dc:	15 82       	std	Z+5, r1	; 0x05
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	fc 01       	movw	r30, r24
    25e4:	10 86       	std	Z+8, r1	; 0x08
    25e6:	17 82       	std	Z+7, r1	; 0x07
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	fc 01       	movw	r30, r24
    25ee:	12 86       	std	Z+10, r1	; 0x0a
    25f0:	11 86       	std	Z+9, r1	; 0x09
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	fc 01       	movw	r30, r24
    25f8:	14 86       	std	Z+12, r1	; 0x0c
    25fa:	13 86       	std	Z+11, r1	; 0x0b
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	fc 01       	movw	r30, r24
    2602:	16 86       	std	Z+14, r1	; 0x0e
    2604:	15 86       	std	Z+13, r1	; 0x0d
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	fc 01       	movw	r30, r24
    260c:	10 8a       	std	Z+16, r1	; 0x10
    260e:	17 86       	std	Z+15, r1	; 0x0f
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	fc 01       	movw	r30, r24
    2616:	12 8a       	std	Z+18, r1	; 0x12
    2618:	11 8a       	std	Z+17, r1	; 0x11
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	fc 01       	movw	r30, r24
    2620:	14 8a       	std	Z+20, r1	; 0x14
    2622:	13 8a       	std	Z+19, r1	; 0x13
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	fc 01       	movw	r30, r24
    262a:	16 8a       	std	Z+22, r1	; 0x16
    262c:	15 8a       	std	Z+21, r1	; 0x15
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	fc 01       	movw	r30, r24
    2634:	10 8e       	std	Z+24, r1	; 0x18
    2636:	17 8a       	std	Z+23, r1	; 0x17
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	fc 01       	movw	r30, r24
    263e:	12 8e       	std	Z+26, r1	; 0x1a
    2640:	11 8e       	std	Z+25, r1	; 0x19
				{
				
				}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	df 91       	pop	r29
    2648:	cf 91       	pop	r28
    264a:	08 95       	ret

0000264c <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	1f 92       	push	r1
    2652:	1f 92       	push	r1
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	28 e4       	ldi	r18, 0x48	; 72
    2662:	32 e0       	ldi	r19, 0x02	; 2
    2664:	fc 01       	movw	r30, r24
    2666:	31 83       	std	Z+1, r19	; 0x01
    2668:	20 83       	st	Z, r18
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN10helicopter8messages7MessageD1Ev>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	99 27       	eor	r25, r25
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	21 f0       	breq	.+8      	; 0x2686 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	08 95       	ret

00002690 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	1f 92       	push	r1
    2696:	1f 92       	push	r1
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret

000026ba <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    26ca:	87 e1       	ldi	r24, 0x17	; 23
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_Znaj>
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	8b 83       	std	Y+3, r24	; 0x03
	
	encode (msgPtr, msgType);
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	ac 01       	movw	r20, r24
    26e4:	4e 5f       	subi	r20, 0xFE	; 254
    26e6:	5f 4f       	sbci	r21, 0xFF	; 255
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	9e 01       	movw	r18, r28
    26ee:	2d 5f       	subi	r18, 0xFD	; 253
    26f0:	3f 4f       	sbci	r19, 0xFF	; 255
    26f2:	b9 01       	movw	r22, r18
    26f4:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN10helicopter8messages7Message6encodeERPhRh>
	encode (msgPtr, magX);
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	ac 01       	movw	r20, r24
    26fe:	4b 5f       	subi	r20, 0xFB	; 251
    2700:	5f 4f       	sbci	r21, 0xFF	; 255
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	9e 01       	movw	r18, r28
    2708:	2d 5f       	subi	r18, 0xFD	; 253
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	b9 01       	movw	r22, r18
    270e:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, magY);
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	ac 01       	movw	r20, r24
    2718:	49 5f       	subi	r20, 0xF9	; 249
    271a:	5f 4f       	sbci	r21, 0xFF	; 255
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	9e 01       	movw	r18, r28
    2722:	2d 5f       	subi	r18, 0xFD	; 253
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	b9 01       	movw	r22, r18
    2728:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, magZ);
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	ac 01       	movw	r20, r24
    2732:	47 5f       	subi	r20, 0xF7	; 247
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	9e 81       	ldd	r25, Y+6	; 0x06
    273a:	9e 01       	movw	r18, r28
    273c:	2d 5f       	subi	r18, 0xFD	; 253
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	b9 01       	movw	r22, r18
    2742:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, magYaw);
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	9e 81       	ldd	r25, Y+6	; 0x06
    274a:	ac 01       	movw	r20, r24
    274c:	45 5f       	subi	r20, 0xF5	; 245
    274e:	5f 4f       	sbci	r21, 0xFF	; 255
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	9e 01       	movw	r18, r28
    2756:	2d 5f       	subi	r18, 0xFD	; 253
    2758:	3f 4f       	sbci	r19, 0xFF	; 255
    275a:	b9 01       	movw	r22, r18
    275c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_ZN10helicopter8messages7Message6encodeERPhRj>
	encode (msgPtr, yawVelocityDegreesPerSecond);
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	ac 01       	movw	r20, r24
    2766:	43 5f       	subi	r20, 0xF3	; 243
    2768:	5f 4f       	sbci	r21, 0xFF	; 255
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	9e 01       	movw	r18, r28
    2770:	2d 5f       	subi	r18, 0xFD	; 253
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	b9 01       	movw	r22, r18
    2776:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, yawIntegral);
    277a:	8d 81       	ldd	r24, Y+5	; 0x05
    277c:	9e 81       	ldd	r25, Y+6	; 0x06
    277e:	ac 01       	movw	r20, r24
    2780:	41 5f       	subi	r20, 0xF1	; 241
    2782:	5f 4f       	sbci	r21, 0xFF	; 255
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	9e 01       	movw	r18, r28
    278a:	2d 5f       	subi	r18, 0xFD	; 253
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	b9 01       	movw	r22, r18
    2790:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, yawProportional);
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	ac 01       	movw	r20, r24
    279a:	4f 5e       	subi	r20, 0xEF	; 239
    279c:	5f 4f       	sbci	r21, 0xFF	; 255
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	9e 01       	movw	r18, r28
    27a4:	2d 5f       	subi	r18, 0xFD	; 253
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	b9 01       	movw	r22, r18
    27aa:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, yawDerivativeError);
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	ac 01       	movw	r20, r24
    27b4:	4d 5e       	subi	r20, 0xED	; 237
    27b6:	5f 4f       	sbci	r21, 0xFF	; 255
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	9e 01       	movw	r18, r28
    27be:	2d 5f       	subi	r18, 0xFD	; 253
    27c0:	3f 4f       	sbci	r19, 0xFF	; 255
    27c2:	b9 01       	movw	r22, r18
    27c4:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, timeouts);
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	ac 01       	movw	r20, r24
    27ce:	4b 5e       	subi	r20, 0xEB	; 235
    27d0:	5f 4f       	sbci	r21, 0xFF	; 255
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	9e 01       	movw	r18, r28
    27d8:	2d 5f       	subi	r18, 0xFD	; 253
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	b9 01       	movw	r22, r18
    27de:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, unrecognizedMsgTypes);
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	ac 01       	movw	r20, r24
    27e8:	49 5e       	subi	r20, 0xE9	; 233
    27ea:	5f 4f       	sbci	r21, 0xFF	; 255
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	9e 01       	movw	r18, r28
    27f2:	2d 5f       	subi	r18, 0xFD	; 253
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	b9 01       	movw	r22, r18
    27f8:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
	encode (msgPtr, checksumErrors);
    27fc:	8d 81       	ldd	r24, Y+5	; 0x05
    27fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2800:	ac 01       	movw	r20, r24
    2802:	47 5e       	subi	r20, 0xE7	; 231
    2804:	5f 4f       	sbci	r21, 0xFF	; 255
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	9e 01       	movw	r18, r28
    280c:	2d 5f       	subi	r18, 0xFD	; 253
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	b9 01       	movw	r22, r18
    2812:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN10helicopter8messages7Message6encodeERPhRi>
				
	return msg;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
}
    281a:	26 96       	adiw	r28, 0x06	; 6
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	08 95       	ret

0000282c <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	00 d0       	rcall	.+0      	; 0x2832 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x6>
    2832:	1f 92       	push	r1
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	7c 83       	std	Y+4, r23	; 0x04
    283e:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	09 f4       	brne	.+2      	; 0x284a <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x1e>
    2848:	9c c0       	rjmp	.+312    	; 0x2982 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x156>
	{
		decode (message,msgType);
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	ac 01       	movw	r20, r24
    2850:	4e 5f       	subi	r20, 0xFE	; 254
    2852:	5f 4f       	sbci	r21, 0xFF	; 255
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	9e 01       	movw	r18, r28
    285a:	2d 5f       	subi	r18, 0xFD	; 253
    285c:	3f 4f       	sbci	r19, 0xFF	; 255
    285e:	b9 01       	movw	r22, r18
    2860:	0e 94 4b 12 	call	0x2496	; 0x2496 <_ZN10helicopter8messages7Message6decodeERPhRh>
		decode (message,magX);
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	ac 01       	movw	r20, r24
    286a:	4b 5f       	subi	r20, 0xFB	; 251
    286c:	5f 4f       	sbci	r21, 0xFF	; 255
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	9e 01       	movw	r18, r28
    2874:	2d 5f       	subi	r18, 0xFD	; 253
    2876:	3f 4f       	sbci	r19, 0xFF	; 255
    2878:	b9 01       	movw	r22, r18
    287a:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,magY);
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	ac 01       	movw	r20, r24
    2884:	49 5f       	subi	r20, 0xF9	; 249
    2886:	5f 4f       	sbci	r21, 0xFF	; 255
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	9a 81       	ldd	r25, Y+2	; 0x02
    288c:	9e 01       	movw	r18, r28
    288e:	2d 5f       	subi	r18, 0xFD	; 253
    2890:	3f 4f       	sbci	r19, 0xFF	; 255
    2892:	b9 01       	movw	r22, r18
    2894:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,magZ);
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	ac 01       	movw	r20, r24
    289e:	47 5f       	subi	r20, 0xF7	; 247
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	9e 01       	movw	r18, r28
    28a8:	2d 5f       	subi	r18, 0xFD	; 253
    28aa:	3f 4f       	sbci	r19, 0xFF	; 255
    28ac:	b9 01       	movw	r22, r18
    28ae:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,magYaw);
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	ac 01       	movw	r20, r24
    28b8:	45 5f       	subi	r20, 0xF5	; 245
    28ba:	5f 4f       	sbci	r21, 0xFF	; 255
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	9e 01       	movw	r18, r28
    28c2:	2d 5f       	subi	r18, 0xFD	; 253
    28c4:	3f 4f       	sbci	r19, 0xFF	; 255
    28c6:	b9 01       	movw	r22, r18
    28c8:	0e 94 a6 12 	call	0x254c	; 0x254c <_ZN10helicopter8messages7Message6decodeERPhRj>
		decode (message,yawVelocityDegreesPerSecond);
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	ac 01       	movw	r20, r24
    28d2:	43 5f       	subi	r20, 0xF3	; 243
    28d4:	5f 4f       	sbci	r21, 0xFF	; 255
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	9e 01       	movw	r18, r28
    28dc:	2d 5f       	subi	r18, 0xFD	; 253
    28de:	3f 4f       	sbci	r19, 0xFF	; 255
    28e0:	b9 01       	movw	r22, r18
    28e2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,yawIntegral);
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	ac 01       	movw	r20, r24
    28ec:	41 5f       	subi	r20, 0xF1	; 241
    28ee:	5f 4f       	sbci	r21, 0xFF	; 255
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	9e 01       	movw	r18, r28
    28f6:	2d 5f       	subi	r18, 0xFD	; 253
    28f8:	3f 4f       	sbci	r19, 0xFF	; 255
    28fa:	b9 01       	movw	r22, r18
    28fc:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,yawProportional);
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	ac 01       	movw	r20, r24
    2906:	4f 5e       	subi	r20, 0xEF	; 239
    2908:	5f 4f       	sbci	r21, 0xFF	; 255
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	9e 01       	movw	r18, r28
    2910:	2d 5f       	subi	r18, 0xFD	; 253
    2912:	3f 4f       	sbci	r19, 0xFF	; 255
    2914:	b9 01       	movw	r22, r18
    2916:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,yawDerivativeError);						
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	ac 01       	movw	r20, r24
    2920:	4d 5e       	subi	r20, 0xED	; 237
    2922:	5f 4f       	sbci	r21, 0xFF	; 255
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	9e 01       	movw	r18, r28
    292a:	2d 5f       	subi	r18, 0xFD	; 253
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	b9 01       	movw	r22, r18
    2930:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,timeouts);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	9a 81       	ldd	r25, Y+2	; 0x02
    2938:	ac 01       	movw	r20, r24
    293a:	4b 5e       	subi	r20, 0xEB	; 235
    293c:	5f 4f       	sbci	r21, 0xFF	; 255
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	9e 01       	movw	r18, r28
    2944:	2d 5f       	subi	r18, 0xFD	; 253
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
    2948:	b9 01       	movw	r22, r18
    294a:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,unrecognizedMsgTypes);
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	ac 01       	movw	r20, r24
    2954:	49 5e       	subi	r20, 0xE9	; 233
    2956:	5f 4f       	sbci	r21, 0xFF	; 255
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	9e 01       	movw	r18, r28
    295e:	2d 5f       	subi	r18, 0xFD	; 253
    2960:	3f 4f       	sbci	r19, 0xFF	; 255
    2962:	b9 01       	movw	r22, r18
    2964:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
		decode (message,checksumErrors);
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	ac 01       	movw	r20, r24
    296e:	47 5e       	subi	r20, 0xE7	; 231
    2970:	5f 4f       	sbci	r21, 0xFF	; 255
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	9e 01       	movw	r18, r28
    2978:	2d 5f       	subi	r18, 0xFD	; 253
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	b9 01       	movw	r22, r18
    297e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN10helicopter8messages7Message6decodeERPhRi>
	}
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	08 95       	ret

00002990 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 d0       	rcall	.+0      	; 0x299a <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh+0xa>
    299a:	1f 92       	push	r1
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    29a4:	8b e1       	ldi	r24, 0x1B	; 27
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    29ac:	8c 01       	movw	r16, r24
    29ae:	c8 01       	movw	r24, r16
    29b0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    29b4:	1a 83       	std	Y+2, r17	; 0x02
    29b6:	09 83       	std	Y+1, r16	; 0x01
	msg->buildMessage(message);
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	fc 01       	movw	r30, r24
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	06 96       	adiw	r24, 0x06	; 6
    29c4:	fc 01       	movw	r30, r24
    29c6:	20 81       	ld	r18, Z
    29c8:	31 81       	ldd	r19, Z+1	; 0x01
    29ca:	4b 81       	ldd	r20, Y+3	; 0x03
    29cc:	5c 81       	ldd	r21, Y+4	; 0x04
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	ba 01       	movw	r22, r20
    29d4:	f9 01       	movw	r30, r18
    29d6:	19 95       	eicall
	
	return msg;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	08 95       	ret

000029ee <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>:
				/**
				 * Magnetic heading variables in the x y and z directions.
				 */
				
				int MagX() const { return magX; }
				void MagX(int val) { magX = val; }
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi+0x6>
    29f4:	1f 92       	push	r1
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	7c 83       	std	Y+4, r23	; 0x04
    2a00:	6b 83       	std	Y+3, r22	; 0x03
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	2b 81       	ldd	r18, Y+3	; 0x03
    2a08:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	36 83       	std	Z+6, r19	; 0x06
    2a0e:	25 83       	std	Z+5, r18	; 0x05
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	08 95       	ret

00002a1e <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>:
			
				int MagY() const { return magY; }
				void MagY(int val) { magY = val; }
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi+0x6>
    2a24:	1f 92       	push	r1
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	9a 83       	std	Y+2, r25	; 0x02
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	7c 83       	std	Y+4, r23	; 0x04
    2a30:	6b 83       	std	Y+3, r22	; 0x03
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	2b 81       	ldd	r18, Y+3	; 0x03
    2a38:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	30 87       	std	Z+8, r19	; 0x08
    2a3e:	27 83       	std	Z+7, r18	; 0x07
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	08 95       	ret

00002a4e <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>:
			
				int MagZ() const { return magZ; }
				void MagZ(int val) { magZ = val; }
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi+0x6>
    2a54:	1f 92       	push	r1
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	7c 83       	std	Y+4, r23	; 0x04
    2a60:	6b 83       	std	Y+3, r22	; 0x03
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	2b 81       	ldd	r18, Y+3	; 0x03
    2a68:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	32 87       	std	Z+10, r19	; 0x0a
    2a6e:	21 87       	std	Z+9, r18	; 0x09
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	08 95       	ret

00002a7e <_ZN10helicopter8messages22SystemTelemetryMessage6MagYawEj>:
					
				unsigned int MagYaw() const { return magYaw; }
				void MagYaw(unsigned int val) { magYaw = val; }
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <_ZN10helicopter8messages22SystemTelemetryMessage6MagYawEj+0x6>
    2a84:	1f 92       	push	r1
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	7c 83       	std	Y+4, r23	; 0x04
    2a90:	6b 83       	std	Y+3, r22	; 0x03
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	2b 81       	ldd	r18, Y+3	; 0x03
    2a98:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	34 87       	std	Z+12, r19	; 0x0c
    2a9e:	23 87       	std	Z+11, r18	; 0x0b
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	08 95       	ret

00002aae <_ZN10helicopter8messages22SystemTelemetryMessage27YawVelocityDegreesPerSecondEi>:
					
				int YawVelocityDegreesPerSecond() const { return yawVelocityDegreesPerSecond; }
				void YawVelocityDegreesPerSecond(int val) { yawVelocityDegreesPerSecond = val; }
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <_ZN10helicopter8messages22SystemTelemetryMessage27YawVelocityDegreesPerSecondEi+0x6>
    2ab4:	1f 92       	push	r1
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	7c 83       	std	Y+4, r23	; 0x04
    2ac0:	6b 83       	std	Y+3, r22	; 0x03
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aca:	fc 01       	movw	r30, r24
    2acc:	36 87       	std	Z+14, r19	; 0x0e
    2ace:	25 87       	std	Z+13, r18	; 0x0d
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	08 95       	ret

00002ade <_ZN10helicopter8messages22SystemTelemetryMessage11YawIntegralEi>:
					
				int YawIntegral() const {return yawIntegral;}
				void YawIntegral(int val) { yawIntegral = val;}
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <_ZN10helicopter8messages22SystemTelemetryMessage11YawIntegralEi+0x6>
    2ae4:	1f 92       	push	r1
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01
    2aee:	7c 83       	std	Y+4, r23	; 0x04
    2af0:	6b 83       	std	Y+3, r22	; 0x03
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	9a 81       	ldd	r25, Y+2	; 0x02
    2af6:	2b 81       	ldd	r18, Y+3	; 0x03
    2af8:	3c 81       	ldd	r19, Y+4	; 0x04
    2afa:	fc 01       	movw	r30, r24
    2afc:	30 8b       	std	Z+16, r19	; 0x10
    2afe:	27 87       	std	Z+15, r18	; 0x0f
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	08 95       	ret

00002b0e <_ZN10helicopter8messages22SystemTelemetryMessage15YawProportionalEi>:
					
				int YawProportional() const {return yawProportional;}
				void YawProportional(int val) { yawProportional = val;}
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <_ZN10helicopter8messages22SystemTelemetryMessage15YawProportionalEi+0x6>
    2b14:	1f 92       	push	r1
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	7c 83       	std	Y+4, r23	; 0x04
    2b20:	6b 83       	std	Y+3, r22	; 0x03
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	2b 81       	ldd	r18, Y+3	; 0x03
    2b28:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	32 8b       	std	Z+18, r19	; 0x12
    2b2e:	21 8b       	std	Z+17, r18	; 0x11
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	08 95       	ret

00002b3e <_ZN10helicopter8messages22SystemTelemetryMessage18YawDerivativeErrorEi>:

				int YawDerivativeError() const {return yawDerivativeError;}
				void YawDerivativeError(int val) { yawDerivativeError = val;}	
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <_ZN10helicopter8messages22SystemTelemetryMessage18YawDerivativeErrorEi+0x6>
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	9a 83       	std	Y+2, r25	; 0x02
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	7c 83       	std	Y+4, r23	; 0x04
    2b50:	6b 83       	std	Y+3, r22	; 0x03
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	2b 81       	ldd	r18, Y+3	; 0x03
    2b58:	3c 81       	ldd	r19, Y+4	; 0x04
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	34 8b       	std	Z+20, r19	; 0x14
    2b5e:	23 8b       	std	Z+19, r18	; 0x13
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi>:
					
									
					
				int Timeouts() const {return timeouts; }
				void Timeouts(int val) { timeouts = val; }
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi+0x6>
    2b74:	1f 92       	push	r1
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	7c 83       	std	Y+4, r23	; 0x04
    2b80:	6b 83       	std	Y+3, r22	; 0x03
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	9a 81       	ldd	r25, Y+2	; 0x02
    2b86:	2b 81       	ldd	r18, Y+3	; 0x03
    2b88:	3c 81       	ldd	r19, Y+4	; 0x04
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	36 8b       	std	Z+22, r19	; 0x16
    2b8e:	25 8b       	std	Z+21, r18	; 0x15
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	08 95       	ret

00002b9e <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi>:
				
				int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
				void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi+0x6>
    2ba4:	1f 92       	push	r1
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	7c 83       	std	Y+4, r23	; 0x04
    2bb0:	6b 83       	std	Y+3, r22	; 0x03
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bba:	fc 01       	movw	r30, r24
    2bbc:	30 8f       	std	Z+24, r19	; 0x18
    2bbe:	27 8b       	std	Z+23, r18	; 0x17
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	08 95       	ret

00002bce <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi>:
				
				int ChecksumErrors() const {return checksumErrors; }
				void ChecksumErrors(int val) { checksumErrors = val; }
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi+0x6>
    2bd4:	1f 92       	push	r1
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	7c 83       	std	Y+4, r23	; 0x04
    2be0:	6b 83       	std	Y+3, r22	; 0x03
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	9a 81       	ldd	r25, Y+2	; 0x02
    2be6:	2b 81       	ldd	r18, Y+3	; 0x03
    2be8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bea:	fc 01       	movw	r30, r24
    2bec:	32 8f       	std	Z+26, r19	; 0x1a
    2bee:	21 8f       	std	Z+25, r18	; 0x19
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	08 95       	ret

00002bfe <_ZNK10helicopter5model11SystemModel7RawMagXEv>:
			 * X axis is left out of the FC
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			
			int RawMagX() const { return rawMagX; }
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	1f 92       	push	r1
    2c04:	1f 92       	push	r1
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	fc 01       	movw	r30, r24
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	08 95       	ret

00002c22 <_ZNK10helicopter5model11SystemModel7RawMagYEv>:
			void RawMagX(int val) { rawMagX = val; }
			
			int RawMagY() const { return rawMagY; }
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	1f 92       	push	r1
    2c28:	1f 92       	push	r1
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	9a 83       	std	Y+2, r25	; 0x02
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	fc 01       	movw	r30, r24
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	df 91       	pop	r29
    2c42:	cf 91       	pop	r28
    2c44:	08 95       	ret

00002c46 <_ZNK10helicopter5model11SystemModel7RawMagZEv>:
			void RawMagY(int val) { rawMagY = val; }
			
			int RawMagZ() const { return rawMagZ; }
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	1f 92       	push	r1
    2c4c:	1f 92       	push	r1
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	9a 83       	std	Y+2, r25	; 0x02
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	84 81       	ldd	r24, Z+4	; 0x04
    2c5e:	95 81       	ldd	r25, Z+5	; 0x05
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	08 95       	ret

00002c6a <_ZNK10helicopter5model11SystemModel15YawProportionalEv>:
			void ReferenceYawVelocityDegreesPerSecond(double val) { referenceYawVelocityDegreesPerSecond = val;}
				
			double YawIntegral() const {return yawIntegral;}
			void YawIntegral(double val) { yawIntegral = val;}

			double YawProportional() const {return yawProportional;}
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	1f 92       	push	r1
    2c70:	1f 92       	push	r1
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	9a 83       	std	Y+2, r25	; 0x02
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	fc 01       	movw	r30, r24
    2c80:	82 a1       	ldd	r24, Z+34	; 0x22
    2c82:	93 a1       	ldd	r25, Z+35	; 0x23
    2c84:	a4 a1       	ldd	r26, Z+36	; 0x24
    2c86:	b5 a1       	ldd	r27, Z+37	; 0x25
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>:
			void YawProportional(double val) { yawProportional = val;}

			double YawDerivativeError() const {return yawDerivativeError;}
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	1f 92       	push	r1
    2c9c:	1f 92       	push	r1
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	fc 01       	movw	r30, r24
    2cac:	86 a1       	ldd	r24, Z+38	; 0x26
    2cae:	97 a1       	ldd	r25, Z+39	; 0x27
    2cb0:	a0 a5       	ldd	r26, Z+40	; 0x28
    2cb2:	b1 a5       	ldd	r27, Z+41	; 0x29
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	08 95       	ret

00002cc2 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>:
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
																							
						
			int Timeouts() const {return timeouts; }
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	1f 92       	push	r1
    2cc8:	1f 92       	push	r1
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	82 a5       	ldd	r24, Z+42	; 0x2a
    2cda:	93 a5       	ldd	r25, Z+43	; 0x2b
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	08 95       	ret

00002ce6 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>:
			void Timeouts(int val) { timeouts = val; }
			
			int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	1f 92       	push	r1
    2cec:	1f 92       	push	r1
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	84 a5       	ldd	r24, Z+44	; 0x2c
    2cfe:	95 a5       	ldd	r25, Z+45	; 0x2d
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>:
			void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
			
			int ChecksumErrors() const {return checksumErrors; }
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	1f 92       	push	r1
    2d10:	1f 92       	push	r1
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	fc 01       	movw	r30, r24
    2d20:	86 a5       	ldd	r24, Z+46	; 0x2e
    2d22:	97 a5       	ldd	r25, Z+47	; 0x2f
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	08 95       	ret

00002d2e <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>:

using namespace helicopter::model;


SystemTelemetryMessage *SystemModel::CreateTelemetryMessage()
{
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv+0xa>
    2d38:	1f 92       	push	r1
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	9c 83       	std	Y+4, r25	; 0x04
    2d40:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    2d42:	8b e1       	ldi	r24, 0x1B	; 27
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    2d4a:	8c 01       	movw	r16, r24
    2d4c:	c8 01       	movw	r24, r16
    2d4e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    2d52:	1a 83       	std	Y+2, r17	; 0x02
    2d54:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagX(RawMagX());
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <_ZNK10helicopter5model11SystemModel7RawMagXEv>
    2d5e:	9c 01       	movw	r18, r24
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	b9 01       	movw	r22, r18
    2d66:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>
	message->MagY(RawMagY());
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <_ZNK10helicopter5model11SystemModel7RawMagYEv>
    2d72:	9c 01       	movw	r18, r24
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	b9 01       	movw	r22, r18
    2d7a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>
	message->MagZ(RawMagZ());
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	9c 81       	ldd	r25, Y+4	; 0x04
    2d82:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZNK10helicopter5model11SystemModel7RawMagZEv>
    2d86:	9c 01       	movw	r18, r24
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8c:	b9 01       	movw	r22, r18
    2d8e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>
	message->MagYaw(MagYawDegrees());
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	9c 81       	ldd	r25, Y+4	; 0x04
    2d96:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZNK10helicopter5model11SystemModel13MagYawDegreesEv>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 b0 20 	call	0x4160	; 0x4160 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9c 01       	movw	r18, r24
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	b9 01       	movw	r22, r18
    2db2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_ZN10helicopter8messages22SystemTelemetryMessage6MagYawEj>
	message->ChecksumErrors(ChecksumErrors());
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dba:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    2dbe:	9c 01       	movw	r18, r24
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	b9 01       	movw	r22, r18
    2dc6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN10helicopter8messages22SystemTelemetryMessage14ChecksumErrorsEi>
	message->Timeouts(Timeouts());
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dce:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    2dd2:	9c 01       	movw	r18, r24
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	b9 01       	movw	r22, r18
    2dda:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_ZN10helicopter8messages22SystemTelemetryMessage8TimeoutsEi>
	message->UnrecognizedMsgTypes(UnrecognizedMsgTypes());
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    2de6:	9c 01       	movw	r18, r24
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	b9 01       	movw	r22, r18
    2dee:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN10helicopter8messages22SystemTelemetryMessage20UnrecognizedMsgTypesEi>
	message->YawDerivativeError(YawDerivativeError());
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZNK10helicopter5model11SystemModel18YawDerivativeErrorEv>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e10:	b9 01       	movw	r22, r18
    2e12:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <_ZN10helicopter8messages22SystemTelemetryMessage18YawDerivativeErrorEi>
	message->YawIntegral(YawIntegral());
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZNK10helicopter5model11SystemModel11YawIntegralEv>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9c 01       	movw	r18, r24
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	b9 01       	movw	r22, r18
    2e36:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZN10helicopter8messages22SystemTelemetryMessage11YawIntegralEi>
	message->YawProportional(YawProportional());
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_ZNK10helicopter5model11SystemModel15YawProportionalEv>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9c 01       	movw	r18, r24
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	b9 01       	movw	r22, r18
    2e5a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <_ZN10helicopter8messages22SystemTelemetryMessage15YawProportionalEi>
	message->YawVelocityDegreesPerSecond(YawVelocityDegreesPerSecond());
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZNK10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEv>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9c 01       	movw	r18, r24
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	b9 01       	movw	r22, r18
    2e7e:	0e 94 57 15 	call	0x2aae	; 0x2aae <_ZN10helicopter8messages22SystemTelemetryMessage27YawVelocityDegreesPerSecondEi>
	
	return message;
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	08 95       	ret

00002e98 <_ZN10helicopter5tasks4Task8getDelayEv>:
				 * subclasses runTaskImpl to execute the actual task logic.
				 */
				virtual void runTask();
				
					
				int getDelay()
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	1f 92       	push	r1
    2e9e:	1f 92       	push	r1
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	fc 01       	movw	r30, r24
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
				}
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	1f 92       	push	r1
    2ec2:	1f 92       	push	r1
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	84 81       	ldd	r24, Z+4	; 0x04
    2ed4:	95 81       	ldd	r25, Z+5	; 0x05
				}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	08 95       	ret

00002ee0 <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	00 d0       	rcall	.+0      	; 0x2ee6 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    2ee6:	1f 92       	push	r1
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	7c 83       	std	Y+4, r23	; 0x04
    2ef2:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    2efa:	3c 81       	ldd	r19, Y+4	; 0x04
    2efc:	fc 01       	movw	r30, r24
    2efe:	33 83       	std	Z+3, r19	; 0x03
    2f00:	22 83       	std	Z+2, r18	; 0x02
				}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	1f 92       	push	r1
    2f16:	1f 92       	push	r1
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	fc 01       	movw	r30, r24
    2f26:	86 81       	ldd	r24, Z+6	; 0x06
				}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	08 95       	ret

00002f32 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	9a 81       	ldd	r25, Y+2	; 0x02
    2f46:	2b 81       	ldd	r18, Y+3	; 0x03
    2f48:	fc 01       	movw	r30, r24
    2f4a:	26 83       	std	Z+6, r18	; 0x06
				}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	df 91       	pop	r29
    2f54:	cf 91       	pop	r28
    2f56:	08 95       	ret

00002f58 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	1f 92       	push	r1
    2f5e:	1f 92       	push	r1
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	9a 83       	std	Y+2, r25	; 0x02
    2f66:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	9c 01       	movw	r18, r24
    2f74:	21 50       	subi	r18, 0x01	; 1
    2f76:	31 09       	sbc	r19, r1
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	33 83       	std	Z+3, r19	; 0x03
    2f80:	22 83       	std	Z+2, r18	; 0x02
				}
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	08 95       	ret

00002f8c <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for determining which tasks are ready to run.
				*/
				void start();
				
				int getNumOfTasks()
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	1f 92       	push	r1
    2f92:	1f 92       	push	r1
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	84 89       	ldd	r24, Z+20	; 0x14
    2fa4:	95 89       	ldd	r25, Z+21	; 0x15
				}
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	08 95       	ret

00002fb0 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	1f 92       	push	r1
    2fb6:	1f 92       	push	r1
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	df 91       	pop	r29
    2fca:	cf 91       	pop	r28
    2fcc:	08 95       	ret

00002fce <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    2fde:	80 91 88 02 	lds	r24, 0x0288
    2fe2:	90 91 89 02 	lds	r25, 0x0289
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	a1 f4       	brne	.+40     	; 0x3012 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x44>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    2fea:	8a e1       	ldi	r24, 0x1A	; 26
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_Znwj>
    2ff2:	7c 01       	movw	r14, r24
    2ff4:	08 ec       	ldi	r16, 0xC8	; 200
    2ff6:	10 e0       	ldi	r17, 0x00	; 0
    2ff8:	20 e4       	ldi	r18, 0x40	; 64
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	54 e2       	ldi	r21, 0x24	; 36
    3000:	64 ef       	ldi	r22, 0xF4	; 244
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	c7 01       	movw	r24, r14
    3006:	0e 94 14 18 	call	0x3028	; 0x3028 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    300a:	f0 92 89 02 	sts	0x0289, r15
    300e:	e0 92 88 02 	sts	0x0288, r14
	}

	return scheduler;
    3012:	80 91 88 02 	lds	r24, 0x0288
    3016:	90 91 89 02 	lds	r25, 0x0289
}
    301a:	df 91       	pop	r29
    301c:	cf 91       	pop	r28
    301e:	1f 91       	pop	r17
    3020:	0f 91       	pop	r16
    3022:	ff 90       	pop	r15
    3024:	ef 90       	pop	r14
    3026:	08 95       	ret

00003028 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	2a 97       	sbiw	r28, 0x0a	; 10
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	4b 83       	std	Y+3, r20	; 0x03
    3046:	5c 83       	std	Y+4, r21	; 0x04
    3048:	6d 83       	std	Y+5, r22	; 0x05
    304a:	7e 83       	std	Y+6, r23	; 0x06
    304c:	38 87       	std	Y+8, r19	; 0x08
    304e:	2f 83       	std	Y+7, r18	; 0x07
    3050:	1a 87       	std	Y+10, r17	; 0x0a
    3052:	09 87       	std	Y+9, r16	; 0x09
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    3054:	8f 81       	ldd	r24, Y+7	; 0x07
    3056:	98 85       	ldd	r25, Y+8	; 0x08
    3058:	9c 01       	movw	r18, r24
    305a:	44 27       	eor	r20, r20
    305c:	37 fd       	sbrc	r19, 7
    305e:	40 95       	com	r20
    3060:	54 2f       	mov	r21, r20
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	ad 81       	ldd	r26, Y+5	; 0x05
    3068:	be 81       	ldd	r27, Y+6	; 0x06
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__udivmodsi4>
    3072:	da 01       	movw	r26, r20
    3074:	c9 01       	movw	r24, r18
    3076:	29 85       	ldd	r18, Y+9	; 0x09
    3078:	3a 85       	ldd	r19, Y+10	; 0x0a
    307a:	44 27       	eor	r20, r20
    307c:	37 fd       	sbrc	r19, 7
    307e:	40 95       	com	r20
    3080:	54 2f       	mov	r21, r20
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__udivmodsi4>
    308a:	da 01       	movw	r26, r20
    308c:	c9 01       	movw	r24, r18
    308e:	9c 01       	movw	r18, r24
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	9a 81       	ldd	r25, Y+2	; 0x02
    3094:	fc 01       	movw	r30, r24
    3096:	37 8b       	std	Z+23, r19	; 0x17
    3098:	26 8b       	std	Z+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	fc 01       	movw	r30, r24
    30a0:	26 89       	ldd	r18, Z+22	; 0x16
    30a2:	37 89       	ldd	r19, Z+23	; 0x17
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	fc 01       	movw	r30, r24
    30aa:	37 8b       	std	Z+23, r19	; 0x17
    30ac:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescaler;
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	2f 81       	ldd	r18, Y+7	; 0x07
    30b4:	38 85       	ldd	r19, Y+8	; 0x08
    30b6:	fc 01       	movw	r30, r24
    30b8:	31 8f       	std	Z+25, r19	; 0x19
    30ba:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	fc 01       	movw	r30, r24
    30c2:	15 8a       	std	Z+21, r1	; 0x15
    30c4:	14 8a       	std	Z+20, r1	; 0x14
}
    30c6:	2a 96       	adiw	r28, 0x0a	; 10
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	f8 94       	cli
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	1f 91       	pop	r17
    30d8:	0f 91       	pop	r16
    30da:	08 95       	ret

000030dc <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    30e2:	1f 92       	push	r1
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	9a 83       	std	Y+2, r25	; 0x02
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	7c 83       	std	Y+4, r23	; 0x04
    30ee:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	9a 81       	ldd	r25, Y+2	; 0x02
    30f4:	fc 01       	movw	r30, r24
    30f6:	84 89       	ldd	r24, Z+20	; 0x14
    30f8:	95 89       	ldd	r25, Z+21	; 0x15
    30fa:	8a 30       	cpi	r24, 0x0A	; 10
    30fc:	91 05       	cpc	r25, r1
    30fe:	04 f5       	brge	.+64     	; 0x3140 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	9a 81       	ldd	r25, Y+2	; 0x02
    3104:	fc 01       	movw	r30, r24
    3106:	84 89       	ldd	r24, Z+20	; 0x14
    3108:	95 89       	ldd	r25, Z+21	; 0x15
    310a:	29 81       	ldd	r18, Y+1	; 0x01
    310c:	3a 81       	ldd	r19, Y+2	; 0x02
    310e:	88 0f       	add	r24, r24
    3110:	99 1f       	adc	r25, r25
    3112:	82 0f       	add	r24, r18
    3114:	93 1f       	adc	r25, r19
    3116:	2b 81       	ldd	r18, Y+3	; 0x03
    3118:	3c 81       	ldd	r19, Y+4	; 0x04
    311a:	fc 01       	movw	r30, r24
    311c:	31 83       	std	Z+1, r19	; 0x01
    311e:	20 83       	st	Z, r18
		numOfTasks++;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	9a 81       	ldd	r25, Y+2	; 0x02
    3124:	fc 01       	movw	r30, r24
    3126:	84 89       	ldd	r24, Z+20	; 0x14
    3128:	95 89       	ldd	r25, Z+21	; 0x15
    312a:	9c 01       	movw	r18, r24
    312c:	2f 5f       	subi	r18, 0xFF	; 255
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	fc 01       	movw	r30, r24
    3136:	35 8b       	std	Z+21, r19	; 0x15
    3138:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    3140:	8f ef       	ldi	r24, 0xFF	; 255
    3142:	9f ef       	ldi	r25, 0xFF	; 255
}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	08 95       	ret

00003152 <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	00 d0       	rcall	.+0      	; 0x3158 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    3158:	1f 92       	push	r1
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	9c 83       	std	Y+4, r25	; 0x04
    3160:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    3162:	1a 82       	std	Y+2, r1	; 0x02
    3164:	19 82       	std	Y+1, r1	; 0x01
    3166:	24 c0       	rjmp	.+72     	; 0x31b0 <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    3168:	2b 81       	ldd	r18, Y+3	; 0x03
    316a:	3c 81       	ldd	r19, Y+4	; 0x04
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	9a 81       	ldd	r25, Y+2	; 0x02
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	82 0f       	add	r24, r18
    3176:	93 1f       	adc	r25, r19
    3178:	fc 01       	movw	r30, r24
    317a:	80 81       	ld	r24, Z
    317c:	91 81       	ldd	r25, Z+1	; 0x01
    317e:	fc 01       	movw	r30, r24
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	06 96       	adiw	r24, 0x06	; 6
    3186:	fc 01       	movw	r30, r24
    3188:	20 81       	ld	r18, Z
    318a:	31 81       	ldd	r19, Z+1	; 0x01
    318c:	4b 81       	ldd	r20, Y+3	; 0x03
    318e:	5c 81       	ldd	r21, Y+4	; 0x04
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	9a 81       	ldd	r25, Y+2	; 0x02
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	84 0f       	add	r24, r20
    319a:	95 1f       	adc	r25, r21
    319c:	fc 01       	movw	r30, r24
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	f9 01       	movw	r30, r18
    31a4:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	fc 01       	movw	r30, r24
    31b6:	24 89       	ldd	r18, Z+20	; 0x14
    31b8:	35 89       	ldd	r19, Z+21	; 0x15
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	82 17       	cp	r24, r18
    31c2:	93 07       	cpc	r25, r19
    31c4:	0c f0       	brlt	.+2      	; 0x31c8 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    31c6:	40 e0       	ldi	r20, 0x00	; 0
    31c8:	44 23       	and	r20, r20
    31ca:	71 f6       	brne	.-100    	; 0x3168 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    31cc:	88 e8       	ldi	r24, 0x88	; 136
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	2b 81       	ldd	r18, Y+3	; 0x03
    31d2:	3c 81       	ldd	r19, Y+4	; 0x04
    31d4:	f9 01       	movw	r30, r18
    31d6:	26 89       	ldd	r18, Z+22	; 0x16
    31d8:	37 89       	ldd	r19, Z+23	; 0x17
    31da:	fc 01       	movw	r30, r24
    31dc:	31 83       	std	Z+1, r19	; 0x01
    31de:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    31e0:	81 e8       	ldi	r24, 0x81	; 129
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	21 e8       	ldi	r18, 0x81	; 129
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	f9 01       	movw	r30, r18
    31ea:	20 81       	ld	r18, Z
    31ec:	28 60       	ori	r18, 0x08	; 8
    31ee:	fc 01       	movw	r30, r24
    31f0:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    31f2:	8f e6       	ldi	r24, 0x6F	; 111
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	2f e6       	ldi	r18, 0x6F	; 111
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	f9 01       	movw	r30, r18
    31fc:	20 81       	ld	r18, Z
    31fe:	22 60       	ori	r18, 0x02	; 2
    3200:	fc 01       	movw	r30, r24
    3202:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    3204:	78 94       	sei
}
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	00 d0       	rcall	.+0      	; 0x321a <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    321a:	00 d0       	rcall	.+0      	; 0x321c <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    3224:	1c 82       	std	Y+4, r1	; 0x04
    3226:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    3228:	1a 82       	std	Y+2, r1	; 0x02
    322a:	19 82       	std	Y+1, r1	; 0x01
    322c:	2a c0       	rjmp	.+84     	; 0x3282 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
	{
		task = tasks[i];
    322e:	2d 81       	ldd	r18, Y+5	; 0x05
    3230:	3e 81       	ldd	r19, Y+6	; 0x06
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	9a 81       	ldd	r25, Y+2	; 0x02
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	82 0f       	add	r24, r18
    323c:	93 1f       	adc	r25, r19
    323e:	fc 01       	movw	r30, r24
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	9c 83       	std	Y+4, r25	; 0x04
    3246:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    3248:	8b 81       	ldd	r24, Y+3	; 0x03
    324a:	9c 81       	ldd	r25, Y+4	; 0x04
    324c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    3250:	88 23       	and	r24, r24
    3252:	91 f0       	breq	.+36     	; 0x3278 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x64>
		{
			task->setIsReadyToRun(false);
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	9c 81       	ldd	r25, Y+4	; 0x04
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	9c 81       	ldd	r25, Y+4	; 0x04
    3262:	fc 01       	movw	r30, r24
    3264:	80 81       	ld	r24, Z
    3266:	91 81       	ldd	r25, Z+1	; 0x01
    3268:	08 96       	adiw	r24, 0x08	; 8
    326a:	fc 01       	movw	r30, r24
    326c:	20 81       	ld	r18, Z
    326e:	31 81       	ldd	r19, Z+1	; 0x01
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	9c 81       	ldd	r25, Y+4	; 0x04
    3274:	f9 01       	movw	r30, r18
    3276:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	8d 81       	ldd	r24, Y+5	; 0x05
    3284:	9e 81       	ldd	r25, Y+6	; 0x06
    3286:	fc 01       	movw	r30, r24
    3288:	24 89       	ldd	r18, Z+20	; 0x14
    328a:	35 89       	ldd	r19, Z+21	; 0x15
    328c:	41 e0       	ldi	r20, 0x01	; 1
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	82 17       	cp	r24, r18
    3294:	93 07       	cpc	r25, r19
    3296:	0c f0       	brlt	.+2      	; 0x329a <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x86>
    3298:	40 e0       	ldi	r20, 0x00	; 0
    329a:	44 23       	and	r20, r20
    329c:	41 f6       	brne	.-112    	; 0x322e <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
	}*/
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    329e:	83 e5       	ldi	r24, 0x53	; 83
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	23 e5       	ldi	r18, 0x53	; 83
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	f9 01       	movw	r30, r18
    32a8:	20 81       	ld	r18, Z
    32aa:	21 7f       	andi	r18, 0xF1	; 241
    32ac:	fc 01       	movw	r30, r24
    32ae:	20 83       	st	Z, r18
	sleep_mode();
    32b0:	83 e5       	ldi	r24, 0x53	; 83
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	23 e5       	ldi	r18, 0x53	; 83
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	f9 01       	movw	r30, r18
    32ba:	20 81       	ld	r18, Z
    32bc:	21 60       	ori	r18, 0x01	; 1
    32be:	fc 01       	movw	r30, r24
    32c0:	20 83       	st	Z, r18
    32c2:	88 95       	sleep
    32c4:	83 e5       	ldi	r24, 0x53	; 83
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	23 e5       	ldi	r18, 0x53	; 83
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	f9 01       	movw	r30, r18
    32ce:	20 81       	ld	r18, Z
    32d0:	2e 7f       	andi	r18, 0xFE	; 254
    32d2:	fc 01       	movw	r30, r24
    32d4:	20 83       	st	Z, r18
}
    32d6:	26 96       	adiw	r28, 0x06	; 6
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	08 95       	ret

000032e8 <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	1f 92       	push	r1
    32ee:	1f 92       	push	r1
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	9a 83       	std	Y+2, r25	; 0x02
    32f6:	89 83       	std	Y+1, r24	; 0x01
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	fc 01       	movw	r30, r24
    32fe:	80 8d       	ldd	r24, Z+24	; 0x18
    3300:	91 8d       	ldd	r25, Z+25	; 0x19
    3302:	80 34       	cpi	r24, 0x40	; 64
    3304:	91 05       	cpc	r25, r1
    3306:	39 f1       	breq	.+78     	; 0x3356 <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    3308:	81 34       	cpi	r24, 0x41	; 65
    330a:	91 05       	cpc	r25, r1
    330c:	3c f4       	brge	.+14     	; 0x331c <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    330e:	81 30       	cpi	r24, 0x01	; 1
    3310:	91 05       	cpc	r25, r1
    3312:	69 f0       	breq	.+26     	; 0x332e <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    3314:	88 30       	cpi	r24, 0x08	; 8
    3316:	91 05       	cpc	r25, r1
    3318:	a1 f0       	breq	.+40     	; 0x3342 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    331a:	3b c0       	rjmp	.+118    	; 0x3392 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    331c:	81 15       	cp	r24, r1
    331e:	f1 e0       	ldi	r31, 0x01	; 1
    3320:	9f 07       	cpc	r25, r31
    3322:	19 f1       	breq	.+70     	; 0x336a <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    3324:	81 15       	cp	r24, r1
    3326:	24 e0       	ldi	r18, 0x04	; 4
    3328:	92 07       	cpc	r25, r18
    332a:	49 f1       	breq	.+82     	; 0x337e <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    332c:	32 c0       	rjmp	.+100    	; 0x3392 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    332e:	81 e8       	ldi	r24, 0x81	; 129
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	21 e8       	ldi	r18, 0x81	; 129
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	f9 01       	movw	r30, r18
    3338:	20 81       	ld	r18, Z
    333a:	21 60       	ori	r18, 0x01	; 1
    333c:	fc 01       	movw	r30, r24
    333e:	20 83       	st	Z, r18
			break;
    3340:	31 c0       	rjmp	.+98     	; 0x33a4 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    3342:	81 e8       	ldi	r24, 0x81	; 129
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	21 e8       	ldi	r18, 0x81	; 129
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	f9 01       	movw	r30, r18
    334c:	20 81       	ld	r18, Z
    334e:	22 60       	ori	r18, 0x02	; 2
    3350:	fc 01       	movw	r30, r24
    3352:	20 83       	st	Z, r18
			break;
    3354:	27 c0       	rjmp	.+78     	; 0x33a4 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    3356:	81 e8       	ldi	r24, 0x81	; 129
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	21 e8       	ldi	r18, 0x81	; 129
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	f9 01       	movw	r30, r18
    3360:	20 81       	ld	r18, Z
    3362:	23 60       	ori	r18, 0x03	; 3
    3364:	fc 01       	movw	r30, r24
    3366:	20 83       	st	Z, r18
			break;
    3368:	1d c0       	rjmp	.+58     	; 0x33a4 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    336a:	81 e8       	ldi	r24, 0x81	; 129
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	21 e8       	ldi	r18, 0x81	; 129
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	f9 01       	movw	r30, r18
    3374:	20 81       	ld	r18, Z
    3376:	24 60       	ori	r18, 0x04	; 4
    3378:	fc 01       	movw	r30, r24
    337a:	20 83       	st	Z, r18
			break;
    337c:	13 c0       	rjmp	.+38     	; 0x33a4 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    337e:	81 e8       	ldi	r24, 0x81	; 129
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	21 e8       	ldi	r18, 0x81	; 129
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	f9 01       	movw	r30, r18
    3388:	20 81       	ld	r18, Z
    338a:	25 60       	ori	r18, 0x05	; 5
    338c:	fc 01       	movw	r30, r24
    338e:	20 83       	st	Z, r18
			break;
    3390:	09 c0       	rjmp	.+18     	; 0x33a4 <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    3392:	81 e8       	ldi	r24, 0x81	; 129
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	21 e8       	ldi	r18, 0x81	; 129
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	f9 01       	movw	r30, r18
    339c:	20 81       	ld	r18, Z
    339e:	21 60       	ori	r18, 0x01	; 1
    33a0:	fc 01       	movw	r30, r24
    33a2:	20 83       	st	Z, r18
	}
}
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	df 91       	pop	r29
    33aa:	cf 91       	pop	r28
    33ac:	08 95       	ret

000033ae <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    33ae:	1f 92       	push	r1
    33b0:	0f 92       	push	r0
    33b2:	00 90 5f 00 	lds	r0, 0x005F
    33b6:	0f 92       	push	r0
    33b8:	11 24       	eor	r1, r1
    33ba:	00 90 5b 00 	lds	r0, 0x005B
    33be:	0f 92       	push	r0
    33c0:	2f 93       	push	r18
    33c2:	3f 93       	push	r19
    33c4:	4f 93       	push	r20
    33c6:	5f 93       	push	r21
    33c8:	6f 93       	push	r22
    33ca:	7f 93       	push	r23
    33cc:	8f 93       	push	r24
    33ce:	9f 93       	push	r25
    33d0:	af 93       	push	r26
    33d2:	bf 93       	push	r27
    33d4:	ef 93       	push	r30
    33d6:	ff 93       	push	r31
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	00 d0       	rcall	.+0      	; 0x33de <__vector_17+0x30>
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <__vector_17+0x32>
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
	//TODO do we want to stop interrupts in this method?
	Scheduler *scheduler = Scheduler::getScheduler();
    33e4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    33e8:	9c 83       	std	Y+4, r25	; 0x04
    33ea:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    33ec:	1e 82       	std	Y+6, r1	; 0x06
    33ee:	1d 82       	std	Y+5, r1	; 0x05
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    33f0:	1a 82       	std	Y+2, r1	; 0x02
    33f2:	19 82       	std	Y+1, r1	; 0x01
    33f4:	33 c0       	rjmp	.+102    	; 0x345c <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    33f6:	8b 81       	ldd	r24, Y+3	; 0x03
    33f8:	9c 81       	ldd	r25, Y+4	; 0x04
    33fa:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    33fe:	9c 01       	movw	r18, r24
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	82 0f       	add	r24, r18
    340a:	93 1f       	adc	r25, r19
    340c:	fc 01       	movw	r30, r24
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	9e 81       	ldd	r25, Y+6	; 0x06
    341a:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <_ZN10helicopter5tasks4Task8getDelayEv>
    341e:	21 e0       	ldi	r18, 0x01	; 1
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	09 f0       	breq	.+2      	; 0x3426 <__vector_17+0x78>
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	22 23       	and	r18, r18
    3428:	81 f0       	breq	.+32     	; 0x344a <__vector_17+0x9c>
		{
			//Mark the task as ready to run
			task->setIsReadyToRun(true);
    342a:	8d 81       	ldd	r24, Y+5	; 0x05
    342c:	9e 81       	ldd	r25, Y+6	; 0x06
    342e:	61 e0       	ldi	r22, 0x01	; 1
    3430:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    3434:	8d 81       	ldd	r24, Y+5	; 0x05
    3436:	9e 81       	ldd	r25, Y+6	; 0x06
    3438:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <_ZN10helicopter5tasks4Task9getPeriodEv>
    343c:	9c 01       	movw	r18, r24
    343e:	8d 81       	ldd	r24, Y+5	; 0x05
    3440:	9e 81       	ldd	r25, Y+6	; 0x06
    3442:	b9 01       	movw	r22, r18
    3444:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <_ZN10helicopter5tasks4Task8setDelayEi>
    3448:	04 c0       	rjmp	.+8      	; 0x3452 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <_ZN10helicopter5tasks4Task11reduceDelayEv>
	
	Task *task = NULL;
	
	//iterate through all the tasks and decriment how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	9a 81       	ldd	r25, Y+2	; 0x02
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    3464:	9c 01       	movw	r18, r24
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	82 17       	cp	r24, r18
    346e:	93 07       	cpc	r25, r19
    3470:	0c f0       	brlt	.+2      	; 0x3474 <__vector_17+0xc6>
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	44 23       	and	r20, r20
    3476:	09 f0       	breq	.+2      	; 0x347a <__vector_17+0xcc>
    3478:	be cf       	rjmp	.-132    	; 0x33f6 <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    347a:	26 96       	adiw	r28, 0x06	; 6
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	de bf       	out	0x3e, r29	; 62
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	cd bf       	out	0x3d, r28	; 61
    3486:	df 91       	pop	r29
    3488:	cf 91       	pop	r28
    348a:	ff 91       	pop	r31
    348c:	ef 91       	pop	r30
    348e:	bf 91       	pop	r27
    3490:	af 91       	pop	r26
    3492:	9f 91       	pop	r25
    3494:	8f 91       	pop	r24
    3496:	7f 91       	pop	r23
    3498:	6f 91       	pop	r22
    349a:	5f 91       	pop	r21
    349c:	4f 91       	pop	r20
    349e:	3f 91       	pop	r19
    34a0:	2f 91       	pop	r18
    34a2:	0f 90       	pop	r0
    34a4:	00 92 5b 00 	sts	0x005B, r0
    34a8:	0f 90       	pop	r0
    34aa:	00 92 5f 00 	sts	0x005F, r0
    34ae:	0f 90       	pop	r0
    34b0:	1f 90       	pop	r1
    34b2:	18 95       	reti

000034b4 <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	1f 92       	push	r1
    34ba:	1f 92       	push	r1
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	9a 83       	std	Y+2, r25	; 0x02
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	0f 90       	pop	r0
    34c6:	0f 90       	pop	r0
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	08 95       	ret

000034ce <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDOuterLoopTask.h"

using namespace helicopter::tasks;

PIDOuterLoopTask::PIDOuterLoopTask (PIDController *pidController, int delay, int period) :
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	28 97       	sbiw	r28, 0x08	; 8
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	9a 83       	std	Y+2, r25	; 0x02
    34e4:	89 83       	std	Y+1, r24	; 0x01
    34e6:	7c 83       	std	Y+4, r23	; 0x04
    34e8:	6b 83       	std	Y+3, r22	; 0x03
    34ea:	5e 83       	std	Y+6, r21	; 0x06
    34ec:	4d 83       	std	Y+5, r20	; 0x05
    34ee:	38 87       	std	Y+8, r19	; 0x08
    34f0:	2f 83       	std	Y+7, r18	; 0x07
Task(delay, period),
pidController(pidController)
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	9a 81       	ldd	r25, Y+2	; 0x02
    34f6:	4f 81       	ldd	r20, Y+7	; 0x07
    34f8:	58 85       	ldd	r21, Y+8	; 0x08
    34fa:	2d 81       	ldd	r18, Y+5	; 0x05
    34fc:	3e 81       	ldd	r19, Y+6	; 0x06
    34fe:	b9 01       	movw	r22, r18
    3500:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <_ZN10helicopter5tasks4TaskC1Eii>
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	9a 81       	ldd	r25, Y+2	; 0x02
    3508:	24 e5       	ldi	r18, 0x54	; 84
    350a:	32 e0       	ldi	r19, 0x02	; 2
    350c:	fc 01       	movw	r30, r24
    350e:	31 83       	std	Z+1, r19	; 0x01
    3510:	20 83       	st	Z, r18
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	9a 81       	ldd	r25, Y+2	; 0x02
    3516:	2b 81       	ldd	r18, Y+3	; 0x03
    3518:	3c 81       	ldd	r19, Y+4	; 0x04
    351a:	fc 01       	movw	r30, r24
    351c:	30 87       	std	Z+8, r19	; 0x08
    351e:	27 83       	std	Z+7, r18	; 0x07
{
	
}
    3520:	28 96       	adiw	r28, 0x08	; 8
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	08 95       	ret

00003532 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>:

void PIDOuterLoopTask::runTaskImpl()
{
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	1f 92       	push	r1
    3538:	1f 92       	push	r1
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	9a 83       	std	Y+2, r25	; 0x02
    3540:	89 83       	std	Y+1, r24	; 0x01
	pidController->tailRotorCollectiveOuterLoopUpdate();
    3542:	89 81       	ldd	r24, Y+1	; 0x01
    3544:	9a 81       	ldd	r25, Y+2	; 0x02
    3546:	fc 01       	movw	r30, r24
    3548:	87 81       	ldd	r24, Z+7	; 0x07
    354a:	90 85       	ldd	r25, Z+8	; 0x08
    354c:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>
}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	08 95       	ret

0000355a <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDOuterLoopTask : public Task
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	1f 92       	push	r1
    3560:	1f 92       	push	r1
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	9a 83       	std	Y+2, r25	; 0x02
    3568:	89 83       	std	Y+1, r24	; 0x01
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	9a 81       	ldd	r25, Y+2	; 0x02
    356e:	24 e5       	ldi	r18, 0x54	; 84
    3570:	32 e0       	ldi	r19, 0x02	; 2
    3572:	fc 01       	movw	r30, r24
    3574:	31 83       	std	Z+1, r19	; 0x01
    3576:	20 83       	st	Z, r18
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN10helicopter5tasks4TaskD1Ev>
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	81 70       	andi	r24, 0x01	; 1
    3586:	99 27       	eor	r25, r25
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	21 f0       	breq	.+8      	; 0x3594 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev+0x3a>
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
    3590:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	08 95       	ret

0000359e <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>:
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	1f 92       	push	r1
    35a4:	1f 92       	push	r1
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	9a 81       	ldd	r25, Y+2	; 0x02
    35b2:	0e 94 ad 1a 	call	0x355a	; 0x355a <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	df 91       	pop	r29
    35c4:	cf 91       	pop	r28
    35c6:	08 95       	ret

000035c8 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>:
			
				/**
				 * Magnetic heading variables in the x y and z directions.
				 */
				
				int MagX() const { return magX; }
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	1f 92       	push	r1
    35ce:	1f 92       	push	r1
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	fc 01       	movw	r30, r24
    35de:	85 81       	ldd	r24, Z+5	; 0x05
    35e0:	96 81       	ldd	r25, Z+6	; 0x06
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	08 95       	ret

000035ec <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>:
				void MagX(int val) { magX = val; }
			
				int MagY() const { return magY; }
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	1f 92       	push	r1
    35f2:	1f 92       	push	r1
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3600:	fc 01       	movw	r30, r24
    3602:	87 81       	ldd	r24, Z+7	; 0x07
    3604:	90 85       	ldd	r25, Z+8	; 0x08
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	08 95       	ret

00003610 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>:
				void MagY(int val) { magY = val; }
			
				int MagZ() const { return magZ; }
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	1f 92       	push	r1
    3616:	1f 92       	push	r1
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	9a 83       	std	Y+2, r25	; 0x02
    361e:	89 83       	std	Y+1, r24	; 0x01
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	9a 81       	ldd	r25, Y+2	; 0x02
    3624:	fc 01       	movw	r30, r24
    3626:	81 85       	ldd	r24, Z+9	; 0x09
    3628:	92 85       	ldd	r25, Z+10	; 0x0a
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	08 95       	ret

00003634 <_ZNK10helicopter8messages22SystemTelemetryMessage6MagYawEv>:
				void MagZ(int val) { magZ = val; }
					
				unsigned int MagYaw() const { return magYaw; }
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	1f 92       	push	r1
    363a:	1f 92       	push	r1
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	9a 81       	ldd	r25, Y+2	; 0x02
    3648:	fc 01       	movw	r30, r24
    364a:	83 85       	ldd	r24, Z+11	; 0x0b
    364c:	94 85       	ldd	r25, Z+12	; 0x0c
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	08 95       	ret

00003658 <_ZNK10helicopter8messages22SystemTelemetryMessage27YawVelocityDegreesPerSecondEv>:
				void MagYaw(unsigned int val) { magYaw = val; }
					
				int YawVelocityDegreesPerSecond() const { return yawVelocityDegreesPerSecond; }
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	1f 92       	push	r1
    365e:	1f 92       	push	r1
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
    3664:	9a 83       	std	Y+2, r25	; 0x02
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	9a 81       	ldd	r25, Y+2	; 0x02
    366c:	fc 01       	movw	r30, r24
    366e:	85 85       	ldd	r24, Z+13	; 0x0d
    3670:	96 85       	ldd	r25, Z+14	; 0x0e
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	df 91       	pop	r29
    3678:	cf 91       	pop	r28
    367a:	08 95       	ret

0000367c <_ZN10helicopter5model11SystemModel7RawMagXEi>:
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			
			int RawMagX() const { return rawMagX; }
			void RawMagX(int val) { rawMagX = val; }
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	00 d0       	rcall	.+0      	; 0x3682 <_ZN10helicopter5model11SystemModel7RawMagXEi+0x6>
    3682:	1f 92       	push	r1
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
    3688:	9a 83       	std	Y+2, r25	; 0x02
    368a:	89 83       	std	Y+1, r24	; 0x01
    368c:	7c 83       	std	Y+4, r23	; 0x04
    368e:	6b 83       	std	Y+3, r22	; 0x03
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	2b 81       	ldd	r18, Y+3	; 0x03
    3696:	3c 81       	ldd	r19, Y+4	; 0x04
    3698:	fc 01       	movw	r30, r24
    369a:	31 83       	std	Z+1, r19	; 0x01
    369c:	20 83       	st	Z, r18
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	08 95       	ret

000036ac <_ZN10helicopter5model11SystemModel7RawMagYEi>:
			
			int RawMagY() const { return rawMagY; }
			void RawMagY(int val) { rawMagY = val; }
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	00 d0       	rcall	.+0      	; 0x36b2 <_ZN10helicopter5model11SystemModel7RawMagYEi+0x6>
    36b2:	1f 92       	push	r1
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	9a 83       	std	Y+2, r25	; 0x02
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	7c 83       	std	Y+4, r23	; 0x04
    36be:	6b 83       	std	Y+3, r22	; 0x03
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	9a 81       	ldd	r25, Y+2	; 0x02
    36c4:	2b 81       	ldd	r18, Y+3	; 0x03
    36c6:	3c 81       	ldd	r19, Y+4	; 0x04
    36c8:	fc 01       	movw	r30, r24
    36ca:	33 83       	std	Z+3, r19	; 0x03
    36cc:	22 83       	std	Z+2, r18	; 0x02
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	08 95       	ret

000036dc <_ZN10helicopter5model11SystemModel7RawMagZEi>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <_ZN10helicopter5model11SystemModel7RawMagZEi+0x6>
    36e2:	1f 92       	push	r1
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	9a 83       	std	Y+2, r25	; 0x02
    36ea:	89 83       	std	Y+1, r24	; 0x01
    36ec:	7c 83       	std	Y+4, r23	; 0x04
    36ee:	6b 83       	std	Y+3, r22	; 0x03
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	2b 81       	ldd	r18, Y+3	; 0x03
    36f6:	3c 81       	ldd	r19, Y+4	; 0x04
    36f8:	fc 01       	movw	r30, r24
    36fa:	35 83       	std	Z+5, r19	; 0x05
    36fc:	24 83       	std	Z+4, r18	; 0x04
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>:
				

			double MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(double val) { magYawDegrees = val; }	
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	00 d0       	rcall	.+0      	; 0x3712 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x6>
    3712:	00 d0       	rcall	.+0      	; 0x3714 <_ZN10helicopter5model11SystemModel13MagYawDegreesEd+0x8>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	89 83       	std	Y+1, r24	; 0x01
    371c:	4b 83       	std	Y+3, r20	; 0x03
    371e:	5c 83       	std	Y+4, r21	; 0x04
    3720:	6d 83       	std	Y+5, r22	; 0x05
    3722:	7e 83       	std	Y+6, r23	; 0x06
    3724:	29 81       	ldd	r18, Y+1	; 0x01
    3726:	3a 81       	ldd	r19, Y+2	; 0x02
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	9c 81       	ldd	r25, Y+4	; 0x04
    372c:	ad 81       	ldd	r26, Y+5	; 0x05
    372e:	be 81       	ldd	r27, Y+6	; 0x06
    3730:	f9 01       	movw	r30, r18
    3732:	86 83       	std	Z+6, r24	; 0x06
    3734:	97 83       	std	Z+7, r25	; 0x07
    3736:	a0 87       	std	Z+8, r26	; 0x08
    3738:	b1 87       	std	Z+9, r27	; 0x09
    373a:	26 96       	adiw	r28, 0x06	; 6
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	08 95       	ret

0000374c <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>:
				
			double YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(double val) { yawControlBeforeServoLimitsAdjustment = val;}
				
			double YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(double val) { yawVelocityDegreesPerSecond = val;}
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	00 d0       	rcall	.+0      	; 0x3752 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x6>
    3752:	00 d0       	rcall	.+0      	; 0x3754 <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd+0x8>
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	9a 83       	std	Y+2, r25	; 0x02
    375a:	89 83       	std	Y+1, r24	; 0x01
    375c:	4b 83       	std	Y+3, r20	; 0x03
    375e:	5c 83       	std	Y+4, r21	; 0x04
    3760:	6d 83       	std	Y+5, r22	; 0x05
    3762:	7e 83       	std	Y+6, r23	; 0x06
    3764:	29 81       	ldd	r18, Y+1	; 0x01
    3766:	3a 81       	ldd	r19, Y+2	; 0x02
    3768:	8b 81       	ldd	r24, Y+3	; 0x03
    376a:	9c 81       	ldd	r25, Y+4	; 0x04
    376c:	ad 81       	ldd	r26, Y+5	; 0x05
    376e:	be 81       	ldd	r27, Y+6	; 0x06
    3770:	f9 01       	movw	r30, r18
    3772:	86 8b       	std	Z+22, r24	; 0x16
    3774:	97 8b       	std	Z+23, r25	; 0x17
    3776:	a0 8f       	std	Z+24, r26	; 0x18
    3778:	b1 8f       	std	Z+25, r27	; 0x19
    377a:	26 96       	adiw	r28, 0x06	; 6
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	de bf       	out	0x3e, r29	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	cd bf       	out	0x3d, r28	; 61
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <_ZN10helicopter5model11SystemModel8TimeoutsEi>:
			double YawDerivativeError() const {return yawDerivativeError;}
			void YawDerivativeError(double val) { yawDerivativeError = val;}								
																							
						
			int Timeouts() const {return timeouts; }
			void Timeouts(int val) { timeouts = val; }
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	00 d0       	rcall	.+0      	; 0x3792 <_ZN10helicopter5model11SystemModel8TimeoutsEi+0x6>
    3792:	1f 92       	push	r1
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	9a 83       	std	Y+2, r25	; 0x02
    379a:	89 83       	std	Y+1, r24	; 0x01
    379c:	7c 83       	std	Y+4, r23	; 0x04
    379e:	6b 83       	std	Y+3, r22	; 0x03
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	2b 81       	ldd	r18, Y+3	; 0x03
    37a6:	3c 81       	ldd	r19, Y+4	; 0x04
    37a8:	fc 01       	movw	r30, r24
    37aa:	33 a7       	std	Z+43, r19	; 0x2b
    37ac:	22 a7       	std	Z+42, r18	; 0x2a
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	08 95       	ret

000037bc <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>:
			
			int UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
			void UnrecognizedMsgTypes(int val) { unrecognizedMsgTypes = val; }
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi+0x6>
    37c2:	1f 92       	push	r1
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
    37c8:	9a 83       	std	Y+2, r25	; 0x02
    37ca:	89 83       	std	Y+1, r24	; 0x01
    37cc:	7c 83       	std	Y+4, r23	; 0x04
    37ce:	6b 83       	std	Y+3, r22	; 0x03
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	2b 81       	ldd	r18, Y+3	; 0x03
    37d6:	3c 81       	ldd	r19, Y+4	; 0x04
    37d8:	fc 01       	movw	r30, r24
    37da:	35 a7       	std	Z+45, r19	; 0x2d
    37dc:	24 a7       	std	Z+44, r18	; 0x2c
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	08 95       	ret

000037ec <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>:
			
			int ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(int val) { checksumErrors = val; }
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	00 d0       	rcall	.+0      	; 0x37f2 <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi+0x6>
    37f2:	1f 92       	push	r1
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	9a 83       	std	Y+2, r25	; 0x02
    37fa:	89 83       	std	Y+1, r24	; 0x01
    37fc:	7c 83       	std	Y+4, r23	; 0x04
    37fe:	6b 83       	std	Y+3, r22	; 0x03
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	9a 81       	ldd	r25, Y+2	; 0x02
    3804:	2b 81       	ldd	r18, Y+3	; 0x03
    3806:	3c 81       	ldd	r19, Y+4	; 0x04
    3808:	fc 01       	movw	r30, r24
    380a:	37 a7       	std	Z+47, r19	; 0x2f
    380c:	26 a7       	std	Z+46, r18	; 0x2e
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	df 91       	pop	r29
    3818:	cf 91       	pop	r28
    381a:	08 95       	ret

0000381c <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	2a 97       	sbiw	r28, 0x0a	; 10
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
    3834:	9a 83       	std	Y+2, r25	; 0x02
    3836:	89 83       	std	Y+1, r24	; 0x01
    3838:	7c 83       	std	Y+4, r23	; 0x04
    383a:	6b 83       	std	Y+3, r22	; 0x03
    383c:	5e 83       	std	Y+6, r21	; 0x06
    383e:	4d 83       	std	Y+5, r20	; 0x05
    3840:	38 87       	std	Y+8, r19	; 0x08
    3842:	2f 83       	std	Y+7, r18	; 0x07
    3844:	1a 87       	std	Y+10, r17	; 0x0a
    3846:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	9a 81       	ldd	r25, Y+2	; 0x02
    384c:	49 85       	ldd	r20, Y+9	; 0x09
    384e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3850:	2f 81       	ldd	r18, Y+7	; 0x07
    3852:	38 85       	ldd	r19, Y+8	; 0x08
    3854:	b9 01       	movw	r22, r18
    3856:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <_ZN10helicopter5tasks4TaskC1Eii>
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	22 e6       	ldi	r18, 0x62	; 98
    3860:	32 e0       	ldi	r19, 0x02	; 2
    3862:	fc 01       	movw	r30, r24
    3864:	31 83       	std	Z+1, r19	; 0x01
    3866:	20 83       	st	Z, r18
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	2b 81       	ldd	r18, Y+3	; 0x03
    386e:	3c 81       	ldd	r19, Y+4	; 0x04
    3870:	fc 01       	movw	r30, r24
    3872:	30 87       	std	Z+8, r19	; 0x08
    3874:	27 83       	std	Z+7, r18	; 0x07
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
    387a:	2d 81       	ldd	r18, Y+5	; 0x05
    387c:	3e 81       	ldd	r19, Y+6	; 0x06
    387e:	fc 01       	movw	r30, r24
    3880:	32 87       	std	Z+10, r19	; 0x0a
    3882:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    3884:	2a 96       	adiw	r28, 0x0a	; 10
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	df 91       	pop	r29
    3892:	cf 91       	pop	r28
    3894:	1f 91       	pop	r17
    3896:	0f 91       	pop	r16
    3898:	08 95       	ret

0000389a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:

void SimTelemetryTask::runTaskImpl() 
{
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	2d 97       	sbiw	r28, 0x0d	; 13
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	9d 87       	std	Y+13, r25	; 0x0d
    38b0:	8c 87       	std	Y+12, r24	; 0x0c
	
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
    38b2:	ce 01       	movw	r24, r28
    38b4:	05 96       	adiw	r24, 0x05	; 5
    38b6:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN10helicopter8messages11SyncMessageC1Ev>
	
	int status = radioInterface->transmit(&syncMsg);
    38ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    38bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    38be:	fc 01       	movw	r30, r24
    38c0:	87 81       	ldd	r24, Z+7	; 0x07
    38c2:	90 85       	ldd	r25, Z+8	; 0x08
    38c4:	9e 01       	movw	r18, r28
    38c6:	2b 5f       	subi	r18, 0xFB	; 251
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	b9 01       	movw	r22, r18
    38cc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    38d0:	9a 83       	std	Y+2, r25	; 0x02
    38d2:	89 83       	std	Y+1, r24	; 0x01
	
	if (status == 0)
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	9a 81       	ldd	r25, Y+2	; 0x02
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	09 f0       	breq	.+2      	; 0x38de <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x44>
    38dc:	98 c0       	rjmp	.+304    	; 0x3a0e <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x174>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    38de:	1b 86       	std	Y+11, r1	; 0x0b
    38e0:	1a 86       	std	Y+10, r1	; 0x0a
	
		status = radioInterface->receive(message);
    38e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    38e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    38e6:	fc 01       	movw	r30, r24
    38e8:	87 81       	ldd	r24, Z+7	; 0x07
    38ea:	90 85       	ldd	r25, Z+8	; 0x08
    38ec:	9e 01       	movw	r18, r28
    38ee:	26 5f       	subi	r18, 0xF6	; 246
    38f0:	3f 4f       	sbci	r19, 0xFF	; 255
    38f2:	b9 01       	movw	r22, r18
    38f4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    38f8:	9a 83       	std	Y+2, r25	; 0x02
    38fa:	89 83       	std	Y+1, r24	; 0x01
	
		if (status == 0 && message != NULL)
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	09 f0       	breq	.+2      	; 0x3906 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x6c>
    3904:	84 c0       	rjmp	.+264    	; 0x3a0e <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x174>
    3906:	8a 85       	ldd	r24, Y+10	; 0x0a
    3908:	9b 85       	ldd	r25, Y+11	; 0x0b
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	09 f4       	brne	.+2      	; 0x3910 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x76>
    390e:	7f c0       	rjmp	.+254    	; 0x3a0e <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x174>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    3910:	8a 85       	ldd	r24, Y+10	; 0x0a
    3912:	9b 85       	ldd	r25, Y+11	; 0x0b
    3914:	9c 83       	std	Y+4, r25	; 0x04
    3916:	8b 83       	std	Y+3, r24	; 0x03
			
			//Update the model using the new data received from the simulator.
			model->RawMagX(telemMsg->MagX());
    3918:	8b 81       	ldd	r24, Y+3	; 0x03
    391a:	9c 81       	ldd	r25, Y+4	; 0x04
    391c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>
    3920:	9c 01       	movw	r18, r24
    3922:	8c 85       	ldd	r24, Y+12	; 0x0c
    3924:	9d 85       	ldd	r25, Y+13	; 0x0d
    3926:	fc 01       	movw	r30, r24
    3928:	81 85       	ldd	r24, Z+9	; 0x09
    392a:	92 85       	ldd	r25, Z+10	; 0x0a
    392c:	b9 01       	movw	r22, r18
    392e:	0e 94 3e 1b 	call	0x367c	; 0x367c <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(telemMsg->MagY());
    3932:	8b 81       	ldd	r24, Y+3	; 0x03
    3934:	9c 81       	ldd	r25, Y+4	; 0x04
    3936:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>
    393a:	9c 01       	movw	r18, r24
    393c:	8c 85       	ldd	r24, Y+12	; 0x0c
    393e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3940:	fc 01       	movw	r30, r24
    3942:	81 85       	ldd	r24, Z+9	; 0x09
    3944:	92 85       	ldd	r25, Z+10	; 0x0a
    3946:	b9 01       	movw	r22, r18
    3948:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(telemMsg->MagZ());
    394c:	8b 81       	ldd	r24, Y+3	; 0x03
    394e:	9c 81       	ldd	r25, Y+4	; 0x04
    3950:	0e 94 08 1b 	call	0x3610	; 0x3610 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>
    3954:	9c 01       	movw	r18, r24
    3956:	8c 85       	ldd	r24, Y+12	; 0x0c
    3958:	9d 85       	ldd	r25, Y+13	; 0x0d
    395a:	fc 01       	movw	r30, r24
    395c:	81 85       	ldd	r24, Z+9	; 0x09
    395e:	92 85       	ldd	r25, Z+10	; 0x0a
    3960:	b9 01       	movw	r22, r18
    3962:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN10helicopter5model11SystemModel7RawMagZEi>
			
			model->MagYawDegrees(telemMsg->MagYaw() / 100.0d);
    3966:	8b 81       	ldd	r24, Y+3	; 0x03
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZNK10helicopter8messages22SystemTelemetryMessage6MagYawEv>
    396e:	cc 01       	movw	r24, r24
    3970:	a0 e0       	ldi	r26, 0x00	; 0
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	bc 01       	movw	r22, r24
    3976:	cd 01       	movw	r24, r26
    3978:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__floatunsisf>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	48 ec       	ldi	r20, 0xC8	; 200
    3986:	52 e4       	ldi	r21, 0x42	; 66
    3988:	bc 01       	movw	r22, r24
    398a:	cd 01       	movw	r24, r26
    398c:	0e 94 43 20 	call	0x4086	; 0x4086 <__divsf3>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	2c 85       	ldd	r18, Y+12	; 0x0c
    3996:	3d 85       	ldd	r19, Y+13	; 0x0d
    3998:	f9 01       	movw	r30, r18
    399a:	21 85       	ldd	r18, Z+9	; 0x09
    399c:	32 85       	ldd	r19, Z+10	; 0x0a
    399e:	ac 01       	movw	r20, r24
    39a0:	bd 01       	movw	r22, r26
    39a2:	c9 01       	movw	r24, r18
    39a4:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN10helicopter5model11SystemModel13MagYawDegreesEd>
			model->YawVelocityDegreesPerSecond(telemMsg->YawVelocityDegreesPerSecond() / 100.0d);
    39a8:	8b 81       	ldd	r24, Y+3	; 0x03
    39aa:	9c 81       	ldd	r25, Y+4	; 0x04
    39ac:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZNK10helicopter8messages22SystemTelemetryMessage27YawVelocityDegreesPerSecondEv>
    39b0:	aa 27       	eor	r26, r26
    39b2:	97 fd       	sbrc	r25, 7
    39b4:	a0 95       	com	r26
    39b6:	ba 2f       	mov	r27, r26
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	48 ec       	ldi	r20, 0xC8	; 200
    39ca:	52 e4       	ldi	r21, 0x42	; 66
    39cc:	bc 01       	movw	r22, r24
    39ce:	cd 01       	movw	r24, r26
    39d0:	0e 94 43 20 	call	0x4086	; 0x4086 <__divsf3>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    39da:	3d 85       	ldd	r19, Y+13	; 0x0d
    39dc:	f9 01       	movw	r30, r18
    39de:	21 85       	ldd	r18, Z+9	; 0x09
    39e0:	32 85       	ldd	r19, Z+10	; 0x0a
    39e2:	ac 01       	movw	r20, r24
    39e4:	bd 01       	movw	r22, r26
    39e6:	c9 01       	movw	r24, r18
    39e8:	0e 94 a6 1b 	call	0x374c	; 0x374c <_ZN10helicopter5model11SystemModel27YawVelocityDegreesPerSecondEd>
		
			delete message;
    39ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    39ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	69 f0       	breq	.+26     	; 0x3a0e <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x174>
    39f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39f8:	fc 01       	movw	r30, r24
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	02 96       	adiw	r24, 0x02	; 2
    3a00:	fc 01       	movw	r30, r24
    3a02:	20 81       	ld	r18, Z
    3a04:	31 81       	ldd	r19, Z+1	; 0x01
    3a06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a08:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a0a:	f9 01       	movw	r30, r18
    3a0c:	19 95       	eicall
		}
	}
	
	//Update instrumentation fields
	switch (status)
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	9a 81       	ldd	r25, Y+2	; 0x02
    3a12:	8e 3f       	cpi	r24, 0xFE	; 254
    3a14:	ff ef       	ldi	r31, 0xFF	; 255
    3a16:	9f 07       	cpc	r25, r31
    3a18:	19 f1       	breq	.+70     	; 0x3a60 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1c6>
    3a1a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a1c:	2f ef       	ldi	r18, 0xFF	; 255
    3a1e:	92 07       	cpc	r25, r18
    3a20:	2c f4       	brge	.+10     	; 0x3a2c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x192>
    3a22:	8d 3f       	cpi	r24, 0xFD	; 253
    3a24:	ef ef       	ldi	r30, 0xFF	; 255
    3a26:	9e 07       	cpc	r25, r30
    3a28:	71 f1       	breq	.+92     	; 0x3a86 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1ec>
    3a2a:	40 c0       	rjmp	.+128    	; 0x3aac <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x212>
    3a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a2e:	ff ef       	ldi	r31, 0xFF	; 255
    3a30:	9f 07       	cpc	r25, r31
    3a32:	19 f0       	breq	.+6      	; 0x3a3a <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x1a0>
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	d9 f1       	breq	.+118    	; 0x3aae <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x214>
    3a38:	39 c0       	rjmp	.+114    	; 0x3aac <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x212>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    3a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a3e:	fc 01       	movw	r30, r24
    3a40:	81 85       	ldd	r24, Z+9	; 0x09
    3a42:	92 85       	ldd	r25, Z+10	; 0x0a
    3a44:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZNK10helicopter5model11SystemModel8TimeoutsEv>
    3a48:	9c 01       	movw	r18, r24
    3a4a:	2f 5f       	subi	r18, 0xFF	; 255
    3a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a50:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a52:	fc 01       	movw	r30, r24
    3a54:	81 85       	ldd	r24, Z+9	; 0x09
    3a56:	92 85       	ldd	r25, Z+10	; 0x0a
    3a58:	b9 01       	movw	r22, r18
    3a5a:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN10helicopter5model11SystemModel8TimeoutsEi>
			break;
    3a5e:	28 c0       	rjmp	.+80     	; 0x3ab0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x216>
		case -2:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    3a60:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a62:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a64:	fc 01       	movw	r30, r24
    3a66:	81 85       	ldd	r24, Z+9	; 0x09
    3a68:	92 85       	ldd	r25, Z+10	; 0x0a
    3a6a:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZNK10helicopter5model11SystemModel20UnrecognizedMsgTypesEv>
    3a6e:	9c 01       	movw	r18, r24
    3a70:	2f 5f       	subi	r18, 0xFF	; 255
    3a72:	3f 4f       	sbci	r19, 0xFF	; 255
    3a74:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a76:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a78:	fc 01       	movw	r30, r24
    3a7a:	81 85       	ldd	r24, Z+9	; 0x09
    3a7c:	92 85       	ldd	r25, Z+10	; 0x0a
    3a7e:	b9 01       	movw	r22, r18
    3a80:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN10helicopter5model11SystemModel20UnrecognizedMsgTypesEi>
			break;
    3a84:	15 c0       	rjmp	.+42     	; 0x3ab0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x216>
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    3a86:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a88:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	81 85       	ldd	r24, Z+9	; 0x09
    3a8e:	92 85       	ldd	r25, Z+10	; 0x0a
    3a90:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZNK10helicopter5model11SystemModel14ChecksumErrorsEv>
    3a94:	9c 01       	movw	r18, r24
    3a96:	2f 5f       	subi	r18, 0xFF	; 255
    3a98:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a9c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	81 85       	ldd	r24, Z+9	; 0x09
    3aa2:	92 85       	ldd	r25, Z+10	; 0x0a
    3aa4:	b9 01       	movw	r22, r18
    3aa6:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <_ZN10helicopter5model11SystemModel14ChecksumErrorsEi>
		default:
			break;
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x216>
    3aac:	01 c0       	rjmp	.+2      	; 0x3ab0 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x216>
	
	//Update instrumentation fields
	switch (status)
	{
		case 0:
			break;
    3aae:	00 00       	nop
		case -3:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
		default:
			break;
		
	}
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	05 96       	adiw	r24, 0x05	; 5
    3ab4:	0e 94 49 11 	call	0x2292	; 0x2292 <_ZN10helicopter8messages11SyncMessageD1Ev>
}
    3ab8:	2d 96       	adiw	r28, 0x0d	; 13
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    3aca:	cf 93       	push	r28
    3acc:	df 93       	push	r29
    3ace:	1f 92       	push	r1
    3ad0:	1f 92       	push	r1
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	9a 83       	std	Y+2, r25	; 0x02
    3ad8:	89 83       	std	Y+1, r24	; 0x01
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ade:	22 e6       	ldi	r18, 0x62	; 98
    3ae0:	32 e0       	ldi	r19, 0x02	; 2
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	31 83       	std	Z+1, r19	; 0x01
    3ae6:	20 83       	st	Z, r18
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	9a 81       	ldd	r25, Y+2	; 0x02
    3aec:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN10helicopter5tasks4TaskD1Ev>
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	81 70       	andi	r24, 0x01	; 1
    3af6:	99 27       	eor	r25, r25
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	21 f0       	breq	.+8      	; 0x3b04 <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev+0x3a>
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	9a 81       	ldd	r25, Y+2	; 0x02
    3b00:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	08 95       	ret

00003b0e <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	1f 92       	push	r1
    3b14:	1f 92       	push	r1
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	9a 83       	std	Y+2, r25	; 0x02
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	9a 81       	ldd	r25, Y+2	; 0x02
    3b22:	0e 94 65 1d 	call	0x3aca	; 0x3aca <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2a:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	08 95       	ret

00003b38 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	1f 92       	push	r1
    3b3e:	1f 92       	push	r1
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	08 95       	ret

00003b52 <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    3b58:	00 d0       	rcall	.+0      	; 0x3b5a <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    3b5a:	cd b7       	in	r28, 0x3d	; 61
    3b5c:	de b7       	in	r29, 0x3e	; 62
    3b5e:	9a 83       	std	Y+2, r25	; 0x02
    3b60:	89 83       	std	Y+1, r24	; 0x01
    3b62:	7c 83       	std	Y+4, r23	; 0x04
    3b64:	6b 83       	std	Y+3, r22	; 0x03
    3b66:	5e 83       	std	Y+6, r21	; 0x06
    3b68:	4d 83       	std	Y+5, r20	; 0x05
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6e:	20 e7       	ldi	r18, 0x70	; 112
    3b70:	32 e0       	ldi	r19, 0x02	; 2
    3b72:	fc 01       	movw	r30, r24
    3b74:	31 83       	std	Z+1, r19	; 0x01
    3b76:	20 83       	st	Z, r18
{
	this->delay = delay;
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    3b80:	fc 01       	movw	r30, r24
    3b82:	33 83       	std	Z+3, r19	; 0x03
    3b84:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    3b8c:	3e 81       	ldd	r19, Y+6	; 0x06
    3b8e:	fc 01       	movw	r30, r24
    3b90:	35 83       	std	Z+5, r19	; 0x05
    3b92:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	9a 81       	ldd	r25, Y+2	; 0x02
    3b98:	fc 01       	movw	r30, r24
    3b9a:	16 82       	std	Z+6, r1	; 0x06
}
    3b9c:	26 96       	adiw	r28, 0x06	; 6
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	08 95       	ret

00003bae <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    3bae:	cf 93       	push	r28
    3bb0:	df 93       	push	r29
    3bb2:	1f 92       	push	r1
    3bb4:	1f 92       	push	r1
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	9a 83       	std	Y+2, r25	; 0x02
    3bbc:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    3bbe:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	fc 01       	movw	r30, r24
    3bcc:	20 81       	ld	r18, Z
    3bce:	31 81       	ldd	r19, Z+1	; 0x01
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd4:	f9 01       	movw	r30, r18
    3bd6:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    3bd8:	78 94       	sei
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	08 95       	ret

00003be4 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
    3bf0:	2a 97       	sbiw	r28, 0x0a	; 10
    3bf2:	0f b6       	in	r0, 0x3f	; 63
    3bf4:	f8 94       	cli
    3bf6:	de bf       	out	0x3e, r29	; 62
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	cd bf       	out	0x3d, r28	; 61
    3bfc:	9a 83       	std	Y+2, r25	; 0x02
    3bfe:	89 83       	std	Y+1, r24	; 0x01
    3c00:	7c 83       	std	Y+4, r23	; 0x04
    3c02:	6b 83       	std	Y+3, r22	; 0x03
    3c04:	5e 83       	std	Y+6, r21	; 0x06
    3c06:	4d 83       	std	Y+5, r20	; 0x05
    3c08:	38 87       	std	Y+8, r19	; 0x08
    3c0a:	2f 83       	std	Y+7, r18	; 0x07
    3c0c:	1a 87       	std	Y+10, r17	; 0x0a
    3c0e:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	9a 81       	ldd	r25, Y+2	; 0x02
    3c14:	49 85       	ldd	r20, Y+9	; 0x09
    3c16:	5a 85       	ldd	r21, Y+10	; 0x0a
    3c18:	2f 81       	ldd	r18, Y+7	; 0x07
    3c1a:	38 85       	ldd	r19, Y+8	; 0x08
    3c1c:	b9 01       	movw	r22, r18
    3c1e:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <_ZN10helicopter5tasks4TaskC1Eii>
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	2e e7       	ldi	r18, 0x7E	; 126
    3c28:	32 e0       	ldi	r19, 0x02	; 2
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	31 83       	std	Z+1, r19	; 0x01
    3c2e:	20 83       	st	Z, r18
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	9a 81       	ldd	r25, Y+2	; 0x02
    3c34:	2b 81       	ldd	r18, Y+3	; 0x03
    3c36:	3c 81       	ldd	r19, Y+4	; 0x04
    3c38:	fc 01       	movw	r30, r24
    3c3a:	30 87       	std	Z+8, r19	; 0x08
    3c3c:	27 83       	std	Z+7, r18	; 0x07
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	9a 81       	ldd	r25, Y+2	; 0x02
    3c42:	2d 81       	ldd	r18, Y+5	; 0x05
    3c44:	3e 81       	ldd	r19, Y+6	; 0x06
    3c46:	fc 01       	movw	r30, r24
    3c48:	32 87       	std	Z+10, r19	; 0x0a
    3c4a:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    3c4c:	2a 96       	adiw	r28, 0x0a	; 10
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	08 95       	ret

00003c62 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	00 d0       	rcall	.+0      	; 0x3c68 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    3c68:	1f 92       	push	r1
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	9c 83       	std	Y+4, r25	; 0x04
    3c70:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = model->CreateTelemetryMessage();
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	9c 81       	ldd	r25, Y+4	; 0x04
    3c76:	fc 01       	movw	r30, r24
    3c78:	81 85       	ldd	r24, Z+9	; 0x09
    3c7a:	92 85       	ldd	r25, Z+10	; 0x0a
    3c7c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>
    3c80:	9a 83       	std	Y+2, r25	; 0x02
    3c82:	89 83       	std	Y+1, r24	; 0x01
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    3c84:	8b 81       	ldd	r24, Y+3	; 0x03
    3c86:	9c 81       	ldd	r25, Y+4	; 0x04
    3c88:	fc 01       	movw	r30, r24
    3c8a:	87 81       	ldd	r24, Z+7	; 0x07
    3c8c:	90 85       	ldd	r25, Z+8	; 0x08
    3c8e:	29 81       	ldd	r18, Y+1	; 0x01
    3c90:	3a 81       	ldd	r19, Y+2	; 0x02
    3c92:	b9 01       	movw	r22, r18
    3c94:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	00 97       	sbiw	r24, 0x00	; 0
    3c9e:	69 f0       	breq	.+26     	; 0x3cba <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	02 96       	adiw	r24, 0x02	; 2
    3cac:	fc 01       	movw	r30, r24
    3cae:	20 81       	ld	r18, Z
    3cb0:	31 81       	ldd	r19, Z+1	; 0x01
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb6:	f9 01       	movw	r30, r18
    3cb8:	19 95       	eicall
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	df 91       	pop	r29
    3cc4:	cf 91       	pop	r28
    3cc6:	08 95       	ret

00003cc8 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	1f 92       	push	r1
    3cce:	1f 92       	push	r1
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	9a 83       	std	Y+2, r25	; 0x02
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	2e e7       	ldi	r18, 0x7E	; 126
    3cde:	32 e0       	ldi	r19, 0x02	; 2
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	31 83       	std	Z+1, r19	; 0x01
    3ce4:	20 83       	st	Z, r18
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN10helicopter5tasks4TaskD1Ev>
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	81 70       	andi	r24, 0x01	; 1
    3cf4:	99 27       	eor	r25, r25
    3cf6:	00 97       	sbiw	r24, 0x00	; 0
    3cf8:	21 f0       	breq	.+8      	; 0x3d02 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev+0x3a>
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfe:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

00003d0c <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	1f 92       	push	r1
    3d12:	1f 92       	push	r1
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	9a 83       	std	Y+2, r25	; 0x02
    3d1a:	89 83       	std	Y+1, r24	; 0x01
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d20:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
    3d26:	9a 81       	ldd	r25, Y+2	; 0x02
    3d28:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZdlPv>
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
    3d30:	df 91       	pop	r29
    3d32:	cf 91       	pop	r28
    3d34:	08 95       	ret

00003d36 <_Znwj>:
 *  Author: HP User
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
    3d36:	cf 93       	push	r28
    3d38:	df 93       	push	r29
    3d3a:	1f 92       	push	r1
    3d3c:	1f 92       	push	r1
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	9a 83       	std	Y+2, r25	; 0x02
    3d44:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4a:	0e 94 92 22 	call	0x4524	; 0x4524 <malloc>
}
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	df 91       	pop	r29
    3d54:	cf 91       	pop	r28
    3d56:	08 95       	ret

00003d58 <_ZdlPv>:

void operator delete(void * ptr)
{
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	1f 92       	push	r1
    3d5e:	1f 92       	push	r1
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	9a 83       	std	Y+2, r25	; 0x02
    3d66:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	21 f0       	breq	.+8      	; 0x3d78 <_ZdlPv+0x20>
	{
		free(ptr);
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	9a 81       	ldd	r25, Y+2	; 0x02
    3d74:	0e 94 2d 23 	call	0x465a	; 0x465a <free>
	}
}
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	08 95       	ret

00003d82 <_Znaj>:

void * operator new[](size_t size)
{
    3d82:	cf 93       	push	r28
    3d84:	df 93       	push	r29
    3d86:	1f 92       	push	r1
    3d88:	1f 92       	push	r1
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	9a 83       	std	Y+2, r25	; 0x02
    3d90:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	9a 81       	ldd	r25, Y+2	; 0x02
    3d96:	0e 94 92 22 	call	0x4524	; 0x4524 <malloc>
}
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	08 95       	ret

00003da4 <_ZdaPv>:

void operator delete[](void * ptr)
{
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	1f 92       	push	r1
    3daa:	1f 92       	push	r1
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
    3db0:	9a 83       	std	Y+2, r25	; 0x02
    3db2:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	9a 81       	ldd	r25, Y+2	; 0x02
    3db8:	00 97       	sbiw	r24, 0x00	; 0
    3dba:	21 f0       	breq	.+8      	; 0x3dc4 <_ZdaPv+0x20>
	{
		free(ptr);
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc0:	0e 94 2d 23 	call	0x465a	; 0x465a <free>
	}
	
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	08 95       	ret

00003dce <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    3dce:	0f 93       	push	r16
    3dd0:	1f 93       	push	r17
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	00 d0       	rcall	.+0      	; 0x3dd8 <_ZN10helicopter4util5Timer10startTimerEv+0xa>
    3dd8:	1f 92       	push	r1
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	9c 83       	std	Y+4, r25	; 0x04
    3de0:	8b 83       	std	Y+3, r24	; 0x03
	//stop timer in case it was already started.
	stopTimer();
    3de2:	8b 81       	ldd	r24, Y+3	; 0x03
    3de4:	9c 81       	ldd	r25, Y+4	; 0x04
    3de6:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
    3dea:	1a 82       	std	Y+2, r1	; 0x02
    3dec:	19 82       	std	Y+1, r1	; 0x01
	
	if (timeoutMilliseconds > 1000) 
    3dee:	8b 81       	ldd	r24, Y+3	; 0x03
    3df0:	9c 81       	ldd	r25, Y+4	; 0x04
    3df2:	fc 01       	movw	r30, r24
    3df4:	86 81       	ldd	r24, Z+6	; 0x06
    3df6:	97 81       	ldd	r25, Z+7	; 0x07
    3df8:	89 3e       	cpi	r24, 0xE9	; 233
    3dfa:	f3 e0       	ldi	r31, 0x03	; 3
    3dfc:	9f 07       	cpc	r25, r31
    3dfe:	2c f0       	brlt	.+10     	; 0x3e0a <_ZN10helicopter4util5Timer10startTimerEv+0x3c>
	{
		frequency = 1;
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	9a 83       	std	Y+2, r25	; 0x02
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	0d c0       	rjmp	.+26     	; 0x3e24 <_ZN10helicopter4util5Timer10startTimerEv+0x56>
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    3e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0e:	fc 01       	movw	r30, r24
    3e10:	26 81       	ldd	r18, Z+6	; 0x06
    3e12:	37 81       	ldd	r19, Z+7	; 0x07
    3e14:	88 ee       	ldi	r24, 0xE8	; 232
    3e16:	93 e0       	ldi	r25, 0x03	; 3
    3e18:	b9 01       	movw	r22, r18
    3e1a:	0e 94 48 22 	call	0x4490	; 0x4490 <__divmodhi4>
    3e1e:	9b 01       	movw	r18, r22
    3e20:	3a 83       	std	Y+2, r19	; 0x02
    3e22:	29 83       	std	Y+1, r18	; 0x01
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    3e24:	08 e9       	ldi	r16, 0x98	; 152
    3e26:	10 e0       	ldi	r17, 0x00	; 0
    3e28:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	80 81       	ld	r24, Z
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	a2 81       	ldd	r26, Z+2	; 0x02
    3e34:	b3 81       	ldd	r27, Z+3	; 0x03
    3e36:	2b 81       	ldd	r18, Y+3	; 0x03
    3e38:	3c 81       	ldd	r19, Y+4	; 0x04
    3e3a:	f9 01       	movw	r30, r18
    3e3c:	24 81       	ldd	r18, Z+4	; 0x04
    3e3e:	35 81       	ldd	r19, Z+5	; 0x05
    3e40:	44 27       	eor	r20, r20
    3e42:	37 fd       	sbrc	r19, 7
    3e44:	40 95       	com	r20
    3e46:	54 2f       	mov	r21, r20
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__udivmodsi4>
    3e50:	da 01       	movw	r26, r20
    3e52:	c9 01       	movw	r24, r18
    3e54:	29 81       	ldd	r18, Y+1	; 0x01
    3e56:	3a 81       	ldd	r19, Y+2	; 0x02
    3e58:	44 27       	eor	r20, r20
    3e5a:	37 fd       	sbrc	r19, 7
    3e5c:	40 95       	com	r20
    3e5e:	54 2f       	mov	r21, r20
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__udivmodsi4>
    3e68:	da 01       	movw	r26, r20
    3e6a:	c9 01       	movw	r24, r18
    3e6c:	f8 01       	movw	r30, r16
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	80 83       	st	Z, r24
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    3e72:	81 e9       	ldi	r24, 0x91	; 145
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	21 e9       	ldi	r18, 0x91	; 145
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	f9 01       	movw	r30, r18
    3e7c:	20 81       	ld	r18, Z
    3e7e:	28 60       	ori	r18, 0x08	; 8
    3e80:	fc 01       	movw	r30, r24
    3e82:	20 83       	st	Z, r18
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    3e84:	8b 81       	ldd	r24, Y+3	; 0x03
    3e86:	9c 81       	ldd	r25, Y+4	; 0x04
    3e88:	fc 01       	movw	r30, r24
    3e8a:	84 81       	ldd	r24, Z+4	; 0x04
    3e8c:	95 81       	ldd	r25, Z+5	; 0x05
    3e8e:	80 34       	cpi	r24, 0x40	; 64
    3e90:	91 05       	cpc	r25, r1
    3e92:	39 f1       	breq	.+78     	; 0x3ee2 <_ZN10helicopter4util5Timer10startTimerEv+0x114>
    3e94:	81 34       	cpi	r24, 0x41	; 65
    3e96:	91 05       	cpc	r25, r1
    3e98:	3c f4       	brge	.+14     	; 0x3ea8 <_ZN10helicopter4util5Timer10startTimerEv+0xda>
    3e9a:	81 30       	cpi	r24, 0x01	; 1
    3e9c:	91 05       	cpc	r25, r1
    3e9e:	69 f0       	breq	.+26     	; 0x3eba <_ZN10helicopter4util5Timer10startTimerEv+0xec>
    3ea0:	88 30       	cpi	r24, 0x08	; 8
    3ea2:	91 05       	cpc	r25, r1
    3ea4:	a1 f0       	breq	.+40     	; 0x3ece <_ZN10helicopter4util5Timer10startTimerEv+0x100>
    3ea6:	3b c0       	rjmp	.+118    	; 0x3f1e <_ZN10helicopter4util5Timer10startTimerEv+0x150>
    3ea8:	81 15       	cp	r24, r1
    3eaa:	f1 e0       	ldi	r31, 0x01	; 1
    3eac:	9f 07       	cpc	r25, r31
    3eae:	19 f1       	breq	.+70     	; 0x3ef6 <_ZN10helicopter4util5Timer10startTimerEv+0x128>
    3eb0:	81 15       	cp	r24, r1
    3eb2:	24 e0       	ldi	r18, 0x04	; 4
    3eb4:	92 07       	cpc	r25, r18
    3eb6:	49 f1       	breq	.+82     	; 0x3f0a <_ZN10helicopter4util5Timer10startTimerEv+0x13c>
    3eb8:	32 c0       	rjmp	.+100    	; 0x3f1e <_ZN10helicopter4util5Timer10startTimerEv+0x150>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    3eba:	81 e9       	ldi	r24, 0x91	; 145
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	21 e9       	ldi	r18, 0x91	; 145
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	f9 01       	movw	r30, r18
    3ec4:	20 81       	ld	r18, Z
    3ec6:	21 60       	ori	r18, 0x01	; 1
    3ec8:	fc 01       	movw	r30, r24
    3eca:	20 83       	st	Z, r18
		break;
    3ecc:	31 c0       	rjmp	.+98     	; 0x3f30 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    3ece:	81 e9       	ldi	r24, 0x91	; 145
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	21 e9       	ldi	r18, 0x91	; 145
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	f9 01       	movw	r30, r18
    3ed8:	20 81       	ld	r18, Z
    3eda:	22 60       	ori	r18, 0x02	; 2
    3edc:	fc 01       	movw	r30, r24
    3ede:	20 83       	st	Z, r18
		break;
    3ee0:	27 c0       	rjmp	.+78     	; 0x3f30 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    3ee2:	81 e9       	ldi	r24, 0x91	; 145
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	21 e9       	ldi	r18, 0x91	; 145
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	f9 01       	movw	r30, r18
    3eec:	20 81       	ld	r18, Z
    3eee:	23 60       	ori	r18, 0x03	; 3
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	20 83       	st	Z, r18
		break;
    3ef4:	1d c0       	rjmp	.+58     	; 0x3f30 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    3ef6:	81 e9       	ldi	r24, 0x91	; 145
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	21 e9       	ldi	r18, 0x91	; 145
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	f9 01       	movw	r30, r18
    3f00:	20 81       	ld	r18, Z
    3f02:	24 60       	ori	r18, 0x04	; 4
    3f04:	fc 01       	movw	r30, r24
    3f06:	20 83       	st	Z, r18
		break;
    3f08:	13 c0       	rjmp	.+38     	; 0x3f30 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    3f0a:	81 e9       	ldi	r24, 0x91	; 145
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	21 e9       	ldi	r18, 0x91	; 145
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	f9 01       	movw	r30, r18
    3f14:	20 81       	ld	r18, Z
    3f16:	25 60       	ori	r18, 0x05	; 5
    3f18:	fc 01       	movw	r30, r24
    3f1a:	20 83       	st	Z, r18
		break;
    3f1c:	09 c0       	rjmp	.+18     	; 0x3f30 <_ZN10helicopter4util5Timer10startTimerEv+0x162>
		default:
		TCCR3B |= NoPrescaling;
    3f1e:	81 e9       	ldi	r24, 0x91	; 145
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	21 e9       	ldi	r18, 0x91	; 145
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	f9 01       	movw	r30, r18
    3f28:	20 81       	ld	r18, Z
    3f2a:	21 60       	ori	r18, 0x01	; 1
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	20 83       	st	Z, r18
	}
}
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	0f 90       	pop	r0
    3f36:	0f 90       	pop	r0
    3f38:	df 91       	pop	r29
    3f3a:	cf 91       	pop	r28
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
    3f40:	08 95       	ret

00003f42 <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	1f 92       	push	r1
    3f48:	1f 92       	push	r1
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    3f4e:	9a 83       	std	Y+2, r25	; 0x02
    3f50:	89 83       	std	Y+1, r24	; 0x01
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    3f52:	88 e3       	ldi	r24, 0x38	; 56
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	fc 01       	movw	r30, r24
    3f58:	80 81       	ld	r24, Z
    3f5a:	88 2f       	mov	r24, r24
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	82 70       	andi	r24, 0x02	; 2
    3f60:	99 27       	eor	r25, r25
    3f62:	21 e0       	ldi	r18, 0x01	; 1
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	09 f4       	brne	.+2      	; 0x3f6a <_ZN10helicopter4util5Timer11hasTimedoutEv+0x28>
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	82 2f       	mov	r24, r18
}
    3f6c:	0f 90       	pop	r0
    3f6e:	0f 90       	pop	r0
    3f70:	df 91       	pop	r29
    3f72:	cf 91       	pop	r28
    3f74:	08 95       	ret

00003f76 <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
    3f76:	cf 93       	push	r28
    3f78:	df 93       	push	r29
    3f7a:	1f 92       	push	r1
    3f7c:	1f 92       	push	r1
    3f7e:	cd b7       	in	r28, 0x3d	; 61
    3f80:	de b7       	in	r29, 0x3e	; 62
    3f82:	9a 83       	std	Y+2, r25	; 0x02
    3f84:	89 83       	std	Y+1, r24	; 0x01
	//stop the timer
	TCCR3B = 0;
    3f86:	81 e9       	ldi	r24, 0x91	; 145
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	10 82       	st	Z, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    3f8e:	84 e9       	ldi	r24, 0x94	; 148
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	fc 01       	movw	r30, r24
    3f94:	11 82       	std	Z+1, r1	; 0x01
    3f96:	10 82       	st	Z, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    3f98:	88 e3       	ldi	r24, 0x38	; 56
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	28 e3       	ldi	r18, 0x38	; 56
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	f9 01       	movw	r30, r18
    3fa2:	20 81       	ld	r18, Z
    3fa4:	22 60       	ori	r18, 0x02	; 2
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	20 83       	st	Z, r18
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <__subsf3>:
    3fb4:	50 58       	subi	r21, 0x80	; 128

00003fb6 <__addsf3>:
    3fb6:	bb 27       	eor	r27, r27
    3fb8:	aa 27       	eor	r26, r26
    3fba:	0e d0       	rcall	.+28     	; 0x3fd8 <__addsf3x>
    3fbc:	b1 c1       	rjmp	.+866    	; 0x4320 <__fp_round>
    3fbe:	a2 d1       	rcall	.+836    	; 0x4304 <__fp_pscA>
    3fc0:	30 f0       	brcs	.+12     	; 0x3fce <__addsf3+0x18>
    3fc2:	a7 d1       	rcall	.+846    	; 0x4312 <__fp_pscB>
    3fc4:	20 f0       	brcs	.+8      	; 0x3fce <__addsf3+0x18>
    3fc6:	31 f4       	brne	.+12     	; 0x3fd4 <__addsf3+0x1e>
    3fc8:	9f 3f       	cpi	r25, 0xFF	; 255
    3fca:	11 f4       	brne	.+4      	; 0x3fd0 <__addsf3+0x1a>
    3fcc:	1e f4       	brtc	.+6      	; 0x3fd4 <__addsf3+0x1e>
    3fce:	97 c1       	rjmp	.+814    	; 0x42fe <__fp_nan>
    3fd0:	0e f4       	brtc	.+2      	; 0x3fd4 <__addsf3+0x1e>
    3fd2:	e0 95       	com	r30
    3fd4:	e7 fb       	bst	r30, 7
    3fd6:	64 c1       	rjmp	.+712    	; 0x42a0 <__fp_inf>

00003fd8 <__addsf3x>:
    3fd8:	e9 2f       	mov	r30, r25
    3fda:	b3 d1       	rcall	.+870    	; 0x4342 <__fp_split3>
    3fdc:	80 f3       	brcs	.-32     	; 0x3fbe <__addsf3+0x8>
    3fde:	ba 17       	cp	r27, r26
    3fe0:	62 07       	cpc	r22, r18
    3fe2:	73 07       	cpc	r23, r19
    3fe4:	84 07       	cpc	r24, r20
    3fe6:	95 07       	cpc	r25, r21
    3fe8:	18 f0       	brcs	.+6      	; 0x3ff0 <__addsf3x+0x18>
    3fea:	71 f4       	brne	.+28     	; 0x4008 <__addsf3x+0x30>
    3fec:	9e f5       	brtc	.+102    	; 0x4054 <__addsf3x+0x7c>
    3fee:	e2 c1       	rjmp	.+964    	; 0x43b4 <__fp_zero>
    3ff0:	0e f4       	brtc	.+2      	; 0x3ff4 <__addsf3x+0x1c>
    3ff2:	e0 95       	com	r30
    3ff4:	0b 2e       	mov	r0, r27
    3ff6:	ba 2f       	mov	r27, r26
    3ff8:	a0 2d       	mov	r26, r0
    3ffa:	0b 01       	movw	r0, r22
    3ffc:	b9 01       	movw	r22, r18
    3ffe:	90 01       	movw	r18, r0
    4000:	0c 01       	movw	r0, r24
    4002:	ca 01       	movw	r24, r20
    4004:	a0 01       	movw	r20, r0
    4006:	11 24       	eor	r1, r1
    4008:	ff 27       	eor	r31, r31
    400a:	59 1b       	sub	r21, r25
    400c:	99 f0       	breq	.+38     	; 0x4034 <__addsf3x+0x5c>
    400e:	59 3f       	cpi	r21, 0xF9	; 249
    4010:	50 f4       	brcc	.+20     	; 0x4026 <__addsf3x+0x4e>
    4012:	50 3e       	cpi	r21, 0xE0	; 224
    4014:	68 f1       	brcs	.+90     	; 0x4070 <__addsf3x+0x98>
    4016:	1a 16       	cp	r1, r26
    4018:	f0 40       	sbci	r31, 0x00	; 0
    401a:	a2 2f       	mov	r26, r18
    401c:	23 2f       	mov	r18, r19
    401e:	34 2f       	mov	r19, r20
    4020:	44 27       	eor	r20, r20
    4022:	58 5f       	subi	r21, 0xF8	; 248
    4024:	f3 cf       	rjmp	.-26     	; 0x400c <__addsf3x+0x34>
    4026:	46 95       	lsr	r20
    4028:	37 95       	ror	r19
    402a:	27 95       	ror	r18
    402c:	a7 95       	ror	r26
    402e:	f0 40       	sbci	r31, 0x00	; 0
    4030:	53 95       	inc	r21
    4032:	c9 f7       	brne	.-14     	; 0x4026 <__addsf3x+0x4e>
    4034:	7e f4       	brtc	.+30     	; 0x4054 <__addsf3x+0x7c>
    4036:	1f 16       	cp	r1, r31
    4038:	ba 0b       	sbc	r27, r26
    403a:	62 0b       	sbc	r22, r18
    403c:	73 0b       	sbc	r23, r19
    403e:	84 0b       	sbc	r24, r20
    4040:	ba f0       	brmi	.+46     	; 0x4070 <__addsf3x+0x98>
    4042:	91 50       	subi	r25, 0x01	; 1
    4044:	a1 f0       	breq	.+40     	; 0x406e <__addsf3x+0x96>
    4046:	ff 0f       	add	r31, r31
    4048:	bb 1f       	adc	r27, r27
    404a:	66 1f       	adc	r22, r22
    404c:	77 1f       	adc	r23, r23
    404e:	88 1f       	adc	r24, r24
    4050:	c2 f7       	brpl	.-16     	; 0x4042 <__addsf3x+0x6a>
    4052:	0e c0       	rjmp	.+28     	; 0x4070 <__addsf3x+0x98>
    4054:	ba 0f       	add	r27, r26
    4056:	62 1f       	adc	r22, r18
    4058:	73 1f       	adc	r23, r19
    405a:	84 1f       	adc	r24, r20
    405c:	48 f4       	brcc	.+18     	; 0x4070 <__addsf3x+0x98>
    405e:	87 95       	ror	r24
    4060:	77 95       	ror	r23
    4062:	67 95       	ror	r22
    4064:	b7 95       	ror	r27
    4066:	f7 95       	ror	r31
    4068:	9e 3f       	cpi	r25, 0xFE	; 254
    406a:	08 f0       	brcs	.+2      	; 0x406e <__addsf3x+0x96>
    406c:	b3 cf       	rjmp	.-154    	; 0x3fd4 <__addsf3+0x1e>
    406e:	93 95       	inc	r25
    4070:	88 0f       	add	r24, r24
    4072:	08 f0       	brcs	.+2      	; 0x4076 <__addsf3x+0x9e>
    4074:	99 27       	eor	r25, r25
    4076:	ee 0f       	add	r30, r30
    4078:	97 95       	ror	r25
    407a:	87 95       	ror	r24
    407c:	08 95       	ret

0000407e <__cmpsf2>:
    407e:	ec d0       	rcall	.+472    	; 0x4258 <__fp_cmp>
    4080:	08 f4       	brcc	.+2      	; 0x4084 <__cmpsf2+0x6>
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	08 95       	ret

00004086 <__divsf3>:
    4086:	0c d0       	rcall	.+24     	; 0x40a0 <__divsf3x>
    4088:	4b c1       	rjmp	.+662    	; 0x4320 <__fp_round>
    408a:	43 d1       	rcall	.+646    	; 0x4312 <__fp_pscB>
    408c:	40 f0       	brcs	.+16     	; 0x409e <__divsf3+0x18>
    408e:	3a d1       	rcall	.+628    	; 0x4304 <__fp_pscA>
    4090:	30 f0       	brcs	.+12     	; 0x409e <__divsf3+0x18>
    4092:	21 f4       	brne	.+8      	; 0x409c <__divsf3+0x16>
    4094:	5f 3f       	cpi	r21, 0xFF	; 255
    4096:	19 f0       	breq	.+6      	; 0x409e <__divsf3+0x18>
    4098:	03 c1       	rjmp	.+518    	; 0x42a0 <__fp_inf>
    409a:	51 11       	cpse	r21, r1
    409c:	8c c1       	rjmp	.+792    	; 0x43b6 <__fp_szero>
    409e:	2f c1       	rjmp	.+606    	; 0x42fe <__fp_nan>

000040a0 <__divsf3x>:
    40a0:	50 d1       	rcall	.+672    	; 0x4342 <__fp_split3>
    40a2:	98 f3       	brcs	.-26     	; 0x408a <__divsf3+0x4>

000040a4 <__divsf3_pse>:
    40a4:	99 23       	and	r25, r25
    40a6:	c9 f3       	breq	.-14     	; 0x409a <__divsf3+0x14>
    40a8:	55 23       	and	r21, r21
    40aa:	b1 f3       	breq	.-20     	; 0x4098 <__divsf3+0x12>
    40ac:	95 1b       	sub	r25, r21
    40ae:	55 0b       	sbc	r21, r21
    40b0:	bb 27       	eor	r27, r27
    40b2:	aa 27       	eor	r26, r26
    40b4:	62 17       	cp	r22, r18
    40b6:	73 07       	cpc	r23, r19
    40b8:	84 07       	cpc	r24, r20
    40ba:	38 f0       	brcs	.+14     	; 0x40ca <__divsf3_pse+0x26>
    40bc:	9f 5f       	subi	r25, 0xFF	; 255
    40be:	5f 4f       	sbci	r21, 0xFF	; 255
    40c0:	22 0f       	add	r18, r18
    40c2:	33 1f       	adc	r19, r19
    40c4:	44 1f       	adc	r20, r20
    40c6:	aa 1f       	adc	r26, r26
    40c8:	a9 f3       	breq	.-22     	; 0x40b4 <__divsf3_pse+0x10>
    40ca:	33 d0       	rcall	.+102    	; 0x4132 <__divsf3_pse+0x8e>
    40cc:	0e 2e       	mov	r0, r30
    40ce:	3a f0       	brmi	.+14     	; 0x40de <__divsf3_pse+0x3a>
    40d0:	e0 e8       	ldi	r30, 0x80	; 128
    40d2:	30 d0       	rcall	.+96     	; 0x4134 <__divsf3_pse+0x90>
    40d4:	91 50       	subi	r25, 0x01	; 1
    40d6:	50 40       	sbci	r21, 0x00	; 0
    40d8:	e6 95       	lsr	r30
    40da:	00 1c       	adc	r0, r0
    40dc:	ca f7       	brpl	.-14     	; 0x40d0 <__divsf3_pse+0x2c>
    40de:	29 d0       	rcall	.+82     	; 0x4132 <__divsf3_pse+0x8e>
    40e0:	fe 2f       	mov	r31, r30
    40e2:	27 d0       	rcall	.+78     	; 0x4132 <__divsf3_pse+0x8e>
    40e4:	66 0f       	add	r22, r22
    40e6:	77 1f       	adc	r23, r23
    40e8:	88 1f       	adc	r24, r24
    40ea:	bb 1f       	adc	r27, r27
    40ec:	26 17       	cp	r18, r22
    40ee:	37 07       	cpc	r19, r23
    40f0:	48 07       	cpc	r20, r24
    40f2:	ab 07       	cpc	r26, r27
    40f4:	b0 e8       	ldi	r27, 0x80	; 128
    40f6:	09 f0       	breq	.+2      	; 0x40fa <__divsf3_pse+0x56>
    40f8:	bb 0b       	sbc	r27, r27
    40fa:	80 2d       	mov	r24, r0
    40fc:	bf 01       	movw	r22, r30
    40fe:	ff 27       	eor	r31, r31
    4100:	93 58       	subi	r25, 0x83	; 131
    4102:	5f 4f       	sbci	r21, 0xFF	; 255
    4104:	2a f0       	brmi	.+10     	; 0x4110 <__divsf3_pse+0x6c>
    4106:	9e 3f       	cpi	r25, 0xFE	; 254
    4108:	51 05       	cpc	r21, r1
    410a:	68 f0       	brcs	.+26     	; 0x4126 <__divsf3_pse+0x82>
    410c:	c9 c0       	rjmp	.+402    	; 0x42a0 <__fp_inf>
    410e:	53 c1       	rjmp	.+678    	; 0x43b6 <__fp_szero>
    4110:	5f 3f       	cpi	r21, 0xFF	; 255
    4112:	ec f3       	brlt	.-6      	; 0x410e <__divsf3_pse+0x6a>
    4114:	98 3e       	cpi	r25, 0xE8	; 232
    4116:	dc f3       	brlt	.-10     	; 0x410e <__divsf3_pse+0x6a>
    4118:	86 95       	lsr	r24
    411a:	77 95       	ror	r23
    411c:	67 95       	ror	r22
    411e:	b7 95       	ror	r27
    4120:	f7 95       	ror	r31
    4122:	9f 5f       	subi	r25, 0xFF	; 255
    4124:	c9 f7       	brne	.-14     	; 0x4118 <__divsf3_pse+0x74>
    4126:	88 0f       	add	r24, r24
    4128:	91 1d       	adc	r25, r1
    412a:	96 95       	lsr	r25
    412c:	87 95       	ror	r24
    412e:	97 f9       	bld	r25, 7
    4130:	08 95       	ret
    4132:	e1 e0       	ldi	r30, 0x01	; 1
    4134:	66 0f       	add	r22, r22
    4136:	77 1f       	adc	r23, r23
    4138:	88 1f       	adc	r24, r24
    413a:	bb 1f       	adc	r27, r27
    413c:	62 17       	cp	r22, r18
    413e:	73 07       	cpc	r23, r19
    4140:	84 07       	cpc	r24, r20
    4142:	ba 07       	cpc	r27, r26
    4144:	20 f0       	brcs	.+8      	; 0x414e <__divsf3_pse+0xaa>
    4146:	62 1b       	sub	r22, r18
    4148:	73 0b       	sbc	r23, r19
    414a:	84 0b       	sbc	r24, r20
    414c:	ba 0b       	sbc	r27, r26
    414e:	ee 1f       	adc	r30, r30
    4150:	88 f7       	brcc	.-30     	; 0x4134 <__divsf3_pse+0x90>
    4152:	e0 95       	com	r30
    4154:	08 95       	ret

00004156 <__fixsfsi>:
    4156:	04 d0       	rcall	.+8      	; 0x4160 <__fixunssfsi>
    4158:	68 94       	set
    415a:	b1 11       	cpse	r27, r1
    415c:	2c c1       	rjmp	.+600    	; 0x43b6 <__fp_szero>
    415e:	08 95       	ret

00004160 <__fixunssfsi>:
    4160:	f8 d0       	rcall	.+496    	; 0x4352 <__fp_splitA>
    4162:	88 f0       	brcs	.+34     	; 0x4186 <__fixunssfsi+0x26>
    4164:	9f 57       	subi	r25, 0x7F	; 127
    4166:	90 f0       	brcs	.+36     	; 0x418c <__fixunssfsi+0x2c>
    4168:	b9 2f       	mov	r27, r25
    416a:	99 27       	eor	r25, r25
    416c:	b7 51       	subi	r27, 0x17	; 23
    416e:	a0 f0       	brcs	.+40     	; 0x4198 <__fixunssfsi+0x38>
    4170:	d1 f0       	breq	.+52     	; 0x41a6 <__fixunssfsi+0x46>
    4172:	66 0f       	add	r22, r22
    4174:	77 1f       	adc	r23, r23
    4176:	88 1f       	adc	r24, r24
    4178:	99 1f       	adc	r25, r25
    417a:	1a f0       	brmi	.+6      	; 0x4182 <__fixunssfsi+0x22>
    417c:	ba 95       	dec	r27
    417e:	c9 f7       	brne	.-14     	; 0x4172 <__fixunssfsi+0x12>
    4180:	12 c0       	rjmp	.+36     	; 0x41a6 <__fixunssfsi+0x46>
    4182:	b1 30       	cpi	r27, 0x01	; 1
    4184:	81 f0       	breq	.+32     	; 0x41a6 <__fixunssfsi+0x46>
    4186:	16 d1       	rcall	.+556    	; 0x43b4 <__fp_zero>
    4188:	b1 e0       	ldi	r27, 0x01	; 1
    418a:	08 95       	ret
    418c:	13 c1       	rjmp	.+550    	; 0x43b4 <__fp_zero>
    418e:	67 2f       	mov	r22, r23
    4190:	78 2f       	mov	r23, r24
    4192:	88 27       	eor	r24, r24
    4194:	b8 5f       	subi	r27, 0xF8	; 248
    4196:	39 f0       	breq	.+14     	; 0x41a6 <__fixunssfsi+0x46>
    4198:	b9 3f       	cpi	r27, 0xF9	; 249
    419a:	cc f3       	brlt	.-14     	; 0x418e <__fixunssfsi+0x2e>
    419c:	86 95       	lsr	r24
    419e:	77 95       	ror	r23
    41a0:	67 95       	ror	r22
    41a2:	b3 95       	inc	r27
    41a4:	d9 f7       	brne	.-10     	; 0x419c <__fixunssfsi+0x3c>
    41a6:	3e f4       	brtc	.+14     	; 0x41b6 <__fixunssfsi+0x56>
    41a8:	90 95       	com	r25
    41aa:	80 95       	com	r24
    41ac:	70 95       	com	r23
    41ae:	61 95       	neg	r22
    41b0:	7f 4f       	sbci	r23, 0xFF	; 255
    41b2:	8f 4f       	sbci	r24, 0xFF	; 255
    41b4:	9f 4f       	sbci	r25, 0xFF	; 255
    41b6:	08 95       	ret

000041b8 <__floatunsisf>:
    41b8:	e8 94       	clt
    41ba:	09 c0       	rjmp	.+18     	; 0x41ce <__floatsisf+0x12>

000041bc <__floatsisf>:
    41bc:	97 fb       	bst	r25, 7
    41be:	3e f4       	brtc	.+14     	; 0x41ce <__floatsisf+0x12>
    41c0:	90 95       	com	r25
    41c2:	80 95       	com	r24
    41c4:	70 95       	com	r23
    41c6:	61 95       	neg	r22
    41c8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ca:	8f 4f       	sbci	r24, 0xFF	; 255
    41cc:	9f 4f       	sbci	r25, 0xFF	; 255
    41ce:	99 23       	and	r25, r25
    41d0:	a9 f0       	breq	.+42     	; 0x41fc <__floatsisf+0x40>
    41d2:	f9 2f       	mov	r31, r25
    41d4:	96 e9       	ldi	r25, 0x96	; 150
    41d6:	bb 27       	eor	r27, r27
    41d8:	93 95       	inc	r25
    41da:	f6 95       	lsr	r31
    41dc:	87 95       	ror	r24
    41de:	77 95       	ror	r23
    41e0:	67 95       	ror	r22
    41e2:	b7 95       	ror	r27
    41e4:	f1 11       	cpse	r31, r1
    41e6:	f8 cf       	rjmp	.-16     	; 0x41d8 <__floatsisf+0x1c>
    41e8:	fa f4       	brpl	.+62     	; 0x4228 <__floatsisf+0x6c>
    41ea:	bb 0f       	add	r27, r27
    41ec:	11 f4       	brne	.+4      	; 0x41f2 <__floatsisf+0x36>
    41ee:	60 ff       	sbrs	r22, 0
    41f0:	1b c0       	rjmp	.+54     	; 0x4228 <__floatsisf+0x6c>
    41f2:	6f 5f       	subi	r22, 0xFF	; 255
    41f4:	7f 4f       	sbci	r23, 0xFF	; 255
    41f6:	8f 4f       	sbci	r24, 0xFF	; 255
    41f8:	9f 4f       	sbci	r25, 0xFF	; 255
    41fa:	16 c0       	rjmp	.+44     	; 0x4228 <__floatsisf+0x6c>
    41fc:	88 23       	and	r24, r24
    41fe:	11 f0       	breq	.+4      	; 0x4204 <__floatsisf+0x48>
    4200:	96 e9       	ldi	r25, 0x96	; 150
    4202:	11 c0       	rjmp	.+34     	; 0x4226 <__floatsisf+0x6a>
    4204:	77 23       	and	r23, r23
    4206:	21 f0       	breq	.+8      	; 0x4210 <__floatsisf+0x54>
    4208:	9e e8       	ldi	r25, 0x8E	; 142
    420a:	87 2f       	mov	r24, r23
    420c:	76 2f       	mov	r23, r22
    420e:	05 c0       	rjmp	.+10     	; 0x421a <__floatsisf+0x5e>
    4210:	66 23       	and	r22, r22
    4212:	71 f0       	breq	.+28     	; 0x4230 <__floatsisf+0x74>
    4214:	96 e8       	ldi	r25, 0x86	; 134
    4216:	86 2f       	mov	r24, r22
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	2a f0       	brmi	.+10     	; 0x4228 <__floatsisf+0x6c>
    421e:	9a 95       	dec	r25
    4220:	66 0f       	add	r22, r22
    4222:	77 1f       	adc	r23, r23
    4224:	88 1f       	adc	r24, r24
    4226:	da f7       	brpl	.-10     	; 0x421e <__floatsisf+0x62>
    4228:	88 0f       	add	r24, r24
    422a:	96 95       	lsr	r25
    422c:	87 95       	ror	r24
    422e:	97 f9       	bld	r25, 7
    4230:	08 95       	ret

00004232 <floor>:
    4232:	a9 d0       	rcall	.+338    	; 0x4386 <__fp_trunc>
    4234:	80 f0       	brcs	.+32     	; 0x4256 <floor+0x24>
    4236:	9f 37       	cpi	r25, 0x7F	; 127
    4238:	40 f4       	brcc	.+16     	; 0x424a <floor+0x18>
    423a:	91 11       	cpse	r25, r1
    423c:	0e f0       	brts	.+2      	; 0x4240 <floor+0xe>
    423e:	bb c0       	rjmp	.+374    	; 0x43b6 <__fp_szero>
    4240:	60 e0       	ldi	r22, 0x00	; 0
    4242:	70 e0       	ldi	r23, 0x00	; 0
    4244:	80 e8       	ldi	r24, 0x80	; 128
    4246:	9f eb       	ldi	r25, 0xBF	; 191
    4248:	08 95       	ret
    424a:	26 f4       	brtc	.+8      	; 0x4254 <floor+0x22>
    424c:	1b 16       	cp	r1, r27
    424e:	61 1d       	adc	r22, r1
    4250:	71 1d       	adc	r23, r1
    4252:	81 1d       	adc	r24, r1
    4254:	2b c0       	rjmp	.+86     	; 0x42ac <__fp_mintl>
    4256:	45 c0       	rjmp	.+138    	; 0x42e2 <__fp_mpack>

00004258 <__fp_cmp>:
    4258:	99 0f       	add	r25, r25
    425a:	00 08       	sbc	r0, r0
    425c:	55 0f       	add	r21, r21
    425e:	aa 0b       	sbc	r26, r26
    4260:	e0 e8       	ldi	r30, 0x80	; 128
    4262:	fe ef       	ldi	r31, 0xFE	; 254
    4264:	16 16       	cp	r1, r22
    4266:	17 06       	cpc	r1, r23
    4268:	e8 07       	cpc	r30, r24
    426a:	f9 07       	cpc	r31, r25
    426c:	c0 f0       	brcs	.+48     	; 0x429e <__fp_cmp+0x46>
    426e:	12 16       	cp	r1, r18
    4270:	13 06       	cpc	r1, r19
    4272:	e4 07       	cpc	r30, r20
    4274:	f5 07       	cpc	r31, r21
    4276:	98 f0       	brcs	.+38     	; 0x429e <__fp_cmp+0x46>
    4278:	62 1b       	sub	r22, r18
    427a:	73 0b       	sbc	r23, r19
    427c:	84 0b       	sbc	r24, r20
    427e:	95 0b       	sbc	r25, r21
    4280:	39 f4       	brne	.+14     	; 0x4290 <__fp_cmp+0x38>
    4282:	0a 26       	eor	r0, r26
    4284:	61 f0       	breq	.+24     	; 0x429e <__fp_cmp+0x46>
    4286:	23 2b       	or	r18, r19
    4288:	24 2b       	or	r18, r20
    428a:	25 2b       	or	r18, r21
    428c:	21 f4       	brne	.+8      	; 0x4296 <__fp_cmp+0x3e>
    428e:	08 95       	ret
    4290:	0a 26       	eor	r0, r26
    4292:	09 f4       	brne	.+2      	; 0x4296 <__fp_cmp+0x3e>
    4294:	a1 40       	sbci	r26, 0x01	; 1
    4296:	a6 95       	lsr	r26
    4298:	8f ef       	ldi	r24, 0xFF	; 255
    429a:	81 1d       	adc	r24, r1
    429c:	81 1d       	adc	r24, r1
    429e:	08 95       	ret

000042a0 <__fp_inf>:
    42a0:	97 f9       	bld	r25, 7
    42a2:	9f 67       	ori	r25, 0x7F	; 127
    42a4:	80 e8       	ldi	r24, 0x80	; 128
    42a6:	70 e0       	ldi	r23, 0x00	; 0
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	08 95       	ret

000042ac <__fp_mintl>:
    42ac:	88 23       	and	r24, r24
    42ae:	71 f4       	brne	.+28     	; 0x42cc <__fp_mintl+0x20>
    42b0:	77 23       	and	r23, r23
    42b2:	21 f0       	breq	.+8      	; 0x42bc <__fp_mintl+0x10>
    42b4:	98 50       	subi	r25, 0x08	; 8
    42b6:	87 2b       	or	r24, r23
    42b8:	76 2f       	mov	r23, r22
    42ba:	07 c0       	rjmp	.+14     	; 0x42ca <__fp_mintl+0x1e>
    42bc:	66 23       	and	r22, r22
    42be:	11 f4       	brne	.+4      	; 0x42c4 <__fp_mintl+0x18>
    42c0:	99 27       	eor	r25, r25
    42c2:	0d c0       	rjmp	.+26     	; 0x42de <__fp_mintl+0x32>
    42c4:	90 51       	subi	r25, 0x10	; 16
    42c6:	86 2b       	or	r24, r22
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	2a f0       	brmi	.+10     	; 0x42d8 <__fp_mintl+0x2c>
    42ce:	9a 95       	dec	r25
    42d0:	66 0f       	add	r22, r22
    42d2:	77 1f       	adc	r23, r23
    42d4:	88 1f       	adc	r24, r24
    42d6:	da f7       	brpl	.-10     	; 0x42ce <__fp_mintl+0x22>
    42d8:	88 0f       	add	r24, r24
    42da:	96 95       	lsr	r25
    42dc:	87 95       	ror	r24
    42de:	97 f9       	bld	r25, 7
    42e0:	08 95       	ret

000042e2 <__fp_mpack>:
    42e2:	9f 3f       	cpi	r25, 0xFF	; 255
    42e4:	31 f0       	breq	.+12     	; 0x42f2 <__fp_mpack_finite+0xc>

000042e6 <__fp_mpack_finite>:
    42e6:	91 50       	subi	r25, 0x01	; 1
    42e8:	20 f4       	brcc	.+8      	; 0x42f2 <__fp_mpack_finite+0xc>
    42ea:	87 95       	ror	r24
    42ec:	77 95       	ror	r23
    42ee:	67 95       	ror	r22
    42f0:	b7 95       	ror	r27
    42f2:	88 0f       	add	r24, r24
    42f4:	91 1d       	adc	r25, r1
    42f6:	96 95       	lsr	r25
    42f8:	87 95       	ror	r24
    42fa:	97 f9       	bld	r25, 7
    42fc:	08 95       	ret

000042fe <__fp_nan>:
    42fe:	9f ef       	ldi	r25, 0xFF	; 255
    4300:	80 ec       	ldi	r24, 0xC0	; 192
    4302:	08 95       	ret

00004304 <__fp_pscA>:
    4304:	00 24       	eor	r0, r0
    4306:	0a 94       	dec	r0
    4308:	16 16       	cp	r1, r22
    430a:	17 06       	cpc	r1, r23
    430c:	18 06       	cpc	r1, r24
    430e:	09 06       	cpc	r0, r25
    4310:	08 95       	ret

00004312 <__fp_pscB>:
    4312:	00 24       	eor	r0, r0
    4314:	0a 94       	dec	r0
    4316:	12 16       	cp	r1, r18
    4318:	13 06       	cpc	r1, r19
    431a:	14 06       	cpc	r1, r20
    431c:	05 06       	cpc	r0, r21
    431e:	08 95       	ret

00004320 <__fp_round>:
    4320:	09 2e       	mov	r0, r25
    4322:	03 94       	inc	r0
    4324:	00 0c       	add	r0, r0
    4326:	11 f4       	brne	.+4      	; 0x432c <__fp_round+0xc>
    4328:	88 23       	and	r24, r24
    432a:	52 f0       	brmi	.+20     	; 0x4340 <__fp_round+0x20>
    432c:	bb 0f       	add	r27, r27
    432e:	40 f4       	brcc	.+16     	; 0x4340 <__fp_round+0x20>
    4330:	bf 2b       	or	r27, r31
    4332:	11 f4       	brne	.+4      	; 0x4338 <__fp_round+0x18>
    4334:	60 ff       	sbrs	r22, 0
    4336:	04 c0       	rjmp	.+8      	; 0x4340 <__fp_round+0x20>
    4338:	6f 5f       	subi	r22, 0xFF	; 255
    433a:	7f 4f       	sbci	r23, 0xFF	; 255
    433c:	8f 4f       	sbci	r24, 0xFF	; 255
    433e:	9f 4f       	sbci	r25, 0xFF	; 255
    4340:	08 95       	ret

00004342 <__fp_split3>:
    4342:	57 fd       	sbrc	r21, 7
    4344:	90 58       	subi	r25, 0x80	; 128
    4346:	44 0f       	add	r20, r20
    4348:	55 1f       	adc	r21, r21
    434a:	59 f0       	breq	.+22     	; 0x4362 <__fp_splitA+0x10>
    434c:	5f 3f       	cpi	r21, 0xFF	; 255
    434e:	71 f0       	breq	.+28     	; 0x436c <__fp_splitA+0x1a>
    4350:	47 95       	ror	r20

00004352 <__fp_splitA>:
    4352:	88 0f       	add	r24, r24
    4354:	97 fb       	bst	r25, 7
    4356:	99 1f       	adc	r25, r25
    4358:	61 f0       	breq	.+24     	; 0x4372 <__fp_splitA+0x20>
    435a:	9f 3f       	cpi	r25, 0xFF	; 255
    435c:	79 f0       	breq	.+30     	; 0x437c <__fp_splitA+0x2a>
    435e:	87 95       	ror	r24
    4360:	08 95       	ret
    4362:	12 16       	cp	r1, r18
    4364:	13 06       	cpc	r1, r19
    4366:	14 06       	cpc	r1, r20
    4368:	55 1f       	adc	r21, r21
    436a:	f2 cf       	rjmp	.-28     	; 0x4350 <__fp_split3+0xe>
    436c:	46 95       	lsr	r20
    436e:	f1 df       	rcall	.-30     	; 0x4352 <__fp_splitA>
    4370:	08 c0       	rjmp	.+16     	; 0x4382 <__fp_splitA+0x30>
    4372:	16 16       	cp	r1, r22
    4374:	17 06       	cpc	r1, r23
    4376:	18 06       	cpc	r1, r24
    4378:	99 1f       	adc	r25, r25
    437a:	f1 cf       	rjmp	.-30     	; 0x435e <__fp_splitA+0xc>
    437c:	86 95       	lsr	r24
    437e:	71 05       	cpc	r23, r1
    4380:	61 05       	cpc	r22, r1
    4382:	08 94       	sec
    4384:	08 95       	ret

00004386 <__fp_trunc>:
    4386:	e5 df       	rcall	.-54     	; 0x4352 <__fp_splitA>
    4388:	a0 f0       	brcs	.+40     	; 0x43b2 <__fp_trunc+0x2c>
    438a:	be e7       	ldi	r27, 0x7E	; 126
    438c:	b9 17       	cp	r27, r25
    438e:	88 f4       	brcc	.+34     	; 0x43b2 <__fp_trunc+0x2c>
    4390:	bb 27       	eor	r27, r27
    4392:	9f 38       	cpi	r25, 0x8F	; 143
    4394:	60 f4       	brcc	.+24     	; 0x43ae <__fp_trunc+0x28>
    4396:	16 16       	cp	r1, r22
    4398:	b1 1d       	adc	r27, r1
    439a:	67 2f       	mov	r22, r23
    439c:	78 2f       	mov	r23, r24
    439e:	88 27       	eor	r24, r24
    43a0:	98 5f       	subi	r25, 0xF8	; 248
    43a2:	f7 cf       	rjmp	.-18     	; 0x4392 <__fp_trunc+0xc>
    43a4:	86 95       	lsr	r24
    43a6:	77 95       	ror	r23
    43a8:	67 95       	ror	r22
    43aa:	b1 1d       	adc	r27, r1
    43ac:	93 95       	inc	r25
    43ae:	96 39       	cpi	r25, 0x96	; 150
    43b0:	c8 f3       	brcs	.-14     	; 0x43a4 <__fp_trunc+0x1e>
    43b2:	08 95       	ret

000043b4 <__fp_zero>:
    43b4:	e8 94       	clt

000043b6 <__fp_szero>:
    43b6:	bb 27       	eor	r27, r27
    43b8:	66 27       	eor	r22, r22
    43ba:	77 27       	eor	r23, r23
    43bc:	cb 01       	movw	r24, r22
    43be:	97 f9       	bld	r25, 7
    43c0:	08 95       	ret

000043c2 <__gesf2>:
    43c2:	4a df       	rcall	.-364    	; 0x4258 <__fp_cmp>
    43c4:	08 f4       	brcc	.+2      	; 0x43c8 <__gesf2+0x6>
    43c6:	8f ef       	ldi	r24, 0xFF	; 255
    43c8:	08 95       	ret

000043ca <__mulsf3>:
    43ca:	0b d0       	rcall	.+22     	; 0x43e2 <__mulsf3x>
    43cc:	a9 cf       	rjmp	.-174    	; 0x4320 <__fp_round>
    43ce:	9a df       	rcall	.-204    	; 0x4304 <__fp_pscA>
    43d0:	28 f0       	brcs	.+10     	; 0x43dc <__mulsf3+0x12>
    43d2:	9f df       	rcall	.-194    	; 0x4312 <__fp_pscB>
    43d4:	18 f0       	brcs	.+6      	; 0x43dc <__mulsf3+0x12>
    43d6:	95 23       	and	r25, r21
    43d8:	09 f0       	breq	.+2      	; 0x43dc <__mulsf3+0x12>
    43da:	62 cf       	rjmp	.-316    	; 0x42a0 <__fp_inf>
    43dc:	90 cf       	rjmp	.-224    	; 0x42fe <__fp_nan>
    43de:	11 24       	eor	r1, r1
    43e0:	ea cf       	rjmp	.-44     	; 0x43b6 <__fp_szero>

000043e2 <__mulsf3x>:
    43e2:	af df       	rcall	.-162    	; 0x4342 <__fp_split3>
    43e4:	a0 f3       	brcs	.-24     	; 0x43ce <__mulsf3+0x4>

000043e6 <__mulsf3_pse>:
    43e6:	95 9f       	mul	r25, r21
    43e8:	d1 f3       	breq	.-12     	; 0x43de <__mulsf3+0x14>
    43ea:	95 0f       	add	r25, r21
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	55 1f       	adc	r21, r21
    43f0:	62 9f       	mul	r22, r18
    43f2:	f0 01       	movw	r30, r0
    43f4:	72 9f       	mul	r23, r18
    43f6:	bb 27       	eor	r27, r27
    43f8:	f0 0d       	add	r31, r0
    43fa:	b1 1d       	adc	r27, r1
    43fc:	63 9f       	mul	r22, r19
    43fe:	aa 27       	eor	r26, r26
    4400:	f0 0d       	add	r31, r0
    4402:	b1 1d       	adc	r27, r1
    4404:	aa 1f       	adc	r26, r26
    4406:	64 9f       	mul	r22, r20
    4408:	66 27       	eor	r22, r22
    440a:	b0 0d       	add	r27, r0
    440c:	a1 1d       	adc	r26, r1
    440e:	66 1f       	adc	r22, r22
    4410:	82 9f       	mul	r24, r18
    4412:	22 27       	eor	r18, r18
    4414:	b0 0d       	add	r27, r0
    4416:	a1 1d       	adc	r26, r1
    4418:	62 1f       	adc	r22, r18
    441a:	73 9f       	mul	r23, r19
    441c:	b0 0d       	add	r27, r0
    441e:	a1 1d       	adc	r26, r1
    4420:	62 1f       	adc	r22, r18
    4422:	83 9f       	mul	r24, r19
    4424:	a0 0d       	add	r26, r0
    4426:	61 1d       	adc	r22, r1
    4428:	22 1f       	adc	r18, r18
    442a:	74 9f       	mul	r23, r20
    442c:	33 27       	eor	r19, r19
    442e:	a0 0d       	add	r26, r0
    4430:	61 1d       	adc	r22, r1
    4432:	23 1f       	adc	r18, r19
    4434:	84 9f       	mul	r24, r20
    4436:	60 0d       	add	r22, r0
    4438:	21 1d       	adc	r18, r1
    443a:	82 2f       	mov	r24, r18
    443c:	76 2f       	mov	r23, r22
    443e:	6a 2f       	mov	r22, r26
    4440:	11 24       	eor	r1, r1
    4442:	9f 57       	subi	r25, 0x7F	; 127
    4444:	50 40       	sbci	r21, 0x00	; 0
    4446:	8a f0       	brmi	.+34     	; 0x446a <__mulsf3_pse+0x84>
    4448:	e1 f0       	breq	.+56     	; 0x4482 <__mulsf3_pse+0x9c>
    444a:	88 23       	and	r24, r24
    444c:	4a f0       	brmi	.+18     	; 0x4460 <__mulsf3_pse+0x7a>
    444e:	ee 0f       	add	r30, r30
    4450:	ff 1f       	adc	r31, r31
    4452:	bb 1f       	adc	r27, r27
    4454:	66 1f       	adc	r22, r22
    4456:	77 1f       	adc	r23, r23
    4458:	88 1f       	adc	r24, r24
    445a:	91 50       	subi	r25, 0x01	; 1
    445c:	50 40       	sbci	r21, 0x00	; 0
    445e:	a9 f7       	brne	.-22     	; 0x444a <__mulsf3_pse+0x64>
    4460:	9e 3f       	cpi	r25, 0xFE	; 254
    4462:	51 05       	cpc	r21, r1
    4464:	70 f0       	brcs	.+28     	; 0x4482 <__mulsf3_pse+0x9c>
    4466:	1c cf       	rjmp	.-456    	; 0x42a0 <__fp_inf>
    4468:	a6 cf       	rjmp	.-180    	; 0x43b6 <__fp_szero>
    446a:	5f 3f       	cpi	r21, 0xFF	; 255
    446c:	ec f3       	brlt	.-6      	; 0x4468 <__mulsf3_pse+0x82>
    446e:	98 3e       	cpi	r25, 0xE8	; 232
    4470:	dc f3       	brlt	.-10     	; 0x4468 <__mulsf3_pse+0x82>
    4472:	86 95       	lsr	r24
    4474:	77 95       	ror	r23
    4476:	67 95       	ror	r22
    4478:	b7 95       	ror	r27
    447a:	f7 95       	ror	r31
    447c:	e7 95       	ror	r30
    447e:	9f 5f       	subi	r25, 0xFF	; 255
    4480:	c1 f7       	brne	.-16     	; 0x4472 <__mulsf3_pse+0x8c>
    4482:	fe 2b       	or	r31, r30
    4484:	88 0f       	add	r24, r24
    4486:	91 1d       	adc	r25, r1
    4488:	96 95       	lsr	r25
    448a:	87 95       	ror	r24
    448c:	97 f9       	bld	r25, 7
    448e:	08 95       	ret

00004490 <__divmodhi4>:
    4490:	97 fb       	bst	r25, 7
    4492:	07 2e       	mov	r0, r23
    4494:	16 f4       	brtc	.+4      	; 0x449a <__divmodhi4+0xa>
    4496:	00 94       	com	r0
    4498:	07 d0       	rcall	.+14     	; 0x44a8 <__divmodhi4_neg1>
    449a:	77 fd       	sbrc	r23, 7
    449c:	09 d0       	rcall	.+18     	; 0x44b0 <__divmodhi4_neg2>
    449e:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__udivmodhi4>
    44a2:	07 fc       	sbrc	r0, 7
    44a4:	05 d0       	rcall	.+10     	; 0x44b0 <__divmodhi4_neg2>
    44a6:	3e f4       	brtc	.+14     	; 0x44b6 <__divmodhi4_exit>

000044a8 <__divmodhi4_neg1>:
    44a8:	90 95       	com	r25
    44aa:	81 95       	neg	r24
    44ac:	9f 4f       	sbci	r25, 0xFF	; 255
    44ae:	08 95       	ret

000044b0 <__divmodhi4_neg2>:
    44b0:	70 95       	com	r23
    44b2:	61 95       	neg	r22
    44b4:	7f 4f       	sbci	r23, 0xFF	; 255

000044b6 <__divmodhi4_exit>:
    44b6:	08 95       	ret

000044b8 <__udivmodsi4>:
    44b8:	a1 e2       	ldi	r26, 0x21	; 33
    44ba:	1a 2e       	mov	r1, r26
    44bc:	aa 1b       	sub	r26, r26
    44be:	bb 1b       	sub	r27, r27
    44c0:	fd 01       	movw	r30, r26
    44c2:	0d c0       	rjmp	.+26     	; 0x44de <__udivmodsi4_ep>

000044c4 <__udivmodsi4_loop>:
    44c4:	aa 1f       	adc	r26, r26
    44c6:	bb 1f       	adc	r27, r27
    44c8:	ee 1f       	adc	r30, r30
    44ca:	ff 1f       	adc	r31, r31
    44cc:	a2 17       	cp	r26, r18
    44ce:	b3 07       	cpc	r27, r19
    44d0:	e4 07       	cpc	r30, r20
    44d2:	f5 07       	cpc	r31, r21
    44d4:	20 f0       	brcs	.+8      	; 0x44de <__udivmodsi4_ep>
    44d6:	a2 1b       	sub	r26, r18
    44d8:	b3 0b       	sbc	r27, r19
    44da:	e4 0b       	sbc	r30, r20
    44dc:	f5 0b       	sbc	r31, r21

000044de <__udivmodsi4_ep>:
    44de:	66 1f       	adc	r22, r22
    44e0:	77 1f       	adc	r23, r23
    44e2:	88 1f       	adc	r24, r24
    44e4:	99 1f       	adc	r25, r25
    44e6:	1a 94       	dec	r1
    44e8:	69 f7       	brne	.-38     	; 0x44c4 <__udivmodsi4_loop>
    44ea:	60 95       	com	r22
    44ec:	70 95       	com	r23
    44ee:	80 95       	com	r24
    44f0:	90 95       	com	r25
    44f2:	9b 01       	movw	r18, r22
    44f4:	ac 01       	movw	r20, r24
    44f6:	bd 01       	movw	r22, r26
    44f8:	cf 01       	movw	r24, r30
    44fa:	08 95       	ret

000044fc <__udivmodhi4>:
    44fc:	aa 1b       	sub	r26, r26
    44fe:	bb 1b       	sub	r27, r27
    4500:	51 e1       	ldi	r21, 0x11	; 17
    4502:	07 c0       	rjmp	.+14     	; 0x4512 <__udivmodhi4_ep>

00004504 <__udivmodhi4_loop>:
    4504:	aa 1f       	adc	r26, r26
    4506:	bb 1f       	adc	r27, r27
    4508:	a6 17       	cp	r26, r22
    450a:	b7 07       	cpc	r27, r23
    450c:	10 f0       	brcs	.+4      	; 0x4512 <__udivmodhi4_ep>
    450e:	a6 1b       	sub	r26, r22
    4510:	b7 0b       	sbc	r27, r23

00004512 <__udivmodhi4_ep>:
    4512:	88 1f       	adc	r24, r24
    4514:	99 1f       	adc	r25, r25
    4516:	5a 95       	dec	r21
    4518:	a9 f7       	brne	.-22     	; 0x4504 <__udivmodhi4_loop>
    451a:	80 95       	com	r24
    451c:	90 95       	com	r25
    451e:	bc 01       	movw	r22, r24
    4520:	cd 01       	movw	r24, r26
    4522:	08 95       	ret

00004524 <malloc>:
    4524:	0f 93       	push	r16
    4526:	1f 93       	push	r17
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	82 30       	cpi	r24, 0x02	; 2
    452e:	91 05       	cpc	r25, r1
    4530:	10 f4       	brcc	.+4      	; 0x4536 <malloc+0x12>
    4532:	82 e0       	ldi	r24, 0x02	; 2
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	e0 91 8c 02 	lds	r30, 0x028C
    453a:	f0 91 8d 02 	lds	r31, 0x028D
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	c0 e0       	ldi	r28, 0x00	; 0
    4544:	d0 e0       	ldi	r29, 0x00	; 0
    4546:	23 c0       	rjmp	.+70     	; 0x458e <malloc+0x6a>
    4548:	40 81       	ld	r20, Z
    454a:	51 81       	ldd	r21, Z+1	; 0x01
    454c:	48 17       	cp	r20, r24
    454e:	59 07       	cpc	r21, r25
    4550:	a8 f0       	brcs	.+42     	; 0x457c <malloc+0x58>
    4552:	48 17       	cp	r20, r24
    4554:	59 07       	cpc	r21, r25
    4556:	61 f4       	brne	.+24     	; 0x4570 <malloc+0x4c>
    4558:	82 81       	ldd	r24, Z+2	; 0x02
    455a:	93 81       	ldd	r25, Z+3	; 0x03
    455c:	20 97       	sbiw	r28, 0x00	; 0
    455e:	19 f0       	breq	.+6      	; 0x4566 <malloc+0x42>
    4560:	9b 83       	std	Y+3, r25	; 0x03
    4562:	8a 83       	std	Y+2, r24	; 0x02
    4564:	2e c0       	rjmp	.+92     	; 0x45c2 <malloc+0x9e>
    4566:	90 93 8d 02 	sts	0x028D, r25
    456a:	80 93 8c 02 	sts	0x028C, r24
    456e:	29 c0       	rjmp	.+82     	; 0x45c2 <malloc+0x9e>
    4570:	21 15       	cp	r18, r1
    4572:	31 05       	cpc	r19, r1
    4574:	29 f0       	breq	.+10     	; 0x4580 <malloc+0x5c>
    4576:	42 17       	cp	r20, r18
    4578:	53 07       	cpc	r21, r19
    457a:	10 f0       	brcs	.+4      	; 0x4580 <malloc+0x5c>
    457c:	a9 01       	movw	r20, r18
    457e:	02 c0       	rjmp	.+4      	; 0x4584 <malloc+0x60>
    4580:	be 01       	movw	r22, r28
    4582:	df 01       	movw	r26, r30
    4584:	02 81       	ldd	r16, Z+2	; 0x02
    4586:	13 81       	ldd	r17, Z+3	; 0x03
    4588:	ef 01       	movw	r28, r30
    458a:	9a 01       	movw	r18, r20
    458c:	f8 01       	movw	r30, r16
    458e:	30 97       	sbiw	r30, 0x00	; 0
    4590:	d9 f6       	brne	.-74     	; 0x4548 <malloc+0x24>
    4592:	21 15       	cp	r18, r1
    4594:	31 05       	cpc	r19, r1
    4596:	09 f1       	breq	.+66     	; 0x45da <malloc+0xb6>
    4598:	28 1b       	sub	r18, r24
    459a:	39 0b       	sbc	r19, r25
    459c:	24 30       	cpi	r18, 0x04	; 4
    459e:	31 05       	cpc	r19, r1
    45a0:	90 f4       	brcc	.+36     	; 0x45c6 <malloc+0xa2>
    45a2:	12 96       	adiw	r26, 0x02	; 2
    45a4:	8d 91       	ld	r24, X+
    45a6:	9c 91       	ld	r25, X
    45a8:	13 97       	sbiw	r26, 0x03	; 3
    45aa:	61 15       	cp	r22, r1
    45ac:	71 05       	cpc	r23, r1
    45ae:	21 f0       	breq	.+8      	; 0x45b8 <malloc+0x94>
    45b0:	fb 01       	movw	r30, r22
    45b2:	93 83       	std	Z+3, r25	; 0x03
    45b4:	82 83       	std	Z+2, r24	; 0x02
    45b6:	04 c0       	rjmp	.+8      	; 0x45c0 <malloc+0x9c>
    45b8:	90 93 8d 02 	sts	0x028D, r25
    45bc:	80 93 8c 02 	sts	0x028C, r24
    45c0:	fd 01       	movw	r30, r26
    45c2:	32 96       	adiw	r30, 0x02	; 2
    45c4:	44 c0       	rjmp	.+136    	; 0x464e <malloc+0x12a>
    45c6:	fd 01       	movw	r30, r26
    45c8:	e2 0f       	add	r30, r18
    45ca:	f3 1f       	adc	r31, r19
    45cc:	81 93       	st	Z+, r24
    45ce:	91 93       	st	Z+, r25
    45d0:	22 50       	subi	r18, 0x02	; 2
    45d2:	31 09       	sbc	r19, r1
    45d4:	2d 93       	st	X+, r18
    45d6:	3c 93       	st	X, r19
    45d8:	3a c0       	rjmp	.+116    	; 0x464e <malloc+0x12a>
    45da:	20 91 8a 02 	lds	r18, 0x028A
    45de:	30 91 8b 02 	lds	r19, 0x028B
    45e2:	23 2b       	or	r18, r19
    45e4:	41 f4       	brne	.+16     	; 0x45f6 <malloc+0xd2>
    45e6:	20 91 02 02 	lds	r18, 0x0202
    45ea:	30 91 03 02 	lds	r19, 0x0203
    45ee:	30 93 8b 02 	sts	0x028B, r19
    45f2:	20 93 8a 02 	sts	0x028A, r18
    45f6:	20 91 00 02 	lds	r18, 0x0200
    45fa:	30 91 01 02 	lds	r19, 0x0201
    45fe:	21 15       	cp	r18, r1
    4600:	31 05       	cpc	r19, r1
    4602:	41 f4       	brne	.+16     	; 0x4614 <malloc+0xf0>
    4604:	2d b7       	in	r18, 0x3d	; 61
    4606:	3e b7       	in	r19, 0x3e	; 62
    4608:	40 91 04 02 	lds	r20, 0x0204
    460c:	50 91 05 02 	lds	r21, 0x0205
    4610:	24 1b       	sub	r18, r20
    4612:	35 0b       	sbc	r19, r21
    4614:	e0 91 8a 02 	lds	r30, 0x028A
    4618:	f0 91 8b 02 	lds	r31, 0x028B
    461c:	e2 17       	cp	r30, r18
    461e:	f3 07       	cpc	r31, r19
    4620:	a0 f4       	brcc	.+40     	; 0x464a <malloc+0x126>
    4622:	2e 1b       	sub	r18, r30
    4624:	3f 0b       	sbc	r19, r31
    4626:	28 17       	cp	r18, r24
    4628:	39 07       	cpc	r19, r25
    462a:	78 f0       	brcs	.+30     	; 0x464a <malloc+0x126>
    462c:	ac 01       	movw	r20, r24
    462e:	4e 5f       	subi	r20, 0xFE	; 254
    4630:	5f 4f       	sbci	r21, 0xFF	; 255
    4632:	24 17       	cp	r18, r20
    4634:	35 07       	cpc	r19, r21
    4636:	48 f0       	brcs	.+18     	; 0x464a <malloc+0x126>
    4638:	4e 0f       	add	r20, r30
    463a:	5f 1f       	adc	r21, r31
    463c:	50 93 8b 02 	sts	0x028B, r21
    4640:	40 93 8a 02 	sts	0x028A, r20
    4644:	81 93       	st	Z+, r24
    4646:	91 93       	st	Z+, r25
    4648:	02 c0       	rjmp	.+4      	; 0x464e <malloc+0x12a>
    464a:	e0 e0       	ldi	r30, 0x00	; 0
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	cf 01       	movw	r24, r30
    4650:	df 91       	pop	r29
    4652:	cf 91       	pop	r28
    4654:	1f 91       	pop	r17
    4656:	0f 91       	pop	r16
    4658:	08 95       	ret

0000465a <free>:
    465a:	ef 92       	push	r14
    465c:	ff 92       	push	r15
    465e:	0f 93       	push	r16
    4660:	1f 93       	push	r17
    4662:	cf 93       	push	r28
    4664:	df 93       	push	r29
    4666:	00 97       	sbiw	r24, 0x00	; 0
    4668:	09 f4       	brne	.+2      	; 0x466c <free+0x12>
    466a:	8f c0       	rjmp	.+286    	; 0x478a <free+0x130>
    466c:	dc 01       	movw	r26, r24
    466e:	12 97       	sbiw	r26, 0x02	; 2
    4670:	13 96       	adiw	r26, 0x03	; 3
    4672:	1c 92       	st	X, r1
    4674:	1e 92       	st	-X, r1
    4676:	12 97       	sbiw	r26, 0x02	; 2
    4678:	e0 90 8c 02 	lds	r14, 0x028C
    467c:	f0 90 8d 02 	lds	r15, 0x028D
    4680:	e1 14       	cp	r14, r1
    4682:	f1 04       	cpc	r15, r1
    4684:	89 f4       	brne	.+34     	; 0x46a8 <free+0x4e>
    4686:	2d 91       	ld	r18, X+
    4688:	3c 91       	ld	r19, X
    468a:	11 97       	sbiw	r26, 0x01	; 1
    468c:	28 0f       	add	r18, r24
    468e:	39 1f       	adc	r19, r25
    4690:	80 91 8a 02 	lds	r24, 0x028A
    4694:	90 91 8b 02 	lds	r25, 0x028B
    4698:	82 17       	cp	r24, r18
    469a:	93 07       	cpc	r25, r19
    469c:	89 f5       	brne	.+98     	; 0x4700 <free+0xa6>
    469e:	b0 93 8b 02 	sts	0x028B, r27
    46a2:	a0 93 8a 02 	sts	0x028A, r26
    46a6:	71 c0       	rjmp	.+226    	; 0x478a <free+0x130>
    46a8:	e7 01       	movw	r28, r14
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	01 c0       	rjmp	.+2      	; 0x46b2 <free+0x58>
    46b0:	ea 01       	movw	r28, r20
    46b2:	ca 17       	cp	r28, r26
    46b4:	db 07       	cpc	r29, r27
    46b6:	38 f4       	brcc	.+14     	; 0x46c6 <free+0x6c>
    46b8:	4a 81       	ldd	r20, Y+2	; 0x02
    46ba:	5b 81       	ldd	r21, Y+3	; 0x03
    46bc:	9e 01       	movw	r18, r28
    46be:	41 15       	cp	r20, r1
    46c0:	51 05       	cpc	r21, r1
    46c2:	b1 f7       	brne	.-20     	; 0x46b0 <free+0x56>
    46c4:	22 c0       	rjmp	.+68     	; 0x470a <free+0xb0>
    46c6:	bc 01       	movw	r22, r24
    46c8:	62 50       	subi	r22, 0x02	; 2
    46ca:	71 09       	sbc	r23, r1
    46cc:	fb 01       	movw	r30, r22
    46ce:	d3 83       	std	Z+3, r29	; 0x03
    46d0:	c2 83       	std	Z+2, r28	; 0x02
    46d2:	00 81       	ld	r16, Z
    46d4:	11 81       	ldd	r17, Z+1	; 0x01
    46d6:	ac 01       	movw	r20, r24
    46d8:	40 0f       	add	r20, r16
    46da:	51 1f       	adc	r21, r17
    46dc:	4c 17       	cp	r20, r28
    46de:	5d 07       	cpc	r21, r29
    46e0:	61 f4       	brne	.+24     	; 0x46fa <free+0xa0>
    46e2:	48 81       	ld	r20, Y
    46e4:	59 81       	ldd	r21, Y+1	; 0x01
    46e6:	40 0f       	add	r20, r16
    46e8:	51 1f       	adc	r21, r17
    46ea:	4e 5f       	subi	r20, 0xFE	; 254
    46ec:	5f 4f       	sbci	r21, 0xFF	; 255
    46ee:	51 83       	std	Z+1, r21	; 0x01
    46f0:	40 83       	st	Z, r20
    46f2:	4a 81       	ldd	r20, Y+2	; 0x02
    46f4:	5b 81       	ldd	r21, Y+3	; 0x03
    46f6:	53 83       	std	Z+3, r21	; 0x03
    46f8:	42 83       	std	Z+2, r20	; 0x02
    46fa:	21 15       	cp	r18, r1
    46fc:	31 05       	cpc	r19, r1
    46fe:	29 f4       	brne	.+10     	; 0x470a <free+0xb0>
    4700:	b0 93 8d 02 	sts	0x028D, r27
    4704:	a0 93 8c 02 	sts	0x028C, r26
    4708:	40 c0       	rjmp	.+128    	; 0x478a <free+0x130>
    470a:	f9 01       	movw	r30, r18
    470c:	b3 83       	std	Z+3, r27	; 0x03
    470e:	a2 83       	std	Z+2, r26	; 0x02
    4710:	e9 01       	movw	r28, r18
    4712:	69 91       	ld	r22, Y+
    4714:	79 91       	ld	r23, Y+
    4716:	c6 0f       	add	r28, r22
    4718:	d7 1f       	adc	r29, r23
    471a:	ac 17       	cp	r26, r28
    471c:	bd 07       	cpc	r27, r29
    471e:	79 f4       	brne	.+30     	; 0x473e <free+0xe4>
    4720:	dc 01       	movw	r26, r24
    4722:	5e 91       	ld	r21, -X
    4724:	4e 91       	ld	r20, -X
    4726:	46 0f       	add	r20, r22
    4728:	57 1f       	adc	r21, r23
    472a:	4e 5f       	subi	r20, 0xFE	; 254
    472c:	5f 4f       	sbci	r21, 0xFF	; 255
    472e:	51 83       	std	Z+1, r21	; 0x01
    4730:	40 83       	st	Z, r20
    4732:	12 96       	adiw	r26, 0x02	; 2
    4734:	8d 91       	ld	r24, X+
    4736:	9c 91       	ld	r25, X
    4738:	13 97       	sbiw	r26, 0x03	; 3
    473a:	93 83       	std	Z+3, r25	; 0x03
    473c:	82 83       	std	Z+2, r24	; 0x02
    473e:	a0 e0       	ldi	r26, 0x00	; 0
    4740:	b0 e0       	ldi	r27, 0x00	; 0
    4742:	02 c0       	rjmp	.+4      	; 0x4748 <free+0xee>
    4744:	d7 01       	movw	r26, r14
    4746:	7c 01       	movw	r14, r24
    4748:	f7 01       	movw	r30, r14
    474a:	82 81       	ldd	r24, Z+2	; 0x02
    474c:	93 81       	ldd	r25, Z+3	; 0x03
    474e:	00 97       	sbiw	r24, 0x00	; 0
    4750:	c9 f7       	brne	.-14     	; 0x4744 <free+0xea>
    4752:	c7 01       	movw	r24, r14
    4754:	02 96       	adiw	r24, 0x02	; 2
    4756:	20 81       	ld	r18, Z
    4758:	31 81       	ldd	r19, Z+1	; 0x01
    475a:	82 0f       	add	r24, r18
    475c:	93 1f       	adc	r25, r19
    475e:	20 91 8a 02 	lds	r18, 0x028A
    4762:	30 91 8b 02 	lds	r19, 0x028B
    4766:	28 17       	cp	r18, r24
    4768:	39 07       	cpc	r19, r25
    476a:	79 f4       	brne	.+30     	; 0x478a <free+0x130>
    476c:	10 97       	sbiw	r26, 0x00	; 0
    476e:	29 f4       	brne	.+10     	; 0x477a <free+0x120>
    4770:	10 92 8d 02 	sts	0x028D, r1
    4774:	10 92 8c 02 	sts	0x028C, r1
    4778:	04 c0       	rjmp	.+8      	; 0x4782 <free+0x128>
    477a:	13 96       	adiw	r26, 0x03	; 3
    477c:	1c 92       	st	X, r1
    477e:	1e 92       	st	-X, r1
    4780:	12 97       	sbiw	r26, 0x02	; 2
    4782:	f0 92 8b 02 	sts	0x028B, r15
    4786:	e0 92 8a 02 	sts	0x028A, r14
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	1f 91       	pop	r17
    4790:	0f 91       	pop	r16
    4792:	ff 90       	pop	r15
    4794:	ef 90       	pop	r14
    4796:	08 95       	ret

00004798 <memcpy>:
    4798:	fb 01       	movw	r30, r22
    479a:	dc 01       	movw	r26, r24
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <memcpy+0xa>
    479e:	01 90       	ld	r0, Z+
    47a0:	0d 92       	st	X+, r0
    47a2:	41 50       	subi	r20, 0x01	; 1
    47a4:	50 40       	sbci	r21, 0x00	; 0
    47a6:	d8 f7       	brcc	.-10     	; 0x479e <memcpy+0x6>
    47a8:	08 95       	ret

000047aa <_exit>:
    47aa:	f8 94       	cli

000047ac <__stop_program>:
    47ac:	ff cf       	rjmp	.-2      	; 0x47ac <__stop_program>
