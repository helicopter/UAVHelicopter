
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800200  00002258  000022ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080026c  0080026c  00002358  2**0
                  ALLOC
  3 .stab         000020f4  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c4  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000518  00000000  00000000  00004d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000533c  00000000  00000000  00005257  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021c0  00000000  00000000  0000a593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000182f  00000000  00000000  0000c753  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001030  00000000  00000000  0000df84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021fc  00000000  00000000  0000efb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000259f  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000410  00000000  00000000  0001374f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
       8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
       c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      10:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
	if (record != NULL)
      14:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      18:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
	{
		//Copy the record
		//danger not deep copy. 
		Record *newRecord = record->Copy();
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      2c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		{
			records = newRecord;
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_17>
			firstRecord = newRecord;
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
			lastRecord = newRecord;
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      68:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      6c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      70:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      74:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      78:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      7c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      80:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      84:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      88:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
			lastRecord = newRecord;
      8c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      90:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      94:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      98:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
		}
		
		bufferSize++;
      9c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      ac:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      b0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
	}
}
      b4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      b8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      bc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      c0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      c4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 * This method uses Euler angle rotations.
 */
double MagnetometerSensor::getFRDY()
{
	return (rawMagX * (cos(theta)*sin(sai))) + (rawMagY * (sin(phi)*sin(theta)*sin(sai) + cos(phi)*cos(sai))) + (rawMagZ * (cos(phi)*sin(theta)*sin(sai) - sin(phi)*cos(sai)));
}
      c8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      cc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      dc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      e0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 5f 08 	jmp	0x10be	; 0x10be <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
      e8:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <_ZN10helicopter8messages7Message8getBytesEv>
      ec:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
      f0:	0c 94 95 0c 	jmp	0x192a	; 0x192a <_ZN10helicopter5tasks4Task4initEv>
      f4:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_ZN10helicopter8messages19SimTelemetryMessage8getBytesEv>
      f8:	0c 94 77 07 	jmp	0xeee	; 0xeee <_ZN10helicopter8messages19SimTelemetryMessageD0Ev>
      fc:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_ZN10helicopter8messages14MessageBuilderD1Ev>
     100:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>
     104:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_ZN10helicopter8messages7MessageD0Ev>
     108:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <_ZN10helicopter5tasks4Task11runTaskImplEv>
     10c:	0c 94 98 02 	jmp	0x530	; 0x530 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>
     110:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>
     114:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <_ZN10helicopter8messages19SimTelemetryMessageD1Ev>
     118:	0c 94 28 08 	jmp	0x1050	; 0x1050 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     11c:	0c 94 08 06 	jmp	0xc10	; 0xc10 <_ZN10helicopter8messages14MessageBuilderD0Ev>
     120:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>
     124:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc>
     128:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_ZN10helicopter8messages14MessageBuilder12buildMessageEv>
     12c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc>
     130:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_ZN10helicopter7drivers12SerialDriverD0Ev>
     134:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>
     138:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     13c:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_ZN10helicopter8messages7MessageD1Ev>
     140:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <_ZN10helicopter5tasks4Task7runTaskEv>
     144:	0c 94 00 01 	jmp	0x200	; 0x200 <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     148:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <_ZN10helicopter8messages7Message12buildMessageEPc>
     14c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>
     150:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_ZN10helicopter7drivers12SerialDriverD1Ev>

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d1 e2       	ldi	r29, 0x21	; 33
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	0c bf       	out	0x3c, r16	; 60

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b2 e0       	ldi	r27, 0x02	; 2
     16a:	e8 e5       	ldi	r30, 0x58	; 88
     16c:	f2 e2       	ldi	r31, 0x22	; 34
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	0b bf       	out	0x3b, r16	; 59
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
     174:	07 90       	elpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ac 36       	cpi	r26, 0x6C	; 108
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	ac e6       	ldi	r26, 0x6C	; 108
     182:	b2 e0       	ldi	r27, 0x02	; 2
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a2 37       	cpi	r26, 0x72	; 114
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 82 03 	call	0x704	; 0x704 <main>
     192:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
				{
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	2a e0       	ldi	r18, 0x0A	; 10
     1b0:	32 e0       	ldi	r19, 0x02	; 2
     1b2:	fc 01       	movw	r30, r24
     1b4:	31 83       	std	Z+1, r19	; 0x01
     1b6:	20 83       	st	Z, r18
					
				}
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	81 70       	andi	r24, 0x01	; 1
     1be:	99 27       	eor	r25, r25
     1c0:	00 97       	sbiw	r24, 0x00	; 0
     1c2:	21 f0       	breq	.+8      	; 0x1cc <_ZN10helicopter7drivers12SerialDriverD1Ev+0x32>
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	9a 81       	ldd	r25, Y+2	; 0x02
     1c8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <_ZN10helicopter7drivers12SerialDriverD0Ev>:
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
				{}
						
				virtual ~SerialDriver()
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	1f 92       	push	r1
     1dc:	1f 92       	push	r1
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	89 83       	std	Y+1, r24	; 0x01
				{
					
				}
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZN10helicopter7drivers12SerialDriverD1Ev>
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	9a 81       	ldd	r25, Y+2	; 0x02
     1f2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
#include "commonheader.h"

using namespace helicopter::drivers;

void SerialDriver::initialize()
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x6>
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	9c 83       	std	Y+4, r25	; 0x04
     20e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int baudPrescaller = 0;
     210:	1a 82       	std	Y+2, r1	; 0x02
     212:	19 82       	std	Y+1, r1	; 0x01
	
	if (useDoubleSpeedMode)
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	fc 01       	movw	r30, r24
     21a:	80 85       	ldd	r24, Z+8	; 0x08
     21c:	88 23       	and	r24, r24
     21e:	b9 f1       	breq	.+110    	; 0x28e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x8e>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	fc 01       	movw	r30, r24
     226:	82 81       	ldd	r24, Z+2	; 0x02
     228:	93 81       	ldd	r25, Z+3	; 0x03
     22a:	a4 81       	ldd	r26, Z+4	; 0x04
     22c:	b5 81       	ldd	r27, Z+5	; 0x05
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	aa 1f       	adc	r26, r26
     234:	bb 1f       	adc	r27, r27
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	aa 1f       	adc	r26, r26
     23c:	bb 1f       	adc	r27, r27
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	aa 1f       	adc	r26, r26
     244:	bb 1f       	adc	r27, r27
     246:	9c 01       	movw	r18, r24
     248:	ad 01       	movw	r20, r26
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	94 e2       	ldi	r25, 0x24	; 36
     24e:	a4 ef       	ldi	r26, 0xF4	; 244
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
     25a:	da 01       	movw	r26, r20
     25c:	c9 01       	movw	r24, r18
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	a1 09       	sbc	r26, r1
     262:	b1 09       	sbc	r27, r1
     264:	bc 01       	movw	r22, r24
     266:	cd 01       	movw	r24, r26
     268:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__floatunsisf>
     26c:	dc 01       	movw	r26, r24
     26e:	cb 01       	movw	r24, r22
     270:	bc 01       	movw	r22, r24
     272:	cd 01       	movw	r24, r26
     274:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <floor>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	9a 83       	std	Y+2, r25	; 0x02
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	3a c0       	rjmp	.+116    	; 0x302 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x102>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	9c 81       	ldd	r25, Y+4	; 0x04
     292:	fc 01       	movw	r30, r24
     294:	82 81       	ldd	r24, Z+2	; 0x02
     296:	93 81       	ldd	r25, Z+3	; 0x03
     298:	a4 81       	ldd	r26, Z+4	; 0x04
     29a:	b5 81       	ldd	r27, Z+5	; 0x05
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	aa 1f       	adc	r26, r26
     2a2:	bb 1f       	adc	r27, r27
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	aa 1f       	adc	r26, r26
     2aa:	bb 1f       	adc	r27, r27
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	aa 1f       	adc	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	aa 1f       	adc	r26, r26
     2ba:	bb 1f       	adc	r27, r27
     2bc:	9c 01       	movw	r18, r24
     2be:	ad 01       	movw	r20, r26
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	94 e2       	ldi	r25, 0x24	; 36
     2c4:	a4 ef       	ldi	r26, 0xF4	; 244
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	bc 01       	movw	r22, r24
     2ca:	cd 01       	movw	r24, r26
     2cc:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
     2d0:	da 01       	movw	r26, r20
     2d2:	c9 01       	movw	r24, r18
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	a1 09       	sbc	r26, r1
     2d8:	b1 09       	sbc	r27, r1
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__floatunsisf>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	bc 01       	movw	r22, r24
     2e8:	cd 01       	movw	r24, r26
     2ea:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <floor>
     2ee:	dc 01       	movw	r26, r24
     2f0:	cb 01       	movw	r24, r22
     2f2:	bc 01       	movw	r22, r24
     2f4:	cd 01       	movw	r24, r26
     2f6:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fixunssfsi>
     2fa:	dc 01       	movw	r26, r24
     2fc:	cb 01       	movw	r24, r22
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	if (uartPort == Zero)
     302:	8b 81       	ldd	r24, Y+3	; 0x03
     304:	9c 81       	ldd	r25, Y+4	; 0x04
     306:	fc 01       	movw	r30, r24
     308:	86 81       	ldd	r24, Z+6	; 0x06
     30a:	88 23       	and	r24, r24
     30c:	41 f5       	brne	.+80     	; 0x35e <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x15e>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
     30e:	84 ec       	ldi	r24, 0xC4	; 196
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	29 81       	ldd	r18, Y+1	; 0x01
     314:	3a 81       	ldd	r19, Y+2	; 0x02
     316:	fc 01       	movw	r30, r24
     318:	31 83       	std	Z+1, r19	; 0x01
     31a:	20 83       	st	Z, r18
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     31c:	82 ec       	ldi	r24, 0xC2	; 194
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	22 ec       	ldi	r18, 0xC2	; 194
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	26 60       	ori	r18, 0x06	; 6
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	fc 01       	movw	r30, r24
     334:	80 85       	ldd	r24, Z+8	; 0x08
     336:	88 23       	and	r24, r24
     338:	49 f0       	breq	.+18     	; 0x34c <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x14c>
		{
			UCSR0A |= (1<<U2X0);
     33a:	80 ec       	ldi	r24, 0xC0	; 192
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 ec       	ldi	r18, 0xC0	; 192
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	f9 01       	movw	r30, r18
     344:	20 81       	ld	r18, Z
     346:	22 60       	ori	r18, 0x02	; 2
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
		}
		
			
			
		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     34c:	81 ec       	ldi	r24, 0xC1	; 193
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	21 ec       	ldi	r18, 0xC1	; 193
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	28 61       	ori	r18, 0x18	; 24
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
	}
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <_ZN10helicopter7drivers12SerialDriver12transmitByteEc>:

int SerialDriver::transmitByte(byte byteToSend)
{
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x6>
     372:	1f 92       	push	r1
     374:	1f 92       	push	r1
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9c 83       	std	Y+4, r25	; 0x04
     37c:	8b 83       	std	Y+3, r24	; 0x03
     37e:	6d 83       	std	Y+5, r22	; 0x05
	if (uartPort == Zero)
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	9c 81       	ldd	r25, Y+4	; 0x04
     384:	fc 01       	movw	r30, r24
     386:	86 81       	ldd	r24, Z+6	; 0x06
     388:	88 23       	and	r24, r24
     38a:	51 f5       	brne	.+84     	; 0x3e0 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x74>
	{
		int counter = 0;
     38c:	1a 82       	std	Y+2, r1	; 0x02
     38e:	19 82       	std	Y+1, r1	; 0x01
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     390:	14 c0       	rjmp	.+40     	; 0x3ba <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x4e>
		{
			//Check for timeout
			if (isTimeoutEnabled)
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	fc 01       	movw	r30, r24
     398:	87 81       	ldd	r24, Z+7	; 0x07
     39a:	88 23       	and	r24, r24
     39c:	71 f0       	breq	.+28     	; 0x3ba <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x4e>
			{
				if (counter > SENDTIMEOUTCOUNTER)
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	81 39       	cpi	r24, 0x91	; 145
     3a4:	f1 e0       	ldi	r31, 0x01	; 1
     3a6:	9f 07       	cpc	r25, r31
     3a8:	1c f0       	brlt	.+6      	; 0x3b0 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x44>
				{
					return -1;
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	9f ef       	ldi	r25, 0xFF	; 255
     3ae:	1a c0       	rjmp	.+52     	; 0x3e4 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x78>
				}
				
				counter++;
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	9a 83       	std	Y+2, r25	; 0x02
     3b8:	89 83       	std	Y+1, r24	; 0x01
	if (uartPort == Zero)
	{
		int counter = 0;
		
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
     3ba:	80 ec       	ldi	r24, 0xC0	; 192
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	fc 01       	movw	r30, r24
     3c0:	80 81       	ld	r24, Z
     3c2:	88 2f       	mov	r24, r24
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	80 72       	andi	r24, 0x20	; 32
     3c8:	99 27       	eor	r25, r25
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x66>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	22 23       	and	r18, r18
     3d4:	f1 f6       	brne	.-68     	; 0x392 <_ZN10helicopter7drivers12SerialDriver12transmitByteEc+0x26>
			}
		}
				
				
		/* Put data into buffer, sends the data */
		UDR0 = byteToSend;
     3d6:	86 ec       	ldi	r24, 0xC6	; 198
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	2d 81       	ldd	r18, Y+5	; 0x05
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
	}
	
	return 0;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
}
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc>:

int SerialDriver::receiveByte(byte &receivedByte)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x6>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x8>
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	9c 83       	std	Y+4, r25	; 0x04
     402:	8b 83       	std	Y+3, r24	; 0x03
     404:	7e 83       	std	Y+6, r23	; 0x06
     406:	6d 83       	std	Y+5, r22	; 0x05
	if (uartPort == Zero)
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	fc 01       	movw	r30, r24
     40e:	86 81       	ldd	r24, Z+6	; 0x06
     410:	88 23       	and	r24, r24
     412:	49 f5       	brne	.+82     	; 0x466 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x72>
	{
		int counter = 0;
     414:	1a 82       	std	Y+2, r1	; 0x02
     416:	19 82       	std	Y+1, r1	; 0x01
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     418:	14 c0       	rjmp	.+40     	; 0x442 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x4e>
		{
			if (isTimeoutEnabled)
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	9c 81       	ldd	r25, Y+4	; 0x04
     41e:	fc 01       	movw	r30, r24
     420:	87 81       	ldd	r24, Z+7	; 0x07
     422:	88 23       	and	r24, r24
     424:	71 f0       	breq	.+28     	; 0x442 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x4e>
			{
				//Check for timeout
				if (counter > RECEIVETIMEOUTCOUNTER)
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	81 39       	cpi	r24, 0x91	; 145
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	9f 07       	cpc	r25, r31
     430:	1c f0       	brlt	.+6      	; 0x438 <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x44>
				{
					return -1;
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	19 c0       	rjmp	.+50     	; 0x46a <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x76>
				}
			
				counter++;			
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	9a 83       	std	Y+2, r25	; 0x02
     440:	89 83       	std	Y+1, r24	; 0x01
	if (uartPort == Zero)
	{
		int counter = 0;
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)) )
     442:	80 ec       	ldi	r24, 0xC0	; 192
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	80 95       	com	r24
     44c:	88 1f       	adc	r24, r24
     44e:	88 27       	eor	r24, r24
     450:	88 1f       	adc	r24, r24
     452:	88 23       	and	r24, r24
     454:	11 f7       	brne	.-60     	; 0x41a <_ZN10helicopter7drivers12SerialDriver11receiveByteERc+0x26>
			}
		}
		
		
		/* Put data into buffer, sends the data */
		receivedByte = UDR0;
     456:	86 ec       	ldi	r24, 0xC6	; 198
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	20 81       	ld	r18, Z
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	9e 81       	ldd	r25, Y+6	; 0x06
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
	}
	
	return 0;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	26 96       	adiw	r28, 0x06	; 6
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>:
					
					int ledToBlink;
				
				public:

				FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	28 97       	sbiw	r28, 0x08	; 8
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	7c 83       	std	Y+4, r23	; 0x04
     496:	6b 83       	std	Y+3, r22	; 0x03
     498:	5e 83       	std	Y+6, r21	; 0x06
     49a:	4d 83       	std	Y+5, r20	; 0x05
     49c:	38 87       	std	Y+8, r19	; 0x08
     49e:	2f 83       	std	Y+7, r18	; 0x07
					Task(delay, period),
					isOn(false),
					ledToBlink(ledToBlink)
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	4d 81       	ldd	r20, Y+5	; 0x05
     4a6:	5e 81       	ldd	r21, Y+6	; 0x06
     4a8:	2b 81       	ldd	r18, Y+3	; 0x03
     4aa:	3c 81       	ldd	r19, Y+4	; 0x04
     4ac:	b9 01       	movw	r22, r18
     4ae:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN10helicopter5tasks4TaskC1Eii>
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	28 e1       	ldi	r18, 0x18	; 24
     4b8:	32 e0       	ldi	r19, 0x02	; 2
     4ba:	fc 01       	movw	r30, r24
     4bc:	31 83       	std	Z+1, r19	; 0x01
     4be:	20 83       	st	Z, r18
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	fc 01       	movw	r30, r24
     4c6:	17 82       	std	Z+7, r1	; 0x07
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	2f 81       	ldd	r18, Y+7	; 0x07
     4ce:	38 85       	ldd	r19, Y+8	; 0x08
     4d0:	fc 01       	movw	r30, r24
     4d2:	31 87       	std	Z+9, r19	; 0x09
     4d4:	20 87       	std	Z+8, r18	; 0x08
				{
					
				}
     4d6:	28 96       	adiw	r28, 0x08	; 8
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv>:
	
				void init()
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	1f 92       	push	r1
     4ee:	1f 92       	push	r1
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01
				{
					DDRA |= (1<<ledToBlink);
     4f8:	81 e2       	ldi	r24, 0x21	; 33
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	21 e2       	ldi	r18, 0x21	; 33
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	62 2f       	mov	r22, r18
     506:	29 81       	ldd	r18, Y+1	; 0x01
     508:	3a 81       	ldd	r19, Y+2	; 0x02
     50a:	f9 01       	movw	r30, r18
     50c:	40 85       	ldd	r20, Z+8	; 0x08
     50e:	51 85       	ldd	r21, Z+9	; 0x09
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	04 2e       	mov	r0, r20
     516:	02 c0       	rjmp	.+4      	; 0x51c <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x34>
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	0a 94       	dec	r0
     51e:	e2 f7       	brpl	.-8      	; 0x518 <_ZN10helicopter5tasks9misctasks12FlashLEDTask4initEv+0x30>
     520:	26 2b       	or	r18, r22
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
				}
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv>:
	
				/**
				 * Flashes the LED
				 */
				void runTaskImpl() {
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	1f 92       	push	r1
     536:	1f 92       	push	r1
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	89 83       	std	Y+1, r24	; 0x01
					if (isOn)
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	fc 01       	movw	r30, r24
     546:	87 81       	ldd	r24, Z+7	; 0x07
     548:	88 23       	and	r24, r24
     54a:	e9 f0       	breq	.+58     	; 0x586 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x56>
					{
						PORTA &= ~(1<<ledToBlink);
     54c:	82 e2       	ldi	r24, 0x22	; 34
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	22 e2       	ldi	r18, 0x22	; 34
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	62 2f       	mov	r22, r18
     55a:	29 81       	ldd	r18, Y+1	; 0x01
     55c:	3a 81       	ldd	r19, Y+2	; 0x02
     55e:	f9 01       	movw	r30, r18
     560:	40 85       	ldd	r20, Z+8	; 0x08
     562:	51 85       	ldd	r21, Z+9	; 0x09
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	04 2e       	mov	r0, r20
     56a:	02 c0       	rjmp	.+4      	; 0x570 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x40>
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x3c>
     574:	20 95       	com	r18
     576:	26 23       	and	r18, r22
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
						isOn = false;
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	fc 01       	movw	r30, r24
     582:	17 82       	std	Z+7, r1	; 0x07
     584:	1c c0       	rjmp	.+56     	; 0x5be <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x8e>
					}else
					{
						PORTA |= (1<<ledToBlink);
     586:	82 e2       	ldi	r24, 0x22	; 34
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	22 e2       	ldi	r18, 0x22	; 34
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	f9 01       	movw	r30, r18
     590:	20 81       	ld	r18, Z
     592:	62 2f       	mov	r22, r18
     594:	29 81       	ldd	r18, Y+1	; 0x01
     596:	3a 81       	ldd	r19, Y+2	; 0x02
     598:	f9 01       	movw	r30, r18
     59a:	40 85       	ldd	r20, Z+8	; 0x08
     59c:	51 85       	ldd	r21, Z+9	; 0x09
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	04 2e       	mov	r0, r20
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x7a>
     5a6:	22 0f       	add	r18, r18
     5a8:	33 1f       	adc	r19, r19
     5aa:	0a 94       	dec	r0
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <_ZN10helicopter5tasks9misctasks12FlashLEDTask11runTaskImplEv+0x76>
     5ae:	26 2b       	or	r18, r22
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
						isOn = true;
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	9a 81       	ldd	r25, Y+2	; 0x02
     5b8:	21 e0       	ldi	r18, 0x01	; 1
     5ba:	fc 01       	movw	r30, r24
     5bc:	27 83       	std	Z+7, r18	; 0x07
					}
				}
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>:
				 * @param uartPort Which UART port on the board to utilize.
				 * @param enableTimeout Bool indicating if the system should timeout
				 * while waiting to send or receive data. True by default so that the
				 * driver will timeout if it can't send or receive data after a short timeout period.
				 */		
				SerialDriver(
     5c8:	ef 92       	push	r14
     5ca:	0f 93       	push	r16
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	29 97       	sbiw	r28, 0x09	; 9
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	9a 83       	std	Y+2, r25	; 0x02
     5e2:	89 83       	std	Y+1, r24	; 0x01
     5e4:	4b 83       	std	Y+3, r20	; 0x03
     5e6:	5c 83       	std	Y+4, r21	; 0x04
     5e8:	6d 83       	std	Y+5, r22	; 0x05
     5ea:	7e 83       	std	Y+6, r23	; 0x06
     5ec:	2f 83       	std	Y+7, r18	; 0x07
     5ee:	08 87       	std	Y+8, r16	; 0x08
     5f0:	e9 86       	std	Y+9, r14	; 0x09
					bool enableTimeout = true,
					bool useDoubleSpeedMode = false) :
				baudRate(baudRate),
				uartPort(uartPort),
				isTimeoutEnabled(enableTimeout),
				useDoubleSpeedMode(useDoubleSpeedMode)
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	2a e0       	ldi	r18, 0x0A	; 10
     5f8:	32 e0       	ldi	r19, 0x02	; 2
     5fa:	fc 01       	movw	r30, r24
     5fc:	31 83       	std	Z+1, r19	; 0x01
     5fe:	20 83       	st	Z, r18
     600:	29 81       	ldd	r18, Y+1	; 0x01
     602:	3a 81       	ldd	r19, Y+2	; 0x02
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	9c 81       	ldd	r25, Y+4	; 0x04
     608:	ad 81       	ldd	r26, Y+5	; 0x05
     60a:	be 81       	ldd	r27, Y+6	; 0x06
     60c:	f9 01       	movw	r30, r18
     60e:	82 83       	std	Z+2, r24	; 0x02
     610:	93 83       	std	Z+3, r25	; 0x03
     612:	a4 83       	std	Z+4, r26	; 0x04
     614:	b5 83       	std	Z+5, r27	; 0x05
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	2f 81       	ldd	r18, Y+7	; 0x07
     61c:	fc 01       	movw	r30, r24
     61e:	26 83       	std	Z+6, r18	; 0x06
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	28 85       	ldd	r18, Y+8	; 0x08
     626:	fc 01       	movw	r30, r24
     628:	27 83       	std	Z+7, r18	; 0x07
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	29 85       	ldd	r18, Y+9	; 0x09
     630:	fc 01       	movw	r30, r24
     632:	20 87       	std	Z+8, r18	; 0x08
				{}
     634:	29 96       	adiw	r28, 0x09	; 9
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	0f 91       	pop	r16
     646:	ef 90       	pop	r14
     648:	08 95       	ret

0000064a <_ZN10helicopter8messages14MessageBuilderC1Ev>:
				byte messageType;
				
			public:
			
				//TODO: Implement destructor. and delete internalMessage
				MessageBuilder(): internalMessage(NULL), internalMessageCounter(0) {}
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	1f 92       	push	r1
     650:	1f 92       	push	r1
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	2e e2       	ldi	r18, 0x2E	; 46
     660:	32 e0       	ldi	r19, 0x02	; 2
     662:	fc 01       	movw	r30, r24
     664:	31 83       	std	Z+1, r19	; 0x01
     666:	20 83       	st	Z, r18
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	fc 01       	movw	r30, r24
     66e:	13 82       	std	Z+3, r1	; 0x03
     670:	12 82       	std	Z+2, r1	; 0x02
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	fc 01       	movw	r30, r24
     678:	15 82       	std	Z+5, r1	; 0x05
     67a:	14 82       	std	Z+4, r1	; 0x04
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE>:
				 * This is because internally, the message builder 'builds' the message as the bytes
				 * are received. If another message starts to be received and starts inserting
				 * bytes into the same internal message structure, it will corrupt the message
				 * being built. 
				 */
				RadioInterface(SerialDriver *serialDriver, MessageBuilder *builder):
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	00 d0       	rcall	.+0      	; 0x68c <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE+0x6>
     68c:	00 d0       	rcall	.+0      	; 0x68e <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE+0x8>
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	9a 83       	std	Y+2, r25	; 0x02
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	7c 83       	std	Y+4, r23	; 0x04
     698:	6b 83       	std	Y+3, r22	; 0x03
     69a:	5e 83       	std	Y+6, r21	; 0x06
     69c:	4d 83       	std	Y+5, r20	; 0x05
					serialDriver(serialDriver),
					msgBuilder(builder)
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	2b 81       	ldd	r18, Y+3	; 0x03
     6a4:	3c 81       	ldd	r19, Y+4	; 0x04
     6a6:	fc 01       	movw	r30, r24
     6a8:	31 83       	std	Z+1, r19	; 0x01
     6aa:	20 83       	st	Z, r18
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	9a 81       	ldd	r25, Y+2	; 0x02
     6b0:	2d 81       	ldd	r18, Y+5	; 0x05
     6b2:	3e 81       	ldd	r19, Y+6	; 0x06
     6b4:	fc 01       	movw	r30, r24
     6b6:	33 83       	std	Z+3, r19	; 0x03
     6b8:	22 83       	std	Z+2, r18	; 0x02
					{}
     6ba:	26 96       	adiw	r28, 0x06	; 6
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <_ZN10helicopter5model11SystemModelC1Ev>:
			
			int rawMagZ;
			
			public:
			
			SystemModel():
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	1f 92       	push	r1
     6d2:	1f 92       	push	r1
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	9a 83       	std	Y+2, r25	; 0x02
     6da:	89 83       	std	Y+1, r24	; 0x01
			rawMagX(0),
			rawMagY(0),
			rawMagZ(0)
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	fc 01       	movw	r30, r24
     6e2:	11 82       	std	Z+1, r1	; 0x01
     6e4:	10 82       	st	Z, r1
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	fc 01       	movw	r30, r24
     6ec:	13 82       	std	Z+3, r1	; 0x03
     6ee:	12 82       	std	Z+2, r1	; 0x02
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	fc 01       	movw	r30, r24
     6f6:	15 82       	std	Z+5, r1	; 0x05
     6f8:	14 82       	std	Z+4, r1	; 0x04
			{
				
			}
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <main>:
using namespace helicopter::drivers;
using namespace helicopter::interfaces;
using namespace helicopter::model;

int main(void)
{	
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	60 97       	sbiw	r28, 0x10	; 16
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
     724:	86 e0       	ldi	r24, 0x06	; 6
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     72c:	8c 01       	movw	r16, r24
     72e:	c8 01       	movw	r24, r16
     730:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN10helicopter5model11SystemModelC1Ev>
     734:	1a 83       	std	Y+2, r17	; 0x02
     736:	09 83       	std	Y+1, r16	; 0x01
	
	MessageBuilder *messageBuilder = new MessageBuilder();
     738:	87 e0       	ldi	r24, 0x07	; 7
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     740:	8c 01       	movw	r16, r24
     742:	c8 01       	movw	r24, r16
     744:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN10helicopter8messages14MessageBuilderC1Ev>
     748:	1c 83       	std	Y+4, r17	; 0x04
     74a:	0b 83       	std	Y+3, r16	; 0x03
	
	//Create a driver for communicating with the radio.
	SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, true, true);
     74c:	89 e0       	ldi	r24, 0x09	; 9
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     754:	6c 01       	movw	r12, r24
     756:	ee 24       	eor	r14, r14
     758:	e3 94       	inc	r14
     75a:	01 e0       	ldi	r16, 0x01	; 1
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	51 ee       	ldi	r21, 0xE1	; 225
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	c6 01       	movw	r24, r12
     768:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN10helicopter7drivers12SerialDriverC1EmNS1_8UartPortEbb>
     76c:	de 82       	std	Y+6, r13	; 0x06
     76e:	cd 82       	std	Y+5, r12	; 0x05
	serialDriver->initialize();
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	9e 81       	ldd	r25, Y+6	; 0x06
     774:	fc 01       	movw	r30, r24
     776:	80 81       	ld	r24, Z
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	04 96       	adiw	r24, 0x04	; 4
     77c:	fc 01       	movw	r30, r24
     77e:	20 81       	ld	r18, Z
     780:	31 81       	ldd	r19, Z+1	; 0x01
     782:	8d 81       	ldd	r24, Y+5	; 0x05
     784:	9e 81       	ldd	r25, Y+6	; 0x06
     786:	f9 01       	movw	r30, r18
     788:	19 95       	eicall
	
	
	RadioInterface *radioInterface = new RadioInterface(serialDriver, messageBuilder);
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     792:	8c 01       	movw	r16, r24
     794:	2b 81       	ldd	r18, Y+3	; 0x03
     796:	3c 81       	ldd	r19, Y+4	; 0x04
     798:	8d 81       	ldd	r24, Y+5	; 0x05
     79a:	9e 81       	ldd	r25, Y+6	; 0x06
     79c:	a9 01       	movw	r20, r18
     79e:	bc 01       	movw	r22, r24
     7a0:	c8 01       	movw	r24, r16
     7a2:	0e 94 43 03 	call	0x686	; 0x686 <_ZN10helicopter10interfaces14RadioInterfaceC1EPNS_7drivers12SerialDriverEPNS_8messages14MessageBuilderE>
     7a6:	18 87       	std	Y+8, r17	; 0x08
     7a8:	0f 83       	std	Y+7, r16	; 0x07
	
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, TIMER_FREQUENCY_HZ / 4);//starting at tick 1, execute 50 times a second
     7aa:	8b e0       	ldi	r24, 0x0B	; 11
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     7b2:	7c 01       	movw	r14, r24
     7b4:	49 81       	ldd	r20, Y+1	; 0x01
     7b6:	5a 81       	ldd	r21, Y+2	; 0x02
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	98 85       	ldd	r25, Y+8	; 0x08
     7bc:	02 e3       	ldi	r16, 0x32	; 50
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	bc 01       	movw	r22, r24
     7c6:	c7 01       	movw	r24, r14
     7c8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     7cc:	fa 86       	std	Y+10, r15	; 0x0a
     7ce:	e9 86       	std	Y+9, r14	; 0x09

	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, TIMER_FREQUENCY_HZ / 4);//starting at tick 2, execute 50 times a second
     7d0:	8b e0       	ldi	r24, 0x0B	; 11
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     7d8:	7c 01       	movw	r14, r24
     7da:	49 81       	ldd	r20, Y+1	; 0x01
     7dc:	5a 81       	ldd	r21, Y+2	; 0x02
     7de:	8f 81       	ldd	r24, Y+7	; 0x07
     7e0:	98 85       	ldd	r25, Y+8	; 0x08
     7e2:	02 e3       	ldi	r16, 0x32	; 50
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	bc 01       	movw	r22, r24
     7ec:	c7 01       	movw	r24, r14
     7ee:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>
     7f2:	fc 86       	std	Y+12, r15	; 0x0c
     7f4:	eb 86       	std	Y+11, r14	; 0x0b
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, TIMER_FREQUENCY_HZ);//starting at tick 3, execute once a second
     7f6:	8a e0       	ldi	r24, 0x0A	; 10
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     7fe:	8c 01       	movw	r16, r24
     800:	23 e0       	ldi	r18, 0x03	; 3
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	48 ec       	ldi	r20, 0xC8	; 200
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	62 e0       	ldi	r22, 0x02	; 2
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	c8 01       	movw	r24, r16
     80e:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN10helicopter5tasks9misctasks12FlashLEDTaskC1Eiii>
     812:	1e 87       	std	Y+14, r17	; 0x0e
     814:	0d 87       	std	Y+13, r16	; 0x0d
		
	
	
	Scheduler *scheduler = Scheduler::getScheduler();
     816:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
     81a:	98 8b       	std	Y+16, r25	; 0x10
     81c:	8f 87       	std	Y+15, r24	; 0x0f
	
	scheduler->addTask(flashTask);
     81e:	2d 85       	ldd	r18, Y+13	; 0x0d
     820:	3e 85       	ldd	r19, Y+14	; 0x0e
     822:	8f 85       	ldd	r24, Y+15	; 0x0f
     824:	98 89       	ldd	r25, Y+16	; 0x10
     826:	b9 01       	movw	r22, r18
     828:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
     82c:	29 85       	ldd	r18, Y+9	; 0x09
     82e:	3a 85       	ldd	r19, Y+10	; 0x0a
     830:	8f 85       	ldd	r24, Y+15	; 0x0f
     832:	98 89       	ldd	r25, Y+16	; 0x10
     834:	b9 01       	movw	r22, r18
     836:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
     83a:	2b 85       	ldd	r18, Y+11	; 0x0b
     83c:	3c 85       	ldd	r19, Y+12	; 0x0c
     83e:	8f 85       	ldd	r24, Y+15	; 0x0f
     840:	98 89       	ldd	r25, Y+16	; 0x10
     842:	b9 01       	movw	r22, r18
     844:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
     848:	8f 85       	ldd	r24, Y+15	; 0x0f
     84a:	98 89       	ldd	r25, Y+16	; 0x10
     84c:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
     850:	8f 85       	ldd	r24, Y+15	; 0x0f
     852:	98 89       	ldd	r25, Y+16	; 0x10
     854:	0e 94 af 0b 	call	0x175e	; 0x175e <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	
	while(1)
	{
		scheduler->dispatch(); //ensure it includes processor sleeping.
     858:	8f 85       	ldd	r24, Y+15	; 0x0f
     85a:	98 89       	ldd	r25, Y+16	; 0x10
     85c:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
	scheduler->init(); //Sets up the timer registers, inits all tasks,
	
	scheduler->start();
	
	
	while(1)
     860:	fb cf       	rjmp	.-10     	; 0x858 <main+0x154>

00000862 <_ZN10helicopter8messages7Message13getNumOfBytesEv>:
				virtual void buildMessage(byte *message);
				
				/**
				 * Returns the number of bytes in the byte array format of this message.
				 */
				int getNumOfBytes()
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	1f 92       	push	r1
     868:	1f 92       	push	r1
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
				{
					return numBytesInMessage;
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	9a 81       	ldd	r25, Y+2	; 0x02
     876:	fc 01       	movw	r30, r24
     878:	83 81       	ldd	r24, Z+3	; 0x03
     87a:	94 81       	ldd	r25, Z+4	; 0x04
				}
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE>:

using namespace helicopter::util::common;
using namespace helicopter::interfaces;

int RadioInterface::transmit(Message *msgToSend)
{
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	2c 97       	sbiw	r28, 0x0c	; 12
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	9a 87       	std	Y+10, r25	; 0x0a
     89c:	89 87       	std	Y+9, r24	; 0x09
     89e:	7c 87       	std	Y+12, r23	; 0x0c
     8a0:	6b 87       	std	Y+11, r22	; 0x0b
	int status = 0;
     8a2:	1a 82       	std	Y+2, r1	; 0x02
     8a4:	19 82       	std	Y+1, r1	; 0x01
	
	if (msgToSend != NULL)
     8a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x2a>
     8ae:	4f c0       	rjmp	.+158    	; 0x94e <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xc8>
	{
		byte *bytesToSend = msgToSend->getBytes();
     8b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	04 96       	adiw	r24, 0x04	; 4
     8bc:	fc 01       	movw	r30, r24
     8be:	20 81       	ld	r18, Z
     8c0:	31 81       	ldd	r19, Z+1	; 0x01
     8c2:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c4:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c6:	f9 01       	movw	r30, r18
     8c8:	19 95       	eicall
     8ca:	9e 83       	std	Y+6, r25	; 0x06
     8cc:	8d 83       	std	Y+5, r24	; 0x05
		
		int numOfBytes = msgToSend->getNumOfBytes();
     8ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d2:	0e 94 31 04 	call	0x862	; 0x862 <_ZN10helicopter8messages7Message13getNumOfBytesEv>
     8d6:	98 87       	std	Y+8, r25	; 0x08
     8d8:	8f 83       	std	Y+7, r24	; 0x07
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < numOfBytes && status == 0; i++)
     8da:	1c 82       	std	Y+4, r1	; 0x04
     8dc:	1b 82       	std	Y+3, r1	; 0x03
     8de:	23 c0       	rjmp	.+70     	; 0x926 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xa0>
		{
			status = serialDriver->transmitByte(bytesToSend[i]);
     8e0:	89 85       	ldd	r24, Y+9	; 0x09
     8e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	fc 01       	movw	r30, r24
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	06 96       	adiw	r24, 0x06	; 6
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 81       	ld	r18, Z
     8f6:	31 81       	ldd	r19, Z+1	; 0x01
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	4d 81       	ldd	r20, Y+5	; 0x05
     8fe:	5e 81       	ldd	r21, Y+6	; 0x06
     900:	84 0f       	add	r24, r20
     902:	95 1f       	adc	r25, r21
     904:	fc 01       	movw	r30, r24
     906:	40 81       	ld	r20, Z
     908:	89 85       	ldd	r24, Y+9	; 0x09
     90a:	9a 85       	ldd	r25, Y+10	; 0x0a
     90c:	fc 01       	movw	r30, r24
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	64 2f       	mov	r22, r20
     914:	f9 01       	movw	r30, r18
     916:	19 95       	eicall
     918:	9a 83       	std	Y+2, r25	; 0x02
     91a:	89 83       	std	Y+1, r24	; 0x01
		byte *bytesToSend = msgToSend->getBytes();
		
		int numOfBytes = msgToSend->getNumOfBytes();
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < numOfBytes && status == 0; i++)
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	9c 81       	ldd	r25, Y+4	; 0x04
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	9c 83       	std	Y+4, r25	; 0x04
     924:	8b 83       	std	Y+3, r24	; 0x03
     926:	2b 81       	ldd	r18, Y+3	; 0x03
     928:	3c 81       	ldd	r19, Y+4	; 0x04
     92a:	8f 81       	ldd	r24, Y+7	; 0x07
     92c:	98 85       	ldd	r25, Y+8	; 0x08
     92e:	28 17       	cp	r18, r24
     930:	39 07       	cpc	r19, r25
     932:	34 f4       	brge	.+12     	; 0x940 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xba>
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	9a 81       	ldd	r25, Y+2	; 0x02
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	11 f4       	brne	.+4      	; 0x940 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xba>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	01 c0       	rjmp	.+2      	; 0x942 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0xbc>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	88 23       	and	r24, r24
     944:	69 f6       	brne	.-102    	; 0x8e0 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE+0x5a>
		{
			status = serialDriver->transmitByte(bytesToSend[i]);
		}
		
		delete bytesToSend;
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
	}
	
	return status;
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	9a 81       	ldd	r25, Y+2	; 0x02
}
     952:	2c 96       	adiw	r28, 0x0c	; 12
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE>:

int RadioInterface::receive(Message * &receivedMessage)
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	2a 97       	sbiw	r28, 0x0a	; 10
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	98 87       	std	Y+8, r25	; 0x08
     97a:	8f 83       	std	Y+7, r24	; 0x07
     97c:	7a 87       	std	Y+10, r23	; 0x0a
     97e:	69 87       	std	Y+9, r22	; 0x09
	byte msgType = 0;
     980:	1d 82       	std	Y+5, r1	; 0x05
	
	//Get the type of the message to build from the radio
	if (serialDriver->receiveByte(msgType) == 0)
     982:	8f 81       	ldd	r24, Y+7	; 0x07
     984:	98 85       	ldd	r25, Y+8	; 0x08
     986:	fc 01       	movw	r30, r24
     988:	80 81       	ld	r24, Z
     98a:	91 81       	ldd	r25, Z+1	; 0x01
     98c:	fc 01       	movw	r30, r24
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	08 96       	adiw	r24, 0x08	; 8
     994:	fc 01       	movw	r30, r24
     996:	20 81       	ld	r18, Z
     998:	31 81       	ldd	r19, Z+1	; 0x01
     99a:	8f 81       	ldd	r24, Y+7	; 0x07
     99c:	98 85       	ldd	r25, Y+8	; 0x08
     99e:	fc 01       	movw	r30, r24
     9a0:	80 81       	ld	r24, Z
     9a2:	91 81       	ldd	r25, Z+1	; 0x01
     9a4:	ae 01       	movw	r20, r28
     9a6:	4b 5f       	subi	r20, 0xFB	; 251
     9a8:	5f 4f       	sbci	r21, 0xFF	; 255
     9aa:	ba 01       	movw	r22, r20
     9ac:	f9 01       	movw	r30, r18
     9ae:	19 95       	eicall
     9b0:	21 e0       	ldi	r18, 0x01	; 1
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x54>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	22 23       	and	r18, r18
     9ba:	09 f4       	brne	.+2      	; 0x9be <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x5a>
     9bc:	86 c0       	rjmp	.+268    	; 0xaca <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x166>
	{
		//Get the number of bytes that should be contained in that message
		int numOfBytesInMsg = msgBuilder->getNumOfBytesForMessage(msgType);
     9be:	8f 81       	ldd	r24, Y+7	; 0x07
     9c0:	98 85       	ldd	r25, Y+8	; 0x08
     9c2:	fc 01       	movw	r30, r24
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	93 81       	ldd	r25, Z+3	; 0x03
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	06 96       	adiw	r24, 0x06	; 6
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 81       	ld	r18, Z
     9d4:	31 81       	ldd	r19, Z+1	; 0x01
     9d6:	4d 81       	ldd	r20, Y+5	; 0x05
     9d8:	8f 81       	ldd	r24, Y+7	; 0x07
     9da:	98 85       	ldd	r25, Y+8	; 0x08
     9dc:	fc 01       	movw	r30, r24
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	93 81       	ldd	r25, Z+3	; 0x03
     9e2:	64 2f       	mov	r22, r20
     9e4:	f9 01       	movw	r30, r18
     9e6:	19 95       	eicall
     9e8:	9c 83       	std	Y+4, r25	; 0x04
     9ea:	8b 83       	std	Y+3, r24	; 0x03
		
		
		if (numOfBytesInMsg > 0)
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	9c 81       	ldd	r25, Y+4	; 0x04
     9f0:	18 16       	cp	r1, r24
     9f2:	19 06       	cpc	r1, r25
     9f4:	0c f0       	brlt	.+2      	; 0x9f8 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x94>
     9f6:	66 c0       	rjmp	.+204    	; 0xac4 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x160>
		{
			//Reset the message builder so it's ready to construct the new message
			msgBuilder->initialize(numOfBytesInMsg, msgType);
     9f8:	4d 81       	ldd	r20, Y+5	; 0x05
     9fa:	8f 81       	ldd	r24, Y+7	; 0x07
     9fc:	98 85       	ldd	r25, Y+8	; 0x08
     9fe:	fc 01       	movw	r30, r24
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	2b 81       	ldd	r18, Y+3	; 0x03
     a06:	3c 81       	ldd	r19, Y+4	; 0x04
     a08:	b9 01       	movw	r22, r18
     a0a:	0e 94 71 06 	call	0xce2	; 0xce2 <_ZN10helicopter8messages14MessageBuilder10initializeEic>
			
			//Start reading the rest of the message. The first byte of the 
			//message was already read (the message type).
			for (int i = 1; i < numOfBytesInMsg; i++)
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	2f c0       	rjmp	.+94     	; 0xa76 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x112>
			{
				byte receivedByte = 0;
     a18:	1e 82       	std	Y+6, r1	; 0x06
				
				//Read the byte from the radio
				if (serialDriver->receiveByte(receivedByte) < 0)
     a1a:	8f 81       	ldd	r24, Y+7	; 0x07
     a1c:	98 85       	ldd	r25, Y+8	; 0x08
     a1e:	fc 01       	movw	r30, r24
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	08 96       	adiw	r24, 0x08	; 8
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 81       	ld	r18, Z
     a30:	31 81       	ldd	r19, Z+1	; 0x01
     a32:	8f 81       	ldd	r24, Y+7	; 0x07
     a34:	98 85       	ldd	r25, Y+8	; 0x08
     a36:	fc 01       	movw	r30, r24
     a38:	80 81       	ld	r24, Z
     a3a:	91 81       	ldd	r25, Z+1	; 0x01
     a3c:	ae 01       	movw	r20, r28
     a3e:	4a 5f       	subi	r20, 0xFA	; 250
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	ba 01       	movw	r22, r20
     a44:	f9 01       	movw	r30, r18
     a46:	19 95       	eicall
     a48:	89 2f       	mov	r24, r25
     a4a:	88 1f       	adc	r24, r24
     a4c:	88 27       	eor	r24, r24
     a4e:	88 1f       	adc	r24, r24
     a50:	88 23       	and	r24, r24
     a52:	19 f0       	breq	.+6      	; 0xa5a <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0xf6>
				{
					//msg timed out
					return -1;
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	9f ef       	ldi	r25, 0xFF	; 255
     a58:	3a c0       	rjmp	.+116    	; 0xace <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x16a>
				}else
				{
					msgBuilder->addByte(receivedByte);
     a5a:	2e 81       	ldd	r18, Y+6	; 0x06
     a5c:	8f 81       	ldd	r24, Y+7	; 0x07
     a5e:	98 85       	ldd	r25, Y+8	; 0x08
     a60:	fc 01       	movw	r30, r24
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	62 2f       	mov	r22, r18
     a68:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN10helicopter8messages14MessageBuilder7addByteEc>
			//Reset the message builder so it's ready to construct the new message
			msgBuilder->initialize(numOfBytesInMsg, msgType);
			
			//Start reading the rest of the message. The first byte of the 
			//message was already read (the message type).
			for (int i = 1; i < numOfBytesInMsg; i++)
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	9a 83       	std	Y+2, r25	; 0x02
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	29 81       	ldd	r18, Y+1	; 0x01
     a7a:	3a 81       	ldd	r19, Y+2	; 0x02
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	9c 81       	ldd	r25, Y+4	; 0x04
     a80:	28 17       	cp	r18, r24
     a82:	39 07       	cpc	r19, r25
     a84:	0c f0       	brlt	.+2      	; 0xa88 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x124>
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	44 23       	and	r20, r20
     a8a:	31 f6       	brne	.-116    	; 0xa18 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0xb4>
				{
					msgBuilder->addByte(receivedByte);
				}
			}
			
			receivedMessage = msgBuilder->buildMessage();
     a8c:	8f 81       	ldd	r24, Y+7	; 0x07
     a8e:	98 85       	ldd	r25, Y+8	; 0x08
     a90:	fc 01       	movw	r30, r24
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	04 96       	adiw	r24, 0x04	; 4
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 81       	ld	r18, Z
     aa2:	31 81       	ldd	r19, Z+1	; 0x01
     aa4:	8f 81       	ldd	r24, Y+7	; 0x07
     aa6:	98 85       	ldd	r25, Y+8	; 0x08
     aa8:	fc 01       	movw	r30, r24
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	93 81       	ldd	r25, Z+3	; 0x03
     aae:	f9 01       	movw	r30, r18
     ab0:	19 95       	eicall
     ab2:	9c 01       	movw	r18, r24
     ab4:	89 85       	ldd	r24, Y+9	; 0x09
     ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab8:	fc 01       	movw	r30, r24
     aba:	31 83       	std	Z+1, r19	; 0x01
     abc:	20 83       	st	Z, r18
	{
		//failed to receive the message type byte / timeout
		return -3;
	}
	
	return 0;
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	05 c0       	rjmp	.+10     	; 0xace <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x16a>
			
			receivedMessage = msgBuilder->buildMessage();
		}else
		{
			//Unknown message type
			return -2;
     ac4:	8e ef       	ldi	r24, 0xFE	; 254
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
     ac8:	02 c0       	rjmp	.+4      	; 0xace <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE+0x16a>
		}
	}else
	{
		//failed to receive the message type byte / timeout
		return -3;
     aca:	8d ef       	ldi	r24, 0xFD	; 253
     acc:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	return 0;
     ace:	2a 96       	adiw	r28, 0x0a	; 10
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <_ZN10helicopter8messages7MessageD1Ev>:
				int numBytesInMessage;
			
			public:
				Message (byte msgType, int numOfBytesInMessage);
					
				virtual ~Message() {}
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	1f 92       	push	r1
     ae6:	1f 92       	push	r1
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	22 e2       	ldi	r18, 0x22	; 34
     af6:	32 e0       	ldi	r19, 0x02	; 2
     af8:	fc 01       	movw	r30, r24
     afa:	31 83       	std	Z+1, r19	; 0x01
     afc:	20 83       	st	Z, r18
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	81 70       	andi	r24, 0x01	; 1
     b04:	99 27       	eor	r25, r25
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	21 f0       	breq	.+8      	; 0xb12 <_ZN10helicopter8messages7MessageD1Ev+0x32>
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <_ZN10helicopter8messages7MessageD0Ev>:
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	1f 92       	push	r1
     b22:	1f 92       	push	r1
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
     b30:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN10helicopter8messages7MessageD1Ev>
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <_ZN10helicopter8messages7MessageC1Eci>:

#include "Message.h"

using namespace helicopter::messages;

Message::Message (byte msgType, int numOfBytesInMessage):
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <_ZN10helicopter8messages7MessageC1Eci+0x6>
     b4c:	1f 92       	push	r1
     b4e:	1f 92       	push	r1
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6b 83       	std	Y+3, r22	; 0x03
     b5a:	5d 83       	std	Y+5, r21	; 0x05
     b5c:	4c 83       	std	Y+4, r20	; 0x04
msgType(msgType),
numBytesInMessage(numOfBytesInMessage)
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	22 e2       	ldi	r18, 0x22	; 34
     b64:	32 e0       	ldi	r19, 0x02	; 2
     b66:	fc 01       	movw	r30, r24
     b68:	31 83       	std	Z+1, r19	; 0x01
     b6a:	20 83       	st	Z, r18
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	2b 81       	ldd	r18, Y+3	; 0x03
     b72:	fc 01       	movw	r30, r24
     b74:	22 83       	std	Z+2, r18	; 0x02
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	2c 81       	ldd	r18, Y+4	; 0x04
     b7c:	3d 81       	ldd	r19, Y+5	; 0x05
     b7e:	fc 01       	movw	r30, r24
     b80:	34 83       	std	Z+4, r19	; 0x04
     b82:	23 83       	std	Z+3, r18	; 0x03
{
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <_ZN10helicopter8messages7Message8getBytesEv>:
/**
	* Returns the bytes in this message as an array of bytes where
	* the number of bytes is equal to whats returned by getNumOfBytes
	*/
byte* Message::getBytes()
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	1f 92       	push	r1
     b9a:	1f 92       	push	r1
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	9a 83       	std	Y+2, r25	; 0x02
     ba2:	89 83       	std	Y+1, r24	; 0x01
	return NULL;	
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <_ZN10helicopter8messages7Message12buildMessageEPc>:
	* object with the parsed values
	* @param message the message in byte structure to be parsed
	* to populate this object with data. 
	*/
void Message::buildMessage(byte *message)
{
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <_ZN10helicopter8messages7Message12buildMessageEPc+0x6>
     bb8:	1f 92       	push	r1
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	7c 83       	std	Y+4, r23	; 0x04
     bc4:	6b 83       	std	Y+3, r22	; 0x03
	
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <_ZN10helicopter8messages14MessageBuilderD1Ev>:
					
				virtual ~MessageBuilder() {}
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	1f 92       	push	r1
     bda:	1f 92       	push	r1
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	9a 83       	std	Y+2, r25	; 0x02
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	2e e2       	ldi	r18, 0x2E	; 46
     bea:	32 e0       	ldi	r19, 0x02	; 2
     bec:	fc 01       	movw	r30, r24
     bee:	31 83       	std	Z+1, r19	; 0x01
     bf0:	20 83       	st	Z, r18
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	81 70       	andi	r24, 0x01	; 1
     bf8:	99 27       	eor	r25, r25
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	21 f0       	breq	.+8      	; 0xc06 <_ZN10helicopter8messages14MessageBuilderD1Ev+0x32>
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <_ZN10helicopter8messages14MessageBuilderD0Ev>:
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	1f 92       	push	r1
     c16:	1f 92       	push	r1
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN10helicopter8messages14MessageBuilderD1Ev>
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <_ZN10helicopter8messages19SimTelemetryMessageC1Ev>:
			sizeof(msgType) +
			sizeof(magX) +
			sizeof(magY) +
			sizeof(magZ);
						
			SimTelemetryMessage(): Message(SimTelemetryMessageType, MessageSize),
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	1f 92       	push	r1
     c40:	1f 92       	push	r1
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
				magX(0),
				magY(0),
				magZ(0)
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	47 e0       	ldi	r20, 0x07	; 7
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN10helicopter8messages7MessageC1Eci>
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	2a e3       	ldi	r18, 0x3A	; 58
     c5e:	32 e0       	ldi	r19, 0x02	; 2
     c60:	fc 01       	movw	r30, r24
     c62:	31 83       	std	Z+1, r19	; 0x01
     c64:	20 83       	st	Z, r18
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	9a 81       	ldd	r25, Y+2	; 0x02
     c6a:	fc 01       	movw	r30, r24
     c6c:	16 82       	std	Z+6, r1	; 0x06
     c6e:	15 82       	std	Z+5, r1	; 0x05
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	fc 01       	movw	r30, r24
     c76:	10 86       	std	Z+8, r1	; 0x08
     c78:	17 82       	std	Z+7, r1	; 0x07
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	fc 01       	movw	r30, r24
     c80:	12 86       	std	Z+10, r1	; 0x0a
     c82:	11 86       	std	Z+9, r1	; 0x09
			{
				
			}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>:
				sizeof(msgType) +
				sizeof(magX) +
				sizeof(magY) +
				sizeof(magZ);
			
				SystemTelemetryMessage(): Message(SystemTelemetryMessageType, MessageSize),
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	1f 92       	push	r1
     c94:	1f 92       	push	r1
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	89 83       	std	Y+1, r24	; 0x01
					magX(0),
					magY(0),
					magZ(0)
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	47 e0       	ldi	r20, 0x07	; 7
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN10helicopter8messages7MessageC1Eci>
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	26 e4       	ldi	r18, 0x46	; 70
     cb2:	32 e0       	ldi	r19, 0x02	; 2
     cb4:	fc 01       	movw	r30, r24
     cb6:	31 83       	std	Z+1, r19	; 0x01
     cb8:	20 83       	st	Z, r18
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	fc 01       	movw	r30, r24
     cc0:	16 82       	std	Z+6, r1	; 0x06
     cc2:	15 82       	std	Z+5, r1	; 0x05
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	fc 01       	movw	r30, r24
     cca:	10 86       	std	Z+8, r1	; 0x08
     ccc:	17 82       	std	Z+7, r1	; 0x07
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	fc 01       	movw	r30, r24
     cd4:	12 86       	std	Z+10, r1	; 0x0a
     cd6:	11 86       	std	Z+9, r1	; 0x09
				{
				
				}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <_ZN10helicopter8messages14MessageBuilder10initializeEic>:
#include "SystemTelemetryMessage.h"

using namespace helicopter::messages;

void MessageBuilder::initialize(int numOfBytesInMessage, byte messageType)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <_ZN10helicopter8messages14MessageBuilder10initializeEic+0x6>
     ce8:	1f 92       	push	r1
     cea:	1f 92       	push	r1
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	7c 83       	std	Y+4, r23	; 0x04
     cf6:	6b 83       	std	Y+3, r22	; 0x03
     cf8:	4d 83       	std	Y+5, r20	; 0x05
	if (internalMessage != NULL)
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	fc 01       	movw	r30, r24
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	61 f0       	breq	.+24     	; 0xd20 <_ZN10helicopter8messages14MessageBuilder10initializeEic+0x3e>
	{
		delete internalMessage;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	fc 01       	movw	r30, r24
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
		
		internalMessage = NULL;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	fc 01       	movw	r30, r24
     d1c:	13 82       	std	Z+3, r1	; 0x03
     d1e:	12 82       	std	Z+2, r1	; 0x02
	}
	
	this->messageType = messageType;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	2d 81       	ldd	r18, Y+5	; 0x05
     d26:	fc 01       	movw	r30, r24
     d28:	26 83       	std	Z+6, r18	; 0x06
	
	internalMessage = new byte[numOfBytesInMessage];
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_Znaj>
     d32:	9c 01       	movw	r18, r24
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	fc 01       	movw	r30, r24
     d3a:	33 83       	std	Z+3, r19	; 0x03
     d3c:	22 83       	std	Z+2, r18	; 0x02
	
	internalMessageCounter = 0;
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	fc 01       	movw	r30, r24
     d44:	15 82       	std	Z+5, r1	; 0x05
     d46:	14 82       	std	Z+4, r1	; 0x04
	
	internalMessage[internalMessageCounter++] = messageType;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	fc 01       	movw	r30, r24
     d4e:	42 81       	ldd	r20, Z+2	; 0x02
     d50:	53 81       	ldd	r21, Z+3	; 0x03
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	fc 01       	movw	r30, r24
     d58:	84 81       	ldd	r24, Z+4	; 0x04
     d5a:	95 81       	ldd	r25, Z+5	; 0x05
     d5c:	9c 01       	movw	r18, r24
     d5e:	24 0f       	add	r18, r20
     d60:	35 1f       	adc	r19, r21
     d62:	4d 81       	ldd	r20, Y+5	; 0x05
     d64:	f9 01       	movw	r30, r18
     d66:	40 83       	st	Z, r20
     d68:	9c 01       	movw	r18, r24
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	fc 01       	movw	r30, r24
     d74:	35 83       	std	Z+5, r19	; 0x05
     d76:	24 83       	std	Z+4, r18	; 0x04
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <_ZN10helicopter8messages14MessageBuilder7addByteEc>:

void MessageBuilder::addByte(byte byteToAdd)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <_ZN10helicopter8messages14MessageBuilder7addByteEc+0x6>
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	6b 83       	std	Y+3, r22	; 0x03
	internalMessage[internalMessageCounter++] = byteToAdd;
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	fc 01       	movw	r30, r24
     d9e:	42 81       	ldd	r20, Z+2	; 0x02
     da0:	53 81       	ldd	r21, Z+3	; 0x03
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	fc 01       	movw	r30, r24
     da8:	84 81       	ldd	r24, Z+4	; 0x04
     daa:	95 81       	ldd	r25, Z+5	; 0x05
     dac:	9c 01       	movw	r18, r24
     dae:	24 0f       	add	r18, r20
     db0:	35 1f       	adc	r19, r21
     db2:	4b 81       	ldd	r20, Y+3	; 0x03
     db4:	f9 01       	movw	r30, r18
     db6:	40 83       	st	Z, r20
     db8:	9c 01       	movw	r18, r24
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	fc 01       	movw	r30, r24
     dc4:	35 83       	std	Z+5, r19	; 0x05
     dc6:	24 83       	std	Z+4, r18	; 0x04
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc>:

int MessageBuilder::getNumOfBytesForMessage(byte messageType)
{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x6>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	6b 83       	std	Y+3, r22	; 0x03
	if (messageType == SimTelemetryMessage::SimTelemetryMessageType)
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	19 f4       	brne	.+6      	; 0xdf0 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x1c>
	{
		return SimTelemetryMessage::MessageSize;
     dea:	87 e0       	ldi	r24, 0x07	; 7
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	08 c0       	rjmp	.+16     	; 0xe00 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x2c>
	}else if (messageType == SystemTelemetryMessage::SystemTelemetryMessageType)
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	19 f4       	brne	.+6      	; 0xdfc <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x28>
	{
		return SystemTelemetryMessage::MessageSize;
     df6:	87 e0       	ldi	r24, 0x07	; 7
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <_ZN10helicopter8messages14MessageBuilder23getNumOfBytesForMessageEc+0x2c>
	}
	
	return 0;
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <_ZN10helicopter8messages14MessageBuilder12buildMessageEv>:

Message *MessageBuilder::buildMessage()
{
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	00 d0       	rcall	.+0      	; 0xe16 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0xa>
     e16:	1f 92       	push	r1
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	8b 83       	std	Y+3, r24	; 0x03
	Message *message = NULL;
     e20:	1a 82       	std	Y+2, r1	; 0x02
     e22:	19 82       	std	Y+1, r1	; 0x01
	
	if (messageType == SimTelemetryMessage::SimTelemetryMessageType)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	fc 01       	movw	r30, r24
     e2a:	86 81       	ldd	r24, Z+6	; 0x06
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	59 f4       	brne	.+22     	; 0xe46 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x3a>
	{
		message = new SimTelemetryMessage();
     e30:	8b e0       	ldi	r24, 0x0B	; 11
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     e38:	8c 01       	movw	r16, r24
     e3a:	c8 01       	movw	r24, r16
     e3c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_ZN10helicopter8messages19SimTelemetryMessageC1Ev>
     e40:	1a 83       	std	Y+2, r17	; 0x02
     e42:	09 83       	std	Y+1, r16	; 0x01
     e44:	10 c0       	rjmp	.+32     	; 0xe66 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x5a>
	}else if (messageType == SystemTelemetryMessage::SystemTelemetryMessageType)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	fc 01       	movw	r30, r24
     e4c:	86 81       	ldd	r24, Z+6	; 0x06
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	51 f4       	brne	.+20     	; 0xe66 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x5a>
	{
		message = new SystemTelemetryMessage();
     e52:	8b e0       	ldi	r24, 0x0B	; 11
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
     e5a:	8c 01       	movw	r16, r24
     e5c:	c8 01       	movw	r24, r16
     e5e:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
     e62:	1a 83       	std	Y+2, r17	; 0x02
     e64:	09 83       	std	Y+1, r16	; 0x01
	}
	
	if (message != NULL)
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	99 f0       	breq	.+38     	; 0xe94 <_ZN10helicopter8messages14MessageBuilder12buildMessageEv+0x88>
	{
		message->buildMessage(internalMessage);
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	fc 01       	movw	r30, r24
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	06 96       	adiw	r24, 0x06	; 6
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 81       	ld	r18, Z
     e7e:	31 81       	ldd	r19, Z+1	; 0x01
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	fc 01       	movw	r30, r24
     e86:	42 81       	ldd	r20, Z+2	; 0x02
     e88:	53 81       	ldd	r21, Z+3	; 0x03
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	ba 01       	movw	r22, r20
     e90:	f9 01       	movw	r30, r18
     e92:	19 95       	eicall
	}
	//TODO IMPLEMENT
	//do a bunch of switch statements on which message to build.
	
	return message;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <_ZN10helicopter8messages19SimTelemetryMessageD1Ev>:
	
			~SimTelemetryMessage() {}
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	1f 92       	push	r1
     eb0:	1f 92       	push	r1
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	2a e3       	ldi	r18, 0x3A	; 58
     ec0:	32 e0       	ldi	r19, 0x02	; 2
     ec2:	fc 01       	movw	r30, r24
     ec4:	31 83       	std	Z+1, r19	; 0x01
     ec6:	20 83       	st	Z, r18
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN10helicopter8messages7MessageD1Ev>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	81 70       	andi	r24, 0x01	; 1
     ed6:	99 27       	eor	r25, r25
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	21 f0       	breq	.+8      	; 0xee4 <_ZN10helicopter8messages19SimTelemetryMessageD1Ev+0x3a>
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <_ZN10helicopter8messages19SimTelemetryMessageD0Ev>:
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	1f 92       	push	r1
     ef4:	1f 92       	push	r1
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN10helicopter8messages19SimTelemetryMessageD1Ev>
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_ZN10helicopter8messages19SimTelemetryMessage8getBytesEv>:
#include "SimTelemetryMessage.h"

using namespace helicopter::messages;

byte *SimTelemetryMessage::getBytes()
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_ZN10helicopter8messages19SimTelemetryMessage8getBytesEv+0x6>
     f1e:	1f 92       	push	r1
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
	byte *msg = new byte[MessageSize];
     f28:	87 e0       	ldi	r24, 0x07	; 7
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_Znaj>
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	msg[0] = this->msgType;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	fc 01       	movw	r30, r24
     f3a:	22 81       	ldd	r18, Z+2	; 0x02
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
	
	msg++;
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
	memcpy(msg, &magX, sizeof(magX));
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	9c 01       	movw	r18, r24
     f54:	2b 5f       	subi	r18, 0xFB	; 251
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	42 e0       	ldi	r20, 0x02	; 2
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	b9 01       	movw	r22, r18
     f62:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
	
	msg += sizeof(magX);
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	02 96       	adiw	r24, 0x02	; 2
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
	memcpy(msg, &magY, sizeof(magY));
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	9c 01       	movw	r18, r24
     f76:	29 5f       	subi	r18, 0xF9	; 249
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	42 e0       	ldi	r20, 0x02	; 2
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	b9 01       	movw	r22, r18
     f84:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
	
	msg += sizeof(magY);
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	02 96       	adiw	r24, 0x02	; 2
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01
	memcpy(msg, &magZ, sizeof(magZ));
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	9c 01       	movw	r18, r24
     f98:	27 5f       	subi	r18, 0xF7	; 247
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	42 e0       	ldi	r20, 0x02	; 2
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	b9 01       	movw	r22, r18
     fa6:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
		
	return msg;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc>:
	
void SimTelemetryMessage::buildMessage(byte *message)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc+0x6>
     fc2:	1f 92       	push	r1
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	7c 83       	std	Y+4, r23	; 0x04
     fce:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	a9 f1       	breq	.+106    	; 0x1042 <_ZN10helicopter8messages19SimTelemetryMessage12buildMessageEPc+0x86>
	{
		msgType = message[0];
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	fc 01       	movw	r30, r24
     fde:	20 81       	ld	r18, Z
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	fc 01       	movw	r30, r24
     fe6:	22 83       	std	Z+2, r18	; 0x02
		
		message++;
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magX, message, sizeof(magX));
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	05 96       	adiw	r24, 0x05	; 5
     ff8:	2b 81       	ldd	r18, Y+3	; 0x03
     ffa:	3c 81       	ldd	r19, Y+4	; 0x04
     ffc:	42 e0       	ldi	r20, 0x02	; 2
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	b9 01       	movw	r22, r18
    1002:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
		
		message += sizeof(magX);
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	02 96       	adiw	r24, 0x02	; 2
    100c:	9c 83       	std	Y+4, r25	; 0x04
    100e:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magY, message, sizeof(magY));
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	07 96       	adiw	r24, 0x07	; 7
    1016:	2b 81       	ldd	r18, Y+3	; 0x03
    1018:	3c 81       	ldd	r19, Y+4	; 0x04
    101a:	42 e0       	ldi	r20, 0x02	; 2
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	b9 01       	movw	r22, r18
    1020:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
		
		message += sizeof(magY);
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	02 96       	adiw	r24, 0x02	; 2
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magZ, message, sizeof(magZ));
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	09 96       	adiw	r24, 0x09	; 9
    1034:	2b 81       	ldd	r18, Y+3	; 0x03
    1036:	3c 81       	ldd	r19, Y+4	; 0x04
    1038:	42 e0       	ldi	r20, 0x02	; 2
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	b9 01       	movw	r22, r18
    103e:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
	}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
			
				~SystemTelemetryMessage() {}
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	1f 92       	push	r1
    1056:	1f 92       	push	r1
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	26 e4       	ldi	r18, 0x46	; 70
    1066:	32 e0       	ldi	r19, 0x02	; 2
    1068:	fc 01       	movw	r30, r24
    106a:	31 83       	std	Z+1, r19	; 0x01
    106c:	20 83       	st	Z, r18
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN10helicopter8messages7MessageD1Ev>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	99 27       	eor	r25, r25
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	21 f0       	breq	.+8      	; 0x108a <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev+0x3a>
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	1f 92       	push	r1
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZdlPv>
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:
#include <string.h>

using namespace helicopter::messages;

byte *SystemTelemetryMessage::getBytes()
{
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv+0x8>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
	byte *msg = new byte[MessageSize];
    10ce:	87 e0       	ldi	r24, 0x07	; 7
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_Znaj>
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
	byte *msgPtr = msg;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
	msgPtr[0] = this->msgType;
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	fc 01       	movw	r30, r24
    10e8:	22 81       	ldd	r18, Z+2	; 0x02
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 83       	st	Z, r18
	
	msgPtr++;
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magX, sizeof(magX));
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	9c 01       	movw	r18, r24
    1102:	2b 5f       	subi	r18, 0xFB	; 251
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	42 e0       	ldi	r20, 0x02	; 2
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	b9 01       	movw	r22, r18
    1110:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
	
	msgPtr += sizeof(magX);
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	02 96       	adiw	r24, 0x02	; 2
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magY, sizeof(magY));
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	9c 01       	movw	r18, r24
    1124:	29 5f       	subi	r18, 0xF9	; 249
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	42 e0       	ldi	r20, 0x02	; 2
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	b9 01       	movw	r22, r18
    1132:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
	
	msgPtr += sizeof(magY);
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	02 96       	adiw	r24, 0x02	; 2
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
	memcpy(msgPtr, &magZ, sizeof(magZ));
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	9c 01       	movw	r18, r24
    1146:	27 5f       	subi	r18, 0xF7	; 247
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	42 e0       	ldi	r20, 0x02	; 2
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	b9 01       	movw	r22, r18
    1154:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
	
	return msg;
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    115c:	26 96       	adiw	r28, 0x06	; 6
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	00 d0       	rcall	.+0      	; 0x1174 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x6>
    1174:	1f 92       	push	r1
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	7c 83       	std	Y+4, r23	; 0x04
    1180:	6b 83       	std	Y+3, r22	; 0x03
	if (message != NULL)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	a9 f1       	breq	.+106    	; 0x11f4 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPc+0x86>
	{
		msgType = message[0];
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	fc 01       	movw	r30, r24
    1190:	20 81       	ld	r18, Z
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	fc 01       	movw	r30, r24
    1198:	22 83       	std	Z+2, r18	; 0x02
		
		message++;
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magX, message, sizeof(magX));
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	05 96       	adiw	r24, 0x05	; 5
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	42 e0       	ldi	r20, 0x02	; 2
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	b9 01       	movw	r22, r18
    11b4:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
		
		message += sizeof(magX);
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	02 96       	adiw	r24, 0x02	; 2
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magY, message, sizeof(magY));
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	07 96       	adiw	r24, 0x07	; 7
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	42 e0       	ldi	r20, 0x02	; 2
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	b9 01       	movw	r22, r18
    11d2:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
		
		message += sizeof(magY);
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	02 96       	adiw	r24, 0x02	; 2
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
		memcpy(&magZ, message, sizeof(magZ));
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	09 96       	adiw	r24, 0x09	; 9
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	42 e0       	ldi	r20, 0x02	; 2
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	b9 01       	movw	r22, r18
    11f0:	0e 94 21 11 	call	0x2242	; 0x2242 <memcpy>
	}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <_ZNK10helicopter5model11SystemModel7RawMagXEv>:
			
			int RawMagX() const { return rawMagX; }
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	1f 92       	push	r1
    1208:	1f 92       	push	r1
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	fc 01       	movw	r30, r24
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <_ZNK10helicopter5model11SystemModel7RawMagYEv>:
			void RawMagX(int val) { rawMagX = val; }
			
			int RawMagY() const { return rawMagY; }
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	1f 92       	push	r1
    122c:	1f 92       	push	r1
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	fc 01       	movw	r30, r24
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <_ZNK10helicopter5model11SystemModel7RawMagZEv>:
			void RawMagY(int val) { rawMagY = val; }
			
			int RawMagZ() const { return rawMagZ; }
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	1f 92       	push	r1
    1250:	1f 92       	push	r1
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	fc 01       	movw	r30, r24
    1260:	84 81       	ldd	r24, Z+4	; 0x04
    1262:	95 81       	ldd	r25, Z+5	; 0x05
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	08 95       	ret

0000126e <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>:
				byte *getBytes();
			
				void buildMessage(byte *message);
			
				int MagX() const { return magX; }
				void MagX(int val) { magX = val; }
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	00 d0       	rcall	.+0      	; 0x1274 <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi+0x6>
    1274:	1f 92       	push	r1
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	7c 83       	std	Y+4, r23	; 0x04
    1280:	6b 83       	std	Y+3, r22	; 0x03
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	fc 01       	movw	r30, r24
    128c:	36 83       	std	Z+6, r19	; 0x06
    128e:	25 83       	std	Z+5, r18	; 0x05
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>:
			
				int MagY() const { return magY; }
				void MagY(int val) { magY = val; }
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi+0x6>
    12a4:	1f 92       	push	r1
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	7c 83       	std	Y+4, r23	; 0x04
    12b0:	6b 83       	std	Y+3, r22	; 0x03
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	fc 01       	movw	r30, r24
    12bc:	30 87       	std	Z+8, r19	; 0x08
    12be:	27 83       	std	Z+7, r18	; 0x07
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>:
			
				int MagZ() const { return magZ; }
				void MagZ(int val) { magZ = val; }
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi+0x6>
    12d4:	1f 92       	push	r1
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	7c 83       	std	Y+4, r23	; 0x04
    12e0:	6b 83       	std	Y+3, r22	; 0x03
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	fc 01       	movw	r30, r24
    12ec:	32 87       	std	Z+10, r19	; 0x0a
    12ee:	21 87       	std	Z+9, r18	; 0x09
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>:

using namespace helicopter::model;


Message *SystemModel::CreateTelemetryMessage()
{
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	00 d0       	rcall	.+0      	; 0x1308 <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv+0xa>
    1308:	1f 92       	push	r1
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    1312:	8b e0       	ldi	r24, 0x0B	; 11
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
    131a:	8c 01       	movw	r16, r24
    131c:	c8 01       	movw	r24, r16
    131e:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN10helicopter8messages22SystemTelemetryMessageC1Ev>
    1322:	1a 83       	std	Y+2, r17	; 0x02
    1324:	09 83       	std	Y+1, r16	; 0x01
	
	message->MagX(RawMagX());
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZNK10helicopter5model11SystemModel7RawMagXEv>
    132e:	9c 01       	movw	r18, r24
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN10helicopter8messages22SystemTelemetryMessage4MagXEi>
	message->MagY(RawMagY());
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZNK10helicopter5model11SystemModel7RawMagYEv>
    1342:	9c 01       	movw	r18, r24
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	b9 01       	movw	r22, r18
    134a:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN10helicopter8messages22SystemTelemetryMessage4MagYEi>
	message->MagZ(RawMagZ());
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	0e 94 25 09 	call	0x124a	; 0x124a <_ZNK10helicopter5model11SystemModel7RawMagZEv>
    1356:	9c 01       	movw	r18, r24
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	b9 01       	movw	r22, r18
    135e:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN10helicopter8messages22SystemTelemetryMessage4MagZEi>
	
	return message;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <_ZN10helicopter5tasks4Task8getDelayEv>:
				Task (int delay, int period);
				virtual void init(){;}
				virtual void runTask();
				
					
				int getDelay()
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	1f 92       	push	r1
    137e:	1f 92       	push	r1
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01
				{
					return delay;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	fc 01       	movw	r30, r24
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
				}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <_ZN10helicopter5tasks4Task9getPeriodEv>:
				
				int getPeriod()
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	1f 92       	push	r1
    13a2:	1f 92       	push	r1
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
				{
					return period;
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	fc 01       	movw	r30, r24
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	95 81       	ldd	r25, Z+5	; 0x05
				}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <_ZN10helicopter5tasks4Task8setDelayEi>:
				
				void setDelay(int delay)
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <_ZN10helicopter5tasks4Task8setDelayEi+0x6>
    13c6:	1f 92       	push	r1
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	7c 83       	std	Y+4, r23	; 0x04
    13d2:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->delay = delay;
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	fc 01       	movw	r30, r24
    13de:	33 83       	std	Z+3, r19	; 0x03
    13e0:	22 83       	std	Z+2, r18	; 0x02
				}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>:
				
				bool getIsReadyToRun()
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	1f 92       	push	r1
    13f6:	1f 92       	push	r1
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
				{
					return isReadyToRun;
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	fc 01       	movw	r30, r24
    1406:	86 81       	ldd	r24, Z+6	; 0x06
				}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>:
				
				void setIsReadyToRun(bool isReadyToRun)
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	00 d0       	rcall	.+0      	; 0x1418 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb+0x6>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6b 83       	std	Y+3, r22	; 0x03
				{
					this->isReadyToRun = isReadyToRun;
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	2b 81       	ldd	r18, Y+3	; 0x03
    1428:	fc 01       	movw	r30, r24
    142a:	26 83       	std	Z+6, r18	; 0x06
				}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <_ZN10helicopter5tasks4Task11reduceDelayEv>:
				
				void reduceDelay()
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	1f 92       	push	r1
    143e:	1f 92       	push	r1
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
				{
					delay--;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	fc 01       	movw	r30, r24
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	9c 01       	movw	r18, r24
    1454:	21 50       	subi	r18, 0x01	; 1
    1456:	31 09       	sbc	r19, r1
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	fc 01       	movw	r30, r24
    145e:	33 83       	std	Z+3, r19	; 0x03
    1460:	22 83       	std	Z+2, r18	; 0x02
				}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>:
			    /*
				* Starts the timer for task execution.
				*/
				void start();
				
				int getNumOfTasks()
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	1f 92       	push	r1
    1472:	1f 92       	push	r1
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
				{
					return numOfTasks;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	fc 01       	movw	r30, r24
    1482:	84 89       	ldd	r24, Z+20	; 0x14
    1484:	95 89       	ldd	r25, Z+21	; 0x15
				}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>:
				
				Task **getTasks()
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	1f 92       	push	r1
    1496:	1f 92       	push	r1
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
				{
					return tasks;
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
				}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	if (scheduler == NULL)
    14ba:	80 91 6c 02 	lds	r24, 0x026C
    14be:	90 91 6d 02 	lds	r25, 0x026D
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	81 f4       	brne	.+32     	; 0x14e6 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x38>
	{
		//scheduler = new Scheduler(124, 8);
		scheduler = new Scheduler(TARGET_TIMER_COUNT, TIMER_PRESCALER);
    14c6:	8a e1       	ldi	r24, 0x1A	; 26
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Znwj>
    14ce:	8c 01       	movw	r16, r24
    14d0:	40 e4       	ldi	r20, 0x40	; 64
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	62 ee       	ldi	r22, 0xE2	; 226
    14d6:	74 e0       	ldi	r23, 0x04	; 4
    14d8:	c8 01       	movw	r24, r16
    14da:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>
    14de:	10 93 6d 02 	sts	0x026D, r17
    14e2:	00 93 6c 02 	sts	0x026C, r16
	}
	
	return scheduler;
    14e6:	80 91 6c 02 	lds	r24, 0x026C
    14ea:	90 91 6d 02 	lds	r25, 0x026D
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER>:

Scheduler::Scheduler(int targetTimerCount, PRESCALER prescale)
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <_ZN10helicopter9scheduler9SchedulerC1Ei9PRESCALER+0x8>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	7c 83       	std	Y+4, r23	; 0x04
    150a:	6b 83       	std	Y+3, r22	; 0x03
    150c:	5e 83       	std	Y+6, r21	; 0x06
    150e:	4d 83       	std	Y+5, r20	; 0x05
{
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	fc 01       	movw	r30, r24
    151a:	37 8b       	std	Z+23, r19	; 0x17
    151c:	26 8b       	std	Z+22, r18	; 0x16

	this->prescaler = prescale;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	2d 81       	ldd	r18, Y+5	; 0x05
    1524:	3e 81       	ldd	r19, Y+6	; 0x06
    1526:	fc 01       	movw	r30, r24
    1528:	31 8f       	std	Z+25, r19	; 0x19
    152a:	20 8f       	std	Z+24, r18	; 0x18
	
	numOfTasks = 0;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	fc 01       	movw	r30, r24
    1532:	15 8a       	std	Z+21, r1	; 0x15
    1534:	14 8a       	std	Z+20, r1	; 0x14
}
    1536:	26 96       	adiw	r28, 0x06	; 6
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
{
	
}

int Scheduler::addTask(Task *task)
{
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 d0       	rcall	.+0      	; 0x154e <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x6>
    154e:	1f 92       	push	r1
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	7c 83       	std	Y+4, r23	; 0x04
    155a:	6b 83       	std	Y+3, r22	; 0x03
	if (numOfTasks < MAXNUMOFTASKS)
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	fc 01       	movw	r30, r24
    1562:	84 89       	ldd	r24, Z+20	; 0x14
    1564:	95 89       	ldd	r25, Z+21	; 0x15
    1566:	8a 30       	cpi	r24, 0x0A	; 10
    1568:	91 05       	cpc	r25, r1
    156a:	04 f5       	brge	.+64     	; 0x15ac <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x64>
	{
		tasks[numOfTasks] = task;
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	fc 01       	movw	r30, r24
    1572:	84 89       	ldd	r24, Z+20	; 0x14
    1574:	95 89       	ldd	r25, Z+21	; 0x15
    1576:	29 81       	ldd	r18, Y+1	; 0x01
    1578:	3a 81       	ldd	r19, Y+2	; 0x02
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	82 0f       	add	r24, r18
    1580:	93 1f       	adc	r25, r19
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	fc 01       	movw	r30, r24
    1588:	31 83       	std	Z+1, r19	; 0x01
    158a:	20 83       	st	Z, r18
		numOfTasks++;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	fc 01       	movw	r30, r24
    1592:	84 89       	ldd	r24, Z+20	; 0x14
    1594:	95 89       	ldd	r25, Z+21	; 0x15
    1596:	9c 01       	movw	r18, r24
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	fc 01       	movw	r30, r24
    15a2:	35 8b       	std	Z+21, r19	; 0x15
    15a4:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x68>
	}

	return -1;
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	9f ef       	ldi	r25, 0xFF	; 255
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <_ZN10helicopter9scheduler9Scheduler4initEv+0x6>
    15c4:	1f 92       	push	r1
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9c 83       	std	Y+4, r25	; 0x04
    15cc:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < numOfTasks; i++)
    15ce:	1a 82       	std	Y+2, r1	; 0x02
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	24 c0       	rjmp	.+72     	; 0x161c <_ZN10helicopter9scheduler9Scheduler4initEv+0x5e>
	{
		tasks[i]->init();
    15d4:	2b 81       	ldd	r18, Y+3	; 0x03
    15d6:	3c 81       	ldd	r19, Y+4	; 0x04
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	82 0f       	add	r24, r18
    15e2:	93 1f       	adc	r25, r19
    15e4:	fc 01       	movw	r30, r24
    15e6:	80 81       	ld	r24, Z
    15e8:	91 81       	ldd	r25, Z+1	; 0x01
    15ea:	fc 01       	movw	r30, r24
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	02 96       	adiw	r24, 0x02	; 2
    15f2:	fc 01       	movw	r30, r24
    15f4:	20 81       	ld	r18, Z
    15f6:	31 81       	ldd	r19, Z+1	; 0x01
    15f8:	4b 81       	ldd	r20, Y+3	; 0x03
    15fa:	5c 81       	ldd	r21, Y+4	; 0x04
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	84 0f       	add	r24, r20
    1606:	95 1f       	adc	r25, r21
    1608:	fc 01       	movw	r30, r24
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	f9 01       	movw	r30, r18
    1610:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	fc 01       	movw	r30, r24
    1622:	24 89       	ldd	r18, Z+20	; 0x14
    1624:	35 89       	ldd	r19, Z+21	; 0x15
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	82 17       	cp	r24, r18
    162e:	93 07       	cpc	r25, r19
    1630:	0c f0       	brlt	.+2      	; 0x1634 <_ZN10helicopter9scheduler9Scheduler4initEv+0x76>
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	44 23       	and	r20, r20
    1636:	71 f6       	brne	.-100    	; 0x15d4 <_ZN10helicopter9scheduler9Scheduler4initEv+0x16>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    1638:	88 e8       	ldi	r24, 0x88	; 136
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	f9 01       	movw	r30, r18
    1642:	26 89       	ldd	r18, Z+22	; 0x16
    1644:	37 89       	ldd	r19, Z+23	; 0x17
    1646:	fc 01       	movw	r30, r24
    1648:	31 83       	std	Z+1, r19	; 0x01
    164a:	20 83       	st	Z, r18
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    164c:	81 e8       	ldi	r24, 0x81	; 129
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	21 e8       	ldi	r18, 0x81	; 129
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	f9 01       	movw	r30, r18
    1656:	20 81       	ld	r18, Z
    1658:	28 60       	ori	r18, 0x08	; 8
    165a:	fc 01       	movw	r30, r24
    165c:	20 83       	st	Z, r18
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    165e:	8f e6       	ldi	r24, 0x6F	; 111
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	2f e6       	ldi	r18, 0x6F	; 111
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	f9 01       	movw	r30, r18
    1668:	20 81       	ld	r18, Z
    166a:	22 60       	ori	r18, 0x02	; 2
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18
		
	sei(); //Enable global interrupts
    1670:	78 94       	sei
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	00 d0       	rcall	.+0      	; 0x1686 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x8>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
	Task *task = NULL;
    1690:	1c 82       	std	Y+4, r1	; 0x04
    1692:	1b 82       	std	Y+3, r1	; 0x03
		
	for (int i = 0; i < numOfTasks; i++)
    1694:	1a 82       	std	Y+2, r1	; 0x02
    1696:	19 82       	std	Y+1, r1	; 0x01
    1698:	2f c0       	rjmp	.+94     	; 0x16f8 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x78>
	{
		task = scheduler->getTasks()[i];
    169a:	80 91 6c 02 	lds	r24, 0x026C
    169e:	90 91 6d 02 	lds	r25, 0x026D
    16a2:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    16a6:	9c 01       	movw	r18, r24
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
		
		if (task->getIsReadyToRun())
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN10helicopter5tasks4Task15getIsReadyToRunEv>
    16c6:	88 23       	and	r24, r24
    16c8:	91 f0       	breq	.+36     	; 0x16ee <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x6e>
		{
			task->setIsReadyToRun(false);
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->runTask();
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	04 96       	adiw	r24, 0x04	; 4
    16e0:	fc 01       	movw	r30, r24
    16e2:	20 81       	ld	r18, Z
    16e4:	31 81       	ldd	r19, Z+1	; 0x01
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	f9 01       	movw	r30, r18
    16ec:	19 95       	eicall

void Scheduler::dispatch()
{
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	fc 01       	movw	r30, r24
    16fe:	24 89       	ldd	r18, Z+20	; 0x14
    1700:	35 89       	ldd	r19, Z+21	; 0x15
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	82 17       	cp	r24, r18
    170a:	93 07       	cpc	r25, r19
    170c:	0c f0       	brlt	.+2      	; 0x1710 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x90>
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	44 23       	and	r20, r20
    1712:	19 f6       	brne	.-122    	; 0x169a <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x1a>
			task->setIsReadyToRun(false);
			task->runTask();
		}
	}
	
	set_sleep_mode(SLEEP_MODE_IDLE);
    1714:	83 e5       	ldi	r24, 0x53	; 83
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	23 e5       	ldi	r18, 0x53	; 83
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	f9 01       	movw	r30, r18
    171e:	20 81       	ld	r18, Z
    1720:	21 7f       	andi	r18, 0xF1	; 241
    1722:	fc 01       	movw	r30, r24
    1724:	20 83       	st	Z, r18
	sleep_mode();
    1726:	83 e5       	ldi	r24, 0x53	; 83
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	23 e5       	ldi	r18, 0x53	; 83
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	f9 01       	movw	r30, r18
    1730:	20 81       	ld	r18, Z
    1732:	21 60       	ori	r18, 0x01	; 1
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
    1738:	88 95       	sleep
    173a:	83 e5       	ldi	r24, 0x53	; 83
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	23 e5       	ldi	r18, 0x53	; 83
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	f9 01       	movw	r30, r18
    1744:	20 81       	ld	r18, Z
    1746:	2e 7f       	andi	r18, 0xFE	; 254
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
}
    174c:	26 96       	adiw	r28, 0x06	; 6
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	1f 92       	push	r1
    1764:	1f 92       	push	r1
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
	switch(this->prescaler)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	fc 01       	movw	r30, r24
    1774:	80 8d       	ldd	r24, Z+24	; 0x18
    1776:	91 8d       	ldd	r25, Z+25	; 0x19
    1778:	80 34       	cpi	r24, 0x40	; 64
    177a:	91 05       	cpc	r25, r1
    177c:	39 f1       	breq	.+78     	; 0x17cc <_ZN10helicopter9scheduler9Scheduler5startEv+0x6e>
    177e:	81 34       	cpi	r24, 0x41	; 65
    1780:	91 05       	cpc	r25, r1
    1782:	3c f4       	brge	.+14     	; 0x1792 <_ZN10helicopter9scheduler9Scheduler5startEv+0x34>
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	69 f0       	breq	.+26     	; 0x17a4 <_ZN10helicopter9scheduler9Scheduler5startEv+0x46>
    178a:	88 30       	cpi	r24, 0x08	; 8
    178c:	91 05       	cpc	r25, r1
    178e:	a1 f0       	breq	.+40     	; 0x17b8 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
    1790:	3b c0       	rjmp	.+118    	; 0x1808 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
    1792:	81 15       	cp	r24, r1
    1794:	f1 e0       	ldi	r31, 0x01	; 1
    1796:	9f 07       	cpc	r25, r31
    1798:	19 f1       	breq	.+70     	; 0x17e0 <_ZN10helicopter9scheduler9Scheduler5startEv+0x82>
    179a:	81 15       	cp	r24, r1
    179c:	24 e0       	ldi	r18, 0x04	; 4
    179e:	92 07       	cpc	r25, r18
    17a0:	49 f1       	breq	.+82     	; 0x17f4 <_ZN10helicopter9scheduler9Scheduler5startEv+0x96>
    17a2:	32 c0       	rjmp	.+100    	; 0x1808 <_ZN10helicopter9scheduler9Scheduler5startEv+0xaa>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    17a4:	81 e8       	ldi	r24, 0x81	; 129
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	21 e8       	ldi	r18, 0x81	; 129
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	f9 01       	movw	r30, r18
    17ae:	20 81       	ld	r18, Z
    17b0:	21 60       	ori	r18, 0x01	; 1
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
			break;
    17b6:	31 c0       	rjmp	.+98     	; 0x181a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 8:
			TCCR1B |= PrescaleByEight;
    17b8:	81 e8       	ldi	r24, 0x81	; 129
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	21 e8       	ldi	r18, 0x81	; 129
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	22 60       	ori	r18, 0x02	; 2
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
			break;
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    17cc:	81 e8       	ldi	r24, 0x81	; 129
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	21 e8       	ldi	r18, 0x81	; 129
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	f9 01       	movw	r30, r18
    17d6:	20 81       	ld	r18, Z
    17d8:	23 60       	ori	r18, 0x03	; 3
    17da:	fc 01       	movw	r30, r24
    17dc:	20 83       	st	Z, r18
			break;
    17de:	1d c0       	rjmp	.+58     	; 0x181a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    17e0:	81 e8       	ldi	r24, 0x81	; 129
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	21 e8       	ldi	r18, 0x81	; 129
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	f9 01       	movw	r30, r18
    17ea:	20 81       	ld	r18, Z
    17ec:	24 60       	ori	r18, 0x04	; 4
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
			break;
    17f2:	13 c0       	rjmp	.+38     	; 0x181a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    17f4:	81 e8       	ldi	r24, 0x81	; 129
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	21 e8       	ldi	r18, 0x81	; 129
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	f9 01       	movw	r30, r18
    17fe:	20 81       	ld	r18, Z
    1800:	25 60       	ori	r18, 0x05	; 5
    1802:	fc 01       	movw	r30, r24
    1804:	20 83       	st	Z, r18
			break;
    1806:	09 c0       	rjmp	.+18     	; 0x181a <_ZN10helicopter9scheduler9Scheduler5startEv+0xbc>
		default:
			TCCR1B |= NoPrescaling;	
    1808:	81 e8       	ldi	r24, 0x81	; 129
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	21 e8       	ldi	r18, 0x81	; 129
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	21 60       	ori	r18, 0x01	; 1
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	00 90 5f 00 	lds	r0, 0x005F
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	00 90 5b 00 	lds	r0, 0x005B
    1834:	0f 92       	push	r0
    1836:	2f 93       	push	r18
    1838:	3f 93       	push	r19
    183a:	4f 93       	push	r20
    183c:	5f 93       	push	r21
    183e:	6f 93       	push	r22
    1840:	7f 93       	push	r23
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	ef 93       	push	r30
    184c:	ff 93       	push	r31
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	00 d0       	rcall	.+0      	; 0x1854 <__vector_17+0x30>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <__vector_17+0x32>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	Scheduler *scheduler = Scheduler::getScheduler();
    185a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    185e:	9c 83       	std	Y+4, r25	; 0x04
    1860:	8b 83       	std	Y+3, r24	; 0x03
	
	Task *task = NULL;
    1862:	1e 82       	std	Y+6, r1	; 0x06
    1864:	1d 82       	std	Y+5, r1	; 0x05
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    1866:	1a 82       	std	Y+2, r1	; 0x02
    1868:	19 82       	std	Y+1, r1	; 0x01
    186a:	33 c0       	rjmp	.+102    	; 0x18d2 <__vector_17+0xae>
	{
		task = scheduler->getTasks()[i];
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN10helicopter9scheduler9Scheduler8getTasksEv>
    1874:	9c 01       	movw	r18, r24
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	82 0f       	add	r24, r18
    1880:	93 1f       	adc	r25, r19
    1882:	fc 01       	movw	r30, r24
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
		
		if (task->getDelay() == 0)
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN10helicopter5tasks4Task8getDelayEv>
    1894:	21 e0       	ldi	r18, 0x01	; 1
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	09 f0       	breq	.+2      	; 0x189c <__vector_17+0x78>
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	22 23       	and	r18, r18
    189e:	81 f0       	breq	.+32     	; 0x18c0 <__vector_17+0x9c>
		{
			task->setIsReadyToRun(true);
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN10helicopter5tasks4Task15setIsReadyToRunEb>
			task->setDelay(task->getPeriod());
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN10helicopter5tasks4Task9getPeriodEv>
    18b2:	9c 01       	movw	r18, r24
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	b9 01       	movw	r22, r18
    18ba:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN10helicopter5tasks4Task8setDelayEi>
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <__vector_17+0xa4>
		}else
		{
			task->reduceDelay();
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_ZN10helicopter5tasks4Task11reduceDelayEv>
{
	Scheduler *scheduler = Scheduler::getScheduler();
	
	Task *task = NULL;
	
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN10helicopter9scheduler9Scheduler13getNumOfTasksEv>
    18da:	9c 01       	movw	r18, r24
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	82 17       	cp	r24, r18
    18e4:	93 07       	cpc	r25, r19
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <__vector_17+0xc6>
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	44 23       	and	r20, r20
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <__vector_17+0xcc>
    18ee:	be cf       	rjmp	.-132    	; 0x186c <__vector_17+0x48>
		}else
		{
			task->reduceDelay();
		}
	}
}
    18f0:	26 96       	adiw	r28, 0x06	; 6
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	00 92 5b 00 	sts	0x005B, r0
    191e:	0f 90       	pop	r0
    1920:	00 92 5f 00 	sts	0x005F, r0
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <_ZN10helicopter5tasks4Task4initEv>:
			protected:
				virtual void runTaskImpl(){;}
				
			public:
				Task (int delay, int period);
				virtual void init(){;}
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	1f 92       	push	r1
    1930:	1f 92       	push	r1
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <_ZN10helicopter8messages7Message7getTypeEv>:
					
				byte getType() 
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	1f 92       	push	r1
    194a:	1f 92       	push	r1
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	89 83       	std	Y+1, r24	; 0x01
				{
					return msgType;
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	fc 01       	movw	r30, r24
    195a:	82 81       	ldd	r24, Z+2	; 0x02
				}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <_ZN10helicopter5model11SystemModel7RawMagXEi>:
			{
				
			}
			
			int RawMagX() const { return rawMagX; }
			void RawMagX(int val) { rawMagX = val; }
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	00 d0       	rcall	.+0      	; 0x196c <_ZN10helicopter5model11SystemModel7RawMagXEi+0x6>
    196c:	1f 92       	push	r1
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	7c 83       	std	Y+4, r23	; 0x04
    1978:	6b 83       	std	Y+3, r22	; 0x03
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	2b 81       	ldd	r18, Y+3	; 0x03
    1980:	3c 81       	ldd	r19, Y+4	; 0x04
    1982:	fc 01       	movw	r30, r24
    1984:	31 83       	std	Z+1, r19	; 0x01
    1986:	20 83       	st	Z, r18
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <_ZN10helicopter5model11SystemModel7RawMagYEi>:
			
			int RawMagY() const { return rawMagY; }
			void RawMagY(int val) { rawMagY = val; }
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	00 d0       	rcall	.+0      	; 0x199c <_ZN10helicopter5model11SystemModel7RawMagYEi+0x6>
    199c:	1f 92       	push	r1
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	7c 83       	std	Y+4, r23	; 0x04
    19a8:	6b 83       	std	Y+3, r22	; 0x03
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	2b 81       	ldd	r18, Y+3	; 0x03
    19b0:	3c 81       	ldd	r19, Y+4	; 0x04
    19b2:	fc 01       	movw	r30, r24
    19b4:	33 83       	std	Z+3, r19	; 0x03
    19b6:	22 83       	std	Z+2, r18	; 0x02
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <_ZN10helicopter5model11SystemModel7RawMagZEi>:
			
			int RawMagZ() const { return rawMagZ; }
			void RawMagZ(int val) { rawMagZ = val; }
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <_ZN10helicopter5model11SystemModel7RawMagZEi+0x6>
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	7c 83       	std	Y+4, r23	; 0x04
    19d8:	6b 83       	std	Y+3, r22	; 0x03
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	3c 81       	ldd	r19, Y+4	; 0x04
    19e2:	fc 01       	movw	r30, r24
    19e4:	35 83       	std	Z+5, r19	; 0x05
    19e6:	24 83       	std	Z+4, r18	; 0x04
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>:
			
				byte *getBytes();
			
				void buildMessage(byte *message);
			
				int MagX() const { return magX; }
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	1f 92       	push	r1
    19fc:	1f 92       	push	r1
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	85 81       	ldd	r24, Z+5	; 0x05
    1a0e:	96 81       	ldd	r25, Z+6	; 0x06
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>:
				void MagX(int val) { magX = val; }
			
				int MagY() const { return magY; }
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	1f 92       	push	r1
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2e:	fc 01       	movw	r30, r24
    1a30:	87 81       	ldd	r24, Z+7	; 0x07
    1a32:	90 85       	ldd	r25, Z+8	; 0x08
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>:
				void MagY(int val) { magY = val; }
			
				int MagZ() const { return magZ; }
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	1f 92       	push	r1
    1a44:	1f 92       	push	r1
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	fc 01       	movw	r30, r24
    1a54:	81 85       	ldd	r24, Z+9	; 0x09
    1a56:	92 85       	ldd	r25, Z+10	; 0x0a
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <_ZN10helicopter5tasks9misctasks16SimTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks::misctasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	7c 83       	std	Y+4, r23	; 0x04
    1a80:	6b 83       	std	Y+3, r22	; 0x03
    1a82:	5e 83       	std	Y+6, r21	; 0x06
    1a84:	4d 83       	std	Y+5, r20	; 0x05
    1a86:	38 87       	std	Y+8, r19	; 0x08
    1a88:	2f 83       	std	Y+7, r18	; 0x07
    1a8a:	1a 87       	std	Y+10, r17	; 0x0a
    1a8c:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	49 85       	ldd	r20, Y+9	; 0x09
    1a94:	5a 85       	ldd	r21, Y+10	; 0x0a
    1a96:	2f 81       	ldd	r18, Y+7	; 0x07
    1a98:	38 85       	ldd	r19, Y+8	; 0x08
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN10helicopter5tasks4TaskC1Eii>
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	22 e5       	ldi	r18, 0x52	; 82
    1aa6:	32 e0       	ldi	r19, 0x02	; 2
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	31 83       	std	Z+1, r19	; 0x01
    1aac:	20 83       	st	Z, r18
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	30 87       	std	Z+8, r19	; 0x08
    1aba:	27 83       	std	Z+7, r18	; 0x07
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	32 87       	std	Z+10, r19	; 0x0a
    1ac8:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1aca:	2a 96       	adiw	r28, 0x0a	; 10
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv>:


void SimTelemetryTask::runTaskImpl() 
{
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x8>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
	//Use the radio interface to get the telemetry message from the simulator
	Message *message = NULL;
    1af0:	1c 82       	std	Y+4, r1	; 0x04
    1af2:	1b 82       	std	Y+3, r1	; 0x03
	
	//TODO: keep in mind that the message received might not have been received in the
	//expected order. I.e. this message might actually be a different type of message.
	//so we should use more of a pub sub model. This works for now though since this is the
	//only message.
	if (radioInterface->receive(message) == 0 && message != NULL)
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	fc 01       	movw	r30, r24
    1afa:	87 81       	ldd	r24, Z+7	; 0x07
    1afc:	90 85       	ldd	r25, Z+8	; 0x08
    1afe:	9e 01       	movw	r18, r28
    1b00:	2d 5f       	subi	r18, 0xFD	; 253
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	b9 01       	movw	r22, r18
    1b06:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN10helicopter10interfaces14RadioInterface7receiveERPNS_8messages7MessageE>
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	31 f4       	brne	.+12     	; 0x1b1a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x3a>
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x3a>
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x3c>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	88 23       	and	r24, r24
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x42>
    1b20:	47 c0       	rjmp	.+142    	; 0x1bb0 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xd0>
	{
		//If it's a sim telemetry message, then process it. 
		if (message->getType() == SystemTelemetryMessage::SystemTelemetryMessageType)
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN10helicopter8messages7Message7getTypeEv>
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	92 30       	cpi	r25, 0x02	; 2
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0x54>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	88 23       	and	r24, r24
    1b36:	59 f1       	breq	.+86     	; 0x1b8e <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xae>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
			
			//Update the model using the new data received from the simulator.
			model->RawMagX(telemMsg->MagX());
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZNK10helicopter8messages22SystemTelemetryMessage4MagXEv>
    1b48:	9c 01       	movw	r18, r24
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	fc 01       	movw	r30, r24
    1b50:	81 85       	ldd	r24, Z+9	; 0x09
    1b52:	92 85       	ldd	r25, Z+10	; 0x0a
    1b54:	b9 01       	movw	r22, r18
    1b56:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN10helicopter5model11SystemModel7RawMagXEi>
			model->RawMagY(telemMsg->MagY());
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZNK10helicopter8messages22SystemTelemetryMessage4MagYEv>
    1b62:	9c 01       	movw	r18, r24
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	fc 01       	movw	r30, r24
    1b6a:	81 85       	ldd	r24, Z+9	; 0x09
    1b6c:	92 85       	ldd	r25, Z+10	; 0x0a
    1b6e:	b9 01       	movw	r22, r18
    1b70:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN10helicopter5model11SystemModel7RawMagYEi>
			model->RawMagZ(telemMsg->MagZ());
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_ZNK10helicopter8messages22SystemTelemetryMessage4MagZEv>
    1b7c:	9c 01       	movw	r18, r24
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	fc 01       	movw	r30, r24
    1b84:	81 85       	ldd	r24, Z+9	; 0x09
    1b86:	92 85       	ldd	r25, Z+10	; 0x0a
    1b88:	b9 01       	movw	r22, r18
    1b8a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN10helicopter5model11SystemModel7RawMagZEi>
		}
		
		delete message;
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	69 f0       	breq	.+26     	; 0x1bb0 <_ZN10helicopter5tasks9misctasks16SimTelemetryTask11runTaskImplEv+0xd0>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	02 96       	adiw	r24, 0x02	; 2
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	20 81       	ld	r18, Z
    1ba6:	31 81       	ldd	r19, Z+1	; 0x01
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	f9 01       	movw	r30, r18
    1bae:	19 95       	eicall
	}
	
    1bb0:	26 96       	adiw	r28, 0x06	; 6
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				int delay;
				int period;
				bool isReadyToRun;
				
			protected:
				virtual void runTaskImpl(){;}
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	1f 92       	push	r1
    1bc8:	1f 92       	push	r1
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <_ZN10helicopter5tasks4TaskC1Eii+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <_ZN10helicopter5tasks4TaskC1Eii+0x8>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	7c 83       	std	Y+4, r23	; 0x04
    1bee:	6b 83       	std	Y+3, r22	; 0x03
    1bf0:	5e 83       	std	Y+6, r21	; 0x06
    1bf2:	4d 83       	std	Y+5, r20	; 0x05
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	2c e5       	ldi	r18, 0x5C	; 92
    1bfa:	32 e0       	ldi	r19, 0x02	; 2
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	31 83       	std	Z+1, r19	; 0x01
    1c00:	20 83       	st	Z, r18
{
	this->delay = delay;
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	2b 81       	ldd	r18, Y+3	; 0x03
    1c08:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	33 83       	std	Z+3, r19	; 0x03
    1c0e:	22 83       	std	Z+2, r18	; 0x02
	this->period = period;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	2d 81       	ldd	r18, Y+5	; 0x05
    1c16:	3e 81       	ldd	r19, Y+6	; 0x06
    1c18:	fc 01       	movw	r30, r24
    1c1a:	35 83       	std	Z+5, r19	; 0x05
    1c1c:	24 83       	std	Z+4, r18	; 0x04
	this->isReadyToRun = false;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	fc 01       	movw	r30, r24
    1c24:	16 82       	std	Z+6, r1	; 0x06
}
    1c26:	26 96       	adiw	r28, 0x06	; 6
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <_ZN10helicopter5tasks4Task7runTaskEv>:

void Task::runTask()
{
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	1f 92       	push	r1
    1c3e:	1f 92       	push	r1
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
	//Disable interrupts 
	cli();
    1c48:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	fc 01       	movw	r30, r24
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	fc 01       	movw	r30, r24
    1c56:	20 81       	ld	r18, Z
    1c58:	31 81       	ldd	r19, Z+1	; 0x01
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	f9 01       	movw	r30, r18
    1c60:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    1c62:	78 94       	sei
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces14RadioInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(RadioInterface *radioInterface, SystemModel *model, int delay, int period) :
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	2a 97       	sbiw	r28, 0x0a	; 10
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	7c 83       	std	Y+4, r23	; 0x04
    1c8c:	6b 83       	std	Y+3, r22	; 0x03
    1c8e:	5e 83       	std	Y+6, r21	; 0x06
    1c90:	4d 83       	std	Y+5, r20	; 0x05
    1c92:	38 87       	std	Y+8, r19	; 0x08
    1c94:	2f 83       	std	Y+7, r18	; 0x07
    1c96:	1a 87       	std	Y+10, r17	; 0x0a
    1c98:	09 87       	std	Y+9, r16	; 0x09
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	49 85       	ldd	r20, Y+9	; 0x09
    1ca0:	5a 85       	ldd	r21, Y+10	; 0x0a
    1ca2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca4:	38 85       	ldd	r19, Y+8	; 0x08
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN10helicopter5tasks4TaskC1Eii>
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	26 e6       	ldi	r18, 0x66	; 102
    1cb2:	32 e0       	ldi	r19, 0x02	; 2
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	31 83       	std	Z+1, r19	; 0x01
    1cb8:	20 83       	st	Z, r18
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	30 87       	std	Z+8, r19	; 0x08
    1cc6:	27 83       	std	Z+7, r18	; 0x07
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cce:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	32 87       	std	Z+10, r19	; 0x0a
    1cd4:	21 87       	std	Z+9, r18	; 0x09
{
	
}
    1cd6:	2a 96       	adiw	r28, 0x0a	; 10
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:


void TransmitTelemetryTask::runTaskImpl()
{
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x6>
    1cf2:	1f 92       	push	r1
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
	Message *message = model->CreateTelemetryMessage();
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	fc 01       	movw	r30, r24
    1d02:	81 85       	ldd	r24, Z+9	; 0x09
    1d04:	92 85       	ldd	r25, Z+10	; 0x0a
    1d06:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN10helicopter5model11SystemModel22CreateTelemetryMessageEv>
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
	message->MagY(32);
	message->MagZ(31);
	*/
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	fc 01       	movw	r30, r24
    1d14:	87 81       	ldd	r24, Z+7	; 0x07
    1d16:	90 85       	ldd	r25, Z+8	; 0x08
    1d18:	29 81       	ldd	r18, Y+1	; 0x01
    1d1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d1c:	b9 01       	movw	r22, r18
    1d1e:	0e 94 43 04 	call	0x886	; 0x886 <_ZN10helicopter10interfaces14RadioInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f0       	breq	.+26     	; 0x1d44 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x58>
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	fc 01       	movw	r30, r24
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	02 96       	adiw	r24, 0x02	; 2
    1d36:	fc 01       	movw	r30, r24
    1d38:	20 81       	ld	r18, Z
    1d3a:	31 81       	ldd	r19, Z+1	; 0x01
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	f9 01       	movw	r30, r18
    1d42:	19 95       	eicall
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	08 95       	ret

00001d52 <_Znwj>:
 *  Author: HP User
 */ 
#include <commonheader.h>

void * operator new(size_t size)
{
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	1f 92       	push	r1
    1d58:	1f 92       	push	r1
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <malloc>
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <_ZdlPv>:

void operator delete(void * ptr)
{
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	1f 92       	push	r1
    1d7a:	1f 92       	push	r1
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != NULL)
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	21 f0       	breq	.+8      	; 0x1d94 <_ZdlPv+0x20>
	{
		free(ptr);
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	0e 94 82 10 	call	0x2104	; 0x2104 <free>
	}
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <_Znaj>:

void * operator new[](size_t size)
{
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	1f 92       	push	r1
    1da4:	1f 92       	push	r1
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
	return malloc(size);
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <malloc>
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <__fixunssfsi>:
    1dc0:	ac d0       	rcall	.+344    	; 0x1f1a <__fp_splitA>
    1dc2:	88 f0       	brcs	.+34     	; 0x1de6 <__fixunssfsi+0x26>
    1dc4:	9f 57       	subi	r25, 0x7F	; 127
    1dc6:	90 f0       	brcs	.+36     	; 0x1dec <__fixunssfsi+0x2c>
    1dc8:	b9 2f       	mov	r27, r25
    1dca:	99 27       	eor	r25, r25
    1dcc:	b7 51       	subi	r27, 0x17	; 23
    1dce:	a0 f0       	brcs	.+40     	; 0x1df8 <__fixunssfsi+0x38>
    1dd0:	d1 f0       	breq	.+52     	; 0x1e06 <__fixunssfsi+0x46>
    1dd2:	66 0f       	add	r22, r22
    1dd4:	77 1f       	adc	r23, r23
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	1a f0       	brmi	.+6      	; 0x1de2 <__fixunssfsi+0x22>
    1ddc:	ba 95       	dec	r27
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <__fixunssfsi+0x12>
    1de0:	12 c0       	rjmp	.+36     	; 0x1e06 <__fixunssfsi+0x46>
    1de2:	b1 30       	cpi	r27, 0x01	; 1
    1de4:	81 f0       	breq	.+32     	; 0x1e06 <__fixunssfsi+0x46>
    1de6:	ca d0       	rcall	.+404    	; 0x1f7c <__fp_zero>
    1de8:	b1 e0       	ldi	r27, 0x01	; 1
    1dea:	08 95       	ret
    1dec:	c7 c0       	rjmp	.+398    	; 0x1f7c <__fp_zero>
    1dee:	67 2f       	mov	r22, r23
    1df0:	78 2f       	mov	r23, r24
    1df2:	88 27       	eor	r24, r24
    1df4:	b8 5f       	subi	r27, 0xF8	; 248
    1df6:	39 f0       	breq	.+14     	; 0x1e06 <__fixunssfsi+0x46>
    1df8:	b9 3f       	cpi	r27, 0xF9	; 249
    1dfa:	cc f3       	brlt	.-14     	; 0x1dee <__fixunssfsi+0x2e>
    1dfc:	86 95       	lsr	r24
    1dfe:	77 95       	ror	r23
    1e00:	67 95       	ror	r22
    1e02:	b3 95       	inc	r27
    1e04:	d9 f7       	brne	.-10     	; 0x1dfc <__fixunssfsi+0x3c>
    1e06:	3e f4       	brtc	.+14     	; 0x1e16 <__fixunssfsi+0x56>
    1e08:	90 95       	com	r25
    1e0a:	80 95       	com	r24
    1e0c:	70 95       	com	r23
    1e0e:	61 95       	neg	r22
    1e10:	7f 4f       	sbci	r23, 0xFF	; 255
    1e12:	8f 4f       	sbci	r24, 0xFF	; 255
    1e14:	9f 4f       	sbci	r25, 0xFF	; 255
    1e16:	08 95       	ret

00001e18 <__floatunsisf>:
    1e18:	e8 94       	clt
    1e1a:	09 c0       	rjmp	.+18     	; 0x1e2e <__floatsisf+0x12>

00001e1c <__floatsisf>:
    1e1c:	97 fb       	bst	r25, 7
    1e1e:	3e f4       	brtc	.+14     	; 0x1e2e <__floatsisf+0x12>
    1e20:	90 95       	com	r25
    1e22:	80 95       	com	r24
    1e24:	70 95       	com	r23
    1e26:	61 95       	neg	r22
    1e28:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	99 23       	and	r25, r25
    1e30:	a9 f0       	breq	.+42     	; 0x1e5c <__floatsisf+0x40>
    1e32:	f9 2f       	mov	r31, r25
    1e34:	96 e9       	ldi	r25, 0x96	; 150
    1e36:	bb 27       	eor	r27, r27
    1e38:	93 95       	inc	r25
    1e3a:	f6 95       	lsr	r31
    1e3c:	87 95       	ror	r24
    1e3e:	77 95       	ror	r23
    1e40:	67 95       	ror	r22
    1e42:	b7 95       	ror	r27
    1e44:	f1 11       	cpse	r31, r1
    1e46:	f8 cf       	rjmp	.-16     	; 0x1e38 <__floatsisf+0x1c>
    1e48:	fa f4       	brpl	.+62     	; 0x1e88 <__floatsisf+0x6c>
    1e4a:	bb 0f       	add	r27, r27
    1e4c:	11 f4       	brne	.+4      	; 0x1e52 <__floatsisf+0x36>
    1e4e:	60 ff       	sbrs	r22, 0
    1e50:	1b c0       	rjmp	.+54     	; 0x1e88 <__floatsisf+0x6c>
    1e52:	6f 5f       	subi	r22, 0xFF	; 255
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	8f 4f       	sbci	r24, 0xFF	; 255
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	16 c0       	rjmp	.+44     	; 0x1e88 <__floatsisf+0x6c>
    1e5c:	88 23       	and	r24, r24
    1e5e:	11 f0       	breq	.+4      	; 0x1e64 <__floatsisf+0x48>
    1e60:	96 e9       	ldi	r25, 0x96	; 150
    1e62:	11 c0       	rjmp	.+34     	; 0x1e86 <__floatsisf+0x6a>
    1e64:	77 23       	and	r23, r23
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <__floatsisf+0x54>
    1e68:	9e e8       	ldi	r25, 0x8E	; 142
    1e6a:	87 2f       	mov	r24, r23
    1e6c:	76 2f       	mov	r23, r22
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <__floatsisf+0x5e>
    1e70:	66 23       	and	r22, r22
    1e72:	71 f0       	breq	.+28     	; 0x1e90 <__floatsisf+0x74>
    1e74:	96 e8       	ldi	r25, 0x86	; 134
    1e76:	86 2f       	mov	r24, r22
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	2a f0       	brmi	.+10     	; 0x1e88 <__floatsisf+0x6c>
    1e7e:	9a 95       	dec	r25
    1e80:	66 0f       	add	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	da f7       	brpl	.-10     	; 0x1e7e <__floatsisf+0x62>
    1e88:	88 0f       	add	r24, r24
    1e8a:	96 95       	lsr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	97 f9       	bld	r25, 7
    1e90:	08 95       	ret

00001e92 <floor>:
    1e92:	5d d0       	rcall	.+186    	; 0x1f4e <__fp_trunc>
    1e94:	80 f0       	brcs	.+32     	; 0x1eb6 <floor+0x24>
    1e96:	9f 37       	cpi	r25, 0x7F	; 127
    1e98:	40 f4       	brcc	.+16     	; 0x1eaa <floor+0x18>
    1e9a:	91 11       	cpse	r25, r1
    1e9c:	0e f0       	brts	.+2      	; 0x1ea0 <floor+0xe>
    1e9e:	6f c0       	rjmp	.+222    	; 0x1f7e <__fp_szero>
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	80 e8       	ldi	r24, 0x80	; 128
    1ea6:	9f eb       	ldi	r25, 0xBF	; 191
    1ea8:	08 95       	ret
    1eaa:	26 f4       	brtc	.+8      	; 0x1eb4 <floor+0x22>
    1eac:	1b 16       	cp	r1, r27
    1eae:	61 1d       	adc	r22, r1
    1eb0:	71 1d       	adc	r23, r1
    1eb2:	81 1d       	adc	r24, r1
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <__fp_mintl>
    1eb6:	1b c0       	rjmp	.+54     	; 0x1eee <__fp_mpack>

00001eb8 <__fp_mintl>:
    1eb8:	88 23       	and	r24, r24
    1eba:	71 f4       	brne	.+28     	; 0x1ed8 <__fp_mintl+0x20>
    1ebc:	77 23       	and	r23, r23
    1ebe:	21 f0       	breq	.+8      	; 0x1ec8 <__fp_mintl+0x10>
    1ec0:	98 50       	subi	r25, 0x08	; 8
    1ec2:	87 2b       	or	r24, r23
    1ec4:	76 2f       	mov	r23, r22
    1ec6:	07 c0       	rjmp	.+14     	; 0x1ed6 <__fp_mintl+0x1e>
    1ec8:	66 23       	and	r22, r22
    1eca:	11 f4       	brne	.+4      	; 0x1ed0 <__fp_mintl+0x18>
    1ecc:	99 27       	eor	r25, r25
    1ece:	0d c0       	rjmp	.+26     	; 0x1eea <__fp_mintl+0x32>
    1ed0:	90 51       	subi	r25, 0x10	; 16
    1ed2:	86 2b       	or	r24, r22
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	2a f0       	brmi	.+10     	; 0x1ee4 <__fp_mintl+0x2c>
    1eda:	9a 95       	dec	r25
    1edc:	66 0f       	add	r22, r22
    1ede:	77 1f       	adc	r23, r23
    1ee0:	88 1f       	adc	r24, r24
    1ee2:	da f7       	brpl	.-10     	; 0x1eda <__fp_mintl+0x22>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	96 95       	lsr	r25
    1ee8:	87 95       	ror	r24
    1eea:	97 f9       	bld	r25, 7
    1eec:	08 95       	ret

00001eee <__fp_mpack>:
    1eee:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef0:	31 f0       	breq	.+12     	; 0x1efe <__fp_mpack_finite+0xc>

00001ef2 <__fp_mpack_finite>:
    1ef2:	91 50       	subi	r25, 0x01	; 1
    1ef4:	20 f4       	brcc	.+8      	; 0x1efe <__fp_mpack_finite+0xc>
    1ef6:	87 95       	ror	r24
    1ef8:	77 95       	ror	r23
    1efa:	67 95       	ror	r22
    1efc:	b7 95       	ror	r27
    1efe:	88 0f       	add	r24, r24
    1f00:	91 1d       	adc	r25, r1
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	97 f9       	bld	r25, 7
    1f08:	08 95       	ret

00001f0a <__fp_split3>:
    1f0a:	57 fd       	sbrc	r21, 7
    1f0c:	90 58       	subi	r25, 0x80	; 128
    1f0e:	44 0f       	add	r20, r20
    1f10:	55 1f       	adc	r21, r21
    1f12:	59 f0       	breq	.+22     	; 0x1f2a <__fp_splitA+0x10>
    1f14:	5f 3f       	cpi	r21, 0xFF	; 255
    1f16:	71 f0       	breq	.+28     	; 0x1f34 <__fp_splitA+0x1a>
    1f18:	47 95       	ror	r20

00001f1a <__fp_splitA>:
    1f1a:	88 0f       	add	r24, r24
    1f1c:	97 fb       	bst	r25, 7
    1f1e:	99 1f       	adc	r25, r25
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <__fp_splitA+0x20>
    1f22:	9f 3f       	cpi	r25, 0xFF	; 255
    1f24:	79 f0       	breq	.+30     	; 0x1f44 <__fp_splitA+0x2a>
    1f26:	87 95       	ror	r24
    1f28:	08 95       	ret
    1f2a:	12 16       	cp	r1, r18
    1f2c:	13 06       	cpc	r1, r19
    1f2e:	14 06       	cpc	r1, r20
    1f30:	55 1f       	adc	r21, r21
    1f32:	f2 cf       	rjmp	.-28     	; 0x1f18 <__fp_split3+0xe>
    1f34:	46 95       	lsr	r20
    1f36:	f1 df       	rcall	.-30     	; 0x1f1a <__fp_splitA>
    1f38:	08 c0       	rjmp	.+16     	; 0x1f4a <__fp_splitA+0x30>
    1f3a:	16 16       	cp	r1, r22
    1f3c:	17 06       	cpc	r1, r23
    1f3e:	18 06       	cpc	r1, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	f1 cf       	rjmp	.-30     	; 0x1f26 <__fp_splitA+0xc>
    1f44:	86 95       	lsr	r24
    1f46:	71 05       	cpc	r23, r1
    1f48:	61 05       	cpc	r22, r1
    1f4a:	08 94       	sec
    1f4c:	08 95       	ret

00001f4e <__fp_trunc>:
    1f4e:	e5 df       	rcall	.-54     	; 0x1f1a <__fp_splitA>
    1f50:	a0 f0       	brcs	.+40     	; 0x1f7a <__fp_trunc+0x2c>
    1f52:	be e7       	ldi	r27, 0x7E	; 126
    1f54:	b9 17       	cp	r27, r25
    1f56:	88 f4       	brcc	.+34     	; 0x1f7a <__fp_trunc+0x2c>
    1f58:	bb 27       	eor	r27, r27
    1f5a:	9f 38       	cpi	r25, 0x8F	; 143
    1f5c:	60 f4       	brcc	.+24     	; 0x1f76 <__fp_trunc+0x28>
    1f5e:	16 16       	cp	r1, r22
    1f60:	b1 1d       	adc	r27, r1
    1f62:	67 2f       	mov	r22, r23
    1f64:	78 2f       	mov	r23, r24
    1f66:	88 27       	eor	r24, r24
    1f68:	98 5f       	subi	r25, 0xF8	; 248
    1f6a:	f7 cf       	rjmp	.-18     	; 0x1f5a <__fp_trunc+0xc>
    1f6c:	86 95       	lsr	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	b1 1d       	adc	r27, r1
    1f74:	93 95       	inc	r25
    1f76:	96 39       	cpi	r25, 0x96	; 150
    1f78:	c8 f3       	brcs	.-14     	; 0x1f6c <__fp_trunc+0x1e>
    1f7a:	08 95       	ret

00001f7c <__fp_zero>:
    1f7c:	e8 94       	clt

00001f7e <__fp_szero>:
    1f7e:	bb 27       	eor	r27, r27
    1f80:	66 27       	eor	r22, r22
    1f82:	77 27       	eor	r23, r23
    1f84:	cb 01       	movw	r24, r22
    1f86:	97 f9       	bld	r25, 7
    1f88:	08 95       	ret

00001f8a <__udivmodsi4>:
    1f8a:	a1 e2       	ldi	r26, 0x21	; 33
    1f8c:	1a 2e       	mov	r1, r26
    1f8e:	aa 1b       	sub	r26, r26
    1f90:	bb 1b       	sub	r27, r27
    1f92:	fd 01       	movw	r30, r26
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <__udivmodsi4_ep>

00001f96 <__udivmodsi4_loop>:
    1f96:	aa 1f       	adc	r26, r26
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	ee 1f       	adc	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	a2 17       	cp	r26, r18
    1fa0:	b3 07       	cpc	r27, r19
    1fa2:	e4 07       	cpc	r30, r20
    1fa4:	f5 07       	cpc	r31, r21
    1fa6:	20 f0       	brcs	.+8      	; 0x1fb0 <__udivmodsi4_ep>
    1fa8:	a2 1b       	sub	r26, r18
    1faa:	b3 0b       	sbc	r27, r19
    1fac:	e4 0b       	sbc	r30, r20
    1fae:	f5 0b       	sbc	r31, r21

00001fb0 <__udivmodsi4_ep>:
    1fb0:	66 1f       	adc	r22, r22
    1fb2:	77 1f       	adc	r23, r23
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	1a 94       	dec	r1
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <__udivmodsi4_loop>
    1fbc:	60 95       	com	r22
    1fbe:	70 95       	com	r23
    1fc0:	80 95       	com	r24
    1fc2:	90 95       	com	r25
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	bd 01       	movw	r22, r26
    1fca:	cf 01       	movw	r24, r30
    1fcc:	08 95       	ret

00001fce <malloc>:
    1fce:	0f 93       	push	r16
    1fd0:	1f 93       	push	r17
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	91 05       	cpc	r25, r1
    1fda:	10 f4       	brcc	.+4      	; 0x1fe0 <malloc+0x12>
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	e0 91 70 02 	lds	r30, 0x0270
    1fe4:	f0 91 71 02 	lds	r31, 0x0271
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	c0 e0       	ldi	r28, 0x00	; 0
    1fee:	d0 e0       	ldi	r29, 0x00	; 0
    1ff0:	23 c0       	rjmp	.+70     	; 0x2038 <malloc+0x6a>
    1ff2:	40 81       	ld	r20, Z
    1ff4:	51 81       	ldd	r21, Z+1	; 0x01
    1ff6:	48 17       	cp	r20, r24
    1ff8:	59 07       	cpc	r21, r25
    1ffa:	a8 f0       	brcs	.+42     	; 0x2026 <malloc+0x58>
    1ffc:	48 17       	cp	r20, r24
    1ffe:	59 07       	cpc	r21, r25
    2000:	61 f4       	brne	.+24     	; 0x201a <malloc+0x4c>
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	20 97       	sbiw	r28, 0x00	; 0
    2008:	19 f0       	breq	.+6      	; 0x2010 <malloc+0x42>
    200a:	9b 83       	std	Y+3, r25	; 0x03
    200c:	8a 83       	std	Y+2, r24	; 0x02
    200e:	2e c0       	rjmp	.+92     	; 0x206c <malloc+0x9e>
    2010:	90 93 71 02 	sts	0x0271, r25
    2014:	80 93 70 02 	sts	0x0270, r24
    2018:	29 c0       	rjmp	.+82     	; 0x206c <malloc+0x9e>
    201a:	21 15       	cp	r18, r1
    201c:	31 05       	cpc	r19, r1
    201e:	29 f0       	breq	.+10     	; 0x202a <malloc+0x5c>
    2020:	42 17       	cp	r20, r18
    2022:	53 07       	cpc	r21, r19
    2024:	10 f0       	brcs	.+4      	; 0x202a <malloc+0x5c>
    2026:	a9 01       	movw	r20, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <malloc+0x60>
    202a:	be 01       	movw	r22, r28
    202c:	df 01       	movw	r26, r30
    202e:	02 81       	ldd	r16, Z+2	; 0x02
    2030:	13 81       	ldd	r17, Z+3	; 0x03
    2032:	ef 01       	movw	r28, r30
    2034:	9a 01       	movw	r18, r20
    2036:	f8 01       	movw	r30, r16
    2038:	30 97       	sbiw	r30, 0x00	; 0
    203a:	d9 f6       	brne	.-74     	; 0x1ff2 <malloc+0x24>
    203c:	21 15       	cp	r18, r1
    203e:	31 05       	cpc	r19, r1
    2040:	09 f1       	breq	.+66     	; 0x2084 <malloc+0xb6>
    2042:	28 1b       	sub	r18, r24
    2044:	39 0b       	sbc	r19, r25
    2046:	24 30       	cpi	r18, 0x04	; 4
    2048:	31 05       	cpc	r19, r1
    204a:	90 f4       	brcc	.+36     	; 0x2070 <malloc+0xa2>
    204c:	12 96       	adiw	r26, 0x02	; 2
    204e:	8d 91       	ld	r24, X+
    2050:	9c 91       	ld	r25, X
    2052:	13 97       	sbiw	r26, 0x03	; 3
    2054:	61 15       	cp	r22, r1
    2056:	71 05       	cpc	r23, r1
    2058:	21 f0       	breq	.+8      	; 0x2062 <malloc+0x94>
    205a:	fb 01       	movw	r30, r22
    205c:	93 83       	std	Z+3, r25	; 0x03
    205e:	82 83       	std	Z+2, r24	; 0x02
    2060:	04 c0       	rjmp	.+8      	; 0x206a <malloc+0x9c>
    2062:	90 93 71 02 	sts	0x0271, r25
    2066:	80 93 70 02 	sts	0x0270, r24
    206a:	fd 01       	movw	r30, r26
    206c:	32 96       	adiw	r30, 0x02	; 2
    206e:	44 c0       	rjmp	.+136    	; 0x20f8 <malloc+0x12a>
    2070:	fd 01       	movw	r30, r26
    2072:	e2 0f       	add	r30, r18
    2074:	f3 1f       	adc	r31, r19
    2076:	81 93       	st	Z+, r24
    2078:	91 93       	st	Z+, r25
    207a:	22 50       	subi	r18, 0x02	; 2
    207c:	31 09       	sbc	r19, r1
    207e:	2d 93       	st	X+, r18
    2080:	3c 93       	st	X, r19
    2082:	3a c0       	rjmp	.+116    	; 0x20f8 <malloc+0x12a>
    2084:	20 91 6e 02 	lds	r18, 0x026E
    2088:	30 91 6f 02 	lds	r19, 0x026F
    208c:	23 2b       	or	r18, r19
    208e:	41 f4       	brne	.+16     	; 0x20a0 <malloc+0xd2>
    2090:	20 91 02 02 	lds	r18, 0x0202
    2094:	30 91 03 02 	lds	r19, 0x0203
    2098:	30 93 6f 02 	sts	0x026F, r19
    209c:	20 93 6e 02 	sts	0x026E, r18
    20a0:	20 91 00 02 	lds	r18, 0x0200
    20a4:	30 91 01 02 	lds	r19, 0x0201
    20a8:	21 15       	cp	r18, r1
    20aa:	31 05       	cpc	r19, r1
    20ac:	41 f4       	brne	.+16     	; 0x20be <malloc+0xf0>
    20ae:	2d b7       	in	r18, 0x3d	; 61
    20b0:	3e b7       	in	r19, 0x3e	; 62
    20b2:	40 91 04 02 	lds	r20, 0x0204
    20b6:	50 91 05 02 	lds	r21, 0x0205
    20ba:	24 1b       	sub	r18, r20
    20bc:	35 0b       	sbc	r19, r21
    20be:	e0 91 6e 02 	lds	r30, 0x026E
    20c2:	f0 91 6f 02 	lds	r31, 0x026F
    20c6:	e2 17       	cp	r30, r18
    20c8:	f3 07       	cpc	r31, r19
    20ca:	a0 f4       	brcc	.+40     	; 0x20f4 <malloc+0x126>
    20cc:	2e 1b       	sub	r18, r30
    20ce:	3f 0b       	sbc	r19, r31
    20d0:	28 17       	cp	r18, r24
    20d2:	39 07       	cpc	r19, r25
    20d4:	78 f0       	brcs	.+30     	; 0x20f4 <malloc+0x126>
    20d6:	ac 01       	movw	r20, r24
    20d8:	4e 5f       	subi	r20, 0xFE	; 254
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	24 17       	cp	r18, r20
    20de:	35 07       	cpc	r19, r21
    20e0:	48 f0       	brcs	.+18     	; 0x20f4 <malloc+0x126>
    20e2:	4e 0f       	add	r20, r30
    20e4:	5f 1f       	adc	r21, r31
    20e6:	50 93 6f 02 	sts	0x026F, r21
    20ea:	40 93 6e 02 	sts	0x026E, r20
    20ee:	81 93       	st	Z+, r24
    20f0:	91 93       	st	Z+, r25
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <malloc+0x12a>
    20f4:	e0 e0       	ldi	r30, 0x00	; 0
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	cf 01       	movw	r24, r30
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	08 95       	ret

00002104 <free>:
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	09 f4       	brne	.+2      	; 0x2116 <free+0x12>
    2114:	8f c0       	rjmp	.+286    	; 0x2234 <__stack+0x35>
    2116:	dc 01       	movw	r26, r24
    2118:	12 97       	sbiw	r26, 0x02	; 2
    211a:	13 96       	adiw	r26, 0x03	; 3
    211c:	1c 92       	st	X, r1
    211e:	1e 92       	st	-X, r1
    2120:	12 97       	sbiw	r26, 0x02	; 2
    2122:	e0 90 70 02 	lds	r14, 0x0270
    2126:	f0 90 71 02 	lds	r15, 0x0271
    212a:	e1 14       	cp	r14, r1
    212c:	f1 04       	cpc	r15, r1
    212e:	89 f4       	brne	.+34     	; 0x2152 <free+0x4e>
    2130:	2d 91       	ld	r18, X+
    2132:	3c 91       	ld	r19, X
    2134:	11 97       	sbiw	r26, 0x01	; 1
    2136:	28 0f       	add	r18, r24
    2138:	39 1f       	adc	r19, r25
    213a:	80 91 6e 02 	lds	r24, 0x026E
    213e:	90 91 6f 02 	lds	r25, 0x026F
    2142:	82 17       	cp	r24, r18
    2144:	93 07       	cpc	r25, r19
    2146:	89 f5       	brne	.+98     	; 0x21aa <free+0xa6>
    2148:	b0 93 6f 02 	sts	0x026F, r27
    214c:	a0 93 6e 02 	sts	0x026E, r26
    2150:	71 c0       	rjmp	.+226    	; 0x2234 <__stack+0x35>
    2152:	e7 01       	movw	r28, r14
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	01 c0       	rjmp	.+2      	; 0x215c <free+0x58>
    215a:	ea 01       	movw	r28, r20
    215c:	ca 17       	cp	r28, r26
    215e:	db 07       	cpc	r29, r27
    2160:	38 f4       	brcc	.+14     	; 0x2170 <free+0x6c>
    2162:	4a 81       	ldd	r20, Y+2	; 0x02
    2164:	5b 81       	ldd	r21, Y+3	; 0x03
    2166:	9e 01       	movw	r18, r28
    2168:	41 15       	cp	r20, r1
    216a:	51 05       	cpc	r21, r1
    216c:	b1 f7       	brne	.-20     	; 0x215a <free+0x56>
    216e:	22 c0       	rjmp	.+68     	; 0x21b4 <free+0xb0>
    2170:	bc 01       	movw	r22, r24
    2172:	62 50       	subi	r22, 0x02	; 2
    2174:	71 09       	sbc	r23, r1
    2176:	fb 01       	movw	r30, r22
    2178:	d3 83       	std	Z+3, r29	; 0x03
    217a:	c2 83       	std	Z+2, r28	; 0x02
    217c:	00 81       	ld	r16, Z
    217e:	11 81       	ldd	r17, Z+1	; 0x01
    2180:	ac 01       	movw	r20, r24
    2182:	40 0f       	add	r20, r16
    2184:	51 1f       	adc	r21, r17
    2186:	4c 17       	cp	r20, r28
    2188:	5d 07       	cpc	r21, r29
    218a:	61 f4       	brne	.+24     	; 0x21a4 <free+0xa0>
    218c:	48 81       	ld	r20, Y
    218e:	59 81       	ldd	r21, Y+1	; 0x01
    2190:	40 0f       	add	r20, r16
    2192:	51 1f       	adc	r21, r17
    2194:	4e 5f       	subi	r20, 0xFE	; 254
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	51 83       	std	Z+1, r21	; 0x01
    219a:	40 83       	st	Z, r20
    219c:	4a 81       	ldd	r20, Y+2	; 0x02
    219e:	5b 81       	ldd	r21, Y+3	; 0x03
    21a0:	53 83       	std	Z+3, r21	; 0x03
    21a2:	42 83       	std	Z+2, r20	; 0x02
    21a4:	21 15       	cp	r18, r1
    21a6:	31 05       	cpc	r19, r1
    21a8:	29 f4       	brne	.+10     	; 0x21b4 <free+0xb0>
    21aa:	b0 93 71 02 	sts	0x0271, r27
    21ae:	a0 93 70 02 	sts	0x0270, r26
    21b2:	40 c0       	rjmp	.+128    	; 0x2234 <__stack+0x35>
    21b4:	f9 01       	movw	r30, r18
    21b6:	b3 83       	std	Z+3, r27	; 0x03
    21b8:	a2 83       	std	Z+2, r26	; 0x02
    21ba:	e9 01       	movw	r28, r18
    21bc:	69 91       	ld	r22, Y+
    21be:	79 91       	ld	r23, Y+
    21c0:	c6 0f       	add	r28, r22
    21c2:	d7 1f       	adc	r29, r23
    21c4:	ac 17       	cp	r26, r28
    21c6:	bd 07       	cpc	r27, r29
    21c8:	79 f4       	brne	.+30     	; 0x21e8 <free+0xe4>
    21ca:	dc 01       	movw	r26, r24
    21cc:	5e 91       	ld	r21, -X
    21ce:	4e 91       	ld	r20, -X
    21d0:	46 0f       	add	r20, r22
    21d2:	57 1f       	adc	r21, r23
    21d4:	4e 5f       	subi	r20, 0xFE	; 254
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	51 83       	std	Z+1, r21	; 0x01
    21da:	40 83       	st	Z, r20
    21dc:	12 96       	adiw	r26, 0x02	; 2
    21de:	8d 91       	ld	r24, X+
    21e0:	9c 91       	ld	r25, X
    21e2:	13 97       	sbiw	r26, 0x03	; 3
    21e4:	93 83       	std	Z+3, r25	; 0x03
    21e6:	82 83       	std	Z+2, r24	; 0x02
    21e8:	a0 e0       	ldi	r26, 0x00	; 0
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <free+0xee>
    21ee:	d7 01       	movw	r26, r14
    21f0:	7c 01       	movw	r14, r24
    21f2:	f7 01       	movw	r30, r14
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <free+0xea>
    21fc:	c7 01       	movw	r24, r14
    21fe:	02 96       	adiw	r24, 0x02	; 2
    2200:	20 81       	ld	r18, Z
    2202:	31 81       	ldd	r19, Z+1	; 0x01
    2204:	82 0f       	add	r24, r18
    2206:	93 1f       	adc	r25, r19
    2208:	20 91 6e 02 	lds	r18, 0x026E
    220c:	30 91 6f 02 	lds	r19, 0x026F
    2210:	28 17       	cp	r18, r24
    2212:	39 07       	cpc	r19, r25
    2214:	79 f4       	brne	.+30     	; 0x2234 <__stack+0x35>
    2216:	10 97       	sbiw	r26, 0x00	; 0
    2218:	29 f4       	brne	.+10     	; 0x2224 <__stack+0x25>
    221a:	10 92 71 02 	sts	0x0271, r1
    221e:	10 92 70 02 	sts	0x0270, r1
    2222:	04 c0       	rjmp	.+8      	; 0x222c <__stack+0x2d>
    2224:	13 96       	adiw	r26, 0x03	; 3
    2226:	1c 92       	st	X, r1
    2228:	1e 92       	st	-X, r1
    222a:	12 97       	sbiw	r26, 0x02	; 2
    222c:	f0 92 6f 02 	sts	0x026F, r15
    2230:	e0 92 6e 02 	sts	0x026E, r14
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	08 95       	ret

00002242 <memcpy>:
    2242:	fb 01       	movw	r30, r22
    2244:	dc 01       	movw	r26, r24
    2246:	02 c0       	rjmp	.+4      	; 0x224c <memcpy+0xa>
    2248:	01 90       	ld	r0, Z+
    224a:	0d 92       	st	X+, r0
    224c:	41 50       	subi	r20, 0x01	; 1
    224e:	50 40       	sbci	r21, 0x00	; 0
    2250:	d8 f7       	brcc	.-10     	; 0x2248 <memcpy+0x6>
    2252:	08 95       	ret

00002254 <_exit>:
    2254:	f8 94       	cli

00002256 <__stop_program>:
    2256:	ff cf       	rjmp	.-2      	; 0x2256 <__stop_program>
