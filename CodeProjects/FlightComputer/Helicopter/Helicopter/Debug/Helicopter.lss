
Helicopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800200  0000604c  000060e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000604c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008002a2  008002a2  00006182  2**0
                  ALLOC
  3 .stab         00003438  00000000  00000000  00006184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f16  00000000  00000000  000095bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000a4d2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000007e0  00000000  00000000  0000a501  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00020414  00000000  00000000  0000ace1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000503e  00000000  00000000  0002b0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000036c3  00000000  00000000  00030133  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001b48  00000000  00000000  000337f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00007fef  00000000  00000000  00035340  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f12f  00000000  00000000  0003d32f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007c8  00000000  00000000  0004c45e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TODO should this be delete[]?
	delete this->records;
}

void Buffer::enqueue(Record *record)
{
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	if (record != NULL)
       8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	{
		//Copy the record
		//TODO danger not deep copy. 
		Record *newRecord = record->Copy();
       c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      10:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
		
		//Add the record to the linked list.
		if (this->records == NULL)
      14:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      18:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
		{
			records = newRecord;
      1c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
			firstRecord = newRecord;
      20:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
			lastRecord = newRecord;
      24:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
		}else
		{
			lastRecord->setNextRecord(newRecord);
      28:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
					return nextRecord;
				}
				
				void setNextRecord(Record *record)
				{
					nextRecord = record;
      2c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
			newRecord->setPreviousRecord(lastRecord);
      30:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
					return previousRecord;	
				}					
				
				void setPreviousRecord(Record *record)
				{
					previousRecord = record;
      34:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      38:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
			lastRecord = newRecord;
      3c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
		}
		
		bufferSize++;
      40:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      44:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <__vector_17>
	}
}
      48:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      4c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      50:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      54:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	spiDriver->transactionWrite(CONVERT_D1_PRESSURE_OSR_4096);
	
	//According to documentation, delay while the ADC processes.
	_delay_ms(ADC_PROCESSING_TIME_MS);
	
	spiDriver->beginTransaction();
      58:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      5c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      60:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      64:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	
	/**
	 * Read the ADC results
	 */
	spiDriver->write(ADC_READ_COMMAND);
      68:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      6c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      70:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      74:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	
	/**
	 * The pressure is 3 bytes. So read the hight byte, shift it by eight, read the mid byte, shift by 8, then read the low byte
	 * to form a 3 byte 'long'
	 */
	rawPressure = spiDriver->readByte();
      78:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      7c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      80:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      84:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      88:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      8c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      90:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      94:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      98:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      9c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	rawPressure = rawPressure << 8 | spiDriver->readByte();
      a0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      a4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      a8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      ac:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      b0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      b4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      b8:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__vector_46>
      bc:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      c0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      c4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
	rawPressure = rawPressure << 8 | spiDriver->readByte();
      c8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      cc:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      d0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      d4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      d8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      dc:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      e0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
	
	spiDriver->endTransaction();
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv+0x3e>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
	
	
	//Initiate conversion for temperature.
	spiDriver->transactionWrite(CONVERT_D2_TEMPERATURE_OSR_4096);	
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240

00000102 <__trampolines_start>:
     102:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <_ZN10helicopter7drivers12SerialDriver10initializeEv>
     106:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
     10a:	0c 94 09 26 	jmp	0x4c12	; 0x4c12 <_ZN10helicopter5tasks4TaskD0Ev>
	
	_delay_ms(ADC_PROCESSING_TIME_MS);
	
	spiDriver->beginTransaction();
     10e:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <_ZN10helicopter5tasks4TaskD1Ev>
     112:	0c 94 27 0b 	jmp	0x164e	; 0x164e <_ZN10helicopter5tasks12FlashLEDTask4initEv>
     116:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>
     11a:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <_ZN10helicopter5tasks4Task4initEv>
	
	/**
	 * Read the ADC results
	 */
	spiDriver->write(ADC_READ_COMMAND);
     11e:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>
     122:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN10helicopter7drivers12SerialDriverD0Ev>
     126:	0c 94 a7 13 	jmp	0x274e	; 0x274e <_ZN10helicopter8messages7Message8getBytesEv>
     12a:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <_ZN10helicopter8messages7MessageD1Ev>
     12e:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>
	rawTemperature = spiDriver->readByte();
     132:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <_ZN10helicopter7drivers12SerialDriverD1Ev>
     136:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>
     13a:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <_ZN10helicopter7drivers12SerialDriver8transmitEm>
     13e:	0c 94 00 09 	jmp	0x1200	; 0x1200 <_ZN10helicopter7drivers12SerialDriver8transmitEf>
     142:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <_ZN10helicopter8messages7MessageD0Ev>
     146:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <_ZN10helicopter5tasks20SensorProcessingTask11runTaskImplEv>
     14a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>
     14e:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>
     152:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <_ZN10helicopter5tasks16PIDInnerLoopTaskD0Ev>
     156:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>
	rawTemperature = rawTemperature << 8 | spiDriver->readByte();
     15a:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <_ZN10helicopter7drivers12SerialDriver8transmitEh>
     15e:	0c 94 b7 13 	jmp	0x276e	; 0x276e <_ZN10helicopter8messages11SyncMessageD1Ev>
     162:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <_ZN10helicopter7drivers12SerialDriver7receiveERh>
     166:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <_ZN10helicopter8messages7Message12buildMessageEPh>
     16a:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <_ZN10helicopter5tasks16PIDInnerLoopTaskD1Ev>
     16e:	0c 94 c5 13 	jmp	0x278a	; 0x278a <_ZN10helicopter8messages11SyncMessage8getBytesEv>
     172:	0c 94 ff 25 	jmp	0x4bfe	; 0x4bfe <_ZN10helicopter5tasks4Task7runTaskEv>
     176:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>
     17a:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>
	rawTemperature = rawTemperature << 8 | spiDriver->readByte();	
     17e:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>
     182:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>
     186:	0c 94 80 22 	jmp	0x4500	; 0x4500 <_ZN10helicopter5tasks16PIDInnerLoopTask11runTaskImplEv>
     18a:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <_ZN10helicopter5tasks20SensorProcessingTaskD0Ev>
     18e:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>
     192:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>
     196:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>
     19a:	0c 94 dc 22 	jmp	0x45b8	; 0x45b8 <_ZN10helicopter5tasks20SensorProcessingTaskD1Ev>
     19e:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <_ZN10helicopter5tasks4Task11runTaskImplEv>

	spiDriver->endTransaction();
     1a2:	0c 94 42 09 	jmp	0x1284	; 0x1284 <_ZN10helicopter7drivers12SerialDriver8transmitEi>
     1a6:	0c 94 b7 09 	jmp	0x136e	; 0x136e <_ZN10helicopter7drivers12SerialDriver8transmitEl>
	
	/**
	* Formulas from page 7 on MS5611-01BA03.pdf
	*/
	int64_t rawPress = rawPressure;
     1aa:	0c 94 bd 13 	jmp	0x277a	; 0x277a <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>
     1ae:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>
     1b2:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <_ZN10helicopter8messages11SyncMessageD0Ev>

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d1 e2       	ldi	r29, 0x21	; 33
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	00 e0       	ldi	r16, 0x00	; 0
     1c4:	0c bf       	out	0x3c, r16	; 60

000001c6 <__do_copy_data>:
     1c6:	12 e0       	ldi	r17, 0x02	; 2
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b2 e0       	ldi	r27, 0x02	; 2
     1cc:	ec e4       	ldi	r30, 0x4C	; 76
     1ce:	f0 e6       	ldi	r31, 0x60	; 96
     1d0:	00 e0       	ldi	r16, 0x00	; 0
	int64_t rawTemp = rawTemperature;
     1d2:	0b bf       	out	0x3b, r16	; 59
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__do_copy_data+0x14>
     1d6:	07 90       	elpm	r0, Z+
     1d8:	0d 92       	st	X+, r0

	//I use the shift operators instead of division. (I.e. << 8 = dividing by 2^8).
	int64_t tempDifference = rawTemp - (referenceTemperature_Tref_C5 << 8);
     1da:	a2 3a       	cpi	r26, 0xA2	; 162
     1dc:	b1 07       	cpc	r27, r17
     1de:	d9 f7       	brne	.-10     	; 0x1d6 <__do_copy_data+0x10>

000001e0 <__do_clear_bss>:
     1e0:	22 e0       	ldi	r18, 0x02	; 2
     1e2:	a2 ea       	ldi	r26, 0xA2	; 162
     1e4:	b2 e0       	ldi	r27, 0x02	; 2
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
     1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
     1ea:	aa 3a       	cpi	r26, 0xAA	; 170
     1ec:	b2 07       	cpc	r27, r18
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>
     1f0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <main>
     1f4:	0c 94 24 30 	jmp	0x6048	; 0x6048 <_exit>

000001f8 <__bad_interrupt>:
     1f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fc <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelE>:
     1fc:	fc 01       	movw	r30, r24
     1fe:	71 83       	std	Z+1, r23	; 0x01
     200:	60 83       	st	Z, r22
     202:	12 82       	std	Z+2, r1	; 0x02
     204:	13 82       	std	Z+3, r1	; 0x03
     206:	14 82       	std	Z+4, r1	; 0x04
     208:	15 82       	std	Z+5, r1	; 0x05
     20a:	16 82       	std	Z+6, r1	; 0x06
     20c:	17 82       	std	Z+7, r1	; 0x07
     20e:	10 86       	std	Z+8, r1	; 0x08
     210:	11 86       	std	Z+9, r1	; 0x09
     212:	12 86       	std	Z+10, r1	; 0x0a
     214:	13 86       	std	Z+11, r1	; 0x0b
     216:	14 86       	std	Z+12, r1	; 0x0c
     218:	15 86       	std	Z+13, r1	; 0x0d
     21a:	16 86       	std	Z+14, r1	; 0x0e
     21c:	17 86       	std	Z+15, r1	; 0x0f
     21e:	10 8a       	std	Z+16, r1	; 0x10
     220:	11 8a       	std	Z+17, r1	; 0x11
     222:	12 8a       	std	Z+18, r1	; 0x12
     224:	13 8a       	std	Z+19, r1	; 0x13
     226:	14 8a       	std	Z+20, r1	; 0x14
     228:	15 8a       	std	Z+21, r1	; 0x15
     22a:	16 8a       	std	Z+22, r1	; 0x16
     22c:	17 8a       	std	Z+23, r1	; 0x17
     22e:	10 8e       	std	Z+24, r1	; 0x18
	int64_t temp = 2000 + ((tempDifference * temperatureCoefficientOfTheTemperature_TEMPSENS_C6) >> 23);
     230:	11 8e       	std	Z+25, r1	; 0x19
     232:	12 8e       	std	Z+26, r1	; 0x1a
     234:	13 8e       	std	Z+27, r1	; 0x1b
     236:	14 8e       	std	Z+28, r1	; 0x1c
     238:	15 8e       	std	Z+29, r1	; 0x1d
     23a:	16 8e       	std	Z+30, r1	; 0x1e
     23c:	17 8e       	std	Z+31, r1	; 0x1f
     23e:	10 a2       	std	Z+32, r1	; 0x20
     240:	11 a2       	std	Z+33, r1	; 0x21
     242:	12 a2       	std	Z+34, r1	; 0x22
     244:	13 a2       	std	Z+35, r1	; 0x23
     246:	14 a2       	std	Z+36, r1	; 0x24
     248:	15 a2       	std	Z+37, r1	; 0x25
     24a:	12 a6       	std	Z+42, r1	; 0x2a
     24c:	13 a6       	std	Z+43, r1	; 0x2b
     24e:	14 a6       	std	Z+44, r1	; 0x2c
     250:	15 a6       	std	Z+45, r1	; 0x2d
     252:	16 a6       	std	Z+46, r1	; 0x2e
     254:	17 a6       	std	Z+47, r1	; 0x2f
     256:	10 aa       	std	Z+48, r1	; 0x30
     258:	11 aa       	std	Z+49, r1	; 0x31
     25a:	12 aa       	std	Z+50, r1	; 0x32
     25c:	13 aa       	std	Z+51, r1	; 0x33
     25e:	14 aa       	std	Z+52, r1	; 0x34
     260:	15 aa       	std	Z+53, r1	; 0x35
     262:	16 aa       	std	Z+54, r1	; 0x36
     264:	17 aa       	std	Z+55, r1	; 0x37
     266:	10 ae       	std	Z+56, r1	; 0x38
     268:	11 ae       	std	Z+57, r1	; 0x39
     26a:	12 ae       	std	Z+58, r1	; 0x3a
     26c:	13 ae       	std	Z+59, r1	; 0x3b
     26e:	14 ae       	std	Z+60, r1	; 0x3c
     270:	15 ae       	std	Z+61, r1	; 0x3d
     272:	dc 01       	movw	r26, r24
     274:	ae 5b       	subi	r26, 0xBE	; 190
     276:	bf 4f       	sbci	r27, 0xFF	; 255
     278:	1d 92       	st	X+, r1
     27a:	1d 92       	st	X+, r1
     27c:	1d 92       	st	X+, r1
     27e:	1c 92       	st	X, r1
     280:	13 97       	sbiw	r26, 0x03	; 3
     282:	dc 01       	movw	r26, r24
     284:	aa 5b       	subi	r26, 0xBA	; 186
     286:	bf 4f       	sbci	r27, 0xFF	; 255
     288:	1d 92       	st	X+, r1
     28a:	1d 92       	st	X+, r1
     28c:	1d 92       	st	X+, r1
	int64_t tempOffset = (pressureSensitivityOffset_OFFt1_C2 << 16) + ((temperatureCoefficientOfPressureOffset_TCO_C4 * tempDifference) >> 7);
     28e:	1c 92       	st	X, r1
     290:	13 97       	sbiw	r26, 0x03	; 3
     292:	dc 01       	movw	r26, r24
     294:	a6 5b       	subi	r26, 0xB6	; 182
     296:	bf 4f       	sbci	r27, 0xFF	; 255
     298:	1d 92       	st	X+, r1
     29a:	1d 92       	st	X+, r1
     29c:	1d 92       	st	X+, r1
     29e:	1c 92       	st	X, r1
     2a0:	13 97       	sbiw	r26, 0x03	; 3
     2a2:	dc 01       	movw	r26, r24
     2a4:	a2 5b       	subi	r26, 0xB2	; 178
     2a6:	bf 4f       	sbci	r27, 0xFF	; 255
     2a8:	1d 92       	st	X+, r1
     2aa:	1d 92       	st	X+, r1
     2ac:	1d 92       	st	X+, r1
     2ae:	1c 92       	st	X, r1
     2b0:	13 97       	sbiw	r26, 0x03	; 3
     2b2:	dc 01       	movw	r26, r24
     2b4:	ae 5a       	subi	r26, 0xAE	; 174
     2b6:	bf 4f       	sbci	r27, 0xFF	; 255
     2b8:	1d 92       	st	X+, r1
     2ba:	1d 92       	st	X+, r1
     2bc:	1d 92       	st	X+, r1
     2be:	1c 92       	st	X, r1
     2c0:	13 97       	sbiw	r26, 0x03	; 3
     2c2:	dc 01       	movw	r26, r24
     2c4:	aa 5a       	subi	r26, 0xAA	; 170
     2c6:	bf 4f       	sbci	r27, 0xFF	; 255
     2c8:	1d 92       	st	X+, r1
     2ca:	1d 92       	st	X+, r1
     2cc:	1d 92       	st	X+, r1
     2ce:	1c 92       	st	X, r1
     2d0:	13 97       	sbiw	r26, 0x03	; 3
     2d2:	dc 01       	movw	r26, r24
     2d4:	a6 5a       	subi	r26, 0xA6	; 166
     2d6:	bf 4f       	sbci	r27, 0xFF	; 255
     2d8:	1d 92       	st	X+, r1
     2da:	1d 92       	st	X+, r1
     2dc:	1d 92       	st	X+, r1
     2de:	1c 92       	st	X, r1
     2e0:	13 97       	sbiw	r26, 0x03	; 3
     2e2:	dc 01       	movw	r26, r24
     2e4:	a2 5a       	subi	r26, 0xA2	; 162
     2e6:	bf 4f       	sbci	r27, 0xFF	; 255
     2e8:	1d 92       	st	X+, r1
     2ea:	1d 92       	st	X+, r1
     2ec:	1d 92       	st	X+, r1
     2ee:	1c 92       	st	X, r1
     2f0:	13 97       	sbiw	r26, 0x03	; 3
     2f2:	dc 01       	movw	r26, r24
     2f4:	ae 59       	subi	r26, 0x9E	; 158
     2f6:	bf 4f       	sbci	r27, 0xFF	; 255
     2f8:	1d 92       	st	X+, r1
     2fa:	1d 92       	st	X+, r1
     2fc:	1d 92       	st	X+, r1
     2fe:	1c 92       	st	X, r1
     300:	13 97       	sbiw	r26, 0x03	; 3
     302:	dc 01       	movw	r26, r24
     304:	aa 59       	subi	r26, 0x9A	; 154
     306:	bf 4f       	sbci	r27, 0xFF	; 255
     308:	1d 92       	st	X+, r1
     30a:	1d 92       	st	X+, r1
     30c:	1d 92       	st	X+, r1
     30e:	1c 92       	st	X, r1
     310:	13 97       	sbiw	r26, 0x03	; 3
     312:	dc 01       	movw	r26, r24
     314:	a6 59       	subi	r26, 0x96	; 150
     316:	bf 4f       	sbci	r27, 0xFF	; 255
     318:	1d 92       	st	X+, r1
	int64_t sensitivityAtTemp = (pressureSensitivity_SENSt1_C1 << 15) + ((temperatureCoefficientOfPressureSensitivity_TCS_C3 * tempDifference) >> 8);
     31a:	1d 92       	st	X+, r1
     31c:	1d 92       	st	X+, r1
     31e:	1c 92       	st	X, r1
     320:	13 97       	sbiw	r26, 0x03	; 3
     322:	dc 01       	movw	r26, r24
     324:	a2 59       	subi	r26, 0x92	; 146
     326:	bf 4f       	sbci	r27, 0xFF	; 255
     328:	1d 92       	st	X+, r1
     32a:	1d 92       	st	X+, r1
     32c:	1d 92       	st	X+, r1
     32e:	1c 92       	st	X, r1
     330:	13 97       	sbiw	r26, 0x03	; 3
     332:	dc 01       	movw	r26, r24
     334:	ae 57       	subi	r26, 0x7E	; 126
     336:	bf 4f       	sbci	r27, 0xFF	; 255
     338:	1d 92       	st	X+, r1
     33a:	1d 92       	st	X+, r1
     33c:	1d 92       	st	X+, r1
     33e:	1c 92       	st	X, r1
     340:	13 97       	sbiw	r26, 0x03	; 3
     342:	dc 01       	movw	r26, r24
     344:	aa 57       	subi	r26, 0x7A	; 122
     346:	bf 4f       	sbci	r27, 0xFF	; 255
     348:	1d 92       	st	X+, r1
     34a:	1d 92       	st	X+, r1
     34c:	1d 92       	st	X+, r1
     34e:	1c 92       	st	X, r1
     350:	13 97       	sbiw	r26, 0x03	; 3
     352:	e6 57       	subi	r30, 0x76	; 118
     354:	ff 4f       	sbci	r31, 0xFF	; 255
     356:	10 82       	st	Z, r1
     358:	11 82       	std	Z+1, r1	; 0x01
     35a:	12 82       	std	Z+2, r1	; 0x02
     35c:	13 82       	std	Z+3, r1	; 0x03
     35e:	08 95       	ret

00000360 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>:
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cb 01       	movw	r24, r22
     366:	ba 01       	movw	r22, r20
     368:	a9 01       	movw	r20, r18
     36a:	98 01       	movw	r18, r16
     36c:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	08 95       	ret

00000376 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>:
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cb 01       	movw	r24, r22
     384:	ba 01       	movw	r22, r20
     386:	a9 01       	movw	r20, r18
     388:	98 01       	movw	r18, r16
     38a:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
     38e:	a7 01       	movw	r20, r14
     390:	96 01       	movw	r18, r12
     392:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	08 95       	ret

000003a4 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>:
     3a4:	4f 92       	push	r4
     3a6:	5f 92       	push	r5
     3a8:	6f 92       	push	r6
     3aa:	7f 92       	push	r7
     3ac:	8f 92       	push	r8
     3ae:	9f 92       	push	r9
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x22>
     3c6:	1f 92       	push	r1
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	49 83       	std	Y+1, r20	; 0x01
     3ce:	5a 83       	std	Y+2, r21	; 0x02
     3d0:	6b 83       	std	Y+3, r22	; 0x03
     3d2:	7c 83       	std	Y+4, r23	; 0x04
     3d4:	28 01       	movw	r4, r16
     3d6:	39 01       	movw	r6, r18
     3d8:	8e 57       	subi	r24, 0x7E	; 126
     3da:	9f 4f       	sbci	r25, 0xFF	; 255
     3dc:	fc 01       	movw	r30, r24
     3de:	20 81       	ld	r18, Z
     3e0:	31 81       	ldd	r19, Z+1	; 0x01
     3e2:	42 81       	ldd	r20, Z+2	; 0x02
		
	/**
	 * The sensor's accuracy drops off when the temp is below 20*C. So the following is
	 * code to compensate for temperature below 20*C. 
	 */
	if (temp < 2000)
     3e4:	53 81       	ldd	r21, Z+3	; 0x03
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	9c 81       	ldd	r25, Y+4	; 0x04
     3ee:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     3f2:	a5 01       	movw	r20, r10
     3f4:	94 01       	movw	r18, r8
     3f6:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     3fa:	a3 01       	movw	r20, r6
     3fc:	92 01       	movw	r18, r4
     3fe:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
     402:	76 2e       	mov	r7, r22
     404:	67 2e       	mov	r6, r23
     406:	58 2e       	mov	r5, r24
     408:	49 2e       	mov	r4, r25
	{
		int64_t temp2 = (tempDifference * tempDifference) >> 31;
     40a:	a6 2e       	mov	r10, r22
     40c:	b7 2e       	mov	r11, r23
     40e:	08 2f       	mov	r16, r24
     410:	19 2f       	mov	r17, r25
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	a9 01       	movw	r20, r18
     418:	c7 01       	movw	r24, r14
     41a:	b6 01       	movw	r22, r12
     41c:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     420:	88 23       	and	r24, r24
     422:	09 f4       	brne	.+2      	; 0x426 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x82>
     424:	5a c0       	rjmp	.+180    	; 0x4da <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x136>
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	67 2d       	mov	r22, r7
     42e:	76 2d       	mov	r23, r6
     430:	85 2d       	mov	r24, r5
     432:	94 2d       	mov	r25, r4
     434:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
     438:	18 16       	cp	r1, r24
     43a:	5c f4       	brge	.+22     	; 0x452 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0xae>
     43c:	a7 01       	movw	r20, r14
     43e:	96 01       	movw	r18, r12
     440:	67 2d       	mov	r22, r7
     442:	76 2d       	mov	r23, r6
     444:	85 2d       	mov	r24, r5
     446:	94 2d       	mov	r25, r4
     448:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     44c:	88 23       	and	r24, r24
     44e:	7c f1       	brlt	.+94     	; 0x4ae <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x10a>
     450:	38 c0       	rjmp	.+112    	; 0x4c2 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x11e>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	a9 01       	movw	r20, r18
		
		int64_t temporaryValue = (temp - 2000);
		temporaryValue *= temporaryValue;
     458:	67 2d       	mov	r22, r7
     45a:	76 2d       	mov	r23, r6
     45c:	85 2d       	mov	r24, r5
     45e:	94 2d       	mov	r25, r4
     460:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     464:	88 23       	and	r24, r24
     466:	5c f4       	brge	.+22     	; 0x47e <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0xda>
     468:	a7 01       	movw	r20, r14
     46a:	96 01       	movw	r18, r12
     46c:	67 2d       	mov	r22, r7
     46e:	76 2d       	mov	r23, r6
     470:	85 2d       	mov	r24, r5
     472:	94 2d       	mov	r25, r4
     474:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
     478:	18 16       	cp	r1, r24
     47a:	f4 f0       	brlt	.+60     	; 0x4b8 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x114>
     47c:	0b c0       	rjmp	.+22     	; 0x494 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0xf0>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	a9 01       	movw	r20, r18
     484:	67 2d       	mov	r22, r7
     486:	76 2d       	mov	r23, r6
     488:	85 2d       	mov	r24, r5
     48a:	94 2d       	mov	r25, r4
		
		int64_t tempOffset2 = 5 * (temporaryValue >> 1);
     48c:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     490:	88 23       	and	r24, r24
     492:	19 f1       	breq	.+70     	; 0x4da <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x136>
     494:	a7 01       	movw	r20, r14
     496:	96 01       	movw	r18, r12
     498:	67 2d       	mov	r22, r7
     49a:	76 2d       	mov	r23, r6
     49c:	85 2d       	mov	r24, r5
     49e:	94 2d       	mov	r25, r4
     4a0:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
     4a4:	a6 2e       	mov	r10, r22
     4a6:	b7 2e       	mov	r11, r23
     4a8:	08 2f       	mov	r16, r24
     4aa:	19 2f       	mov	r17, r25
     4ac:	16 c0       	rjmp	.+44     	; 0x4da <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x136>
     4ae:	a1 2c       	mov	r10, r1
     4b0:	b1 2c       	mov	r11, r1
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	11 c0       	rjmp	.+34     	; 0x4da <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x136>
     4b8:	a1 2c       	mov	r10, r1
     4ba:	b1 2c       	mov	r11, r1
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	10 e0       	ldi	r17, 0x00	; 0
     4c0:	0c c0       	rjmp	.+24     	; 0x4da <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0x136>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	a9 01       	movw	r20, r18
     4c8:	67 2d       	mov	r22, r7
     4ca:	76 2d       	mov	r23, r6
     4cc:	85 2d       	mov	r24, r5
     4ce:	94 2d       	mov	r25, r4
     4d0:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     4d4:	88 23       	and	r24, r24
     4d6:	f4 f6       	brge	.-68     	; 0x494 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0xf0>
     4d8:	c7 cf       	rjmp	.-114    	; 0x468 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff+0xc4>
		int64_t sensitivity2 = 5 * (temporaryValue >> 2);	
     4da:	6a 2d       	mov	r22, r10
     4dc:	7b 2d       	mov	r23, r11
     4de:	80 2f       	mov	r24, r16
     4e0:	91 2f       	mov	r25, r17
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	9f 90       	pop	r9
     500:	8f 90       	pop	r8
     502:	7f 90       	pop	r7
     504:	6f 90       	pop	r6
     506:	5f 90       	pop	r5
     508:	4f 90       	pop	r4
     50a:	08 95       	ret

0000050c <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>:
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cb 01       	movw	r24, r22
     512:	ba 01       	movw	r22, r20
     514:	a9 01       	movw	r20, r18
     516:	98 01       	movw	r18, r16
     518:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>:
     522:	4f 92       	push	r4
     524:	5f 92       	push	r5
     526:	6f 92       	push	r6
     528:	7f 92       	push	r7
     52a:	8f 92       	push	r8
     52c:	9f 92       	push	r9
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
							
		//Temperature correction code for below 15*c
		if (temp < -1500)
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	28 97       	sbiw	r28, 0x08	; 8
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	2a 01       	movw	r4, r20
     554:	3b 01       	movw	r6, r22
		{
			int64_t temporaryValue2 = temp + 1500;
     556:	09 83       	std	Y+1, r16	; 0x01
     558:	1a 83       	std	Y+2, r17	; 0x02
     55a:	2b 83       	std	Y+3, r18	; 0x03
     55c:	3c 83       	std	Y+4, r19	; 0x04
     55e:	68 a1       	ldd	r22, Y+32	; 0x20
     560:	79 a1       	ldd	r23, Y+33	; 0x21
     562:	88 27       	eor	r24, r24
     564:	77 fd       	sbrc	r23, 7
     566:	80 95       	com	r24
     568:	98 2f       	mov	r25, r24
     56a:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
     56e:	6d 83       	std	Y+5, r22	; 0x05
     570:	7e 83       	std	Y+6, r23	; 0x06
     572:	8f 83       	std	Y+7, r24	; 0x07
     574:	98 87       	std	Y+8, r25	; 0x08
			temporaryValue2 *= temporaryValue2;
     576:	a5 01       	movw	r20, r10
     578:	94 01       	movw	r18, r8
     57a:	c3 01       	movw	r24, r6
     57c:	b2 01       	movw	r22, r4
     57e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     582:	a7 01       	movw	r20, r14
     584:	96 01       	movw	r18, r12
     586:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
     58a:	4b 01       	movw	r8, r22
     58c:	5c 01       	movw	r10, r24
     58e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     590:	3d 8d       	ldd	r19, Y+29	; 0x1d
     592:	4e 8d       	ldd	r20, Y+30	; 0x1e
     594:	5f 8d       	ldd	r21, Y+31	; 0x1f
     596:	69 81       	ldd	r22, Y+1	; 0x01
     598:	7a 81       	ldd	r23, Y+2	; 0x02
			
			tempOffset2 = tempOffset2 + 7 * temporaryValue2;
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	9c 81       	ldd	r25, Y+4	; 0x04
     59e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
     5a6:	c5 01       	movw	r24, r10
     5a8:	b4 01       	movw	r22, r8
     5aa:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
     5ae:	9b 01       	movw	r18, r22
     5b0:	ac 01       	movw	r20, r24
     5b2:	6d 81       	ldd	r22, Y+5	; 0x05
     5b4:	7e 81       	ldd	r23, Y+6	; 0x06
     5b6:	8f 81       	ldd	r24, Y+7	; 0x07
     5b8:	98 85       	ldd	r25, Y+8	; 0x08
     5ba:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     5be:	28 96       	adiw	r28, 0x08	; 8
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	9f 90       	pop	r9
     5e0:	8f 90       	pop	r8
     5e2:	7f 90       	pop	r7
     5e4:	6f 90       	pop	r6
     5e6:	5f 90       	pop	r5
			sensitivity2 = sensitivity2 + 11 * (temporaryValue2 >> 1);
     5e8:	4f 90       	pop	r4
     5ea:	08 95       	ret

000005ec <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>:
     5ec:	8f 92       	push	r8
     5ee:	9f 92       	push	r9
     5f0:	af 92       	push	r10
     5f2:	bf 92       	push	r11
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	a4 2e       	mov	r10, r20
     606:	b5 2e       	mov	r11, r21
     608:	d6 2f       	mov	r29, r22
     60a:	c7 2f       	mov	r28, r23
     60c:	82 2e       	mov	r8, r18
     60e:	93 2e       	mov	r9, r19
     610:	2c 2d       	mov	r18, r12
     612:	3d 2d       	mov	r19, r13
     614:	4e 2d       	mov	r20, r14
     616:	5f 2d       	mov	r21, r15
     618:	6a 2d       	mov	r22, r10
     61a:	7b 2d       	mov	r23, r11
     61c:	8d 2f       	mov	r24, r29
     61e:	9c 2f       	mov	r25, r28
     620:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
     624:	18 16       	cp	r1, r24
     626:	6c f0       	brlt	.+26     	; 0x642 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff+0x56>
     628:	20 2f       	mov	r18, r16
     62a:	31 2f       	mov	r19, r17
     62c:	48 2d       	mov	r20, r8
     62e:	59 2d       	mov	r21, r9
     630:	6a 2d       	mov	r22, r10
     632:	7b 2d       	mov	r23, r11
     634:	8d 2f       	mov	r24, r29
     636:	9c 2f       	mov	r25, r28
     638:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	34 f0       	brlt	.+12     	; 0x64c <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff+0x60>
     640:	09 c0       	rjmp	.+18     	; 0x654 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff+0x68>
     642:	ac 2c       	mov	r10, r12
     644:	bd 2c       	mov	r11, r13
     646:	de 2d       	mov	r29, r14
     648:	cf 2d       	mov	r28, r15
     64a:	04 c0       	rjmp	.+8      	; 0x654 <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff+0x68>
     64c:	a0 2e       	mov	r10, r16
     64e:	b1 2e       	mov	r11, r17
     650:	d8 2d       	mov	r29, r8
     652:	c9 2d       	mov	r28, r9
     654:	6a 2d       	mov	r22, r10
     656:	7b 2d       	mov	r23, r11
     658:	8d 2f       	mov	r24, r29
     65a:	9c 2f       	mov	r25, r28
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	bf 90       	pop	r11
     66e:	af 90       	pop	r10
     670:	9f 90       	pop	r9
     672:	8f 90       	pop	r8
     674:	08 95       	ret

00000676 <_Z30calculateInnerLoopControlValuefffff>:
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
		}
		
				
		temp = temp - temp2;
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
     69a:	a8 01       	movw	r20, r16
     69c:	97 01       	movw	r18, r14
     69e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     6a2:	2b 01       	movw	r4, r22
     6a4:	3c 01       	movw	r6, r24
     6a6:	2a 89       	ldd	r18, Y+18	; 0x12
     6a8:	3b 89       	ldd	r19, Y+19	; 0x13
     6aa:	4c 89       	ldd	r20, Y+20	; 0x14
     6ac:	5d 89       	ldd	r21, Y+21	; 0x15
     6ae:	c6 01       	movw	r24, r12
     6b0:	b5 01       	movw	r22, r10
     6b2:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	c3 01       	movw	r24, r6
     6bc:	b2 01       	movw	r22, r4
     6be:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
		tempOffset = tempOffset - tempOffset2;
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	bf 90       	pop	r11
     6d4:	af 90       	pop	r10
     6d6:	7f 90       	pop	r7
     6d8:	6f 90       	pop	r6
     6da:	5f 90       	pop	r5
     6dc:	4f 90       	pop	r4
     6de:	08 95       	ret

000006e0 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff>:
     6e0:	8f 92       	push	r8
     6e2:	9f 92       	push	r9
     6e4:	af 92       	push	r10
     6e6:	bf 92       	push	r11
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	a4 2e       	mov	r10, r20
     6fa:	b5 2e       	mov	r11, r21
		sensitivityAtTemp = sensitivityAtTemp - sensitivity2;
     6fc:	d6 2f       	mov	r29, r22
     6fe:	c7 2f       	mov	r28, r23
     700:	82 2e       	mov	r8, r18
     702:	93 2e       	mov	r9, r19
     704:	20 2f       	mov	r18, r16
     706:	31 2f       	mov	r19, r17
     708:	48 2d       	mov	r20, r8
     70a:	59 2d       	mov	r21, r9
     70c:	6a 2d       	mov	r22, r10
     70e:	7b 2d       	mov	r23, r11
     710:	8d 2f       	mov	r24, r29
     712:	9c 2f       	mov	r25, r28
     714:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     718:	88 23       	and	r24, r24
     71a:	6c f0       	brlt	.+26     	; 0x736 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff+0x56>
     71c:	2c 2d       	mov	r18, r12
     71e:	3d 2d       	mov	r19, r13
     720:	4e 2d       	mov	r20, r14
     722:	5f 2d       	mov	r21, r15
     724:	6a 2d       	mov	r22, r10
     726:	7b 2d       	mov	r23, r11
     728:	8d 2f       	mov	r24, r29
     72a:	9c 2f       	mov	r25, r28
     72c:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
     730:	18 16       	cp	r1, r24
     732:	34 f0       	brlt	.+12     	; 0x740 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff+0x60>
     734:	09 c0       	rjmp	.+18     	; 0x748 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff+0x68>
     736:	a0 2e       	mov	r10, r16
	}
	
	pressureMillibars = (((((rawPress * sensitivityAtTemp) >> 21) - tempOffset)) >> 15);
     738:	b1 2e       	mov	r11, r17
     73a:	d8 2d       	mov	r29, r8
     73c:	c9 2d       	mov	r28, r9
     73e:	04 c0       	rjmp	.+8      	; 0x748 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff+0x68>
     740:	ac 2c       	mov	r10, r12
     742:	bd 2c       	mov	r11, r13
     744:	de 2d       	mov	r29, r14
     746:	cf 2d       	mov	r28, r15
     748:	6a 2d       	mov	r22, r10
     74a:	7b 2d       	mov	r23, r11
     74c:	8d 2f       	mov	r24, r29
     74e:	9c 2f       	mov	r25, r28
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	9f 90       	pop	r9
     766:	8f 90       	pop	r8
     768:	08 95       	ret

0000076a <_ZN10helicopter10controller13PIDController13addBlownFrameEv>:
     76a:	dc 01       	movw	r26, r24
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	ef 53       	subi	r30, 0x3F	; 63
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	80 81       	ld	r24, Z
     776:	91 81       	ldd	r25, Z+1	; 0x01
     778:	a2 81       	ldd	r26, Z+2	; 0x02
     77a:	b3 81       	ldd	r27, Z+3	; 0x03
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	a1 1d       	adc	r26, r1
     780:	b1 1d       	adc	r27, r1
     782:	80 83       	st	Z, r24
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	a2 83       	std	Z+2, r26	; 0x02
     788:	b3 83       	std	Z+3, r27	; 0x03
     78a:	08 95       	ret

0000078c <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef>:
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	04 2f       	mov	r16, r20
     796:	15 2f       	mov	r17, r21
     798:	d6 2f       	mov	r29, r22
     79a:	c7 2f       	mov	r28, r23
	temperatureCelcius = temp;
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	44 e3       	ldi	r20, 0x34	; 52
     7a2:	53 e4       	ldi	r21, 0x43	; 67
     7a4:	60 2f       	mov	r22, r16
     7a6:	71 2f       	mov	r23, r17
     7a8:	8d 2f       	mov	r24, r29
     7aa:	9c 2f       	mov	r25, r28
     7ac:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
     7b0:	88 23       	and	r24, r24
     7b2:	7c f0       	brlt	.+30     	; 0x7d2 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x46>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	44 eb       	ldi	r20, 0xB4	; 180
}
     7ba:	53 e4       	ldi	r21, 0x43	; 67
     7bc:	60 2f       	mov	r22, r16
     7be:	71 2f       	mov	r23, r17
     7c0:	8d 2f       	mov	r24, r29
     7c2:	9c 2f       	mov	r25, r28
     7c4:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
     7c8:	06 2f       	mov	r16, r22
     7ca:	17 2f       	mov	r17, r23
     7cc:	d8 2f       	mov	r29, r24
     7ce:	c9 2f       	mov	r28, r25
     7d0:	1a c0       	rjmp	.+52     	; 0x806 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x7a>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	44 e3       	ldi	r20, 0x34	; 52
     7d8:	53 ec       	ldi	r21, 0xC3	; 195
     7da:	60 2f       	mov	r22, r16
     7dc:	71 2f       	mov	r23, r17
     7de:	8d 2f       	mov	r24, r29
     7e0:	9c 2f       	mov	r25, r28
     7e2:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
     7e6:	88 23       	and	r24, r24
     7e8:	74 f4       	brge	.+28     	; 0x806 <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef+0x7a>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
	{
		yawError = yawError - 360;
	}
	else if (yawError < -180)
	{
		yawError = yawError + 360;
     7ee:	44 eb       	ldi	r20, 0xB4	; 180
     7f0:	53 e4       	ldi	r21, 0x43	; 67
     7f2:	60 2f       	mov	r22, r16
     7f4:	71 2f       	mov	r23, r17
     7f6:	8d 2f       	mov	r24, r29
     7f8:	9c 2f       	mov	r25, r28
     7fa:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
     7fe:	06 2f       	mov	r16, r22
     800:	17 2f       	mov	r17, r23
     802:	d8 2f       	mov	r29, r24
     804:	c9 2f       	mov	r28, r25
	}
	
	return yawError;
}
     806:	60 2f       	mov	r22, r16
     808:	71 2f       	mov	r23, r17
     80a:	8d 2f       	mov	r24, r29
     80c:	9c 2f       	mov	r25, r28
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>:


void PIDController::tailRotorCollectiveOuterLoopUpdate()
{
     818:	2f 92       	push	r2
     81a:	3f 92       	push	r3
     81c:	4f 92       	push	r4
     81e:	5f 92       	push	r5
     820:	6f 92       	push	r6
     822:	7f 92       	push	r7
     824:	8f 92       	push	r8
     826:	9f 92       	push	r9
     828:	af 92       	push	r10
     82a:	bf 92       	push	r11
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	2a 97       	sbiw	r28, 0x0a	; 10
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	9a 87       	std	Y+10, r25	; 0x0a
     84e:	89 87       	std	Y+9, r24	; 0x09
	if (model->OperationalState() == SystemModel::AutoPilot)
     850:	dc 01       	movw	r26, r24
     852:	2d 90       	ld	r2, X+
     854:	3c 90       	ld	r3, X
     856:	11 97       	sbiw	r26, 0x01	; 1
     858:	f1 01       	movw	r30, r2
     85a:	80 81       	ld	r24, Z
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	09 f0       	breq	.+2      	; 0x862 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv+0x4a>
     860:	be c0       	rjmp	.+380    	; 0x9de <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv+0x1c6>
	{
		float yawProportional = calculateProportional(model->MagYawDegrees(), model->ReferenceMagYawDegrees());
     862:	05 81       	ldd	r16, Z+5	; 0x05
     864:	16 81       	ldd	r17, Z+6	; 0x06
     866:	27 81       	ldd	r18, Z+7	; 0x07
     868:	30 85       	ldd	r19, Z+8	; 0x08
     86a:	41 81       	ldd	r20, Z+1	; 0x01
     86c:	52 81       	ldd	r21, Z+2	; 0x02
     86e:	63 81       	ldd	r22, Z+3	; 0x03
     870:	74 81       	ldd	r23, Z+4	; 0x04
     872:	cd 01       	movw	r24, r26
     874:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
     878:	ab 01       	movw	r20, r22
     87a:	bc 01       	movw	r22, r24
		
		yawProportional = convertYawErrorFrom360to180(yawProportional);
     87c:	89 85       	ldd	r24, Y+9	; 0x09
     87e:	9a 85       	ldd	r25, Y+10	; 0x0a
     880:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN10helicopter10controller13PIDController27convertYawErrorFrom360to180Ef>
     884:	2b 01       	movw	r4, r22
     886:	3c 01       	movw	r6, r24
		
		float yawIntegralAntiWindup = calculateIntegralAntiWindup(model->YawControlBeforeServoLimitsAdjustment(), model->YawControl(), yawAntiWindupGain);
     888:	a9 85       	ldd	r26, Y+9	; 0x09
     88a:	ba 85       	ldd	r27, Y+10	; 0x0a
     88c:	1e 96       	adiw	r26, 0x0e	; 14
     88e:	cd 90       	ld	r12, X+
     890:	dd 90       	ld	r13, X+
     892:	ed 90       	ld	r14, X+
     894:	fc 90       	ld	r15, X
     896:	51 97       	sbiw	r26, 0x11	; 17
     898:	f1 01       	movw	r30, r2
     89a:	01 85       	ldd	r16, Z+9	; 0x09
     89c:	12 85       	ldd	r17, Z+10	; 0x0a
     89e:	23 85       	ldd	r18, Z+11	; 0x0b
     8a0:	34 85       	ldd	r19, Z+12	; 0x0c
     8a2:	45 85       	ldd	r20, Z+13	; 0x0d
     8a4:	56 85       	ldd	r21, Z+14	; 0x0e
     8a6:	67 85       	ldd	r22, Z+15	; 0x0f
     8a8:	70 89       	ldd	r23, Z+16	; 0x10
     8aa:	cd 01       	movw	r24, r26
     8ac:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
		float weightedYawIntegral = calculateIntegral(yawProportional, model->YawIntegral(), yawIntegralAntiWindup, yawIntegralGain);
     8b4:	a9 85       	ldd	r26, Y+9	; 0x09
     8b6:	ba 85       	ldd	r27, Y+10	; 0x0a
     8b8:	12 96       	adiw	r26, 0x02	; 2
     8ba:	8d 90       	ld	r8, X+
     8bc:	9d 90       	ld	r9, X+
     8be:	ad 90       	ld	r10, X+
     8c0:	bc 90       	ld	r11, X
     8c2:	15 97       	sbiw	r26, 0x05	; 5
     8c4:	f1 01       	movw	r30, r2
     8c6:	01 8d       	ldd	r16, Z+25	; 0x19
     8c8:	12 8d       	ldd	r17, Z+26	; 0x1a
     8ca:	23 8d       	ldd	r18, Z+27	; 0x1b
     8cc:	34 8d       	ldd	r19, Z+28	; 0x1c
     8ce:	b3 01       	movw	r22, r6
     8d0:	a2 01       	movw	r20, r4
     8d2:	cd 01       	movw	r24, r26
     8d4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
     8d8:	69 83       	std	Y+1, r22	; 0x01
     8da:	7a 83       	std	Y+2, r23	; 0x02
     8dc:	8b 83       	std	Y+3, r24	; 0x03
     8de:	9c 83       	std	Y+4, r25	; 0x04
		float yawDerivativeError = calculateVelocityError(model->YawVelocityDegreesPerSecond(), model->ReferenceYawVelocityDegreesPerSecond());
     8e0:	d1 01       	movw	r26, r2
     8e2:	55 96       	adiw	r26, 0x15	; 21
     8e4:	0d 91       	ld	r16, X+
     8e6:	1d 91       	ld	r17, X+
     8e8:	2d 91       	ld	r18, X+
     8ea:	3c 91       	ld	r19, X
     8ec:	58 97       	sbiw	r26, 0x18	; 24
     8ee:	51 96       	adiw	r26, 0x11	; 17
     8f0:	4d 91       	ld	r20, X+
     8f2:	5d 91       	ld	r21, X+
     8f4:	6d 91       	ld	r22, X+
     8f6:	7c 91       	ld	r23, X
     8f8:	54 97       	sbiw	r26, 0x14	; 20
     8fa:	89 85       	ldd	r24, Y+9	; 0x09
     8fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     8fe:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
     902:	6d 83       	std	Y+5, r22	; 0x05
     904:	7e 83       	std	Y+6, r23	; 0x06
     906:	8f 83       	std	Y+7, r24	; 0x07
     908:	98 87       	std	Y+8, r25	; 0x08
		float yawControlBeforeServoLimitsAdjustment = calculateOuterLoopControlValue(yawProportional, yawDerivativeError, weightedYawIntegral, yawProportionalGain, yawDerivativeGain, 1);
     90a:	e9 85       	ldd	r30, Y+9	; 0x09
     90c:	fa 85       	ldd	r31, Y+10	; 0x0a
     90e:	82 84       	ldd	r8, Z+10	; 0x0a
     910:	93 84       	ldd	r9, Z+11	; 0x0b
     912:	a4 84       	ldd	r10, Z+12	; 0x0c
     914:	b5 84       	ldd	r11, Z+13	; 0x0d
     916:	1f 92       	push	r1
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	8f 93       	push	r24
     91c:	81 85       	ldd	r24, Z+9	; 0x09
     91e:	8f 93       	push	r24
     920:	80 85       	ldd	r24, Z+8	; 0x08
     922:	8f 93       	push	r24
     924:	87 81       	ldd	r24, Z+7	; 0x07
     926:	8f 93       	push	r24
     928:	86 81       	ldd	r24, Z+6	; 0x06
     92a:	8f 93       	push	r24
     92c:	c9 80       	ldd	r12, Y+1	; 0x01
     92e:	da 80       	ldd	r13, Y+2	; 0x02
     930:	eb 80       	ldd	r14, Y+3	; 0x03
     932:	fc 80       	ldd	r15, Y+4	; 0x04
     934:	0d 81       	ldd	r16, Y+5	; 0x05
     936:	1e 81       	ldd	r17, Y+6	; 0x06
     938:	2f 81       	ldd	r18, Y+7	; 0x07
     93a:	38 85       	ldd	r19, Y+8	; 0x08
     93c:	b3 01       	movw	r22, r6
     93e:	a2 01       	movw	r20, r4
     940:	89 85       	ldd	r24, Y+9	; 0x09
     942:	9a 85       	ldd	r25, Y+10	; 0x0a
     944:	0e 94 91 02 	call	0x522	; 0x522 <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	4b 01       	movw	r8, r22
     956:	5c 01       	movw	r10, r24
		float yawControl = adjustControlForServoLimits(yawControlBeforeServoLimitsAdjustment, minYawServoControlValue, maxYawServoControlValue);
     958:	e9 85       	ldd	r30, Y+9	; 0x09
     95a:	fa 85       	ldd	r31, Y+10	; 0x0a
     95c:	ea 5a       	subi	r30, 0xAA	; 170
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	c0 80       	ld	r12, Z
     962:	d1 80       	ldd	r13, Z+1	; 0x01
     964:	e2 80       	ldd	r14, Z+2	; 0x02
     966:	f3 80       	ldd	r15, Z+3	; 0x03
     968:	e9 85       	ldd	r30, Y+9	; 0x09
     96a:	fa 85       	ldd	r31, Y+10	; 0x0a
     96c:	ee 5a       	subi	r30, 0xAE	; 174
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	00 81       	ld	r16, Z
     972:	11 81       	ldd	r17, Z+1	; 0x01
     974:	22 81       	ldd	r18, Z+2	; 0x02
     976:	33 81       	ldd	r19, Z+3	; 0x03
     978:	ab 01       	movw	r20, r22
     97a:	bc 01       	movw	r22, r24
     97c:	89 85       	ldd	r24, Y+9	; 0x09
     97e:	9a 85       	ldd	r25, Y+10	; 0x0a
     980:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>
			float ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(float val) { referenceMagYawDegrees = val;}
				
				
			float YawControl() const {return yawControl;}
			void YawControl(float val) { yawControl = val;}
     984:	d1 01       	movw	r26, r2
     986:	19 96       	adiw	r26, 0x09	; 9
     988:	6d 93       	st	X+, r22
     98a:	7d 93       	st	X+, r23
     98c:	8d 93       	st	X+, r24
     98e:	9c 93       	st	X, r25
     990:	1c 97       	sbiw	r26, 0x0c	; 12
		
		model->YawControl(yawControl);
		model->YawControlBeforeServoLimitsAdjustment(yawControlBeforeServoLimitsAdjustment);
     992:	a9 85       	ldd	r26, Y+9	; 0x09
     994:	ba 85       	ldd	r27, Y+10	; 0x0a
     996:	ed 91       	ld	r30, X+
     998:	fc 91       	ld	r31, X
     99a:	11 97       	sbiw	r26, 0x01	; 1
				
			float YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(float val) { yawControlBeforeServoLimitsAdjustment = val;}
     99c:	85 86       	std	Z+13, r8	; 0x0d
     99e:	96 86       	std	Z+14, r9	; 0x0e
     9a0:	a7 86       	std	Z+15, r10	; 0x0f
     9a2:	b0 8a       	std	Z+16, r11	; 0x10
		model->YawIntegral(weightedYawIntegral);
     9a4:	ed 91       	ld	r30, X+
     9a6:	fc 91       	ld	r31, X
				
			float ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(float val) { referenceYawVelocityDegreesPerSecond = val;}
				
			float YawIntegral() const {return yawIntegral;}
			void YawIntegral(float val) { yawIntegral = val;}
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	ab 81       	ldd	r26, Y+3	; 0x03
     9ae:	bc 81       	ldd	r27, Y+4	; 0x04
     9b0:	81 8f       	std	Z+25, r24	; 0x19
     9b2:	92 8f       	std	Z+26, r25	; 0x1a
     9b4:	a3 8f       	std	Z+27, r26	; 0x1b
     9b6:	b4 8f       	std	Z+28, r27	; 0x1c
		model->YawProportional(yawProportional);
     9b8:	a9 85       	ldd	r26, Y+9	; 0x09
     9ba:	ba 85       	ldd	r27, Y+10	; 0x0a
     9bc:	ed 91       	ld	r30, X+
     9be:	fc 91       	ld	r31, X
     9c0:	11 97       	sbiw	r26, 0x01	; 1

			float YawProportional() const {return yawProportional;}
			void YawProportional(float val) { yawProportional = val;}
     9c2:	45 8e       	std	Z+29, r4	; 0x1d
     9c4:	56 8e       	std	Z+30, r5	; 0x1e
     9c6:	67 8e       	std	Z+31, r6	; 0x1f
     9c8:	70 a2       	std	Z+32, r7	; 0x20
		model->YawDerivativeError(yawDerivativeError);
     9ca:	ed 91       	ld	r30, X+
     9cc:	fc 91       	ld	r31, X

			float YawDerivativeError() const {return yawDerivativeError;}
			void YawDerivativeError(float val) { yawDerivativeError = val;}								
     9ce:	8d 81       	ldd	r24, Y+5	; 0x05
     9d0:	9e 81       	ldd	r25, Y+6	; 0x06
     9d2:	af 81       	ldd	r26, Y+7	; 0x07
     9d4:	b8 85       	ldd	r27, Y+8	; 0x08
     9d6:	81 a3       	std	Z+33, r24	; 0x21
     9d8:	92 a3       	std	Z+34, r25	; 0x22
     9da:	a3 a3       	std	Z+35, r26	; 0x23
     9dc:	b4 a3       	std	Z+36, r27	; 0x24
	}
}
     9de:	2a 96       	adiw	r28, 0x0a	; 10
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	bf 90       	pop	r11
     9fc:	af 90       	pop	r10
     9fe:	9f 90       	pop	r9
     a00:	8f 90       	pop	r8
     a02:	7f 90       	pop	r7
     a04:	6f 90       	pop	r6
     a06:	5f 90       	pop	r5
     a08:	4f 90       	pop	r4
     a0a:	3f 90       	pop	r3
     a0c:	2f 90       	pop	r2
     a0e:	08 95       	ret

00000a10 <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv>:

void PIDController::mainRotorCollectiveOuterLoopUpdate()
{
     a10:	2f 92       	push	r2
     a12:	3f 92       	push	r3
     a14:	4f 92       	push	r4
     a16:	5f 92       	push	r5
     a18:	6f 92       	push	r6
     a1a:	7f 92       	push	r7
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	2a 97       	sbiw	r28, 0x0a	; 10
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	1c 01       	movw	r2, r24
	if (model->OperationalState() == SystemModel::AutoPilot)
     a46:	dc 01       	movw	r26, r24
     a48:	0d 90       	ld	r0, X+
     a4a:	bc 91       	ld	r27, X
     a4c:	a0 2d       	mov	r26, r0
     a4e:	be 83       	std	Y+6, r27	; 0x06
     a50:	ad 83       	std	Y+5, r26	; 0x05
     a52:	8c 91       	ld	r24, X
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	09 f0       	breq	.+2      	; 0xa5a <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv+0x4a>
     a58:	d0 c0       	rjmp	.+416    	; 0xbfa <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv+0x1ea>

			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
			void ZNEDBodyFrame(float val) { zNEDBodyFrame = val; }


			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
     a5a:	fd 01       	movw	r30, r26
     a5c:	e3 57       	subi	r30, 0x73	; 115
     a5e:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		float zProportional = calculateProportional(model->ZNEDBodyFrame(), model->ReferenceZNEDBodyFrameFeet());
     a60:	00 81       	ld	r16, Z
     a62:	11 81       	ldd	r17, Z+1	; 0x01
     a64:	22 81       	ldd	r18, Z+2	; 0x02
     a66:	33 81       	ldd	r19, Z+3	; 0x03
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
			void AltitudeFeetAgl(float val) { altitudeFeetAgl = val; }

			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
     a68:	fd 01       	movw	r30, r26
     a6a:	e7 57       	subi	r30, 0x77	; 119
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	40 81       	ld	r20, Z
     a70:	51 81       	ldd	r21, Z+1	; 0x01
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	c1 01       	movw	r24, r2
     a78:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
     a7c:	2b 01       	movw	r4, r22
     a7e:	3c 01       	movw	r6, r24
	
		float zIntegralAntiWindup = calculateIntegralAntiWindup(model->MainRotorControlBeforeServoLimitsAdjustment(), model->MainRotorCollectiveControl(), zAntiWindupGain);
     a80:	f1 01       	movw	r30, r2
     a82:	e2 5b       	subi	r30, 0xB2	; 178
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	c0 80       	ld	r12, Z
     a88:	d1 80       	ldd	r13, Z+1	; 0x01
     a8a:	e2 80       	ldd	r14, Z+2	; 0x02
     a8c:	f3 80       	ldd	r15, Z+3	; 0x03

			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
			void ReferenceZNEDBodyFrameFeet(float val) { referenceAltitudeFeet = val;}


			float MainRotorCollectiveControl() const {return mainRotorControl;}
     a8e:	ed 81       	ldd	r30, Y+5	; 0x05
     a90:	fe 81       	ldd	r31, Y+6	; 0x06
     a92:	ef 56       	subi	r30, 0x6F	; 111
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	fa 87       	std	Y+10, r31	; 0x0a
     a98:	e9 87       	std	Y+9, r30	; 0x09
     a9a:	00 81       	ld	r16, Z
     a9c:	11 81       	ldd	r17, Z+1	; 0x01
     a9e:	22 81       	ldd	r18, Z+2	; 0x02
     aa0:	33 81       	ldd	r19, Z+3	; 0x03
			void MainRotorCollectiveControl(float val) { mainRotorControl = val;}

			float MainRotorControlBeforeServoLimitsAdjustment() const {return mainRotorControlBeforeServoLimitsAdjustment;}
     aa2:	ed 81       	ldd	r30, Y+5	; 0x05
     aa4:	fe 81       	ldd	r31, Y+6	; 0x06
     aa6:	eb 56       	subi	r30, 0x6B	; 107
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	40 81       	ld	r20, Z
     aac:	51 81       	ldd	r21, Z+1	; 0x01
     aae:	62 81       	ldd	r22, Z+2	; 0x02
     ab0:	73 81       	ldd	r23, Z+3	; 0x03
     ab2:	c1 01       	movw	r24, r2
     ab4:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
     ab8:	6b 01       	movw	r12, r22
     aba:	7c 01       	movw	r14, r24
		float weightedZIntegral = calculateIntegral(zProportional, model->ZIntegral(), zIntegralAntiWindup, zIntegralGain);
     abc:	f1 01       	movw	r30, r2
     abe:	ee 5b       	subi	r30, 0xBE	; 190
     ac0:	ff 4f       	sbci	r31, 0xFF	; 255
     ac2:	80 80       	ld	r8, Z
     ac4:	91 80       	ldd	r9, Z+1	; 0x01
     ac6:	a2 80       	ldd	r10, Z+2	; 0x02
     ac8:	b3 80       	ldd	r11, Z+3	; 0x03
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}

			float ReferenceZVelocityFeetPerSecond() const {return referenceZVelocityFeetPerSecond;}
			void ReferenceZVelocityFeetPerSecond(float val) { referenceZVelocityFeetPerSecond = val;}

			float ZIntegral() const {return zIntegral;}
     aca:	ed 81       	ldd	r30, Y+5	; 0x05
     acc:	fe 81       	ldd	r31, Y+6	; 0x06
     ace:	ef 55       	subi	r30, 0x5F	; 95
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	00 81       	ld	r16, Z
     ad4:	11 81       	ldd	r17, Z+1	; 0x01
     ad6:	22 81       	ldd	r18, Z+2	; 0x02
     ad8:	33 81       	ldd	r19, Z+3	; 0x03
     ada:	b3 01       	movw	r22, r6
     adc:	a2 01       	movw	r20, r4
     ade:	c1 01       	movw	r24, r2
     ae0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
     ae4:	69 83       	std	Y+1, r22	; 0x01
     ae6:	7a 83       	std	Y+2, r23	; 0x02
     ae8:	8b 83       	std	Y+3, r24	; 0x03
     aea:	9c 83       	std	Y+4, r25	; 0x04
			void MainRotorControlBeforeServoLimitsAdjustment(float val) { mainRotorControlBeforeServoLimitsAdjustment = val;}

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}

			float ReferenceZVelocityFeetPerSecond() const {return referenceZVelocityFeetPerSecond;}
     aec:	ed 81       	ldd	r30, Y+5	; 0x05
     aee:	fe 81       	ldd	r31, Y+6	; 0x06
     af0:	e3 56       	subi	r30, 0x63	; 99
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
		float zDerivativeError = calculateVelocityError(model->ZVelocityFeetPerSecond(), model->ReferenceZVelocityFeetPerSecond());
     af4:	00 81       	ld	r16, Z
     af6:	11 81       	ldd	r17, Z+1	; 0x01
     af8:	22 81       	ldd	r18, Z+2	; 0x02
     afa:	33 81       	ldd	r19, Z+3	; 0x03
			void MainRotorCollectiveControl(float val) { mainRotorControl = val;}

			float MainRotorControlBeforeServoLimitsAdjustment() const {return mainRotorControlBeforeServoLimitsAdjustment;}
			void MainRotorControlBeforeServoLimitsAdjustment(float val) { mainRotorControlBeforeServoLimitsAdjustment = val;}

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
     afc:	ed 81       	ldd	r30, Y+5	; 0x05
     afe:	fe 81       	ldd	r31, Y+6	; 0x06
     b00:	e7 56       	subi	r30, 0x67	; 103
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	40 81       	ld	r20, Z
     b06:	51 81       	ldd	r21, Z+1	; 0x01
     b08:	62 81       	ldd	r22, Z+2	; 0x02
     b0a:	73 81       	ldd	r23, Z+3	; 0x03
     b0c:	c1 01       	movw	r24, r2
     b0e:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
     b12:	6d 83       	std	Y+5, r22	; 0x05
     b14:	7e 83       	std	Y+6, r23	; 0x06
     b16:	8f 83       	std	Y+7, r24	; 0x07
     b18:	98 87       	std	Y+8, r25	; 0x08
		float mainRotorControlBeforeServoLimitsAdjustment = calculateOuterLoopControlValue(zProportional, zDerivativeError, weightedZIntegral, zProportionalGain, zDerivativeGain, 1);
     b1a:	f1 01       	movw	r30, r2
     b1c:	e6 5b       	subi	r30, 0xB6	; 182
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	80 80       	ld	r8, Z
     b22:	91 80       	ldd	r9, Z+1	; 0x01
     b24:	a2 80       	ldd	r10, Z+2	; 0x02
     b26:	b3 80       	ldd	r11, Z+3	; 0x03
     b28:	1f 92       	push	r1
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	8f 93       	push	r24
     b2e:	f1 01       	movw	r30, r2
     b30:	ea 5b       	subi	r30, 0xBA	; 186
     b32:	ff 4f       	sbci	r31, 0xFF	; 255
     b34:	83 81       	ldd	r24, Z+3	; 0x03
     b36:	8f 93       	push	r24
     b38:	82 81       	ldd	r24, Z+2	; 0x02
     b3a:	8f 93       	push	r24
     b3c:	81 81       	ldd	r24, Z+1	; 0x01
     b3e:	8f 93       	push	r24
     b40:	80 81       	ld	r24, Z
     b42:	8f 93       	push	r24
     b44:	c9 80       	ldd	r12, Y+1	; 0x01
     b46:	da 80       	ldd	r13, Y+2	; 0x02
     b48:	eb 80       	ldd	r14, Y+3	; 0x03
     b4a:	fc 80       	ldd	r15, Y+4	; 0x04
     b4c:	0d 81       	ldd	r16, Y+5	; 0x05
     b4e:	1e 81       	ldd	r17, Y+6	; 0x06
     b50:	2f 81       	ldd	r18, Y+7	; 0x07
     b52:	38 85       	ldd	r19, Y+8	; 0x08
     b54:	b3 01       	movw	r22, r6
     b56:	a2 01       	movw	r20, r4
     b58:	c1 01       	movw	r24, r2
     b5a:	0e 94 91 02 	call	0x522	; 0x522 <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	4b 01       	movw	r8, r22
     b6c:	5c 01       	movw	r10, r24
		float mainRotorControl = adjustControlForServoLimits(mainRotorControlBeforeServoLimitsAdjustment, minMainRotorServoControlValue, maxMainRotorServoControlValue);
     b6e:	f1 01       	movw	r30, r2
     b70:	e2 59       	subi	r30, 0x92	; 146
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	c0 80       	ld	r12, Z
     b76:	d1 80       	ldd	r13, Z+1	; 0x01
     b78:	e2 80       	ldd	r14, Z+2	; 0x02
     b7a:	f3 80       	ldd	r15, Z+3	; 0x03
     b7c:	f1 01       	movw	r30, r2
     b7e:	e6 59       	subi	r30, 0x96	; 150
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	00 81       	ld	r16, Z
     b84:	11 81       	ldd	r17, Z+1	; 0x01
     b86:	22 81       	ldd	r18, Z+2	; 0x02
     b88:	33 81       	ldd	r19, Z+3	; 0x03
     b8a:	ab 01       	movw	r20, r22
     b8c:	bc 01       	movw	r22, r24
     b8e:	c1 01       	movw	r24, r2
     b90:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>
			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
			void ReferenceZNEDBodyFrameFeet(float val) { referenceAltitudeFeet = val;}


			float MainRotorCollectiveControl() const {return mainRotorControl;}
			void MainRotorCollectiveControl(float val) { mainRotorControl = val;}
     b94:	a9 85       	ldd	r26, Y+9	; 0x09
     b96:	ba 85       	ldd	r27, Y+10	; 0x0a
     b98:	6d 93       	st	X+, r22
     b9a:	7d 93       	st	X+, r23
     b9c:	8d 93       	st	X+, r24
     b9e:	9c 93       	st	X, r25
     ba0:	13 97       	sbiw	r26, 0x03	; 3
	
		model->MainRotorCollectiveControl(mainRotorControl);
		model->MainRotorControlBeforeServoLimitsAdjustment(mainRotorControlBeforeServoLimitsAdjustment);
     ba2:	d1 01       	movw	r26, r2
     ba4:	ed 91       	ld	r30, X+
     ba6:	fc 91       	ld	r31, X
     ba8:	11 97       	sbiw	r26, 0x01	; 1

			float MainRotorControlBeforeServoLimitsAdjustment() const {return mainRotorControlBeforeServoLimitsAdjustment;}
			void MainRotorControlBeforeServoLimitsAdjustment(float val) { mainRotorControlBeforeServoLimitsAdjustment = val;}
     baa:	eb 56       	subi	r30, 0x6B	; 107
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	80 82       	st	Z, r8
     bb0:	91 82       	std	Z+1, r9	; 0x01
     bb2:	a2 82       	std	Z+2, r10	; 0x02
     bb4:	b3 82       	std	Z+3, r11	; 0x03
		model->ZIntegral(weightedZIntegral);
     bb6:	ed 91       	ld	r30, X+
     bb8:	fc 91       	ld	r31, X

			float ReferenceZVelocityFeetPerSecond() const {return referenceZVelocityFeetPerSecond;}
			void ReferenceZVelocityFeetPerSecond(float val) { referenceZVelocityFeetPerSecond = val;}

			float ZIntegral() const {return zIntegral;}
			void ZIntegral(float val) { zIntegral = val;}
     bba:	ef 55       	subi	r30, 0x5F	; 95
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	ab 81       	ldd	r26, Y+3	; 0x03
     bc4:	bc 81       	ldd	r27, Y+4	; 0x04
     bc6:	80 83       	st	Z, r24
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	a2 83       	std	Z+2, r26	; 0x02
     bcc:	b3 83       	std	Z+3, r27	; 0x03
		model->ZProportional(zProportional);
     bce:	d1 01       	movw	r26, r2
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1

			float ZProportional() const {return zProportional;}
			void ZProportional(float val) { zProportional = val;}
     bd6:	eb 55       	subi	r30, 0x5B	; 91
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	40 82       	st	Z, r4
     bdc:	51 82       	std	Z+1, r5	; 0x01
     bde:	62 82       	std	Z+2, r6	; 0x02
     be0:	73 82       	std	Z+3, r7	; 0x03
		model->ZDerivativeError(zDerivativeError);
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X

			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
     be6:	e7 55       	subi	r30, 0x57	; 87
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	9e 81       	ldd	r25, Y+6	; 0x06
     bee:	af 81       	ldd	r26, Y+7	; 0x07
     bf0:	b8 85       	ldd	r27, Y+8	; 0x08
     bf2:	80 83       	st	Z, r24
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	a2 83       	std	Z+2, r26	; 0x02
     bf8:	b3 83       	std	Z+3, r27	; 0x03
	}
}
     bfa:	2a 96       	adiw	r28, 0x0a	; 10
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	ef 90       	pop	r14
     c12:	df 90       	pop	r13
     c14:	cf 90       	pop	r12
     c16:	bf 90       	pop	r11
     c18:	af 90       	pop	r10
     c1a:	9f 90       	pop	r9
     c1c:	8f 90       	pop	r8
     c1e:	7f 90       	pop	r7
     c20:	6f 90       	pop	r6
     c22:	5f 90       	pop	r5
     c24:	4f 90       	pop	r4
     c26:	3f 90       	pop	r3
     c28:	2f 90       	pop	r2
     c2a:	08 95       	ret

00000c2c <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv>:

void PIDController::cyclicLongitudeOuterLoopUpdate()
{
     c2c:	2f 92       	push	r2
     c2e:	3f 92       	push	r3
     c30:	4f 92       	push	r4
     c32:	5f 92       	push	r5
     c34:	6f 92       	push	r6
     c36:	7f 92       	push	r7
     c38:	8f 92       	push	r8
     c3a:	9f 92       	push	r9
     c3c:	af 92       	push	r10
     c3e:	bf 92       	push	r11
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	2a 97       	sbiw	r28, 0x0a	; 10
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	9a 87       	std	Y+10, r25	; 0x0a
     c62:	89 87       	std	Y+9, r24	; 0x09
	if (model->OperationalState() == SystemModel::AutoPilot)
     c64:	dc 01       	movw	r26, r24
     c66:	2d 90       	ld	r2, X+
     c68:	3c 90       	ld	r3, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	f1 01       	movw	r30, r2
     c6e:	80 81       	ld	r24, Z
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	09 f0       	breq	.+2      	; 0xc76 <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv+0x4a>
     c74:	bb c0       	rjmp	.+374    	; 0xdec <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv+0x1c0>
	{
		float xProportional = calculateProportional(model->XNEDBodyFrame(), model->ReferenceXNEDBodyFrame());
     c76:	01 a5       	ldd	r16, Z+41	; 0x29
     c78:	12 a5       	ldd	r17, Z+42	; 0x2a
     c7a:	23 a5       	ldd	r18, Z+43	; 0x2b
     c7c:	34 a5       	ldd	r19, Z+44	; 0x2c
     c7e:	45 a1       	ldd	r20, Z+37	; 0x25
     c80:	56 a1       	ldd	r21, Z+38	; 0x26
     c82:	67 a1       	ldd	r22, Z+39	; 0x27
     c84:	70 a5       	ldd	r23, Z+40	; 0x28
     c86:	cd 01       	movw	r24, r26
     c88:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
     c8c:	2b 01       	movw	r4, r22
     c8e:	3c 01       	movw	r6, r24
		float xIntegralAntiWindup = calculateIntegralAntiWindup(model->LongitudeControlBeforeServoLimitsAdjustment(), model->LongitudeControl(), xAntiWindupGain);
     c90:	a9 85       	ldd	r26, Y+9	; 0x09
     c92:	ba 85       	ldd	r27, Y+10	; 0x0a
     c94:	5e 96       	adiw	r26, 0x1e	; 30
     c96:	cd 90       	ld	r12, X+
     c98:	dd 90       	ld	r13, X+
     c9a:	ed 90       	ld	r14, X+
     c9c:	fc 90       	ld	r15, X
     c9e:	91 97       	sbiw	r26, 0x21	; 33
     ca0:	f1 01       	movw	r30, r2
     ca2:	01 a9       	ldd	r16, Z+49	; 0x31
     ca4:	12 a9       	ldd	r17, Z+50	; 0x32
     ca6:	23 a9       	ldd	r18, Z+51	; 0x33
     ca8:	34 a9       	ldd	r19, Z+52	; 0x34
     caa:	45 a5       	ldd	r20, Z+45	; 0x2d
     cac:	56 a5       	ldd	r21, Z+46	; 0x2e
     cae:	67 a5       	ldd	r22, Z+47	; 0x2f
     cb0:	70 a9       	ldd	r23, Z+48	; 0x30
     cb2:	cd 01       	movw	r24, r26
     cb4:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
     cb8:	6b 01       	movw	r12, r22
     cba:	7c 01       	movw	r14, r24
		float weightedXIntegral = calculateIntegral(xProportional, model->XIntegral(), xIntegralAntiWindup, xIntegralGain);
     cbc:	a9 85       	ldd	r26, Y+9	; 0x09
     cbe:	ba 85       	ldd	r27, Y+10	; 0x0a
     cc0:	52 96       	adiw	r26, 0x12	; 18
     cc2:	8d 90       	ld	r8, X+
     cc4:	9d 90       	ld	r9, X+
     cc6:	ad 90       	ld	r10, X+
     cc8:	bc 90       	ld	r11, X
     cca:	55 97       	sbiw	r26, 0x15	; 21
			void XLongitudeOuterLoopSetpoint(float val) { xLongitudeOuterLoopSetpoint = val;}
				
			float XProportional() const {return xProportional;}
			void XProportional(float val) { xProportional = val;}
				
			float XIntegral() const {return xIntegral;}
     ccc:	f1 01       	movw	r30, r2
     cce:	eb 5b       	subi	r30, 0xBB	; 187
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	00 81       	ld	r16, Z
     cd4:	11 81       	ldd	r17, Z+1	; 0x01
     cd6:	22 81       	ldd	r18, Z+2	; 0x02
     cd8:	33 81       	ldd	r19, Z+3	; 0x03
     cda:	b3 01       	movw	r22, r6
     cdc:	a2 01       	movw	r20, r4
     cde:	cd 01       	movw	r24, r26
     ce0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
     ce4:	69 83       	std	Y+1, r22	; 0x01
     ce6:	7a 83       	std	Y+2, r23	; 0x02
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	9c 83       	std	Y+4, r25	; 0x04
		float xDerivativeError = calculateVelocityError(model->XVelocityMetersPerSecond(), model->ReferenceXVelocityMetersPerSecond());
     cec:	f1 01       	movw	r30, r2
     cee:	01 ad       	ldd	r16, Z+57	; 0x39
     cf0:	12 ad       	ldd	r17, Z+58	; 0x3a
     cf2:	23 ad       	ldd	r18, Z+59	; 0x3b
     cf4:	34 ad       	ldd	r19, Z+60	; 0x3c
     cf6:	45 a9       	ldd	r20, Z+53	; 0x35
     cf8:	56 a9       	ldd	r21, Z+54	; 0x36
     cfa:	67 a9       	ldd	r22, Z+55	; 0x37
     cfc:	70 ad       	ldd	r23, Z+56	; 0x38
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
     d06:	6d 83       	std	Y+5, r22	; 0x05
     d08:	7e 83       	std	Y+6, r23	; 0x06
     d0a:	8f 83       	std	Y+7, r24	; 0x07
     d0c:	98 87       	std	Y+8, r25	; 0x08
		float xLongitudinalOuterLoopSetpoint = calculateOuterLoopControlValue(xProportional, xDerivativeError, weightedXIntegral, xProportionalGain, xDerivativeGain, 1);
     d0e:	a9 85       	ldd	r26, Y+9	; 0x09
     d10:	ba 85       	ldd	r27, Y+10	; 0x0a
     d12:	5a 96       	adiw	r26, 0x1a	; 26
     d14:	8d 90       	ld	r8, X+
     d16:	9d 90       	ld	r9, X+
     d18:	ad 90       	ld	r10, X+
     d1a:	bc 90       	ld	r11, X
     d1c:	5d 97       	sbiw	r26, 0x1d	; 29
     d1e:	1f 92       	push	r1
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8f 93       	push	r24
     d24:	59 96       	adiw	r26, 0x19	; 25
     d26:	8c 91       	ld	r24, X
     d28:	59 97       	sbiw	r26, 0x19	; 25
     d2a:	8f 93       	push	r24
     d2c:	58 96       	adiw	r26, 0x18	; 24
     d2e:	8c 91       	ld	r24, X
     d30:	58 97       	sbiw	r26, 0x18	; 24
     d32:	8f 93       	push	r24
     d34:	57 96       	adiw	r26, 0x17	; 23
     d36:	8c 91       	ld	r24, X
     d38:	57 97       	sbiw	r26, 0x17	; 23
     d3a:	8f 93       	push	r24
     d3c:	56 96       	adiw	r26, 0x16	; 22
     d3e:	8c 91       	ld	r24, X
     d40:	8f 93       	push	r24
     d42:	c9 80       	ldd	r12, Y+1	; 0x01
     d44:	da 80       	ldd	r13, Y+2	; 0x02
     d46:	eb 80       	ldd	r14, Y+3	; 0x03
     d48:	fc 80       	ldd	r15, Y+4	; 0x04
     d4a:	0d 81       	ldd	r16, Y+5	; 0x05
     d4c:	1e 81       	ldd	r17, Y+6	; 0x06
     d4e:	2f 81       	ldd	r18, Y+7	; 0x07
     d50:	38 85       	ldd	r19, Y+8	; 0x08
     d52:	b3 01       	movw	r22, r6
     d54:	a2 01       	movw	r20, r4
     d56:	89 85       	ldd	r24, Y+9	; 0x09
     d58:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5a:	0e 94 91 02 	call	0x522	; 0x522 <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	ab 01       	movw	r20, r22
     d6c:	bc 01       	movw	r22, r24
	
		xLongitudinalOuterLoopSetpoint = adjustForSetpointLimits(xLongitudinalOuterLoopSetpoint, minPitchSetpointDegrees, maxPitchSetpointDegrees);
     d6e:	e9 85       	ldd	r30, Y+9	; 0x09
     d70:	fa 85       	ldd	r31, Y+10	; 0x0a
     d72:	ea 58       	subi	r30, 0x8A	; 138
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	c0 80       	ld	r12, Z
     d78:	d1 80       	ldd	r13, Z+1	; 0x01
     d7a:	e2 80       	ldd	r14, Z+2	; 0x02
     d7c:	f3 80       	ldd	r15, Z+3	; 0x03
     d7e:	e9 85       	ldd	r30, Y+9	; 0x09
     d80:	fa 85       	ldd	r31, Y+10	; 0x0a
     d82:	ee 58       	subi	r30, 0x8E	; 142
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	00 81       	ld	r16, Z
     d88:	11 81       	ldd	r17, Z+1	; 0x01
     d8a:	22 81       	ldd	r18, Z+2	; 0x02
     d8c:	33 81       	ldd	r19, Z+3	; 0x03
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff>
				
			float ReferenceXVelocityMetersPerSecond() const {return referenceXVelocityMetersPerSecond;}
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
				
			float XLongitudeOuterLoopSetpoint() const {return xLongitudeOuterLoopSetpoint;}
			void XLongitudeOuterLoopSetpoint(float val) { xLongitudeOuterLoopSetpoint = val;}
     d96:	f1 01       	movw	r30, r2
     d98:	fd 96       	adiw	r30, 0x3d	; 61
     d9a:	60 83       	st	Z, r22
     d9c:	71 83       	std	Z+1, r23	; 0x01
     d9e:	82 83       	std	Z+2, r24	; 0x02
     da0:	93 83       	std	Z+3, r25	; 0x03

		model->XLongitudeOuterLoopSetpoint(xLongitudinalOuterLoopSetpoint);
		model->XIntegral(weightedXIntegral);
     da2:	a9 85       	ldd	r26, Y+9	; 0x09
     da4:	ba 85       	ldd	r27, Y+10	; 0x0a
     da6:	ed 91       	ld	r30, X+
     da8:	fc 91       	ld	r31, X
				
			float XProportional() const {return xProportional;}
			void XProportional(float val) { xProportional = val;}
				
			float XIntegral() const {return xIntegral;}
			void XIntegral(float val) { xIntegral = val;}
     daa:	eb 5b       	subi	r30, 0xBB	; 187
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	ab 81       	ldd	r26, Y+3	; 0x03
     db4:	bc 81       	ldd	r27, Y+4	; 0x04
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	a2 83       	std	Z+2, r26	; 0x02
     dbc:	b3 83       	std	Z+3, r27	; 0x03
		model->XProportional(xProportional);
     dbe:	a9 85       	ldd	r26, Y+9	; 0x09
     dc0:	ba 85       	ldd	r27, Y+10	; 0x0a
     dc2:	ed 91       	ld	r30, X+
     dc4:	fc 91       	ld	r31, X
     dc6:	11 97       	sbiw	r26, 0x01	; 1
				
			float XLongitudeOuterLoopSetpoint() const {return xLongitudeOuterLoopSetpoint;}
			void XLongitudeOuterLoopSetpoint(float val) { xLongitudeOuterLoopSetpoint = val;}
				
			float XProportional() const {return xProportional;}
			void XProportional(float val) { xProportional = val;}
     dc8:	ef 5b       	subi	r30, 0xBF	; 191
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	40 82       	st	Z, r4
     dce:	51 82       	std	Z+1, r5	; 0x01
     dd0:	62 82       	std	Z+2, r6	; 0x02
     dd2:	73 82       	std	Z+3, r7	; 0x03
		model->XDerivativeError(xDerivativeError);
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
				
			float XIntegral() const {return xIntegral;}
			void XIntegral(float val) { xIntegral = val;}
				
			float XDerivativeError() const {return xDerivativeError;}
			void XDerivativeError(float val) { xDerivativeError = val;}
     dd8:	e7 5b       	subi	r30, 0xB7	; 183
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	af 81       	ldd	r26, Y+7	; 0x07
     de2:	b8 85       	ldd	r27, Y+8	; 0x08
     de4:	80 83       	st	Z, r24
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	a2 83       	std	Z+2, r26	; 0x02
     dea:	b3 83       	std	Z+3, r27	; 0x03
	}
}
     dec:	2a 96       	adiw	r28, 0x0a	; 10
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	9f 90       	pop	r9
     e0e:	8f 90       	pop	r8
     e10:	7f 90       	pop	r7
     e12:	6f 90       	pop	r6
     e14:	5f 90       	pop	r5
     e16:	4f 90       	pop	r4
     e18:	3f 90       	pop	r3
     e1a:	2f 90       	pop	r2
     e1c:	08 95       	ret

00000e1e <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv>:

void PIDController::cyclicLateralOuterLoopUpdate()
{
     e1e:	2f 92       	push	r2
     e20:	3f 92       	push	r3
     e22:	4f 92       	push	r4
     e24:	5f 92       	push	r5
     e26:	6f 92       	push	r6
     e28:	7f 92       	push	r7
     e2a:	8f 92       	push	r8
     e2c:	9f 92       	push	r9
     e2e:	af 92       	push	r10
     e30:	bf 92       	push	r11
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2a 97       	sbiw	r28, 0x0a	; 10
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	9a 87       	std	Y+10, r25	; 0x0a
     e54:	89 87       	std	Y+9, r24	; 0x09
	if (model->OperationalState() == SystemModel::AutoPilot)
     e56:	dc 01       	movw	r26, r24
     e58:	2d 90       	ld	r2, X+
     e5a:	3c 90       	ld	r3, X
     e5c:	11 97       	sbiw	r26, 0x01	; 1
     e5e:	f1 01       	movw	r30, r2
     e60:	80 81       	ld	r24, Z
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	09 f0       	breq	.+2      	; 0xe68 <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv+0x4a>
     e66:	ca c0       	rjmp	.+404    	; 0xffc <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv+0x1de>


			float YNEDBodyFrame() const {return yNEDBodyFrame;}
			void YNEDBodyFrame(float val) { yNEDBodyFrame = val;}

			float ReferenceYNEDBodyFrame() const {return referenceYNEDBodyFrame;}
     e68:	e7 5a       	subi	r30, 0xA7	; 167
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		float yProportional = calculateProportional(model->YNEDBodyFrame(), model->ReferenceYNEDBodyFrame());
     e6c:	00 81       	ld	r16, Z
     e6e:	11 81       	ldd	r17, Z+1	; 0x01
     e70:	22 81       	ldd	r18, Z+2	; 0x02
     e72:	33 81       	ldd	r19, Z+3	; 0x03
						
						
						


			float YNEDBodyFrame() const {return yNEDBodyFrame;}
     e74:	f1 01       	movw	r30, r2
     e76:	eb 5a       	subi	r30, 0xAB	; 171
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	40 81       	ld	r20, Z
     e7c:	51 81       	ldd	r21, Z+1	; 0x01
     e7e:	62 81       	ldd	r22, Z+2	; 0x02
     e80:	73 81       	ldd	r23, Z+3	; 0x03
     e82:	cd 01       	movw	r24, r26
     e84:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN10helicopter10controller13PIDController21calculateProportionalEff>
     e88:	2b 01       	movw	r4, r22
     e8a:	3c 01       	movw	r6, r24
		float yIntegralAntiWindup = calculateIntegralAntiWindup(model->LateralControlBeforeServoLimitsAdjustment(), model->LateralControl(), yAntiWindupGain);
     e8c:	a9 85       	ldd	r26, Y+9	; 0x09
     e8e:	ba 85       	ldd	r27, Y+10	; 0x0a
     e90:	d6 96       	adiw	r26, 0x36	; 54
     e92:	cd 90       	ld	r12, X+
     e94:	dd 90       	ld	r13, X+
     e96:	ed 90       	ld	r14, X+
     e98:	fc 90       	ld	r15, X
     e9a:	d9 97       	sbiw	r26, 0x39	; 57
			void ReferenceYNEDBodyFrame(float val) { referenceYNEDBodyFrame = val;}

			float LateralControlBeforeServoLimitsAdjustment() const {return lateralControlBeforeServoLimitsAdjustment;}
			void LateralControlBeforeServoLimitsAdjustment(float val) { lateralControlBeforeServoLimitsAdjustment = val;}

			float LateralControl() const {return lateralControl;}
     e9c:	f1 01       	movw	r30, r2
     e9e:	ef 59       	subi	r30, 0x9F	; 159
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	00 81       	ld	r16, Z
     ea4:	11 81       	ldd	r17, Z+1	; 0x01
     ea6:	22 81       	ldd	r18, Z+2	; 0x02
     ea8:	33 81       	ldd	r19, Z+3	; 0x03
			void YNEDBodyFrame(float val) { yNEDBodyFrame = val;}

			float ReferenceYNEDBodyFrame() const {return referenceYNEDBodyFrame;}
			void ReferenceYNEDBodyFrame(float val) { referenceYNEDBodyFrame = val;}

			float LateralControlBeforeServoLimitsAdjustment() const {return lateralControlBeforeServoLimitsAdjustment;}
     eaa:	f1 01       	movw	r30, r2
     eac:	e3 5a       	subi	r30, 0xA3	; 163
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	40 81       	ld	r20, Z
     eb2:	51 81       	ldd	r21, Z+1	; 0x01
     eb4:	62 81       	ldd	r22, Z+2	; 0x02
     eb6:	73 81       	ldd	r23, Z+3	; 0x03
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN10helicopter10controller13PIDController27calculateIntegralAntiWindupEfff>
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
		float weightedYIntegral = calculateIntegral(yProportional, model->YIntegral(), yIntegralAntiWindup, yIntegralGain);
     ec2:	e9 85       	ldd	r30, Y+9	; 0x09
     ec4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ec6:	82 a4       	ldd	r8, Z+42	; 0x2a
     ec8:	93 a4       	ldd	r9, Z+43	; 0x2b
     eca:	a4 a4       	ldd	r10, Z+44	; 0x2c
     ecc:	b5 a4       	ldd	r11, Z+45	; 0x2d
			void YLateralOuterLoopSetpoint(float val) { yLateralOuterLoopSetpoint = val;}

			float YProportional() const {return yProportional;}
			void YProportional(float val) { yProportional = val;}

			float YIntegral() const {return yIntegral;}
     ece:	f1 01       	movw	r30, r2
     ed0:	eb 58       	subi	r30, 0x8B	; 139
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	00 81       	ld	r16, Z
     ed6:	11 81       	ldd	r17, Z+1	; 0x01
     ed8:	22 81       	ldd	r18, Z+2	; 0x02
     eda:	33 81       	ldd	r19, Z+3	; 0x03
     edc:	b3 01       	movw	r22, r6
     ede:	a2 01       	movw	r20, r4
     ee0:	89 85       	ldd	r24, Y+9	; 0x09
     ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN10helicopter10controller13PIDController17calculateIntegralEffff>
     ee8:	69 83       	std	Y+1, r22	; 0x01
     eea:	7a 83       	std	Y+2, r23	; 0x02
     eec:	8b 83       	std	Y+3, r24	; 0x03
     eee:	9c 83       	std	Y+4, r25	; 0x04
			void LateralControl(float val) { lateralControl = val;}

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}

			float ReferenceYVelocityMetersPerSecond() const {return referenceYVelocityMetersPerSecond;}
     ef0:	f1 01       	movw	r30, r2
     ef2:	e7 59       	subi	r30, 0x97	; 151
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
		float yDerivativeError = calculateVelocityError(model->YVelocityMetersPerSecond(), model->ReferenceYVelocityMetersPerSecond());
     ef6:	00 81       	ld	r16, Z
     ef8:	11 81       	ldd	r17, Z+1	; 0x01
     efa:	22 81       	ldd	r18, Z+2	; 0x02
     efc:	33 81       	ldd	r19, Z+3	; 0x03
			void LateralControlBeforeServoLimitsAdjustment(float val) { lateralControlBeforeServoLimitsAdjustment = val;}

			float LateralControl() const {return lateralControl;}
			void LateralControl(float val) { lateralControl = val;}

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
     efe:	f1 01       	movw	r30, r2
     f00:	eb 59       	subi	r30, 0x9B	; 155
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	40 81       	ld	r20, Z
     f06:	51 81       	ldd	r21, Z+1	; 0x01
     f08:	62 81       	ldd	r22, Z+2	; 0x02
     f0a:	73 81       	ldd	r23, Z+3	; 0x03
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN10helicopter10controller13PIDController22calculateVelocityErrorEff>
     f14:	6d 83       	std	Y+5, r22	; 0x05
     f16:	7e 83       	std	Y+6, r23	; 0x06
     f18:	8f 83       	std	Y+7, r24	; 0x07
     f1a:	98 87       	std	Y+8, r25	; 0x08
		//we use a -1 direction factor because unlike other controls, if we have a positive proportional error, we actually need a 'negative' desired 
		//roll setpoint in order for the helicopter to track back towards the desired position. So if the helicopter is directly 'east' of the desired position,
		//the proportional error will correctly be positive (in a North-east-down coordinate system), but the helicopter will have to roll counter clockwise
		//to return to the desired position. This differs from if the helicopter was directly north of the desired position. The x proportional would be positive
		//(in NED), but it would take a positive pitch angle setpoint to get the helicopter to return to the desired position.
		float yLateralOuterLoopSetpoint = calculateOuterLoopControlValue(yProportional, yDerivativeError, weightedYIntegral, yProportionalGain, yDerivativeGain, -1);
     f1c:	a9 85       	ldd	r26, Y+9	; 0x09
     f1e:	ba 85       	ldd	r27, Y+10	; 0x0a
     f20:	d2 96       	adiw	r26, 0x32	; 50
     f22:	8d 90       	ld	r8, X+
     f24:	9d 90       	ld	r9, X+
     f26:	ad 90       	ld	r10, X+
     f28:	bc 90       	ld	r11, X
     f2a:	d5 97       	sbiw	r26, 0x35	; 53
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	8f 93       	push	r24
     f30:	8f 93       	push	r24
     f32:	d1 96       	adiw	r26, 0x31	; 49
     f34:	8c 91       	ld	r24, X
     f36:	d1 97       	sbiw	r26, 0x31	; 49
     f38:	8f 93       	push	r24
     f3a:	d0 96       	adiw	r26, 0x30	; 48
     f3c:	8c 91       	ld	r24, X
     f3e:	d0 97       	sbiw	r26, 0x30	; 48
     f40:	8f 93       	push	r24
     f42:	9f 96       	adiw	r26, 0x2f	; 47
     f44:	8c 91       	ld	r24, X
     f46:	9f 97       	sbiw	r26, 0x2f	; 47
     f48:	8f 93       	push	r24
     f4a:	9e 96       	adiw	r26, 0x2e	; 46
     f4c:	8c 91       	ld	r24, X
     f4e:	8f 93       	push	r24
     f50:	c9 80       	ldd	r12, Y+1	; 0x01
     f52:	da 80       	ldd	r13, Y+2	; 0x02
     f54:	eb 80       	ldd	r14, Y+3	; 0x03
     f56:	fc 80       	ldd	r15, Y+4	; 0x04
     f58:	0d 81       	ldd	r16, Y+5	; 0x05
     f5a:	1e 81       	ldd	r17, Y+6	; 0x06
     f5c:	2f 81       	ldd	r18, Y+7	; 0x07
     f5e:	38 85       	ldd	r19, Y+8	; 0x08
     f60:	b3 01       	movw	r22, r6
     f62:	a2 01       	movw	r20, r4
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	9a 85       	ldd	r25, Y+10	; 0x0a
     f68:	0e 94 91 02 	call	0x522	; 0x522 <_ZN10helicopter10controller13PIDController30calculateOuterLoopControlValueEfffffi>
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	ab 01       	movw	r20, r22
     f7a:	bc 01       	movw	r22, r24

		yLateralOuterLoopSetpoint = adjustForSetpointLimits(yLateralOuterLoopSetpoint, minRollSetpointDegrees, maxRollSetpointDegrees);
     f7c:	e9 85       	ldd	r30, Y+9	; 0x09
     f7e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f80:	e2 58       	subi	r30, 0x82	; 130
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	c0 80       	ld	r12, Z
     f86:	d1 80       	ldd	r13, Z+1	; 0x01
     f88:	e2 80       	ldd	r14, Z+2	; 0x02
     f8a:	f3 80       	ldd	r15, Z+3	; 0x03
     f8c:	e9 85       	ldd	r30, Y+9	; 0x09
     f8e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f90:	e6 58       	subi	r30, 0x86	; 134
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	00 81       	ld	r16, Z
     f96:	11 81       	ldd	r17, Z+1	; 0x01
     f98:	22 81       	ldd	r18, Z+2	; 0x02
     f9a:	33 81       	ldd	r19, Z+3	; 0x03
     f9c:	89 85       	ldd	r24, Y+9	; 0x09
     f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN10helicopter10controller13PIDController23adjustForSetpointLimitsEfff>

			float ReferenceYVelocityMetersPerSecond() const {return referenceYVelocityMetersPerSecond;}
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}

			float YLateralOuterLoopSetpoint() const {return yLateralOuterLoopSetpoint;}
			void YLateralOuterLoopSetpoint(float val) { yLateralOuterLoopSetpoint = val;}
     fa4:	f1 01       	movw	r30, r2
     fa6:	e3 59       	subi	r30, 0x93	; 147
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	60 83       	st	Z, r22
     fac:	71 83       	std	Z+1, r23	; 0x01
     fae:	82 83       	std	Z+2, r24	; 0x02
     fb0:	93 83       	std	Z+3, r25	; 0x03
	
		model->YLateralOuterLoopSetpoint(yLateralOuterLoopSetpoint);
		model->YIntegral(weightedYIntegral);
     fb2:	a9 85       	ldd	r26, Y+9	; 0x09
     fb4:	ba 85       	ldd	r27, Y+10	; 0x0a
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X

			float YProportional() const {return yProportional;}
			void YProportional(float val) { yProportional = val;}

			float YIntegral() const {return yIntegral;}
			void YIntegral(float val) { yIntegral = val;}
     fba:	eb 58       	subi	r30, 0x8B	; 139
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	ab 81       	ldd	r26, Y+3	; 0x03
     fc4:	bc 81       	ldd	r27, Y+4	; 0x04
     fc6:	80 83       	st	Z, r24
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	a2 83       	std	Z+2, r26	; 0x02
     fcc:	b3 83       	std	Z+3, r27	; 0x03
		model->YProportional(yProportional);
     fce:	a9 85       	ldd	r26, Y+9	; 0x09
     fd0:	ba 85       	ldd	r27, Y+10	; 0x0a
     fd2:	ed 91       	ld	r30, X+
     fd4:	fc 91       	ld	r31, X
     fd6:	11 97       	sbiw	r26, 0x01	; 1

			float YLateralOuterLoopSetpoint() const {return yLateralOuterLoopSetpoint;}
			void YLateralOuterLoopSetpoint(float val) { yLateralOuterLoopSetpoint = val;}

			float YProportional() const {return yProportional;}
			void YProportional(float val) { yProportional = val;}
     fd8:	ef 58       	subi	r30, 0x8F	; 143
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	40 82       	st	Z, r4
     fde:	51 82       	std	Z+1, r5	; 0x01
     fe0:	62 82       	std	Z+2, r6	; 0x02
     fe2:	73 82       	std	Z+3, r7	; 0x03
		model->YDerivativeError(yDerivativeError);
     fe4:	ed 91       	ld	r30, X+
     fe6:	fc 91       	ld	r31, X

			float YIntegral() const {return yIntegral;}
			void YIntegral(float val) { yIntegral = val;}

			float YDerivativeError() const {return yDerivativeError;}
			void YDerivativeError(float val) { yDerivativeError = val;}
     fe8:	e7 58       	subi	r30, 0x87	; 135
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	af 81       	ldd	r26, Y+7	; 0x07
     ff2:	b8 85       	ldd	r27, Y+8	; 0x08
     ff4:	80 83       	st	Z, r24
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	a2 83       	std	Z+2, r26	; 0x02
     ffa:	b3 83       	std	Z+3, r27	; 0x03
	}
}
     ffc:	2a 96       	adiw	r28, 0x0a	; 10
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	5f 90       	pop	r5
    1026:	4f 90       	pop	r4
    1028:	3f 90       	pop	r3
    102a:	2f 90       	pop	r2
    102c:	08 95       	ret

0000102e <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv>:

void PIDController::cyclicLongitudeInnerLoopUpdate()
{
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
	if (model->OperationalState() == SystemModel::AutoPilot)
    1050:	88 80       	ld	r8, Y
    1052:	99 80       	ldd	r9, Y+1	; 0x01
    1054:	f4 01       	movw	r30, r8
    1056:	80 81       	ld	r24, Z
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f0       	breq	.+2      	; 0x105e <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv+0x30>
    105c:	45 c0       	rjmp	.+138    	; 0x10e8 <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv+0xba>
				
		
			float ThetaPitchDegrees() const {return thetaPitchDegrees;}
			void ThetaPitchDegrees(float val) {thetaPitchDegrees = val;}
		
			float PitchAngularVelocityRadsPerSecond() const {return pitchAngularVelocityRadsPerSecond;}
    105e:	ef 5a       	subi	r30, 0xAF	; 175
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		float xLongitudinalInnerLoopControlBeforeServoLimits = calculateInnerLoopControlValue(model->XLongitudeOuterLoopSetpoint(), model->ThetaPitchDegrees(), longitudeInnerLoopGain, model->PitchAngularVelocityRadsPerSecond(), pitchAngularVelocityGain);
    1062:	a0 80       	ld	r10, Z
    1064:	b1 80       	ldd	r11, Z+1	; 0x01
    1066:	c2 80       	ldd	r12, Z+2	; 0x02
    1068:	d3 80       	ldd	r13, Z+3	; 0x03
    106a:	ea a0       	ldd	r14, Y+34	; 0x22
    106c:	fb a0       	ldd	r15, Y+35	; 0x23
    106e:	0c a1       	ldd	r16, Y+36	; 0x24
    1070:	1d a1       	ldd	r17, Y+37	; 0x25
				
			float XDerivativeError() const {return xDerivativeError;}
			void XDerivativeError(float val) { xDerivativeError = val;}
				
		
			float ThetaPitchDegrees() const {return thetaPitchDegrees;}
    1072:	f4 01       	movw	r30, r8
    1074:	e3 5b       	subi	r30, 0xB3	; 179
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	20 81       	ld	r18, Z
    107a:	31 81       	ldd	r19, Z+1	; 0x01
    107c:	42 81       	ldd	r20, Z+2	; 0x02
    107e:	53 81       	ldd	r21, Z+3	; 0x03
			void XVelocityMetersPerSecond(float val) { xVelocityMetersPerSecond = val;}
				
			float ReferenceXVelocityMetersPerSecond() const {return referenceXVelocityMetersPerSecond;}
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
				
			float XLongitudeOuterLoopSetpoint() const {return xLongitudeOuterLoopSetpoint;}
    1080:	f4 01       	movw	r30, r8
    1082:	fd 96       	adiw	r30, 0x3d	; 61
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	e9 a5       	ldd	r30, Y+41	; 0x29
    108e:	ef 93       	push	r30
    1090:	e8 a5       	ldd	r30, Y+40	; 0x28
    1092:	ef 93       	push	r30
    1094:	ef a1       	ldd	r30, Y+39	; 0x27
    1096:	ef 93       	push	r30
    1098:	ee a1       	ldd	r30, Y+38	; 0x26
    109a:	ef 93       	push	r30
    109c:	0e 94 3b 03 	call	0x676	; 0x676 <_Z30calculateInnerLoopControlValuefffff>
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	2b 01       	movw	r4, r22
    10aa:	3c 01       	movw	r6, r24
	
		float xLongitudinalInnerLoopControl = adjustControlForServoLimits(xLongitudinalInnerLoopControlBeforeServoLimits, minLongitudeServoControlValue, maxLongitudeServoControlValue);
    10ac:	fe 01       	movw	r30, r28
    10ae:	e2 5a       	subi	r30, 0xA2	; 162
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	c0 80       	ld	r12, Z
    10b4:	d1 80       	ldd	r13, Z+1	; 0x01
    10b6:	e2 80       	ldd	r14, Z+2	; 0x02
    10b8:	f3 80       	ldd	r15, Z+3	; 0x03
    10ba:	fe 01       	movw	r30, r28
    10bc:	e6 5a       	subi	r30, 0xA6	; 166
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	00 81       	ld	r16, Z
    10c2:	11 81       	ldd	r17, Z+1	; 0x01
    10c4:	22 81       	ldd	r18, Z+2	; 0x02
    10c6:	33 81       	ldd	r19, Z+3	; 0x03
    10c8:	ab 01       	movw	r20, r22
    10ca:	bc 01       	movw	r22, r24
    10cc:	ce 01       	movw	r24, r28
    10ce:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>
						
			float ReferenceXNEDBodyFrame() const {return referenceXNEDBodyFrame;}
			void ReferenceXNEDBodyFrame(float val) { referenceXNEDBodyFrame = val;}

			float LongitudeControlBeforeServoLimitsAdjustment() const {return longitudeControlBeforeServoLimitsAdjustment;}
			void LongitudeControlBeforeServoLimitsAdjustment(float val) { longitudeControlBeforeServoLimitsAdjustment = val;}
    10d2:	f4 01       	movw	r30, r8
    10d4:	45 a6       	std	Z+45, r4	; 0x2d
    10d6:	56 a6       	std	Z+46, r5	; 0x2e
    10d8:	67 a6       	std	Z+47, r6	; 0x2f
    10da:	70 aa       	std	Z+48, r7	; 0x30
	
		model->LongitudeControlBeforeServoLimitsAdjustment(xLongitudinalInnerLoopControlBeforeServoLimits);
	
		model->LongitudeControl(xLongitudinalInnerLoopControl);
    10dc:	e8 81       	ld	r30, Y
    10de:	f9 81       	ldd	r31, Y+1	; 0x01

			float LongitudeControl() const {return longitudeControl;}
			void LongitudeControl(float val) { longitudeControl = val;}
    10e0:	61 ab       	std	Z+49, r22	; 0x31
    10e2:	72 ab       	std	Z+50, r23	; 0x32
    10e4:	83 ab       	std	Z+51, r24	; 0x33
    10e6:	94 ab       	std	Z+52, r25	; 0x34
	}
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	9f 90       	pop	r9
    10fe:	8f 90       	pop	r8
    1100:	7f 90       	pop	r7
    1102:	6f 90       	pop	r6
    1104:	5f 90       	pop	r5
    1106:	4f 90       	pop	r4
    1108:	08 95       	ret

0000110a <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv>:

void PIDController::cyclicLateralInnerLoopUpdate()
{
    110a:	4f 92       	push	r4
    110c:	5f 92       	push	r5
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
	if (model->OperationalState() == SystemModel::AutoPilot)
    112c:	88 80       	ld	r8, Y
    112e:	99 80       	ldd	r9, Y+1	; 0x01
    1130:	f4 01       	movw	r30, r8
    1132:	80 81       	ld	r24, Z
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	09 f0       	breq	.+2      	; 0x113a <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv+0x30>
    1138:	4c c0       	rjmp	.+152    	; 0x11d2 <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv+0xc8>


			float PhiRollDegrees() const {return phiRollDegrees;}
			void PhiRollDegrees(float val) {phiRollDegrees = val;}

			float RollAngularVelocityRadsPerSecond() const {return rollAngularVelocityRadsPerSecond;}
    113a:	ef 57       	subi	r30, 0x7F	; 127
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		float yLateralInnerLoopControlBeforeServoLimits = calculateInnerLoopControlValue(model->YLateralOuterLoopSetpoint(), model->PhiRollDegrees(), lateralInnerLoopGain, model->RollAngularVelocityRadsPerSecond(), rollAngularVelocityGain);
    113e:	a0 80       	ld	r10, Z
    1140:	b1 80       	ldd	r11, Z+1	; 0x01
    1142:	c2 80       	ldd	r12, Z+2	; 0x02
    1144:	d3 80       	ldd	r13, Z+3	; 0x03
    1146:	ea ac       	ldd	r14, Y+58	; 0x3a
    1148:	fb ac       	ldd	r15, Y+59	; 0x3b
    114a:	0c ad       	ldd	r16, Y+60	; 0x3c
    114c:	1d ad       	ldd	r17, Y+61	; 0x3d

			float YDerivativeError() const {return yDerivativeError;}
			void YDerivativeError(float val) { yDerivativeError = val;}


			float PhiRollDegrees() const {return phiRollDegrees;}
    114e:	f4 01       	movw	r30, r8
    1150:	e3 58       	subi	r30, 0x83	; 131
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	20 81       	ld	r18, Z
    1156:	31 81       	ldd	r19, Z+1	; 0x01
    1158:	42 81       	ldd	r20, Z+2	; 0x02
    115a:	53 81       	ldd	r21, Z+3	; 0x03
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}

			float ReferenceYVelocityMetersPerSecond() const {return referenceYVelocityMetersPerSecond;}
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}

			float YLateralOuterLoopSetpoint() const {return yLateralOuterLoopSetpoint;}
    115c:	f4 01       	movw	r30, r8
    115e:	e3 59       	subi	r30, 0x93	; 147
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	fe 01       	movw	r30, r28
    116c:	fe 96       	adiw	r30, 0x3e	; 62
    116e:	a3 81       	ldd	r26, Z+3	; 0x03
    1170:	af 93       	push	r26
    1172:	a2 81       	ldd	r26, Z+2	; 0x02
    1174:	af 93       	push	r26
    1176:	a1 81       	ldd	r26, Z+1	; 0x01
    1178:	af 93       	push	r26
    117a:	e0 81       	ld	r30, Z
    117c:	ef 93       	push	r30
    117e:	0e 94 3b 03 	call	0x676	; 0x676 <_Z30calculateInnerLoopControlValuefffff>
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	2b 01       	movw	r4, r22
    118c:	3c 01       	movw	r6, r24
		
		float yLateralInnerLoopControl = adjustControlForServoLimits(yLateralInnerLoopControlBeforeServoLimits, minLateralServoControlValue, maxLateralServoControlValue);
    118e:	fe 01       	movw	r30, r28
    1190:	ea 59       	subi	r30, 0x9A	; 154
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	c0 80       	ld	r12, Z
    1196:	d1 80       	ldd	r13, Z+1	; 0x01
    1198:	e2 80       	ldd	r14, Z+2	; 0x02
    119a:	f3 80       	ldd	r15, Z+3	; 0x03
    119c:	fe 01       	movw	r30, r28
    119e:	ee 59       	subi	r30, 0x9E	; 158
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	00 81       	ld	r16, Z
    11a4:	11 81       	ldd	r17, Z+1	; 0x01
    11a6:	22 81       	ldd	r18, Z+2	; 0x02
    11a8:	33 81       	ldd	r19, Z+3	; 0x03
    11aa:	ab 01       	movw	r20, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	ce 01       	movw	r24, r28
    11b0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN10helicopter10controller13PIDController27adjustControlForServoLimitsEfff>

			float ReferenceYNEDBodyFrame() const {return referenceYNEDBodyFrame;}
			void ReferenceYNEDBodyFrame(float val) { referenceYNEDBodyFrame = val;}

			float LateralControlBeforeServoLimitsAdjustment() const {return lateralControlBeforeServoLimitsAdjustment;}
			void LateralControlBeforeServoLimitsAdjustment(float val) { lateralControlBeforeServoLimitsAdjustment = val;}
    11b4:	f4 01       	movw	r30, r8
    11b6:	e3 5a       	subi	r30, 0xA3	; 163
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	40 82       	st	Z, r4
    11bc:	51 82       	std	Z+1, r5	; 0x01
    11be:	62 82       	std	Z+2, r6	; 0x02
    11c0:	73 82       	std	Z+3, r7	; 0x03
		
		model->LateralControlBeforeServoLimitsAdjustment(yLateralInnerLoopControlBeforeServoLimits);
		
		model->LateralControl(yLateralInnerLoopControl);		
    11c2:	e8 81       	ld	r30, Y
    11c4:	f9 81       	ldd	r31, Y+1	; 0x01

			float LateralControl() const {return lateralControl;}
			void LateralControl(float val) { lateralControl = val;}
    11c6:	ef 59       	subi	r30, 0x9F	; 159
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	60 83       	st	Z, r22
    11cc:	71 83       	std	Z+1, r23	; 0x01
    11ce:	82 83       	std	Z+2, r24	; 0x02
    11d0:	93 83       	std	Z+3, r25	; 0x03
	}
}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	7f 90       	pop	r7
    11ec:	6f 90       	pop	r6
    11ee:	5f 90       	pop	r5
    11f0:	4f 90       	pop	r4
    11f2:	08 95       	ret

000011f4 <_ZN10helicopter7drivers12SerialDriverD1Ev>:
				{
					
				}
						
				virtual ~SerialDriver()
				{
    11f4:	2a e0       	ldi	r18, 0x0A	; 10
    11f6:	32 e0       	ldi	r19, 0x02	; 2
    11f8:	fc 01       	movw	r30, r24
    11fa:	31 83       	std	Z+1, r19	; 0x01
    11fc:	20 83       	st	Z, r18
    11fe:	08 95       	ret

00001200 <_ZN10helicopter7drivers12SerialDriver8transmitEf>:
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
	}
}

int SerialDriver::transmit(float valueToSend)
{
    1200:	bf 92       	push	r11
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    1214:	05 2f       	mov	r16, r21
    1216:	16 2f       	mov	r17, r22
    1218:	b7 2e       	mov	r11, r23
	
	//Memcpy the float into an array of bytes because the compiler doesn't like
	//bit shifting floats. 
	memcpy(bytes, (void*) &valueToSend, 4);
	
	status1 = transmit(bytes[0]);
    121a:	e8 81       	ld	r30, Y
    121c:	f9 81       	ldd	r31, Y+1	; 0x01
    121e:	06 80       	ldd	r0, Z+6	; 0x06
    1220:	f7 81       	ldd	r31, Z+7	; 0x07
    1222:	e0 2d       	mov	r30, r0
    1224:	64 2f       	mov	r22, r20
    1226:	19 95       	eicall
    1228:	7c 01       	movw	r14, r24
	status2 = transmit(bytes[1]);
    122a:	e8 81       	ld	r30, Y
    122c:	f9 81       	ldd	r31, Y+1	; 0x01
    122e:	06 80       	ldd	r0, Z+6	; 0x06
    1230:	f7 81       	ldd	r31, Z+7	; 0x07
    1232:	e0 2d       	mov	r30, r0
    1234:	60 2f       	mov	r22, r16
    1236:	ce 01       	movw	r24, r28
    1238:	19 95       	eicall
    123a:	6c 01       	movw	r12, r24
	status3 = transmit(bytes[2]);
    123c:	e8 81       	ld	r30, Y
    123e:	f9 81       	ldd	r31, Y+1	; 0x01
    1240:	06 80       	ldd	r0, Z+6	; 0x06
    1242:	f7 81       	ldd	r31, Z+7	; 0x07
    1244:	e0 2d       	mov	r30, r0
    1246:	61 2f       	mov	r22, r17
    1248:	ce 01       	movw	r24, r28
    124a:	19 95       	eicall
    124c:	8c 01       	movw	r16, r24
	status4 = transmit(bytes[3]);
    124e:	e8 81       	ld	r30, Y
    1250:	f9 81       	ldd	r31, Y+1	; 0x01
    1252:	06 80       	ldd	r0, Z+6	; 0x06
    1254:	f7 81       	ldd	r31, Z+7	; 0x07
    1256:	e0 2d       	mov	r30, r0
    1258:	6b 2d       	mov	r22, r11
    125a:	ce 01       	movw	r24, r28
    125c:	19 95       	eicall
	
	return status1 | status2 | status3 | status4;
    125e:	96 01       	movw	r18, r12
    1260:	2e 29       	or	r18, r14
    1262:	3f 29       	or	r19, r15
    1264:	20 2b       	or	r18, r16
    1266:	31 2b       	or	r19, r17
    1268:	28 2b       	or	r18, r24
    126a:	39 2b       	or	r19, r25
}
    126c:	82 2f       	mov	r24, r18
    126e:	93 2f       	mov	r25, r19
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	08 95       	ret

00001284 <_ZN10helicopter7drivers12SerialDriver8transmitEi>:

int SerialDriver::transmit(int valueToSend)
{
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	ec 01       	movw	r28, r24
    1292:	8b 01       	movw	r16, r22
	int status1 = 0;
	int status2 = 0;
	
	status1 = transmit((byte)(valueToSend >> 8));
    1294:	e8 81       	ld	r30, Y
    1296:	f9 81       	ldd	r31, Y+1	; 0x01
    1298:	67 2f       	mov	r22, r23
    129a:	77 0f       	add	r23, r23
    129c:	77 0b       	sbc	r23, r23
    129e:	06 80       	ldd	r0, Z+6	; 0x06
    12a0:	f7 81       	ldd	r31, Z+7	; 0x07
    12a2:	e0 2d       	mov	r30, r0
    12a4:	19 95       	eicall
    12a6:	7c 01       	movw	r14, r24
	status2 = transmit((byte)valueToSend);	
    12a8:	e8 81       	ld	r30, Y
    12aa:	f9 81       	ldd	r31, Y+1	; 0x01
    12ac:	06 80       	ldd	r0, Z+6	; 0x06
    12ae:	f7 81       	ldd	r31, Z+7	; 0x07
    12b0:	e0 2d       	mov	r30, r0
    12b2:	60 2f       	mov	r22, r16
    12b4:	ce 01       	movw	r24, r28
    12b6:	19 95       	eicall
	
	return status1 | status2;
    12b8:	9c 01       	movw	r18, r24
    12ba:	2e 29       	or	r18, r14
    12bc:	3f 29       	or	r19, r15
}
    12be:	82 2f       	mov	r24, r18
    12c0:	93 2f       	mov	r25, r19
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	08 95       	ret

000012d0 <_ZN10helicopter7drivers12SerialDriver8transmitEm>:

int SerialDriver::transmit(unsigned long valueToSend)
{
    12d0:	8f 92       	push	r8
    12d2:	9f 92       	push	r9
    12d4:	af 92       	push	r10
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
    12ea:	4a 01       	movw	r8, r20
    12ec:	5b 01       	movw	r10, r22
	int status2 = 0;
	int status3 = 0;
	int status4 = 0;
	

	status1 = transmit((byte)((valueToSend >> 24) & 0xFF));
    12ee:	e8 81       	ld	r30, Y
    12f0:	f9 81       	ldd	r31, Y+1	; 0x01
    12f2:	67 2f       	mov	r22, r23
    12f4:	77 27       	eor	r23, r23
    12f6:	88 27       	eor	r24, r24
    12f8:	99 27       	eor	r25, r25
    12fa:	06 80       	ldd	r0, Z+6	; 0x06
    12fc:	f7 81       	ldd	r31, Z+7	; 0x07
    12fe:	e0 2d       	mov	r30, r0
    1300:	ce 01       	movw	r24, r28
    1302:	19 95       	eicall
    1304:	7c 01       	movw	r14, r24
	status2 = transmit((byte)((valueToSend >> 16) & 0xFF));
    1306:	e8 81       	ld	r30, Y
    1308:	f9 81       	ldd	r31, Y+1	; 0x01
    130a:	b5 01       	movw	r22, r10
    130c:	88 27       	eor	r24, r24
    130e:	99 27       	eor	r25, r25
    1310:	06 80       	ldd	r0, Z+6	; 0x06
    1312:	f7 81       	ldd	r31, Z+7	; 0x07
    1314:	e0 2d       	mov	r30, r0
    1316:	ce 01       	movw	r24, r28
    1318:	19 95       	eicall
    131a:	6c 01       	movw	r12, r24
	status3 = transmit((byte)((valueToSend >> 8) & 0xFF));
    131c:	e8 81       	ld	r30, Y
    131e:	f9 81       	ldd	r31, Y+1	; 0x01
    1320:	99 27       	eor	r25, r25
    1322:	8b 2d       	mov	r24, r11
    1324:	7a 2d       	mov	r23, r10
    1326:	69 2d       	mov	r22, r9
    1328:	06 80       	ldd	r0, Z+6	; 0x06
    132a:	f7 81       	ldd	r31, Z+7	; 0x07
    132c:	e0 2d       	mov	r30, r0
    132e:	ce 01       	movw	r24, r28
    1330:	19 95       	eicall
    1332:	8c 01       	movw	r16, r24
	status4 = transmit((byte)(valueToSend & 0xFF));
    1334:	e8 81       	ld	r30, Y
    1336:	f9 81       	ldd	r31, Y+1	; 0x01
    1338:	06 80       	ldd	r0, Z+6	; 0x06
    133a:	f7 81       	ldd	r31, Z+7	; 0x07
    133c:	e0 2d       	mov	r30, r0
    133e:	68 2d       	mov	r22, r8
    1340:	ce 01       	movw	r24, r28
    1342:	19 95       	eicall
	
	return status1 | status2 | status3 | status4;
    1344:	ec 28       	or	r14, r12
    1346:	fd 28       	or	r15, r13
    1348:	0e 29       	or	r16, r14
    134a:	1f 29       	or	r17, r15
    134c:	08 2b       	or	r16, r24
    134e:	19 2b       	or	r17, r25
}
    1350:	80 2f       	mov	r24, r16
    1352:	91 2f       	mov	r25, r17
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	08 95       	ret

0000136e <_ZN10helicopter7drivers12SerialDriver8transmitEl>:

int SerialDriver::transmit(long valueToSend)
{
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	ec 01       	movw	r28, r24
    1388:	4a 01       	movw	r8, r20
    138a:	5b 01       	movw	r10, r22
	int status2 = 0;
	int status3 = 0;
	int status4 = 0;
	

	status1 = transmit((byte)((valueToSend >> 24) & 0xFF));
    138c:	e8 81       	ld	r30, Y
    138e:	f9 81       	ldd	r31, Y+1	; 0x01
    1390:	67 2f       	mov	r22, r23
    1392:	77 27       	eor	r23, r23
    1394:	88 27       	eor	r24, r24
    1396:	99 27       	eor	r25, r25
    1398:	06 80       	ldd	r0, Z+6	; 0x06
    139a:	f7 81       	ldd	r31, Z+7	; 0x07
    139c:	e0 2d       	mov	r30, r0
    139e:	ce 01       	movw	r24, r28
    13a0:	19 95       	eicall
    13a2:	7c 01       	movw	r14, r24
	status2 = transmit((byte)((valueToSend >> 16) & 0xFF));
    13a4:	e8 81       	ld	r30, Y
    13a6:	f9 81       	ldd	r31, Y+1	; 0x01
    13a8:	b5 01       	movw	r22, r10
    13aa:	99 27       	eor	r25, r25
    13ac:	77 fd       	sbrc	r23, 7
    13ae:	90 95       	com	r25
    13b0:	89 2f       	mov	r24, r25
    13b2:	06 80       	ldd	r0, Z+6	; 0x06
    13b4:	f7 81       	ldd	r31, Z+7	; 0x07
    13b6:	e0 2d       	mov	r30, r0
    13b8:	ce 01       	movw	r24, r28
    13ba:	19 95       	eicall
    13bc:	6c 01       	movw	r12, r24
	status3 = transmit((byte)((valueToSend >> 8) & 0xFF));
    13be:	e8 81       	ld	r30, Y
    13c0:	f9 81       	ldd	r31, Y+1	; 0x01
    13c2:	99 27       	eor	r25, r25
    13c4:	b7 fc       	sbrc	r11, 7
    13c6:	9a 95       	dec	r25
    13c8:	8b 2d       	mov	r24, r11
    13ca:	7a 2d       	mov	r23, r10
    13cc:	69 2d       	mov	r22, r9
    13ce:	06 80       	ldd	r0, Z+6	; 0x06
    13d0:	f7 81       	ldd	r31, Z+7	; 0x07
    13d2:	e0 2d       	mov	r30, r0
    13d4:	ce 01       	movw	r24, r28
    13d6:	19 95       	eicall
    13d8:	8c 01       	movw	r16, r24
	status4 = transmit((byte)(valueToSend & 0xFF));
    13da:	e8 81       	ld	r30, Y
    13dc:	f9 81       	ldd	r31, Y+1	; 0x01
    13de:	06 80       	ldd	r0, Z+6	; 0x06
    13e0:	f7 81       	ldd	r31, Z+7	; 0x07
    13e2:	e0 2d       	mov	r30, r0
    13e4:	68 2d       	mov	r22, r8
    13e6:	ce 01       	movw	r24, r28
    13e8:	19 95       	eicall
	
	return status1 | status2 | status3 | status4;
    13ea:	ec 28       	or	r14, r12
    13ec:	fd 28       	or	r15, r13
    13ee:	0e 29       	or	r16, r14
    13f0:	1f 29       	or	r17, r15
    13f2:	08 2b       	or	r16, r24
    13f4:	19 2b       	or	r17, r25
}
    13f6:	80 2f       	mov	r24, r16
    13f8:	91 2f       	mov	r25, r17
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	bf 90       	pop	r11
    140c:	af 90       	pop	r10
    140e:	9f 90       	pop	r9
    1410:	8f 90       	pop	r8
    1412:	08 95       	ret

00001414 <_ZN10helicopter7drivers12SerialDriver7receiveERh>:
	
	return status;
}

int SerialDriver::receive(byte &receivedByte)
{
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
    1422:	7b 01       	movw	r14, r22
	int status = 0;
	
	if (uartPort == Zero)
    1424:	8e 81       	ldd	r24, Y+6	; 0x06
    1426:	88 23       	and	r24, r24
    1428:	61 f0       	breq	.+24     	; 0x1442 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x2e>
	return status;
}

int SerialDriver::receive(byte &receivedByte)
{
	int status = 0;
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	19 c0       	rjmp	.+50     	; 0x1462 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x4e>
	{
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)))
		{
			if (timer != NULL && timer->hasTimedout())
    1430:	88 85       	ldd	r24, Y+8	; 0x08
    1432:	99 85       	ldd	r25, Y+9	; 0x09
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	39 f0       	breq	.+14     	; 0x1446 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x32>
    1438:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <_ZN10helicopter4util5Timer11hasTimedoutEv>
    143c:	88 23       	and	r24, r24
    143e:	19 f0       	breq	.+6      	; 0x1446 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x32>
    1440:	0e c0       	rjmp	.+28     	; 0x145e <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x4a>
	
	if (uartPort == Zero)
	{
		
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)))
    1442:	00 ec       	ldi	r16, 0xC0	; 192
    1444:	10 e0       	ldi	r17, 0x00	; 0
    1446:	f8 01       	movw	r30, r16
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	8c f7       	brge	.-30     	; 0x1430 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x1c>
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x54>
		if (status == 0)
		{
			//determine if there has been a data overrun.
			if ((UCSR0A & (1 << DOR0)) != 0)
			{
				status = -2;
    1450:	2e ef       	ldi	r18, 0xFE	; 254
    1452:	3f ef       	ldi	r19, 0xFF	; 255
			}
		
			/* Read the data from the serial port buffer, even if the buffer was overrun */
			receivedByte = UDR0;
    1454:	80 91 c6 00 	lds	r24, 0x00C6
    1458:	f7 01       	movw	r30, r14
    145a:	80 83       	st	Z, r24
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x4e>
		/* Wait for data on the receive buffer */
		while ( !(UCSR0A & (1<<RXC0)))
		{
			if (timer != NULL && timer->hasTimedout())
			{
				status = -1;
    145e:	2f ef       	ldi	r18, 0xFF	; 255
    1460:	3f ef       	ldi	r19, 0xFF	; 255
			/* Read the data from the serial port buffer, even if the buffer was overrun */
			receivedByte = UDR0;
		}
	}

	return status;
    1462:	82 2f       	mov	r24, r18
    1464:	93 2f       	mov	r25, r19
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x62>
		}
		
		if (status == 0)
		{
			//determine if there has been a data overrun.
			if ((UCSR0A & (1 << DOR0)) != 0)
    1468:	80 91 c0 00 	lds	r24, 0x00C0
    146c:	83 fd       	sbrc	r24, 3
    146e:	f0 cf       	rjmp	.-32     	; 0x1450 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x3c>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	ef cf       	rjmp	.-34     	; 0x1454 <_ZN10helicopter7drivers12SerialDriver7receiveERh+0x40>
			receivedByte = UDR0;
		}
	}

	return status;
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret

00001484 <_ZN10helicopter7drivers12SerialDriver8transmitEh>:
	
	return status1 | status2 | status3 | status4;
}

int SerialDriver::transmit(byte valueToSend)
{
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	ec 01       	movw	r28, r24
    1490:	f6 2e       	mov	r15, r22
	int status = 0;
	
	if (uartPort == Zero)
    1492:	8e 81       	ldd	r24, Y+6	; 0x06
    1494:	88 23       	and	r24, r24
    1496:	61 f0       	breq	.+24     	; 0x14b0 <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x2c>
	return status1 | status2 | status3 | status4;
}

int SerialDriver::transmit(byte valueToSend)
{
	int status = 0;
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	12 c0       	rjmp	.+36     	; 0x14c2 <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x3e>

		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
		{
			//Check for timeout
			if (timer != NULL && timer->hasTimedout())
    149e:	88 85       	ldd	r24, Y+8	; 0x08
    14a0:	99 85       	ldd	r25, Y+9	; 0x09
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	39 f0       	breq	.+14     	; 0x14b4 <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x30>
    14a6:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <_ZN10helicopter4util5Timer11hasTimedoutEv>
    14aa:	88 23       	and	r24, r24
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x30>
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x3a>
	
	if (uartPort == Zero)
	{

		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    14b0:	00 ec       	ldi	r16, 0xC0	; 192
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 81       	ld	r24, Z
    14b8:	85 ff       	sbrs	r24, 5
    14ba:	f1 cf       	rjmp	.-30     	; 0x149e <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x1a>
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x44>
		{
			//Check for timeout
			if (timer != NULL && timer->hasTimedout())
			{
				status = -1;
    14be:	2f ef       	ldi	r18, 0xFF	; 255
    14c0:	3f ef       	ldi	r19, 0xFF	; 255
			UDR0 = valueToSend;			
		}

	}
	
	return status;
    14c2:	82 2f       	mov	r24, r18
    14c4:	93 2f       	mov	r25, r19
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x4e>
		}
				
		if (status == 0)
		{
			/* Put data into buffer, sends the data */
			UDR0 = valueToSend;			
    14c8:	f0 92 c6 00 	sts	0x00C6, r15
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	f8 cf       	rjmp	.-16     	; 0x14c2 <_ZN10helicopter7drivers12SerialDriver8transmitEh+0x3e>
		}

	}
	
	return status;
}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	08 95       	ret

000014de <_ZN10helicopter7drivers12SerialDriver10initializeEv>:
		timer->stopTimer();
	}
}

void SerialDriver::initialize()
{
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	ec 01       	movw	r28, r24
	unsigned int baudPrescaller = 0;
	
	if (useDoubleSpeedMode)
    14e4:	8f 81       	ldd	r24, Y+7	; 0x07
    14e6:	88 23       	and	r24, r24
    14e8:	29 f1       	breq	.+74     	; 0x1534 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0x56>
	{
		baudPrescaller = floor((((F_CPU / (baudRate * 8UL))) - 1UL));
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	ac 81       	ldd	r26, Y+4	; 0x04
    14f0:	bd 81       	ldd	r27, Y+5	; 0x05
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	aa 1f       	adc	r26, r26
    14f8:	bb 1f       	adc	r27, r27
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	aa 1f       	adc	r26, r26
    1500:	bb 1f       	adc	r27, r27
    1502:	9c 01       	movw	r18, r24
    1504:	ad 01       	movw	r20, r26
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	44 1f       	adc	r20, r20
    150c:	55 1f       	adc	r21, r21
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	74 e2       	ldi	r23, 0x24	; 36
    1512:	84 ef       	ldi	r24, 0xF4	; 244
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodsi4>
    151a:	ca 01       	movw	r24, r20
    151c:	b9 01       	movw	r22, r18
    151e:	61 50       	subi	r22, 0x01	; 1
    1520:	71 09       	sbc	r23, r1
    1522:	81 09       	sbc	r24, r1
    1524:	91 09       	sbc	r25, r1
    1526:	0e 94 6d 2c 	call	0x58da	; 0x58da <__floatunsisf>
    152a:	0e 94 aa 2c 	call	0x5954	; 0x5954 <floor>
    152e:	0e 94 41 2c 	call	0x5882	; 0x5882 <__fixunssfsi>
    1532:	28 c0       	rjmp	.+80     	; 0x1584 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0xa6>
	}else
	{
		//Calculation for the baud prescaller 
		baudPrescaller = floor((((F_CPU / (baudRate * 16UL))) - 1UL));
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	ac 81       	ldd	r26, Y+4	; 0x04
    153a:	bd 81       	ldd	r27, Y+5	; 0x05
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	aa 1f       	adc	r26, r26
    1542:	bb 1f       	adc	r27, r27
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	aa 1f       	adc	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	9c 01       	movw	r18, r24
    154e:	ad 01       	movw	r20, r26
    1550:	22 0f       	add	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	44 1f       	adc	r20, r20
    1556:	55 1f       	adc	r21, r21
    1558:	22 0f       	add	r18, r18
    155a:	33 1f       	adc	r19, r19
    155c:	44 1f       	adc	r20, r20
    155e:	55 1f       	adc	r21, r21
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	74 e2       	ldi	r23, 0x24	; 36
    1564:	84 ef       	ldi	r24, 0xF4	; 244
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodsi4>
    156c:	ca 01       	movw	r24, r20
    156e:	b9 01       	movw	r22, r18
    1570:	61 50       	subi	r22, 0x01	; 1
    1572:	71 09       	sbc	r23, r1
    1574:	81 09       	sbc	r24, r1
    1576:	91 09       	sbc	r25, r1
    1578:	0e 94 6d 2c 	call	0x58da	; 0x58da <__floatunsisf>
    157c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <floor>
    1580:	0e 94 41 2c 	call	0x5882	; 0x5882 <__fixunssfsi>
	}
	
	
	if (uartPort == Zero)
    1584:	8e 81       	ldd	r24, Y+6	; 0x06
    1586:	81 11       	cpse	r24, r1
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <_ZN10helicopter7drivers12SerialDriver10initializeEv+0xd8>
	{
		/* Set baud rate */
		UBRR0 = baudPrescaller;
    158a:	70 93 c5 00 	sts	0x00C5, r23
    158e:	60 93 c4 00 	sts	0x00C4, r22
		
		/* Set frame format: asynchronous usart, no parity 1stop bit, 8 bits of data, */
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    1592:	e2 ec       	ldi	r30, 0xC2	; 194
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	86 60       	ori	r24, 0x06	; 6
    159a:	80 83       	st	Z, r24
		
		//If double speed mode flag was set, set the U2X0 flag to enable double speed mode.
		if (useDoubleSpeedMode)
    159c:	8f 81       	ldd	r24, Y+7	; 0x07
    159e:	88 23       	and	r24, r24
    15a0:	29 f0       	breq	.+10     	; 0x15ac <_ZN10helicopter7drivers12SerialDriver10initializeEv+0xce>
		{
			UCSR0A |= (1<<U2X0);
    15a2:	e0 ec       	ldi	r30, 0xC0	; 192
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	80 83       	st	Z, r24
		}

		/* Enable receiver and transmitter */
		UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
    15ac:	e1 ec       	ldi	r30, 0xC1	; 193
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 61       	ori	r24, 0x18	; 24
    15b4:	80 83       	st	Z, r24
	}
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <_ZN10helicopter7drivers12SerialDriverD0Ev>:
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	32 e0       	ldi	r19, 0x02	; 2
    15c0:	fc 01       	movw	r30, r24
    15c2:	31 83       	std	Z+1, r19	; 0x01
    15c4:	20 83       	st	Z, r18
					
				}
    15c6:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    15ca:	08 95       	ret

000015cc <_ZN10helicopter7drivers12SerialDriver10startTimerEv>:

using namespace helicopter::drivers;

void SerialDriver::startTimer()
{
	if (timer != NULL)
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 85       	ldd	r24, Z+8	; 0x08
    15d0:	91 85       	ldd	r25, Z+9	; 0x09
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	11 f0       	breq	.+4      	; 0x15da <_ZN10helicopter7drivers12SerialDriver10startTimerEv+0xe>
	{
		timer->startTimer();
    15d6:	0e 94 ef 2a 	call	0x55de	; 0x55de <_ZN10helicopter4util5Timer10startTimerEv>
    15da:	08 95       	ret

000015dc <_ZN10helicopter7drivers12SerialDriver9stopTimerEv>:
	
}

void SerialDriver::stopTimer()
{
	if (timer != NULL)
    15dc:	fc 01       	movw	r30, r24
    15de:	80 85       	ldd	r24, Z+8	; 0x08
    15e0:	91 85       	ldd	r25, Z+9	; 0x09
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	11 f0       	breq	.+4      	; 0x15ea <_ZN10helicopter7drivers12SerialDriver9stopTimerEv+0xe>
	{
		timer->stopTimer();
    15e6:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <_ZN10helicopter4util5Timer9stopTimerEv>
    15ea:	08 95       	ret

000015ec <_ZN10helicopter7drivers9SPIDriver4initEv>:
{
	/**
	* Configure the MOSI (DDB2) pin, SCK (DDB1), and SS (DDB0) pin (the SS pin for the accelerometer/IMU)
	* as output
	*/
	DDRB = (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
    15ec:	87 e0       	ldi	r24, 0x07	; 7
    15ee:	84 b9       	out	0x04, r24	; 4
	
	/**
	 * Configure the SS pin for the barometer as output
	 */
	DDRG |= (1<<DDG1);
    15f0:	99 9a       	sbi	0x13, 1	; 19
	//Set the slave select lines 'high', therefore freeing up the SPI line. (This would otherwise default to 0, making this device
	//hold onto the SPI line). This turns the line 'off' to 'end' any current transactions. These lines
	//default to low (active) so they have to be pulled high in order to free up the SS lines so a device
	//can communicate on the line.
	//Note: Slave Select for the IMU (acclerometer, etc) is PB0, while slave select for the barometer is PG1.
	PORTB |= (1<<PB0);
    15f2:	28 9a       	sbi	0x05, 0	; 5
	PORTG |= (1<<PG1);
    15f4:	a1 9a       	sbi	0x14, 1	; 20
	 * SPI Control Register (SPCR)
	 * Enable SPI (1<<SPE)
	 * Set this device as the master device on the SPI line (1<<MSTR)
	 * Set clock frequency to Fosc / 16 (1<<SPR0) (clock speed divided by 16)
	 */
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    15f6:	8c b5       	in	r24, 0x2c	; 44
    15f8:	81 65       	ori	r24, 0x51	; 81
    15fa:	8c bd       	out	0x2c, r24	; 44
    15fc:	08 95       	ret

000015fe <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>:
{
	/**
	* Set the Slave Select to 0 indicating that the master will be sending
	* data across the SPI line.
	*/
	if (ssLine == SPIDriver::SS_B)
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	11 f4       	brne	.+4      	; 0x160a <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv+0xc>
	{	
		PORTB &= ~(1<<PB0);
    1606:	28 98       	cbi	0x05, 0	; 5
    1608:	08 95       	ret
	}else if (ssLine == SPIDriver::SS_G)
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	09 f4       	brne	.+2      	; 0x1610 <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv+0x12>
	{
		PORTG &= ~(1<<PG1);
    160e:	a1 98       	cbi	0x14, 1	; 20
    1610:	08 95       	ret

00001612 <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>:
{
	/**
	 * Set the Slave Select line to 1 indicating that the master
	 * is finished communicating (release the SPI line)
	 */
	if (ssLine == SPIDriver::SS_B)
    1612:	fc 01       	movw	r30, r24
    1614:	80 81       	ld	r24, Z
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	11 f4       	brne	.+4      	; 0x161e <_ZN10helicopter7drivers9SPIDriver14endTransactionEv+0xc>
	{	
		PORTB |= (1<<PB0);	
    161a:	28 9a       	sbi	0x05, 0	; 5
    161c:	08 95       	ret
	}else if (ssLine == SPIDriver::SS_G)
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	09 f4       	brne	.+2      	; 0x1624 <_ZN10helicopter7drivers9SPIDriver14endTransactionEv+0x12>
	{
		PORTG |= (1<<PG1);	
    1622:	a1 9a       	sbi	0x14, 1	; 20
    1624:	08 95       	ret

00001626 <_ZN10helicopter7drivers9SPIDriver5writeEh>:
void SPIDriver::write( byte data )
{
	/**
	 * Write the byte to SPI Data Register
	 */
	SPDR = data;
    1626:	6e bd       	out	0x2e, r22	; 46
	 * Wait until the SPI Status Register's
	 * SPI Interrupt flag to be set which is set
	 * when data transfer is complete, and is cleared
	 * when the SPSR register is read.
	 */
	while(!(SPSR & (1<<SPIF)));
    1628:	0d b4       	in	r0, 0x2d	; 45
    162a:	07 fe       	sbrs	r0, 7
    162c:	fd cf       	rjmp	.-6      	; 0x1628 <_ZN10helicopter7drivers9SPIDriver5writeEh+0x2>
}
    162e:	08 95       	ret

00001630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>:
	write(data);
	endTransaction();
}

void SPIDriver::write( byte commandAddress, byte commandValue )
{
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	ec 01       	movw	r28, r24
    1638:	14 2f       	mov	r17, r20
	write(commandAddress);
    163a:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN10helicopter7drivers9SPIDriver5writeEh>
	write(commandValue);
    163e:	61 2f       	mov	r22, r17
    1640:	ce 01       	movw	r24, r28
    1642:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN10helicopter7drivers9SPIDriver5writeEh>
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	08 95       	ret

0000164e <_ZN10helicopter5tasks12FlashLEDTask4initEv>:
					
			}
	
			void init()
			{
				DDRA |= (1<<ledToBlink);
    164e:	41 b1       	in	r20, 0x01	; 1
    1650:	21 e0       	ldi	r18, 0x01	; 1
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	fc 01       	movw	r30, r24
    1656:	00 84       	ldd	r0, Z+8	; 0x08
    1658:	02 c0       	rjmp	.+4      	; 0x165e <_ZN10helicopter5tasks12FlashLEDTask4initEv+0x10>
    165a:	22 0f       	add	r18, r18
    165c:	33 1f       	adc	r19, r19
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <_ZN10helicopter5tasks12FlashLEDTask4initEv+0xc>
    1662:	24 2b       	or	r18, r20
    1664:	21 b9       	out	0x01, r18	; 1
    1666:	08 95       	ret

00001668 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv>:
			}
	
			/**
				* Flashes the LED
				*/
			void runTaskImpl() {
    1668:	fc 01       	movw	r30, r24
				if (isOff)
    166a:	87 81       	ldd	r24, Z+7	; 0x07
    166c:	88 23       	and	r24, r24
    166e:	79 f0       	breq	.+30     	; 0x168e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x26>
				{
					//Turn On the LED
					PORTA &= ~(1<<ledToBlink);
    1670:	42 b1       	in	r20, 0x02	; 2
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	c9 01       	movw	r24, r18
    1678:	00 84       	ldd	r0, Z+8	; 0x08
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x18>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x14>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	82 b9       	out	0x02, r24	; 2
					isOff = false;
    168a:	17 82       	std	Z+7, r1	; 0x07
    168c:	08 95       	ret
				}else
				{
					//Turn Off the LED
					PORTA |= (1<<ledToBlink);
    168e:	42 b1       	in	r20, 0x02	; 2
    1690:	21 e0       	ldi	r18, 0x01	; 1
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	c9 01       	movw	r24, r18
    1696:	00 84       	ldd	r0, Z+8	; 0x08
    1698:	02 c0       	rjmp	.+4      	; 0x169e <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x36>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <_ZN10helicopter5tasks12FlashLEDTask11runTaskImplEv+0x32>
    16a2:	84 2b       	or	r24, r20
    16a4:	82 b9       	out	0x02, r24	; 2
					isOff = true;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	87 83       	std	Z+7, r24	; 0x07
    16aa:	08 95       	ret

000016ac <_ZN10helicopter5tasks12FlashLEDTaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    16ac:	2a e8       	ldi	r18, 0x8A	; 138
    16ae:	32 e0       	ldi	r19, 0x02	; 2
    16b0:	fc 01       	movw	r30, r24
    16b2:	31 83       	std	Z+1, r19	; 0x01
    16b4:	20 83       	st	Z, r18
    16b6:	08 95       	ret

000016b8 <_ZN10helicopter5tasks12FlashLEDTaskD0Ev>:
    16b8:	2a e8       	ldi	r18, 0x8A	; 138
    16ba:	32 e0       	ldi	r19, 0x02	; 2
    16bc:	fc 01       	movw	r30, r24
    16be:	31 83       	std	Z+1, r19	; 0x01
    16c0:	20 83       	st	Z, r18
	namespace tasks
	{
		/**
			* This task is used to periodically flash an LED on the flight computer.
			*/
		class FlashLEDTask : public Task
    16c2:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    16c6:	08 95       	ret

000016c8 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>:
using namespace helicopter::controller;
using namespace helicopter::util;
using namespace helicopter::sensors;

void setupDefaultsandReferencePosition(SystemModel *model, PIDController *pidController)
{	
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	dc 01       	movw	r26, r24
    16d2:	fb 01       	movw	r30, r22
			void MagYawDegrees(float val) { magYawDegrees = val; }	
				
				
				
			float ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(float val) { referenceMagYawDegrees = val;}
    16d4:	15 96       	adiw	r26, 0x05	; 5
    16d6:	1d 92       	st	X+, r1
    16d8:	1d 92       	st	X+, r1
    16da:	1d 92       	st	X+, r1
    16dc:	1c 92       	st	X, r1
    16de:	18 97       	sbiw	r26, 0x08	; 8
				
			float YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(float val) { yawVelocityDegreesPerSecond = val;}
				
			float ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(float val) { referenceYawVelocityDegreesPerSecond = val;}
    16e0:	55 96       	adiw	r26, 0x15	; 21
    16e2:	1d 92       	st	X+, r1
    16e4:	1d 92       	st	X+, r1
    16e6:	1d 92       	st	X+, r1
    16e8:	1c 92       	st	X, r1
    16ea:	58 97       	sbiw	r26, 0x18	; 24
			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
			void ZNEDBodyFrame(float val) { zNEDBodyFrame = val; }


			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
			void ReferenceZNEDBodyFrameFeet(float val) { referenceAltitudeFeet = val;}
    16ec:	ec 01       	movw	r28, r24
    16ee:	c3 57       	subi	r28, 0x73	; 115
    16f0:	df 4f       	sbci	r29, 0xFF	; 255
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	68 ec       	ldi	r22, 0xC8	; 200
    16f8:	72 ec       	ldi	r23, 0xC2	; 194
    16fa:	48 83       	st	Y, r20
    16fc:	59 83       	std	Y+1, r21	; 0x01
    16fe:	6a 83       	std	Y+2, r22	; 0x02
    1700:	7b 83       	std	Y+3, r23	; 0x03

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}

			float ReferenceZVelocityFeetPerSecond() const {return referenceZVelocityFeetPerSecond;}
			void ReferenceZVelocityFeetPerSecond(float val) { referenceZVelocityFeetPerSecond = val;}
    1702:	ec 01       	movw	r28, r24
    1704:	c3 56       	subi	r28, 0x63	; 99
    1706:	df 4f       	sbci	r29, 0xFF	; 255
    1708:	18 82       	st	Y, r1
    170a:	19 82       	std	Y+1, r1	; 0x01
    170c:	1a 82       	std	Y+2, r1	; 0x02
    170e:	1b 82       	std	Y+3, r1	; 0x03
		
			float XNEDBodyFrame() const {return xNEDBodyFrame;}
			void XNEDBodyFrame(float val) { xNEDBodyFrame = val;}
						
			float ReferenceXNEDBodyFrame() const {return referenceXNEDBodyFrame;}
			void ReferenceXNEDBodyFrame(float val) { referenceXNEDBodyFrame = val;}
    1710:	99 96       	adiw	r26, 0x29	; 41
    1712:	1d 92       	st	X+, r1
    1714:	1d 92       	st	X+, r1
    1716:	1d 92       	st	X+, r1
    1718:	1c 92       	st	X, r1
    171a:	9c 97       	sbiw	r26, 0x2c	; 44
				
			float XVelocityMetersPerSecond() const {return xVelocityMetersPerSecond;}
			void XVelocityMetersPerSecond(float val) { xVelocityMetersPerSecond = val;}
				
			float ReferenceXVelocityMetersPerSecond() const {return referenceXVelocityMetersPerSecond;}
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
    171c:	d9 96       	adiw	r26, 0x39	; 57
    171e:	1d 92       	st	X+, r1
    1720:	1d 92       	st	X+, r1
    1722:	1d 92       	st	X+, r1
    1724:	1c 92       	st	X, r1
    1726:	dc 97       	sbiw	r26, 0x3c	; 60

			float YNEDBodyFrame() const {return yNEDBodyFrame;}
			void YNEDBodyFrame(float val) { yNEDBodyFrame = val;}

			float ReferenceYNEDBodyFrame() const {return referenceYNEDBodyFrame;}
			void ReferenceYNEDBodyFrame(float val) { referenceYNEDBodyFrame = val;}
    1728:	ec 01       	movw	r28, r24
    172a:	c7 5a       	subi	r28, 0xA7	; 167
    172c:	df 4f       	sbci	r29, 0xFF	; 255
    172e:	18 82       	st	Y, r1
    1730:	19 82       	std	Y+1, r1	; 0x01
    1732:	1a 82       	std	Y+2, r1	; 0x02
    1734:	1b 82       	std	Y+3, r1	; 0x03

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}

			float ReferenceYVelocityMetersPerSecond() const {return referenceYVelocityMetersPerSecond;}
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}
    1736:	a7 59       	subi	r26, 0x97	; 151
    1738:	bf 4f       	sbci	r27, 0xFF	; 255
    173a:	1d 92       	st	X+, r1
    173c:	1d 92       	st	X+, r1
    173e:	1d 92       	st	X+, r1
    1740:	1c 92       	st	X, r1
    1742:	13 97       	sbiw	r26, 0x03	; 3
				/**
				 * Gain value applied to the yaw proportional error
				 */
				void setYawProportionalGain(float yawProportionalGain)
				{
					this->yawProportionalGain = yawProportionalGain;
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e4       	ldi	r26, 0x40	; 64
    174a:	b0 e4       	ldi	r27, 0x40	; 64
    174c:	82 87       	std	Z+10, r24	; 0x0a
    174e:	93 87       	std	Z+11, r25	; 0x0b
    1750:	a4 87       	std	Z+12, r26	; 0x0c
    1752:	b5 87       	std	Z+13, r27	; 0x0d
				/**
				 * Gain value applied to the yaw integral
				 */
				void setYawIntegralGain(float yawIntegralGain)
				{
					this->yawIntegralGain = yawIntegralGain;
    1754:	8f e6       	ldi	r24, 0x6F	; 111
    1756:	92 e1       	ldi	r25, 0x12	; 18
    1758:	a3 e0       	ldi	r26, 0x03	; 3
    175a:	bc e3       	ldi	r27, 0x3C	; 60
    175c:	82 83       	std	Z+2, r24	; 0x02
    175e:	93 83       	std	Z+3, r25	; 0x03
    1760:	a4 83       	std	Z+4, r26	; 0x04
    1762:	b5 83       	std	Z+5, r27	; 0x05
				/**
				 * Gain value applied to the derivative
				 */
				void setYawDerivativeGain(float yawDerivativeGain)
				{
					this->yawDerivativeGain = yawDerivativeGain;
    1764:	8a e9       	ldi	r24, 0x9A	; 154
    1766:	99 e9       	ldi	r25, 0x99	; 153
    1768:	a9 e5       	ldi	r26, 0x59	; 89
    176a:	bf e3       	ldi	r27, 0x3F	; 63
    176c:	86 83       	std	Z+6, r24	; 0x06
    176e:	97 83       	std	Z+7, r25	; 0x07
    1770:	a0 87       	std	Z+8, r26	; 0x08
    1772:	b1 87       	std	Z+9, r27	; 0x09
				 * go back to 0 when the servos are saturated.
				 * Some simple rule that have been suggested for the tracking time are ~ Tt = TiTd and Tt = (Ti + Td)/2.
				 */
				void setYawAntiWindupGain(float yawAntiWindupGain)
				{
					this->yawAntiWindupGain = yawAntiWindupGain;
    1774:	8d ec       	ldi	r24, 0xCD	; 205
    1776:	9c ec       	ldi	r25, 0xCC	; 204
    1778:	ac ec       	ldi	r26, 0xCC	; 204
    177a:	bd e3       	ldi	r27, 0x3D	; 61
    177c:	86 87       	std	Z+14, r24	; 0x0e
    177e:	97 87       	std	Z+15, r25	; 0x0f
    1780:	a0 8b       	std	Z+16, r26	; 0x10
    1782:	b1 8b       	std	Z+17, r27	; 0x11
					xDerivativeGain = val;
				}
				
				void setXProportionalGain(float val)
				{
					xProportionalGain = val;
    1784:	8f ec       	ldi	r24, 0xCF	; 207
    1786:	97 ef       	ldi	r25, 0xF7	; 247
    1788:	a3 e9       	ldi	r26, 0x93	; 147
    178a:	be e3       	ldi	r27, 0x3E	; 62
    178c:	82 8f       	std	Z+26, r24	; 0x1a
    178e:	93 8f       	std	Z+27, r25	; 0x1b
    1790:	a4 8f       	std	Z+28, r26	; 0x1c
    1792:	b5 8f       	std	Z+29, r27	; 0x1d
					
				~PIDController();
				
				void setXIntegralGain(float val)
				{
					xIntegralGain = val;
    1794:	12 8a       	std	Z+18, r1	; 0x12
    1796:	13 8a       	std	Z+19, r1	; 0x13
    1798:	14 8a       	std	Z+20, r1	; 0x14
    179a:	15 8a       	std	Z+21, r1	; 0x15
				}
				
				void setXDerivativeGain(float val)
				{
					xDerivativeGain = val;
    179c:	86 eb       	ldi	r24, 0xB6	; 182
    179e:	93 ef       	ldi	r25, 0xF3	; 243
    17a0:	ad ee       	ldi	r26, 0xED	; 237
    17a2:	bf e3       	ldi	r27, 0x3F	; 63
    17a4:	86 8b       	std	Z+22, r24	; 0x16
    17a6:	97 8b       	std	Z+23, r25	; 0x17
    17a8:	a0 8f       	std	Z+24, r26	; 0x18
    17aa:	b1 8f       	std	Z+25, r27	; 0x19
					xProportionalGain = val;
				}
				
				void setXAntiWindupGain(float val)
				{
					xAntiWindupGain = val;
    17ac:	16 8e       	std	Z+30, r1	; 0x1e
    17ae:	17 8e       	std	Z+31, r1	; 0x1f
    17b0:	10 a2       	std	Z+32, r1	; 0x20
    17b2:	11 a2       	std	Z+33, r1	; 0x21
				}
				
				void setLongitudeInnerLoopGain(float val)
				{
					longitudeInnerLoopGain = val;
    17b4:	86 eb       	ldi	r24, 0xB6	; 182
    17b6:	93 ef       	ldi	r25, 0xF3	; 243
    17b8:	ad ef       	ldi	r26, 0xFD	; 253
    17ba:	bc e3       	ldi	r27, 0x3C	; 60
    17bc:	82 a3       	std	Z+34, r24	; 0x22
    17be:	93 a3       	std	Z+35, r25	; 0x23
    17c0:	a4 a3       	std	Z+36, r26	; 0x24
    17c2:	b5 a3       	std	Z+37, r27	; 0x25
				}
				
				void setPitchAngularVelocityGain(float val)
				{
					pitchAngularVelocityGain = val;
    17c4:	8f e8       	ldi	r24, 0x8F	; 143
    17c6:	92 ec       	ldi	r25, 0xC2	; 194
    17c8:	a5 ef       	ldi	r26, 0xF5	; 245
    17ca:	bc e3       	ldi	r27, 0x3C	; 60
    17cc:	86 a3       	std	Z+38, r24	; 0x26
    17ce:	97 a3       	std	Z+39, r25	; 0x27
    17d0:	a0 a7       	std	Z+40, r26	; 0x28
    17d2:	b1 a7       	std	Z+41, r27	; 0x29
					yDerivativeGain = val;
				}
				
				void setYProportionalGain(float val)
				{
					yProportionalGain = val;
    17d4:	8e e9       	ldi	r24, 0x9E	; 158
    17d6:	9f ee       	ldi	r25, 0xEF	; 239
    17d8:	a7 eb       	ldi	r26, 0xB7	; 183
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	82 ab       	std	Z+50, r24	; 0x32
    17de:	93 ab       	std	Z+51, r25	; 0x33
    17e0:	a4 ab       	std	Z+52, r26	; 0x34
    17e2:	b5 ab       	std	Z+53, r27	; 0x35
				
				
				
				void setYIntegralGain(float val)
				{
					yIntegralGain = val;
    17e4:	12 a6       	std	Z+42, r1	; 0x2a
    17e6:	13 a6       	std	Z+43, r1	; 0x2b
    17e8:	14 a6       	std	Z+44, r1	; 0x2c
    17ea:	15 a6       	std	Z+45, r1	; 0x2d
				}
				
				void setYDerivativeGain(float val)
				{
					yDerivativeGain = val;
    17ec:	80 ef       	ldi	r24, 0xF0	; 240
    17ee:	95 e8       	ldi	r25, 0x85	; 133
    17f0:	a5 e3       	ldi	r26, 0x35	; 53
    17f2:	b0 e4       	ldi	r27, 0x40	; 64
    17f4:	86 a7       	std	Z+46, r24	; 0x2e
    17f6:	97 a7       	std	Z+47, r25	; 0x2f
    17f8:	a0 ab       	std	Z+48, r26	; 0x30
    17fa:	b1 ab       	std	Z+49, r27	; 0x31
					yProportionalGain = val;
				}
				
				void setYAntiWindupGain(float val)
				{
					yAntiWindupGain = val;
    17fc:	16 aa       	std	Z+54, r1	; 0x36
    17fe:	17 aa       	std	Z+55, r1	; 0x37
    1800:	10 ae       	std	Z+56, r1	; 0x38
    1802:	11 ae       	std	Z+57, r1	; 0x39
				}
				
				void setLateralInnerLoopGain(float val)
				{
					lateralInnerLoopGain = val;
    1804:	8f e7       	ldi	r24, 0x7F	; 127
    1806:	9a e6       	ldi	r25, 0x6A	; 106
    1808:	ac eb       	ldi	r26, 0xBC	; 188
    180a:	bd e3       	ldi	r27, 0x3D	; 61
    180c:	82 af       	std	Z+58, r24	; 0x3a
    180e:	93 af       	std	Z+59, r25	; 0x3b
    1810:	a4 af       	std	Z+60, r26	; 0x3c
    1812:	b5 af       	std	Z+61, r27	; 0x3d
				}
				
				void setRollAngularVelocityGain(float val)
				{
					rollAngularVelocityGain = val;
    1814:	ef 01       	movw	r28, r30
    1816:	ee 96       	adiw	r28, 0x3e	; 62
    1818:	86 ea       	ldi	r24, 0xA6	; 166
    181a:	9b e9       	ldi	r25, 0x9B	; 155
    181c:	a4 e4       	ldi	r26, 0x44	; 68
    181e:	bd e3       	ldi	r27, 0x3D	; 61
    1820:	88 83       	st	Y, r24
    1822:	99 83       	std	Y+1, r25	; 0x01
    1824:	aa 83       	std	Y+2, r26	; 0x02
    1826:	bb 83       	std	Y+3, r27	; 0x03
				 * The number of seconds between pid controller updates. This number
				 * should generally be less than 1. Like .05 for a 20 hz rate.
				 */
				void setIntervalPeriodSecs(float intervalPeriodSecs)
				{
					this->intervalPeriodSecs = intervalPeriodSecs;
    1828:	ef 01       	movw	r28, r30
    182a:	ce 57       	subi	r28, 0x7E	; 126
    182c:	df 4f       	sbci	r29, 0xFF	; 255
    182e:	8d ec       	ldi	r24, 0xCD	; 205
    1830:	9c ec       	ldi	r25, 0xCC	; 204
    1832:	ac e4       	ldi	r26, 0x4C	; 76
    1834:	bd e3       	ldi	r27, 0x3D	; 61
    1836:	88 83       	st	Y, r24
    1838:	99 83       	std	Y+1, r25	; 0x01
    183a:	aa 83       	std	Y+2, r26	; 0x02
    183c:	bb 83       	std	Y+3, r27	; 0x03
				 * This is the maximum possible output value for a control signal.
				 * Generally, this should be set to 1.
				 */
				void setControlMaxValue(float controlMaxValue)
				{
					this->controlMaxValue = controlMaxValue;
    183e:	df 01       	movw	r26, r30
    1840:	aa 57       	subi	r26, 0x7A	; 122
    1842:	bf 4f       	sbci	r27, 0xFF	; 255
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	60 e8       	ldi	r22, 0x80	; 128
    184a:	7f e3       	ldi	r23, 0x3F	; 63
    184c:	4d 93       	st	X+, r20
    184e:	5d 93       	st	X+, r21
    1850:	6d 93       	st	X+, r22
    1852:	7c 93       	st	X, r23
    1854:	13 97       	sbiw	r26, 0x03	; 3
				 * This is the minimum possible value for a control signal.
				 * Generally, this should be set to -1.
				 */
				void setControlMinValue(float controlMinValue)
				{
					this->controlMinValue = controlMinValue;
    1856:	ef 01       	movw	r28, r30
    1858:	c6 57       	subi	r28, 0x76	; 118
    185a:	df 4f       	sbci	r29, 0xFF	; 255
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e8       	ldi	r26, 0x80	; 128
    1862:	bf eb       	ldi	r27, 0xBF	; 191
    1864:	88 83       	st	Y, r24
    1866:	99 83       	std	Y+1, r25	; 0x01
    1868:	aa 83       	std	Y+2, r26	; 0x02
    186a:	bb 83       	std	Y+3, r27	; 0x03
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no smaller than the controlMinValue (e.g. no less than -1)
				 */
				void setMinYawServoControl(float minYawServoControlValue)
				{
					this->minYawServoControlValue = minYawServoControlValue;
    186c:	ef 01       	movw	r28, r30
    186e:	ce 5a       	subi	r28, 0xAE	; 174
    1870:	df 4f       	sbci	r29, 0xFF	; 255
    1872:	0f e8       	ldi	r16, 0x8F	; 143
    1874:	12 ec       	ldi	r17, 0xC2	; 194
    1876:	25 e7       	ldi	r18, 0x75	; 117
    1878:	3f eb       	ldi	r19, 0xBF	; 191
    187a:	08 83       	st	Y, r16
    187c:	19 83       	std	Y+1, r17	; 0x01
    187e:	2a 83       	std	Y+2, r18	; 0x02
    1880:	3b 83       	std	Y+3, r19	; 0x03
				 * integral anti-windup to determine when the actuators would be saturated.
				 * The value should be no larger than the controlMaxValue (e.g. no greater than 1)
				 */
				void setMaxYawServoControl(float maxYawServoControlValue)
				{
					this->maxYawServoControlValue = maxYawServoControlValue;
    1882:	ef 01       	movw	r28, r30
    1884:	ca 5a       	subi	r28, 0xAA	; 170
    1886:	df 4f       	sbci	r29, 0xFF	; 255
    1888:	0f e8       	ldi	r16, 0x8F	; 143
    188a:	12 ec       	ldi	r17, 0xC2	; 194
    188c:	25 e7       	ldi	r18, 0x75	; 117
    188e:	3f e3       	ldi	r19, 0x3F	; 63
    1890:	08 83       	st	Y, r16
    1892:	19 83       	std	Y+1, r17	; 0x01
    1894:	2a 83       	std	Y+2, r18	; 0x02
    1896:	3b 83       	std	Y+3, r19	; 0x03
					minLongitudeServoControlValue = val;
				}
				
				void setMaxLongitudeServoControlValue(float val)
				{
					maxLongitudeServoControlValue = val;
    1898:	ef 01       	movw	r28, r30
    189a:	c2 5a       	subi	r28, 0xA2	; 162
    189c:	df 4f       	sbci	r29, 0xFF	; 255
    189e:	48 83       	st	Y, r20
    18a0:	59 83       	std	Y+1, r21	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
    18a4:	7b 83       	std	Y+3, r23	; 0x03
					pitchAngularVelocityGain = val;
				}
				
				void setMinLongitudeServoControlValue(float val)
				{
					minLongitudeServoControlValue = val;
    18a6:	ef 01       	movw	r28, r30
    18a8:	c6 5a       	subi	r28, 0xA6	; 166
    18aa:	df 4f       	sbci	r29, 0xFF	; 255
    18ac:	88 83       	st	Y, r24
    18ae:	99 83       	std	Y+1, r25	; 0x01
    18b0:	aa 83       	std	Y+2, r26	; 0x02
    18b2:	bb 83       	std	Y+3, r27	; 0x03
					minLateralServoControlValue = val;
				}
				
				void setMaxLateralServoControlValue(float val)
				{
					maxLateralServoControlValue = val;
    18b4:	ef 01       	movw	r28, r30
    18b6:	ca 59       	subi	r28, 0x9A	; 154
    18b8:	df 4f       	sbci	r29, 0xFF	; 255
    18ba:	48 83       	st	Y, r20
    18bc:	59 83       	std	Y+1, r21	; 0x01
    18be:	6a 83       	std	Y+2, r22	; 0x02
    18c0:	7b 83       	std	Y+3, r23	; 0x03
					rollAngularVelocityGain = val;
				}
				
				void setMinLateralServoControlValue(float val)
				{
					minLateralServoControlValue = val;
    18c2:	ef 01       	movw	r28, r30
    18c4:	ce 59       	subi	r28, 0x9E	; 158
    18c6:	df 4f       	sbci	r29, 0xFF	; 255
    18c8:	88 83       	st	Y, r24
    18ca:	99 83       	std	Y+1, r25	; 0x01
    18cc:	aa 83       	std	Y+2, r26	; 0x02
    18ce:	bb 83       	std	Y+3, r27	; 0x03
					minMainRotorServoControlValue = val;
				}
				
				void setMaxMainRotorServoControlValue(float val)
				{
					maxMainRotorServoControlValue = val;
    18d0:	ef 01       	movw	r28, r30
    18d2:	c2 59       	subi	r28, 0x92	; 146
    18d4:	df 4f       	sbci	r29, 0xFF	; 255
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	bf e3       	ldi	r27, 0x3F	; 63
    18de:	88 83       	st	Y, r24
    18e0:	99 83       	std	Y+1, r25	; 0x01
    18e2:	aa 83       	std	Y+2, r26	; 0x02
    18e4:	bb 83       	std	Y+3, r27	; 0x03
					zAntiWindupGain = val;
				}
				
				void setMinMainRotorServoControlValue(float val)
				{
					minMainRotorServoControlValue = val;
    18e6:	df 01       	movw	r26, r30
    18e8:	a6 59       	subi	r26, 0x96	; 150
    18ea:	bf 4f       	sbci	r27, 0xFF	; 255
    18ec:	1d 92       	st	X+, r1
    18ee:	1d 92       	st	X+, r1
    18f0:	1d 92       	st	X+, r1
    18f2:	1c 92       	st	X, r1
    18f4:	13 97       	sbiw	r26, 0x03	; 3
				}


				void setMaxRollSetpointDegrees(float val)
				{
					maxRollSetpointDegrees = val;
    18f6:	ef 01       	movw	r28, r30
    18f8:	c2 58       	subi	r28, 0x82	; 130
    18fa:	df 4f       	sbci	r29, 0xFF	; 255
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 ea       	ldi	r26, 0xA0	; 160
    1902:	b0 e4       	ldi	r27, 0x40	; 64
    1904:	88 83       	st	Y, r24
    1906:	99 83       	std	Y+1, r25	; 0x01
    1908:	aa 83       	std	Y+2, r26	; 0x02
    190a:	bb 83       	std	Y+3, r27	; 0x03
				}
				
				void setMinRollSetpointDegrees(float val)
				{
					minRollSetpointDegrees = val;
    190c:	ef 01       	movw	r28, r30
    190e:	c6 58       	subi	r28, 0x86	; 134
    1910:	df 4f       	sbci	r29, 0xFF	; 255
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 ea       	ldi	r26, 0xA0	; 160
    1918:	b0 ec       	ldi	r27, 0xC0	; 192
    191a:	88 83       	st	Y, r24
    191c:	99 83       	std	Y+1, r25	; 0x01
    191e:	aa 83       	std	Y+2, r26	; 0x02
    1920:	bb 83       	std	Y+3, r27	; 0x03
				}
				
				void setMaxPitchSetpointDegrees(float val)
				{
					maxPitchSetpointDegrees = val;
    1922:	ef 01       	movw	r28, r30
    1924:	ca 58       	subi	r28, 0x8A	; 138
    1926:	df 4f       	sbci	r29, 0xFF	; 255
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 e5       	ldi	r26, 0x50	; 80
    192e:	b1 e4       	ldi	r27, 0x41	; 65
    1930:	88 83       	st	Y, r24
    1932:	99 83       	std	Y+1, r25	; 0x01
    1934:	aa 83       	std	Y+2, r26	; 0x02
    1936:	bb 83       	std	Y+3, r27	; 0x03
				}
				
				void setMinPitchSetpointDegrees(float val)
				{	
					minPitchSetpointDegrees = val;
    1938:	ee 58       	subi	r30, 0x8E	; 142
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e5       	ldi	r26, 0x50	; 80
    1942:	b1 ec       	ldi	r27, 0xC1	; 193
    1944:	80 83       	st	Z, r24
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	a2 83       	std	Z+2, r26	; 0x02
    194a:	b3 83       	std	Z+3, r27	; 0x03
	pidController->setMaxRollSetpointDegrees(5);
	pidController->setMinRollSetpointDegrees(-5);
	
	pidController->setMaxPitchSetpointDegrees(13);
	pidController->setMinPitchSetpointDegrees(-13);
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <main>:


int main(void)
{	
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	68 97       	sbiw	r28, 0x18	; 24
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
	SystemModel *model = new SystemModel();
    196a:	89 ef       	ldi	r24, 0xF9	; 249
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1972:	1c 01       	movw	r2, r24
				numOfFramesBlown(0),
				serialCommunicationBufferOverruns(0),
				
				initialXPositionEcef(0),
				initialYPositionEcef(0),
				initialZPositionEcef(0)
    1974:	dc 01       	movw	r26, r24
    1976:	1c 92       	st	X, r1
    1978:	fc 01       	movw	r30, r24
    197a:	11 82       	std	Z+1, r1	; 0x01
    197c:	12 82       	std	Z+2, r1	; 0x02
    197e:	13 82       	std	Z+3, r1	; 0x03
    1980:	14 82       	std	Z+4, r1	; 0x04
    1982:	15 96       	adiw	r26, 0x05	; 5
    1984:	1d 92       	st	X+, r1
    1986:	1d 92       	st	X+, r1
    1988:	1d 92       	st	X+, r1
    198a:	1c 92       	st	X, r1
    198c:	18 97       	sbiw	r26, 0x08	; 8
    198e:	11 86       	std	Z+9, r1	; 0x09
    1990:	12 86       	std	Z+10, r1	; 0x0a
    1992:	13 86       	std	Z+11, r1	; 0x0b
    1994:	14 86       	std	Z+12, r1	; 0x0c
    1996:	1d 96       	adiw	r26, 0x0d	; 13
    1998:	1d 92       	st	X+, r1
    199a:	1d 92       	st	X+, r1
    199c:	1d 92       	st	X+, r1
    199e:	1c 92       	st	X, r1
    19a0:	50 97       	sbiw	r26, 0x10	; 16
    19a2:	11 8a       	std	Z+17, r1	; 0x11
    19a4:	12 8a       	std	Z+18, r1	; 0x12
    19a6:	13 8a       	std	Z+19, r1	; 0x13
    19a8:	14 8a       	std	Z+20, r1	; 0x14
    19aa:	55 96       	adiw	r26, 0x15	; 21
    19ac:	1d 92       	st	X+, r1
    19ae:	1d 92       	st	X+, r1
    19b0:	1d 92       	st	X+, r1
    19b2:	1c 92       	st	X, r1
    19b4:	58 97       	sbiw	r26, 0x18	; 24
    19b6:	11 8e       	std	Z+25, r1	; 0x19
    19b8:	12 8e       	std	Z+26, r1	; 0x1a
    19ba:	13 8e       	std	Z+27, r1	; 0x1b
    19bc:	14 8e       	std	Z+28, r1	; 0x1c
    19be:	5d 96       	adiw	r26, 0x1d	; 29
    19c0:	1d 92       	st	X+, r1
    19c2:	1d 92       	st	X+, r1
    19c4:	1d 92       	st	X+, r1
    19c6:	1c 92       	st	X, r1
    19c8:	90 97       	sbiw	r26, 0x20	; 32
    19ca:	11 a2       	std	Z+33, r1	; 0x21
    19cc:	12 a2       	std	Z+34, r1	; 0x22
    19ce:	13 a2       	std	Z+35, r1	; 0x23
    19d0:	14 a2       	std	Z+36, r1	; 0x24
    19d2:	95 96       	adiw	r26, 0x25	; 37
    19d4:	1d 92       	st	X+, r1
    19d6:	1d 92       	st	X+, r1
    19d8:	1d 92       	st	X+, r1
    19da:	1c 92       	st	X, r1
    19dc:	98 97       	sbiw	r26, 0x28	; 40
    19de:	11 a6       	std	Z+41, r1	; 0x29
    19e0:	12 a6       	std	Z+42, r1	; 0x2a
    19e2:	13 a6       	std	Z+43, r1	; 0x2b
    19e4:	14 a6       	std	Z+44, r1	; 0x2c
    19e6:	9d 96       	adiw	r26, 0x2d	; 45
    19e8:	1d 92       	st	X+, r1
    19ea:	1d 92       	st	X+, r1
    19ec:	1d 92       	st	X+, r1
    19ee:	1c 92       	st	X, r1
    19f0:	d0 97       	sbiw	r26, 0x30	; 48
    19f2:	11 aa       	std	Z+49, r1	; 0x31
    19f4:	12 aa       	std	Z+50, r1	; 0x32
    19f6:	13 aa       	std	Z+51, r1	; 0x33
    19f8:	14 aa       	std	Z+52, r1	; 0x34
    19fa:	d5 96       	adiw	r26, 0x35	; 53
    19fc:	1d 92       	st	X+, r1
    19fe:	1d 92       	st	X+, r1
    1a00:	1d 92       	st	X+, r1
    1a02:	1c 92       	st	X, r1
    1a04:	d8 97       	sbiw	r26, 0x38	; 56
    1a06:	11 ae       	std	Z+57, r1	; 0x39
    1a08:	12 ae       	std	Z+58, r1	; 0x3a
    1a0a:	13 ae       	std	Z+59, r1	; 0x3b
    1a0c:	14 ae       	std	Z+60, r1	; 0x3c
    1a0e:	fd 96       	adiw	r30, 0x3d	; 61
    1a10:	10 82       	st	Z, r1
    1a12:	11 82       	std	Z+1, r1	; 0x01
    1a14:	12 82       	std	Z+2, r1	; 0x02
    1a16:	13 82       	std	Z+3, r1	; 0x03
    1a18:	fc 01       	movw	r30, r24
    1a1a:	ef 5b       	subi	r30, 0xBF	; 191
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	10 82       	st	Z, r1
    1a20:	11 82       	std	Z+1, r1	; 0x01
    1a22:	12 82       	std	Z+2, r1	; 0x02
    1a24:	13 82       	std	Z+3, r1	; 0x03
    1a26:	fc 01       	movw	r30, r24
    1a28:	eb 5b       	subi	r30, 0xBB	; 187
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	10 82       	st	Z, r1
    1a2e:	11 82       	std	Z+1, r1	; 0x01
    1a30:	12 82       	std	Z+2, r1	; 0x02
    1a32:	13 82       	std	Z+3, r1	; 0x03
    1a34:	fc 01       	movw	r30, r24
    1a36:	e7 5b       	subi	r30, 0xB7	; 183
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	10 82       	st	Z, r1
    1a3c:	11 82       	std	Z+1, r1	; 0x01
    1a3e:	12 82       	std	Z+2, r1	; 0x02
    1a40:	13 82       	std	Z+3, r1	; 0x03
    1a42:	fc 01       	movw	r30, r24
    1a44:	e3 5b       	subi	r30, 0xB3	; 179
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	10 82       	st	Z, r1
    1a4a:	11 82       	std	Z+1, r1	; 0x01
    1a4c:	12 82       	std	Z+2, r1	; 0x02
    1a4e:	13 82       	std	Z+3, r1	; 0x03
    1a50:	fc 01       	movw	r30, r24
    1a52:	ef 5a       	subi	r30, 0xAF	; 175
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	10 82       	st	Z, r1
    1a58:	11 82       	std	Z+1, r1	; 0x01
    1a5a:	12 82       	std	Z+2, r1	; 0x02
    1a5c:	13 82       	std	Z+3, r1	; 0x03
    1a5e:	fc 01       	movw	r30, r24
    1a60:	eb 5a       	subi	r30, 0xAB	; 171
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	10 82       	st	Z, r1
    1a66:	11 82       	std	Z+1, r1	; 0x01
    1a68:	12 82       	std	Z+2, r1	; 0x02
    1a6a:	13 82       	std	Z+3, r1	; 0x03
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	e7 5a       	subi	r30, 0xA7	; 167
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	10 82       	st	Z, r1
    1a74:	11 82       	std	Z+1, r1	; 0x01
    1a76:	12 82       	std	Z+2, r1	; 0x02
    1a78:	13 82       	std	Z+3, r1	; 0x03
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	e3 5a       	subi	r30, 0xA3	; 163
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	10 82       	st	Z, r1
    1a82:	11 82       	std	Z+1, r1	; 0x01
    1a84:	12 82       	std	Z+2, r1	; 0x02
    1a86:	13 82       	std	Z+3, r1	; 0x03
    1a88:	fc 01       	movw	r30, r24
    1a8a:	ef 59       	subi	r30, 0x9F	; 159
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	10 82       	st	Z, r1
    1a90:	11 82       	std	Z+1, r1	; 0x01
    1a92:	12 82       	std	Z+2, r1	; 0x02
    1a94:	13 82       	std	Z+3, r1	; 0x03
    1a96:	fc 01       	movw	r30, r24
    1a98:	eb 59       	subi	r30, 0x9B	; 155
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	10 82       	st	Z, r1
    1a9e:	11 82       	std	Z+1, r1	; 0x01
    1aa0:	12 82       	std	Z+2, r1	; 0x02
    1aa2:	13 82       	std	Z+3, r1	; 0x03
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e7 59       	subi	r30, 0x97	; 151
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	10 82       	st	Z, r1
    1aac:	11 82       	std	Z+1, r1	; 0x01
    1aae:	12 82       	std	Z+2, r1	; 0x02
    1ab0:	13 82       	std	Z+3, r1	; 0x03
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	e3 59       	subi	r30, 0x93	; 147
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	10 82       	st	Z, r1
    1aba:	11 82       	std	Z+1, r1	; 0x01
    1abc:	12 82       	std	Z+2, r1	; 0x02
    1abe:	13 82       	std	Z+3, r1	; 0x03
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	ef 58       	subi	r30, 0x8F	; 143
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	10 82       	st	Z, r1
    1ac8:	11 82       	std	Z+1, r1	; 0x01
    1aca:	12 82       	std	Z+2, r1	; 0x02
    1acc:	13 82       	std	Z+3, r1	; 0x03
    1ace:	fc 01       	movw	r30, r24
    1ad0:	eb 58       	subi	r30, 0x8B	; 139
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	10 82       	st	Z, r1
    1ad6:	11 82       	std	Z+1, r1	; 0x01
    1ad8:	12 82       	std	Z+2, r1	; 0x02
    1ada:	13 82       	std	Z+3, r1	; 0x03
    1adc:	fc 01       	movw	r30, r24
    1ade:	e7 58       	subi	r30, 0x87	; 135
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	10 82       	st	Z, r1
    1ae4:	11 82       	std	Z+1, r1	; 0x01
    1ae6:	12 82       	std	Z+2, r1	; 0x02
    1ae8:	13 82       	std	Z+3, r1	; 0x03
    1aea:	fc 01       	movw	r30, r24
    1aec:	e3 58       	subi	r30, 0x83	; 131
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	10 82       	st	Z, r1
    1af2:	11 82       	std	Z+1, r1	; 0x01
    1af4:	12 82       	std	Z+2, r1	; 0x02
    1af6:	13 82       	std	Z+3, r1	; 0x03
    1af8:	fc 01       	movw	r30, r24
    1afa:	ef 57       	subi	r30, 0x7F	; 127
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	10 82       	st	Z, r1
    1b00:	11 82       	std	Z+1, r1	; 0x01
    1b02:	12 82       	std	Z+2, r1	; 0x02
    1b04:	13 82       	std	Z+3, r1	; 0x03
    1b06:	fc 01       	movw	r30, r24
    1b08:	eb 57       	subi	r30, 0x7B	; 123
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	10 82       	st	Z, r1
    1b0e:	11 82       	std	Z+1, r1	; 0x01
    1b10:	12 82       	std	Z+2, r1	; 0x02
    1b12:	13 82       	std	Z+3, r1	; 0x03
    1b14:	fc 01       	movw	r30, r24
    1b16:	e7 57       	subi	r30, 0x77	; 119
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	10 82       	st	Z, r1
    1b1c:	11 82       	std	Z+1, r1	; 0x01
    1b1e:	12 82       	std	Z+2, r1	; 0x02
    1b20:	13 82       	std	Z+3, r1	; 0x03
    1b22:	fc 01       	movw	r30, r24
    1b24:	e3 57       	subi	r30, 0x73	; 115
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	10 82       	st	Z, r1
    1b2a:	11 82       	std	Z+1, r1	; 0x01
    1b2c:	12 82       	std	Z+2, r1	; 0x02
    1b2e:	13 82       	std	Z+3, r1	; 0x03
    1b30:	fc 01       	movw	r30, r24
    1b32:	ef 56       	subi	r30, 0x6F	; 111
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	10 82       	st	Z, r1
    1b38:	11 82       	std	Z+1, r1	; 0x01
    1b3a:	12 82       	std	Z+2, r1	; 0x02
    1b3c:	13 82       	std	Z+3, r1	; 0x03
    1b3e:	fc 01       	movw	r30, r24
    1b40:	eb 56       	subi	r30, 0x6B	; 107
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	10 82       	st	Z, r1
    1b46:	11 82       	std	Z+1, r1	; 0x01
    1b48:	12 82       	std	Z+2, r1	; 0x02
    1b4a:	13 82       	std	Z+3, r1	; 0x03
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e7 56       	subi	r30, 0x67	; 103
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	10 82       	st	Z, r1
    1b54:	11 82       	std	Z+1, r1	; 0x01
    1b56:	12 82       	std	Z+2, r1	; 0x02
    1b58:	13 82       	std	Z+3, r1	; 0x03
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	e3 56       	subi	r30, 0x63	; 99
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	10 82       	st	Z, r1
    1b62:	11 82       	std	Z+1, r1	; 0x01
    1b64:	12 82       	std	Z+2, r1	; 0x02
    1b66:	13 82       	std	Z+3, r1	; 0x03
    1b68:	fc 01       	movw	r30, r24
    1b6a:	ef 55       	subi	r30, 0x5F	; 95
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	10 82       	st	Z, r1
    1b70:	11 82       	std	Z+1, r1	; 0x01
    1b72:	12 82       	std	Z+2, r1	; 0x02
    1b74:	13 82       	std	Z+3, r1	; 0x03
    1b76:	fc 01       	movw	r30, r24
    1b78:	eb 55       	subi	r30, 0x5B	; 91
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	10 82       	st	Z, r1
    1b7e:	11 82       	std	Z+1, r1	; 0x01
    1b80:	12 82       	std	Z+2, r1	; 0x02
    1b82:	13 82       	std	Z+3, r1	; 0x03
    1b84:	fc 01       	movw	r30, r24
    1b86:	e7 55       	subi	r30, 0x57	; 87
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	10 82       	st	Z, r1
    1b8c:	11 82       	std	Z+1, r1	; 0x01
    1b8e:	12 82       	std	Z+2, r1	; 0x02
    1b90:	13 82       	std	Z+3, r1	; 0x03
    1b92:	fc 01       	movw	r30, r24
    1b94:	e3 55       	subi	r30, 0x53	; 83
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	10 82       	st	Z, r1
    1b9a:	11 82       	std	Z+1, r1	; 0x01
    1b9c:	12 82       	std	Z+2, r1	; 0x02
    1b9e:	13 82       	std	Z+3, r1	; 0x03
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	ef 54       	subi	r30, 0x4F	; 79
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	10 82       	st	Z, r1
    1ba8:	11 82       	std	Z+1, r1	; 0x01
    1baa:	12 82       	std	Z+2, r1	; 0x02
    1bac:	13 82       	std	Z+3, r1	; 0x03
    1bae:	fc 01       	movw	r30, r24
    1bb0:	eb 54       	subi	r30, 0x4B	; 75
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	10 82       	st	Z, r1
    1bb6:	11 82       	std	Z+1, r1	; 0x01
    1bb8:	12 82       	std	Z+2, r1	; 0x02
    1bba:	13 82       	std	Z+3, r1	; 0x03
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e7 54       	subi	r30, 0x47	; 71
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	10 82       	st	Z, r1
    1bc4:	11 82       	std	Z+1, r1	; 0x01
    1bc6:	12 82       	std	Z+2, r1	; 0x02
    1bc8:	13 82       	std	Z+3, r1	; 0x03
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e3 54       	subi	r30, 0x43	; 67
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	10 82       	st	Z, r1
    1bd2:	11 82       	std	Z+1, r1	; 0x01
    1bd4:	12 82       	std	Z+2, r1	; 0x02
    1bd6:	13 82       	std	Z+3, r1	; 0x03
    1bd8:	fc 01       	movw	r30, r24
    1bda:	ef 53       	subi	r30, 0x3F	; 63
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	10 82       	st	Z, r1
    1be0:	11 82       	std	Z+1, r1	; 0x01
    1be2:	12 82       	std	Z+2, r1	; 0x02
    1be4:	13 82       	std	Z+3, r1	; 0x03
    1be6:	fc 01       	movw	r30, r24
    1be8:	eb 53       	subi	r30, 0x3B	; 59
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	10 82       	st	Z, r1
    1bee:	11 82       	std	Z+1, r1	; 0x01
    1bf0:	12 82       	std	Z+2, r1	; 0x02
    1bf2:	13 82       	std	Z+3, r1	; 0x03
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	e7 53       	subi	r30, 0x37	; 55
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	10 82       	st	Z, r1
    1bfc:	11 82       	std	Z+1, r1	; 0x01
    1bfe:	12 82       	std	Z+2, r1	; 0x02
    1c00:	13 82       	std	Z+3, r1	; 0x03
    1c02:	fc 01       	movw	r30, r24
    1c04:	e3 53       	subi	r30, 0x33	; 51
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	10 82       	st	Z, r1
    1c0a:	11 82       	std	Z+1, r1	; 0x01
    1c0c:	12 82       	std	Z+2, r1	; 0x02
    1c0e:	13 82       	std	Z+3, r1	; 0x03
    1c10:	fc 01       	movw	r30, r24
    1c12:	ef 52       	subi	r30, 0x2F	; 47
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	10 82       	st	Z, r1
    1c18:	11 82       	std	Z+1, r1	; 0x01
    1c1a:	12 82       	std	Z+2, r1	; 0x02
    1c1c:	13 82       	std	Z+3, r1	; 0x03
			{
				EcefToLocalNEDRotationMatrix[0][0] = 0;
    1c1e:	fc 01       	movw	r30, r24
    1c20:	eb 52       	subi	r30, 0x2B	; 43
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	10 82       	st	Z, r1
    1c26:	11 82       	std	Z+1, r1	; 0x01
    1c28:	12 82       	std	Z+2, r1	; 0x02
    1c2a:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[0][1] = 0;
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	e7 52       	subi	r30, 0x27	; 39
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	10 82       	st	Z, r1
    1c34:	11 82       	std	Z+1, r1	; 0x01
    1c36:	12 82       	std	Z+2, r1	; 0x02
    1c38:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[0][2] = 0;
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e3 52       	subi	r30, 0x23	; 35
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	10 82       	st	Z, r1
    1c42:	11 82       	std	Z+1, r1	; 0x01
    1c44:	12 82       	std	Z+2, r1	; 0x02
    1c46:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[1][0] = 0;
    1c48:	fc 01       	movw	r30, r24
    1c4a:	ef 51       	subi	r30, 0x1F	; 31
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	10 82       	st	Z, r1
    1c50:	11 82       	std	Z+1, r1	; 0x01
    1c52:	12 82       	std	Z+2, r1	; 0x02
    1c54:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[1][1] = 0;
    1c56:	fc 01       	movw	r30, r24
    1c58:	eb 51       	subi	r30, 0x1B	; 27
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	10 82       	st	Z, r1
    1c5e:	11 82       	std	Z+1, r1	; 0x01
    1c60:	12 82       	std	Z+2, r1	; 0x02
    1c62:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[1][2] = 0;
    1c64:	fc 01       	movw	r30, r24
    1c66:	e7 51       	subi	r30, 0x17	; 23
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	10 82       	st	Z, r1
    1c6c:	11 82       	std	Z+1, r1	; 0x01
    1c6e:	12 82       	std	Z+2, r1	; 0x02
    1c70:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[2][0] = 0;
    1c72:	fc 01       	movw	r30, r24
    1c74:	e3 51       	subi	r30, 0x13	; 19
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	10 82       	st	Z, r1
    1c7a:	11 82       	std	Z+1, r1	; 0x01
    1c7c:	12 82       	std	Z+2, r1	; 0x02
    1c7e:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[2][1] = 0;
    1c80:	fc 01       	movw	r30, r24
    1c82:	ef 50       	subi	r30, 0x0F	; 15
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	10 82       	st	Z, r1
    1c88:	11 82       	std	Z+1, r1	; 0x01
    1c8a:	12 82       	std	Z+2, r1	; 0x02
    1c8c:	13 82       	std	Z+3, r1	; 0x03
				EcefToLocalNEDRotationMatrix[2][2] = 0;								
    1c8e:	fc 01       	movw	r30, r24
    1c90:	eb 50       	subi	r30, 0x0B	; 11
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	10 82       	st	Z, r1
    1c96:	11 82       	std	Z+1, r1	; 0x01
    1c98:	12 82       	std	Z+2, r1	; 0x02
    1c9a:	13 82       	std	Z+3, r1	; 0x03
	
	PIDController *pidController = new PIDController(model);
    1c9c:	8e e8       	ldi	r24, 0x8E	; 142
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1ca4:	2c 01       	movw	r4, r24
    1ca6:	b1 01       	movw	r22, r2
    1ca8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_ZN10helicopter10controller13PIDControllerC1EPNS_5model11SystemModelE>
	
	setupDefaultsandReferencePosition(model, pidController);
    1cac:	b2 01       	movw	r22, r4
    1cae:	c1 01       	movw	r24, r2
    1cb0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_Z33setupDefaultsandReferencePositionPN10helicopter5model11SystemModelEPNS_10controller13PIDControllerE>
	
	//Timer *timer = new Timer(F_CPU,PRESCALE_BY_TENTWENTYFOUR,75); //Good timeout when using the radio
	Timer *timer = new Timer(F_CPU, PRESCALE_BY_TENTWENTYFOUR, 100); //Good timeout when using the USB
    1cb4:	88 e0       	ldi	r24, 0x08	; 8
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1cbc:	7c 01       	movw	r14, r24
				 * timer times out. This value must be under 1000.
				 * These variables will have to adhere to this equation:
				 * OCR = ((cpuSpeed /  timerPrescaler) / frequency)
				 */
				Timer (unsigned long cpuSpeed, PRESCALER timerPrescaler, unsigned long timeoutMilliseconds):
					cpuSpeed(cpuSpeed), timerPrescaler(timerPrescaler), timeoutMilliseconds(timeoutMilliseconds)
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	94 e2       	ldi	r25, 0x24	; 36
    1cc2:	a4 ef       	ldi	r26, 0xF4	; 244
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	94 e0       	ldi	r25, 0x04	; 4
    1cd4:	95 83       	std	Z+5, r25	; 0x05
    1cd6:	84 83       	std	Z+4, r24	; 0x04
    1cd8:	84 e6       	ldi	r24, 0x64	; 100
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	97 83       	std	Z+7, r25	; 0x07
    1cde:	86 83       	std	Z+6, r24	; 0x06
	
	//Create a driver for communicating with the Ground Control Station (GCS).
	//SerialDriver *serialDriver = new SerialDriver(57600, SerialDriver::Zero, timer, true, true);  
	//SerialDriver *serialDriver = new SerialDriver(76800, SerialDriver::Zero, true);  
	SerialDriver *serialDriver = new SerialDriver(250000, SerialDriver::Zero, true, timer);  
    1ce0:	8a e0       	ldi	r24, 0x0A	; 10
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1ce8:	8c 01       	movw	r16, r24
					bool useDoubleSpeedMode = true,
					Timer *timer = NULL) :
				baudRate(baudRate),
				uartPort(uartPort),
				useDoubleSpeedMode(useDoubleSpeedMode),
				timer(timer)
    1cea:	8a e0       	ldi	r24, 0x0A	; 10
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	d8 01       	movw	r26, r16
    1cf0:	8d 93       	st	X+, r24
    1cf2:	9c 93       	st	X, r25
    1cf4:	80 e9       	ldi	r24, 0x90	; 144
    1cf6:	90 ed       	ldi	r25, 0xD0	; 208
    1cf8:	a3 e0       	ldi	r26, 0x03	; 3
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	82 83       	std	Z+2, r24	; 0x02
    1d00:	93 83       	std	Z+3, r25	; 0x03
    1d02:	a4 83       	std	Z+4, r26	; 0x04
    1d04:	b5 83       	std	Z+5, r27	; 0x05
    1d06:	16 82       	std	Z+6, r1	; 0x06
    1d08:	bb 24       	eor	r11, r11
    1d0a:	b3 94       	inc	r11
    1d0c:	b7 82       	std	Z+7, r11	; 0x07
    1d0e:	f1 86       	std	Z+9, r15	; 0x09
    1d10:	e0 86       	std	Z+8, r14	; 0x08
	serialDriver->initialize();
    1d12:	c8 01       	movw	r24, r16
    1d14:	0e 94 6f 0a 	call	0x14de	; 0x14de <_ZN10helicopter7drivers12SerialDriver10initializeEv>
	
	GroundControlStationInterface *gcsInterface = new GroundControlStationInterface(serialDriver);
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1d20:	6c 01       	movw	r12, r24
				 * as receiving a byte.
				 * @param serialDriver the driver used to communicate with the serial port
				 * which is used to communicate with the Ground Control Station.
				 */
				GroundControlStationInterface(SerialDriver *serialDriver):
					serialDriver(serialDriver)
    1d22:	dc 01       	movw	r26, r24
    1d24:	0d 93       	st	X+, r16
    1d26:	1c 93       	st	X, r17
	//This frequency works well for radio.
//	SimTelemetryTask *simTelemTask = new SimTelemetryTask(radioInterface, model, 0, 10);//starting at tick 1, execute 20 times a second
//	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(radioInterface, model, 1, 10);//starting at tick 2, execute 20 times a second

	//this frequency works well for USB.
	SimTelemetryTask *simTelemTask = new SimTelemetryTask(gcsInterface, model, pidController,0, 4);//starting at tick 0, execute 50 times a second
    1d28:	8d e0       	ldi	r24, 0x0D	; 13
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1d30:	9e 87       	std	Y+14, r25	; 0x0e
    1d32:	8d 87       	std	Y+13, r24	; 0x0d
    1d34:	68 94       	set
    1d36:	ee 24       	eor	r14, r14
    1d38:	e2 f8       	bld	r14, 2
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	00 e0       	ldi	r16, 0x00	; 0
    1d3e:	10 e0       	ldi	r17, 0x00	; 0
    1d40:	92 01       	movw	r18, r4
    1d42:	a1 01       	movw	r20, r2
    1d44:	b6 01       	movw	r22, r12
    1d46:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEPNS_10controller13PIDControllerEii>
	TransmitTelemetryTask *transTelemTask = new TransmitTelemetryTask(gcsInterface, model, 1, 4);//starting at tick 1, execute 50 times a second
    1d4a:	8b e0       	ldi	r24, 0x0B	; 11
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	8f 87       	std	Y+15, r24	; 0x0f
    1d56:	04 e0       	ldi	r16, 0x04	; 4
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	21 e0       	ldi	r18, 0x01	; 1
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	a1 01       	movw	r20, r2
    1d60:	b6 01       	movw	r22, r12
    1d62:	0e 94 49 26 	call	0x4c92	; 0x4c92 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>
	
	FlashLEDTask *flashTask = new FlashLEDTask(2, SCHEDULER_TICK_FREQUENCY_HZ);//starting at tick 2, execute once a second
    1d66:	8a e0       	ldi	r24, 0x0A	; 10
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1d6e:	4c 01       	movw	r8, r24
			public:

			FlashLEDTask (int delay, int period, int ledToBlink = BLUELED) : 
				Task(delay, period),
				isOff(false),
				ledToBlink(ledToBlink)
    1d70:	46 e4       	ldi	r20, 0x46	; 70
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	62 e0       	ldi	r22, 0x02	; 2
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN10helicopter5tasks4TaskC1Eii>
    1d7c:	80 e2       	ldi	r24, 0x20	; 32
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	f4 01       	movw	r30, r8
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24
    1d86:	17 82       	std	Z+7, r1	; 0x07
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	91 87       	std	Z+9, r25	; 0x09
    1d8e:	80 87       	std	Z+8, r24	; 0x08
		
		
	SensorProcessingTask *sensorProcessingTask = new SensorProcessingTask(model, 5, 4);
    1d90:	89 e0       	ldi	r24, 0x09	; 9
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1d98:	9c 8b       	std	Y+20, r25	; 0x14
    1d9a:	8b 8b       	std	Y+19, r24	; 0x13
    1d9c:	24 e0       	ldi	r18, 0x04	; 4
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	45 e0       	ldi	r20, 0x05	; 5
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	b1 01       	movw	r22, r2
    1da6:	0e 94 c0 23 	call	0x4780	; 0x4780 <_ZN10helicopter5tasks20SensorProcessingTaskC1EPNS_5model11SystemModelEii>
		
	//execute the pid outer loop at the PID_OUTER_LOOP_PERIOD rate. The division is to convert the period into ticks for the scheduler.
	PIDOuterLoopTask *pidOuterLoop = new PIDOuterLoopTask(pidController, 3, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    1daa:	89 e0       	ldi	r24, 0x09	; 9
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1db2:	9e 8b       	std	Y+22, r25	; 0x16
    1db4:	8d 8b       	std	Y+21, r24	; 0x15
    1db6:	23 e0       	ldi	r18, 0x03	; 3
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	43 e0       	ldi	r20, 0x03	; 3
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	b2 01       	movw	r22, r4
    1dc0:	0e 94 c7 22 	call	0x458e	; 0x458e <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>
	PIDInnerLoopTask *pidInnerLoop = new PIDInnerLoopTask(pidController, 4, (SCHEDULER_TICK_FREQUENCY_HZ / (1/PID_OUTER_LOOP_PERIOD)));
    1dc4:	89 e0       	ldi	r24, 0x09	; 9
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1dcc:	98 8f       	std	Y+24, r25	; 0x18
    1dce:	8f 8b       	std	Y+23, r24	; 0x17
    1dd0:	23 e0       	ldi	r18, 0x03	; 3
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	44 e0       	ldi	r20, 0x04	; 4
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	b2 01       	movw	r22, r4
    1dda:	0e 94 8e 22 	call	0x451c	; 0x451c <_ZN10helicopter5tasks16PIDInnerLoopTaskC1EPNS_10controller13PIDControllerEii>
	
	SPIDriver *spiDriver = new SPIDriver();
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1de6:	8c 01       	movw	r16, r24
				SLAVE_SELECT_LINE ssLine;
			
			public: 
			
				SPIDriver(SLAVE_SELECT_LINE ssLine = SS_B):
					ssLine(ssLine)
    1de8:	dc 01       	movw	r26, r24
    1dea:	bc 92       	st	X, r11
	spiDriver->init();
    1dec:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN10helicopter7drivers9SPIDriver4initEv>
	
	IMUSensor *imuSensor = new IMUSensor(spiDriver);
    1df0:	8a e4       	ldi	r24, 0x4A	; 74
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    1df8:	5c 01       	movw	r10, r24
					rawGyroX(0),
					rawGyroY(0),
					rawGyroZ(0),
					frdAccX(0),
					frdAccY(0),
					frdAccZ(0)
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	15 a3       	std	Z+37, r17	; 0x25
    1dfe:	04 a3       	std	Z+36, r16	; 0x24
    1e00:	17 a2       	std	Z+39, r1	; 0x27
    1e02:	16 a2       	std	Z+38, r1	; 0x26
    1e04:	11 a6       	std	Z+41, r1	; 0x29
    1e06:	10 a6       	std	Z+40, r1	; 0x28
    1e08:	13 a6       	std	Z+43, r1	; 0x2b
    1e0a:	12 a6       	std	Z+42, r1	; 0x2a
    1e0c:	15 a6       	std	Z+45, r1	; 0x2d
    1e0e:	14 a6       	std	Z+44, r1	; 0x2c
    1e10:	17 a6       	std	Z+47, r1	; 0x2f
    1e12:	16 a6       	std	Z+46, r1	; 0x2e
    1e14:	11 aa       	std	Z+49, r1	; 0x31
    1e16:	10 aa       	std	Z+48, r1	; 0x30
    1e18:	12 aa       	std	Z+50, r1	; 0x32
    1e1a:	13 aa       	std	Z+51, r1	; 0x33
    1e1c:	14 aa       	std	Z+52, r1	; 0x34
    1e1e:	15 aa       	std	Z+53, r1	; 0x35
    1e20:	16 aa       	std	Z+54, r1	; 0x36
    1e22:	17 aa       	std	Z+55, r1	; 0x37
    1e24:	10 ae       	std	Z+56, r1	; 0x38
    1e26:	11 ae       	std	Z+57, r1	; 0x39
    1e28:	12 ae       	std	Z+58, r1	; 0x3a
    1e2a:	13 ae       	std	Z+59, r1	; 0x3b
    1e2c:	14 ae       	std	Z+60, r1	; 0x3c
    1e2e:	15 ae       	std	Z+61, r1	; 0x3d
					/**
					 * Create a rotation matrix to rotate the accelerometer sensor data by
					 * 180 degrees on the x axis, then 0 degrees on the y axis, then 90 degrees 
					 * clockwise on the Z axis.
					 */
					memset(accelRFUToFRDRotationMatrix,0,sizeof(float)*9);
    1e30:	e8 2f       	mov	r30, r24
    1e32:	fb 2d       	mov	r31, r11
    1e34:	84 e2       	ldi	r24, 0x24	; 36
    1e36:	df 01       	movw	r26, r30
    1e38:	1d 92       	st	X+, r1
    1e3a:	8a 95       	dec	r24
    1e3c:	e9 f7       	brne	.-6      	; 0x1e38 <main+0x4e2>
					
					MatrixUtil::CreateRotationMatrix(M_PI, 0.0f, (M_PI/2), accelRFUToFRDRotationMatrix);
    1e3e:	ca 2c       	mov	r12, r10
    1e40:	db 2c       	mov	r13, r11
    1e42:	1b ed       	ldi	r17, 0xDB	; 219
    1e44:	e1 2e       	mov	r14, r17
    1e46:	1f e0       	ldi	r17, 0x0F	; 15
    1e48:	f1 2e       	mov	r15, r17
    1e4a:	09 ec       	ldi	r16, 0xC9	; 201
    1e4c:	1f e3       	ldi	r17, 0x3F	; 63
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	a9 01       	movw	r20, r18
    1e54:	6b ed       	ldi	r22, 0xDB	; 219
    1e56:	7f e0       	ldi	r23, 0x0F	; 15
    1e58:	89 e4       	ldi	r24, 0x49	; 73
    1e5a:	90 e4       	ldi	r25, 0x40	; 64
    1e5c:	0e 94 33 29 	call	0x5266	; 0x5266 <_ZN10helicopter4util10MatrixUtil20CreateRotationMatrixEfffPA3_f>
	imuSensor->init();
    1e60:	c5 01       	movw	r24, r10
    1e62:	0e 94 17 22 	call	0x442e	; 0x442e <_ZN10helicopter7sensors9IMUSensor4initEv>

	RadioControllerInterface *rcInterface = RadioControllerInterface::getRadioControllerInterface();
    1e66:	0e 94 8c 12 	call	0x2518	; 0x2518 <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv>
    1e6a:	9a 8b       	std	Y+18, r25	; 0x12
    1e6c:	89 8b       	std	Y+17, r24	; 0x11
					
				int ServoChannelIndex() const { return servoChannelIndex; }
				void ServoChannelIndex(int val) { servoChannelIndex = val; }
					
				SystemModel * GetSystemModel() const { return systemModel; }
				void SetSystemModel(SystemModel *val) { systemModel = val; }		
    1e6e:	fc 01       	movw	r30, r24
    1e70:	37 82       	std	Z+7, r3	; 0x07
    1e72:	26 82       	std	Z+6, r2	; 0x06
	
	rcInterface->SetSystemModel(model);


	Scheduler *scheduler = Scheduler::getScheduler();
    1e74:	0e 94 cb 20 	call	0x4196	; 0x4196 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    1e78:	3c 01       	movw	r6, r24
	
	scheduler->addTask(flashTask);
    1e7a:	b4 01       	movw	r22, r8
    1e7c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(simTelemTask);
    1e80:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e82:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e84:	c3 01       	movw	r24, r6
    1e86:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(transTelemTask);
    1e8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e8c:	78 89       	ldd	r23, Y+16	; 0x10
    1e8e:	c3 01       	movw	r24, r6
    1e90:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidOuterLoop);
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	c3 01       	movw	r24, r6
    1e9a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(pidInnerLoop);
    1e9e:	6f 89       	ldd	r22, Y+23	; 0x17
    1ea0:	78 8d       	ldd	r23, Y+24	; 0x18
    1ea2:	c3 01       	movw	r24, r6
    1ea4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>
	
	scheduler->addTask(sensorProcessingTask);
    1ea8:	6b 89       	ldd	r22, Y+19	; 0x13
    1eaa:	7c 89       	ldd	r23, Y+20	; 0x14
    1eac:	c3 01       	movw	r24, r6
    1eae:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>

			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
    1eb2:	c1 01       	movw	r24, r2
    1eb4:	83 55       	subi	r24, 0x53	; 83
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	98 8b       	std	Y+16, r25	; 0x10
    1eba:	8f 87       	std	Y+15, r24	; 0x0f
			void LatitudeDegrees(float val) { latitudeDegrees = val;}						

			float LongitudeDegrees() const {return longitudeDegrees;}
    1ebc:	81 01       	movw	r16, r2
    1ebe:	0f 54       	subi	r16, 0x4F	; 79
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
	//TODO rework this
	bool isInitialized = false;
	
	while (!isInitialized)
	{
		simTelemTask->runTaskImpl();
    1ec2:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ec4:	be 85       	ldd	r27, Y+14	; 0x0e
    1ec6:	ed 91       	ld	r30, X+
    1ec8:	fc 91       	ld	r31, X
    1eca:	11 97       	sbiw	r26, 0x01	; 1
    1ecc:	01 90       	ld	r0, Z+
    1ece:	f0 81       	ld	r31, Z
    1ed0:	e0 2d       	mov	r30, r0
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	19 95       	eicall

			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
    1ed6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ed8:	f8 89       	ldd	r31, Y+16	; 0x10
    1eda:	c0 80       	ld	r12, Z
    1edc:	d1 80       	ldd	r13, Z+1	; 0x01
    1ede:	e2 80       	ldd	r14, Z+2	; 0x02
    1ee0:	f3 80       	ldd	r15, Z+3	; 0x03
		
		if (model->LatitudeDegrees() != 0 && model->LongitudeDegrees() != 0)
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	c7 01       	movw	r24, r14
    1eea:	b6 01       	movw	r22, r12
    1eec:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	71 f0       	breq	.+28     	; 0x1f10 <main+0x5ba>
			void LatitudeDegrees(float val) { latitudeDegrees = val;}						

			float LongitudeDegrees() const {return longitudeDegrees;}
    1ef4:	d8 01       	movw	r26, r16
    1ef6:	8d 90       	ld	r8, X+
    1ef8:	9d 90       	ld	r9, X+
    1efa:	ad 90       	ld	r10, X+
    1efc:	bc 90       	ld	r11, X
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	a9 01       	movw	r20, r18
    1f04:	c5 01       	movw	r24, r10
    1f06:	b4 01       	movw	r22, r8
    1f08:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	16 c0       	rjmp	.+44     	; 0x1f3c <main+0x5e6>
    1f10:	bf ef       	ldi	r27, 0xFF	; 255
    1f12:	e1 ee       	ldi	r30, 0xE1	; 225
    1f14:	f4 e0       	ldi	r31, 0x04	; 4
    1f16:	b1 50       	subi	r27, 0x01	; 1
    1f18:	e0 40       	sbci	r30, 0x00	; 0
    1f1a:	f0 40       	sbci	r31, 0x00	; 0
    1f1c:	e1 f7       	brne	.-8      	; 0x1f16 <main+0x5c0>
    1f1e:	00 c0       	rjmp	.+0      	; 0x1f20 <main+0x5ca>
    1f20:	00 00       	nop
    1f22:	cf cf       	rjmp	.-98     	; 0x1ec2 <main+0x56c>
	
	while(1)
	{
		//Checks to see if any tasks are ready to run an executes them.
		//goes to sleep (until the next timer tick) after processing all available tasks.
		scheduler->dispatch();
    1f24:	c3 01       	movw	r24, r6
    1f26:	0e 94 4a 21 	call	0x4294	; 0x4294 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>
		
		/**
		 * Determine if the last processing frame was blown.
		 */
		if (scheduler->hasBlownFrame())
    1f2a:	d3 01       	movw	r26, r6
    1f2c:	5a 96       	adiw	r26, 0x1a	; 26
    1f2e:	8c 91       	ld	r24, X
    1f30:	88 23       	and	r24, r24
    1f32:	c1 f3       	breq	.-16     	; 0x1f24 <main+0x5ce>
		{
			pidController->addBlownFrame();
    1f34:	c2 01       	movw	r24, r4
    1f36:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN10helicopter10controller13PIDController13addBlownFrameEv>
    1f3a:	f4 cf       	rjmp	.-24     	; 0x1f24 <main+0x5ce>
		if (model->LatitudeDegrees() != 0 && model->LongitudeDegrees() != 0)
		{
			isInitialized = true;
			
			//ecefReferenceX, ecefReferenceY, ecefReferenceZ,ecefToLocalNEDRotationMatrix,
			CoordinateUtil::CalculateECEFToLocalNEDRotationMatrix(model->LatitudeDegrees(), model->LongitudeDegrees(), model->EcefToLocalNEDRotationMatrix);
    1f3c:	81 01       	movw	r16, r2
    1f3e:	0b 52       	subi	r16, 0x2B	; 43
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	a5 01       	movw	r20, r10
    1f44:	94 01       	movw	r18, r8
    1f46:	c7 01       	movw	r24, r14
    1f48:	b6 01       	movw	r22, r12
    1f4a:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_ZN10helicopter4util14CoordinateUtil37CalculateECEFToLocalNEDRotationMatrixEffPA3_f>
	
			float initialXPositionEcef = 0;
    1f4e:	19 86       	std	Y+9, r1	; 0x09
    1f50:	1a 86       	std	Y+10, r1	; 0x0a
    1f52:	1b 86       	std	Y+11, r1	; 0x0b
    1f54:	1c 86       	std	Y+12, r1	; 0x0c
			float initialYPositionEcef = 0;
    1f56:	1d 82       	std	Y+5, r1	; 0x05
    1f58:	1e 82       	std	Y+6, r1	; 0x06
    1f5a:	1f 82       	std	Y+7, r1	; 0x07
    1f5c:	18 86       	std	Y+8, r1	; 0x08
			float initialZPositionEcef = 0;
    1f5e:	19 82       	std	Y+1, r1	; 0x01
    1f60:	1a 82       	std	Y+2, r1	; 0x02
    1f62:	1b 82       	std	Y+3, r1	; 0x03
    1f64:	1c 82       	std	Y+4, r1	; 0x04
						
						
						
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
    1f66:	f1 01       	movw	r30, r2
    1f68:	eb 57       	subi	r30, 0x7B	; 123
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
			CoordinateUtil::ConvertFromGeodeticToECEF(model->LatitudeDegrees(), model->LongitudeDegrees(), model->AltitudeFeetAgl(), initialXPositionEcef, initialYPositionEcef, initialZPositionEcef);
    1f6c:	e0 80       	ld	r14, Z
    1f6e:	f1 80       	ldd	r15, Z+1	; 0x01
    1f70:	02 81       	ldd	r16, Z+2	; 0x02
    1f72:	13 81       	ldd	r17, Z+3	; 0x03
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
			void LatitudeDegrees(float val) { latitudeDegrees = val;}						

			float LongitudeDegrees() const {return longitudeDegrees;}
    1f74:	f1 01       	movw	r30, r2
    1f76:	ef 54       	subi	r30, 0x4F	; 79
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	20 81       	ld	r18, Z
    1f7c:	31 81       	ldd	r19, Z+1	; 0x01
    1f7e:	42 81       	ldd	r20, Z+2	; 0x02
    1f80:	53 81       	ldd	r21, Z+3	; 0x03

			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
    1f82:	f1 01       	movw	r30, r2
    1f84:	e3 55       	subi	r30, 0x53	; 83
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	88 24       	eor	r8, r8
    1f92:	83 94       	inc	r8
    1f94:	91 2c       	mov	r9, r1
    1f96:	8c 0e       	add	r8, r28
    1f98:	9d 1e       	adc	r9, r29
    1f9a:	0f 2e       	mov	r0, r31
    1f9c:	f5 e0       	ldi	r31, 0x05	; 5
    1f9e:	af 2e       	mov	r10, r31
    1fa0:	b1 2c       	mov	r11, r1
    1fa2:	f0 2d       	mov	r31, r0
    1fa4:	ac 0e       	add	r10, r28
    1fa6:	bd 1e       	adc	r11, r29
    1fa8:	0f 2e       	mov	r0, r31
    1faa:	f9 e0       	ldi	r31, 0x09	; 9
    1fac:	cf 2e       	mov	r12, r31
    1fae:	d1 2c       	mov	r13, r1
    1fb0:	f0 2d       	mov	r31, r0
    1fb2:	cc 0e       	add	r12, r28
    1fb4:	dd 1e       	adc	r13, r29
    1fb6:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <_ZN10helicopter4util14CoordinateUtil25ConvertFromGeodeticToECEFEfffRfS2_S2_>
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
			void SerialCommunicationBufferOverruns( long val ) { serialCommunicationBufferOverruns = val;}				

			long  InitialXPositionEcef() const {return initialXPositionEcef;}
			void InitialXPositionEcef( long val ) { initialXPositionEcef = val;}			
    1fba:	81 01       	movw	r16, r2
    1fbc:	07 53       	subi	r16, 0x37	; 55
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
			
			model->InitialXPositionEcef(initialXPositionEcef);
    1fc0:	69 85       	ldd	r22, Y+9	; 0x09
    1fc2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc8:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__fixsfsi>
    1fcc:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	60 83       	st	Z, r22
    1fd4:	71 83       	std	Z+1, r23	; 0x01
    1fd6:	82 83       	std	Z+2, r24	; 0x02
    1fd8:	93 83       	std	Z+3, r25	; 0x03

			long  InitialYPositionEcef() const {return initialYPositionEcef;}
			void InitialYPositionEcef( long val ) { initialYPositionEcef = val;}
    1fda:	81 01       	movw	r16, r2
    1fdc:	03 53       	subi	r16, 0x33	; 51
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
			model->InitialYPositionEcef(initialYPositionEcef);
    1fe0:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe2:	7e 81       	ldd	r23, Y+6	; 0x06
    1fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe6:	98 85       	ldd	r25, Y+8	; 0x08
    1fe8:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__fixsfsi>
    1fec:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
    1ff0:	d8 01       	movw	r26, r16
    1ff2:	6d 93       	st	X+, r22
    1ff4:	7d 93       	st	X+, r23
    1ff6:	8d 93       	st	X+, r24
    1ff8:	9c 93       	st	X, r25
    1ffa:	13 97       	sbiw	r26, 0x03	; 3

			long  InitialZPositionEcef() const {return initialZPositionEcef;}
			void InitialZPositionEcef( long val ) { initialZPositionEcef = val;}			
    1ffc:	81 01       	movw	r16, r2
    1ffe:	0f 52       	subi	r16, 0x2F	; 47
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
			model->InitialZPositionEcef(initialZPositionEcef);
    2002:	69 81       	ldd	r22, Y+1	; 0x01
    2004:	7a 81       	ldd	r23, Y+2	; 0x02
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__fixsfsi>
    200e:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
    2012:	f8 01       	movw	r30, r16
    2014:	60 83       	st	Z, r22
    2016:	71 83       	std	Z+1, r23	; 0x01
    2018:	82 83       	std	Z+2, r24	; 0x02
    201a:	93 83       	std	Z+3, r25	; 0x03
    201c:	ff ef       	ldi	r31, 0xFF	; 255
    201e:	21 ee       	ldi	r18, 0xE1	; 225
    2020:	84 e0       	ldi	r24, 0x04	; 4
    2022:	f1 50       	subi	r31, 0x01	; 1
    2024:	20 40       	sbci	r18, 0x00	; 0
    2026:	80 40       	sbci	r24, 0x00	; 0
    2028:	e1 f7       	brne	.-8      	; 0x2022 <main+0x6cc>
    202a:	00 c0       	rjmp	.+0      	; 0x202c <main+0x6d6>
    202c:	00 00       	nop
			/*
			float **  EcefToLocalNEDRotationMatrix() const {return ecefToLocalNEDRotationMatrix;}
			void EcefToLocalNEDRotationMatrix( long val ) { ecefToLocalNEDRotationMatrix = val;}*/
				
			OperatingState  OperationalState() const {return operationalState;}
			void OperationalState( OperatingState val ) { operationalState = val;}
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	d1 01       	movw	r26, r2
    2032:	8c 93       	st	X, r24
	
	
	//TODO set this to manual by default and have some sort of flag for what build we are making to know if it should be autopilot or not.
	model->OperationalState(SystemModel::AutoPilot);
	
	scheduler->init(); //Sets up the timer registers, inits all tasks,
    2034:	c3 01       	movw	r24, r6
    2036:	0e 94 0b 21 	call	0x4216	; 0x4216 <_ZN10helicopter9scheduler9Scheduler4initEv>
	
	scheduler->start();
    203a:	c3 01       	movw	r24, r6
    203c:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN10helicopter9scheduler9Scheduler5startEv>
	
	rcInterface->init();
    2040:	89 89       	ldd	r24, Y+17	; 0x11
    2042:	9a 89       	ldd	r25, Y+18	; 0x12
    2044:	0e 94 7f 13 	call	0x26fe	; 0x26fe <_ZN10helicopter10interfaces24RadioControllerInterface4initEv>
	
	rcInterface->start();
    2048:	89 89       	ldd	r24, Y+17	; 0x11
    204a:	9a 89       	ldd	r25, Y+18	; 0x12
    204c:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN10helicopter10interfaces24RadioControllerInterface5startEv>
    2050:	69 cf       	rjmp	.-302    	; 0x1f24 <main+0x5ce>

00002052 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>:

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	d9 01       	movw	r26, r18
    205c:	e8 01       	movw	r28, r16
	for (int i = 0; i < payloadSize; i++)
    205e:	14 16       	cp	r1, r20
    2060:	15 06       	cpc	r1, r21
    2062:	74 f4       	brge	.+28     	; 0x2080 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x2e>
    2064:	e6 2f       	mov	r30, r22
    2066:	f7 2f       	mov	r31, r23
#include "SystemTelemetryMessage.h"

using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
    2068:	4e 0f       	add	r20, r30
    206a:	5f 1f       	adc	r21, r31
{
	for (int i = 0; i < payloadSize; i++)
	{
		byte b = msgPayload[i];
    206c:	91 91       	ld	r25, Z+
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
    206e:	8c 91       	ld	r24, X
    2070:	89 0f       	add	r24, r25
    2072:	8c 93       	st	X, r24
		checksumB = (byte) (checksumB + checksumA);
    2074:	98 81       	ld	r25, Y
    2076:	89 0f       	add	r24, r25
    2078:	88 83       	st	Y, r24
using namespace helicopter::util;
using namespace helicopter::interfaces;

void GroundControlStationInterface::calculateChecksum (byte *msgPayload, int payloadSize, byte &checksumA, byte &checksumB)
{
	for (int i = 0; i < payloadSize; i++)
    207a:	e4 17       	cp	r30, r20
    207c:	f5 07       	cpc	r31, r21
    207e:	b1 f7       	brne	.-20     	; 0x206c <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_+0x1a>
		
		//These fields can overflow, but that is intentional.
		checksumA = (byte) (checksumA + b);
		checksumB = (byte) (checksumB + checksumA);
	}
}
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	08 95       	ret

0000208a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>:

int GroundControlStationInterface::transmit(Message *msgToSend)
{
    208a:	2f 92       	push	r2
    208c:	3f 92       	push	r3
    208e:	4f 92       	push	r4
    2090:	5f 92       	push	r5
    2092:	6f 92       	push	r6
    2094:	7f 92       	push	r7
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	af 92       	push	r10
    209c:	bf 92       	push	r11
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x26>
    20b0:	1f 92       	push	r1
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	7c 01       	movw	r14, r24
    20b8:	8b 01       	movw	r16, r22
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
}
    20ba:	4d b6       	in	r4, 0x3d	; 61
    20bc:	5e b6       	in	r5, 0x3e	; 62

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
	
	if (msgToSend != NULL)
    20be:	61 15       	cp	r22, r1
    20c0:	71 05       	cpc	r23, r1
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x3c>
    20c4:	73 c0       	rjmp	.+230    	; 0x21ac <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x122>
    20c6:	4b 82       	std	Y+3, r4	; 0x03
    20c8:	9e b7       	in	r25, 0x3e	; 62
    20ca:	9c 83       	std	Y+4, r25	; 0x04
	{
		byte *msgPayload = msgToSend->getBytes();
    20cc:	db 01       	movw	r26, r22
    20ce:	ed 91       	ld	r30, X+
    20d0:	fc 91       	ld	r31, X
    20d2:	04 80       	ldd	r0, Z+4	; 0x04
    20d4:	f5 81       	ldd	r31, Z+5	; 0x05
    20d6:	e0 2d       	mov	r30, r0
    20d8:	cb 01       	movw	r24, r22
    20da:	19 95       	eicall
    20dc:	5c 01       	movw	r10, r24
		
		int payloadSize = msgToSend->getMessageSize();
    20de:	c8 01       	movw	r24, r16
    20e0:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN10helicopter8messages7Message14getMessageSizeEv>
    20e4:	4c 01       	movw	r8, r24
		
		int completeMsgSize = payloadSize + MsgHeaderFooterSize;;
    20e6:	6c 01       	movw	r12, r24
    20e8:	b5 e0       	ldi	r27, 0x05	; 5
    20ea:	cb 0e       	add	r12, r27
    20ec:	d1 1c       	adc	r13, r1

		byte completeMsg[completeMsgSize];
    20ee:	1c 01       	movw	r2, r24
    20f0:	e4 e0       	ldi	r30, 0x04	; 4
    20f2:	2e 0e       	add	r2, r30
    20f4:	31 1c       	adc	r3, r1
    20f6:	8d b7       	in	r24, 0x3d	; 61
    20f8:	9e b7       	in	r25, 0x3e	; 62
    20fa:	8c 19       	sub	r24, r12
    20fc:	9d 09       	sbc	r25, r13
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	9e bf       	out	0x3e, r25	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	8d bf       	out	0x3d, r24	; 61
    2108:	6d b6       	in	r6, 0x3d	; 61
    210a:	7e b6       	in	r7, 0x3e	; 62
    210c:	a1 e0       	ldi	r26, 0x01	; 1
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	6a 0e       	add	r6, r26
    2112:	7b 1e       	adc	r7, r27
		
		completeMsg[0] = GroundControlStationInterface::SyncByte1;
    2114:	85 eb       	ldi	r24, 0xB5	; 181
    2116:	ed b7       	in	r30, 0x3d	; 61
    2118:	fe b7       	in	r31, 0x3e	; 62
    211a:	81 83       	std	Z+1, r24	; 0x01
		completeMsg[1] = GroundControlStationInterface::SyncByte2;
    211c:	82 e6       	ldi	r24, 0x62	; 98
    211e:	d3 01       	movw	r26, r6
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	8c 93       	st	X, r24
    2124:	11 97       	sbiw	r26, 0x01	; 1
		completeMsg[2] = GroundControlStationInterface::SyncByte3;
    2126:	87 ed       	ldi	r24, 0xD7	; 215
    2128:	12 96       	adiw	r26, 0x02	; 2
    212a:	8c 93       	st	X, r24
		
		memcpy(&completeMsg[3], msgPayload, payloadSize);
    212c:	2d b7       	in	r18, 0x3d	; 61
    212e:	3e b7       	in	r19, 0x3e	; 62
    2130:	2c 5f       	subi	r18, 0xFC	; 252
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	48 2d       	mov	r20, r8
    2136:	59 2d       	mov	r21, r9
    2138:	6a 2d       	mov	r22, r10
    213a:	7b 2d       	mov	r23, r11
    213c:	82 2f       	mov	r24, r18
    213e:	93 2f       	mov	r25, r19
    2140:	0e 94 1b 30 	call	0x6036	; 0x6036 <memcpy>
		
		byte checksumA = 0;
    2144:	1a 82       	std	Y+2, r1	; 0x02
		byte checksumB = 0;
    2146:	19 82       	std	Y+1, r1	; 0x01
		
		calculateChecksum(msgPayload, payloadSize, checksumA, checksumB);
    2148:	8e 01       	movw	r16, r28
    214a:	0f 5f       	subi	r16, 0xFF	; 255
    214c:	1f 4f       	sbci	r17, 0xFF	; 255
    214e:	9e 01       	movw	r18, r28
    2150:	2e 5f       	subi	r18, 0xFE	; 254
    2152:	3f 4f       	sbci	r19, 0xFF	; 255
    2154:	a4 01       	movw	r20, r8
    2156:	b5 01       	movw	r22, r10
    2158:	c7 01       	movw	r24, r14
    215a:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
		
		completeMsg[completeMsgSize - 2] = checksumA;
    215e:	f3 01       	movw	r30, r6
    2160:	e8 0d       	add	r30, r8
    2162:	f9 1d       	adc	r31, r9
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	83 83       	std	Z+3, r24	; 0x03
		completeMsg[completeMsgSize - 1] = checksumB;
    2168:	f3 01       	movw	r30, r6
    216a:	e2 0d       	add	r30, r2
    216c:	f3 1d       	adc	r31, r3
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	80 83       	st	Z, r24
		
		serialDriver->startTimer();
    2172:	f7 01       	movw	r30, r14
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN10helicopter7drivers12SerialDriver10startTimerEv>
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    217c:	00 e0       	ldi	r16, 0x00	; 0
    217e:	10 e0       	ldi	r17, 0x00	; 0
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
    2180:	81 2c       	mov	r8, r1
    2182:	91 2c       	mov	r9, r1
		completeMsg[completeMsgSize - 1] = checksumB;
		
		serialDriver->startTimer();
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    2184:	0c 15       	cp	r16, r12
    2186:	1d 05       	cpc	r17, r13
    2188:	a4 f4       	brge	.+40     	; 0x21b2 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x128>
    218a:	81 14       	cp	r8, r1
    218c:	91 04       	cpc	r9, r1
    218e:	d1 f0       	breq	.+52     	; 0x21c4 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x13a>
    2190:	10 c0       	rjmp	.+32     	; 0x21b2 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x128>
			status = serialDriver->transmit(completeMsg[i]);
		}
		
		serialDriver->stopTimer();
		
		delete [] msgPayload;
    2192:	c5 01       	movw	r24, r10
    2194:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <_ZdaPv>
    2198:	3b 81       	ldd	r19, Y+3	; 0x03
    219a:	2c 81       	ldd	r18, Y+4	; 0x04
    219c:	83 2f       	mov	r24, r19
    219e:	92 2f       	mov	r25, r18
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	9e bf       	out	0x3e, r25	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	8d bf       	out	0x3d, r24	; 61
    21aa:	1d c0       	rjmp	.+58     	; 0x21e6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x15c>
	}
}

int GroundControlStationInterface::transmit(Message *msgToSend)
{
	int status = 0;
    21ac:	81 2c       	mov	r8, r1
    21ae:	91 2c       	mov	r9, r1
    21b0:	1a c0       	rjmp	.+52     	; 0x21e6 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x15c>
		for (int i = 0; i < completeMsgSize && status == 0; i++)
		{
			status = serialDriver->transmit(completeMsg[i]);
		}
		
		serialDriver->stopTimer();
    21b2:	d7 01       	movw	r26, r14
    21b4:	8d 91       	ld	r24, X+
    21b6:	9c 91       	ld	r25, X
    21b8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN10helicopter7drivers12SerialDriver9stopTimerEv>
		
		delete [] msgPayload;
    21bc:	a1 14       	cp	r10, r1
    21be:	b1 04       	cpc	r11, r1
    21c0:	41 f7       	brne	.-48     	; 0x2192 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x108>
    21c2:	ea cf       	rjmp	.-44     	; 0x2198 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0x10e>
		serialDriver->startTimer();
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
		{
			status = serialDriver->transmit(completeMsg[i]);
    21c4:	f7 01       	movw	r30, r14
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	d3 01       	movw	r26, r6
    21cc:	6d 91       	ld	r22, X+
    21ce:	3d 01       	movw	r6, r26
    21d0:	dc 01       	movw	r26, r24
    21d2:	ed 91       	ld	r30, X+
    21d4:	fc 91       	ld	r31, X
    21d6:	06 80       	ldd	r0, Z+6	; 0x06
    21d8:	f7 81       	ldd	r31, Z+7	; 0x07
    21da:	e0 2d       	mov	r30, r0
    21dc:	19 95       	eicall
    21de:	4c 01       	movw	r8, r24
		completeMsg[completeMsgSize - 1] = checksumB;
		
		serialDriver->startTimer();
		
		//iterate over the bytes and transmit them, unless there was an error.
		for (int i = 0; i < completeMsgSize && status == 0; i++)
    21e0:	0f 5f       	subi	r16, 0xFF	; 255
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	cf cf       	rjmp	.-98     	; 0x2184 <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE+0xfa>
		
		delete [] msgPayload;
		msgPayload = NULL;
	}
	
	return status;
    21e6:	88 2d       	mov	r24, r8
    21e8:	99 2d       	mov	r25, r9
}
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	5e be       	out	0x3e, r5	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	4d be       	out	0x3d, r4	; 61
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	df 90       	pop	r13
    220a:	cf 90       	pop	r12
    220c:	bf 90       	pop	r11
    220e:	af 90       	pop	r10
    2210:	9f 90       	pop	r9
    2212:	8f 90       	pop	r8
    2214:	7f 90       	pop	r7
    2216:	6f 90       	pop	r6
    2218:	5f 90       	pop	r5
    221a:	4f 90       	pop	r4
    221c:	3f 90       	pop	r3
    221e:	2f 90       	pop	r2
    2220:	08 95       	ret

00002222 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>:
 * a lot of data is constantly received before that timeout, and none of the data
 * is a sync byte, then this method will never stop receiving bytes and will
 * lock up the rest of the system. So the helicopter would crash waiting for data.
 */
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
    2222:	2f 92       	push	r2
    2224:	3f 92       	push	r3
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	00 d0       	rcall	.+0      	; 0x2248 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x26>
    2248:	00 d0       	rcall	.+0      	; 0x224a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x28>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	6c 01       	movw	r12, r24
    2250:	4b 01       	movw	r8, r22
	}
	
	serialDriver->stopTimer();
	
	return status;
    2252:	ad b6       	in	r10, 0x3d	; 61
    2254:	be b6       	in	r11, 0x3e	; 62
{
	int status = 0;
	
    byte firstSyncByte = 0;
    byte secondSyncByte = 0;
    byte thirdSyncByte = 0;
    2256:	1e 82       	std	Y+6, r1	; 0x06
	
	/**
	 * Start the timer to prevent the system from waiting indefinitely
	 * while it receives data (thus causing the helicopter to crash)
	 */
	serialDriver->startTimer();
    2258:	dc 01       	movw	r26, r24
    225a:	8d 91       	ld	r24, X+
    225c:	9c 91       	ld	r25, X
    225e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN10helicopter7drivers12SerialDriver10startTimerEv>
int GroundControlStationInterface::receive(Message * &receivedMessage)
{
	int status = 0;
	
    byte firstSyncByte = 0;
    byte secondSyncByte = 0;
    2262:	00 e0       	ldi	r16, 0x00	; 0
    2264:	a9 c0       	rjmp	.+338    	; 0x23b8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x196>
	 */
	serialDriver->startTimer();

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    2266:	12 36       	cpi	r17, 0x62	; 98
    2268:	21 f4       	brne	.+8      	; 0x2272 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x50>
    226a:	8e 81       	ldd	r24, Y+6	; 0x06
    226c:	87 3d       	cpi	r24, 0xD7	; 215
    226e:	09 f4       	brne	.+2      	; 0x2272 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x50>
    2270:	b6 c0       	rjmp	.+364    	; 0x23de <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1bc>
    2272:	e1 14       	cp	r14, r1
    2274:	f1 04       	cpc	r15, r1
    2276:	09 f0       	breq	.+2      	; 0x227a <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x58>
    2278:	9a c0       	rjmp	.+308    	; 0x23ae <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x18c>
    227a:	9d c0       	rjmp	.+314    	; 0x23b6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x194>
	}
	
	if (status == 0)
	{
		//once we have found a valid message, get the message ID
		byte msgType = 0;
    227c:	1d 82       	std	Y+5, r1	; 0x05
		
		status = serialDriver->receive(msgType);
    227e:	f6 01       	movw	r30, r12
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	dc 01       	movw	r26, r24
    2286:	ed 91       	ld	r30, X+
    2288:	fc 91       	ld	r31, X
    228a:	00 88       	ldd	r0, Z+16	; 0x10
    228c:	f1 89       	ldd	r31, Z+17	; 0x11
    228e:	e0 2d       	mov	r30, r0
    2290:	be 01       	movw	r22, r28
    2292:	6b 5f       	subi	r22, 0xFB	; 251
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	19 95       	eicall
    2298:	7c 01       	movw	r14, r24
		
		if (status == 0)
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	09 f0       	breq	.+2      	; 0x22a0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x7e>
    229e:	87 c0       	rjmp	.+270    	; 0x23ae <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x18c>
		{
			int msgSize = 0;
			
			switch(msgType)
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	82 30       	cpi	r24, 0x02	; 2
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x86>
    22a6:	7a c0       	rjmp	.+244    	; 0x239c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x17a>
    22a8:	2d b6       	in	r2, 0x3d	; 61
    22aa:	3e b6       	in	r3, 0x3e	; 62
					break;
			}
			
			if (status == 0)
			{
				byte messagePayload[msgSize];
    22ac:	ed b7       	in	r30, 0x3d	; 61
    22ae:	fe b7       	in	r31, 0x3e	; 62
    22b0:	e9 5e       	subi	r30, 0xE9	; 233
    22b2:	f1 09       	sbc	r31, r1
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	fe bf       	out	0x3e, r31	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	ed bf       	out	0x3d, r30	; 61
    22be:	4d b6       	in	r4, 0x3d	; 61
    22c0:	5e b6       	in	r5, 0x3e	; 62
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	48 0e       	add	r4, r24
    22c8:	59 1e       	adc	r5, r25
    22ca:	32 01       	movw	r6, r4
							
				messagePayload[0] = msgType;
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	81 83       	std	Z+1, r24	; 0x01
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    22d0:	01 e0       	ldi	r16, 0x01	; 1
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	09 3e       	cpi	r16, 0xE9	; 233
    22d6:	11 05       	cpc	r17, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xba>
    22da:	86 c0       	rjmp	.+268    	; 0x23e8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1c6>
    22dc:	e1 14       	cp	r14, r1
    22de:	f1 04       	cpc	r15, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xc2>
    22e2:	86 c0       	rjmp	.+268    	; 0x23f0 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ce>
    22e4:	53 c0       	rjmp	.+166    	; 0x238c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x16a>
				}
							
				if (status == 0)
				{
					//Read the two checksum bytes
					byte messageChecksumA = 0;
    22e6:	1c 82       	std	Y+4, r1	; 0x04
					byte messageChecksumB = 0;
    22e8:	1b 82       	std	Y+3, r1	; 0x03
					byte calculatedChecksumA = 0;
    22ea:	1a 82       	std	Y+2, r1	; 0x02
					byte calculatedChecksumB = 0;
    22ec:	19 82       	std	Y+1, r1	; 0x01
								
					status = serialDriver->receive(messageChecksumA);
    22ee:	d6 01       	movw	r26, r12
    22f0:	8d 91       	ld	r24, X+
    22f2:	9c 91       	ld	r25, X
    22f4:	dc 01       	movw	r26, r24
    22f6:	ed 91       	ld	r30, X+
    22f8:	fc 91       	ld	r31, X
    22fa:	00 88       	ldd	r0, Z+16	; 0x10
    22fc:	f1 89       	ldd	r31, Z+17	; 0x11
    22fe:	e0 2d       	mov	r30, r0
    2300:	be 01       	movw	r22, r28
    2302:	6c 5f       	subi	r22, 0xFC	; 252
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	19 95       	eicall
					status = serialDriver->receive(messageChecksumB);
    2308:	f6 01       	movw	r30, r12
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	dc 01       	movw	r26, r24
    2310:	ed 91       	ld	r30, X+
    2312:	fc 91       	ld	r31, X
    2314:	00 88       	ldd	r0, Z+16	; 0x10
    2316:	f1 89       	ldd	r31, Z+17	; 0x11
    2318:	e0 2d       	mov	r30, r0
    231a:	be 01       	movw	r22, r28
    231c:	6d 5f       	subi	r22, 0xFD	; 253
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	19 95       	eicall
    2322:	7c 01       	movw	r14, r24
								
					//Generate checksum for the message			
					calculateChecksum(messagePayload, msgSize, calculatedChecksumA, calculatedChecksumB);
    2324:	8e 01       	movw	r16, r28
    2326:	0f 5f       	subi	r16, 0xFF	; 255
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	9e 01       	movw	r18, r28
    232c:	2e 5f       	subi	r18, 0xFE	; 254
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	49 ee       	ldi	r20, 0xE9	; 233
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	64 2d       	mov	r22, r4
    2336:	75 2d       	mov	r23, r5
    2338:	c6 01       	movw	r24, r12
    233a:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN10helicopter10interfaces29GroundControlStationInterface17calculateChecksumEPhiRhS3_>
								
					//verify that the checksum is correct
					if (calculatedChecksumA == messageChecksumA && calculatedChecksumB == messageChecksumB)
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	98 13       	cpse	r25, r24
    2344:	0f c0       	rjmp	.+30     	; 0x2364 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x142>
    2346:	99 81       	ldd	r25, Y+1	; 0x01
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	98 13       	cpse	r25, r24
    234c:	12 c0       	rjmp	.+36     	; 0x2372 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x150>
					{
						//build the message
						switch(msgType)
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	b1 f4       	brne	.+44     	; 0x2380 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x15e>
						{
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
    2354:	84 2d       	mov	r24, r4
    2356:	95 2d       	mov	r25, r5
    2358:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>
    235c:	f4 01       	movw	r30, r8
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
							break;
    2362:	14 c0       	rjmp	.+40     	; 0x238c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x16a>
							break;
						}
					}else
					{
						//checksum mismatch
						status = -4;
    2364:	0f 2e       	mov	r0, r31
    2366:	fc ef       	ldi	r31, 0xFC	; 252
    2368:	ef 2e       	mov	r14, r31
    236a:	ff 24       	eor	r15, r15
    236c:	fa 94       	dec	r15
    236e:	f0 2d       	mov	r31, r0
    2370:	0d c0       	rjmp	.+26     	; 0x238c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x16a>
    2372:	0f 2e       	mov	r0, r31
    2374:	fc ef       	ldi	r31, 0xFC	; 252
    2376:	ef 2e       	mov	r14, r31
    2378:	ff 24       	eor	r15, r15
    237a:	fa 94       	dec	r15
    237c:	f0 2d       	mov	r31, r0
    237e:	06 c0       	rjmp	.+12     	; 0x238c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x16a>
							case SystemTelemetryMessage::MessageType:
								receivedMessage = SystemTelemetryMessage::buildMessageSt(messagePayload);
							break;
							default:
								//unrecognized message type.
								status = -3;
    2380:	0f 2e       	mov	r0, r31
    2382:	fd ef       	ldi	r31, 0xFD	; 253
    2384:	ef 2e       	mov	r14, r31
    2386:	ff 24       	eor	r15, r15
    2388:	fa 94       	dec	r15
    238a:	f0 2d       	mov	r31, r0
    238c:	82 2d       	mov	r24, r2
    238e:	93 2d       	mov	r25, r3
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	9e bf       	out	0x3e, r25	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	8d bf       	out	0x3d, r24	; 61
    239a:	06 c0       	rjmp	.+12     	; 0x23a8 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x186>
				case SystemTelemetryMessage::MessageType:
					msgSize = SystemTelemetryMessage::MessageSize;
					break;
				default:
					//unrecognized message type.
					status = -3;
    239c:	0f 2e       	mov	r0, r31
    239e:	fd ef       	ldi	r31, 0xFD	; 253
    23a0:	ef 2e       	mov	r14, r31
    23a2:	ff 24       	eor	r15, r15
    23a4:	fa 94       	dec	r15
    23a6:	f0 2d       	mov	r31, r0
				}
			}
		}
	}
	
	if (status != 0)
    23a8:	e1 14       	cp	r14, r1
    23aa:	f1 04       	cpc	r15, r1
    23ac:	91 f1       	breq	.+100    	; 0x2412 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1f0>
	{
		receivedMessage = NULL;
    23ae:	d4 01       	movw	r26, r8
    23b0:	1d 92       	st	X+, r1
    23b2:	1c 92       	st	X, r1
    23b4:	2e c0       	rjmp	.+92     	; 0x2412 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1f0>
	 */
	serialDriver->startTimer();

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    23b6:	01 2f       	mov	r16, r17
	{
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
    23b8:	1e 81       	ldd	r17, Y+6	; 0x06
		status = serialDriver->receive(thirdSyncByte);
    23ba:	d6 01       	movw	r26, r12
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	dc 01       	movw	r26, r24
    23c2:	ed 91       	ld	r30, X+
    23c4:	fc 91       	ld	r31, X
    23c6:	00 88       	ldd	r0, Z+16	; 0x10
    23c8:	f1 89       	ldd	r31, Z+17	; 0x11
    23ca:	e0 2d       	mov	r30, r0
    23cc:	be 01       	movw	r22, r28
    23ce:	6a 5f       	subi	r22, 0xFA	; 250
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	19 95       	eicall
    23d4:	7c 01       	movw	r14, r24
	 */
	serialDriver->startTimer();

	//Read until the sync bytes are received or we time out.
	//Throw away any 'garbage' bytes.
	while(!(firstSyncByte == SyncByte1 && secondSyncByte == SyncByte2 && thirdSyncByte == SyncByte3) && status == 0)
    23d6:	05 3b       	cpi	r16, 0xB5	; 181
    23d8:	09 f0       	breq	.+2      	; 0x23dc <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1ba>
    23da:	4b cf       	rjmp	.-362    	; 0x2272 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x50>
    23dc:	44 cf       	rjmp	.-376    	; 0x2266 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x44>
		firstSyncByte = secondSyncByte;
		secondSyncByte = thirdSyncByte;
		status = serialDriver->receive(thirdSyncByte);
	}
	
	if (status == 0)
    23de:	e1 14       	cp	r14, r1
    23e0:	f1 04       	cpc	r15, r1
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x1c4>
    23e4:	4b cf       	rjmp	.-362    	; 0x227c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x5a>
    23e6:	e3 cf       	rjmp	.-58     	; 0x23ae <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x18c>
				for (int i = 1; i < msgSize && status == 0; i++)
				{
					status = serialDriver->receive(messagePayload[i]);
				}
							
				if (status == 0)
    23e8:	e1 14       	cp	r14, r1
    23ea:	f1 04       	cpc	r15, r1
    23ec:	79 f6       	brne	.-98     	; 0x238c <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0x16a>
    23ee:	7b cf       	rjmp	.-266    	; 0x22e6 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xc4>
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
				{
					status = serialDriver->receive(messagePayload[i]);
    23f0:	f6 01       	movw	r30, r12
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	dc 01       	movw	r26, r24
    23f8:	ed 91       	ld	r30, X+
    23fa:	fc 91       	ld	r31, X
    23fc:	b3 01       	movw	r22, r6
    23fe:	60 0f       	add	r22, r16
    2400:	71 1f       	adc	r23, r17
    2402:	00 88       	ldd	r0, Z+16	; 0x10
    2404:	f1 89       	ldd	r31, Z+17	; 0x11
    2406:	e0 2d       	mov	r30, r0
    2408:	19 95       	eicall
    240a:	7c 01       	movw	r14, r24
							
				messagePayload[0] = msgType;
							
				//Read the bytes in the payload of the message.
				//skip the first position since thats where the message type is located.
				for (int i = 1; i < msgSize && status == 0; i++)
    240c:	0f 5f       	subi	r16, 0xFF	; 255
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	61 cf       	rjmp	.-318    	; 0x22d4 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE+0xb2>
	if (status != 0)
	{
		receivedMessage = NULL;
	}
	
	serialDriver->stopTimer();
    2412:	f6 01       	movw	r30, r12
    2414:	80 81       	ld	r24, Z
    2416:	91 81       	ldd	r25, Z+1	; 0x01
    2418:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN10helicopter7drivers12SerialDriver9stopTimerEv>
	
	return status;
    241c:	8e 2d       	mov	r24, r14
    241e:	9f 2d       	mov	r25, r15
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	be be       	out	0x3e, r11	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	ad be       	out	0x3d, r10	; 61
    242a:	26 96       	adiw	r28, 0x06	; 6
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	9f 90       	pop	r9
    244c:	8f 90       	pop	r8
    244e:	7f 90       	pop	r7
    2450:	6f 90       	pop	r6
    2452:	5f 90       	pop	r5
    2454:	4f 90       	pop	r4
    2456:	3f 90       	pop	r3
    2458:	2f 90       	pop	r2
    245a:	08 95       	ret

0000245c <_Z10ScaleValuei>:

RadioControllerInterface* RadioControllerInterface::radioControllerInterface = NULL;


float ScaleValue(int servoChannelPulseWidth) 
{
    245c:	cf 92       	push	r12
    245e:	df 92       	push	r13
    2460:	ef 92       	push	r14
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
	float scaledValue = (1.0f - -1.0f) / (4000.0f - 2000.0f) * (servoChannelPulseWidth - 2000.0f) + -1.0f;
    246c:	bc 01       	movw	r22, r24
    246e:	88 27       	eor	r24, r24
    2470:	77 fd       	sbrc	r23, 7
    2472:	80 95       	com	r24
    2474:	98 2f       	mov	r25, r24
    2476:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a ef       	ldi	r20, 0xFA	; 250
    2480:	54 e4       	ldi	r21, 0x44	; 68
    2482:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
    2486:	2f e6       	ldi	r18, 0x6F	; 111
    2488:	32 e1       	ldi	r19, 0x12	; 18
    248a:	43 e8       	ldi	r20, 0x83	; 131
    248c:	5a e3       	ldi	r21, 0x3A	; 58
    248e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
    249e:	06 2f       	mov	r16, r22
    24a0:	17 2f       	mov	r17, r23
    24a2:	d8 2f       	mov	r29, r24
    24a4:	c9 2f       	mov	r28, r25
    24a6:	c6 2e       	mov	r12, r22
    24a8:	d7 2e       	mov	r13, r23
    24aa:	e8 2e       	mov	r14, r24
    24ac:	f9 2e       	mov	r15, r25
			
	if (scaledValue > 1.0f)
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	6c f0       	brlt	.+26     	; 0x24d8 <_Z10ScaleValuei+0x7c>
	{
		scaledValue = 1.0f;
	}else if (scaledValue < -1.0f)
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f eb       	ldi	r21, 0xBF	; 191
    24c6:	60 2f       	mov	r22, r16
    24c8:	71 2f       	mov	r23, r17
    24ca:	8d 2f       	mov	r24, r29
    24cc:	9c 2f       	mov	r25, r28
    24ce:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	a4 f4       	brge	.+40     	; 0x24fe <_Z10ScaleValuei+0xa2>
    24d6:	0a c0       	rjmp	.+20     	; 0x24ec <_Z10ScaleValuei+0x90>
{
	float scaledValue = (1.0f - -1.0f) / (4000.0f - 2000.0f) * (servoChannelPulseWidth - 2000.0f) + -1.0f;
			
	if (scaledValue > 1.0f)
	{
		scaledValue = 1.0f;
    24d8:	c1 2c       	mov	r12, r1
    24da:	d1 2c       	mov	r13, r1
    24dc:	68 94       	set
    24de:	ee 24       	eor	r14, r14
    24e0:	e7 f8       	bld	r14, 7
    24e2:	0f 2e       	mov	r0, r31
    24e4:	ff e3       	ldi	r31, 0x3F	; 63
    24e6:	ff 2e       	mov	r15, r31
    24e8:	f0 2d       	mov	r31, r0
    24ea:	09 c0       	rjmp	.+18     	; 0x24fe <_Z10ScaleValuei+0xa2>
	}else if (scaledValue < -1.0f)
	{
		scaledValue = -1.0f;
    24ec:	c1 2c       	mov	r12, r1
    24ee:	d1 2c       	mov	r13, r1
    24f0:	68 94       	set
    24f2:	ee 24       	eor	r14, r14
    24f4:	e7 f8       	bld	r14, 7
    24f6:	0f 2e       	mov	r0, r31
    24f8:	ff eb       	ldi	r31, 0xBF	; 191
    24fa:	ff 2e       	mov	r15, r31
    24fc:	f0 2d       	mov	r31, r0
	}
	
	return scaledValue;
}
    24fe:	6c 2d       	mov	r22, r12
    2500:	7d 2d       	mov	r23, r13
    2502:	8e 2d       	mov	r24, r14
    2504:	9f 2d       	mov	r25, r15
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	08 95       	ret

00002518 <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv>:
}



RadioControllerInterface* RadioControllerInterface::getRadioControllerInterface()
{
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
	if (radioControllerInterface == NULL)
    251c:	80 91 a2 02 	lds	r24, 0x02A2
    2520:	90 91 a3 02 	lds	r25, 0x02A3
    2524:	89 2b       	or	r24, r25
    2526:	c9 f4       	brne	.+50     	; 0x255a <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv+0x42>
	{
		radioControllerInterface = new RadioControllerInterface();
    2528:	88 e2       	ldi	r24, 0x28	; 40
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    2530:	fc 01       	movw	r30, r24
				float servoChannelValues[MAX_CHANNELS];

				static RadioControllerInterface *radioControllerInterface;
			
				RadioControllerInterface():
				systemModel (NULL)
    2532:	17 82       	std	Z+7, r1	; 0x07
    2534:	16 82       	std	Z+6, r1	; 0x06
				{
					memset(servoChannelValues, 0, sizeof(servoChannelValues));
    2536:	08 96       	adiw	r24, 0x08	; 8
    2538:	a8 2f       	mov	r26, r24
    253a:	b9 2f       	mov	r27, r25
    253c:	80 e2       	ldi	r24, 0x20	; 32
    253e:	ed 01       	movw	r28, r26
    2540:	19 92       	st	Y+, r1
    2542:	8a 95       	dec	r24
    2544:	e9 f7       	brne	.-6      	; 0x2540 <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv+0x28>
					
					previousInputCaptureRegisterValue = 0;
    2546:	10 82       	st	Z, r1
    2548:	11 82       	std	Z+1, r1	; 0x01
    254a:	12 82       	std	Z+2, r1	; 0x02
    254c:	13 82       	std	Z+3, r1	; 0x03
					
					servoChannelIndex = 0;
    254e:	15 82       	std	Z+5, r1	; 0x05
    2550:	14 82       	std	Z+4, r1	; 0x04
    2552:	f0 93 a3 02 	sts	0x02A3, r31
    2556:	e0 93 a2 02 	sts	0x02A2, r30
	}

	return radioControllerInterface;
}
    255a:	80 91 a2 02 	lds	r24, 0x02A2
    255e:	90 91 a3 02 	lds	r25, 0x02A3
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <__vector_46>:
/**
 * Interrupt service routine which is called when a PPM signal's rising edge is detected
 * on the PL1 pin.
 */
ISR(TIMER5_CAPT_vect)
{
    2568:	1f 92       	push	r1
    256a:	0f 92       	push	r0
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	0f 92       	push	r0
    2570:	11 24       	eor	r1, r1
    2572:	0b b6       	in	r0, 0x3b	; 59
    2574:	0f 92       	push	r0
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	2f 93       	push	r18
    2580:	3f 93       	push	r19
    2582:	4f 93       	push	r20
    2584:	5f 93       	push	r21
    2586:	6f 93       	push	r22
    2588:	7f 93       	push	r23
    258a:	8f 93       	push	r24
    258c:	9f 93       	push	r25
    258e:	af 93       	push	r26
    2590:	bf 93       	push	r27
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	ef 93       	push	r30
    2598:	ff 93       	push	r31
	RadioControllerInterface *rcInterface = RadioControllerInterface::getRadioControllerInterface();
    259a:	0e 94 8c 12 	call	0x2518	; 0x2518 <_ZN10helicopter10interfaces24RadioControllerInterface27getRadioControllerInterfaceEv>
    259e:	ec 01       	movw	r28, r24
	
	//Disable interrupts while reading a 16 bit register to avoid
	//an interrupt happening inbetween reading the two bytes. 
	cli(); 
    25a0:	f8 94       	cli
	
	//The Input Capture Register is set to the value of the timer when the
	//input signal was received.
	long currentInputCaptureRegisterValue = ICR5;
    25a2:	40 91 26 01 	lds	r20, 0x0126
    25a6:	50 91 27 01 	lds	r21, 0x0127
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
	
	sei();
    25ae:	78 94       	sei
				 * the scope of this class, so the handlers need a static reference to
				 * this class.
				 */
				static RadioControllerInterface  *getRadioControllerInterface();
				
				long PreviousInputCaptureRegisterValue() const { return previousInputCaptureRegisterValue; }
    25b0:	08 81       	ld	r16, Y
    25b2:	19 81       	ldd	r17, Y+1	; 0x01
    25b4:	2a 81       	ldd	r18, Y+2	; 0x02
    25b6:	3b 81       	ldd	r19, Y+3	; 0x03
	
	long previousInputCaptureRegisterValue = rcInterface->PreviousInputCaptureRegisterValue();
	
	//If the current value was less, then the timer has overflowed since the last
	//time we received a pulse
	if (currentInputCaptureRegisterValue < previousInputCaptureRegisterValue)
    25b8:	40 17       	cp	r20, r16
    25ba:	51 07       	cpc	r21, r17
    25bc:	62 07       	cpc	r22, r18
    25be:	73 07       	cpc	r23, r19
    25c0:	5c f4       	brge	.+22     	; 0x25d8 <__vector_46+0x70>
	{
		servoChannelPulseWidth = (currentInputCaptureRegisterValue + RadioControllerInterface::MAX_PPM_TIMER_VALUE) - previousInputCaptureRegisterValue;
    25c2:	db 01       	movw	r26, r22
    25c4:	ca 01       	movw	r24, r20
    25c6:	80 5c       	subi	r24, 0xC0	; 192
    25c8:	93 46       	sbci	r25, 0x63	; 99
    25ca:	af 4f       	sbci	r26, 0xFF	; 255
    25cc:	bf 4f       	sbci	r27, 0xFF	; 255
    25ce:	80 1b       	sub	r24, r16
    25d0:	91 0b       	sbc	r25, r17
    25d2:	a2 0b       	sbc	r26, r18
    25d4:	b3 0b       	sbc	r27, r19
    25d6:	06 c0       	rjmp	.+12     	; 0x25e4 <__vector_46+0x7c>
	}else
	{
		//Calculate the width of the pulse.
		servoChannelPulseWidth = currentInputCaptureRegisterValue - previousInputCaptureRegisterValue;
    25d8:	db 01       	movw	r26, r22
    25da:	ca 01       	movw	r24, r20
    25dc:	80 1b       	sub	r24, r16
    25de:	91 0b       	sbc	r25, r17
    25e0:	a2 0b       	sbc	r26, r18
    25e2:	b3 0b       	sbc	r27, r19
				void PreviousInputCaptureRegisterValue(long val) { previousInputCaptureRegisterValue = val; }
    25e4:	48 83       	st	Y, r20
    25e6:	59 83       	std	Y+1, r21	; 0x01
    25e8:	6a 83       	std	Y+2, r22	; 0x02
    25ea:	7b 83       	std	Y+3, r23	; 0x03
	rcInterface->PreviousInputCaptureRegisterValue(currentInputCaptureRegisterValue);
	
	//Once all the servo channels values have been sent, a sync pulse is sent indicating
	//a restart back to the first channel.
	//Detect if it's a sync pulse and rest as appropriate
	if (servoChannelPulseWidth > RadioControllerInterface::SYNCH_PULSE_WIDTH)
    25ec:	81 34       	cpi	r24, 0x41	; 65
    25ee:	2f e1       	ldi	r18, 0x1F	; 31
    25f0:	92 07       	cpc	r25, r18
    25f2:	a1 05       	cpc	r26, r1
    25f4:	b1 05       	cpc	r27, r1
    25f6:	1c f0       	brlt	.+6      	; 0x25fe <__vector_46+0x96>
					
				int ServoChannelIndex() const { return servoChannelIndex; }
				void ServoChannelIndex(int val) { servoChannelIndex = val; }
    25f8:	1d 82       	std	Y+5, r1	; 0x05
    25fa:	1c 82       	std	Y+4, r1	; 0x04
    25fc:	67 c0       	rjmp	.+206    	; 0x26cc <__vector_46+0x164>
	{
		rcInterface->ServoChannelIndex(0);
	}else
	{
		if (servoChannelPulseWidth < RadioControllerInterface::MAX_USEABLE_PULSE_WIDTH && 
    25fe:	ac 01       	movw	r20, r24
    2600:	bd 01       	movw	r22, r26
    2602:	47 5c       	subi	r20, 0xC7	; 199
    2604:	57 40       	sbci	r21, 0x07	; 7
    2606:	61 09       	sbc	r22, r1
    2608:	71 09       	sbc	r23, r1
    260a:	43 3e       	cpi	r20, 0xE3	; 227
    260c:	57 40       	sbci	r21, 0x07	; 7
    260e:	61 05       	cpc	r22, r1
    2610:	71 05       	cpc	r23, r1
    2612:	08 f0       	brcs	.+2      	; 0x2616 <__vector_46+0xae>
    2614:	56 c0       	rjmp	.+172    	; 0x26c2 <__vector_46+0x15a>
				static RadioControllerInterface  *getRadioControllerInterface();
				
				long PreviousInputCaptureRegisterValue() const { return previousInputCaptureRegisterValue; }
				void PreviousInputCaptureRegisterValue(long val) { previousInputCaptureRegisterValue = val; }
					
				int ServoChannelIndex() const { return servoChannelIndex; }
    2616:	0c 81       	ldd	r16, Y+4	; 0x04
    2618:	1d 81       	ldd	r17, Y+5	; 0x05
			servoChannelPulseWidth > RadioControllerInterface::MIN_USEABLE_PULSE_WIDTH)
		{
			int servoChannelIndex = rcInterface->ServoChannelIndex();
		
			if (servoChannelIndex < RadioControllerInterface::MAX_CHANNELS)
    261a:	08 30       	cpi	r16, 0x08	; 8
    261c:	11 05       	cpc	r17, r1
    261e:	0c f0       	brlt	.+2      	; 0x2622 <__vector_46+0xba>
    2620:	50 c0       	rjmp	.+160    	; 0x26c2 <__vector_46+0x15a>
				void ServoChannelIndex(int val) { servoChannelIndex = val; }
					
				SystemModel * GetSystemModel() const { return systemModel; }
    2622:	ee 80       	ldd	r14, Y+6	; 0x06
    2624:	ff 80       	ldd	r15, Y+7	; 0x07
				
				//Scale the servo channel pulse widths to between
				//-1, and 1 which is what the system uses for servo control.
				//-1 is 1.0 milliseconds, and 1 is 2.0 milliseconds (0 is 1.5 milliseconds)
				//new_v = (new_max - new_min) / (old_max - old_min) * (v - old_min) + new_min
				float servoControlValue = ScaleValue(servoChannelPulseWidth);
    2626:	0e 94 2e 12 	call	0x245c	; 0x245c <_Z10ScaleValuei>
					
				void SetServoChannelValue(int index, float value) 
				{ 
					if (index < MAX_CHANNELS)
					{
						servoChannelValues[index] = value;
    262a:	f8 01       	movw	r30, r16
    262c:	32 96       	adiw	r30, 0x02	; 2
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	ec 0f       	add	r30, r28
    2638:	fd 1f       	adc	r31, r29
    263a:	60 83       	st	Z, r22
    263c:	71 83       	std	Z+1, r23	; 0x01
    263e:	82 83       	std	Z+2, r24	; 0x02
    2640:	93 83       	std	Z+3, r25	; 0x03
				 * there are some channels not plugged in, it will cause the 
				 * servo channel index to reset back to 0, and re-write the
				 * existing servo value. This could cause a servo control value
				 * to get sent to the wrong servo. 
				 */
				if (servoChannelIndex >= RadioControllerInterface::MIN_RECEIVED_CHANNELS)
    2642:	05 30       	cpi	r16, 0x05	; 5
    2644:	11 05       	cpc	r17, r1
    2646:	ec f1       	brlt	.+122    	; 0x26c2 <__vector_46+0x15a>
				{
					//Manual mode
					if (rcInterface->GetServoChannelValue(RadioControllerInterface::FLIGHT_MODE_AUX_CHANNEL)
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	a9 01       	movw	r20, r18
    264e:	68 8d       	ldd	r22, Y+24	; 0x18
    2650:	79 8d       	ldd	r23, Y+25	; 0x19
    2652:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2654:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2656:	0e 94 cd 2b 	call	0x579a	; 0x579a <__cmpsf2>
    265a:	88 23       	and	r24, r24
    265c:	1c f4       	brge	.+6      	; 0x2664 <__vector_46+0xfc>
    265e:	f7 01       	movw	r30, r14
    2660:	10 82       	st	Z, r1
    2662:	03 c0       	rjmp	.+6      	; 0x266a <__vector_46+0x102>
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	f7 01       	movw	r30, r14
    2668:	80 83       	st	Z, r24
					{
						model->OperationalState(SystemModel::AutoPilot);
					}

					//If in Manual Control, set the servo control values.
					if (model->OperationalState() == SystemModel::ManualControl)
    266a:	f7 01       	movw	r30, r14
    266c:	80 81       	ld	r24, Z
    266e:	81 11       	cpse	r24, r1
    2670:	26 c0       	rjmp	.+76     	; 0x26be <__vector_46+0x156>
				
				float GetServoChannelValue(int index) const
				{
					if (index < MAX_CHANNELS)
					{
						return servoChannelValues[index];
    2672:	88 85       	ldd	r24, Y+8	; 0x08
    2674:	99 85       	ldd	r25, Y+9	; 0x09
    2676:	aa 85       	ldd	r26, Y+10	; 0x0a
    2678:	bb 85       	ldd	r27, Y+11	; 0x0b

			float LateralControlBeforeServoLimitsAdjustment() const {return lateralControlBeforeServoLimitsAdjustment;}
			void LateralControlBeforeServoLimitsAdjustment(float val) { lateralControlBeforeServoLimitsAdjustment = val;}

			float LateralControl() const {return lateralControl;}
			void LateralControl(float val) { lateralControl = val;}
    267a:	ef 59       	subi	r30, 0x9F	; 159
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 83       	st	Z, r24
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	a2 83       	std	Z+2, r26	; 0x02
    2684:	b3 83       	std	Z+3, r27	; 0x03
    2686:	8c 85       	ldd	r24, Y+12	; 0x0c
    2688:	9d 85       	ldd	r25, Y+13	; 0x0d
    268a:	ae 85       	ldd	r26, Y+14	; 0x0e
    268c:	bf 85       	ldd	r27, Y+15	; 0x0f

			float LongitudeControlBeforeServoLimitsAdjustment() const {return longitudeControlBeforeServoLimitsAdjustment;}
			void LongitudeControlBeforeServoLimitsAdjustment(float val) { longitudeControlBeforeServoLimitsAdjustment = val;}

			float LongitudeControl() const {return longitudeControl;}
			void LongitudeControl(float val) { longitudeControl = val;}
    268e:	f7 01       	movw	r30, r14
    2690:	81 ab       	std	Z+49, r24	; 0x31
    2692:	92 ab       	std	Z+50, r25	; 0x32
    2694:	a3 ab       	std	Z+51, r26	; 0x33
    2696:	b4 ab       	std	Z+52, r27	; 0x34
    2698:	88 89       	ldd	r24, Y+16	; 0x10
    269a:	99 89       	ldd	r25, Y+17	; 0x11
    269c:	aa 89       	ldd	r26, Y+18	; 0x12
    269e:	bb 89       	ldd	r27, Y+19	; 0x13
			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
			void ReferenceZNEDBodyFrameFeet(float val) { referenceAltitudeFeet = val;}


			float MainRotorCollectiveControl() const {return mainRotorControl;}
			void MainRotorCollectiveControl(float val) { mainRotorControl = val;}
    26a0:	ef 56       	subi	r30, 0x6F	; 111
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 83       	st	Z, r24
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	a2 83       	std	Z+2, r26	; 0x02
    26aa:	b3 83       	std	Z+3, r27	; 0x03
    26ac:	8c 89       	ldd	r24, Y+20	; 0x14
    26ae:	9d 89       	ldd	r25, Y+21	; 0x15
    26b0:	ae 89       	ldd	r26, Y+22	; 0x16
    26b2:	bf 89       	ldd	r27, Y+23	; 0x17
			float ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(float val) { referenceMagYawDegrees = val;}
				
				
			float YawControl() const {return yawControl;}
			void YawControl(float val) { yawControl = val;}
    26b4:	f7 01       	movw	r30, r14
    26b6:	81 87       	std	Z+9, r24	; 0x09
    26b8:	92 87       	std	Z+10, r25	; 0x0a
    26ba:	a3 87       	std	Z+11, r26	; 0x0b
    26bc:	b4 87       	std	Z+12, r27	; 0x0c
				
				long PreviousInputCaptureRegisterValue() const { return previousInputCaptureRegisterValue; }
				void PreviousInputCaptureRegisterValue(long val) { previousInputCaptureRegisterValue = val; }
					
				int ServoChannelIndex() const { return servoChannelIndex; }
				void ServoChannelIndex(int val) { servoChannelIndex = val; }
    26be:	1d 82       	std	Y+5, r1	; 0x05
    26c0:	1c 82       	std	Y+4, r1	; 0x04
					rcInterface->ServoChannelIndex(0);
				}			
			}
		}

		rcInterface->ServoChannelIndex(rcInterface->ServoChannelIndex() + 1);
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	9d 81       	ldd	r25, Y+5	; 0x05
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	9d 83       	std	Y+5, r25	; 0x05
    26ca:	8c 83       	std	Y+4, r24	; 0x04
	}
	
}
    26cc:	ff 91       	pop	r31
    26ce:	ef 91       	pop	r30
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	bf 91       	pop	r27
    26d6:	af 91       	pop	r26
    26d8:	9f 91       	pop	r25
    26da:	8f 91       	pop	r24
    26dc:	7f 91       	pop	r23
    26de:	6f 91       	pop	r22
    26e0:	5f 91       	pop	r21
    26e2:	4f 91       	pop	r20
    26e4:	3f 91       	pop	r19
    26e6:	2f 91       	pop	r18
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	0f 90       	pop	r0
    26f2:	0b be       	out	0x3b, r0	; 59
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	0f 90       	pop	r0
    26fa:	1f 90       	pop	r1
    26fc:	18 95       	reti

000026fe <_ZN10helicopter10interfaces24RadioControllerInterface4initEv>:
 */
void RadioControllerInterface::init()
{
	//set PL1 pin to input. This will receive the
	//pulse position modulation signal from the pwm-ppm encoder
	DDRL &= ~(1<<PL1);
    26fe:	ea e0       	ldi	r30, 0x0A	; 10
    2700:	f1 e0       	ldi	r31, 0x01	; 1
    2702:	80 81       	ld	r24, Z
    2704:	8d 7f       	andi	r24, 0xFD	; 253
    2706:	80 83       	st	Z, r24
	//Setup timer for Fast Pulse Width Modulation where the top
	//of the timer (when the timer resets) is set to the 
	//value given to the OCR5A register.
	//Timer Counter Overflow (TOV) flag is set when the timer reaches the TOP
	//
	TCCR5A = (1<<WGM50)|(1<<WGM51);
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = (1<<WGM52)|(1<<WGM53);
    270e:	e1 e2       	ldi	r30, 0x21	; 33
    2710:	f1 e0       	ldi	r31, 0x01	; 1
    2712:	88 e1       	ldi	r24, 0x18	; 24
    2714:	80 83       	st	Z, r24
	
	//ICES5 is the input capture edge select pin. when set to 1, it triggers a capture event on a rising edge.
	TCCR5B |= (1<<ICES5); 
    2716:	80 81       	ld	r24, Z
    2718:	80 64       	ori	r24, 0x40	; 64
    271a:	80 83       	st	Z, r24
	
	//Setup the timer to reset once it reaches the MAX_PPM_TIMER_VALUE value 
	// (i.e. the timer will reset 50 times a second because the timer will reach 40,000 in 1/50th of a second)
	OCR5A = MAX_PPM_TIMER_VALUE; 
    271c:	80 e4       	ldi	r24, 0x40	; 64
    271e:	9c e9       	ldi	r25, 0x9C	; 156
    2720:	90 93 29 01 	sts	0x0129, r25
    2724:	80 93 28 01 	sts	0x0128, r24

	//Enable global interrupts
	sei();
    2728:	78 94       	sei
	
	// Enable Input Capture interrupt so the interrupt will fire when a PPM signal is received.
	TIMSK5 |= (1<<ICIE5);
    272a:	e3 e7       	ldi	r30, 0x73	; 115
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	80 62       	ori	r24, 0x20	; 32
    2732:	80 83       	st	Z, r24
    2734:	08 95       	ret

00002736 <_ZN10helicopter10interfaces24RadioControllerInterface5startEv>:
}

void RadioControllerInterface::start()
{
	//Set the timer prescaler to 8. (CS = Clock Select) which starts the timer.
	TCCR5B |= (1<<CS51);	
    2736:	e1 e2       	ldi	r30, 0x21	; 33
    2738:	f1 e0       	ldi	r31, 0x01	; 1
    273a:	80 81       	ld	r24, Z
    273c:	82 60       	ori	r24, 0x02	; 2
    273e:	80 83       	st	Z, r24
    2740:	08 95       	ret

00002742 <_ZN10helicopter8messages7MessageD1Ev>:
				{
					
				}
				
				virtual ~Message()
				{
    2742:	2e e2       	ldi	r18, 0x2E	; 46
    2744:	32 e0       	ldi	r19, 0x02	; 2
    2746:	fc 01       	movw	r30, r24
    2748:	31 83       	std	Z+1, r19	; 0x01
    274a:	20 83       	st	Z, r18
    274c:	08 95       	ret

0000274e <_ZN10helicopter8messages7Message8getBytesEv>:
	* Returns the data in this message in raw byte format for transmission.
	*/
byte *Message::getBytes()
{
	return NULL;
}
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	08 95       	ret

00002754 <_ZN10helicopter8messages7Message12buildMessageEPh>:
	* for creating a message object given a stream of bytes.
	* @param message The bytes in the payload of the message which should be used
	* to construct a message object.
	*/
void Message::buildMessage(byte *message)
{
    2754:	08 95       	ret

00002756 <_ZN10helicopter8messages7MessageD0Ev>:
    2756:	2e e2       	ldi	r18, 0x2E	; 46
    2758:	32 e0       	ldi	r19, 0x02	; 2
    275a:	fc 01       	movw	r30, r24
    275c:	31 83       	std	Z+1, r19	; 0x01
    275e:	20 83       	st	Z, r18
					
				}
    2760:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    2764:	08 95       	ret

00002766 <_ZN10helicopter8messages7Message14getMessageSizeEv>:
	* Returns the number of bytes in this message. This should
	* be the payload of the message, and not underlying protocol
	* information (sync bytes and checksum bytes)
	*/
int Message::getMessageSize()
{
    2766:	fc 01       	movw	r30, r24
	return msgSize;
}
    2768:	83 81       	ldd	r24, Z+3	; 0x03
    276a:	94 81       	ldd	r25, Z+4	; 0x04
    276c:	08 95       	ret

0000276e <_ZN10helicopter8messages11SyncMessageD1Ev>:
				{
					
				}
				
				virtual ~Message()
				{
    276e:	2e e2       	ldi	r18, 0x2E	; 46
    2770:	32 e0       	ldi	r19, 0x02	; 2
    2772:	fc 01       	movw	r30, r24
    2774:	31 83       	std	Z+1, r19	; 0x01
    2776:	20 83       	st	Z, r18
    2778:	08 95       	ret

0000277a <_ZN10helicopter8messages11SyncMessage12buildMessageEPh>:
	return msg;
}

void SyncMessage::buildMessage(byte *message)
{
	if (message != NULL)
    277a:	61 15       	cp	r22, r1
    277c:	71 05       	cpc	r23, r1
    277e:	21 f0       	breq	.+8      	; 0x2788 <_ZN10helicopter8messages11SyncMessage12buildMessageEPh+0xe>
	{
		msgType = message[0];
    2780:	fb 01       	movw	r30, r22
    2782:	20 81       	ld	r18, Z
    2784:	fc 01       	movw	r30, r24
    2786:	22 83       	std	Z+2, r18	; 0x02
    2788:	08 95       	ret

0000278a <_ZN10helicopter8messages11SyncMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SyncMessage::getBytes()
{
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	ec 01       	movw	r28, r24
	byte *msg = new byte[MessageSize];
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <_Znaj>
    2798:	fc 01       	movw	r30, r24
	byte *msgPtr = msg;
	msgPtr[0] = this->msgType;
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	80 83       	st	Z, r24
	
	return msg;
}
    279e:	8e 2f       	mov	r24, r30
    27a0:	9f 2f       	mov	r25, r31
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	08 95       	ret

000027a8 <_ZN10helicopter8messages11SyncMessageD0Ev>:
    27a8:	2e e2       	ldi	r18, 0x2E	; 46
    27aa:	32 e0       	ldi	r19, 0x02	; 2
    27ac:	fc 01       	movw	r30, r24
    27ae:	31 83       	std	Z+1, r19	; 0x01
    27b0:	20 83       	st	Z, r18
				}
				
				~SyncMessage()
				{
					
				}
    27b2:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    27b6:	08 95       	ret

000027b8 <_ZN10helicopter8messages22SystemTelemetryMessageD1Ev>:
    27b8:	2e e2       	ldi	r18, 0x2E	; 46
    27ba:	32 e0       	ldi	r19, 0x02	; 2
    27bc:	fc 01       	movw	r30, r24
    27be:	31 83       	std	Z+1, r19	; 0x01
    27c0:	20 83       	st	Z, r18
    27c2:	08 95       	ret

000027c4 <_ZN10helicopter8messages22SystemTelemetryMessageD0Ev>:
    27c4:	2e e2       	ldi	r18, 0x2E	; 46
    27c6:	32 e0       	ldi	r19, 0x02	; 2
    27c8:	fc 01       	movw	r30, r24
    27ca:	31 83       	std	Z+1, r19	; 0x01
    27cc:	20 83       	st	Z, r18
					SerialCommunicationBufferOverruns(0)
				{
				
				}
			
				~SystemTelemetryMessage() {}
    27ce:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    27d2:	08 95       	ret

000027d4 <_ZN10helicopter8messages22SystemTelemetryMessage8getBytesEv>:

using namespace helicopter::messages;


byte *SystemTelemetryMessage::getBytes()
{
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	ec 01       	movw	r28, r24
	byte *msg = new byte[MessageSize];
    27da:	89 ee       	ldi	r24, 0xE9	; 233
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <_Znaj>
    27e2:	fc 01       	movw	r30, r24
					buffPtr += sizeof(val);
				}		
				
				void encode (byte *&buffPtr, byte &val)
				{
					*buffPtr = val;
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	80 83       	st	Z, r24
					buffPtr += sizeof(val);
				}
				
				void encode (byte *&buffPtr, float &val)
				{
					memcpy(buffPtr, &val, sizeof(val));
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	af 81       	ldd	r26, Y+7	; 0x07
    27ee:	b8 85       	ldd	r27, Y+8	; 0x08
    27f0:	81 83       	std	Z+1, r24	; 0x01
    27f2:	92 83       	std	Z+2, r25	; 0x02
    27f4:	a3 83       	std	Z+3, r26	; 0x03
    27f6:	b4 83       	std	Z+4, r27	; 0x04
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    27fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2800:	85 83       	std	Z+5, r24	; 0x05
    2802:	96 83       	std	Z+6, r25	; 0x06
    2804:	a7 83       	std	Z+7, r26	; 0x07
    2806:	b0 87       	std	Z+8, r27	; 0x08
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	af 85       	ldd	r26, Y+15	; 0x0f
    280e:	b8 89       	ldd	r27, Y+16	; 0x10
    2810:	81 87       	std	Z+9, r24	; 0x09
    2812:	92 87       	std	Z+10, r25	; 0x0a
    2814:	a3 87       	std	Z+11, r26	; 0x0b
    2816:	b4 87       	std	Z+12, r27	; 0x0c
    2818:	89 89       	ldd	r24, Y+17	; 0x11
    281a:	9a 89       	ldd	r25, Y+18	; 0x12
    281c:	ab 89       	ldd	r26, Y+19	; 0x13
    281e:	bc 89       	ldd	r27, Y+20	; 0x14
    2820:	85 87       	std	Z+13, r24	; 0x0d
    2822:	96 87       	std	Z+14, r25	; 0x0e
    2824:	a7 87       	std	Z+15, r26	; 0x0f
    2826:	b0 8b       	std	Z+16, r27	; 0x10
    2828:	8d 89       	ldd	r24, Y+21	; 0x15
    282a:	9e 89       	ldd	r25, Y+22	; 0x16
    282c:	af 89       	ldd	r26, Y+23	; 0x17
    282e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2830:	81 8b       	std	Z+17, r24	; 0x11
    2832:	92 8b       	std	Z+18, r25	; 0x12
    2834:	a3 8b       	std	Z+19, r26	; 0x13
    2836:	b4 8b       	std	Z+20, r27	; 0x14
    2838:	89 8d       	ldd	r24, Y+25	; 0x19
    283a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    283c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    283e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2840:	85 8b       	std	Z+21, r24	; 0x15
    2842:	96 8b       	std	Z+22, r25	; 0x16
    2844:	a7 8b       	std	Z+23, r26	; 0x17
    2846:	b0 8f       	std	Z+24, r27	; 0x18
    2848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    284c:	af 8d       	ldd	r26, Y+31	; 0x1f
    284e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2850:	81 8f       	std	Z+25, r24	; 0x19
    2852:	92 8f       	std	Z+26, r25	; 0x1a
    2854:	a3 8f       	std	Z+27, r26	; 0x1b
    2856:	b4 8f       	std	Z+28, r27	; 0x1c
    2858:	89 a1       	ldd	r24, Y+33	; 0x21
    285a:	9a a1       	ldd	r25, Y+34	; 0x22
    285c:	ab a1       	ldd	r26, Y+35	; 0x23
    285e:	bc a1       	ldd	r27, Y+36	; 0x24
    2860:	85 8f       	std	Z+29, r24	; 0x1d
    2862:	96 8f       	std	Z+30, r25	; 0x1e
    2864:	a7 8f       	std	Z+31, r26	; 0x1f
    2866:	b0 a3       	std	Z+32, r27	; 0x20
    2868:	8d a1       	ldd	r24, Y+37	; 0x25
    286a:	9e a1       	ldd	r25, Y+38	; 0x26
    286c:	af a1       	ldd	r26, Y+39	; 0x27
    286e:	b8 a5       	ldd	r27, Y+40	; 0x28
    2870:	81 a3       	std	Z+33, r24	; 0x21
    2872:	92 a3       	std	Z+34, r25	; 0x22
    2874:	a3 a3       	std	Z+35, r26	; 0x23
    2876:	b4 a3       	std	Z+36, r27	; 0x24
    2878:	89 a5       	ldd	r24, Y+41	; 0x29
    287a:	9a a5       	ldd	r25, Y+42	; 0x2a
    287c:	ab a5       	ldd	r26, Y+43	; 0x2b
    287e:	bc a5       	ldd	r27, Y+44	; 0x2c
    2880:	85 a3       	std	Z+37, r24	; 0x25
    2882:	96 a3       	std	Z+38, r25	; 0x26
    2884:	a7 a3       	std	Z+39, r26	; 0x27
    2886:	b0 a7       	std	Z+40, r27	; 0x28
    2888:	8d a5       	ldd	r24, Y+45	; 0x2d
    288a:	9e a5       	ldd	r25, Y+46	; 0x2e
    288c:	af a5       	ldd	r26, Y+47	; 0x2f
    288e:	b8 a9       	ldd	r27, Y+48	; 0x30
    2890:	81 a7       	std	Z+41, r24	; 0x29
    2892:	92 a7       	std	Z+42, r25	; 0x2a
    2894:	a3 a7       	std	Z+43, r26	; 0x2b
    2896:	b4 a7       	std	Z+44, r27	; 0x2c
    2898:	89 a9       	ldd	r24, Y+49	; 0x31
    289a:	9a a9       	ldd	r25, Y+50	; 0x32
    289c:	ab a9       	ldd	r26, Y+51	; 0x33
    289e:	bc a9       	ldd	r27, Y+52	; 0x34
    28a0:	85 a7       	std	Z+45, r24	; 0x2d
    28a2:	96 a7       	std	Z+46, r25	; 0x2e
    28a4:	a7 a7       	std	Z+47, r26	; 0x2f
    28a6:	b0 ab       	std	Z+48, r27	; 0x30
    28a8:	8d a9       	ldd	r24, Y+53	; 0x35
    28aa:	9e a9       	ldd	r25, Y+54	; 0x36
    28ac:	af a9       	ldd	r26, Y+55	; 0x37
    28ae:	b8 ad       	ldd	r27, Y+56	; 0x38
    28b0:	81 ab       	std	Z+49, r24	; 0x31
    28b2:	92 ab       	std	Z+50, r25	; 0x32
    28b4:	a3 ab       	std	Z+51, r26	; 0x33
    28b6:	b4 ab       	std	Z+52, r27	; 0x34
    28b8:	89 ad       	ldd	r24, Y+57	; 0x39
    28ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    28bc:	ab ad       	ldd	r26, Y+59	; 0x3b
    28be:	bc ad       	ldd	r27, Y+60	; 0x3c
    28c0:	85 ab       	std	Z+53, r24	; 0x35
    28c2:	96 ab       	std	Z+54, r25	; 0x36
    28c4:	a7 ab       	std	Z+55, r26	; 0x37
    28c6:	b0 af       	std	Z+56, r27	; 0x38
    28c8:	de 01       	movw	r26, r28
    28ca:	dd 96       	adiw	r26, 0x3d	; 61
    28cc:	8d 91       	ld	r24, X+
    28ce:	9d 91       	ld	r25, X+
    28d0:	0d 90       	ld	r0, X+
    28d2:	bc 91       	ld	r27, X
    28d4:	a0 2d       	mov	r26, r0
    28d6:	81 af       	std	Z+57, r24	; 0x39
    28d8:	92 af       	std	Z+58, r25	; 0x3a
    28da:	a3 af       	std	Z+59, r26	; 0x3b
    28dc:	b4 af       	std	Z+60, r27	; 0x3c
    28de:	9f 01       	movw	r18, r30
    28e0:	23 5c       	subi	r18, 0xC3	; 195
    28e2:	3f 4f       	sbci	r19, 0xFF	; 255
    28e4:	de 01       	movw	r26, r28
    28e6:	af 5b       	subi	r26, 0xBF	; 191
    28e8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ea:	4d 91       	ld	r20, X+
    28ec:	5d 91       	ld	r21, X+
    28ee:	6d 91       	ld	r22, X+
    28f0:	7c 91       	ld	r23, X
    28f2:	d9 01       	movw	r26, r18
    28f4:	4d 93       	st	X+, r20
    28f6:	5d 93       	st	X+, r21
    28f8:	6d 93       	st	X+, r22
    28fa:	7c 93       	st	X, r23
    28fc:	13 97       	sbiw	r26, 0x03	; 3
    28fe:	9f 01       	movw	r18, r30
    2900:	2f 5b       	subi	r18, 0xBF	; 191
    2902:	3f 4f       	sbci	r19, 0xFF	; 255
    2904:	de 01       	movw	r26, r28
    2906:	ab 5b       	subi	r26, 0xBB	; 187
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	4d 91       	ld	r20, X+
    290c:	5d 91       	ld	r21, X+
    290e:	6d 91       	ld	r22, X+
    2910:	7c 91       	ld	r23, X
    2912:	d9 01       	movw	r26, r18
    2914:	4d 93       	st	X+, r20
    2916:	5d 93       	st	X+, r21
    2918:	6d 93       	st	X+, r22
    291a:	7c 93       	st	X, r23
    291c:	13 97       	sbiw	r26, 0x03	; 3
    291e:	9f 01       	movw	r18, r30
    2920:	2b 5b       	subi	r18, 0xBB	; 187
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	de 01       	movw	r26, r28
    2926:	a7 5b       	subi	r26, 0xB7	; 183
    2928:	bf 4f       	sbci	r27, 0xFF	; 255
    292a:	4d 91       	ld	r20, X+
    292c:	5d 91       	ld	r21, X+
    292e:	6d 91       	ld	r22, X+
    2930:	7c 91       	ld	r23, X
    2932:	d9 01       	movw	r26, r18
    2934:	4d 93       	st	X+, r20
    2936:	5d 93       	st	X+, r21
    2938:	6d 93       	st	X+, r22
    293a:	7c 93       	st	X, r23
    293c:	13 97       	sbiw	r26, 0x03	; 3
    293e:	9f 01       	movw	r18, r30
    2940:	27 5b       	subi	r18, 0xB7	; 183
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	de 01       	movw	r26, r28
    2946:	a3 5b       	subi	r26, 0xB3	; 179
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	4d 91       	ld	r20, X+
    294c:	5d 91       	ld	r21, X+
    294e:	6d 91       	ld	r22, X+
    2950:	7c 91       	ld	r23, X
    2952:	d9 01       	movw	r26, r18
    2954:	4d 93       	st	X+, r20
    2956:	5d 93       	st	X+, r21
    2958:	6d 93       	st	X+, r22
    295a:	7c 93       	st	X, r23
    295c:	13 97       	sbiw	r26, 0x03	; 3
    295e:	9f 01       	movw	r18, r30
    2960:	23 5b       	subi	r18, 0xB3	; 179
    2962:	3f 4f       	sbci	r19, 0xFF	; 255
    2964:	de 01       	movw	r26, r28
    2966:	af 5a       	subi	r26, 0xAF	; 175
    2968:	bf 4f       	sbci	r27, 0xFF	; 255
    296a:	4d 91       	ld	r20, X+
    296c:	5d 91       	ld	r21, X+
    296e:	6d 91       	ld	r22, X+
    2970:	7c 91       	ld	r23, X
    2972:	d9 01       	movw	r26, r18
    2974:	4d 93       	st	X+, r20
    2976:	5d 93       	st	X+, r21
    2978:	6d 93       	st	X+, r22
    297a:	7c 93       	st	X, r23
    297c:	13 97       	sbiw	r26, 0x03	; 3
    297e:	9f 01       	movw	r18, r30
    2980:	2f 5a       	subi	r18, 0xAF	; 175
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	de 01       	movw	r26, r28
    2986:	ab 5a       	subi	r26, 0xAB	; 171
    2988:	bf 4f       	sbci	r27, 0xFF	; 255
    298a:	4d 91       	ld	r20, X+
    298c:	5d 91       	ld	r21, X+
    298e:	6d 91       	ld	r22, X+
    2990:	7c 91       	ld	r23, X
    2992:	d9 01       	movw	r26, r18
    2994:	4d 93       	st	X+, r20
    2996:	5d 93       	st	X+, r21
    2998:	6d 93       	st	X+, r22
    299a:	7c 93       	st	X, r23
    299c:	13 97       	sbiw	r26, 0x03	; 3
    299e:	9f 01       	movw	r18, r30
    29a0:	2b 5a       	subi	r18, 0xAB	; 171
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	de 01       	movw	r26, r28
    29a6:	a7 5a       	subi	r26, 0xA7	; 167
    29a8:	bf 4f       	sbci	r27, 0xFF	; 255
    29aa:	4d 91       	ld	r20, X+
    29ac:	5d 91       	ld	r21, X+
    29ae:	6d 91       	ld	r22, X+
    29b0:	7c 91       	ld	r23, X
    29b2:	d9 01       	movw	r26, r18
    29b4:	4d 93       	st	X+, r20
    29b6:	5d 93       	st	X+, r21
    29b8:	6d 93       	st	X+, r22
    29ba:	7c 93       	st	X, r23
    29bc:	13 97       	sbiw	r26, 0x03	; 3
    29be:	9f 01       	movw	r18, r30
    29c0:	27 5a       	subi	r18, 0xA7	; 167
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	de 01       	movw	r26, r28
    29c6:	a3 5a       	subi	r26, 0xA3	; 163
    29c8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ca:	4d 91       	ld	r20, X+
    29cc:	5d 91       	ld	r21, X+
    29ce:	6d 91       	ld	r22, X+
    29d0:	7c 91       	ld	r23, X
    29d2:	d9 01       	movw	r26, r18
    29d4:	4d 93       	st	X+, r20
    29d6:	5d 93       	st	X+, r21
    29d8:	6d 93       	st	X+, r22
    29da:	7c 93       	st	X, r23
    29dc:	13 97       	sbiw	r26, 0x03	; 3
    29de:	9f 01       	movw	r18, r30
    29e0:	23 5a       	subi	r18, 0xA3	; 163
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	de 01       	movw	r26, r28
    29e6:	af 59       	subi	r26, 0x9F	; 159
    29e8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ea:	4d 91       	ld	r20, X+
    29ec:	5d 91       	ld	r21, X+
    29ee:	6d 91       	ld	r22, X+
    29f0:	7c 91       	ld	r23, X
    29f2:	d9 01       	movw	r26, r18
    29f4:	4d 93       	st	X+, r20
    29f6:	5d 93       	st	X+, r21
    29f8:	6d 93       	st	X+, r22
    29fa:	7c 93       	st	X, r23
    29fc:	13 97       	sbiw	r26, 0x03	; 3
    29fe:	9f 01       	movw	r18, r30
    2a00:	2f 59       	subi	r18, 0x9F	; 159
    2a02:	3f 4f       	sbci	r19, 0xFF	; 255
    2a04:	de 01       	movw	r26, r28
    2a06:	ab 59       	subi	r26, 0x9B	; 155
    2a08:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0a:	4d 91       	ld	r20, X+
    2a0c:	5d 91       	ld	r21, X+
    2a0e:	6d 91       	ld	r22, X+
    2a10:	7c 91       	ld	r23, X
    2a12:	d9 01       	movw	r26, r18
    2a14:	4d 93       	st	X+, r20
    2a16:	5d 93       	st	X+, r21
    2a18:	6d 93       	st	X+, r22
    2a1a:	7c 93       	st	X, r23
    2a1c:	13 97       	sbiw	r26, 0x03	; 3
    2a1e:	9f 01       	movw	r18, r30
    2a20:	2b 59       	subi	r18, 0x9B	; 155
    2a22:	3f 4f       	sbci	r19, 0xFF	; 255
    2a24:	de 01       	movw	r26, r28
    2a26:	a7 59       	subi	r26, 0x97	; 151
    2a28:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2a:	4d 91       	ld	r20, X+
    2a2c:	5d 91       	ld	r21, X+
    2a2e:	6d 91       	ld	r22, X+
    2a30:	7c 91       	ld	r23, X
    2a32:	d9 01       	movw	r26, r18
    2a34:	4d 93       	st	X+, r20
    2a36:	5d 93       	st	X+, r21
    2a38:	6d 93       	st	X+, r22
    2a3a:	7c 93       	st	X, r23
    2a3c:	13 97       	sbiw	r26, 0x03	; 3
    2a3e:	9f 01       	movw	r18, r30
    2a40:	27 59       	subi	r18, 0x97	; 151
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
    2a44:	de 01       	movw	r26, r28
    2a46:	a3 59       	subi	r26, 0x93	; 147
    2a48:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4a:	4d 91       	ld	r20, X+
    2a4c:	5d 91       	ld	r21, X+
    2a4e:	6d 91       	ld	r22, X+
    2a50:	7c 91       	ld	r23, X
    2a52:	d9 01       	movw	r26, r18
    2a54:	4d 93       	st	X+, r20
    2a56:	5d 93       	st	X+, r21
    2a58:	6d 93       	st	X+, r22
    2a5a:	7c 93       	st	X, r23
    2a5c:	13 97       	sbiw	r26, 0x03	; 3
    2a5e:	9f 01       	movw	r18, r30
    2a60:	23 59       	subi	r18, 0x93	; 147
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	de 01       	movw	r26, r28
    2a66:	af 58       	subi	r26, 0x8F	; 143
    2a68:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6a:	4d 91       	ld	r20, X+
    2a6c:	5d 91       	ld	r21, X+
    2a6e:	6d 91       	ld	r22, X+
    2a70:	7c 91       	ld	r23, X
    2a72:	d9 01       	movw	r26, r18
    2a74:	4d 93       	st	X+, r20
    2a76:	5d 93       	st	X+, r21
    2a78:	6d 93       	st	X+, r22
    2a7a:	7c 93       	st	X, r23
    2a7c:	13 97       	sbiw	r26, 0x03	; 3
    2a7e:	9f 01       	movw	r18, r30
    2a80:	2f 58       	subi	r18, 0x8F	; 143
    2a82:	3f 4f       	sbci	r19, 0xFF	; 255
    2a84:	de 01       	movw	r26, r28
    2a86:	ab 58       	subi	r26, 0x8B	; 139
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8a:	4d 91       	ld	r20, X+
    2a8c:	5d 91       	ld	r21, X+
    2a8e:	6d 91       	ld	r22, X+
    2a90:	7c 91       	ld	r23, X
    2a92:	d9 01       	movw	r26, r18
    2a94:	4d 93       	st	X+, r20
    2a96:	5d 93       	st	X+, r21
    2a98:	6d 93       	st	X+, r22
    2a9a:	7c 93       	st	X, r23
    2a9c:	13 97       	sbiw	r26, 0x03	; 3
    2a9e:	9f 01       	movw	r18, r30
    2aa0:	2b 58       	subi	r18, 0x8B	; 139
    2aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa4:	de 01       	movw	r26, r28
    2aa6:	a7 58       	subi	r26, 0x87	; 135
    2aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aaa:	4d 91       	ld	r20, X+
    2aac:	5d 91       	ld	r21, X+
    2aae:	6d 91       	ld	r22, X+
    2ab0:	7c 91       	ld	r23, X
    2ab2:	d9 01       	movw	r26, r18
    2ab4:	4d 93       	st	X+, r20
    2ab6:	5d 93       	st	X+, r21
    2ab8:	6d 93       	st	X+, r22
    2aba:	7c 93       	st	X, r23
    2abc:	13 97       	sbiw	r26, 0x03	; 3
    2abe:	9f 01       	movw	r18, r30
    2ac0:	27 58       	subi	r18, 0x87	; 135
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	de 01       	movw	r26, r28
    2ac6:	a3 58       	subi	r26, 0x83	; 131
    2ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aca:	4d 91       	ld	r20, X+
    2acc:	5d 91       	ld	r21, X+
    2ace:	6d 91       	ld	r22, X+
    2ad0:	7c 91       	ld	r23, X
    2ad2:	d9 01       	movw	r26, r18
    2ad4:	4d 93       	st	X+, r20
    2ad6:	5d 93       	st	X+, r21
    2ad8:	6d 93       	st	X+, r22
    2ada:	7c 93       	st	X, r23
    2adc:	13 97       	sbiw	r26, 0x03	; 3
    2ade:	9f 01       	movw	r18, r30
    2ae0:	23 58       	subi	r18, 0x83	; 131
    2ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae4:	de 01       	movw	r26, r28
    2ae6:	af 57       	subi	r26, 0x7F	; 127
    2ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aea:	4d 91       	ld	r20, X+
    2aec:	5d 91       	ld	r21, X+
    2aee:	6d 91       	ld	r22, X+
    2af0:	7c 91       	ld	r23, X
    2af2:	d9 01       	movw	r26, r18
    2af4:	4d 93       	st	X+, r20
    2af6:	5d 93       	st	X+, r21
    2af8:	6d 93       	st	X+, r22
    2afa:	7c 93       	st	X, r23
    2afc:	13 97       	sbiw	r26, 0x03	; 3
    2afe:	9f 01       	movw	r18, r30
    2b00:	2f 57       	subi	r18, 0x7F	; 127
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	de 01       	movw	r26, r28
    2b06:	ab 57       	subi	r26, 0x7B	; 123
    2b08:	bf 4f       	sbci	r27, 0xFF	; 255
    2b0a:	4d 91       	ld	r20, X+
    2b0c:	5d 91       	ld	r21, X+
    2b0e:	6d 91       	ld	r22, X+
    2b10:	7c 91       	ld	r23, X
    2b12:	d9 01       	movw	r26, r18
    2b14:	4d 93       	st	X+, r20
    2b16:	5d 93       	st	X+, r21
    2b18:	6d 93       	st	X+, r22
    2b1a:	7c 93       	st	X, r23
    2b1c:	13 97       	sbiw	r26, 0x03	; 3
    2b1e:	9f 01       	movw	r18, r30
    2b20:	2b 57       	subi	r18, 0x7B	; 123
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	de 01       	movw	r26, r28
    2b26:	a7 57       	subi	r26, 0x77	; 119
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	4d 91       	ld	r20, X+
    2b2c:	5d 91       	ld	r21, X+
    2b2e:	6d 91       	ld	r22, X+
    2b30:	7c 91       	ld	r23, X
    2b32:	d9 01       	movw	r26, r18
    2b34:	4d 93       	st	X+, r20
    2b36:	5d 93       	st	X+, r21
    2b38:	6d 93       	st	X+, r22
    2b3a:	7c 93       	st	X, r23
    2b3c:	13 97       	sbiw	r26, 0x03	; 3
    2b3e:	9f 01       	movw	r18, r30
    2b40:	27 57       	subi	r18, 0x77	; 119
    2b42:	3f 4f       	sbci	r19, 0xFF	; 255
    2b44:	de 01       	movw	r26, r28
    2b46:	a3 57       	subi	r26, 0x73	; 115
    2b48:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4a:	4d 91       	ld	r20, X+
    2b4c:	5d 91       	ld	r21, X+
    2b4e:	6d 91       	ld	r22, X+
    2b50:	7c 91       	ld	r23, X
    2b52:	d9 01       	movw	r26, r18
    2b54:	4d 93       	st	X+, r20
    2b56:	5d 93       	st	X+, r21
    2b58:	6d 93       	st	X+, r22
    2b5a:	7c 93       	st	X, r23
    2b5c:	13 97       	sbiw	r26, 0x03	; 3
    2b5e:	9f 01       	movw	r18, r30
    2b60:	23 57       	subi	r18, 0x73	; 115
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	de 01       	movw	r26, r28
    2b66:	af 56       	subi	r26, 0x6F	; 111
    2b68:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6a:	4d 91       	ld	r20, X+
    2b6c:	5d 91       	ld	r21, X+
    2b6e:	6d 91       	ld	r22, X+
    2b70:	7c 91       	ld	r23, X
    2b72:	d9 01       	movw	r26, r18
    2b74:	4d 93       	st	X+, r20
    2b76:	5d 93       	st	X+, r21
    2b78:	6d 93       	st	X+, r22
    2b7a:	7c 93       	st	X, r23
    2b7c:	13 97       	sbiw	r26, 0x03	; 3
    2b7e:	9f 01       	movw	r18, r30
    2b80:	2f 56       	subi	r18, 0x6F	; 111
    2b82:	3f 4f       	sbci	r19, 0xFF	; 255
    2b84:	de 01       	movw	r26, r28
    2b86:	ab 56       	subi	r26, 0x6B	; 107
    2b88:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8a:	4d 91       	ld	r20, X+
    2b8c:	5d 91       	ld	r21, X+
    2b8e:	6d 91       	ld	r22, X+
    2b90:	7c 91       	ld	r23, X
    2b92:	d9 01       	movw	r26, r18
    2b94:	4d 93       	st	X+, r20
    2b96:	5d 93       	st	X+, r21
    2b98:	6d 93       	st	X+, r22
    2b9a:	7c 93       	st	X, r23
    2b9c:	13 97       	sbiw	r26, 0x03	; 3
    2b9e:	9f 01       	movw	r18, r30
    2ba0:	2b 56       	subi	r18, 0x6B	; 107
    2ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba4:	de 01       	movw	r26, r28
    2ba6:	a7 56       	subi	r26, 0x67	; 103
    2ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    2baa:	4d 91       	ld	r20, X+
    2bac:	5d 91       	ld	r21, X+
    2bae:	6d 91       	ld	r22, X+
    2bb0:	7c 91       	ld	r23, X
    2bb2:	d9 01       	movw	r26, r18
    2bb4:	4d 93       	st	X+, r20
    2bb6:	5d 93       	st	X+, r21
    2bb8:	6d 93       	st	X+, r22
    2bba:	7c 93       	st	X, r23
    2bbc:	13 97       	sbiw	r26, 0x03	; 3
    2bbe:	9f 01       	movw	r18, r30
    2bc0:	27 56       	subi	r18, 0x67	; 103
    2bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc4:	de 01       	movw	r26, r28
    2bc6:	a3 56       	subi	r26, 0x63	; 99
    2bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bca:	4d 91       	ld	r20, X+
    2bcc:	5d 91       	ld	r21, X+
    2bce:	6d 91       	ld	r22, X+
    2bd0:	7c 91       	ld	r23, X
    2bd2:	d9 01       	movw	r26, r18
    2bd4:	4d 93       	st	X+, r20
    2bd6:	5d 93       	st	X+, r21
    2bd8:	6d 93       	st	X+, r22
    2bda:	7c 93       	st	X, r23
    2bdc:	13 97       	sbiw	r26, 0x03	; 3
    2bde:	9f 01       	movw	r18, r30
    2be0:	23 56       	subi	r18, 0x63	; 99
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255
    2be4:	de 01       	movw	r26, r28
    2be6:	af 55       	subi	r26, 0x5F	; 95
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	4d 91       	ld	r20, X+
    2bec:	5d 91       	ld	r21, X+
    2bee:	6d 91       	ld	r22, X+
    2bf0:	7c 91       	ld	r23, X
    2bf2:	d9 01       	movw	r26, r18
    2bf4:	4d 93       	st	X+, r20
    2bf6:	5d 93       	st	X+, r21
    2bf8:	6d 93       	st	X+, r22
    2bfa:	7c 93       	st	X, r23
    2bfc:	13 97       	sbiw	r26, 0x03	; 3
    2bfe:	9f 01       	movw	r18, r30
    2c00:	2f 55       	subi	r18, 0x5F	; 95
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	de 01       	movw	r26, r28
    2c06:	ab 55       	subi	r26, 0x5B	; 91
    2c08:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0a:	4d 91       	ld	r20, X+
    2c0c:	5d 91       	ld	r21, X+
    2c0e:	6d 91       	ld	r22, X+
    2c10:	7c 91       	ld	r23, X
    2c12:	d9 01       	movw	r26, r18
    2c14:	4d 93       	st	X+, r20
    2c16:	5d 93       	st	X+, r21
    2c18:	6d 93       	st	X+, r22
    2c1a:	7c 93       	st	X, r23
    2c1c:	13 97       	sbiw	r26, 0x03	; 3
    2c1e:	9f 01       	movw	r18, r30
    2c20:	2b 55       	subi	r18, 0x5B	; 91
    2c22:	3f 4f       	sbci	r19, 0xFF	; 255
    2c24:	de 01       	movw	r26, r28
    2c26:	a7 55       	subi	r26, 0x57	; 87
    2c28:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2a:	4d 91       	ld	r20, X+
    2c2c:	5d 91       	ld	r21, X+
    2c2e:	6d 91       	ld	r22, X+
    2c30:	7c 91       	ld	r23, X
    2c32:	d9 01       	movw	r26, r18
    2c34:	4d 93       	st	X+, r20
    2c36:	5d 93       	st	X+, r21
    2c38:	6d 93       	st	X+, r22
    2c3a:	7c 93       	st	X, r23
    2c3c:	13 97       	sbiw	r26, 0x03	; 3
    2c3e:	9f 01       	movw	r18, r30
    2c40:	27 55       	subi	r18, 0x57	; 87
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255
    2c44:	de 01       	movw	r26, r28
    2c46:	a3 55       	subi	r26, 0x53	; 83
    2c48:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4a:	4d 91       	ld	r20, X+
    2c4c:	5d 91       	ld	r21, X+
    2c4e:	6d 91       	ld	r22, X+
    2c50:	7c 91       	ld	r23, X
    2c52:	d9 01       	movw	r26, r18
    2c54:	4d 93       	st	X+, r20
    2c56:	5d 93       	st	X+, r21
    2c58:	6d 93       	st	X+, r22
    2c5a:	7c 93       	st	X, r23
    2c5c:	13 97       	sbiw	r26, 0x03	; 3
    2c5e:	9f 01       	movw	r18, r30
    2c60:	23 55       	subi	r18, 0x53	; 83
    2c62:	3f 4f       	sbci	r19, 0xFF	; 255
    2c64:	de 01       	movw	r26, r28
    2c66:	af 54       	subi	r26, 0x4F	; 79
    2c68:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6a:	4d 91       	ld	r20, X+
    2c6c:	5d 91       	ld	r21, X+
    2c6e:	6d 91       	ld	r22, X+
    2c70:	7c 91       	ld	r23, X
    2c72:	d9 01       	movw	r26, r18
    2c74:	4d 93       	st	X+, r20
    2c76:	5d 93       	st	X+, r21
    2c78:	6d 93       	st	X+, r22
    2c7a:	7c 93       	st	X, r23
    2c7c:	13 97       	sbiw	r26, 0x03	; 3
    2c7e:	9f 01       	movw	r18, r30
    2c80:	2f 54       	subi	r18, 0x4F	; 79
    2c82:	3f 4f       	sbci	r19, 0xFF	; 255
    2c84:	de 01       	movw	r26, r28
    2c86:	ab 54       	subi	r26, 0x4B	; 75
    2c88:	bf 4f       	sbci	r27, 0xFF	; 255
    2c8a:	4d 91       	ld	r20, X+
    2c8c:	5d 91       	ld	r21, X+
    2c8e:	6d 91       	ld	r22, X+
    2c90:	7c 91       	ld	r23, X
    2c92:	d9 01       	movw	r26, r18
    2c94:	4d 93       	st	X+, r20
    2c96:	5d 93       	st	X+, r21
    2c98:	6d 93       	st	X+, r22
    2c9a:	7c 93       	st	X, r23
    2c9c:	13 97       	sbiw	r26, 0x03	; 3
    2c9e:	9f 01       	movw	r18, r30
    2ca0:	2b 54       	subi	r18, 0x4B	; 75
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	de 01       	movw	r26, r28
    2ca6:	a7 54       	subi	r26, 0x47	; 71
    2ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    2caa:	4d 91       	ld	r20, X+
    2cac:	5d 91       	ld	r21, X+
    2cae:	6d 91       	ld	r22, X+
    2cb0:	7c 91       	ld	r23, X
    2cb2:	d9 01       	movw	r26, r18
    2cb4:	4d 93       	st	X+, r20
    2cb6:	5d 93       	st	X+, r21
    2cb8:	6d 93       	st	X+, r22
    2cba:	7c 93       	st	X, r23
    2cbc:	13 97       	sbiw	r26, 0x03	; 3
    2cbe:	9f 01       	movw	r18, r30
    2cc0:	27 54       	subi	r18, 0x47	; 71
    2cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc4:	de 01       	movw	r26, r28
    2cc6:	a3 54       	subi	r26, 0x43	; 67
    2cc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cca:	4d 91       	ld	r20, X+
    2ccc:	5d 91       	ld	r21, X+
    2cce:	6d 91       	ld	r22, X+
    2cd0:	7c 91       	ld	r23, X
    2cd2:	d9 01       	movw	r26, r18
    2cd4:	4d 93       	st	X+, r20
    2cd6:	5d 93       	st	X+, r21
    2cd8:	6d 93       	st	X+, r22
    2cda:	7c 93       	st	X, r23
    2cdc:	13 97       	sbiw	r26, 0x03	; 3
    2cde:	9f 01       	movw	r18, r30
    2ce0:	23 54       	subi	r18, 0x43	; 67
    2ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce4:	de 01       	movw	r26, r28
    2ce6:	af 53       	subi	r26, 0x3F	; 63
    2ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cea:	4d 91       	ld	r20, X+
    2cec:	5d 91       	ld	r21, X+
    2cee:	6d 91       	ld	r22, X+
    2cf0:	7c 91       	ld	r23, X
    2cf2:	d9 01       	movw	r26, r18
    2cf4:	4d 93       	st	X+, r20
    2cf6:	5d 93       	st	X+, r21
    2cf8:	6d 93       	st	X+, r22
    2cfa:	7c 93       	st	X, r23
    2cfc:	13 97       	sbiw	r26, 0x03	; 3
    2cfe:	9f 01       	movw	r18, r30
    2d00:	2f 53       	subi	r18, 0x3F	; 63
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255
    2d04:	de 01       	movw	r26, r28
    2d06:	ab 53       	subi	r26, 0x3B	; 59
    2d08:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0a:	4d 91       	ld	r20, X+
    2d0c:	5d 91       	ld	r21, X+
    2d0e:	6d 91       	ld	r22, X+
    2d10:	7c 91       	ld	r23, X
    2d12:	d9 01       	movw	r26, r18
    2d14:	4d 93       	st	X+, r20
    2d16:	5d 93       	st	X+, r21
    2d18:	6d 93       	st	X+, r22
    2d1a:	7c 93       	st	X, r23
    2d1c:	13 97       	sbiw	r26, 0x03	; 3
    2d1e:	9f 01       	movw	r18, r30
    2d20:	2b 53       	subi	r18, 0x3B	; 59
    2d22:	3f 4f       	sbci	r19, 0xFF	; 255
    2d24:	de 01       	movw	r26, r28
    2d26:	a7 53       	subi	r26, 0x37	; 55
    2d28:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2a:	4d 91       	ld	r20, X+
    2d2c:	5d 91       	ld	r21, X+
    2d2e:	6d 91       	ld	r22, X+
    2d30:	7c 91       	ld	r23, X
    2d32:	d9 01       	movw	r26, r18
    2d34:	4d 93       	st	X+, r20
    2d36:	5d 93       	st	X+, r21
    2d38:	6d 93       	st	X+, r22
    2d3a:	7c 93       	st	X, r23
    2d3c:	13 97       	sbiw	r26, 0x03	; 3
    2d3e:	9f 01       	movw	r18, r30
    2d40:	27 53       	subi	r18, 0x37	; 55
    2d42:	3f 4f       	sbci	r19, 0xFF	; 255
    2d44:	de 01       	movw	r26, r28
    2d46:	a3 53       	subi	r26, 0x33	; 51
    2d48:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4a:	4d 91       	ld	r20, X+
    2d4c:	5d 91       	ld	r21, X+
    2d4e:	6d 91       	ld	r22, X+
    2d50:	7c 91       	ld	r23, X
    2d52:	d9 01       	movw	r26, r18
    2d54:	4d 93       	st	X+, r20
    2d56:	5d 93       	st	X+, r21
    2d58:	6d 93       	st	X+, r22
    2d5a:	7c 93       	st	X, r23
    2d5c:	13 97       	sbiw	r26, 0x03	; 3
    2d5e:	9f 01       	movw	r18, r30
    2d60:	23 53       	subi	r18, 0x33	; 51
    2d62:	3f 4f       	sbci	r19, 0xFF	; 255
    2d64:	de 01       	movw	r26, r28
    2d66:	af 52       	subi	r26, 0x2F	; 47
    2d68:	bf 4f       	sbci	r27, 0xFF	; 255
    2d6a:	4d 91       	ld	r20, X+
    2d6c:	5d 91       	ld	r21, X+
    2d6e:	6d 91       	ld	r22, X+
    2d70:	7c 91       	ld	r23, X
    2d72:	d9 01       	movw	r26, r18
    2d74:	4d 93       	st	X+, r20
    2d76:	5d 93       	st	X+, r21
    2d78:	6d 93       	st	X+, r22
    2d7a:	7c 93       	st	X, r23
    2d7c:	13 97       	sbiw	r26, 0x03	; 3
    2d7e:	9f 01       	movw	r18, r30
    2d80:	2f 52       	subi	r18, 0x2F	; 47
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	de 01       	movw	r26, r28
    2d86:	ab 52       	subi	r26, 0x2B	; 43
    2d88:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8a:	4d 91       	ld	r20, X+
    2d8c:	5d 91       	ld	r21, X+
    2d8e:	6d 91       	ld	r22, X+
    2d90:	7c 91       	ld	r23, X
    2d92:	d9 01       	movw	r26, r18
    2d94:	4d 93       	st	X+, r20
    2d96:	5d 93       	st	X+, r21
    2d98:	6d 93       	st	X+, r22
    2d9a:	7c 93       	st	X, r23
    2d9c:	13 97       	sbiw	r26, 0x03	; 3
				 * Mem copies the value into the buffer pointer then increments
				 * the pointer location by the size of the value copied.
				 */
				void encode (byte *&buffPtr, long &val)
				{
					memcpy(buffPtr, &val, sizeof(val));
    2d9e:	9f 01       	movw	r18, r30
    2da0:	2b 52       	subi	r18, 0x2B	; 43
    2da2:	3f 4f       	sbci	r19, 0xFF	; 255
    2da4:	de 01       	movw	r26, r28
    2da6:	a7 52       	subi	r26, 0x27	; 39
    2da8:	bf 4f       	sbci	r27, 0xFF	; 255
    2daa:	4d 91       	ld	r20, X+
    2dac:	5d 91       	ld	r21, X+
    2dae:	6d 91       	ld	r22, X+
    2db0:	7c 91       	ld	r23, X
    2db2:	d9 01       	movw	r26, r18
    2db4:	4d 93       	st	X+, r20
    2db6:	5d 93       	st	X+, r21
    2db8:	6d 93       	st	X+, r22
    2dba:	7c 93       	st	X, r23
    2dbc:	13 97       	sbiw	r26, 0x03	; 3
    2dbe:	9f 01       	movw	r18, r30
    2dc0:	27 52       	subi	r18, 0x27	; 39
    2dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc4:	de 01       	movw	r26, r28
    2dc6:	a3 52       	subi	r26, 0x23	; 35
    2dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dca:	4d 91       	ld	r20, X+
    2dcc:	5d 91       	ld	r21, X+
    2dce:	6d 91       	ld	r22, X+
    2dd0:	7c 91       	ld	r23, X
    2dd2:	d9 01       	movw	r26, r18
    2dd4:	4d 93       	st	X+, r20
    2dd6:	5d 93       	st	X+, r21
    2dd8:	6d 93       	st	X+, r22
    2dda:	7c 93       	st	X, r23
    2ddc:	13 97       	sbiw	r26, 0x03	; 3
    2dde:	9f 01       	movw	r18, r30
    2de0:	23 52       	subi	r18, 0x23	; 35
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	ce 01       	movw	r24, r28
    2de6:	8f 51       	subi	r24, 0x1F	; 31
    2de8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dea:	dc 01       	movw	r26, r24
    2dec:	4d 91       	ld	r20, X+
    2dee:	5d 91       	ld	r21, X+
    2df0:	6d 91       	ld	r22, X+
    2df2:	7c 91       	ld	r23, X
    2df4:	d9 01       	movw	r26, r18
    2df6:	4d 93       	st	X+, r20
    2df8:	5d 93       	st	X+, r21
    2dfa:	6d 93       	st	X+, r22
    2dfc:	7c 93       	st	X, r23
    2dfe:	13 97       	sbiw	r26, 0x03	; 3
    2e00:	9f 01       	movw	r18, r30
    2e02:	2f 51       	subi	r18, 0x1F	; 31
    2e04:	3f 4f       	sbci	r19, 0xFF	; 255
    2e06:	ce 01       	movw	r24, r28
    2e08:	8b 51       	subi	r24, 0x1B	; 27
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	4d 91       	ld	r20, X+
    2e10:	5d 91       	ld	r21, X+
    2e12:	6d 91       	ld	r22, X+
    2e14:	7c 91       	ld	r23, X
    2e16:	d9 01       	movw	r26, r18
    2e18:	4d 93       	st	X+, r20
    2e1a:	5d 93       	st	X+, r21
    2e1c:	6d 93       	st	X+, r22
    2e1e:	7c 93       	st	X, r23
    2e20:	13 97       	sbiw	r26, 0x03	; 3
    2e22:	df 01       	movw	r26, r30
    2e24:	ab 51       	subi	r26, 0x1B	; 27
    2e26:	bf 4f       	sbci	r27, 0xFF	; 255
    2e28:	c7 51       	subi	r28, 0x17	; 23
    2e2a:	df 4f       	sbci	r29, 0xFF	; 255
    2e2c:	48 81       	ld	r20, Y
    2e2e:	59 81       	ldd	r21, Y+1	; 0x01
    2e30:	6a 81       	ldd	r22, Y+2	; 0x02
    2e32:	7b 81       	ldd	r23, Y+3	; 0x03
    2e34:	4d 93       	st	X+, r20
    2e36:	5d 93       	st	X+, r21
    2e38:	6d 93       	st	X+, r22
    2e3a:	7c 93       	st	X, r23
    2e3c:	13 97       	sbiw	r26, 0x03	; 3
	encode (msgPtr, ChecksumErrors);
	encode (msgPtr, NumOfBlownFrames);
	encode (msgPtr, SerialCommunicationBufferOverruns);
				
	return msg;
}
    2e3e:	8e 2f       	mov	r24, r30
    2e40:	9f 2f       	mov	r25, r31
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	08 95       	ret

00002e48 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>:

void SystemTelemetryMessage::buildMessage(byte *message)
{
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	db 01       	movw	r26, r22
	if (message != NULL)
    2e50:	10 97       	sbiw	r26, 0x00	; 0
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0xe>
    2e54:	45 c3       	rjmp	.+1674   	; 0x34e0 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh+0x698>
				 * Copies the the value at the buff pointer location into the given val parameter and
				 * increments the buffer by the sizeof(val)
				 */
				void decode (byte *&buffPtr, byte &val)
				{
					val = *buffPtr;
    2e56:	8c 91       	ld	r24, X
    2e58:	82 83       	std	Z+2, r24	; 0x02
					buffPtr += sizeof(val);
				}
				
				void decode (byte *&buffPtr, float &val)
				{
					memcpy(&val, buffPtr, sizeof(val));
    2e5a:	11 96       	adiw	r26, 0x01	; 1
    2e5c:	4d 91       	ld	r20, X+
    2e5e:	5d 91       	ld	r21, X+
    2e60:	6d 91       	ld	r22, X+
    2e62:	7c 91       	ld	r23, X
    2e64:	14 97       	sbiw	r26, 0x04	; 4
    2e66:	45 83       	std	Z+5, r20	; 0x05
    2e68:	56 83       	std	Z+6, r21	; 0x06
    2e6a:	67 83       	std	Z+7, r22	; 0x07
    2e6c:	70 87       	std	Z+8, r23	; 0x08
    2e6e:	15 96       	adiw	r26, 0x05	; 5
    2e70:	4d 91       	ld	r20, X+
    2e72:	5d 91       	ld	r21, X+
    2e74:	6d 91       	ld	r22, X+
    2e76:	7c 91       	ld	r23, X
    2e78:	18 97       	sbiw	r26, 0x08	; 8
    2e7a:	41 87       	std	Z+9, r20	; 0x09
    2e7c:	52 87       	std	Z+10, r21	; 0x0a
    2e7e:	63 87       	std	Z+11, r22	; 0x0b
    2e80:	74 87       	std	Z+12, r23	; 0x0c
    2e82:	19 96       	adiw	r26, 0x09	; 9
    2e84:	4d 91       	ld	r20, X+
    2e86:	5d 91       	ld	r21, X+
    2e88:	6d 91       	ld	r22, X+
    2e8a:	7c 91       	ld	r23, X
    2e8c:	1c 97       	sbiw	r26, 0x0c	; 12
    2e8e:	45 87       	std	Z+13, r20	; 0x0d
    2e90:	56 87       	std	Z+14, r21	; 0x0e
    2e92:	67 87       	std	Z+15, r22	; 0x0f
    2e94:	70 8b       	std	Z+16, r23	; 0x10
    2e96:	1d 96       	adiw	r26, 0x0d	; 13
    2e98:	4d 91       	ld	r20, X+
    2e9a:	5d 91       	ld	r21, X+
    2e9c:	6d 91       	ld	r22, X+
    2e9e:	7c 91       	ld	r23, X
    2ea0:	50 97       	sbiw	r26, 0x10	; 16
    2ea2:	41 8b       	std	Z+17, r20	; 0x11
    2ea4:	52 8b       	std	Z+18, r21	; 0x12
    2ea6:	63 8b       	std	Z+19, r22	; 0x13
    2ea8:	74 8b       	std	Z+20, r23	; 0x14
    2eaa:	51 96       	adiw	r26, 0x11	; 17
    2eac:	4d 91       	ld	r20, X+
    2eae:	5d 91       	ld	r21, X+
    2eb0:	6d 91       	ld	r22, X+
    2eb2:	7c 91       	ld	r23, X
    2eb4:	54 97       	sbiw	r26, 0x14	; 20
    2eb6:	45 8b       	std	Z+21, r20	; 0x15
    2eb8:	56 8b       	std	Z+22, r21	; 0x16
    2eba:	67 8b       	std	Z+23, r22	; 0x17
    2ebc:	70 8f       	std	Z+24, r23	; 0x18
    2ebe:	55 96       	adiw	r26, 0x15	; 21
    2ec0:	4d 91       	ld	r20, X+
    2ec2:	5d 91       	ld	r21, X+
    2ec4:	6d 91       	ld	r22, X+
    2ec6:	7c 91       	ld	r23, X
    2ec8:	58 97       	sbiw	r26, 0x18	; 24
    2eca:	41 8f       	std	Z+25, r20	; 0x19
    2ecc:	52 8f       	std	Z+26, r21	; 0x1a
    2ece:	63 8f       	std	Z+27, r22	; 0x1b
    2ed0:	74 8f       	std	Z+28, r23	; 0x1c
    2ed2:	59 96       	adiw	r26, 0x19	; 25
    2ed4:	4d 91       	ld	r20, X+
    2ed6:	5d 91       	ld	r21, X+
    2ed8:	6d 91       	ld	r22, X+
    2eda:	7c 91       	ld	r23, X
    2edc:	5c 97       	sbiw	r26, 0x1c	; 28
    2ede:	45 8f       	std	Z+29, r20	; 0x1d
    2ee0:	56 8f       	std	Z+30, r21	; 0x1e
    2ee2:	67 8f       	std	Z+31, r22	; 0x1f
    2ee4:	70 a3       	std	Z+32, r23	; 0x20
    2ee6:	5d 96       	adiw	r26, 0x1d	; 29
    2ee8:	4d 91       	ld	r20, X+
    2eea:	5d 91       	ld	r21, X+
    2eec:	6d 91       	ld	r22, X+
    2eee:	7c 91       	ld	r23, X
    2ef0:	90 97       	sbiw	r26, 0x20	; 32
    2ef2:	41 a3       	std	Z+33, r20	; 0x21
    2ef4:	52 a3       	std	Z+34, r21	; 0x22
    2ef6:	63 a3       	std	Z+35, r22	; 0x23
    2ef8:	74 a3       	std	Z+36, r23	; 0x24
    2efa:	91 96       	adiw	r26, 0x21	; 33
    2efc:	4d 91       	ld	r20, X+
    2efe:	5d 91       	ld	r21, X+
    2f00:	6d 91       	ld	r22, X+
    2f02:	7c 91       	ld	r23, X
    2f04:	94 97       	sbiw	r26, 0x24	; 36
    2f06:	45 a3       	std	Z+37, r20	; 0x25
    2f08:	56 a3       	std	Z+38, r21	; 0x26
    2f0a:	67 a3       	std	Z+39, r22	; 0x27
    2f0c:	70 a7       	std	Z+40, r23	; 0x28
    2f0e:	95 96       	adiw	r26, 0x25	; 37
    2f10:	4d 91       	ld	r20, X+
    2f12:	5d 91       	ld	r21, X+
    2f14:	6d 91       	ld	r22, X+
    2f16:	7c 91       	ld	r23, X
    2f18:	98 97       	sbiw	r26, 0x28	; 40
    2f1a:	41 a7       	std	Z+41, r20	; 0x29
    2f1c:	52 a7       	std	Z+42, r21	; 0x2a
    2f1e:	63 a7       	std	Z+43, r22	; 0x2b
    2f20:	74 a7       	std	Z+44, r23	; 0x2c
    2f22:	99 96       	adiw	r26, 0x29	; 41
    2f24:	4d 91       	ld	r20, X+
    2f26:	5d 91       	ld	r21, X+
    2f28:	6d 91       	ld	r22, X+
    2f2a:	7c 91       	ld	r23, X
    2f2c:	9c 97       	sbiw	r26, 0x2c	; 44
    2f2e:	45 a7       	std	Z+45, r20	; 0x2d
    2f30:	56 a7       	std	Z+46, r21	; 0x2e
    2f32:	67 a7       	std	Z+47, r22	; 0x2f
    2f34:	70 ab       	std	Z+48, r23	; 0x30
    2f36:	9d 96       	adiw	r26, 0x2d	; 45
    2f38:	4d 91       	ld	r20, X+
    2f3a:	5d 91       	ld	r21, X+
    2f3c:	6d 91       	ld	r22, X+
    2f3e:	7c 91       	ld	r23, X
    2f40:	d0 97       	sbiw	r26, 0x30	; 48
    2f42:	41 ab       	std	Z+49, r20	; 0x31
    2f44:	52 ab       	std	Z+50, r21	; 0x32
    2f46:	63 ab       	std	Z+51, r22	; 0x33
    2f48:	74 ab       	std	Z+52, r23	; 0x34
    2f4a:	d1 96       	adiw	r26, 0x31	; 49
    2f4c:	4d 91       	ld	r20, X+
    2f4e:	5d 91       	ld	r21, X+
    2f50:	6d 91       	ld	r22, X+
    2f52:	7c 91       	ld	r23, X
    2f54:	d4 97       	sbiw	r26, 0x34	; 52
    2f56:	45 ab       	std	Z+53, r20	; 0x35
    2f58:	56 ab       	std	Z+54, r21	; 0x36
    2f5a:	67 ab       	std	Z+55, r22	; 0x37
    2f5c:	70 af       	std	Z+56, r23	; 0x38
    2f5e:	d5 96       	adiw	r26, 0x35	; 53
    2f60:	4d 91       	ld	r20, X+
    2f62:	5d 91       	ld	r21, X+
    2f64:	6d 91       	ld	r22, X+
    2f66:	7c 91       	ld	r23, X
    2f68:	d8 97       	sbiw	r26, 0x38	; 56
    2f6a:	41 af       	std	Z+57, r20	; 0x39
    2f6c:	52 af       	std	Z+58, r21	; 0x3a
    2f6e:	63 af       	std	Z+59, r22	; 0x3b
    2f70:	74 af       	std	Z+60, r23	; 0x3c
    2f72:	ef 01       	movw	r28, r30
    2f74:	ed 96       	adiw	r28, 0x3d	; 61
    2f76:	d9 96       	adiw	r26, 0x39	; 57
    2f78:	4d 91       	ld	r20, X+
    2f7a:	5d 91       	ld	r21, X+
    2f7c:	6d 91       	ld	r22, X+
    2f7e:	7c 91       	ld	r23, X
    2f80:	dc 97       	sbiw	r26, 0x3c	; 60
    2f82:	48 83       	st	Y, r20
    2f84:	59 83       	std	Y+1, r21	; 0x01
    2f86:	6a 83       	std	Y+2, r22	; 0x02
    2f88:	7b 83       	std	Y+3, r23	; 0x03
    2f8a:	9f 01       	movw	r18, r30
    2f8c:	2f 5b       	subi	r18, 0xBF	; 191
    2f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f90:	cd 01       	movw	r24, r26
    2f92:	cd 96       	adiw	r24, 0x3d	; 61
    2f94:	ec 01       	movw	r28, r24
    2f96:	48 81       	ld	r20, Y
    2f98:	59 81       	ldd	r21, Y+1	; 0x01
    2f9a:	6a 81       	ldd	r22, Y+2	; 0x02
    2f9c:	7b 81       	ldd	r23, Y+3	; 0x03
    2f9e:	e9 01       	movw	r28, r18
    2fa0:	48 83       	st	Y, r20
    2fa2:	59 83       	std	Y+1, r21	; 0x01
    2fa4:	6a 83       	std	Y+2, r22	; 0x02
    2fa6:	7b 83       	std	Y+3, r23	; 0x03
    2fa8:	9f 01       	movw	r18, r30
    2faa:	2b 5b       	subi	r18, 0xBB	; 187
    2fac:	3f 4f       	sbci	r19, 0xFF	; 255
    2fae:	cd 01       	movw	r24, r26
    2fb0:	8f 5b       	subi	r24, 0xBF	; 191
    2fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb4:	ec 01       	movw	r28, r24
    2fb6:	48 81       	ld	r20, Y
    2fb8:	59 81       	ldd	r21, Y+1	; 0x01
    2fba:	6a 81       	ldd	r22, Y+2	; 0x02
    2fbc:	7b 81       	ldd	r23, Y+3	; 0x03
    2fbe:	e9 01       	movw	r28, r18
    2fc0:	48 83       	st	Y, r20
    2fc2:	59 83       	std	Y+1, r21	; 0x01
    2fc4:	6a 83       	std	Y+2, r22	; 0x02
    2fc6:	7b 83       	std	Y+3, r23	; 0x03
    2fc8:	9f 01       	movw	r18, r30
    2fca:	27 5b       	subi	r18, 0xB7	; 183
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	cd 01       	movw	r24, r26
    2fd0:	8b 5b       	subi	r24, 0xBB	; 187
    2fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd4:	ec 01       	movw	r28, r24
    2fd6:	48 81       	ld	r20, Y
    2fd8:	59 81       	ldd	r21, Y+1	; 0x01
    2fda:	6a 81       	ldd	r22, Y+2	; 0x02
    2fdc:	7b 81       	ldd	r23, Y+3	; 0x03
    2fde:	e9 01       	movw	r28, r18
    2fe0:	48 83       	st	Y, r20
    2fe2:	59 83       	std	Y+1, r21	; 0x01
    2fe4:	6a 83       	std	Y+2, r22	; 0x02
    2fe6:	7b 83       	std	Y+3, r23	; 0x03
    2fe8:	9f 01       	movw	r18, r30
    2fea:	23 5b       	subi	r18, 0xB3	; 179
    2fec:	3f 4f       	sbci	r19, 0xFF	; 255
    2fee:	cd 01       	movw	r24, r26
    2ff0:	87 5b       	subi	r24, 0xB7	; 183
    2ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff4:	ec 01       	movw	r28, r24
    2ff6:	48 81       	ld	r20, Y
    2ff8:	59 81       	ldd	r21, Y+1	; 0x01
    2ffa:	6a 81       	ldd	r22, Y+2	; 0x02
    2ffc:	7b 81       	ldd	r23, Y+3	; 0x03
    2ffe:	e9 01       	movw	r28, r18
    3000:	48 83       	st	Y, r20
    3002:	59 83       	std	Y+1, r21	; 0x01
    3004:	6a 83       	std	Y+2, r22	; 0x02
    3006:	7b 83       	std	Y+3, r23	; 0x03
    3008:	9f 01       	movw	r18, r30
    300a:	2f 5a       	subi	r18, 0xAF	; 175
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	cd 01       	movw	r24, r26
    3010:	83 5b       	subi	r24, 0xB3	; 179
    3012:	9f 4f       	sbci	r25, 0xFF	; 255
    3014:	ec 01       	movw	r28, r24
    3016:	48 81       	ld	r20, Y
    3018:	59 81       	ldd	r21, Y+1	; 0x01
    301a:	6a 81       	ldd	r22, Y+2	; 0x02
    301c:	7b 81       	ldd	r23, Y+3	; 0x03
    301e:	e9 01       	movw	r28, r18
    3020:	48 83       	st	Y, r20
    3022:	59 83       	std	Y+1, r21	; 0x01
    3024:	6a 83       	std	Y+2, r22	; 0x02
    3026:	7b 83       	std	Y+3, r23	; 0x03
    3028:	9f 01       	movw	r18, r30
    302a:	2b 5a       	subi	r18, 0xAB	; 171
    302c:	3f 4f       	sbci	r19, 0xFF	; 255
    302e:	cd 01       	movw	r24, r26
    3030:	8f 5a       	subi	r24, 0xAF	; 175
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	ec 01       	movw	r28, r24
    3036:	48 81       	ld	r20, Y
    3038:	59 81       	ldd	r21, Y+1	; 0x01
    303a:	6a 81       	ldd	r22, Y+2	; 0x02
    303c:	7b 81       	ldd	r23, Y+3	; 0x03
    303e:	e9 01       	movw	r28, r18
    3040:	48 83       	st	Y, r20
    3042:	59 83       	std	Y+1, r21	; 0x01
    3044:	6a 83       	std	Y+2, r22	; 0x02
    3046:	7b 83       	std	Y+3, r23	; 0x03
    3048:	9f 01       	movw	r18, r30
    304a:	27 5a       	subi	r18, 0xA7	; 167
    304c:	3f 4f       	sbci	r19, 0xFF	; 255
    304e:	cd 01       	movw	r24, r26
    3050:	8b 5a       	subi	r24, 0xAB	; 171
    3052:	9f 4f       	sbci	r25, 0xFF	; 255
    3054:	ec 01       	movw	r28, r24
    3056:	48 81       	ld	r20, Y
    3058:	59 81       	ldd	r21, Y+1	; 0x01
    305a:	6a 81       	ldd	r22, Y+2	; 0x02
    305c:	7b 81       	ldd	r23, Y+3	; 0x03
    305e:	e9 01       	movw	r28, r18
    3060:	48 83       	st	Y, r20
    3062:	59 83       	std	Y+1, r21	; 0x01
    3064:	6a 83       	std	Y+2, r22	; 0x02
    3066:	7b 83       	std	Y+3, r23	; 0x03
    3068:	9f 01       	movw	r18, r30
    306a:	23 5a       	subi	r18, 0xA3	; 163
    306c:	3f 4f       	sbci	r19, 0xFF	; 255
    306e:	cd 01       	movw	r24, r26
    3070:	87 5a       	subi	r24, 0xA7	; 167
    3072:	9f 4f       	sbci	r25, 0xFF	; 255
    3074:	ec 01       	movw	r28, r24
    3076:	48 81       	ld	r20, Y
    3078:	59 81       	ldd	r21, Y+1	; 0x01
    307a:	6a 81       	ldd	r22, Y+2	; 0x02
    307c:	7b 81       	ldd	r23, Y+3	; 0x03
    307e:	e9 01       	movw	r28, r18
    3080:	48 83       	st	Y, r20
    3082:	59 83       	std	Y+1, r21	; 0x01
    3084:	6a 83       	std	Y+2, r22	; 0x02
    3086:	7b 83       	std	Y+3, r23	; 0x03
    3088:	9f 01       	movw	r18, r30
    308a:	2f 59       	subi	r18, 0x9F	; 159
    308c:	3f 4f       	sbci	r19, 0xFF	; 255
    308e:	cd 01       	movw	r24, r26
    3090:	83 5a       	subi	r24, 0xA3	; 163
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	ec 01       	movw	r28, r24
    3096:	48 81       	ld	r20, Y
    3098:	59 81       	ldd	r21, Y+1	; 0x01
    309a:	6a 81       	ldd	r22, Y+2	; 0x02
    309c:	7b 81       	ldd	r23, Y+3	; 0x03
    309e:	e9 01       	movw	r28, r18
    30a0:	48 83       	st	Y, r20
    30a2:	59 83       	std	Y+1, r21	; 0x01
    30a4:	6a 83       	std	Y+2, r22	; 0x02
    30a6:	7b 83       	std	Y+3, r23	; 0x03
    30a8:	9f 01       	movw	r18, r30
    30aa:	2b 59       	subi	r18, 0x9B	; 155
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	cd 01       	movw	r24, r26
    30b0:	8f 59       	subi	r24, 0x9F	; 159
    30b2:	9f 4f       	sbci	r25, 0xFF	; 255
    30b4:	ec 01       	movw	r28, r24
    30b6:	48 81       	ld	r20, Y
    30b8:	59 81       	ldd	r21, Y+1	; 0x01
    30ba:	6a 81       	ldd	r22, Y+2	; 0x02
    30bc:	7b 81       	ldd	r23, Y+3	; 0x03
    30be:	e9 01       	movw	r28, r18
    30c0:	48 83       	st	Y, r20
    30c2:	59 83       	std	Y+1, r21	; 0x01
    30c4:	6a 83       	std	Y+2, r22	; 0x02
    30c6:	7b 83       	std	Y+3, r23	; 0x03
    30c8:	9f 01       	movw	r18, r30
    30ca:	27 59       	subi	r18, 0x97	; 151
    30cc:	3f 4f       	sbci	r19, 0xFF	; 255
    30ce:	cd 01       	movw	r24, r26
    30d0:	8b 59       	subi	r24, 0x9B	; 155
    30d2:	9f 4f       	sbci	r25, 0xFF	; 255
    30d4:	ec 01       	movw	r28, r24
    30d6:	48 81       	ld	r20, Y
    30d8:	59 81       	ldd	r21, Y+1	; 0x01
    30da:	6a 81       	ldd	r22, Y+2	; 0x02
    30dc:	7b 81       	ldd	r23, Y+3	; 0x03
    30de:	e9 01       	movw	r28, r18
    30e0:	48 83       	st	Y, r20
    30e2:	59 83       	std	Y+1, r21	; 0x01
    30e4:	6a 83       	std	Y+2, r22	; 0x02
    30e6:	7b 83       	std	Y+3, r23	; 0x03
    30e8:	9f 01       	movw	r18, r30
    30ea:	23 59       	subi	r18, 0x93	; 147
    30ec:	3f 4f       	sbci	r19, 0xFF	; 255
    30ee:	cd 01       	movw	r24, r26
    30f0:	87 59       	subi	r24, 0x97	; 151
    30f2:	9f 4f       	sbci	r25, 0xFF	; 255
    30f4:	ec 01       	movw	r28, r24
    30f6:	48 81       	ld	r20, Y
    30f8:	59 81       	ldd	r21, Y+1	; 0x01
    30fa:	6a 81       	ldd	r22, Y+2	; 0x02
    30fc:	7b 81       	ldd	r23, Y+3	; 0x03
    30fe:	e9 01       	movw	r28, r18
    3100:	48 83       	st	Y, r20
    3102:	59 83       	std	Y+1, r21	; 0x01
    3104:	6a 83       	std	Y+2, r22	; 0x02
    3106:	7b 83       	std	Y+3, r23	; 0x03
    3108:	9f 01       	movw	r18, r30
    310a:	2f 58       	subi	r18, 0x8F	; 143
    310c:	3f 4f       	sbci	r19, 0xFF	; 255
    310e:	cd 01       	movw	r24, r26
    3110:	83 59       	subi	r24, 0x93	; 147
    3112:	9f 4f       	sbci	r25, 0xFF	; 255
    3114:	ec 01       	movw	r28, r24
    3116:	48 81       	ld	r20, Y
    3118:	59 81       	ldd	r21, Y+1	; 0x01
    311a:	6a 81       	ldd	r22, Y+2	; 0x02
    311c:	7b 81       	ldd	r23, Y+3	; 0x03
    311e:	e9 01       	movw	r28, r18
    3120:	48 83       	st	Y, r20
    3122:	59 83       	std	Y+1, r21	; 0x01
    3124:	6a 83       	std	Y+2, r22	; 0x02
    3126:	7b 83       	std	Y+3, r23	; 0x03
    3128:	9f 01       	movw	r18, r30
    312a:	2b 58       	subi	r18, 0x8B	; 139
    312c:	3f 4f       	sbci	r19, 0xFF	; 255
    312e:	cd 01       	movw	r24, r26
    3130:	8f 58       	subi	r24, 0x8F	; 143
    3132:	9f 4f       	sbci	r25, 0xFF	; 255
    3134:	ec 01       	movw	r28, r24
    3136:	48 81       	ld	r20, Y
    3138:	59 81       	ldd	r21, Y+1	; 0x01
    313a:	6a 81       	ldd	r22, Y+2	; 0x02
    313c:	7b 81       	ldd	r23, Y+3	; 0x03
    313e:	e9 01       	movw	r28, r18
    3140:	48 83       	st	Y, r20
    3142:	59 83       	std	Y+1, r21	; 0x01
    3144:	6a 83       	std	Y+2, r22	; 0x02
    3146:	7b 83       	std	Y+3, r23	; 0x03
    3148:	9f 01       	movw	r18, r30
    314a:	27 58       	subi	r18, 0x87	; 135
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	cd 01       	movw	r24, r26
    3150:	8b 58       	subi	r24, 0x8B	; 139
    3152:	9f 4f       	sbci	r25, 0xFF	; 255
    3154:	ec 01       	movw	r28, r24
    3156:	48 81       	ld	r20, Y
    3158:	59 81       	ldd	r21, Y+1	; 0x01
    315a:	6a 81       	ldd	r22, Y+2	; 0x02
    315c:	7b 81       	ldd	r23, Y+3	; 0x03
    315e:	e9 01       	movw	r28, r18
    3160:	48 83       	st	Y, r20
    3162:	59 83       	std	Y+1, r21	; 0x01
    3164:	6a 83       	std	Y+2, r22	; 0x02
    3166:	7b 83       	std	Y+3, r23	; 0x03
    3168:	9f 01       	movw	r18, r30
    316a:	23 58       	subi	r18, 0x83	; 131
    316c:	3f 4f       	sbci	r19, 0xFF	; 255
    316e:	cd 01       	movw	r24, r26
    3170:	87 58       	subi	r24, 0x87	; 135
    3172:	9f 4f       	sbci	r25, 0xFF	; 255
    3174:	ec 01       	movw	r28, r24
    3176:	48 81       	ld	r20, Y
    3178:	59 81       	ldd	r21, Y+1	; 0x01
    317a:	6a 81       	ldd	r22, Y+2	; 0x02
    317c:	7b 81       	ldd	r23, Y+3	; 0x03
    317e:	e9 01       	movw	r28, r18
    3180:	48 83       	st	Y, r20
    3182:	59 83       	std	Y+1, r21	; 0x01
    3184:	6a 83       	std	Y+2, r22	; 0x02
    3186:	7b 83       	std	Y+3, r23	; 0x03
    3188:	9f 01       	movw	r18, r30
    318a:	2f 57       	subi	r18, 0x7F	; 127
    318c:	3f 4f       	sbci	r19, 0xFF	; 255
    318e:	cd 01       	movw	r24, r26
    3190:	83 58       	subi	r24, 0x83	; 131
    3192:	9f 4f       	sbci	r25, 0xFF	; 255
    3194:	ec 01       	movw	r28, r24
    3196:	48 81       	ld	r20, Y
    3198:	59 81       	ldd	r21, Y+1	; 0x01
    319a:	6a 81       	ldd	r22, Y+2	; 0x02
    319c:	7b 81       	ldd	r23, Y+3	; 0x03
    319e:	e9 01       	movw	r28, r18
    31a0:	48 83       	st	Y, r20
    31a2:	59 83       	std	Y+1, r21	; 0x01
    31a4:	6a 83       	std	Y+2, r22	; 0x02
    31a6:	7b 83       	std	Y+3, r23	; 0x03
    31a8:	9f 01       	movw	r18, r30
    31aa:	2b 57       	subi	r18, 0x7B	; 123
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	cd 01       	movw	r24, r26
    31b0:	8f 57       	subi	r24, 0x7F	; 127
    31b2:	9f 4f       	sbci	r25, 0xFF	; 255
    31b4:	ec 01       	movw	r28, r24
    31b6:	48 81       	ld	r20, Y
    31b8:	59 81       	ldd	r21, Y+1	; 0x01
    31ba:	6a 81       	ldd	r22, Y+2	; 0x02
    31bc:	7b 81       	ldd	r23, Y+3	; 0x03
    31be:	e9 01       	movw	r28, r18
    31c0:	48 83       	st	Y, r20
    31c2:	59 83       	std	Y+1, r21	; 0x01
    31c4:	6a 83       	std	Y+2, r22	; 0x02
    31c6:	7b 83       	std	Y+3, r23	; 0x03
    31c8:	9f 01       	movw	r18, r30
    31ca:	27 57       	subi	r18, 0x77	; 119
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	cd 01       	movw	r24, r26
    31d0:	8b 57       	subi	r24, 0x7B	; 123
    31d2:	9f 4f       	sbci	r25, 0xFF	; 255
    31d4:	ec 01       	movw	r28, r24
    31d6:	48 81       	ld	r20, Y
    31d8:	59 81       	ldd	r21, Y+1	; 0x01
    31da:	6a 81       	ldd	r22, Y+2	; 0x02
    31dc:	7b 81       	ldd	r23, Y+3	; 0x03
    31de:	e9 01       	movw	r28, r18
    31e0:	48 83       	st	Y, r20
    31e2:	59 83       	std	Y+1, r21	; 0x01
    31e4:	6a 83       	std	Y+2, r22	; 0x02
    31e6:	7b 83       	std	Y+3, r23	; 0x03
    31e8:	9f 01       	movw	r18, r30
    31ea:	23 57       	subi	r18, 0x73	; 115
    31ec:	3f 4f       	sbci	r19, 0xFF	; 255
    31ee:	cd 01       	movw	r24, r26
    31f0:	87 57       	subi	r24, 0x77	; 119
    31f2:	9f 4f       	sbci	r25, 0xFF	; 255
    31f4:	ec 01       	movw	r28, r24
    31f6:	48 81       	ld	r20, Y
    31f8:	59 81       	ldd	r21, Y+1	; 0x01
    31fa:	6a 81       	ldd	r22, Y+2	; 0x02
    31fc:	7b 81       	ldd	r23, Y+3	; 0x03
    31fe:	e9 01       	movw	r28, r18
    3200:	48 83       	st	Y, r20
    3202:	59 83       	std	Y+1, r21	; 0x01
    3204:	6a 83       	std	Y+2, r22	; 0x02
    3206:	7b 83       	std	Y+3, r23	; 0x03
    3208:	9f 01       	movw	r18, r30
    320a:	2f 56       	subi	r18, 0x6F	; 111
    320c:	3f 4f       	sbci	r19, 0xFF	; 255
    320e:	cd 01       	movw	r24, r26
    3210:	83 57       	subi	r24, 0x73	; 115
    3212:	9f 4f       	sbci	r25, 0xFF	; 255
    3214:	ec 01       	movw	r28, r24
    3216:	48 81       	ld	r20, Y
    3218:	59 81       	ldd	r21, Y+1	; 0x01
    321a:	6a 81       	ldd	r22, Y+2	; 0x02
    321c:	7b 81       	ldd	r23, Y+3	; 0x03
    321e:	e9 01       	movw	r28, r18
    3220:	48 83       	st	Y, r20
    3222:	59 83       	std	Y+1, r21	; 0x01
    3224:	6a 83       	std	Y+2, r22	; 0x02
    3226:	7b 83       	std	Y+3, r23	; 0x03
    3228:	9f 01       	movw	r18, r30
    322a:	2b 56       	subi	r18, 0x6B	; 107
    322c:	3f 4f       	sbci	r19, 0xFF	; 255
    322e:	cd 01       	movw	r24, r26
    3230:	8f 56       	subi	r24, 0x6F	; 111
    3232:	9f 4f       	sbci	r25, 0xFF	; 255
    3234:	ec 01       	movw	r28, r24
    3236:	48 81       	ld	r20, Y
    3238:	59 81       	ldd	r21, Y+1	; 0x01
    323a:	6a 81       	ldd	r22, Y+2	; 0x02
    323c:	7b 81       	ldd	r23, Y+3	; 0x03
    323e:	e9 01       	movw	r28, r18
    3240:	48 83       	st	Y, r20
    3242:	59 83       	std	Y+1, r21	; 0x01
    3244:	6a 83       	std	Y+2, r22	; 0x02
    3246:	7b 83       	std	Y+3, r23	; 0x03
    3248:	9f 01       	movw	r18, r30
    324a:	27 56       	subi	r18, 0x67	; 103
    324c:	3f 4f       	sbci	r19, 0xFF	; 255
    324e:	cd 01       	movw	r24, r26
    3250:	8b 56       	subi	r24, 0x6B	; 107
    3252:	9f 4f       	sbci	r25, 0xFF	; 255
    3254:	ec 01       	movw	r28, r24
    3256:	48 81       	ld	r20, Y
    3258:	59 81       	ldd	r21, Y+1	; 0x01
    325a:	6a 81       	ldd	r22, Y+2	; 0x02
    325c:	7b 81       	ldd	r23, Y+3	; 0x03
    325e:	e9 01       	movw	r28, r18
    3260:	48 83       	st	Y, r20
    3262:	59 83       	std	Y+1, r21	; 0x01
    3264:	6a 83       	std	Y+2, r22	; 0x02
    3266:	7b 83       	std	Y+3, r23	; 0x03
    3268:	9f 01       	movw	r18, r30
    326a:	23 56       	subi	r18, 0x63	; 99
    326c:	3f 4f       	sbci	r19, 0xFF	; 255
    326e:	cd 01       	movw	r24, r26
    3270:	87 56       	subi	r24, 0x67	; 103
    3272:	9f 4f       	sbci	r25, 0xFF	; 255
    3274:	ec 01       	movw	r28, r24
    3276:	48 81       	ld	r20, Y
    3278:	59 81       	ldd	r21, Y+1	; 0x01
    327a:	6a 81       	ldd	r22, Y+2	; 0x02
    327c:	7b 81       	ldd	r23, Y+3	; 0x03
    327e:	e9 01       	movw	r28, r18
    3280:	48 83       	st	Y, r20
    3282:	59 83       	std	Y+1, r21	; 0x01
    3284:	6a 83       	std	Y+2, r22	; 0x02
    3286:	7b 83       	std	Y+3, r23	; 0x03
    3288:	9f 01       	movw	r18, r30
    328a:	2f 55       	subi	r18, 0x5F	; 95
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	cd 01       	movw	r24, r26
    3290:	83 56       	subi	r24, 0x63	; 99
    3292:	9f 4f       	sbci	r25, 0xFF	; 255
    3294:	ec 01       	movw	r28, r24
    3296:	48 81       	ld	r20, Y
    3298:	59 81       	ldd	r21, Y+1	; 0x01
    329a:	6a 81       	ldd	r22, Y+2	; 0x02
    329c:	7b 81       	ldd	r23, Y+3	; 0x03
    329e:	e9 01       	movw	r28, r18
    32a0:	48 83       	st	Y, r20
    32a2:	59 83       	std	Y+1, r21	; 0x01
    32a4:	6a 83       	std	Y+2, r22	; 0x02
    32a6:	7b 83       	std	Y+3, r23	; 0x03
    32a8:	9f 01       	movw	r18, r30
    32aa:	2b 55       	subi	r18, 0x5B	; 91
    32ac:	3f 4f       	sbci	r19, 0xFF	; 255
    32ae:	cd 01       	movw	r24, r26
    32b0:	8f 55       	subi	r24, 0x5F	; 95
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	ec 01       	movw	r28, r24
    32b6:	48 81       	ld	r20, Y
    32b8:	59 81       	ldd	r21, Y+1	; 0x01
    32ba:	6a 81       	ldd	r22, Y+2	; 0x02
    32bc:	7b 81       	ldd	r23, Y+3	; 0x03
    32be:	e9 01       	movw	r28, r18
    32c0:	48 83       	st	Y, r20
    32c2:	59 83       	std	Y+1, r21	; 0x01
    32c4:	6a 83       	std	Y+2, r22	; 0x02
    32c6:	7b 83       	std	Y+3, r23	; 0x03
    32c8:	9f 01       	movw	r18, r30
    32ca:	27 55       	subi	r18, 0x57	; 87
    32cc:	3f 4f       	sbci	r19, 0xFF	; 255
    32ce:	cd 01       	movw	r24, r26
    32d0:	8b 55       	subi	r24, 0x5B	; 91
    32d2:	9f 4f       	sbci	r25, 0xFF	; 255
    32d4:	ec 01       	movw	r28, r24
    32d6:	48 81       	ld	r20, Y
    32d8:	59 81       	ldd	r21, Y+1	; 0x01
    32da:	6a 81       	ldd	r22, Y+2	; 0x02
    32dc:	7b 81       	ldd	r23, Y+3	; 0x03
    32de:	e9 01       	movw	r28, r18
    32e0:	48 83       	st	Y, r20
    32e2:	59 83       	std	Y+1, r21	; 0x01
    32e4:	6a 83       	std	Y+2, r22	; 0x02
    32e6:	7b 83       	std	Y+3, r23	; 0x03
    32e8:	9f 01       	movw	r18, r30
    32ea:	23 55       	subi	r18, 0x53	; 83
    32ec:	3f 4f       	sbci	r19, 0xFF	; 255
    32ee:	cd 01       	movw	r24, r26
    32f0:	87 55       	subi	r24, 0x57	; 87
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	ec 01       	movw	r28, r24
    32f6:	48 81       	ld	r20, Y
    32f8:	59 81       	ldd	r21, Y+1	; 0x01
    32fa:	6a 81       	ldd	r22, Y+2	; 0x02
    32fc:	7b 81       	ldd	r23, Y+3	; 0x03
    32fe:	e9 01       	movw	r28, r18
    3300:	48 83       	st	Y, r20
    3302:	59 83       	std	Y+1, r21	; 0x01
    3304:	6a 83       	std	Y+2, r22	; 0x02
    3306:	7b 83       	std	Y+3, r23	; 0x03
    3308:	9f 01       	movw	r18, r30
    330a:	2f 54       	subi	r18, 0x4F	; 79
    330c:	3f 4f       	sbci	r19, 0xFF	; 255
    330e:	cd 01       	movw	r24, r26
    3310:	83 55       	subi	r24, 0x53	; 83
    3312:	9f 4f       	sbci	r25, 0xFF	; 255
    3314:	ec 01       	movw	r28, r24
    3316:	48 81       	ld	r20, Y
    3318:	59 81       	ldd	r21, Y+1	; 0x01
    331a:	6a 81       	ldd	r22, Y+2	; 0x02
    331c:	7b 81       	ldd	r23, Y+3	; 0x03
    331e:	e9 01       	movw	r28, r18
    3320:	48 83       	st	Y, r20
    3322:	59 83       	std	Y+1, r21	; 0x01
    3324:	6a 83       	std	Y+2, r22	; 0x02
    3326:	7b 83       	std	Y+3, r23	; 0x03
    3328:	9f 01       	movw	r18, r30
    332a:	2b 54       	subi	r18, 0x4B	; 75
    332c:	3f 4f       	sbci	r19, 0xFF	; 255
    332e:	cd 01       	movw	r24, r26
    3330:	8f 54       	subi	r24, 0x4F	; 79
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	ec 01       	movw	r28, r24
    3336:	48 81       	ld	r20, Y
    3338:	59 81       	ldd	r21, Y+1	; 0x01
    333a:	6a 81       	ldd	r22, Y+2	; 0x02
    333c:	7b 81       	ldd	r23, Y+3	; 0x03
    333e:	e9 01       	movw	r28, r18
    3340:	48 83       	st	Y, r20
    3342:	59 83       	std	Y+1, r21	; 0x01
    3344:	6a 83       	std	Y+2, r22	; 0x02
    3346:	7b 83       	std	Y+3, r23	; 0x03
    3348:	9f 01       	movw	r18, r30
    334a:	27 54       	subi	r18, 0x47	; 71
    334c:	3f 4f       	sbci	r19, 0xFF	; 255
    334e:	cd 01       	movw	r24, r26
    3350:	8b 54       	subi	r24, 0x4B	; 75
    3352:	9f 4f       	sbci	r25, 0xFF	; 255
    3354:	ec 01       	movw	r28, r24
    3356:	48 81       	ld	r20, Y
    3358:	59 81       	ldd	r21, Y+1	; 0x01
    335a:	6a 81       	ldd	r22, Y+2	; 0x02
    335c:	7b 81       	ldd	r23, Y+3	; 0x03
    335e:	e9 01       	movw	r28, r18
    3360:	48 83       	st	Y, r20
    3362:	59 83       	std	Y+1, r21	; 0x01
    3364:	6a 83       	std	Y+2, r22	; 0x02
    3366:	7b 83       	std	Y+3, r23	; 0x03
    3368:	9f 01       	movw	r18, r30
    336a:	23 54       	subi	r18, 0x43	; 67
    336c:	3f 4f       	sbci	r19, 0xFF	; 255
    336e:	cd 01       	movw	r24, r26
    3370:	87 54       	subi	r24, 0x47	; 71
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	ec 01       	movw	r28, r24
    3376:	48 81       	ld	r20, Y
    3378:	59 81       	ldd	r21, Y+1	; 0x01
    337a:	6a 81       	ldd	r22, Y+2	; 0x02
    337c:	7b 81       	ldd	r23, Y+3	; 0x03
    337e:	e9 01       	movw	r28, r18
    3380:	48 83       	st	Y, r20
    3382:	59 83       	std	Y+1, r21	; 0x01
    3384:	6a 83       	std	Y+2, r22	; 0x02
    3386:	7b 83       	std	Y+3, r23	; 0x03
    3388:	9f 01       	movw	r18, r30
    338a:	2f 53       	subi	r18, 0x3F	; 63
    338c:	3f 4f       	sbci	r19, 0xFF	; 255
    338e:	cd 01       	movw	r24, r26
    3390:	83 54       	subi	r24, 0x43	; 67
    3392:	9f 4f       	sbci	r25, 0xFF	; 255
    3394:	ec 01       	movw	r28, r24
    3396:	48 81       	ld	r20, Y
    3398:	59 81       	ldd	r21, Y+1	; 0x01
    339a:	6a 81       	ldd	r22, Y+2	; 0x02
    339c:	7b 81       	ldd	r23, Y+3	; 0x03
    339e:	e9 01       	movw	r28, r18
    33a0:	48 83       	st	Y, r20
    33a2:	59 83       	std	Y+1, r21	; 0x01
    33a4:	6a 83       	std	Y+2, r22	; 0x02
    33a6:	7b 83       	std	Y+3, r23	; 0x03
    33a8:	9f 01       	movw	r18, r30
    33aa:	2b 53       	subi	r18, 0x3B	; 59
    33ac:	3f 4f       	sbci	r19, 0xFF	; 255
    33ae:	cd 01       	movw	r24, r26
    33b0:	8f 53       	subi	r24, 0x3F	; 63
    33b2:	9f 4f       	sbci	r25, 0xFF	; 255
    33b4:	ec 01       	movw	r28, r24
    33b6:	48 81       	ld	r20, Y
    33b8:	59 81       	ldd	r21, Y+1	; 0x01
    33ba:	6a 81       	ldd	r22, Y+2	; 0x02
    33bc:	7b 81       	ldd	r23, Y+3	; 0x03
    33be:	e9 01       	movw	r28, r18
    33c0:	48 83       	st	Y, r20
    33c2:	59 83       	std	Y+1, r21	; 0x01
    33c4:	6a 83       	std	Y+2, r22	; 0x02
    33c6:	7b 83       	std	Y+3, r23	; 0x03
    33c8:	9f 01       	movw	r18, r30
    33ca:	27 53       	subi	r18, 0x37	; 55
    33cc:	3f 4f       	sbci	r19, 0xFF	; 255
    33ce:	cd 01       	movw	r24, r26
    33d0:	8b 53       	subi	r24, 0x3B	; 59
    33d2:	9f 4f       	sbci	r25, 0xFF	; 255
    33d4:	ec 01       	movw	r28, r24
    33d6:	48 81       	ld	r20, Y
    33d8:	59 81       	ldd	r21, Y+1	; 0x01
    33da:	6a 81       	ldd	r22, Y+2	; 0x02
    33dc:	7b 81       	ldd	r23, Y+3	; 0x03
    33de:	e9 01       	movw	r28, r18
    33e0:	48 83       	st	Y, r20
    33e2:	59 83       	std	Y+1, r21	; 0x01
    33e4:	6a 83       	std	Y+2, r22	; 0x02
    33e6:	7b 83       	std	Y+3, r23	; 0x03
    33e8:	9f 01       	movw	r18, r30
    33ea:	23 53       	subi	r18, 0x33	; 51
    33ec:	3f 4f       	sbci	r19, 0xFF	; 255
    33ee:	cd 01       	movw	r24, r26
    33f0:	87 53       	subi	r24, 0x37	; 55
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	ec 01       	movw	r28, r24
    33f6:	48 81       	ld	r20, Y
    33f8:	59 81       	ldd	r21, Y+1	; 0x01
    33fa:	6a 81       	ldd	r22, Y+2	; 0x02
    33fc:	7b 81       	ldd	r23, Y+3	; 0x03
    33fe:	e9 01       	movw	r28, r18
    3400:	48 83       	st	Y, r20
    3402:	59 83       	std	Y+1, r21	; 0x01
    3404:	6a 83       	std	Y+2, r22	; 0x02
    3406:	7b 83       	std	Y+3, r23	; 0x03
    3408:	9f 01       	movw	r18, r30
    340a:	2f 52       	subi	r18, 0x2F	; 47
    340c:	3f 4f       	sbci	r19, 0xFF	; 255
    340e:	cd 01       	movw	r24, r26
    3410:	83 53       	subi	r24, 0x33	; 51
    3412:	9f 4f       	sbci	r25, 0xFF	; 255
    3414:	ec 01       	movw	r28, r24
    3416:	48 81       	ld	r20, Y
    3418:	59 81       	ldd	r21, Y+1	; 0x01
    341a:	6a 81       	ldd	r22, Y+2	; 0x02
    341c:	7b 81       	ldd	r23, Y+3	; 0x03
    341e:	e9 01       	movw	r28, r18
    3420:	48 83       	st	Y, r20
    3422:	59 83       	std	Y+1, r21	; 0x01
    3424:	6a 83       	std	Y+2, r22	; 0x02
    3426:	7b 83       	std	Y+3, r23	; 0x03
    3428:	9f 01       	movw	r18, r30
    342a:	2b 52       	subi	r18, 0x2B	; 43
    342c:	3f 4f       	sbci	r19, 0xFF	; 255
    342e:	cd 01       	movw	r24, r26
    3430:	8f 52       	subi	r24, 0x2F	; 47
    3432:	9f 4f       	sbci	r25, 0xFF	; 255
    3434:	ec 01       	movw	r28, r24
    3436:	48 81       	ld	r20, Y
    3438:	59 81       	ldd	r21, Y+1	; 0x01
    343a:	6a 81       	ldd	r22, Y+2	; 0x02
    343c:	7b 81       	ldd	r23, Y+3	; 0x03
    343e:	e9 01       	movw	r28, r18
    3440:	48 83       	st	Y, r20
    3442:	59 83       	std	Y+1, r21	; 0x01
    3444:	6a 83       	std	Y+2, r22	; 0x02
    3446:	7b 83       	std	Y+3, r23	; 0x03
					buffPtr += sizeof(val);
				}
				
				void decode (byte *&buffPtr, long &val)
				{
					memcpy(&val, buffPtr, sizeof(val));
    3448:	9f 01       	movw	r18, r30
    344a:	27 52       	subi	r18, 0x27	; 39
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	cd 01       	movw	r24, r26
    3450:	8b 52       	subi	r24, 0x2B	; 43
    3452:	9f 4f       	sbci	r25, 0xFF	; 255
    3454:	ec 01       	movw	r28, r24
    3456:	48 81       	ld	r20, Y
    3458:	59 81       	ldd	r21, Y+1	; 0x01
    345a:	6a 81       	ldd	r22, Y+2	; 0x02
    345c:	7b 81       	ldd	r23, Y+3	; 0x03
    345e:	e9 01       	movw	r28, r18
    3460:	48 83       	st	Y, r20
    3462:	59 83       	std	Y+1, r21	; 0x01
    3464:	6a 83       	std	Y+2, r22	; 0x02
    3466:	7b 83       	std	Y+3, r23	; 0x03
    3468:	9f 01       	movw	r18, r30
    346a:	23 52       	subi	r18, 0x23	; 35
    346c:	3f 4f       	sbci	r19, 0xFF	; 255
    346e:	cd 01       	movw	r24, r26
    3470:	87 52       	subi	r24, 0x27	; 39
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	ec 01       	movw	r28, r24
    3476:	48 81       	ld	r20, Y
    3478:	59 81       	ldd	r21, Y+1	; 0x01
    347a:	6a 81       	ldd	r22, Y+2	; 0x02
    347c:	7b 81       	ldd	r23, Y+3	; 0x03
    347e:	e9 01       	movw	r28, r18
    3480:	48 83       	st	Y, r20
    3482:	59 83       	std	Y+1, r21	; 0x01
    3484:	6a 83       	std	Y+2, r22	; 0x02
    3486:	7b 83       	std	Y+3, r23	; 0x03
    3488:	9f 01       	movw	r18, r30
    348a:	2f 51       	subi	r18, 0x1F	; 31
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
    348e:	cd 01       	movw	r24, r26
    3490:	83 52       	subi	r24, 0x23	; 35
    3492:	9f 4f       	sbci	r25, 0xFF	; 255
    3494:	ec 01       	movw	r28, r24
    3496:	48 81       	ld	r20, Y
    3498:	59 81       	ldd	r21, Y+1	; 0x01
    349a:	6a 81       	ldd	r22, Y+2	; 0x02
    349c:	7b 81       	ldd	r23, Y+3	; 0x03
    349e:	e9 01       	movw	r28, r18
    34a0:	48 83       	st	Y, r20
    34a2:	59 83       	std	Y+1, r21	; 0x01
    34a4:	6a 83       	std	Y+2, r22	; 0x02
    34a6:	7b 83       	std	Y+3, r23	; 0x03
    34a8:	9f 01       	movw	r18, r30
    34aa:	2b 51       	subi	r18, 0x1B	; 27
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	cd 01       	movw	r24, r26
    34b0:	8f 51       	subi	r24, 0x1F	; 31
    34b2:	9f 4f       	sbci	r25, 0xFF	; 255
    34b4:	ec 01       	movw	r28, r24
    34b6:	48 81       	ld	r20, Y
    34b8:	59 81       	ldd	r21, Y+1	; 0x01
    34ba:	6a 81       	ldd	r22, Y+2	; 0x02
    34bc:	7b 81       	ldd	r23, Y+3	; 0x03
    34be:	e9 01       	movw	r28, r18
    34c0:	48 83       	st	Y, r20
    34c2:	59 83       	std	Y+1, r21	; 0x01
    34c4:	6a 83       	std	Y+2, r22	; 0x02
    34c6:	7b 83       	std	Y+3, r23	; 0x03
    34c8:	e7 51       	subi	r30, 0x17	; 23
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	ab 51       	subi	r26, 0x1B	; 27
    34ce:	bf 4f       	sbci	r27, 0xFF	; 255
    34d0:	4d 91       	ld	r20, X+
    34d2:	5d 91       	ld	r21, X+
    34d4:	6d 91       	ld	r22, X+
    34d6:	7c 91       	ld	r23, X
    34d8:	40 83       	st	Z, r20
    34da:	51 83       	std	Z+1, r21	; 0x01
    34dc:	62 83       	std	Z+2, r22	; 0x02
    34de:	73 83       	std	Z+3, r23	; 0x03
		decode (message, UnrecognizedMsgTypes);
		decode (message, ChecksumErrors);
		decode (message, NumOfBlownFrames);
		decode (message, SerialCommunicationBufferOverruns);
	}
}
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	08 95       	ret

000034e6 <_ZN10helicopter8messages22SystemTelemetryMessage14buildMessageStEPh>:

SystemTelemetryMessage* SystemTelemetryMessage::buildMessageSt(byte *message)
{
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	8c 01       	movw	r16, r24
	SystemTelemetryMessage *msg = new SystemTelemetryMessage();
    34f0:	8d ee       	ldi	r24, 0xED	; 237
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    34f8:	ec 01       	movw	r28, r24
				/**
				 * @param msgType The identifier of this message
				 * @param msgSize The size in bytes of this message
				 */
				Message (byte msgType, int msgSize):
					msgType(msgType), msgSize(msgSize)
    34fa:	82 e0       	ldi	r24, 0x02	; 2
    34fc:	8a 83       	std	Y+2, r24	; 0x02
    34fe:	89 ee       	ldi	r24, 0xE9	; 233
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	9c 83       	std	Y+4, r25	; 0x04
    3504:	8b 83       	std	Y+3, r24	; 0x03
														
					Timeouts(0),
					UnrecognizedMsgTypes(0),
					ChecksumErrors(0),
					NumOfBlownFrames(0), 
					SerialCommunicationBufferOverruns(0)
    3506:	86 e4       	ldi	r24, 0x46	; 70
    3508:	92 e0       	ldi	r25, 0x02	; 2
    350a:	99 83       	std	Y+1, r25	; 0x01
    350c:	88 83       	st	Y, r24
    350e:	1d 82       	std	Y+5, r1	; 0x05
    3510:	1e 82       	std	Y+6, r1	; 0x06
    3512:	1f 82       	std	Y+7, r1	; 0x07
    3514:	18 86       	std	Y+8, r1	; 0x08
    3516:	19 86       	std	Y+9, r1	; 0x09
    3518:	1a 86       	std	Y+10, r1	; 0x0a
    351a:	1b 86       	std	Y+11, r1	; 0x0b
    351c:	1c 86       	std	Y+12, r1	; 0x0c
    351e:	1d 86       	std	Y+13, r1	; 0x0d
    3520:	1e 86       	std	Y+14, r1	; 0x0e
    3522:	1f 86       	std	Y+15, r1	; 0x0f
    3524:	18 8a       	std	Y+16, r1	; 0x10
    3526:	19 8a       	std	Y+17, r1	; 0x11
    3528:	1a 8a       	std	Y+18, r1	; 0x12
    352a:	1b 8a       	std	Y+19, r1	; 0x13
    352c:	1c 8a       	std	Y+20, r1	; 0x14
    352e:	1d 8a       	std	Y+21, r1	; 0x15
    3530:	1e 8a       	std	Y+22, r1	; 0x16
    3532:	1f 8a       	std	Y+23, r1	; 0x17
    3534:	18 8e       	std	Y+24, r1	; 0x18
    3536:	19 8e       	std	Y+25, r1	; 0x19
    3538:	1a 8e       	std	Y+26, r1	; 0x1a
    353a:	1b 8e       	std	Y+27, r1	; 0x1b
    353c:	1c 8e       	std	Y+28, r1	; 0x1c
    353e:	1d 8e       	std	Y+29, r1	; 0x1d
    3540:	1e 8e       	std	Y+30, r1	; 0x1e
    3542:	1f 8e       	std	Y+31, r1	; 0x1f
    3544:	18 a2       	std	Y+32, r1	; 0x20
    3546:	19 a2       	std	Y+33, r1	; 0x21
    3548:	1a a2       	std	Y+34, r1	; 0x22
    354a:	1b a2       	std	Y+35, r1	; 0x23
    354c:	1c a2       	std	Y+36, r1	; 0x24
    354e:	1d a2       	std	Y+37, r1	; 0x25
    3550:	1e a2       	std	Y+38, r1	; 0x26
    3552:	1f a2       	std	Y+39, r1	; 0x27
    3554:	18 a6       	std	Y+40, r1	; 0x28
    3556:	19 a6       	std	Y+41, r1	; 0x29
    3558:	1a a6       	std	Y+42, r1	; 0x2a
    355a:	1b a6       	std	Y+43, r1	; 0x2b
    355c:	1c a6       	std	Y+44, r1	; 0x2c
    355e:	1d a6       	std	Y+45, r1	; 0x2d
    3560:	1e a6       	std	Y+46, r1	; 0x2e
    3562:	1f a6       	std	Y+47, r1	; 0x2f
    3564:	18 aa       	std	Y+48, r1	; 0x30
    3566:	19 aa       	std	Y+49, r1	; 0x31
    3568:	1a aa       	std	Y+50, r1	; 0x32
    356a:	1b aa       	std	Y+51, r1	; 0x33
    356c:	1c aa       	std	Y+52, r1	; 0x34
    356e:	1d aa       	std	Y+53, r1	; 0x35
    3570:	1e aa       	std	Y+54, r1	; 0x36
    3572:	1f aa       	std	Y+55, r1	; 0x37
    3574:	18 ae       	std	Y+56, r1	; 0x38
    3576:	19 ae       	std	Y+57, r1	; 0x39
    3578:	1a ae       	std	Y+58, r1	; 0x3a
    357a:	1b ae       	std	Y+59, r1	; 0x3b
    357c:	1c ae       	std	Y+60, r1	; 0x3c
    357e:	fe 01       	movw	r30, r28
    3580:	fd 96       	adiw	r30, 0x3d	; 61
    3582:	10 82       	st	Z, r1
    3584:	11 82       	std	Z+1, r1	; 0x01
    3586:	12 82       	std	Z+2, r1	; 0x02
    3588:	13 82       	std	Z+3, r1	; 0x03
    358a:	fe 01       	movw	r30, r28
    358c:	ef 5b       	subi	r30, 0xBF	; 191
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	10 82       	st	Z, r1
    3592:	11 82       	std	Z+1, r1	; 0x01
    3594:	12 82       	std	Z+2, r1	; 0x02
    3596:	13 82       	std	Z+3, r1	; 0x03
    3598:	fe 01       	movw	r30, r28
    359a:	eb 5b       	subi	r30, 0xBB	; 187
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	10 82       	st	Z, r1
    35a0:	11 82       	std	Z+1, r1	; 0x01
    35a2:	12 82       	std	Z+2, r1	; 0x02
    35a4:	13 82       	std	Z+3, r1	; 0x03
    35a6:	fe 01       	movw	r30, r28
    35a8:	e7 5b       	subi	r30, 0xB7	; 183
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	10 82       	st	Z, r1
    35ae:	11 82       	std	Z+1, r1	; 0x01
    35b0:	12 82       	std	Z+2, r1	; 0x02
    35b2:	13 82       	std	Z+3, r1	; 0x03
    35b4:	fe 01       	movw	r30, r28
    35b6:	e3 5b       	subi	r30, 0xB3	; 179
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	10 82       	st	Z, r1
    35bc:	11 82       	std	Z+1, r1	; 0x01
    35be:	12 82       	std	Z+2, r1	; 0x02
    35c0:	13 82       	std	Z+3, r1	; 0x03
    35c2:	fe 01       	movw	r30, r28
    35c4:	ef 5a       	subi	r30, 0xAF	; 175
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	10 82       	st	Z, r1
    35ca:	11 82       	std	Z+1, r1	; 0x01
    35cc:	12 82       	std	Z+2, r1	; 0x02
    35ce:	13 82       	std	Z+3, r1	; 0x03
    35d0:	fe 01       	movw	r30, r28
    35d2:	eb 5a       	subi	r30, 0xAB	; 171
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	10 82       	st	Z, r1
    35d8:	11 82       	std	Z+1, r1	; 0x01
    35da:	12 82       	std	Z+2, r1	; 0x02
    35dc:	13 82       	std	Z+3, r1	; 0x03
    35de:	fe 01       	movw	r30, r28
    35e0:	e7 5a       	subi	r30, 0xA7	; 167
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	10 82       	st	Z, r1
    35e6:	11 82       	std	Z+1, r1	; 0x01
    35e8:	12 82       	std	Z+2, r1	; 0x02
    35ea:	13 82       	std	Z+3, r1	; 0x03
    35ec:	fe 01       	movw	r30, r28
    35ee:	e3 5a       	subi	r30, 0xA3	; 163
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	10 82       	st	Z, r1
    35f4:	11 82       	std	Z+1, r1	; 0x01
    35f6:	12 82       	std	Z+2, r1	; 0x02
    35f8:	13 82       	std	Z+3, r1	; 0x03
    35fa:	fe 01       	movw	r30, r28
    35fc:	ef 59       	subi	r30, 0x9F	; 159
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	10 82       	st	Z, r1
    3602:	11 82       	std	Z+1, r1	; 0x01
    3604:	12 82       	std	Z+2, r1	; 0x02
    3606:	13 82       	std	Z+3, r1	; 0x03
    3608:	fe 01       	movw	r30, r28
    360a:	eb 59       	subi	r30, 0x9B	; 155
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	10 82       	st	Z, r1
    3610:	11 82       	std	Z+1, r1	; 0x01
    3612:	12 82       	std	Z+2, r1	; 0x02
    3614:	13 82       	std	Z+3, r1	; 0x03
    3616:	fe 01       	movw	r30, r28
    3618:	e7 59       	subi	r30, 0x97	; 151
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	10 82       	st	Z, r1
    361e:	11 82       	std	Z+1, r1	; 0x01
    3620:	12 82       	std	Z+2, r1	; 0x02
    3622:	13 82       	std	Z+3, r1	; 0x03
    3624:	fe 01       	movw	r30, r28
    3626:	e3 59       	subi	r30, 0x93	; 147
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	10 82       	st	Z, r1
    362c:	11 82       	std	Z+1, r1	; 0x01
    362e:	12 82       	std	Z+2, r1	; 0x02
    3630:	13 82       	std	Z+3, r1	; 0x03
    3632:	fe 01       	movw	r30, r28
    3634:	ef 58       	subi	r30, 0x8F	; 143
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	10 82       	st	Z, r1
    363a:	11 82       	std	Z+1, r1	; 0x01
    363c:	12 82       	std	Z+2, r1	; 0x02
    363e:	13 82       	std	Z+3, r1	; 0x03
    3640:	fe 01       	movw	r30, r28
    3642:	eb 58       	subi	r30, 0x8B	; 139
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	10 82       	st	Z, r1
    3648:	11 82       	std	Z+1, r1	; 0x01
    364a:	12 82       	std	Z+2, r1	; 0x02
    364c:	13 82       	std	Z+3, r1	; 0x03
    364e:	fe 01       	movw	r30, r28
    3650:	e7 58       	subi	r30, 0x87	; 135
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	10 82       	st	Z, r1
    3656:	11 82       	std	Z+1, r1	; 0x01
    3658:	12 82       	std	Z+2, r1	; 0x02
    365a:	13 82       	std	Z+3, r1	; 0x03
    365c:	fe 01       	movw	r30, r28
    365e:	e3 58       	subi	r30, 0x83	; 131
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	10 82       	st	Z, r1
    3664:	11 82       	std	Z+1, r1	; 0x01
    3666:	12 82       	std	Z+2, r1	; 0x02
    3668:	13 82       	std	Z+3, r1	; 0x03
    366a:	fe 01       	movw	r30, r28
    366c:	ef 57       	subi	r30, 0x7F	; 127
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	10 82       	st	Z, r1
    3672:	11 82       	std	Z+1, r1	; 0x01
    3674:	12 82       	std	Z+2, r1	; 0x02
    3676:	13 82       	std	Z+3, r1	; 0x03
    3678:	fe 01       	movw	r30, r28
    367a:	eb 57       	subi	r30, 0x7B	; 123
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	10 82       	st	Z, r1
    3680:	11 82       	std	Z+1, r1	; 0x01
    3682:	12 82       	std	Z+2, r1	; 0x02
    3684:	13 82       	std	Z+3, r1	; 0x03
    3686:	fe 01       	movw	r30, r28
    3688:	e7 57       	subi	r30, 0x77	; 119
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	10 82       	st	Z, r1
    368e:	11 82       	std	Z+1, r1	; 0x01
    3690:	12 82       	std	Z+2, r1	; 0x02
    3692:	13 82       	std	Z+3, r1	; 0x03
    3694:	fe 01       	movw	r30, r28
    3696:	e3 57       	subi	r30, 0x73	; 115
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	10 82       	st	Z, r1
    369c:	11 82       	std	Z+1, r1	; 0x01
    369e:	12 82       	std	Z+2, r1	; 0x02
    36a0:	13 82       	std	Z+3, r1	; 0x03
    36a2:	fe 01       	movw	r30, r28
    36a4:	ef 56       	subi	r30, 0x6F	; 111
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	10 82       	st	Z, r1
    36aa:	11 82       	std	Z+1, r1	; 0x01
    36ac:	12 82       	std	Z+2, r1	; 0x02
    36ae:	13 82       	std	Z+3, r1	; 0x03
    36b0:	fe 01       	movw	r30, r28
    36b2:	eb 56       	subi	r30, 0x6B	; 107
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	10 82       	st	Z, r1
    36b8:	11 82       	std	Z+1, r1	; 0x01
    36ba:	12 82       	std	Z+2, r1	; 0x02
    36bc:	13 82       	std	Z+3, r1	; 0x03
    36be:	fe 01       	movw	r30, r28
    36c0:	e7 56       	subi	r30, 0x67	; 103
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	10 82       	st	Z, r1
    36c6:	11 82       	std	Z+1, r1	; 0x01
    36c8:	12 82       	std	Z+2, r1	; 0x02
    36ca:	13 82       	std	Z+3, r1	; 0x03
    36cc:	fe 01       	movw	r30, r28
    36ce:	e3 56       	subi	r30, 0x63	; 99
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	10 82       	st	Z, r1
    36d4:	11 82       	std	Z+1, r1	; 0x01
    36d6:	12 82       	std	Z+2, r1	; 0x02
    36d8:	13 82       	std	Z+3, r1	; 0x03
    36da:	fe 01       	movw	r30, r28
    36dc:	ef 55       	subi	r30, 0x5F	; 95
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	10 82       	st	Z, r1
    36e2:	11 82       	std	Z+1, r1	; 0x01
    36e4:	12 82       	std	Z+2, r1	; 0x02
    36e6:	13 82       	std	Z+3, r1	; 0x03
    36e8:	fe 01       	movw	r30, r28
    36ea:	eb 55       	subi	r30, 0x5B	; 91
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	10 82       	st	Z, r1
    36f0:	11 82       	std	Z+1, r1	; 0x01
    36f2:	12 82       	std	Z+2, r1	; 0x02
    36f4:	13 82       	std	Z+3, r1	; 0x03
    36f6:	fe 01       	movw	r30, r28
    36f8:	e7 55       	subi	r30, 0x57	; 87
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	10 82       	st	Z, r1
    36fe:	11 82       	std	Z+1, r1	; 0x01
    3700:	12 82       	std	Z+2, r1	; 0x02
    3702:	13 82       	std	Z+3, r1	; 0x03
    3704:	fe 01       	movw	r30, r28
    3706:	e3 55       	subi	r30, 0x53	; 83
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	10 82       	st	Z, r1
    370c:	11 82       	std	Z+1, r1	; 0x01
    370e:	12 82       	std	Z+2, r1	; 0x02
    3710:	13 82       	std	Z+3, r1	; 0x03
    3712:	fe 01       	movw	r30, r28
    3714:	ef 54       	subi	r30, 0x4F	; 79
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	10 82       	st	Z, r1
    371a:	11 82       	std	Z+1, r1	; 0x01
    371c:	12 82       	std	Z+2, r1	; 0x02
    371e:	13 82       	std	Z+3, r1	; 0x03
    3720:	fe 01       	movw	r30, r28
    3722:	eb 54       	subi	r30, 0x4B	; 75
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	10 82       	st	Z, r1
    3728:	11 82       	std	Z+1, r1	; 0x01
    372a:	12 82       	std	Z+2, r1	; 0x02
    372c:	13 82       	std	Z+3, r1	; 0x03
    372e:	fe 01       	movw	r30, r28
    3730:	e7 54       	subi	r30, 0x47	; 71
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	10 82       	st	Z, r1
    3736:	11 82       	std	Z+1, r1	; 0x01
    3738:	12 82       	std	Z+2, r1	; 0x02
    373a:	13 82       	std	Z+3, r1	; 0x03
    373c:	fe 01       	movw	r30, r28
    373e:	e3 54       	subi	r30, 0x43	; 67
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	10 82       	st	Z, r1
    3744:	11 82       	std	Z+1, r1	; 0x01
    3746:	12 82       	std	Z+2, r1	; 0x02
    3748:	13 82       	std	Z+3, r1	; 0x03
    374a:	fe 01       	movw	r30, r28
    374c:	ef 53       	subi	r30, 0x3F	; 63
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	10 82       	st	Z, r1
    3752:	11 82       	std	Z+1, r1	; 0x01
    3754:	12 82       	std	Z+2, r1	; 0x02
    3756:	13 82       	std	Z+3, r1	; 0x03
    3758:	fe 01       	movw	r30, r28
    375a:	eb 53       	subi	r30, 0x3B	; 59
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	10 82       	st	Z, r1
    3760:	11 82       	std	Z+1, r1	; 0x01
    3762:	12 82       	std	Z+2, r1	; 0x02
    3764:	13 82       	std	Z+3, r1	; 0x03
    3766:	fe 01       	movw	r30, r28
    3768:	e7 53       	subi	r30, 0x37	; 55
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	10 82       	st	Z, r1
    376e:	11 82       	std	Z+1, r1	; 0x01
    3770:	12 82       	std	Z+2, r1	; 0x02
    3772:	13 82       	std	Z+3, r1	; 0x03
    3774:	fe 01       	movw	r30, r28
    3776:	e3 53       	subi	r30, 0x33	; 51
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	10 82       	st	Z, r1
    377c:	11 82       	std	Z+1, r1	; 0x01
    377e:	12 82       	std	Z+2, r1	; 0x02
    3780:	13 82       	std	Z+3, r1	; 0x03
    3782:	fe 01       	movw	r30, r28
    3784:	ef 52       	subi	r30, 0x2F	; 47
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	10 82       	st	Z, r1
    378a:	11 82       	std	Z+1, r1	; 0x01
    378c:	12 82       	std	Z+2, r1	; 0x02
    378e:	13 82       	std	Z+3, r1	; 0x03
    3790:	fe 01       	movw	r30, r28
    3792:	eb 52       	subi	r30, 0x2B	; 43
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	10 82       	st	Z, r1
    3798:	11 82       	std	Z+1, r1	; 0x01
    379a:	12 82       	std	Z+2, r1	; 0x02
    379c:	13 82       	std	Z+3, r1	; 0x03
    379e:	fe 01       	movw	r30, r28
    37a0:	e7 52       	subi	r30, 0x27	; 39
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	10 82       	st	Z, r1
    37a6:	11 82       	std	Z+1, r1	; 0x01
    37a8:	12 82       	std	Z+2, r1	; 0x02
    37aa:	13 82       	std	Z+3, r1	; 0x03
    37ac:	fe 01       	movw	r30, r28
    37ae:	e3 52       	subi	r30, 0x23	; 35
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	10 82       	st	Z, r1
    37b4:	11 82       	std	Z+1, r1	; 0x01
    37b6:	12 82       	std	Z+2, r1	; 0x02
    37b8:	13 82       	std	Z+3, r1	; 0x03
    37ba:	fe 01       	movw	r30, r28
    37bc:	ef 51       	subi	r30, 0x1F	; 31
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	10 82       	st	Z, r1
    37c2:	11 82       	std	Z+1, r1	; 0x01
    37c4:	12 82       	std	Z+2, r1	; 0x02
    37c6:	13 82       	std	Z+3, r1	; 0x03
    37c8:	fe 01       	movw	r30, r28
    37ca:	eb 51       	subi	r30, 0x1B	; 27
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	10 82       	st	Z, r1
    37d0:	11 82       	std	Z+1, r1	; 0x01
    37d2:	12 82       	std	Z+2, r1	; 0x02
    37d4:	13 82       	std	Z+3, r1	; 0x03
    37d6:	fe 01       	movw	r30, r28
    37d8:	e7 51       	subi	r30, 0x17	; 23
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	10 82       	st	Z, r1
    37de:	11 82       	std	Z+1, r1	; 0x01
    37e0:	12 82       	std	Z+2, r1	; 0x02
    37e2:	13 82       	std	Z+3, r1	; 0x03
	msg->buildMessage(message);
    37e4:	b8 01       	movw	r22, r16
    37e6:	ce 01       	movw	r24, r28
    37e8:	0e 94 24 17 	call	0x2e48	; 0x2e48 <_ZN10helicopter8messages22SystemTelemetryMessage12buildMessageEPh>
	
	return msg;
}
    37ec:	8c 2f       	mov	r24, r28
    37ee:	9d 2f       	mov	r25, r29
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	08 95       	ret

000037fa <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>:

SystemTelemetryMessage * SystemTelemetryMessage::buildMessageFromModel(SystemModel *model)
{
    37fa:	2f 92       	push	r2
    37fc:	3f 92       	push	r3
    37fe:	4f 92       	push	r4
    3800:	5f 92       	push	r5
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	a2 97       	sbiw	r28, 0x22	; 34
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	de bf       	out	0x3e, r29	; 62
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	cd bf       	out	0x3d, r28	; 61
    382e:	8c 01       	movw	r16, r24
	SystemTelemetryMessage *message = new SystemTelemetryMessage();
    3830:	8d ee       	ldi	r24, 0xED	; 237
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    3838:	98 a3       	std	Y+32, r25	; 0x20
    383a:	8f 8f       	std	Y+31, r24	; 0x1f
    383c:	82 e0       	ldi	r24, 0x02	; 2
    383e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3840:	f8 a1       	ldd	r31, Y+32	; 0x20
    3842:	82 83       	std	Z+2, r24	; 0x02
    3844:	89 ee       	ldi	r24, 0xE9	; 233
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	94 83       	std	Z+4, r25	; 0x04
    384a:	83 83       	std	Z+3, r24	; 0x03
    384c:	86 e4       	ldi	r24, 0x46	; 70
    384e:	92 e0       	ldi	r25, 0x02	; 2
    3850:	91 83       	std	Z+1, r25	; 0x01
    3852:	80 83       	st	Z, r24
    3854:	15 82       	std	Z+5, r1	; 0x05
    3856:	16 82       	std	Z+6, r1	; 0x06
    3858:	17 82       	std	Z+7, r1	; 0x07
    385a:	10 86       	std	Z+8, r1	; 0x08
    385c:	11 86       	std	Z+9, r1	; 0x09
    385e:	12 86       	std	Z+10, r1	; 0x0a
    3860:	13 86       	std	Z+11, r1	; 0x0b
    3862:	14 86       	std	Z+12, r1	; 0x0c
    3864:	15 86       	std	Z+13, r1	; 0x0d
    3866:	16 86       	std	Z+14, r1	; 0x0e
    3868:	17 86       	std	Z+15, r1	; 0x0f
    386a:	10 8a       	std	Z+16, r1	; 0x10
    386c:	11 8a       	std	Z+17, r1	; 0x11
    386e:	12 8a       	std	Z+18, r1	; 0x12
    3870:	13 8a       	std	Z+19, r1	; 0x13
    3872:	14 8a       	std	Z+20, r1	; 0x14
    3874:	15 8a       	std	Z+21, r1	; 0x15
    3876:	16 8a       	std	Z+22, r1	; 0x16
    3878:	17 8a       	std	Z+23, r1	; 0x17
    387a:	10 8e       	std	Z+24, r1	; 0x18
    387c:	11 8e       	std	Z+25, r1	; 0x19
    387e:	12 8e       	std	Z+26, r1	; 0x1a
    3880:	13 8e       	std	Z+27, r1	; 0x1b
    3882:	14 8e       	std	Z+28, r1	; 0x1c
    3884:	15 8e       	std	Z+29, r1	; 0x1d
    3886:	16 8e       	std	Z+30, r1	; 0x1e
    3888:	17 8e       	std	Z+31, r1	; 0x1f
    388a:	10 a2       	std	Z+32, r1	; 0x20
    388c:	11 a2       	std	Z+33, r1	; 0x21
    388e:	12 a2       	std	Z+34, r1	; 0x22
    3890:	13 a2       	std	Z+35, r1	; 0x23
    3892:	14 a2       	std	Z+36, r1	; 0x24
    3894:	15 a2       	std	Z+37, r1	; 0x25
    3896:	16 a2       	std	Z+38, r1	; 0x26
    3898:	17 a2       	std	Z+39, r1	; 0x27
    389a:	10 a6       	std	Z+40, r1	; 0x28
    389c:	11 a6       	std	Z+41, r1	; 0x29
    389e:	12 a6       	std	Z+42, r1	; 0x2a
    38a0:	13 a6       	std	Z+43, r1	; 0x2b
    38a2:	14 a6       	std	Z+44, r1	; 0x2c
    38a4:	15 a6       	std	Z+45, r1	; 0x2d
    38a6:	16 a6       	std	Z+46, r1	; 0x2e
    38a8:	17 a6       	std	Z+47, r1	; 0x2f
    38aa:	10 aa       	std	Z+48, r1	; 0x30
    38ac:	11 aa       	std	Z+49, r1	; 0x31
    38ae:	12 aa       	std	Z+50, r1	; 0x32
    38b0:	13 aa       	std	Z+51, r1	; 0x33
    38b2:	14 aa       	std	Z+52, r1	; 0x34
    38b4:	15 aa       	std	Z+53, r1	; 0x35
    38b6:	16 aa       	std	Z+54, r1	; 0x36
    38b8:	17 aa       	std	Z+55, r1	; 0x37
    38ba:	10 ae       	std	Z+56, r1	; 0x38
    38bc:	11 ae       	std	Z+57, r1	; 0x39
    38be:	12 ae       	std	Z+58, r1	; 0x3a
    38c0:	13 ae       	std	Z+59, r1	; 0x3b
    38c2:	14 ae       	std	Z+60, r1	; 0x3c
    38c4:	df 01       	movw	r26, r30
    38c6:	dd 96       	adiw	r26, 0x3d	; 61
    38c8:	1d 92       	st	X+, r1
    38ca:	1d 92       	st	X+, r1
    38cc:	1d 92       	st	X+, r1
    38ce:	1c 92       	st	X, r1
    38d0:	13 97       	sbiw	r26, 0x03	; 3
    38d2:	cf 01       	movw	r24, r30
    38d4:	8f 5b       	subi	r24, 0xBF	; 191
    38d6:	9f 4f       	sbci	r25, 0xFF	; 255
    38d8:	fc 01       	movw	r30, r24
    38da:	10 82       	st	Z, r1
    38dc:	11 82       	std	Z+1, r1	; 0x01
    38de:	12 82       	std	Z+2, r1	; 0x02
    38e0:	13 82       	std	Z+3, r1	; 0x03
    38e2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    38e4:	38 a1       	ldd	r19, Y+32	; 0x20
    38e6:	2b 5b       	subi	r18, 0xBB	; 187
    38e8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ea:	3a a3       	std	Y+34, r19	; 0x22
    38ec:	29 a3       	std	Y+33, r18	; 0x21
    38ee:	f9 01       	movw	r30, r18
    38f0:	10 82       	st	Z, r1
    38f2:	11 82       	std	Z+1, r1	; 0x01
    38f4:	12 82       	std	Z+2, r1	; 0x02
    38f6:	13 82       	std	Z+3, r1	; 0x03
    38f8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    38fa:	38 a1       	ldd	r19, Y+32	; 0x20
    38fc:	27 5b       	subi	r18, 0xB7	; 183
    38fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3900:	f9 01       	movw	r30, r18
    3902:	10 82       	st	Z, r1
    3904:	11 82       	std	Z+1, r1	; 0x01
    3906:	12 82       	std	Z+2, r1	; 0x02
    3908:	13 82       	std	Z+3, r1	; 0x03
    390a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    390c:	38 a1       	ldd	r19, Y+32	; 0x20
    390e:	23 5b       	subi	r18, 0xB3	; 179
    3910:	3f 4f       	sbci	r19, 0xFF	; 255
    3912:	f9 01       	movw	r30, r18
    3914:	10 82       	st	Z, r1
    3916:	11 82       	std	Z+1, r1	; 0x01
    3918:	12 82       	std	Z+2, r1	; 0x02
    391a:	13 82       	std	Z+3, r1	; 0x03
    391c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    391e:	38 a1       	ldd	r19, Y+32	; 0x20
    3920:	2f 5a       	subi	r18, 0xAF	; 175
    3922:	3f 4f       	sbci	r19, 0xFF	; 255
    3924:	f9 01       	movw	r30, r18
    3926:	10 82       	st	Z, r1
    3928:	11 82       	std	Z+1, r1	; 0x01
    392a:	12 82       	std	Z+2, r1	; 0x02
    392c:	13 82       	std	Z+3, r1	; 0x03
    392e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3930:	38 a1       	ldd	r19, Y+32	; 0x20
    3932:	2b 5a       	subi	r18, 0xAB	; 171
    3934:	3f 4f       	sbci	r19, 0xFF	; 255
    3936:	f9 01       	movw	r30, r18
    3938:	10 82       	st	Z, r1
    393a:	11 82       	std	Z+1, r1	; 0x01
    393c:	12 82       	std	Z+2, r1	; 0x02
    393e:	13 82       	std	Z+3, r1	; 0x03
    3940:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3942:	38 a1       	ldd	r19, Y+32	; 0x20
    3944:	27 5a       	subi	r18, 0xA7	; 167
    3946:	3f 4f       	sbci	r19, 0xFF	; 255
    3948:	f9 01       	movw	r30, r18
    394a:	10 82       	st	Z, r1
    394c:	11 82       	std	Z+1, r1	; 0x01
    394e:	12 82       	std	Z+2, r1	; 0x02
    3950:	13 82       	std	Z+3, r1	; 0x03
    3952:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3954:	38 a1       	ldd	r19, Y+32	; 0x20
    3956:	23 5a       	subi	r18, 0xA3	; 163
    3958:	3f 4f       	sbci	r19, 0xFF	; 255
    395a:	3a 83       	std	Y+2, r19	; 0x02
    395c:	29 83       	std	Y+1, r18	; 0x01
    395e:	f9 01       	movw	r30, r18
    3960:	10 82       	st	Z, r1
    3962:	11 82       	std	Z+1, r1	; 0x01
    3964:	12 82       	std	Z+2, r1	; 0x02
    3966:	13 82       	std	Z+3, r1	; 0x03
    3968:	6f 8d       	ldd	r22, Y+31	; 0x1f
    396a:	78 a1       	ldd	r23, Y+32	; 0x20
    396c:	6f 59       	subi	r22, 0x9F	; 159
    396e:	7f 4f       	sbci	r23, 0xFF	; 255
    3970:	fb 01       	movw	r30, r22
    3972:	10 82       	st	Z, r1
    3974:	11 82       	std	Z+1, r1	; 0x01
    3976:	12 82       	std	Z+2, r1	; 0x02
    3978:	13 82       	std	Z+3, r1	; 0x03
    397a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    397c:	38 a1       	ldd	r19, Y+32	; 0x20
    397e:	2b 59       	subi	r18, 0x9B	; 155
    3980:	3f 4f       	sbci	r19, 0xFF	; 255
    3982:	f9 01       	movw	r30, r18
    3984:	10 82       	st	Z, r1
    3986:	11 82       	std	Z+1, r1	; 0x01
    3988:	12 82       	std	Z+2, r1	; 0x02
    398a:	13 82       	std	Z+3, r1	; 0x03
    398c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    398e:	38 a1       	ldd	r19, Y+32	; 0x20
    3990:	27 59       	subi	r18, 0x97	; 151
    3992:	3f 4f       	sbci	r19, 0xFF	; 255
    3994:	3c 83       	std	Y+4, r19	; 0x04
    3996:	2b 83       	std	Y+3, r18	; 0x03
    3998:	f9 01       	movw	r30, r18
    399a:	10 82       	st	Z, r1
    399c:	11 82       	std	Z+1, r1	; 0x01
    399e:	12 82       	std	Z+2, r1	; 0x02
    39a0:	13 82       	std	Z+3, r1	; 0x03
    39a2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    39a4:	38 a1       	ldd	r19, Y+32	; 0x20
    39a6:	23 59       	subi	r18, 0x93	; 147
    39a8:	3f 4f       	sbci	r19, 0xFF	; 255
    39aa:	3e 83       	std	Y+6, r19	; 0x06
    39ac:	2d 83       	std	Y+5, r18	; 0x05
    39ae:	f9 01       	movw	r30, r18
    39b0:	10 82       	st	Z, r1
    39b2:	11 82       	std	Z+1, r1	; 0x01
    39b4:	12 82       	std	Z+2, r1	; 0x02
    39b6:	13 82       	std	Z+3, r1	; 0x03
    39b8:	4f 8c       	ldd	r4, Y+31	; 0x1f
    39ba:	58 a0       	ldd	r5, Y+32	; 0x20
    39bc:	f1 e7       	ldi	r31, 0x71	; 113
    39be:	4f 0e       	add	r4, r31
    39c0:	51 1c       	adc	r5, r1
    39c2:	f2 01       	movw	r30, r4
    39c4:	10 82       	st	Z, r1
    39c6:	11 82       	std	Z+1, r1	; 0x01
    39c8:	12 82       	std	Z+2, r1	; 0x02
    39ca:	13 82       	std	Z+3, r1	; 0x03
    39cc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    39ce:	38 a1       	ldd	r19, Y+32	; 0x20
    39d0:	2b 58       	subi	r18, 0x8B	; 139
    39d2:	3f 4f       	sbci	r19, 0xFF	; 255
    39d4:	38 87       	std	Y+8, r19	; 0x08
    39d6:	2f 83       	std	Y+7, r18	; 0x07
    39d8:	f9 01       	movw	r30, r18
    39da:	10 82       	st	Z, r1
    39dc:	11 82       	std	Z+1, r1	; 0x01
    39de:	12 82       	std	Z+2, r1	; 0x02
    39e0:	13 82       	std	Z+3, r1	; 0x03
    39e2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    39e4:	38 a1       	ldd	r19, Y+32	; 0x20
    39e6:	27 58       	subi	r18, 0x87	; 135
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	3a 87       	std	Y+10, r19	; 0x0a
    39ec:	29 87       	std	Y+9, r18	; 0x09
    39ee:	f9 01       	movw	r30, r18
    39f0:	10 82       	st	Z, r1
    39f2:	11 82       	std	Z+1, r1	; 0x01
    39f4:	12 82       	std	Z+2, r1	; 0x02
    39f6:	13 82       	std	Z+3, r1	; 0x03
    39f8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    39fa:	38 a1       	ldd	r19, Y+32	; 0x20
    39fc:	23 58       	subi	r18, 0x83	; 131
    39fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3a00:	3c 87       	std	Y+12, r19	; 0x0c
    3a02:	2b 87       	std	Y+11, r18	; 0x0b
    3a04:	f9 01       	movw	r30, r18
    3a06:	10 82       	st	Z, r1
    3a08:	11 82       	std	Z+1, r1	; 0x01
    3a0a:	12 82       	std	Z+2, r1	; 0x02
    3a0c:	13 82       	std	Z+3, r1	; 0x03
    3a0e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a10:	38 a1       	ldd	r19, Y+32	; 0x20
    3a12:	2f 57       	subi	r18, 0x7F	; 127
    3a14:	3f 4f       	sbci	r19, 0xFF	; 255
    3a16:	3e 87       	std	Y+14, r19	; 0x0e
    3a18:	2d 87       	std	Y+13, r18	; 0x0d
    3a1a:	f9 01       	movw	r30, r18
    3a1c:	10 82       	st	Z, r1
    3a1e:	11 82       	std	Z+1, r1	; 0x01
    3a20:	12 82       	std	Z+2, r1	; 0x02
    3a22:	13 82       	std	Z+3, r1	; 0x03
    3a24:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a26:	38 a1       	ldd	r19, Y+32	; 0x20
    3a28:	2b 57       	subi	r18, 0x7B	; 123
    3a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2c:	f9 01       	movw	r30, r18
    3a2e:	10 82       	st	Z, r1
    3a30:	11 82       	std	Z+1, r1	; 0x01
    3a32:	12 82       	std	Z+2, r1	; 0x02
    3a34:	13 82       	std	Z+3, r1	; 0x03
    3a36:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a38:	38 a1       	ldd	r19, Y+32	; 0x20
    3a3a:	27 57       	subi	r18, 0x77	; 119
    3a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3e:	f9 01       	movw	r30, r18
    3a40:	10 82       	st	Z, r1
    3a42:	11 82       	std	Z+1, r1	; 0x01
    3a44:	12 82       	std	Z+2, r1	; 0x02
    3a46:	13 82       	std	Z+3, r1	; 0x03
    3a48:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a4a:	38 a1       	ldd	r19, Y+32	; 0x20
    3a4c:	23 57       	subi	r18, 0x73	; 115
    3a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a50:	f9 01       	movw	r30, r18
    3a52:	10 82       	st	Z, r1
    3a54:	11 82       	std	Z+1, r1	; 0x01
    3a56:	12 82       	std	Z+2, r1	; 0x02
    3a58:	13 82       	std	Z+3, r1	; 0x03
    3a5a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a5c:	38 a1       	ldd	r19, Y+32	; 0x20
    3a5e:	2f 56       	subi	r18, 0x6F	; 111
    3a60:	3f 4f       	sbci	r19, 0xFF	; 255
    3a62:	f9 01       	movw	r30, r18
    3a64:	10 82       	st	Z, r1
    3a66:	11 82       	std	Z+1, r1	; 0x01
    3a68:	12 82       	std	Z+2, r1	; 0x02
    3a6a:	13 82       	std	Z+3, r1	; 0x03
    3a6c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a6e:	38 a1       	ldd	r19, Y+32	; 0x20
    3a70:	2b 56       	subi	r18, 0x6B	; 107
    3a72:	3f 4f       	sbci	r19, 0xFF	; 255
    3a74:	f9 01       	movw	r30, r18
    3a76:	10 82       	st	Z, r1
    3a78:	11 82       	std	Z+1, r1	; 0x01
    3a7a:	12 82       	std	Z+2, r1	; 0x02
    3a7c:	13 82       	std	Z+3, r1	; 0x03
    3a7e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a80:	38 a1       	ldd	r19, Y+32	; 0x20
    3a82:	27 56       	subi	r18, 0x67	; 103
    3a84:	3f 4f       	sbci	r19, 0xFF	; 255
    3a86:	38 8b       	std	Y+16, r19	; 0x10
    3a88:	2f 87       	std	Y+15, r18	; 0x0f
    3a8a:	f9 01       	movw	r30, r18
    3a8c:	10 82       	st	Z, r1
    3a8e:	11 82       	std	Z+1, r1	; 0x01
    3a90:	12 82       	std	Z+2, r1	; 0x02
    3a92:	13 82       	std	Z+3, r1	; 0x03
    3a94:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a96:	38 a1       	ldd	r19, Y+32	; 0x20
    3a98:	23 56       	subi	r18, 0x63	; 99
    3a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9c:	3a 8b       	std	Y+18, r19	; 0x12
    3a9e:	29 8b       	std	Y+17, r18	; 0x11
    3aa0:	f9 01       	movw	r30, r18
    3aa2:	10 82       	st	Z, r1
    3aa4:	11 82       	std	Z+1, r1	; 0x01
    3aa6:	12 82       	std	Z+2, r1	; 0x02
    3aa8:	13 82       	std	Z+3, r1	; 0x03
    3aaa:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3aac:	38 a1       	ldd	r19, Y+32	; 0x20
    3aae:	2f 55       	subi	r18, 0x5F	; 95
    3ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab2:	f9 01       	movw	r30, r18
    3ab4:	10 82       	st	Z, r1
    3ab6:	11 82       	std	Z+1, r1	; 0x01
    3ab8:	12 82       	std	Z+2, r1	; 0x02
    3aba:	13 82       	std	Z+3, r1	; 0x03
    3abc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3abe:	38 a1       	ldd	r19, Y+32	; 0x20
    3ac0:	2b 55       	subi	r18, 0x5B	; 91
    3ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac4:	3c 8b       	std	Y+20, r19	; 0x14
    3ac6:	2b 8b       	std	Y+19, r18	; 0x13
    3ac8:	f9 01       	movw	r30, r18
    3aca:	10 82       	st	Z, r1
    3acc:	11 82       	std	Z+1, r1	; 0x01
    3ace:	12 82       	std	Z+2, r1	; 0x02
    3ad0:	13 82       	std	Z+3, r1	; 0x03
    3ad2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3ad4:	38 a1       	ldd	r19, Y+32	; 0x20
    3ad6:	27 55       	subi	r18, 0x57	; 87
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	3e 8b       	std	Y+22, r19	; 0x16
    3adc:	2d 8b       	std	Y+21, r18	; 0x15
    3ade:	f9 01       	movw	r30, r18
    3ae0:	10 82       	st	Z, r1
    3ae2:	11 82       	std	Z+1, r1	; 0x01
    3ae4:	12 82       	std	Z+2, r1	; 0x02
    3ae6:	13 82       	std	Z+3, r1	; 0x03
    3ae8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3aea:	38 a1       	ldd	r19, Y+32	; 0x20
    3aec:	23 55       	subi	r18, 0x53	; 83
    3aee:	3f 4f       	sbci	r19, 0xFF	; 255
    3af0:	38 8f       	std	Y+24, r19	; 0x18
    3af2:	2f 8b       	std	Y+23, r18	; 0x17
    3af4:	f9 01       	movw	r30, r18
    3af6:	10 82       	st	Z, r1
    3af8:	11 82       	std	Z+1, r1	; 0x01
    3afa:	12 82       	std	Z+2, r1	; 0x02
    3afc:	13 82       	std	Z+3, r1	; 0x03
    3afe:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b00:	38 a1       	ldd	r19, Y+32	; 0x20
    3b02:	2f 54       	subi	r18, 0x4F	; 79
    3b04:	3f 4f       	sbci	r19, 0xFF	; 255
    3b06:	3a 8f       	std	Y+26, r19	; 0x1a
    3b08:	29 8f       	std	Y+25, r18	; 0x19
    3b0a:	f9 01       	movw	r30, r18
    3b0c:	10 82       	st	Z, r1
    3b0e:	11 82       	std	Z+1, r1	; 0x01
    3b10:	12 82       	std	Z+2, r1	; 0x02
    3b12:	13 82       	std	Z+3, r1	; 0x03
    3b14:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b16:	38 a1       	ldd	r19, Y+32	; 0x20
    3b18:	2b 54       	subi	r18, 0x4B	; 75
    3b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b1c:	3c 8f       	std	Y+28, r19	; 0x1c
    3b1e:	2b 8f       	std	Y+27, r18	; 0x1b
    3b20:	f9 01       	movw	r30, r18
    3b22:	10 82       	st	Z, r1
    3b24:	11 82       	std	Z+1, r1	; 0x01
    3b26:	12 82       	std	Z+2, r1	; 0x02
    3b28:	13 82       	std	Z+3, r1	; 0x03
    3b2a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b2c:	38 a1       	ldd	r19, Y+32	; 0x20
    3b2e:	27 54       	subi	r18, 0x47	; 71
    3b30:	3f 4f       	sbci	r19, 0xFF	; 255
    3b32:	3e 8f       	std	Y+30, r19	; 0x1e
    3b34:	2d 8f       	std	Y+29, r18	; 0x1d
    3b36:	f9 01       	movw	r30, r18
    3b38:	10 82       	st	Z, r1
    3b3a:	11 82       	std	Z+1, r1	; 0x01
    3b3c:	12 82       	std	Z+2, r1	; 0x02
    3b3e:	13 82       	std	Z+3, r1	; 0x03
    3b40:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b42:	38 a1       	ldd	r19, Y+32	; 0x20
    3b44:	23 54       	subi	r18, 0x43	; 67
    3b46:	3f 4f       	sbci	r19, 0xFF	; 255
    3b48:	f9 01       	movw	r30, r18
    3b4a:	10 82       	st	Z, r1
    3b4c:	11 82       	std	Z+1, r1	; 0x01
    3b4e:	12 82       	std	Z+2, r1	; 0x02
    3b50:	13 82       	std	Z+3, r1	; 0x03
    3b52:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b54:	38 a1       	ldd	r19, Y+32	; 0x20
    3b56:	2f 53       	subi	r18, 0x3F	; 63
    3b58:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5a:	f9 01       	movw	r30, r18
    3b5c:	10 82       	st	Z, r1
    3b5e:	11 82       	std	Z+1, r1	; 0x01
    3b60:	12 82       	std	Z+2, r1	; 0x02
    3b62:	13 82       	std	Z+3, r1	; 0x03
    3b64:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b66:	38 a1       	ldd	r19, Y+32	; 0x20
    3b68:	2b 53       	subi	r18, 0x3B	; 59
    3b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6c:	f9 01       	movw	r30, r18
    3b6e:	10 82       	st	Z, r1
    3b70:	11 82       	std	Z+1, r1	; 0x01
    3b72:	12 82       	std	Z+2, r1	; 0x02
    3b74:	13 82       	std	Z+3, r1	; 0x03
    3b76:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b78:	38 a1       	ldd	r19, Y+32	; 0x20
    3b7a:	27 53       	subi	r18, 0x37	; 55
    3b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7e:	f9 01       	movw	r30, r18
    3b80:	10 82       	st	Z, r1
    3b82:	11 82       	std	Z+1, r1	; 0x01
    3b84:	12 82       	std	Z+2, r1	; 0x02
    3b86:	13 82       	std	Z+3, r1	; 0x03
    3b88:	2f 8c       	ldd	r2, Y+31	; 0x1f
    3b8a:	38 a0       	ldd	r3, Y+32	; 0x20
    3b8c:	fd ec       	ldi	r31, 0xCD	; 205
    3b8e:	2f 0e       	add	r2, r31
    3b90:	31 1c       	adc	r3, r1
    3b92:	f1 01       	movw	r30, r2
    3b94:	10 82       	st	Z, r1
    3b96:	11 82       	std	Z+1, r1	; 0x01
    3b98:	12 82       	std	Z+2, r1	; 0x02
    3b9a:	13 82       	std	Z+3, r1	; 0x03
    3b9c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b9e:	38 a1       	ldd	r19, Y+32	; 0x20
    3ba0:	2f 52       	subi	r18, 0x2F	; 47
    3ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba4:	f9 01       	movw	r30, r18
    3ba6:	10 82       	st	Z, r1
    3ba8:	11 82       	std	Z+1, r1	; 0x01
    3baa:	12 82       	std	Z+2, r1	; 0x02
    3bac:	13 82       	std	Z+3, r1	; 0x03
    3bae:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3bb0:	38 a1       	ldd	r19, Y+32	; 0x20
    3bb2:	2b 52       	subi	r18, 0x2B	; 43
    3bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb6:	f9 01       	movw	r30, r18
    3bb8:	10 82       	st	Z, r1
    3bba:	11 82       	std	Z+1, r1	; 0x01
    3bbc:	12 82       	std	Z+2, r1	; 0x02
    3bbe:	13 82       	std	Z+3, r1	; 0x03
    3bc0:	6f 8c       	ldd	r6, Y+31	; 0x1f
    3bc2:	78 a0       	ldd	r7, Y+32	; 0x20
    3bc4:	f9 ed       	ldi	r31, 0xD9	; 217
    3bc6:	6f 0e       	add	r6, r31
    3bc8:	71 1c       	adc	r7, r1
    3bca:	f3 01       	movw	r30, r6
    3bcc:	10 82       	st	Z, r1
    3bce:	11 82       	std	Z+1, r1	; 0x01
    3bd0:	12 82       	std	Z+2, r1	; 0x02
    3bd2:	13 82       	std	Z+3, r1	; 0x03
    3bd4:	af 8c       	ldd	r10, Y+31	; 0x1f
    3bd6:	b8 a0       	ldd	r11, Y+32	; 0x20
    3bd8:	fd ed       	ldi	r31, 0xDD	; 221
    3bda:	af 0e       	add	r10, r31
    3bdc:	b1 1c       	adc	r11, r1
    3bde:	f5 01       	movw	r30, r10
    3be0:	10 82       	st	Z, r1
    3be2:	11 82       	std	Z+1, r1	; 0x01
    3be4:	12 82       	std	Z+2, r1	; 0x02
    3be6:	13 82       	std	Z+3, r1	; 0x03
    3be8:	8f 8c       	ldd	r8, Y+31	; 0x1f
    3bea:	98 a0       	ldd	r9, Y+32	; 0x20
    3bec:	f1 ee       	ldi	r31, 0xE1	; 225
    3bee:	8f 0e       	add	r8, r31
    3bf0:	91 1c       	adc	r9, r1
    3bf2:	f4 01       	movw	r30, r8
    3bf4:	10 82       	st	Z, r1
    3bf6:	11 82       	std	Z+1, r1	; 0x01
    3bf8:	12 82       	std	Z+2, r1	; 0x02
    3bfa:	13 82       	std	Z+3, r1	; 0x03
    3bfc:	cf 8c       	ldd	r12, Y+31	; 0x1f
    3bfe:	d8 a0       	ldd	r13, Y+32	; 0x20
    3c00:	f5 ee       	ldi	r31, 0xE5	; 229
    3c02:	cf 0e       	add	r12, r31
    3c04:	d1 1c       	adc	r13, r1
    3c06:	f6 01       	movw	r30, r12
    3c08:	10 82       	st	Z, r1
    3c0a:	11 82       	std	Z+1, r1	; 0x01
    3c0c:	12 82       	std	Z+2, r1	; 0x02
    3c0e:	13 82       	std	Z+3, r1	; 0x03
    3c10:	ef 8c       	ldd	r14, Y+31	; 0x1f
    3c12:	f8 a0       	ldd	r15, Y+32	; 0x20
    3c14:	f9 ee       	ldi	r31, 0xE9	; 233
    3c16:	ef 0e       	add	r14, r31
    3c18:	f1 1c       	adc	r15, r1
    3c1a:	f7 01       	movw	r30, r14
    3c1c:	10 82       	st	Z, r1
    3c1e:	11 82       	std	Z+1, r1	; 0x01
    3c20:	12 82       	std	Z+2, r1	; 0x02
    3c22:	13 82       	std	Z+3, r1	; 0x03
			 * Y axis is pointing behind the FC
			 * Z axis is pointing up out of the FC
			 */
			

			float MagYawDegrees() const { return magYawDegrees; }
    3c24:	f8 01       	movw	r30, r16
    3c26:	21 81       	ldd	r18, Z+1	; 0x01
    3c28:	32 81       	ldd	r19, Z+2	; 0x02
    3c2a:	43 81       	ldd	r20, Z+3	; 0x03
    3c2c:	54 81       	ldd	r21, Z+4	; 0x04
	
	message->MagYaw = model->MagYawDegrees();
    3c2e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3c30:	f8 a1       	ldd	r31, Y+32	; 0x20
    3c32:	25 83       	std	Z+5, r18	; 0x05
    3c34:	36 83       	std	Z+6, r19	; 0x06
    3c36:	47 83       	std	Z+7, r20	; 0x07
    3c38:	50 87       	std	Z+8, r21	; 0x08
			void YawIntegral(float val) { yawIntegral = val;}

			float YawProportional() const {return yawProportional;}
			void YawProportional(float val) { yawProportional = val;}

			float YawDerivativeError() const {return yawDerivativeError;}
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	21 a1       	ldd	r18, Z+33	; 0x21
    3c3e:	32 a1       	ldd	r19, Z+34	; 0x22
    3c40:	43 a1       	ldd	r20, Z+35	; 0x23
    3c42:	54 a1       	ldd	r21, Z+36	; 0x24
	message->YawDerivativeError = model->YawDerivativeError();
    3c44:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3c46:	f8 a1       	ldd	r31, Y+32	; 0x20
    3c48:	25 8b       	std	Z+21, r18	; 0x15
    3c4a:	36 8b       	std	Z+22, r19	; 0x16
    3c4c:	47 8b       	std	Z+23, r20	; 0x17
    3c4e:	50 8f       	std	Z+24, r21	; 0x18
			void YawVelocityDegreesPerSecond(float val) { yawVelocityDegreesPerSecond = val;}
				
			float ReferenceYawVelocityDegreesPerSecond() const {return referenceYawVelocityDegreesPerSecond;}
			void ReferenceYawVelocityDegreesPerSecond(float val) { referenceYawVelocityDegreesPerSecond = val;}
				
			float YawIntegral() const {return yawIntegral;}
    3c50:	f8 01       	movw	r30, r16
    3c52:	21 8d       	ldd	r18, Z+25	; 0x19
    3c54:	32 8d       	ldd	r19, Z+26	; 0x1a
    3c56:	43 8d       	ldd	r20, Z+27	; 0x1b
    3c58:	54 8d       	ldd	r21, Z+28	; 0x1c
	message->YawIntegral = model->YawIntegral();
    3c5a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3c5c:	f8 a1       	ldd	r31, Y+32	; 0x20
    3c5e:	25 87       	std	Z+13, r18	; 0x0d
    3c60:	36 87       	std	Z+14, r19	; 0x0e
    3c62:	47 87       	std	Z+15, r20	; 0x0f
    3c64:	50 8b       	std	Z+16, r21	; 0x10
			void YawIntegral(float val) { yawIntegral = val;}

			float YawProportional() const {return yawProportional;}
    3c66:	f8 01       	movw	r30, r16
    3c68:	25 8d       	ldd	r18, Z+29	; 0x1d
    3c6a:	36 8d       	ldd	r19, Z+30	; 0x1e
    3c6c:	47 8d       	ldd	r20, Z+31	; 0x1f
    3c6e:	50 a1       	ldd	r21, Z+32	; 0x20
	message->YawProportional = model->YawProportional();
    3c70:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3c72:	f8 a1       	ldd	r31, Y+32	; 0x20
    3c74:	21 8b       	std	Z+17, r18	; 0x11
    3c76:	32 8b       	std	Z+18, r19	; 0x12
    3c78:	43 8b       	std	Z+19, r20	; 0x13
    3c7a:	54 8b       	std	Z+20, r21	; 0x14
			void YawControl(float val) { yawControl = val;}
				
			float YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(float val) { yawControlBeforeServoLimitsAdjustment = val;}
				
			float YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
    3c7c:	f8 01       	movw	r30, r16
    3c7e:	21 89       	ldd	r18, Z+17	; 0x11
    3c80:	32 89       	ldd	r19, Z+18	; 0x12
    3c82:	43 89       	ldd	r20, Z+19	; 0x13
    3c84:	54 89       	ldd	r21, Z+20	; 0x14
	message->YawVelocityDegreesPerSecond = model->YawVelocityDegreesPerSecond();
    3c86:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3c88:	f8 a1       	ldd	r31, Y+32	; 0x20
    3c8a:	21 87       	std	Z+9, r18	; 0x09
    3c8c:	32 87       	std	Z+10, r19	; 0x0a
    3c8e:	43 87       	std	Z+11, r20	; 0x0b
    3c90:	54 87       	std	Z+12, r21	; 0x0c
				
			float ReferenceMagYawDegrees() const {return referenceMagYawDegrees;}
			void ReferenceMagYawDegrees(float val) { referenceMagYawDegrees = val;}
				
				
			float YawControl() const {return yawControl;}
    3c92:	f8 01       	movw	r30, r16
    3c94:	21 85       	ldd	r18, Z+9	; 0x09
    3c96:	32 85       	ldd	r19, Z+10	; 0x0a
    3c98:	43 85       	ldd	r20, Z+11	; 0x0b
    3c9a:	54 85       	ldd	r21, Z+12	; 0x0c
	message->YawControl = model->YawControl();
    3c9c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3c9e:	f8 a1       	ldd	r31, Y+32	; 0x20
    3ca0:	21 8f       	std	Z+25, r18	; 0x19
    3ca2:	32 8f       	std	Z+26, r19	; 0x1a
    3ca4:	43 8f       	std	Z+27, r20	; 0x1b
    3ca6:	54 8f       	std	Z+28, r21	; 0x1c
				
			float XDerivativeError() const {return xDerivativeError;}
			void XDerivativeError(float val) { xDerivativeError = val;}
				
		
			float ThetaPitchDegrees() const {return thetaPitchDegrees;}
    3ca8:	98 01       	movw	r18, r16
    3caa:	23 5b       	subi	r18, 0xB3	; 179
    3cac:	3f 4f       	sbci	r19, 0xFF	; 255
    3cae:	f9 01       	movw	r30, r18
    3cb0:	20 81       	ld	r18, Z
    3cb2:	31 81       	ldd	r19, Z+1	; 0x01
    3cb4:	42 81       	ldd	r20, Z+2	; 0x02
    3cb6:	53 81       	ldd	r21, Z+3	; 0x03
	

	message->ThetaPitchDegrees = model->ThetaPitchDegrees();
    3cb8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3cba:	f8 a1       	ldd	r31, Y+32	; 0x20
    3cbc:	25 ab       	std	Z+53, r18	; 0x35
    3cbe:	36 ab       	std	Z+54, r19	; 0x36
    3cc0:	47 ab       	std	Z+55, r20	; 0x37
    3cc2:	50 af       	std	Z+56, r21	; 0x38
			void YawDerivativeError(float val) { yawDerivativeError = val;}								
																							
		
		
		
			float XNEDBodyFrame() const {return xNEDBodyFrame;}
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	25 a1       	ldd	r18, Z+37	; 0x25
    3cc8:	36 a1       	ldd	r19, Z+38	; 0x26
    3cca:	47 a1       	ldd	r20, Z+39	; 0x27
    3ccc:	50 a5       	ldd	r21, Z+40	; 0x28
	message->XNEDBodyFrame = model->XNEDBodyFrame();
    3cce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3cd0:	f8 a1       	ldd	r31, Y+32	; 0x20
    3cd2:	25 a7       	std	Z+45, r18	; 0x2d
    3cd4:	36 a7       	std	Z+46, r19	; 0x2e
    3cd6:	47 a7       	std	Z+47, r20	; 0x2f
    3cd8:	50 ab       	std	Z+48, r21	; 0x30
			void XProportional(float val) { xProportional = val;}
				
			float XIntegral() const {return xIntegral;}
			void XIntegral(float val) { xIntegral = val;}
				
			float XDerivativeError() const {return xDerivativeError;}
    3cda:	98 01       	movw	r18, r16
    3cdc:	27 5b       	subi	r18, 0xB7	; 183
    3cde:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce0:	f9 01       	movw	r30, r18
    3ce2:	20 81       	ld	r18, Z
    3ce4:	31 81       	ldd	r19, Z+1	; 0x01
    3ce6:	42 81       	ldd	r20, Z+2	; 0x02
    3ce8:	53 81       	ldd	r21, Z+3	; 0x03
	message->XDerivativeError = model->XDerivativeError();
    3cea:	fc 01       	movw	r30, r24
    3cec:	20 83       	st	Z, r18
    3cee:	31 83       	std	Z+1, r19	; 0x01
    3cf0:	42 83       	std	Z+2, r20	; 0x02
    3cf2:	53 83       	std	Z+3, r21	; 0x03
			void XLongitudeOuterLoopSetpoint(float val) { xLongitudeOuterLoopSetpoint = val;}
				
			float XProportional() const {return xProportional;}
			void XProportional(float val) { xProportional = val;}
				
			float XIntegral() const {return xIntegral;}
    3cf4:	c8 01       	movw	r24, r16
    3cf6:	8b 5b       	subi	r24, 0xBB	; 187
    3cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	20 81       	ld	r18, Z
    3cfe:	31 81       	ldd	r19, Z+1	; 0x01
    3d00:	42 81       	ldd	r20, Z+2	; 0x02
    3d02:	53 81       	ldd	r21, Z+3	; 0x03
	message->XIntegral = model->XIntegral();
    3d04:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3d06:	f8 a1       	ldd	r31, Y+32	; 0x20
    3d08:	21 af       	std	Z+57, r18	; 0x39
    3d0a:	32 af       	std	Z+58, r19	; 0x3a
    3d0c:	43 af       	std	Z+59, r20	; 0x3b
    3d0e:	54 af       	std	Z+60, r21	; 0x3c
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
				
			float XLongitudeOuterLoopSetpoint() const {return xLongitudeOuterLoopSetpoint;}
			void XLongitudeOuterLoopSetpoint(float val) { xLongitudeOuterLoopSetpoint = val;}
				
			float XProportional() const {return xProportional;}
    3d10:	c8 01       	movw	r24, r16
    3d12:	8f 5b       	subi	r24, 0xBF	; 191
    3d14:	9f 4f       	sbci	r25, 0xFF	; 255
    3d16:	fc 01       	movw	r30, r24
    3d18:	20 81       	ld	r18, Z
    3d1a:	31 81       	ldd	r19, Z+1	; 0x01
    3d1c:	42 81       	ldd	r20, Z+2	; 0x02
    3d1e:	53 81       	ldd	r21, Z+3	; 0x03
	message->XProportional = model->XProportional();
    3d20:	2d 93       	st	X+, r18
    3d22:	3d 93       	st	X+, r19
    3d24:	4d 93       	st	X+, r20
    3d26:	5c 93       	st	X, r21
    3d28:	13 97       	sbiw	r26, 0x03	; 3
			void LongitudeControlBeforeServoLimitsAdjustment(float val) { longitudeControlBeforeServoLimitsAdjustment = val;}

			float LongitudeControl() const {return longitudeControl;}
			void LongitudeControl(float val) { longitudeControl = val;}
				
			float XVelocityMetersPerSecond() const {return xVelocityMetersPerSecond;}
    3d2a:	f8 01       	movw	r30, r16
    3d2c:	85 a9       	ldd	r24, Z+53	; 0x35
    3d2e:	96 a9       	ldd	r25, Z+54	; 0x36
    3d30:	a7 a9       	ldd	r26, Z+55	; 0x37
    3d32:	b0 ad       	ldd	r27, Z+56	; 0x38
	message->XVelocityMetersPerSecond = model->XVelocityMetersPerSecond();
    3d34:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3d36:	f8 a1       	ldd	r31, Y+32	; 0x20
    3d38:	81 ab       	std	Z+49, r24	; 0x31
    3d3a:	92 ab       	std	Z+50, r25	; 0x32
    3d3c:	a3 ab       	std	Z+51, r26	; 0x33
    3d3e:	b4 ab       	std	Z+52, r27	; 0x34
			void ReferenceXNEDBodyFrame(float val) { referenceXNEDBodyFrame = val;}

			float LongitudeControlBeforeServoLimitsAdjustment() const {return longitudeControlBeforeServoLimitsAdjustment;}
			void LongitudeControlBeforeServoLimitsAdjustment(float val) { longitudeControlBeforeServoLimitsAdjustment = val;}

			float LongitudeControl() const {return longitudeControl;}
    3d40:	f8 01       	movw	r30, r16
    3d42:	81 a9       	ldd	r24, Z+49	; 0x31
    3d44:	92 a9       	ldd	r25, Z+50	; 0x32
    3d46:	a3 a9       	ldd	r26, Z+51	; 0x33
    3d48:	b4 a9       	ldd	r27, Z+52	; 0x34
	message->LongitudeControl = model->LongitudeControl();
    3d4a:	e9 a1       	ldd	r30, Y+33	; 0x21
    3d4c:	fa a1       	ldd	r31, Y+34	; 0x22
    3d4e:	80 83       	st	Z, r24
    3d50:	91 83       	std	Z+1, r25	; 0x01
    3d52:	a2 83       	std	Z+2, r26	; 0x02
    3d54:	b3 83       	std	Z+3, r27	; 0x03
			void XVelocityMetersPerSecond(float val) { xVelocityMetersPerSecond = val;}
				
			float ReferenceXVelocityMetersPerSecond() const {return referenceXVelocityMetersPerSecond;}
			void ReferenceXVelocityMetersPerSecond(float val) { referenceXVelocityMetersPerSecond = val;}
				
			float XLongitudeOuterLoopSetpoint() const {return xLongitudeOuterLoopSetpoint;}
    3d56:	f8 01       	movw	r30, r16
    3d58:	fd 96       	adiw	r30, 0x3d	; 61
    3d5a:	80 81       	ld	r24, Z
    3d5c:	91 81       	ldd	r25, Z+1	; 0x01
    3d5e:	a2 81       	ldd	r26, Z+2	; 0x02
    3d60:	b3 81       	ldd	r27, Z+3	; 0x03
	message->XLongitudeOuterLoopSetpoint = model->XLongitudeOuterLoopSetpoint();
    3d62:	e9 81       	ldd	r30, Y+1	; 0x01
    3d64:	fa 81       	ldd	r31, Y+2	; 0x02
    3d66:	80 83       	st	Z, r24
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	a2 83       	std	Z+2, r26	; 0x02
    3d6c:	b3 83       	std	Z+3, r27	; 0x03
				
		
			float ThetaPitchDegrees() const {return thetaPitchDegrees;}
			void ThetaPitchDegrees(float val) {thetaPitchDegrees = val;}
		
			float PitchAngularVelocityRadsPerSecond() const {return pitchAngularVelocityRadsPerSecond;}
    3d6e:	f8 01       	movw	r30, r16
    3d70:	ef 5a       	subi	r30, 0xAF	; 175
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	80 81       	ld	r24, Z
    3d76:	91 81       	ldd	r25, Z+1	; 0x01
    3d78:	a2 81       	ldd	r26, Z+2	; 0x02
    3d7a:	b3 81       	ldd	r27, Z+3	; 0x03
	message->PitchAngularVelocityRadsPerSecond = model->PitchAngularVelocityRadsPerSecond();
    3d7c:	fb 01       	movw	r30, r22
    3d7e:	80 83       	st	Z, r24
    3d80:	91 83       	std	Z+1, r25	; 0x01
    3d82:	a2 83       	std	Z+2, r26	; 0x02
    3d84:	b3 83       	std	Z+3, r27	; 0x03

			float YDerivativeError() const {return yDerivativeError;}
			void YDerivativeError(float val) { yDerivativeError = val;}


			float PhiRollDegrees() const {return phiRollDegrees;}
    3d86:	f8 01       	movw	r30, r16
    3d88:	e3 58       	subi	r30, 0x83	; 131
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	80 81       	ld	r24, Z
    3d8e:	91 81       	ldd	r25, Z+1	; 0x01
    3d90:	a2 81       	ldd	r26, Z+2	; 0x02
    3d92:	b3 81       	ldd	r27, Z+3	; 0x03

	
	message->PhiRollDegrees = model->PhiRollDegrees();
    3d94:	f2 01       	movw	r30, r4
    3d96:	80 83       	st	Z, r24
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	a2 83       	std	Z+2, r26	; 0x02
    3d9c:	b3 83       	std	Z+3, r27	; 0x03
						
						
						


			float YNEDBodyFrame() const {return yNEDBodyFrame;}
    3d9e:	f8 01       	movw	r30, r16
    3da0:	eb 5a       	subi	r30, 0xAB	; 171
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	80 81       	ld	r24, Z
    3da6:	91 81       	ldd	r25, Z+1	; 0x01
    3da8:	a2 81       	ldd	r26, Z+2	; 0x02
    3daa:	b3 81       	ldd	r27, Z+3	; 0x03
	message->YNEDBodyFrame = model->YNEDBodyFrame();
    3dac:	eb 81       	ldd	r30, Y+3	; 0x03
    3dae:	fc 81       	ldd	r31, Y+4	; 0x04
    3db0:	80 83       	st	Z, r24
    3db2:	91 83       	std	Z+1, r25	; 0x01
    3db4:	a2 83       	std	Z+2, r26	; 0x02
    3db6:	b3 83       	std	Z+3, r27	; 0x03
			void YProportional(float val) { yProportional = val;}

			float YIntegral() const {return yIntegral;}
			void YIntegral(float val) { yIntegral = val;}

			float YDerivativeError() const {return yDerivativeError;}
    3db8:	f8 01       	movw	r30, r16
    3dba:	e7 58       	subi	r30, 0x87	; 135
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	a2 81       	ldd	r26, Z+2	; 0x02
    3dc4:	b3 81       	ldd	r27, Z+3	; 0x03
	message->YDerivativeError = model->YDerivativeError();
    3dc6:	eb 85       	ldd	r30, Y+11	; 0x0b
    3dc8:	fc 85       	ldd	r31, Y+12	; 0x0c
    3dca:	80 83       	st	Z, r24
    3dcc:	91 83       	std	Z+1, r25	; 0x01
    3dce:	a2 83       	std	Z+2, r26	; 0x02
    3dd0:	b3 83       	std	Z+3, r27	; 0x03
			void YLateralOuterLoopSetpoint(float val) { yLateralOuterLoopSetpoint = val;}

			float YProportional() const {return yProportional;}
			void YProportional(float val) { yProportional = val;}

			float YIntegral() const {return yIntegral;}
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	eb 58       	subi	r30, 0x8B	; 139
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	80 81       	ld	r24, Z
    3dda:	91 81       	ldd	r25, Z+1	; 0x01
    3ddc:	a2 81       	ldd	r26, Z+2	; 0x02
    3dde:	b3 81       	ldd	r27, Z+3	; 0x03
	message->YIntegral = model->YIntegral();
    3de0:	ef 81       	ldd	r30, Y+7	; 0x07
    3de2:	f8 85       	ldd	r31, Y+8	; 0x08
    3de4:	80 83       	st	Z, r24
    3de6:	91 83       	std	Z+1, r25	; 0x01
    3de8:	a2 83       	std	Z+2, r26	; 0x02
    3dea:	b3 83       	std	Z+3, r27	; 0x03
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}

			float YLateralOuterLoopSetpoint() const {return yLateralOuterLoopSetpoint;}
			void YLateralOuterLoopSetpoint(float val) { yLateralOuterLoopSetpoint = val;}

			float YProportional() const {return yProportional;}
    3dec:	f8 01       	movw	r30, r16
    3dee:	ef 58       	subi	r30, 0x8F	; 143
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	80 81       	ld	r24, Z
    3df4:	91 81       	ldd	r25, Z+1	; 0x01
    3df6:	a2 81       	ldd	r26, Z+2	; 0x02
    3df8:	b3 81       	ldd	r27, Z+3	; 0x03
	message->YProportional = model->YProportional();
    3dfa:	e9 85       	ldd	r30, Y+9	; 0x09
    3dfc:	fa 85       	ldd	r31, Y+10	; 0x0a
    3dfe:	80 83       	st	Z, r24
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	a2 83       	std	Z+2, r26	; 0x02
    3e04:	b3 83       	std	Z+3, r27	; 0x03
			void LateralControlBeforeServoLimitsAdjustment(float val) { lateralControlBeforeServoLimitsAdjustment = val;}

			float LateralControl() const {return lateralControl;}
			void LateralControl(float val) { lateralControl = val;}

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
    3e06:	f8 01       	movw	r30, r16
    3e08:	eb 59       	subi	r30, 0x9B	; 155
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 81       	ld	r24, Z
    3e0e:	91 81       	ldd	r25, Z+1	; 0x01
    3e10:	a2 81       	ldd	r26, Z+2	; 0x02
    3e12:	b3 81       	ldd	r27, Z+3	; 0x03
	message->YVelocityMetersPerSecond = model->YVelocityMetersPerSecond();
    3e14:	ed 81       	ldd	r30, Y+5	; 0x05
    3e16:	fe 81       	ldd	r31, Y+6	; 0x06
    3e18:	80 83       	st	Z, r24
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	a2 83       	std	Z+2, r26	; 0x02
    3e1e:	b3 83       	std	Z+3, r27	; 0x03
			void ReferenceYNEDBodyFrame(float val) { referenceYNEDBodyFrame = val;}

			float LateralControlBeforeServoLimitsAdjustment() const {return lateralControlBeforeServoLimitsAdjustment;}
			void LateralControlBeforeServoLimitsAdjustment(float val) { lateralControlBeforeServoLimitsAdjustment = val;}

			float LateralControl() const {return lateralControl;}
    3e20:	f8 01       	movw	r30, r16
    3e22:	ef 59       	subi	r30, 0x9F	; 159
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	80 81       	ld	r24, Z
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	a2 81       	ldd	r26, Z+2	; 0x02
    3e2c:	b3 81       	ldd	r27, Z+3	; 0x03
	message->LateralControl = model->LateralControl();
    3e2e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3e30:	fe 85       	ldd	r31, Y+14	; 0x0e
    3e32:	80 83       	st	Z, r24
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	a2 83       	std	Z+2, r26	; 0x02
    3e38:	b3 83       	std	Z+3, r27	; 0x03
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}

			float ReferenceYVelocityMetersPerSecond() const {return referenceYVelocityMetersPerSecond;}
			void ReferenceYVelocityMetersPerSecond(float val) { referenceYVelocityMetersPerSecond = val;}

			float YLateralOuterLoopSetpoint() const {return yLateralOuterLoopSetpoint;}
    3e3a:	f8 01       	movw	r30, r16
    3e3c:	e3 59       	subi	r30, 0x93	; 147
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	80 81       	ld	r24, Z
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	a2 81       	ldd	r26, Z+2	; 0x02
    3e46:	b3 81       	ldd	r27, Z+3	; 0x03
	message->YLateralOuterLoopSetpoint = model->YLateralOuterLoopSetpoint();
    3e48:	ef 85       	ldd	r30, Y+15	; 0x0f
    3e4a:	f8 89       	ldd	r31, Y+16	; 0x10
    3e4c:	80 83       	st	Z, r24
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	a2 83       	std	Z+2, r26	; 0x02
    3e52:	b3 83       	std	Z+3, r27	; 0x03


			float PhiRollDegrees() const {return phiRollDegrees;}
			void PhiRollDegrees(float val) {phiRollDegrees = val;}

			float RollAngularVelocityRadsPerSecond() const {return rollAngularVelocityRadsPerSecond;}
    3e54:	f8 01       	movw	r30, r16
    3e56:	ef 57       	subi	r30, 0x7F	; 127
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	80 81       	ld	r24, Z
    3e5c:	91 81       	ldd	r25, Z+1	; 0x01
    3e5e:	a2 81       	ldd	r26, Z+2	; 0x02
    3e60:	b3 81       	ldd	r27, Z+3	; 0x03
	message->RollAngularVelocityRadsPerSecond = model->RollAngularVelocityRadsPerSecond();	
    3e62:	e9 89       	ldd	r30, Y+17	; 0x11
    3e64:	fa 89       	ldd	r31, Y+18	; 0x12
    3e66:	80 83       	st	Z, r24
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	a2 83       	std	Z+2, r26	; 0x02
    3e6c:	b3 83       	std	Z+3, r27	; 0x03
						
						
						
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
    3e6e:	f8 01       	movw	r30, r16
    3e70:	eb 57       	subi	r30, 0x7B	; 123
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	80 81       	ld	r24, Z
    3e76:	91 81       	ldd	r25, Z+1	; 0x01
    3e78:	a2 81       	ldd	r26, Z+2	; 0x02
    3e7a:	b3 81       	ldd	r27, Z+3	; 0x03
	
	
	message->AltitudeFeetAgl = model->AltitudeFeetAgl();
    3e7c:	eb 89       	ldd	r30, Y+19	; 0x13
    3e7e:	fc 89       	ldd	r31, Y+20	; 0x14
    3e80:	80 83       	st	Z, r24
    3e82:	91 83       	std	Z+1, r25	; 0x01
    3e84:	a2 83       	std	Z+2, r26	; 0x02
    3e86:	b3 83       	std	Z+3, r27	; 0x03
			void ZIntegral(float val) { zIntegral = val;}

			float ZProportional() const {return zProportional;}
			void ZProportional(float val) { zProportional = val;}

			float ZDerivativeError() const {return zDerivativeError;}
    3e88:	f8 01       	movw	r30, r16
    3e8a:	e7 55       	subi	r30, 0x57	; 87
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	91 81       	ldd	r25, Z+1	; 0x01
    3e92:	a2 81       	ldd	r26, Z+2	; 0x02
    3e94:	b3 81       	ldd	r27, Z+3	; 0x03
	message->ZDerivativeError = model->ZDerivativeError();
    3e96:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3e98:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3e9a:	80 83       	st	Z, r24
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	a2 83       	std	Z+2, r26	; 0x02
    3ea0:	b3 83       	std	Z+3, r27	; 0x03
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}

			float ReferenceZVelocityFeetPerSecond() const {return referenceZVelocityFeetPerSecond;}
			void ReferenceZVelocityFeetPerSecond(float val) { referenceZVelocityFeetPerSecond = val;}

			float ZIntegral() const {return zIntegral;}
    3ea2:	f8 01       	movw	r30, r16
    3ea4:	ef 55       	subi	r30, 0x5F	; 95
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	80 81       	ld	r24, Z
    3eaa:	91 81       	ldd	r25, Z+1	; 0x01
    3eac:	a2 81       	ldd	r26, Z+2	; 0x02
    3eae:	b3 81       	ldd	r27, Z+3	; 0x03
	message->ZIntegral = model->ZIntegral();
    3eb0:	ef 89       	ldd	r30, Y+23	; 0x17
    3eb2:	f8 8d       	ldd	r31, Y+24	; 0x18
    3eb4:	80 83       	st	Z, r24
    3eb6:	91 83       	std	Z+1, r25	; 0x01
    3eb8:	a2 83       	std	Z+2, r26	; 0x02
    3eba:	b3 83       	std	Z+3, r27	; 0x03
			void ZIntegral(float val) { zIntegral = val;}

			float ZProportional() const {return zProportional;}
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	eb 55       	subi	r30, 0x5B	; 91
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	80 81       	ld	r24, Z
    3ec4:	91 81       	ldd	r25, Z+1	; 0x01
    3ec6:	a2 81       	ldd	r26, Z+2	; 0x02
    3ec8:	b3 81       	ldd	r27, Z+3	; 0x03
	message->ZProportional = model->ZProportional();
    3eca:	e9 8d       	ldd	r30, Y+25	; 0x19
    3ecc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3ece:	80 83       	st	Z, r24
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	a2 83       	std	Z+2, r26	; 0x02
    3ed4:	b3 83       	std	Z+3, r27	; 0x03
			void MainRotorCollectiveControl(float val) { mainRotorControl = val;}

			float MainRotorControlBeforeServoLimitsAdjustment() const {return mainRotorControlBeforeServoLimitsAdjustment;}
			void MainRotorControlBeforeServoLimitsAdjustment(float val) { mainRotorControlBeforeServoLimitsAdjustment = val;}

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
    3ed6:	f8 01       	movw	r30, r16
    3ed8:	e7 56       	subi	r30, 0x67	; 103
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
	message->ZVelocityMetersPerSecond = (model->ZVelocityFeetPerSecond() / 3.2804f);
    3edc:	23 e1       	ldi	r18, 0x13	; 19
    3ede:	32 ef       	ldi	r19, 0xF2	; 242
    3ee0:	41 e5       	ldi	r20, 0x51	; 81
    3ee2:	50 e4       	ldi	r21, 0x40	; 64
    3ee4:	60 81       	ld	r22, Z
    3ee6:	71 81       	ldd	r23, Z+1	; 0x01
    3ee8:	82 81       	ldd	r24, Z+2	; 0x02
    3eea:	93 81       	ldd	r25, Z+3	; 0x03
    3eec:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <__divsf3>
    3ef0:	ed 89       	ldd	r30, Y+21	; 0x15
    3ef2:	fe 89       	ldd	r31, Y+22	; 0x16
    3ef4:	60 83       	st	Z, r22
    3ef6:	71 83       	std	Z+1, r23	; 0x01
    3ef8:	82 83       	std	Z+2, r24	; 0x02
    3efa:	93 83       	std	Z+3, r25	; 0x03

			float ReferenceZNEDBodyFrameFeet() const {return referenceAltitudeFeet;}
			void ReferenceZNEDBodyFrameFeet(float val) { referenceAltitudeFeet = val;}


			float MainRotorCollectiveControl() const {return mainRotorControl;}
    3efc:	f8 01       	movw	r30, r16
    3efe:	ef 56       	subi	r30, 0x6F	; 111
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	80 81       	ld	r24, Z
    3f04:	91 81       	ldd	r25, Z+1	; 0x01
    3f06:	a2 81       	ldd	r26, Z+2	; 0x02
    3f08:	b3 81       	ldd	r27, Z+3	; 0x03
	message->MainRotorCollectiveControl = model->MainRotorCollectiveControl();
    3f0a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3f0c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3f0e:	80 83       	st	Z, r24
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	a2 83       	std	Z+2, r26	; 0x02
    3f14:	b3 83       	std	Z+3, r27	; 0x03
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
			void AltitudeFeetAgl(float val) { altitudeFeetAgl = val; }

			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
    3f16:	f8 01       	movw	r30, r16
    3f18:	e7 57       	subi	r30, 0x77	; 119
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	80 81       	ld	r24, Z
    3f1e:	91 81       	ldd	r25, Z+1	; 0x01
    3f20:	a2 81       	ldd	r26, Z+2	; 0x02
    3f22:	b3 81       	ldd	r27, Z+3	; 0x03
	message->ZNEDBodyFrame = model->ZNEDBodyFrame();
    3f24:	f1 01       	movw	r30, r2
    3f26:	80 83       	st	Z, r24
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	a2 83       	std	Z+2, r26	; 0x02
    3f2c:	b3 83       	std	Z+3, r27	; 0x03
			void Timeouts(long val) { timeouts = val; }
			
			long UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
			
			long ChecksumErrors() const {return checksumErrors; }
    3f2e:	f8 01       	movw	r30, r16
    3f30:	e3 54       	subi	r30, 0x43	; 67
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	a2 81       	ldd	r26, Z+2	; 0x02
    3f3a:	b3 81       	ldd	r27, Z+3	; 0x03
	
	
	
	message->ChecksumErrors = model->ChecksumErrors();
    3f3c:	f4 01       	movw	r30, r8
    3f3e:	80 83       	st	Z, r24
    3f40:	91 83       	std	Z+1, r25	; 0x01
    3f42:	a2 83       	std	Z+2, r26	; 0x02
    3f44:	b3 83       	std	Z+3, r27	; 0x03

			float LongitudeDegrees() const {return longitudeDegrees;}
			void LongitudeDegrees(float val) { longitudeDegrees = val;}						
						
						
			long Timeouts() const {return timeouts; }
    3f46:	f8 01       	movw	r30, r16
    3f48:	eb 54       	subi	r30, 0x4B	; 75
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	a2 81       	ldd	r26, Z+2	; 0x02
    3f52:	b3 81       	ldd	r27, Z+3	; 0x03
	message->Timeouts = model->Timeouts();
    3f54:	f3 01       	movw	r30, r6
    3f56:	80 83       	st	Z, r24
    3f58:	91 83       	std	Z+1, r25	; 0x01
    3f5a:	a2 83       	std	Z+2, r26	; 0x02
    3f5c:	b3 83       	std	Z+3, r27	; 0x03
			void Timeouts(long val) { timeouts = val; }
			
			long UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
    3f5e:	f8 01       	movw	r30, r16
    3f60:	e7 54       	subi	r30, 0x47	; 71
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	80 81       	ld	r24, Z
    3f66:	91 81       	ldd	r25, Z+1	; 0x01
    3f68:	a2 81       	ldd	r26, Z+2	; 0x02
    3f6a:	b3 81       	ldd	r27, Z+3	; 0x03
	message->UnrecognizedMsgTypes = model->UnrecognizedMsgTypes();
    3f6c:	f5 01       	movw	r30, r10
    3f6e:	80 83       	st	Z, r24
    3f70:	91 83       	std	Z+1, r25	; 0x01
    3f72:	a2 83       	std	Z+2, r26	; 0x02
    3f74:	b3 83       	std	Z+3, r27	; 0x03
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
			
			long ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(long val) { checksumErrors = val; }
			
			long BlownFrames() const {return numOfFramesBlown;}
    3f76:	f8 01       	movw	r30, r16
    3f78:	ef 53       	subi	r30, 0x3F	; 63
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	80 81       	ld	r24, Z
    3f7e:	91 81       	ldd	r25, Z+1	; 0x01
    3f80:	a2 81       	ldd	r26, Z+2	; 0x02
    3f82:	b3 81       	ldd	r27, Z+3	; 0x03
	message->NumOfBlownFrames = model->BlownFrames();
    3f84:	f6 01       	movw	r30, r12
    3f86:	80 83       	st	Z, r24
    3f88:	91 83       	std	Z+1, r25	; 0x01
    3f8a:	a2 83       	std	Z+2, r26	; 0x02
    3f8c:	b3 83       	std	Z+3, r27	; 0x03
			void BlownFrames( long val ) { numOfFramesBlown = val;}
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
    3f8e:	f8 01       	movw	r30, r16
    3f90:	eb 53       	subi	r30, 0x3B	; 59
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 81       	ld	r24, Z
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	a2 81       	ldd	r26, Z+2	; 0x02
    3f9a:	b3 81       	ldd	r27, Z+3	; 0x03
	message->SerialCommunicationBufferOverruns = model->SerialCommunicationBufferOverruns();
    3f9c:	f7 01       	movw	r30, r14
    3f9e:	80 83       	st	Z, r24
    3fa0:	91 83       	std	Z+1, r25	; 0x01
    3fa2:	a2 83       	std	Z+2, r26	; 0x02
    3fa4:	b3 83       	std	Z+3, r27	; 0x03
	
	return message;
}
    3fa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fa8:	98 a1       	ldd	r25, Y+32	; 0x20
    3faa:	a2 96       	adiw	r28, 0x22	; 34
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	f8 94       	cli
    3fb0:	de bf       	out	0x3e, r29	; 62
    3fb2:	0f be       	out	0x3f, r0	; 63
    3fb4:	cd bf       	out	0x3d, r28	; 61
    3fb6:	df 91       	pop	r29
    3fb8:	cf 91       	pop	r28
    3fba:	1f 91       	pop	r17
    3fbc:	0f 91       	pop	r16
    3fbe:	ff 90       	pop	r15
    3fc0:	ef 90       	pop	r14
    3fc2:	df 90       	pop	r13
    3fc4:	cf 90       	pop	r12
    3fc6:	bf 90       	pop	r11
    3fc8:	af 90       	pop	r10
    3fca:	9f 90       	pop	r9
    3fcc:	8f 90       	pop	r8
    3fce:	7f 90       	pop	r7
    3fd0:	6f 90       	pop	r6
    3fd2:	5f 90       	pop	r5
    3fd4:	4f 90       	pop	r4
    3fd6:	3f 90       	pop	r3
    3fd8:	2f 90       	pop	r2
    3fda:	08 95       	ret

00003fdc <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>:
	model->ChecksumErrors(this->ChecksumErrors);
	model->BlownFrames(this->NumOfBlownFrames);
}

void SystemTelemetryMessage::updateModelFromMessageFromSimulator (SystemModel *model)
{
    3fdc:	ef 92       	push	r14
    3fde:	ff 92       	push	r15
    3fe0:	0f 93       	push	r16
    3fe2:	1f 93       	push	r17
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	8c 01       	movw	r16, r24
    3fea:	eb 01       	movw	r28, r22
	//These values are sensor readings from the simulator that are used for flight
	//control calculations. The real helicopter algorithms will read these values
	//from actual sensors, but when running off of the simulator, these sensor
	//readings come from the simulator itself.
	
	model->MagYawDegrees(this->MagYaw);
    3fec:	fc 01       	movw	r30, r24
    3fee:	85 81       	ldd	r24, Z+5	; 0x05
    3ff0:	96 81       	ldd	r25, Z+6	; 0x06
    3ff2:	a7 81       	ldd	r26, Z+7	; 0x07
    3ff4:	b0 85       	ldd	r27, Z+8	; 0x08
			 * Z axis is pointing up out of the FC
			 */
			

			float MagYawDegrees() const { return magYawDegrees; }
			void MagYawDegrees(float val) { magYawDegrees = val; }	
    3ff6:	89 83       	std	Y+1, r24	; 0x01
    3ff8:	9a 83       	std	Y+2, r25	; 0x02
    3ffa:	ab 83       	std	Y+3, r26	; 0x03
    3ffc:	bc 83       	std	Y+4, r27	; 0x04
	model->YawVelocityDegreesPerSecond(this->YawVelocityDegreesPerSecond);
    3ffe:	81 85       	ldd	r24, Z+9	; 0x09
    4000:	92 85       	ldd	r25, Z+10	; 0x0a
    4002:	a3 85       	ldd	r26, Z+11	; 0x0b
    4004:	b4 85       	ldd	r27, Z+12	; 0x0c
				
			float YawControlBeforeServoLimitsAdjustment() const {return yawControlBeforeServoLimitsAdjustment;}
			void YawControlBeforeServoLimitsAdjustment(float val) { yawControlBeforeServoLimitsAdjustment = val;}
				
			float YawVelocityDegreesPerSecond() const {return yawVelocityDegreesPerSecond;}
			void YawVelocityDegreesPerSecond(float val) { yawVelocityDegreesPerSecond = val;}
    4006:	89 8b       	std	Y+17, r24	; 0x11
    4008:	9a 8b       	std	Y+18, r25	; 0x12
    400a:	ab 8b       	std	Y+19, r26	; 0x13
    400c:	bc 8b       	std	Y+20, r27	; 0x14
	
	//model->XNEDBodyFrame((double) this->XNEDBodyFrame / 100);//not supposed to be here since this is a calculated value, not a sensor reading.
	model->XVelocityMetersPerSecond(this->XVelocityMetersPerSecond);
    400e:	81 a9       	ldd	r24, Z+49	; 0x31
    4010:	92 a9       	ldd	r25, Z+50	; 0x32
    4012:	a3 a9       	ldd	r26, Z+51	; 0x33
    4014:	b4 a9       	ldd	r27, Z+52	; 0x34

			float LongitudeControl() const {return longitudeControl;}
			void LongitudeControl(float val) { longitudeControl = val;}
				
			float XVelocityMetersPerSecond() const {return xVelocityMetersPerSecond;}
			void XVelocityMetersPerSecond(float val) { xVelocityMetersPerSecond = val;}
    4016:	8d ab       	std	Y+53, r24	; 0x35
    4018:	9e ab       	std	Y+54, r25	; 0x36
    401a:	af ab       	std	Y+55, r26	; 0x37
    401c:	b8 af       	std	Y+56, r27	; 0x38
	model->ThetaPitchDegrees(this->ThetaPitchDegrees);
    401e:	85 a9       	ldd	r24, Z+53	; 0x35
    4020:	96 a9       	ldd	r25, Z+54	; 0x36
    4022:	a7 a9       	ldd	r26, Z+55	; 0x37
    4024:	b0 ad       	ldd	r27, Z+56	; 0x38
			float XDerivativeError() const {return xDerivativeError;}
			void XDerivativeError(float val) { xDerivativeError = val;}
				
		
			float ThetaPitchDegrees() const {return thetaPitchDegrees;}
			void ThetaPitchDegrees(float val) {thetaPitchDegrees = val;}
    4026:	fb 01       	movw	r30, r22
    4028:	e3 5b       	subi	r30, 0xB3	; 179
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	80 83       	st	Z, r24
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	a2 83       	std	Z+2, r26	; 0x02
    4032:	b3 83       	std	Z+3, r27	; 0x03
	model->PitchAngularVelocityRadsPerSecond(this->PitchAngularVelocityRadsPerSecond);
    4034:	f8 01       	movw	r30, r16
    4036:	ef 59       	subi	r30, 0x9F	; 159
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
    403e:	a2 81       	ldd	r26, Z+2	; 0x02
    4040:	b3 81       	ldd	r27, Z+3	; 0x03
		
			float PitchAngularVelocityRadsPerSecond() const {return pitchAngularVelocityRadsPerSecond;}
			void PitchAngularVelocityRadsPerSecond(float val) {pitchAngularVelocityRadsPerSecond = val;}
    4042:	fb 01       	movw	r30, r22
    4044:	ef 5a       	subi	r30, 0xAF	; 175
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	80 83       	st	Z, r24
    404a:	91 83       	std	Z+1, r25	; 0x01
    404c:	a2 83       	std	Z+2, r26	; 0x02
    404e:	b3 83       	std	Z+3, r27	; 0x03
	
	//model->YNEDBodyFrame((double) this->YNEDBodyFrame / 100);
	model->YVelocityMetersPerSecond(this->YVelocityMetersPerSecond);
    4050:	f8 01       	movw	r30, r16
    4052:	e3 59       	subi	r30, 0x93	; 147
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	80 81       	ld	r24, Z
    4058:	91 81       	ldd	r25, Z+1	; 0x01
    405a:	a2 81       	ldd	r26, Z+2	; 0x02
    405c:	b3 81       	ldd	r27, Z+3	; 0x03

			float LateralControl() const {return lateralControl;}
			void LateralControl(float val) { lateralControl = val;}

			float YVelocityMetersPerSecond() const {return yVelocityMetersPerSecond;}
			void YVelocityMetersPerSecond(float val) { yVelocityMetersPerSecond = val;}
    405e:	fb 01       	movw	r30, r22
    4060:	eb 59       	subi	r30, 0x9B	; 155
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	80 83       	st	Z, r24
    4066:	91 83       	std	Z+1, r25	; 0x01
    4068:	a2 83       	std	Z+2, r26	; 0x02
    406a:	b3 83       	std	Z+3, r27	; 0x03
	model->PhiRollDegrees(this->PhiRollDegrees);
    406c:	f8 01       	movw	r30, r16
    406e:	ef 58       	subi	r30, 0x8F	; 143
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	91 81       	ldd	r25, Z+1	; 0x01
    4076:	a2 81       	ldd	r26, Z+2	; 0x02
    4078:	b3 81       	ldd	r27, Z+3	; 0x03
			float YDerivativeError() const {return yDerivativeError;}
			void YDerivativeError(float val) { yDerivativeError = val;}


			float PhiRollDegrees() const {return phiRollDegrees;}
			void PhiRollDegrees(float val) {phiRollDegrees = val;}
    407a:	fb 01       	movw	r30, r22
    407c:	e3 58       	subi	r30, 0x83	; 131
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	80 83       	st	Z, r24
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	a2 83       	std	Z+2, r26	; 0x02
    4086:	b3 83       	std	Z+3, r27	; 0x03
	model->RollAngularVelocityRadsPerSecond(this->RollAngularVelocityRadsPerSecond);
    4088:	f8 01       	movw	r30, r16
    408a:	e3 56       	subi	r30, 0x63	; 99
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	80 81       	ld	r24, Z
    4090:	91 81       	ldd	r25, Z+1	; 0x01
    4092:	a2 81       	ldd	r26, Z+2	; 0x02
    4094:	b3 81       	ldd	r27, Z+3	; 0x03

			float RollAngularVelocityRadsPerSecond() const {return rollAngularVelocityRadsPerSecond;}
			void RollAngularVelocityRadsPerSecond(float val) {rollAngularVelocityRadsPerSecond = val;}
    4096:	fb 01       	movw	r30, r22
    4098:	ef 57       	subi	r30, 0x7F	; 127
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	80 83       	st	Z, r24
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	a2 83       	std	Z+2, r26	; 0x02
    40a2:	b3 83       	std	Z+3, r27	; 0x03
	
	model->AltitudeFeetAgl(this->AltitudeFeetAgl);
    40a4:	f8 01       	movw	r30, r16
    40a6:	eb 55       	subi	r30, 0x5B	; 91
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	80 81       	ld	r24, Z
    40ac:	91 81       	ldd	r25, Z+1	; 0x01
    40ae:	a2 81       	ldd	r26, Z+2	; 0x02
    40b0:	b3 81       	ldd	r27, Z+3	; 0x03
						
						
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
			void AltitudeFeetAgl(float val) { altitudeFeetAgl = val; }
    40b2:	fb 01       	movw	r30, r22
    40b4:	eb 57       	subi	r30, 0x7B	; 123
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	80 83       	st	Z, r24
    40ba:	91 83       	std	Z+1, r25	; 0x01
    40bc:	a2 83       	std	Z+2, r26	; 0x02
    40be:	b3 83       	std	Z+3, r27	; 0x03

			float MainRotorControlBeforeServoLimitsAdjustment() const {return mainRotorControlBeforeServoLimitsAdjustment;}
			void MainRotorControlBeforeServoLimitsAdjustment(float val) { mainRotorControlBeforeServoLimitsAdjustment = val;}

			float ZVelocityFeetPerSecond() const {return zVelocityFeetPerSecond;}
			void ZVelocityFeetPerSecond(float val) { zVelocityFeetPerSecond = val;}
    40c0:	7b 01       	movw	r14, r22
    40c2:	f9 e9       	ldi	r31, 0x99	; 153
    40c4:	ef 0e       	add	r14, r31
    40c6:	f1 1c       	adc	r15, r1
	
	//Convert from meters per sec, to foot per sec.
	
	model->ZVelocityFeetPerSecond(this->ZVelocityMetersPerSecond * 3.28084d); 
    40c8:	f8 01       	movw	r30, r16
    40ca:	e7 55       	subi	r30, 0x57	; 87
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	28 e4       	ldi	r18, 0x48	; 72
    40d0:	39 ef       	ldi	r19, 0xF9	; 249
    40d2:	41 e5       	ldi	r20, 0x51	; 81
    40d4:	50 e4       	ldi	r21, 0x40	; 64
    40d6:	60 81       	ld	r22, Z
    40d8:	71 81       	ldd	r23, Z+1	; 0x01
    40da:	82 81       	ldd	r24, Z+2	; 0x02
    40dc:	93 81       	ldd	r25, Z+3	; 0x03
    40de:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    40e2:	f7 01       	movw	r30, r14
    40e4:	60 83       	st	Z, r22
    40e6:	71 83       	std	Z+1, r23	; 0x01
    40e8:	82 83       	std	Z+2, r24	; 0x02
    40ea:	93 83       	std	Z+3, r25	; 0x03
	
	model->LatitudeDegrees(this->LatitudeDegrees);
    40ec:	f8 01       	movw	r30, r16
    40ee:	ef 52       	subi	r30, 0x2F	; 47
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	40 81       	ld	r20, Z
    40f4:	51 81       	ldd	r21, Z+1	; 0x01
    40f6:	62 81       	ldd	r22, Z+2	; 0x02
    40f8:	73 81       	ldd	r23, Z+3	; 0x03
			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
			void LatitudeDegrees(float val) { latitudeDegrees = val;}						
    40fa:	fe 01       	movw	r30, r28
    40fc:	e3 55       	subi	r30, 0x53	; 83
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	40 83       	st	Z, r20
    4102:	51 83       	std	Z+1, r21	; 0x01
    4104:	62 83       	std	Z+2, r22	; 0x02
    4106:	73 83       	std	Z+3, r23	; 0x03
	model->LongitudeDegrees(this->LongitudeDegrees);
    4108:	f8 01       	movw	r30, r16
    410a:	eb 52       	subi	r30, 0x2B	; 43
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	a2 81       	ldd	r26, Z+2	; 0x02
    4114:	b3 81       	ldd	r27, Z+3	; 0x03

			float LongitudeDegrees() const {return longitudeDegrees;}
			void LongitudeDegrees(float val) { longitudeDegrees = val;}						
    4116:	cf 54       	subi	r28, 0x4F	; 79
    4118:	df 4f       	sbci	r29, 0xFF	; 255
    411a:	88 83       	st	Y, r24
    411c:	99 83       	std	Y+1, r25	; 0x01
    411e:	aa 83       	std	Y+2, r26	; 0x02
    4120:	bb 83       	std	Y+3, r27	; 0x03
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	1f 91       	pop	r17
    4128:	0f 91       	pop	r16
    412a:	ff 90       	pop	r15
    412c:	ef 90       	pop	r14
    412e:	08 95       	ret

00004130 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>:
	}

	return scheduler;
}

Scheduler::Scheduler(unsigned long cpuSpeed, PRESCALER prescaler, int schedulerTickFrequencyHz)
    4130:	8f 92       	push	r8
    4132:	9f 92       	push	r9
    4134:	af 92       	push	r10
    4136:	bf 92       	push	r11
    4138:	ef 92       	push	r14
    413a:	ff 92       	push	r15
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	ec 01       	movw	r28, r24
    4146:	cb 01       	movw	r24, r22
    4148:	ba 01       	movw	r22, r20
    414a:	79 01       	movw	r14, r18
{
	targetTimerCount =  ((cpuSpeed / prescaler) / schedulerTickFrequencyHz);
    414c:	44 27       	eor	r20, r20
    414e:	37 fd       	sbrc	r19, 7
    4150:	40 95       	com	r20
    4152:	54 2f       	mov	r21, r20
    4154:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodsi4>
    4158:	49 01       	movw	r8, r18
    415a:	5a 01       	movw	r10, r20
    415c:	98 01       	movw	r18, r16
    415e:	44 27       	eor	r20, r20
    4160:	37 fd       	sbrc	r19, 7
    4162:	40 95       	com	r20
    4164:	54 2f       	mov	r21, r20
    4166:	c5 01       	movw	r24, r10
    4168:	b4 01       	movw	r22, r8
    416a:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodsi4>
    416e:	3f 8b       	std	Y+23, r19	; 0x17
    4170:	2e 8b       	std	Y+22, r18	; 0x16
	
	//Calculate the timer value to achieve the desired frequency. 
	this->targetTimerCount = targetTimerCount;

	this->prescaler = prescaler;
    4172:	f9 8e       	std	Y+25, r15	; 0x19
    4174:	e8 8e       	std	Y+24, r14	; 0x18
	
	numOfTasks = 0;
    4176:	1d 8a       	std	Y+21, r1	; 0x15
    4178:	1c 8a       	std	Y+20, r1	; 0x14
	
	blowFrameDetected = false;
    417a:	1a 8e       	std	Y+26, r1	; 0x1a
	
	completedDispatch = true;
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	8b 8f       	std	Y+27, r24	; 0x1b
}
    4180:	df 91       	pop	r29
    4182:	cf 91       	pop	r28
    4184:	1f 91       	pop	r17
    4186:	0f 91       	pop	r16
    4188:	ff 90       	pop	r15
    418a:	ef 90       	pop	r14
    418c:	bf 90       	pop	r11
    418e:	af 90       	pop	r10
    4190:	9f 90       	pop	r9
    4192:	8f 90       	pop	r8
    4194:	08 95       	ret

00004196 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>:
using namespace helicopter::scheduler;

Scheduler* Scheduler::scheduler = NULL;

Scheduler* Scheduler::getScheduler()
{
    4196:	0f 93       	push	r16
    4198:	1f 93       	push	r17
    419a:	cf 93       	push	r28
    419c:	df 93       	push	r29
	if (scheduler == NULL)
    419e:	80 91 a4 02 	lds	r24, 0x02A4
    41a2:	90 91 a5 02 	lds	r25, 0x02A5
    41a6:	89 2b       	or	r24, r25
    41a8:	99 f4       	brne	.+38     	; 0x41d0 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv+0x3a>
	{
		scheduler = new Scheduler(F_CPU, PRESCALE_BY_SIXTYFOUR, SCHEDULER_TICK_FREQUENCY_HZ);
    41aa:	8c e1       	ldi	r24, 0x1C	; 28
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <_Znwj>
    41b2:	ec 01       	movw	r28, r24
    41b4:	06 e4       	ldi	r16, 0x46	; 70
    41b6:	10 e0       	ldi	r17, 0x00	; 0
    41b8:	20 e4       	ldi	r18, 0x40	; 64
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e0       	ldi	r20, 0x00	; 0
    41be:	54 e2       	ldi	r21, 0x24	; 36
    41c0:	64 ef       	ldi	r22, 0xF4	; 244
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN10helicopter9scheduler9SchedulerC1Em9PRESCALERi>
    41c8:	d0 93 a5 02 	sts	0x02A5, r29
    41cc:	c0 93 a4 02 	sts	0x02A4, r28
	}

	return scheduler;
}
    41d0:	80 91 a4 02 	lds	r24, 0x02A4
    41d4:	90 91 a5 02 	lds	r25, 0x02A5
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	1f 91       	pop	r17
    41de:	0f 91       	pop	r16
    41e0:	08 95       	ret

000041e2 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE>:
	numOfTasks = 0;
}

int Scheduler::addTask(Task *task)
{
	if (numOfTasks < MAXNUMOFTASKS)
    41e2:	fc 01       	movw	r30, r24
    41e4:	24 89       	ldd	r18, Z+20	; 0x14
    41e6:	35 89       	ldd	r19, Z+21	; 0x15
    41e8:	2a 30       	cpi	r18, 0x0A	; 10
    41ea:	31 05       	cpc	r19, r1
    41ec:	7c f4       	brge	.+30     	; 0x420c <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x2a>
	{
		tasks[numOfTasks] = task;
    41ee:	f9 01       	movw	r30, r18
    41f0:	ee 0f       	add	r30, r30
    41f2:	ff 1f       	adc	r31, r31
    41f4:	e8 0f       	add	r30, r24
    41f6:	f9 1f       	adc	r31, r25
    41f8:	71 83       	std	Z+1, r23	; 0x01
    41fa:	60 83       	st	Z, r22
		numOfTasks++;
    41fc:	2f 5f       	subi	r18, 0xFF	; 255
    41fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4200:	fc 01       	movw	r30, r24
    4202:	35 8b       	std	Z+21, r19	; 0x15
    4204:	24 8b       	std	Z+20, r18	; 0x14
		
		return 0;
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	02 c0       	rjmp	.+4      	; 0x4210 <_ZN10helicopter9scheduler9Scheduler7addTaskEPNS_5tasks4TaskE+0x2e>
	}

	return -1;
    420c:	2f ef       	ldi	r18, 0xFF	; 255
    420e:	3f ef       	ldi	r19, 0xFF	; 255
}
    4210:	82 2f       	mov	r24, r18
    4212:	93 2f       	mov	r25, r19
    4214:	08 95       	ret

00004216 <_ZN10helicopter9scheduler9Scheduler4initEv>:

void Scheduler::init()
{
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	7c 01       	movw	r14, r24
	for (int i = 0; i < numOfTasks; i++)
    4224:	dc 01       	movw	r26, r24
    4226:	54 96       	adiw	r26, 0x14	; 20
    4228:	8d 91       	ld	r24, X+
    422a:	9c 91       	ld	r25, X
    422c:	55 97       	sbiw	r26, 0x15	; 21
    422e:	18 16       	cp	r1, r24
    4230:	19 06       	cpc	r1, r25
    4232:	ac f4       	brge	.+42     	; 0x425e <_ZN10helicopter9scheduler9Scheduler4initEv+0x48>
    4234:	87 01       	movw	r16, r14
    4236:	c0 e0       	ldi	r28, 0x00	; 0
    4238:	d0 e0       	ldi	r29, 0x00	; 0
	{
		tasks[i]->init();
    423a:	f8 01       	movw	r30, r16
    423c:	81 91       	ld	r24, Z+
    423e:	91 91       	ld	r25, Z+
    4240:	8f 01       	movw	r16, r30
    4242:	dc 01       	movw	r26, r24
    4244:	ed 91       	ld	r30, X+
    4246:	fc 91       	ld	r31, X
    4248:	06 80       	ldd	r0, Z+6	; 0x06
    424a:	f7 81       	ldd	r31, Z+7	; 0x07
    424c:	e0 2d       	mov	r30, r0
    424e:	19 95       	eicall
	return -1;
}

void Scheduler::init()
{
	for (int i = 0; i < numOfTasks; i++)
    4250:	21 96       	adiw	r28, 0x01	; 1
    4252:	f7 01       	movw	r30, r14
    4254:	24 89       	ldd	r18, Z+20	; 0x14
    4256:	35 89       	ldd	r19, Z+21	; 0x15
    4258:	c2 17       	cp	r28, r18
    425a:	d3 07       	cpc	r29, r19
    425c:	74 f3       	brlt	.-36     	; 0x423a <_ZN10helicopter9scheduler9Scheduler4initEv+0x24>
	{
		tasks[i]->init();
	}
	
	//setup timer
	OCR1A = targetTimerCount; //Set Clear Timer on Compare (auto reset) (CTC)
    425e:	d7 01       	movw	r26, r14
    4260:	56 96       	adiw	r26, 0x16	; 22
    4262:	8d 91       	ld	r24, X+
    4264:	9c 91       	ld	r25, X
    4266:	57 97       	sbiw	r26, 0x17	; 23
    4268:	90 93 89 00 	sts	0x0089, r25
    426c:	80 93 88 00 	sts	0x0088, r24
		
	TCCR1B |= (1 << WGM12); //Configure timer 1 for ctc mode
    4270:	e1 e8       	ldi	r30, 0x81	; 129
    4272:	f0 e0       	ldi	r31, 0x00	; 0
    4274:	80 81       	ld	r24, Z
    4276:	88 60       	ori	r24, 0x08	; 8
    4278:	80 83       	st	Z, r24
		
	TIMSK1 |= (1 << OCIE1A); //enable ctc interrupt
    427a:	ef e6       	ldi	r30, 0x6F	; 111
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	80 81       	ld	r24, Z
    4280:	82 60       	ori	r24, 0x02	; 2
    4282:	80 83       	st	Z, r24
		
	sei(); //Enable global interrupts
    4284:	78 94       	sei
}
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	1f 91       	pop	r17
    428c:	0f 91       	pop	r16
    428e:	ff 90       	pop	r15
    4290:	ef 90       	pop	r14
    4292:	08 95       	ret

00004294 <_ZN10helicopter9scheduler9Scheduler8dispatchEv>:

void Scheduler::dispatch()
{
    4294:	ef 92       	push	r14
    4296:	ff 92       	push	r15
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	7c 01       	movw	r14, r24
	completedDispatch = false;
    42a2:	fc 01       	movw	r30, r24
    42a4:	13 8e       	std	Z+27, r1	; 0x1b
	blowFrameDetected = false;
    42a6:	12 8e       	std	Z+26, r1	; 0x1a
	
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    42a8:	84 89       	ldd	r24, Z+20	; 0x14
    42aa:	95 89       	ldd	r25, Z+21	; 0x15
    42ac:	18 16       	cp	r1, r24
    42ae:	19 06       	cpc	r1, r25
    42b0:	f4 f4       	brge	.+60     	; 0x42ee <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x5a>
    42b2:	87 01       	movw	r16, r14
    42b4:	c0 e0       	ldi	r28, 0x00	; 0
    42b6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		task = tasks[i];
    42b8:	f8 01       	movw	r30, r16
    42ba:	a1 91       	ld	r26, Z+
    42bc:	b1 91       	ld	r27, Z+
    42be:	8f 01       	movw	r16, r30
		
		if (task->getIsReadyToRun())
    42c0:	16 96       	adiw	r26, 0x06	; 6
    42c2:	8c 91       	ld	r24, X
    42c4:	16 97       	sbiw	r26, 0x06	; 6
    42c6:	88 23       	and	r24, r24
    42c8:	59 f0       	breq	.+22     	; 0x42e0 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x4c>
					return isReadyToRun;
				}
				
				void setIsReadyToRun(bool isReadyToRun)
				{
					this->isReadyToRun = isReadyToRun;
    42ca:	16 96       	adiw	r26, 0x06	; 6
    42cc:	1c 92       	st	X, r1
    42ce:	16 97       	sbiw	r26, 0x06	; 6
		{
			task->setIsReadyToRun(false);
			task->runTask();
    42d0:	ed 91       	ld	r30, X+
    42d2:	fc 91       	ld	r31, X
    42d4:	11 97       	sbiw	r26, 0x01	; 1
    42d6:	00 84       	ldd	r0, Z+8	; 0x08
    42d8:	f1 85       	ldd	r31, Z+9	; 0x09
    42da:	e0 2d       	mov	r30, r0
    42dc:	cd 01       	movw	r24, r26
    42de:	19 95       	eicall
	completedDispatch = false;
	blowFrameDetected = false;
	
	Task *task = NULL;
		
	for (int i = 0; i < numOfTasks; i++)
    42e0:	21 96       	adiw	r28, 0x01	; 1
    42e2:	f7 01       	movw	r30, r14
    42e4:	24 89       	ldd	r18, Z+20	; 0x14
    42e6:	35 89       	ldd	r19, Z+21	; 0x15
    42e8:	c2 17       	cp	r28, r18
    42ea:	d3 07       	cpc	r29, r19
    42ec:	2c f3       	brlt	.-54     	; 0x42b8 <_ZN10helicopter9scheduler9Scheduler8dispatchEv+0x24>
	/*if ((TIFR1 & (1<<OCF1A)) != 0)
	{
		model->SystemModel->
	}*/
	
	completedDispatch = true;
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	f7 01       	movw	r30, r14
    42f2:	83 8f       	std	Z+27, r24	; 0x1b
	
	//tells the processor to goto sleep to conserve power since no more
	//tasks are scheduled to be run until after the next scheduler interrupt(tick)
	//which will then wake the processor back up.
	set_sleep_mode(SLEEP_MODE_IDLE);
    42f4:	83 b7       	in	r24, 0x33	; 51
    42f6:	81 7f       	andi	r24, 0xF1	; 241
    42f8:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
    42fa:	83 b7       	in	r24, 0x33	; 51
    42fc:	81 60       	ori	r24, 0x01	; 1
    42fe:	83 bf       	out	0x33, r24	; 51
    4300:	88 95       	sleep
    4302:	83 b7       	in	r24, 0x33	; 51
    4304:	8e 7f       	andi	r24, 0xFE	; 254
    4306:	83 bf       	out	0x33, r24	; 51
}
    4308:	df 91       	pop	r29
    430a:	cf 91       	pop	r28
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	ff 90       	pop	r15
    4312:	ef 90       	pop	r14
    4314:	08 95       	ret

00004316 <_ZN10helicopter9scheduler9Scheduler5startEv>:

void Scheduler::start()
{
	//Setting TCCR to a prescaler will start the timer.
	switch(this->prescaler)
    4316:	fc 01       	movw	r30, r24
    4318:	80 8d       	ldd	r24, Z+24	; 0x18
    431a:	91 8d       	ldd	r25, Z+25	; 0x19
    431c:	80 34       	cpi	r24, 0x40	; 64
    431e:	91 05       	cpc	r25, r1
    4320:	d9 f0       	breq	.+54     	; 0x4358 <_ZN10helicopter9scheduler9Scheduler5startEv+0x42>
    4322:	34 f4       	brge	.+12     	; 0x4330 <_ZN10helicopter9scheduler9Scheduler5startEv+0x1a>
    4324:	81 30       	cpi	r24, 0x01	; 1
    4326:	91 05       	cpc	r25, r1
    4328:	59 f0       	breq	.+22     	; 0x4340 <_ZN10helicopter9scheduler9Scheduler5startEv+0x2a>
    432a:	08 97       	sbiw	r24, 0x08	; 8
    432c:	39 f5       	brne	.+78     	; 0x437c <_ZN10helicopter9scheduler9Scheduler5startEv+0x66>
    432e:	0e c0       	rjmp	.+28     	; 0x434c <_ZN10helicopter9scheduler9Scheduler5startEv+0x36>
    4330:	81 15       	cp	r24, r1
    4332:	f1 e0       	ldi	r31, 0x01	; 1
    4334:	9f 07       	cpc	r25, r31
    4336:	b1 f0       	breq	.+44     	; 0x4364 <_ZN10helicopter9scheduler9Scheduler5startEv+0x4e>
    4338:	81 15       	cp	r24, r1
    433a:	94 40       	sbci	r25, 0x04	; 4
    433c:	f9 f4       	brne	.+62     	; 0x437c <_ZN10helicopter9scheduler9Scheduler5startEv+0x66>
    433e:	18 c0       	rjmp	.+48     	; 0x4370 <_ZN10helicopter9scheduler9Scheduler5startEv+0x5a>
	{
		case 1:
			TCCR1B |= NoPrescaling;
    4340:	e1 e8       	ldi	r30, 0x81	; 129
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	81 60       	ori	r24, 0x01	; 1
    4348:	80 83       	st	Z, r24
			break;
    434a:	08 95       	ret
		case 8:
			TCCR1B |= PrescaleByEight;
    434c:	e1 e8       	ldi	r30, 0x81	; 129
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	80 81       	ld	r24, Z
    4352:	82 60       	ori	r24, 0x02	; 2
    4354:	80 83       	st	Z, r24
			break;
    4356:	08 95       	ret
		case 64:
			TCCR1B |= PrescaleBySixtyFour;
    4358:	e1 e8       	ldi	r30, 0x81	; 129
    435a:	f0 e0       	ldi	r31, 0x00	; 0
    435c:	80 81       	ld	r24, Z
    435e:	83 60       	ori	r24, 0x03	; 3
    4360:	80 83       	st	Z, r24
			break;
    4362:	08 95       	ret
		case 256:
			TCCR1B |= PrescaleByTwofiftysix;
    4364:	e1 e8       	ldi	r30, 0x81	; 129
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	80 81       	ld	r24, Z
    436a:	84 60       	ori	r24, 0x04	; 4
    436c:	80 83       	st	Z, r24
			break;
    436e:	08 95       	ret
		case 1024:
			TCCR1B |= PrescaleByTentwentyfour;
    4370:	e1 e8       	ldi	r30, 0x81	; 129
    4372:	f0 e0       	ldi	r31, 0x00	; 0
    4374:	80 81       	ld	r24, Z
    4376:	85 60       	ori	r24, 0x05	; 5
    4378:	80 83       	st	Z, r24
			break;
    437a:	08 95       	ret
		default:
			TCCR1B |= NoPrescaling;	
    437c:	e1 e8       	ldi	r30, 0x81	; 129
    437e:	f0 e0       	ldi	r31, 0x00	; 0
    4380:	80 81       	ld	r24, Z
    4382:	81 60       	ori	r24, 0x01	; 1
    4384:	80 83       	st	Z, r24
    4386:	08 95       	ret

00004388 <__vector_17>:

/**
 * Interrupt service routine for determining when tasks are ready to execute.
 */
ISR(TIMER1_COMPA_vect)
{
    4388:	1f 92       	push	r1
    438a:	0f 92       	push	r0
    438c:	0f b6       	in	r0, 0x3f	; 63
    438e:	0f 92       	push	r0
    4390:	11 24       	eor	r1, r1
    4392:	0b b6       	in	r0, 0x3b	; 59
    4394:	0f 92       	push	r0
    4396:	2f 93       	push	r18
    4398:	3f 93       	push	r19
    439a:	4f 93       	push	r20
    439c:	5f 93       	push	r21
    439e:	6f 93       	push	r22
    43a0:	7f 93       	push	r23
    43a2:	8f 93       	push	r24
    43a4:	9f 93       	push	r25
    43a6:	af 93       	push	r26
    43a8:	bf 93       	push	r27
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	ef 93       	push	r30
    43b0:	ff 93       	push	r31
	//TODO do we want to stop interrupts in this method?
	Scheduler *scheduler = Scheduler::getScheduler();
    43b2:	0e 94 cb 20 	call	0x4196	; 0x4196 <_ZN10helicopter9scheduler9Scheduler12getSchedulerEv>
    43b6:	ec 01       	movw	r28, r24
	
	//Detect if the scheduler blew a frame
	if (!scheduler->hasCompletedDispatch())
    43b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43ba:	81 11       	cpse	r24, r1
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <__vector_17+0x3a>
				 * the scheduler timmer was triggered again)
				 * @param blownFrameDetected true if a frame was blown, false otherwise.
				 */
				void hasBlownFrame(bool blowFrameDetected)
				{
					this->blowFrameDetected = blowFrameDetected;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	8a 8f       	std	Y+26, r24	; 0x1a
	
	Task *task = NULL;
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    43c2:	8c 89       	ldd	r24, Y+20	; 0x14
    43c4:	9d 89       	ldd	r25, Y+21	; 0x15
    43c6:	18 16       	cp	r1, r24
    43c8:	19 06       	cpc	r1, r25
    43ca:	e4 f4       	brge	.+56     	; 0x4404 <__vector_17+0x7c>
    43cc:	de 01       	movw	r26, r28
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	61 e0       	ldi	r22, 0x01	; 1
	{
		task = scheduler->getTasks()[i];
    43d4:	ed 91       	ld	r30, X+
    43d6:	fd 91       	ld	r31, X+
				virtual void runTask();
				
					
				int getDelay()
				{
					return delay;
    43d8:	42 81       	ldd	r20, Z+2	; 0x02
    43da:	53 81       	ldd	r21, Z+3	; 0x03
		
		if (task->getDelay() == 0)
    43dc:	41 15       	cp	r20, r1
    43de:	51 05       	cpc	r21, r1
    43e0:	31 f4       	brne	.+12     	; 0x43ee <__vector_17+0x66>
					return isReadyToRun;
				}
				
				void setIsReadyToRun(bool isReadyToRun)
				{
					this->isReadyToRun = isReadyToRun;
    43e2:	66 83       	std	Z+6, r22	; 0x06
					return period;
				}
				
				void setDelay(int delay)
				{
					this->delay = delay;
    43e4:	84 81       	ldd	r24, Z+4	; 0x04
    43e6:	95 81       	ldd	r25, Z+5	; 0x05
    43e8:	93 83       	std	Z+3, r25	; 0x03
    43ea:	82 83       	std	Z+2, r24	; 0x02
    43ec:	04 c0       	rjmp	.+8      	; 0x43f6 <__vector_17+0x6e>
				/**
				 * Reduces the delay by one tick.
				 */
				void reduceDelay()
				{
					delay--;
    43ee:	41 50       	subi	r20, 0x01	; 1
    43f0:	51 09       	sbc	r21, r1
    43f2:	53 83       	std	Z+3, r21	; 0x03
    43f4:	42 83       	std	Z+2, r20	; 0x02
	
	Task *task = NULL;
	
	//iterate through all the tasks and decrement how many
	//'ticks' are left before the task is ready to execute.
	for (int i = 0; i < scheduler->getNumOfTasks(); i++)
    43f6:	2f 5f       	subi	r18, 0xFF	; 255
    43f8:	3f 4f       	sbci	r19, 0xFF	; 255
    43fa:	4c 89       	ldd	r20, Y+20	; 0x14
    43fc:	5d 89       	ldd	r21, Y+21	; 0x15
    43fe:	24 17       	cp	r18, r20
    4400:	35 07       	cpc	r19, r21
    4402:	44 f3       	brlt	.-48     	; 0x43d4 <__vector_17+0x4c>
		}else
		{
			task->reduceDelay();
		}
	}
}
    4404:	ff 91       	pop	r31
    4406:	ef 91       	pop	r30
    4408:	df 91       	pop	r29
    440a:	cf 91       	pop	r28
    440c:	bf 91       	pop	r27
    440e:	af 91       	pop	r26
    4410:	9f 91       	pop	r25
    4412:	8f 91       	pop	r24
    4414:	7f 91       	pop	r23
    4416:	6f 91       	pop	r22
    4418:	5f 91       	pop	r21
    441a:	4f 91       	pop	r20
    441c:	3f 91       	pop	r19
    441e:	2f 91       	pop	r18
    4420:	0f 90       	pop	r0
    4422:	0b be       	out	0x3b, r0	; 59
    4424:	0f 90       	pop	r0
    4426:	0f be       	out	0x3f, r0	; 63
    4428:	0f 90       	pop	r0
    442a:	1f 90       	pop	r1
    442c:	18 95       	reti

0000442e <_ZN10helicopter7sensors9IMUSensor4initEv>:
#include "IMUSensor.h"

using namespace helicopter::sensors;

void IMUSensor::init()
{
    442e:	cf 93       	push	r28
    4430:	df 93       	push	r29
    4432:	ec 01       	movw	r28, r24
	
	//Reset the sensor in case of a soft reset the sensor
	//might still have had power and thus not reset.
	spiDriver->beginTransaction();
    4434:	8c a1       	ldd	r24, Y+36	; 0x24
    4436:	9d a1       	ldd	r25, Y+37	; 0x25
    4438:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>
	spiDriver->write(REG_PWR_MGMT_1,BITS_DEVICE_RESET);
    443c:	40 e8       	ldi	r20, 0x80	; 128
    443e:	6b e6       	ldi	r22, 0x6B	; 107
    4440:	8c a1       	ldd	r24, Y+36	; 0x24
    4442:	9d a1       	ldd	r25, Y+37	; 0x25
    4444:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>

	//End the transaction. If I don't close and restart a new
	//transaction, accelerometer data doesn't seem to be able to be read.
	spiDriver->endTransaction();
    4448:	8c a1       	ldd	r24, Y+36	; 0x24
    444a:	9d a1       	ldd	r25, Y+37	; 0x25
    444c:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>
    4450:	2f ef       	ldi	r18, 0xFF	; 255
    4452:	81 ee       	ldi	r24, 0xE1	; 225
    4454:	94 e0       	ldi	r25, 0x04	; 4
    4456:	21 50       	subi	r18, 0x01	; 1
    4458:	80 40       	sbci	r24, 0x00	; 0
    445a:	90 40       	sbci	r25, 0x00	; 0
    445c:	e1 f7       	brne	.-8      	; 0x4456 <_ZN10helicopter7sensors9IMUSensor4initEv+0x28>
    445e:	00 c0       	rjmp	.+0      	; 0x4460 <_ZN10helicopter7sensors9IMUSensor4initEv+0x32>
    4460:	00 00       	nop
	
	//wait for device reset
	_delay_ms(100);

	spiDriver->beginTransaction();
    4462:	8c a1       	ldd	r24, Y+36	; 0x24
    4464:	9d a1       	ldd	r25, Y+37	; 0x25
    4466:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>

	//Select Gyro Z as the reference clock. Selecting a gyro clock
	//is recommended in pag 41 of RM-MPU-6000A.pdf for improved stability.
	spiDriver->write(REG_PWR_MGMT_1,BITS_CLKSEL_GYROZ);
    446a:	43 e0       	ldi	r20, 0x03	; 3
    446c:	6b e6       	ldi	r22, 0x6B	; 107
    446e:	8c a1       	ldd	r24, Y+36	; 0x24
    4470:	9d a1       	ldd	r25, Y+37	; 0x25
    4472:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	
	spiDriver->endTransaction();
    4476:	8c a1       	ldd	r24, Y+36	; 0x24
    4478:	9d a1       	ldd	r25, Y+37	; 0x25
    447a:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>
    447e:	2f ef       	ldi	r18, 0xFF	; 255
    4480:	81 ee       	ldi	r24, 0xE1	; 225
    4482:	94 e0       	ldi	r25, 0x04	; 4
    4484:	21 50       	subi	r18, 0x01	; 1
    4486:	80 40       	sbci	r24, 0x00	; 0
    4488:	90 40       	sbci	r25, 0x00	; 0
    448a:	e1 f7       	brne	.-8      	; 0x4484 <_ZN10helicopter7sensors9IMUSensor4initEv+0x56>
    448c:	00 c0       	rjmp	.+0      	; 0x448e <_ZN10helicopter7sensors9IMUSensor4initEv+0x60>
    448e:	00 00       	nop
	//Wait for the system to process the clock change. This
	//takes a long time and reading accelerometer data
	//returns 0 unless this is done.
	_delay_ms(100);
	
	spiDriver->beginTransaction();
    4490:	8c a1       	ldd	r24, Y+36	; 0x24
    4492:	9d a1       	ldd	r25, Y+37	; 0x25
    4494:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN10helicopter7drivers9SPIDriver16beginTransactionEv>

	//Enable SPI Interface / disable i2c.
	spiDriver->write(REG_USER_CTRL,BITS_I2C_IF_DIS);
    4498:	40 e1       	ldi	r20, 0x10	; 16
    449a:	6a e6       	ldi	r22, 0x6A	; 106
    449c:	8c a1       	ldd	r24, Y+36	; 0x24
    449e:	9d a1       	ldd	r25, Y+37	; 0x25
    44a0:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//Set the sampling rate to 1kHz.
	spiDriver->write(REG_SMPLRT_DIV,BITS_SMPLRT_DIV);
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	69 e1       	ldi	r22, 0x19	; 25
    44a8:	8c a1       	ldd	r24, Y+36	; 0x24
    44aa:	9d a1       	ldd	r25, Y+37	; 0x25
    44ac:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//Configures the Digital Low Pass Filter. This is how frequently the sensor readings are updated
	//for accelerometers and gyroscopes.
	spiDriver->write(REG_CONFIG,BITS_DLPF_CFG);
    44b0:	42 e0       	ldi	r20, 0x02	; 2
    44b2:	6a e1       	ldi	r22, 0x1A	; 26
    44b4:	8c a1       	ldd	r24, Y+36	; 0x24
    44b6:	9d a1       	ldd	r25, Y+37	; 0x25
    44b8:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//Configures the sensitivity / scale range of the gyroscope
	spiDriver->write(REG_GYRO_CONFIG,BITS_FS_SEL);
    44bc:	48 e1       	ldi	r20, 0x18	; 24
    44be:	6b e1       	ldi	r22, 0x1B	; 27
    44c0:	8c a1       	ldd	r24, Y+36	; 0x24
    44c2:	9d a1       	ldd	r25, Y+37	; 0x25
    44c4:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	//configure the sensitivity / scale range of the accelerometer
	spiDriver->write(REG_ACCEL_CONFIG,BITS_AFS_SEL);
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	6c e1       	ldi	r22, 0x1C	; 28
    44cc:	8c a1       	ldd	r24, Y+36	; 0x24
    44ce:	9d a1       	ldd	r25, Y+37	; 0x25
    44d0:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN10helicopter7drivers9SPIDriver5writeEhh>
	
	spiDriver->endTransaction();
    44d4:	8c a1       	ldd	r24, Y+36	; 0x24
    44d6:	9d a1       	ldd	r25, Y+37	; 0x25
    44d8:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10helicopter7drivers9SPIDriver14endTransactionEv>

}
    44dc:	df 91       	pop	r29
    44de:	cf 91       	pop	r28
    44e0:	08 95       	ret

000044e2 <_ZN10helicopter5tasks4Task4initEv>:
				virtual ~Task(){}
				
				/**
				 * Function to initialize the task before execution.
				 */
				virtual void init(){;}
    44e2:	08 95       	ret

000044e4 <_ZN10helicopter5tasks16PIDInnerLoopTaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    44e4:	2a e8       	ldi	r18, 0x8A	; 138
    44e6:	32 e0       	ldi	r19, 0x02	; 2
    44e8:	fc 01       	movw	r30, r24
    44ea:	31 83       	std	Z+1, r19	; 0x01
    44ec:	20 83       	st	Z, r18
    44ee:	08 95       	ret

000044f0 <_ZN10helicopter5tasks16PIDInnerLoopTaskD0Ev>:
    44f0:	2a e8       	ldi	r18, 0x8A	; 138
    44f2:	32 e0       	ldi	r19, 0x02	; 2
    44f4:	fc 01       	movw	r30, r24
    44f6:	31 83       	std	Z+1, r19	; 0x01
    44f8:	20 83       	st	Z, r18
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDInnerLoopTask : public Task
    44fa:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    44fe:	08 95       	ret

00004500 <_ZN10helicopter5tasks16PIDInnerLoopTask11runTaskImplEv>:
{
	
}

void PIDInnerLoopTask::runTaskImpl()
{
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	ec 01       	movw	r28, r24
	pidController->cyclicLateralInnerLoopUpdate();
    4506:	8f 81       	ldd	r24, Y+7	; 0x07
    4508:	98 85       	ldd	r25, Y+8	; 0x08
    450a:	0e 94 85 08 	call	0x110a	; 0x110a <_ZN10helicopter10controller13PIDController28cyclicLateralInnerLoopUpdateEv>
	pidController->cyclicLongitudeInnerLoopUpdate();
    450e:	8f 81       	ldd	r24, Y+7	; 0x07
    4510:	98 85       	ldd	r25, Y+8	; 0x08
    4512:	0e 94 17 08 	call	0x102e	; 0x102e <_ZN10helicopter10controller13PIDController30cyclicLongitudeInnerLoopUpdateEv>
}
    4516:	df 91       	pop	r29
    4518:	cf 91       	pop	r28
    451a:	08 95       	ret

0000451c <_ZN10helicopter5tasks16PIDInnerLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDInnerLoopTask.h"

using namespace helicopter::tasks;

PIDInnerLoopTask::PIDInnerLoopTask (PIDController *pidController, int delay, int period) :
    451c:	0f 93       	push	r16
    451e:	1f 93       	push	r17
    4520:	cf 93       	push	r28
    4522:	df 93       	push	r29
    4524:	ec 01       	movw	r28, r24
    4526:	8b 01       	movw	r16, r22
    4528:	ba 01       	movw	r22, r20
Task(delay, period),
pidController(pidController)
    452a:	a9 01       	movw	r20, r18
    452c:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN10helicopter5tasks4TaskC1Eii>
    4530:	82 e5       	ldi	r24, 0x52	; 82
    4532:	92 e0       	ldi	r25, 0x02	; 2
    4534:	99 83       	std	Y+1, r25	; 0x01
    4536:	88 83       	st	Y, r24
    4538:	18 87       	std	Y+8, r17	; 0x08
    453a:	0f 83       	std	Y+7, r16	; 0x07
{
	
}
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	1f 91       	pop	r17
    4542:	0f 91       	pop	r16
    4544:	08 95       	ret

00004546 <_ZN10helicopter5tasks16PIDOuterLoopTaskD1Ev>:
    4546:	2a e8       	ldi	r18, 0x8A	; 138
    4548:	32 e0       	ldi	r19, 0x02	; 2
    454a:	fc 01       	movw	r30, r24
    454c:	31 83       	std	Z+1, r19	; 0x01
    454e:	20 83       	st	Z, r18
    4550:	08 95       	ret

00004552 <_ZN10helicopter5tasks16PIDOuterLoopTaskD0Ev>:
    4552:	2a e8       	ldi	r18, 0x8A	; 138
    4554:	32 e0       	ldi	r19, 0x02	; 2
    4556:	fc 01       	movw	r30, r24
    4558:	31 83       	std	Z+1, r19	; 0x01
    455a:	20 83       	st	Z, r18
	namespace tasks
	{
		/**
		 * This class executes the outer loop of the PID controller
		 */
		class PIDOuterLoopTask : public Task
    455c:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    4560:	08 95       	ret

00004562 <_ZN10helicopter5tasks16PIDOuterLoopTask11runTaskImplEv>:
{
	
}

void PIDOuterLoopTask::runTaskImpl()
{
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	ec 01       	movw	r28, r24
	pidController->mainRotorCollectiveOuterLoopUpdate();
    4568:	8f 81       	ldd	r24, Y+7	; 0x07
    456a:	98 85       	ldd	r25, Y+8	; 0x08
    456c:	0e 94 08 05 	call	0xa10	; 0xa10 <_ZN10helicopter10controller13PIDController34mainRotorCollectiveOuterLoopUpdateEv>
	pidController->tailRotorCollectiveOuterLoopUpdate();
    4570:	8f 81       	ldd	r24, Y+7	; 0x07
    4572:	98 85       	ldd	r25, Y+8	; 0x08
    4574:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN10helicopter10controller13PIDController34tailRotorCollectiveOuterLoopUpdateEv>
	pidController->cyclicLongitudeOuterLoopUpdate();
    4578:	8f 81       	ldd	r24, Y+7	; 0x07
    457a:	98 85       	ldd	r25, Y+8	; 0x08
    457c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN10helicopter10controller13PIDController30cyclicLongitudeOuterLoopUpdateEv>
	pidController->cyclicLateralOuterLoopUpdate();
    4580:	8f 81       	ldd	r24, Y+7	; 0x07
    4582:	98 85       	ldd	r25, Y+8	; 0x08
    4584:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN10helicopter10controller13PIDController28cyclicLateralOuterLoopUpdateEv>
}
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	08 95       	ret

0000458e <_ZN10helicopter5tasks16PIDOuterLoopTaskC1EPNS_10controller13PIDControllerEii>:
 */ 
#include "PIDOuterLoopTask.h"

using namespace helicopter::tasks;

PIDOuterLoopTask::PIDOuterLoopTask (PIDController *pidController, int delay, int period) :
    458e:	0f 93       	push	r16
    4590:	1f 93       	push	r17
    4592:	cf 93       	push	r28
    4594:	df 93       	push	r29
    4596:	ec 01       	movw	r28, r24
    4598:	8b 01       	movw	r16, r22
    459a:	ba 01       	movw	r22, r20
Task(delay, period),
pidController(pidController)
    459c:	a9 01       	movw	r20, r18
    459e:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN10helicopter5tasks4TaskC1Eii>
    45a2:	80 e6       	ldi	r24, 0x60	; 96
    45a4:	92 e0       	ldi	r25, 0x02	; 2
    45a6:	99 83       	std	Y+1, r25	; 0x01
    45a8:	88 83       	st	Y, r24
    45aa:	18 87       	std	Y+8, r17	; 0x08
    45ac:	0f 83       	std	Y+7, r16	; 0x07
{
	
}
    45ae:	df 91       	pop	r29
    45b0:	cf 91       	pop	r28
    45b2:	1f 91       	pop	r17
    45b4:	0f 91       	pop	r16
    45b6:	08 95       	ret

000045b8 <_ZN10helicopter5tasks20SensorProcessingTaskD1Ev>:
    45b8:	2a e8       	ldi	r18, 0x8A	; 138
    45ba:	32 e0       	ldi	r19, 0x02	; 2
    45bc:	fc 01       	movw	r30, r24
    45be:	31 83       	std	Z+1, r19	; 0x01
    45c0:	20 83       	st	Z, r18
    45c2:	08 95       	ret

000045c4 <_ZN10helicopter5tasks20SensorProcessingTaskD0Ev>:
    45c4:	2a e8       	ldi	r18, 0x8A	; 138
    45c6:	32 e0       	ldi	r19, 0x02	; 2
    45c8:	fc 01       	movw	r30, r24
    45ca:	31 83       	std	Z+1, r19	; 0x01
    45cc:	20 83       	st	Z, r18
	{
		/**
		 * This class processes and transforms sensor data such as converting latitude/longitude into
		 * x,y,z coordinates
		 */
		class SensorProcessingTask : public Task
    45ce:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    45d2:	08 95       	ret

000045d4 <_ZN10helicopter5tasks20SensorProcessingTask11runTaskImplEv>:
{
	
}

void SensorProcessingTask::runTaskImpl()
{
    45d4:	4f 92       	push	r4
    45d6:	5f 92       	push	r5
    45d8:	6f 92       	push	r6
    45da:	7f 92       	push	r7
    45dc:	8f 92       	push	r8
    45de:	9f 92       	push	r9
    45e0:	af 92       	push	r10
    45e2:	bf 92       	push	r11
    45e4:	cf 92       	push	r12
    45e6:	df 92       	push	r13
    45e8:	ef 92       	push	r14
    45ea:	ff 92       	push	r15
    45ec:	0f 93       	push	r16
    45ee:	1f 93       	push	r17
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	cd b7       	in	r28, 0x3d	; 61
    45f6:	de b7       	in	r29, 0x3e	; 62
    45f8:	64 97       	sbiw	r28, 0x14	; 20
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	4c 01       	movw	r8, r24
	float localNEDX = 0;
    4606:	19 86       	std	Y+9, r1	; 0x09
    4608:	1a 86       	std	Y+10, r1	; 0x0a
    460a:	1b 86       	std	Y+11, r1	; 0x0b
    460c:	1c 86       	std	Y+12, r1	; 0x0c
	float localNEDY = 0;
    460e:	1d 82       	std	Y+5, r1	; 0x05
    4610:	1e 82       	std	Y+6, r1	; 0x06
    4612:	1f 82       	std	Y+7, r1	; 0x07
    4614:	18 86       	std	Y+8, r1	; 0x08
	float localNEDZ = 0;
    4616:	19 82       	std	Y+1, r1	; 0x01
    4618:	1a 82       	std	Y+2, r1	; 0x02
    461a:	1b 82       	std	Y+3, r1	; 0x03
    461c:	1c 82       	std	Y+4, r1	; 0x04
	
	CoordinateUtil::ConvertFromGeodedicToLocalNED(model->LatitudeDegrees(), model->LongitudeDegrees(), model->AltitudeFeetAgl(), 
		model->InitialXPositionEcef(), model->InitialYPositionEcef(), model->InitialZPositionEcef(),model->EcefToLocalNEDRotationMatrix,
		localNEDX,localNEDY,localNEDZ);
    461e:	dc 01       	movw	r26, r24
    4620:	17 96       	adiw	r26, 0x07	; 7
    4622:	0d 91       	ld	r16, X+
    4624:	1c 91       	ld	r17, X
    4626:	18 97       	sbiw	r26, 0x08	; 8
			void BlownFrames( long val ) { numOfFramesBlown = val;}
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
			void SerialCommunicationBufferOverruns( long val ) { serialCommunicationBufferOverruns = val;}				

			long  InitialXPositionEcef() const {return initialXPositionEcef;}
    4628:	f8 01       	movw	r30, r16
    462a:	e7 53       	subi	r30, 0x37	; 55
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	60 81       	ld	r22, Z
    4630:	71 81       	ldd	r23, Z+1	; 0x01
    4632:	82 81       	ldd	r24, Z+2	; 0x02
    4634:	93 81       	ldd	r25, Z+3	; 0x03
    4636:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__fixsfsi>
    463a:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
    463e:	5b 01       	movw	r10, r22
    4640:	6c 01       	movw	r12, r24
						
						
						
						

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
    4642:	f8 01       	movw	r30, r16
    4644:	eb 57       	subi	r30, 0x7B	; 123
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	80 81       	ld	r24, Z
    464a:	91 81       	ldd	r25, Z+1	; 0x01
    464c:	a2 81       	ldd	r26, Z+2	; 0x02
    464e:	b3 81       	ldd	r27, Z+3	; 0x03
    4650:	8d 87       	std	Y+13, r24	; 0x0d
    4652:	9e 87       	std	Y+14, r25	; 0x0e
    4654:	af 87       	std	Y+15, r26	; 0x0f
    4656:	b8 8b       	std	Y+16, r27	; 0x10
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
			void LatitudeDegrees(float val) { latitudeDegrees = val;}						

			float LongitudeDegrees() const {return longitudeDegrees;}
    4658:	f8 01       	movw	r30, r16
    465a:	ef 54       	subi	r30, 0x4F	; 79
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	80 81       	ld	r24, Z
    4660:	91 81       	ldd	r25, Z+1	; 0x01
    4662:	a2 81       	ldd	r26, Z+2	; 0x02
    4664:	b3 81       	ldd	r27, Z+3	; 0x03
    4666:	89 8b       	std	Y+17, r24	; 0x11
    4668:	9a 8b       	std	Y+18, r25	; 0x12
    466a:	ab 8b       	std	Y+19, r26	; 0x13
    466c:	bc 8b       	std	Y+20, r27	; 0x14

			float ZDerivativeError() const {return zDerivativeError;}
			void ZDerivativeError(float val) { zDerivativeError = val;}						
						
						
			float LatitudeDegrees() const {return latitudeDegrees;}
    466e:	f8 01       	movw	r30, r16
    4670:	e3 55       	subi	r30, 0x53	; 83
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	40 80       	ld	r4, Z
    4676:	51 80       	ldd	r5, Z+1	; 0x01
    4678:	62 80       	ldd	r6, Z+2	; 0x02
    467a:	73 80       	ldd	r7, Z+3	; 0x03
    467c:	ce 01       	movw	r24, r28
    467e:	01 96       	adiw	r24, 0x01	; 1
    4680:	9f 93       	push	r25
    4682:	8f 93       	push	r24
    4684:	ce 01       	movw	r24, r28
    4686:	05 96       	adiw	r24, 0x05	; 5
    4688:	9f 93       	push	r25
    468a:	8f 93       	push	r24
    468c:	ce 01       	movw	r24, r28
    468e:	09 96       	adiw	r24, 0x09	; 9
    4690:	9f 93       	push	r25
    4692:	8f 93       	push	r24
    4694:	c8 01       	movw	r24, r16
    4696:	8b 52       	subi	r24, 0x2B	; 43
    4698:	9f 4f       	sbci	r25, 0xFF	; 255
    469a:	9f 93       	push	r25
    469c:	8f 93       	push	r24
			void InitialXPositionEcef( long val ) { initialXPositionEcef = val;}			

			long  InitialYPositionEcef() const {return initialYPositionEcef;}
			void InitialYPositionEcef( long val ) { initialYPositionEcef = val;}

			long  InitialZPositionEcef() const {return initialZPositionEcef;}
    469e:	f8 01       	movw	r30, r16
    46a0:	ef 52       	subi	r30, 0x2F	; 47
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	60 81       	ld	r22, Z
    46a6:	71 81       	ldd	r23, Z+1	; 0x01
    46a8:	82 81       	ldd	r24, Z+2	; 0x02
    46aa:	93 81       	ldd	r25, Z+3	; 0x03
    46ac:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__fixsfsi>
    46b0:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
    46b4:	9f 93       	push	r25
    46b6:	8f 93       	push	r24
    46b8:	7f 93       	push	r23
    46ba:	6f 93       	push	r22
			void SerialCommunicationBufferOverruns( long val ) { serialCommunicationBufferOverruns = val;}				

			long  InitialXPositionEcef() const {return initialXPositionEcef;}
			void InitialXPositionEcef( long val ) { initialXPositionEcef = val;}			

			long  InitialYPositionEcef() const {return initialYPositionEcef;}
    46bc:	f8 01       	movw	r30, r16
    46be:	e3 53       	subi	r30, 0x33	; 51
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	60 81       	ld	r22, Z
    46c4:	71 81       	ldd	r23, Z+1	; 0x01
    46c6:	82 81       	ldd	r24, Z+2	; 0x02
    46c8:	93 81       	ldd	r25, Z+3	; 0x03
    46ca:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__fixsfsi>
    46ce:	0e 94 6f 2c 	call	0x58de	; 0x58de <__floatsisf>
    46d2:	9f 93       	push	r25
    46d4:	8f 93       	push	r24
    46d6:	7f 93       	push	r23
    46d8:	6f 93       	push	r22
    46da:	ed 84       	ldd	r14, Y+13	; 0x0d
    46dc:	fe 84       	ldd	r15, Y+14	; 0x0e
    46de:	0f 85       	ldd	r16, Y+15	; 0x0f
    46e0:	18 89       	ldd	r17, Y+16	; 0x10
    46e2:	29 89       	ldd	r18, Y+17	; 0x11
    46e4:	3a 89       	ldd	r19, Y+18	; 0x12
    46e6:	4b 89       	ldd	r20, Y+19	; 0x13
    46e8:	5c 89       	ldd	r21, Y+20	; 0x14
    46ea:	c3 01       	movw	r24, r6
    46ec:	b2 01       	movw	r22, r4
    46ee:	0e 94 9c 28 	call	0x5138	; 0x5138 <_ZN10helicopter4util14CoordinateUtil29ConvertFromGeodedicToLocalNEDEffffffPA3_fRfS4_S4_>
		
		
	model->XNEDBodyFrame(localNEDX);
    46f2:	d4 01       	movw	r26, r8
    46f4:	17 96       	adiw	r26, 0x07	; 7
    46f6:	ed 91       	ld	r30, X+
    46f8:	fc 91       	ld	r31, X
    46fa:	18 97       	sbiw	r26, 0x08	; 8
																							
		
		
		
			float XNEDBodyFrame() const {return xNEDBodyFrame;}
			void XNEDBodyFrame(float val) { xNEDBodyFrame = val;}
    46fc:	89 85       	ldd	r24, Y+9	; 0x09
    46fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4700:	ab 85       	ldd	r26, Y+11	; 0x0b
    4702:	bc 85       	ldd	r27, Y+12	; 0x0c
    4704:	85 a3       	std	Z+37, r24	; 0x25
    4706:	96 a3       	std	Z+38, r25	; 0x26
    4708:	a7 a3       	std	Z+39, r26	; 0x27
    470a:	b0 a7       	std	Z+40, r27	; 0x28
	model->YNEDBodyFrame(localNEDY);
    470c:	d4 01       	movw	r26, r8
    470e:	17 96       	adiw	r26, 0x07	; 7
    4710:	ed 91       	ld	r30, X+
    4712:	fc 91       	ld	r31, X
    4714:	18 97       	sbiw	r26, 0x08	; 8
						
						


			float YNEDBodyFrame() const {return yNEDBodyFrame;}
			void YNEDBodyFrame(float val) { yNEDBodyFrame = val;}
    4716:	eb 5a       	subi	r30, 0xAB	; 171
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	8d 81       	ldd	r24, Y+5	; 0x05
    471c:	9e 81       	ldd	r25, Y+6	; 0x06
    471e:	af 81       	ldd	r26, Y+7	; 0x07
    4720:	b8 85       	ldd	r27, Y+8	; 0x08
    4722:	80 83       	st	Z, r24
    4724:	91 83       	std	Z+1, r25	; 0x01
    4726:	a2 83       	std	Z+2, r26	; 0x02
    4728:	b3 83       	std	Z+3, r27	; 0x03
	model->ZNEDBodyFrame(localNEDZ);
    472a:	d4 01       	movw	r26, r8
    472c:	17 96       	adiw	r26, 0x07	; 7
    472e:	ed 91       	ld	r30, X+
    4730:	fc 91       	ld	r31, X
    4732:	18 97       	sbiw	r26, 0x08	; 8

			float AltitudeFeetAgl() const { return altitudeFeetAgl; }
			void AltitudeFeetAgl(float val) { altitudeFeetAgl = val; }

			float ZNEDBodyFrame() const { return zNEDBodyFrame; }
			void ZNEDBodyFrame(float val) { zNEDBodyFrame = val; }
    4734:	e7 57       	subi	r30, 0x77	; 119
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	89 81       	ldd	r24, Y+1	; 0x01
    473a:	9a 81       	ldd	r25, Y+2	; 0x02
    473c:	ab 81       	ldd	r26, Y+3	; 0x03
    473e:	bc 81       	ldd	r27, Y+4	; 0x04
    4740:	80 83       	st	Z, r24
    4742:	91 83       	std	Z+1, r25	; 0x01
    4744:	a2 83       	std	Z+2, r26	; 0x02
    4746:	b3 83       	std	Z+3, r27	; 0x03
    4748:	0f b6       	in	r0, 0x3f	; 63
    474a:	f8 94       	cli
    474c:	de bf       	out	0x3e, r29	; 62
    474e:	0f be       	out	0x3f, r0	; 63
    4750:	cd bf       	out	0x3d, r28	; 61
}
    4752:	64 96       	adiw	r28, 0x14	; 20
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	1f 91       	pop	r17
    4764:	0f 91       	pop	r16
    4766:	ff 90       	pop	r15
    4768:	ef 90       	pop	r14
    476a:	df 90       	pop	r13
    476c:	cf 90       	pop	r12
    476e:	bf 90       	pop	r11
    4770:	af 90       	pop	r10
    4772:	9f 90       	pop	r9
    4774:	8f 90       	pop	r8
    4776:	7f 90       	pop	r7
    4778:	6f 90       	pop	r6
    477a:	5f 90       	pop	r5
    477c:	4f 90       	pop	r4
    477e:	08 95       	ret

00004780 <_ZN10helicopter5tasks20SensorProcessingTaskC1EPNS_5model11SystemModelEii>:
#include "CoordinateUtil.h"

using namespace helicopter::tasks;
using namespace helicopter::util;

SensorProcessingTask::SensorProcessingTask (SystemModel *model, int delay, int period) :
    4780:	0f 93       	push	r16
    4782:	1f 93       	push	r17
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	ec 01       	movw	r28, r24
    478a:	8b 01       	movw	r16, r22
    478c:	ba 01       	movw	r22, r20
	Task(delay, period),
	model(model)
    478e:	a9 01       	movw	r20, r18
    4790:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN10helicopter5tasks4TaskC1Eii>
    4794:	8e e6       	ldi	r24, 0x6E	; 110
    4796:	92 e0       	ldi	r25, 0x02	; 2
    4798:	99 83       	std	Y+1, r25	; 0x01
    479a:	88 83       	st	Y, r24
    479c:	18 87       	std	Y+8, r17	; 0x08
    479e:	0f 83       	std	Y+7, r16	; 0x07
{
	
}
    47a0:	df 91       	pop	r29
    47a2:	cf 91       	pop	r28
    47a4:	1f 91       	pop	r17
    47a6:	0f 91       	pop	r16
    47a8:	08 95       	ret

000047aa <_ZN10helicopter5tasks16SimTelemetryTaskD1Ev>:
    47aa:	2a e8       	ldi	r18, 0x8A	; 138
    47ac:	32 e0       	ldi	r19, 0x02	; 2
    47ae:	fc 01       	movw	r30, r24
    47b0:	31 83       	std	Z+1, r19	; 0x01
    47b2:	20 83       	st	Z, r18
    47b4:	08 95       	ret

000047b6 <_ZN10helicopter5tasks16SimTelemetryTaskD0Ev>:
    47b6:	2a e8       	ldi	r18, 0x8A	; 138
    47b8:	32 e0       	ldi	r19, 0x02	; 2
    47ba:	fc 01       	movw	r30, r24
    47bc:	31 83       	std	Z+1, r19	; 0x01
    47be:	20 83       	st	Z, r18
	namespace tasks
	{
		/**
		 * Task to receive simulator telemetry data from the ground control station.
		 */
		class SimTelemetryTask : public Task
    47c0:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    47c4:	08 95       	ret

000047c6 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv>:
{
	
}

void SimTelemetryTask::runTaskImpl() 
{
    47c6:	cf 92       	push	r12
    47c8:	df 92       	push	r13
    47ca:	ef 92       	push	r14
    47cc:	ff 92       	push	r15
    47ce:	0f 93       	push	r16
    47d0:	1f 93       	push	r17
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	cd b7       	in	r28, 0x3d	; 61
    47d8:	de b7       	in	r29, 0x3e	; 62
    47da:	27 97       	sbiw	r28, 0x07	; 7
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	f8 94       	cli
    47e0:	de bf       	out	0x3e, r29	; 62
    47e2:	0f be       	out	0x3f, r0	; 63
    47e4:	cd bf       	out	0x3d, r28	; 61
    47e6:	7c 01       	movw	r14, r24
    47e8:	83 e0       	ldi	r24, 0x03	; 3
    47ea:	8b 83       	std	Y+3, r24	; 0x03
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	9d 83       	std	Y+5, r25	; 0x05
    47f2:	8c 83       	std	Y+4, r24	; 0x04
				static const byte MessageType = 3;
							
				static const byte MessageSize =
					sizeof(msgType);
							
				SyncMessage(): Message(MessageType,MessageSize)
    47f4:	8a e3       	ldi	r24, 0x3A	; 58
    47f6:	92 e0       	ldi	r25, 0x02	; 2
    47f8:	9a 83       	std	Y+2, r25	; 0x02
    47fa:	89 83       	std	Y+1, r24	; 0x01
	//Send sync message to indicate to the ground control station that we are ready to receive data.
	//Without this sync message, the GCS could send data while the FC is asleep, which would cause the data
	//to overflow the usart buffer.
	SyncMessage syncMsg;
	
	int status = radioInterface->transmit(&syncMsg);
    47fc:	be 01       	movw	r22, r28
    47fe:	6f 5f       	subi	r22, 0xFF	; 255
    4800:	7f 4f       	sbci	r23, 0xFF	; 255
    4802:	d7 01       	movw	r26, r14
    4804:	17 96       	adiw	r26, 0x07	; 7
    4806:	8d 91       	ld	r24, X+
    4808:	9c 91       	ld	r25, X
    480a:	18 97       	sbiw	r26, 0x08	; 8
    480c:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
    4810:	8c 01       	movw	r16, r24
	
	if (status == 0)
    4812:	00 97       	sbiw	r24, 0x00	; 0
    4814:	09 f0       	breq	.+2      	; 0x4818 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x52>
    4816:	55 c1       	rjmp	.+682    	; 0x4ac2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x2fc>
	{
	
		//Use the radio interface to get the telemetry message from the simulator
		Message *message = NULL;
    4818:	1f 82       	std	Y+7, r1	; 0x07
    481a:	1e 82       	std	Y+6, r1	; 0x06
	
		status = radioInterface->receive(message);
    481c:	be 01       	movw	r22, r28
    481e:	6a 5f       	subi	r22, 0xFA	; 250
    4820:	7f 4f       	sbci	r23, 0xFF	; 255
    4822:	f7 01       	movw	r30, r14
    4824:	87 81       	ldd	r24, Z+7	; 0x07
    4826:	90 85       	ldd	r25, Z+8	; 0x08
    4828:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN10helicopter10interfaces29GroundControlStationInterface7receiveERPNS_8messages7MessageE>
    482c:	8c 01       	movw	r16, r24
	
		if (status == 0 && message != NULL)
    482e:	00 97       	sbiw	r24, 0x00	; 0
    4830:	09 f0       	breq	.+2      	; 0x4834 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x6e>
    4832:	47 c1       	rjmp	.+654    	; 0x4ac2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x2fc>
    4834:	ce 80       	ldd	r12, Y+6	; 0x06
    4836:	df 80       	ldd	r13, Y+7	; 0x07
    4838:	c1 14       	cp	r12, r1
    483a:	d1 04       	cpc	r13, r1
    483c:	09 f4       	brne	.+2      	; 0x4840 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x7a>
    483e:	41 c1       	rjmp	.+642    	; 0x4ac2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x2fc>
		{
			SystemTelemetryMessage *telemMsg = (SystemTelemetryMessage*) message;
			
			//Update the model using the new data received from the simulator.
			telemMsg->updateModelFromMessageFromSimulator(model);
    4840:	d7 01       	movw	r26, r14
    4842:	19 96       	adiw	r26, 0x09	; 9
    4844:	6d 91       	ld	r22, X+
    4846:	7c 91       	ld	r23, X
    4848:	1a 97       	sbiw	r26, 0x0a	; 10
    484a:	c6 01       	movw	r24, r12
    484c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_ZN10helicopter8messages22SystemTelemetryMessage35updateModelFromMessageFromSimulatorEPNS_5model11SystemModelE>
			
			pidController->setYawIntegralGain(telemMsg->YawIntegralGain);
    4850:	f6 01       	movw	r30, r12
    4852:	85 8d       	ldd	r24, Z+29	; 0x1d
    4854:	96 8d       	ldd	r25, Z+30	; 0x1e
    4856:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4858:	b0 a1       	ldd	r27, Z+32	; 0x20
    485a:	f7 01       	movw	r30, r14
    485c:	23 85       	ldd	r18, Z+11	; 0x0b
    485e:	34 85       	ldd	r19, Z+12	; 0x0c
				/**
				 * Gain value applied to the yaw integral
				 */
				void setYawIntegralGain(float yawIntegralGain)
				{
					this->yawIntegralGain = yawIntegralGain;
    4860:	f9 01       	movw	r30, r18
    4862:	82 83       	std	Z+2, r24	; 0x02
    4864:	93 83       	std	Z+3, r25	; 0x03
    4866:	a4 83       	std	Z+4, r26	; 0x04
    4868:	b5 83       	std	Z+5, r27	; 0x05
			pidController->setYawDerivativeGain(telemMsg->YawDerivativeGain);
    486a:	f6 01       	movw	r30, r12
    486c:	81 a1       	ldd	r24, Z+33	; 0x21
    486e:	92 a1       	ldd	r25, Z+34	; 0x22
    4870:	a3 a1       	ldd	r26, Z+35	; 0x23
    4872:	b4 a1       	ldd	r27, Z+36	; 0x24
    4874:	f7 01       	movw	r30, r14
    4876:	23 85       	ldd	r18, Z+11	; 0x0b
    4878:	34 85       	ldd	r19, Z+12	; 0x0c
				/**
				 * Gain value applied to the derivative
				 */
				void setYawDerivativeGain(float yawDerivativeGain)
				{
					this->yawDerivativeGain = yawDerivativeGain;
    487a:	f9 01       	movw	r30, r18
    487c:	86 83       	std	Z+6, r24	; 0x06
    487e:	97 83       	std	Z+7, r25	; 0x07
    4880:	a0 87       	std	Z+8, r26	; 0x08
    4882:	b1 87       	std	Z+9, r27	; 0x09
			pidController->setYawProportionalGain(telemMsg->YawProportionalGain);
    4884:	f6 01       	movw	r30, r12
    4886:	85 a1       	ldd	r24, Z+37	; 0x25
    4888:	96 a1       	ldd	r25, Z+38	; 0x26
    488a:	a7 a1       	ldd	r26, Z+39	; 0x27
    488c:	b0 a5       	ldd	r27, Z+40	; 0x28
    488e:	f7 01       	movw	r30, r14
    4890:	23 85       	ldd	r18, Z+11	; 0x0b
    4892:	34 85       	ldd	r19, Z+12	; 0x0c
				/**
				 * Gain value applied to the yaw proportional error
				 */
				void setYawProportionalGain(float yawProportionalGain)
				{
					this->yawProportionalGain = yawProportionalGain;
    4894:	f9 01       	movw	r30, r18
    4896:	82 87       	std	Z+10, r24	; 0x0a
    4898:	93 87       	std	Z+11, r25	; 0x0b
    489a:	a4 87       	std	Z+12, r26	; 0x0c
    489c:	b5 87       	std	Z+13, r27	; 0x0d
			pidController->setYawAntiWindupGain(telemMsg->YawAntiWindupGain);
    489e:	f6 01       	movw	r30, r12
    48a0:	81 a5       	ldd	r24, Z+41	; 0x29
    48a2:	92 a5       	ldd	r25, Z+42	; 0x2a
    48a4:	a3 a5       	ldd	r26, Z+43	; 0x2b
    48a6:	b4 a5       	ldd	r27, Z+44	; 0x2c
    48a8:	f7 01       	movw	r30, r14
    48aa:	23 85       	ldd	r18, Z+11	; 0x0b
    48ac:	34 85       	ldd	r19, Z+12	; 0x0c
				 * go back to 0 when the servos are saturated.
				 * Some simple rule that have been suggested for the tracking time are ~ Tt = TiTd and Tt = (Ti + Td)/2.
				 */
				void setYawAntiWindupGain(float yawAntiWindupGain)
				{
					this->yawAntiWindupGain = yawAntiWindupGain;
    48ae:	f9 01       	movw	r30, r18
    48b0:	86 87       	std	Z+14, r24	; 0x0e
    48b2:	97 87       	std	Z+15, r25	; 0x0f
    48b4:	a0 8b       	std	Z+16, r26	; 0x10
    48b6:	b1 8b       	std	Z+17, r27	; 0x11
		
			pidController->setXIntegralGain(telemMsg->XIntegralGain);
    48b8:	f6 01       	movw	r30, r12
    48ba:	e7 5b       	subi	r30, 0xB7	; 183
    48bc:	ff 4f       	sbci	r31, 0xFF	; 255
    48be:	80 81       	ld	r24, Z
    48c0:	91 81       	ldd	r25, Z+1	; 0x01
    48c2:	a2 81       	ldd	r26, Z+2	; 0x02
    48c4:	b3 81       	ldd	r27, Z+3	; 0x03
    48c6:	f7 01       	movw	r30, r14
    48c8:	23 85       	ldd	r18, Z+11	; 0x0b
    48ca:	34 85       	ldd	r19, Z+12	; 0x0c
					
				~PIDController();
				
				void setXIntegralGain(float val)
				{
					xIntegralGain = val;
    48cc:	f9 01       	movw	r30, r18
    48ce:	82 8b       	std	Z+18, r24	; 0x12
    48d0:	93 8b       	std	Z+19, r25	; 0x13
    48d2:	a4 8b       	std	Z+20, r26	; 0x14
    48d4:	b5 8b       	std	Z+21, r27	; 0x15
			pidController->setXDerivativeGain(telemMsg->XDerivativeGain);
    48d6:	f6 01       	movw	r30, r12
    48d8:	e3 5b       	subi	r30, 0xB3	; 179
    48da:	ff 4f       	sbci	r31, 0xFF	; 255
    48dc:	80 81       	ld	r24, Z
    48de:	91 81       	ldd	r25, Z+1	; 0x01
    48e0:	a2 81       	ldd	r26, Z+2	; 0x02
    48e2:	b3 81       	ldd	r27, Z+3	; 0x03
    48e4:	f7 01       	movw	r30, r14
    48e6:	23 85       	ldd	r18, Z+11	; 0x0b
    48e8:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setXDerivativeGain(float val)
				{
					xDerivativeGain = val;
    48ea:	f9 01       	movw	r30, r18
    48ec:	86 8b       	std	Z+22, r24	; 0x16
    48ee:	97 8b       	std	Z+23, r25	; 0x17
    48f0:	a0 8f       	std	Z+24, r26	; 0x18
    48f2:	b1 8f       	std	Z+25, r27	; 0x19
			pidController->setXProportionalGain(telemMsg->XProportionalGain);
    48f4:	f6 01       	movw	r30, r12
    48f6:	ef 5a       	subi	r30, 0xAF	; 175
    48f8:	ff 4f       	sbci	r31, 0xFF	; 255
    48fa:	80 81       	ld	r24, Z
    48fc:	91 81       	ldd	r25, Z+1	; 0x01
    48fe:	a2 81       	ldd	r26, Z+2	; 0x02
    4900:	b3 81       	ldd	r27, Z+3	; 0x03
    4902:	f7 01       	movw	r30, r14
    4904:	23 85       	ldd	r18, Z+11	; 0x0b
    4906:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setXProportionalGain(float val)
				{
					xProportionalGain = val;
    4908:	f9 01       	movw	r30, r18
    490a:	82 8f       	std	Z+26, r24	; 0x1a
    490c:	93 8f       	std	Z+27, r25	; 0x1b
    490e:	a4 8f       	std	Z+28, r26	; 0x1c
    4910:	b5 8f       	std	Z+29, r27	; 0x1d
			pidController->setXAntiWindupGain(telemMsg->XAntiWindupGain);
    4912:	f6 01       	movw	r30, r12
    4914:	eb 5a       	subi	r30, 0xAB	; 171
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	80 81       	ld	r24, Z
    491a:	91 81       	ldd	r25, Z+1	; 0x01
    491c:	a2 81       	ldd	r26, Z+2	; 0x02
    491e:	b3 81       	ldd	r27, Z+3	; 0x03
    4920:	f7 01       	movw	r30, r14
    4922:	23 85       	ldd	r18, Z+11	; 0x0b
    4924:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setXAntiWindupGain(float val)
				{
					xAntiWindupGain = val;
    4926:	f9 01       	movw	r30, r18
    4928:	86 8f       	std	Z+30, r24	; 0x1e
    492a:	97 8f       	std	Z+31, r25	; 0x1f
    492c:	a0 a3       	std	Z+32, r26	; 0x20
    492e:	b1 a3       	std	Z+33, r27	; 0x21
			pidController->setLongitudeInnerLoopGain(telemMsg->LongitudeInnerLoopGain);
    4930:	f6 01       	movw	r30, r12
    4932:	e7 5a       	subi	r30, 0xA7	; 167
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	80 81       	ld	r24, Z
    4938:	91 81       	ldd	r25, Z+1	; 0x01
    493a:	a2 81       	ldd	r26, Z+2	; 0x02
    493c:	b3 81       	ldd	r27, Z+3	; 0x03
    493e:	f7 01       	movw	r30, r14
    4940:	23 85       	ldd	r18, Z+11	; 0x0b
    4942:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setLongitudeInnerLoopGain(float val)
				{
					longitudeInnerLoopGain = val;
    4944:	f9 01       	movw	r30, r18
    4946:	82 a3       	std	Z+34, r24	; 0x22
    4948:	93 a3       	std	Z+35, r25	; 0x23
    494a:	a4 a3       	std	Z+36, r26	; 0x24
    494c:	b5 a3       	std	Z+37, r27	; 0x25
			pidController->setPitchAngularVelocityGain(telemMsg->PitchAngularVelocityGain);
    494e:	f6 01       	movw	r30, r12
    4950:	eb 59       	subi	r30, 0x9B	; 155
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	80 81       	ld	r24, Z
    4956:	91 81       	ldd	r25, Z+1	; 0x01
    4958:	a2 81       	ldd	r26, Z+2	; 0x02
    495a:	b3 81       	ldd	r27, Z+3	; 0x03
    495c:	f7 01       	movw	r30, r14
    495e:	23 85       	ldd	r18, Z+11	; 0x0b
    4960:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setPitchAngularVelocityGain(float val)
				{
					pitchAngularVelocityGain = val;
    4962:	f9 01       	movw	r30, r18
    4964:	86 a3       	std	Z+38, r24	; 0x26
    4966:	97 a3       	std	Z+39, r25	; 0x27
    4968:	a0 a7       	std	Z+40, r26	; 0x28
    496a:	b1 a7       	std	Z+41, r27	; 0x29
				
			pidController->setYIntegralGain(telemMsg->YIntegralGain);
    496c:	f6 01       	movw	r30, r12
    496e:	eb 57       	subi	r30, 0x7B	; 123
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	80 81       	ld	r24, Z
    4974:	91 81       	ldd	r25, Z+1	; 0x01
    4976:	a2 81       	ldd	r26, Z+2	; 0x02
    4978:	b3 81       	ldd	r27, Z+3	; 0x03
    497a:	f7 01       	movw	r30, r14
    497c:	23 85       	ldd	r18, Z+11	; 0x0b
    497e:	34 85       	ldd	r19, Z+12	; 0x0c
				
				
				
				void setYIntegralGain(float val)
				{
					yIntegralGain = val;
    4980:	f9 01       	movw	r30, r18
    4982:	82 a7       	std	Z+42, r24	; 0x2a
    4984:	93 a7       	std	Z+43, r25	; 0x2b
    4986:	a4 a7       	std	Z+44, r26	; 0x2c
    4988:	b5 a7       	std	Z+45, r27	; 0x2d
			pidController->setYDerivativeGain(telemMsg->YDerivativeGain);
    498a:	f6 01       	movw	r30, r12
    498c:	e7 57       	subi	r30, 0x77	; 119
    498e:	ff 4f       	sbci	r31, 0xFF	; 255
    4990:	80 81       	ld	r24, Z
    4992:	91 81       	ldd	r25, Z+1	; 0x01
    4994:	a2 81       	ldd	r26, Z+2	; 0x02
    4996:	b3 81       	ldd	r27, Z+3	; 0x03
    4998:	f7 01       	movw	r30, r14
    499a:	23 85       	ldd	r18, Z+11	; 0x0b
    499c:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setYDerivativeGain(float val)
				{
					yDerivativeGain = val;
    499e:	f9 01       	movw	r30, r18
    49a0:	86 a7       	std	Z+46, r24	; 0x2e
    49a2:	97 a7       	std	Z+47, r25	; 0x2f
    49a4:	a0 ab       	std	Z+48, r26	; 0x30
    49a6:	b1 ab       	std	Z+49, r27	; 0x31
			pidController->setYProportionalGain(telemMsg->YProportionalGain);
    49a8:	f6 01       	movw	r30, r12
    49aa:	e3 57       	subi	r30, 0x73	; 115
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	80 81       	ld	r24, Z
    49b0:	91 81       	ldd	r25, Z+1	; 0x01
    49b2:	a2 81       	ldd	r26, Z+2	; 0x02
    49b4:	b3 81       	ldd	r27, Z+3	; 0x03
    49b6:	f7 01       	movw	r30, r14
    49b8:	23 85       	ldd	r18, Z+11	; 0x0b
    49ba:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setYProportionalGain(float val)
				{
					yProportionalGain = val;
    49bc:	f9 01       	movw	r30, r18
    49be:	82 ab       	std	Z+50, r24	; 0x32
    49c0:	93 ab       	std	Z+51, r25	; 0x33
    49c2:	a4 ab       	std	Z+52, r26	; 0x34
    49c4:	b5 ab       	std	Z+53, r27	; 0x35
			pidController->setYAntiWindupGain(telemMsg->YAntiWindupGain);
    49c6:	f6 01       	movw	r30, r12
    49c8:	ef 56       	subi	r30, 0x6F	; 111
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	80 81       	ld	r24, Z
    49ce:	91 81       	ldd	r25, Z+1	; 0x01
    49d0:	a2 81       	ldd	r26, Z+2	; 0x02
    49d2:	b3 81       	ldd	r27, Z+3	; 0x03
    49d4:	f7 01       	movw	r30, r14
    49d6:	23 85       	ldd	r18, Z+11	; 0x0b
    49d8:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setYAntiWindupGain(float val)
				{
					yAntiWindupGain = val;
    49da:	f9 01       	movw	r30, r18
    49dc:	86 ab       	std	Z+54, r24	; 0x36
    49de:	97 ab       	std	Z+55, r25	; 0x37
    49e0:	a0 af       	std	Z+56, r26	; 0x38
    49e2:	b1 af       	std	Z+57, r27	; 0x39
			pidController->setLateralInnerLoopGain(telemMsg->LateralInnerLoopGain);
    49e4:	f6 01       	movw	r30, r12
    49e6:	eb 56       	subi	r30, 0x6B	; 107
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	a2 81       	ldd	r26, Z+2	; 0x02
    49f0:	b3 81       	ldd	r27, Z+3	; 0x03
    49f2:	f7 01       	movw	r30, r14
    49f4:	23 85       	ldd	r18, Z+11	; 0x0b
    49f6:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setLateralInnerLoopGain(float val)
				{
					lateralInnerLoopGain = val;
    49f8:	f9 01       	movw	r30, r18
    49fa:	82 af       	std	Z+58, r24	; 0x3a
    49fc:	93 af       	std	Z+59, r25	; 0x3b
    49fe:	a4 af       	std	Z+60, r26	; 0x3c
    4a00:	b5 af       	std	Z+61, r27	; 0x3d
			pidController->setRollAngularVelocityGain(telemMsg->RollAngularVelocityGain);
    4a02:	f6 01       	movw	r30, r12
    4a04:	ef 55       	subi	r30, 0x5F	; 95
    4a06:	ff 4f       	sbci	r31, 0xFF	; 255
    4a08:	80 81       	ld	r24, Z
    4a0a:	91 81       	ldd	r25, Z+1	; 0x01
    4a0c:	a2 81       	ldd	r26, Z+2	; 0x02
    4a0e:	b3 81       	ldd	r27, Z+3	; 0x03
    4a10:	f7 01       	movw	r30, r14
    4a12:	23 85       	ldd	r18, Z+11	; 0x0b
    4a14:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setRollAngularVelocityGain(float val)
				{
					rollAngularVelocityGain = val;
    4a16:	f9 01       	movw	r30, r18
    4a18:	fe 96       	adiw	r30, 0x3e	; 62
    4a1a:	80 83       	st	Z, r24
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	a2 83       	std	Z+2, r26	; 0x02
    4a20:	b3 83       	std	Z+3, r27	; 0x03
			
			pidController->setZIntegralGain(telemMsg->ZIntegralGain);
    4a22:	f6 01       	movw	r30, r12
    4a24:	e3 54       	subi	r30, 0x43	; 67
    4a26:	ff 4f       	sbci	r31, 0xFF	; 255
    4a28:	80 81       	ld	r24, Z
    4a2a:	91 81       	ldd	r25, Z+1	; 0x01
    4a2c:	a2 81       	ldd	r26, Z+2	; 0x02
    4a2e:	b3 81       	ldd	r27, Z+3	; 0x03
    4a30:	f7 01       	movw	r30, r14
    4a32:	23 85       	ldd	r18, Z+11	; 0x0b
    4a34:	34 85       	ldd	r19, Z+12	; 0x0c
				
				
				
				void setZIntegralGain(float val)
				{
					zIntegralGain = val;
    4a36:	f9 01       	movw	r30, r18
    4a38:	ee 5b       	subi	r30, 0xBE	; 190
    4a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3c:	80 83       	st	Z, r24
    4a3e:	91 83       	std	Z+1, r25	; 0x01
    4a40:	a2 83       	std	Z+2, r26	; 0x02
    4a42:	b3 83       	std	Z+3, r27	; 0x03
			pidController->setZDerivativeGain(telemMsg->ZDerivativeGain);
    4a44:	f6 01       	movw	r30, r12
    4a46:	ef 53       	subi	r30, 0x3F	; 63
    4a48:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4a:	80 81       	ld	r24, Z
    4a4c:	91 81       	ldd	r25, Z+1	; 0x01
    4a4e:	a2 81       	ldd	r26, Z+2	; 0x02
    4a50:	b3 81       	ldd	r27, Z+3	; 0x03
    4a52:	f7 01       	movw	r30, r14
    4a54:	23 85       	ldd	r18, Z+11	; 0x0b
    4a56:	34 85       	ldd	r19, Z+12	; 0x0c
				}
				
				void setZDerivativeGain(float val)
				{
					zDerivativeGain = val;
    4a58:	f9 01       	movw	r30, r18
    4a5a:	ea 5b       	subi	r30, 0xBA	; 186
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	80 83       	st	Z, r24
    4a60:	91 83       	std	Z+1, r25	; 0x01
    4a62:	a2 83       	std	Z+2, r26	; 0x02
    4a64:	b3 83       	std	Z+3, r27	; 0x03
			pidController->setZProportionalGain(telemMsg->ZProportionalGain);
    4a66:	f6 01       	movw	r30, r12
    4a68:	eb 53       	subi	r30, 0x3B	; 59
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	40 81       	ld	r20, Z
    4a6e:	51 81       	ldd	r21, Z+1	; 0x01
    4a70:	62 81       	ldd	r22, Z+2	; 0x02
    4a72:	73 81       	ldd	r23, Z+3	; 0x03
    4a74:	d7 01       	movw	r26, r14
    4a76:	1b 96       	adiw	r26, 0x0b	; 11
    4a78:	ed 91       	ld	r30, X+
    4a7a:	fc 91       	ld	r31, X
    4a7c:	1c 97       	sbiw	r26, 0x0c	; 12
				}
				
				void setZProportionalGain(float val)
				{
					zProportionalGain = val;
    4a7e:	e6 5b       	subi	r30, 0xB6	; 182
    4a80:	ff 4f       	sbci	r31, 0xFF	; 255
    4a82:	40 83       	st	Z, r20
    4a84:	51 83       	std	Z+1, r21	; 0x01
    4a86:	62 83       	std	Z+2, r22	; 0x02
    4a88:	73 83       	std	Z+3, r23	; 0x03
			pidController->setZAntiWindupGain(telemMsg->ZAntiWindupGain);															
    4a8a:	f6 01       	movw	r30, r12
    4a8c:	e7 53       	subi	r30, 0x37	; 55
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	40 81       	ld	r20, Z
    4a92:	51 81       	ldd	r21, Z+1	; 0x01
    4a94:	62 81       	ldd	r22, Z+2	; 0x02
    4a96:	73 81       	ldd	r23, Z+3	; 0x03
    4a98:	1b 96       	adiw	r26, 0x0b	; 11
    4a9a:	ed 91       	ld	r30, X+
    4a9c:	fc 91       	ld	r31, X
    4a9e:	1c 97       	sbiw	r26, 0x0c	; 12
				}
				
				void setZAntiWindupGain(float val)
				{
					zAntiWindupGain = val;
    4aa0:	e2 5b       	subi	r30, 0xB2	; 178
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	40 83       	st	Z, r20
    4aa6:	51 83       	std	Z+1, r21	; 0x01
    4aa8:	62 83       	std	Z+2, r22	; 0x02
    4aaa:	73 83       	std	Z+3, r23	; 0x03
		
			delete message;
    4aac:	8e 81       	ldd	r24, Y+6	; 0x06
    4aae:	9f 81       	ldd	r25, Y+7	; 0x07
    4ab0:	00 97       	sbiw	r24, 0x00	; 0
    4ab2:	39 f0       	breq	.+14     	; 0x4ac2 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x2fc>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	ed 91       	ld	r30, X+
    4ab8:	fc 91       	ld	r31, X
    4aba:	02 80       	ldd	r0, Z+2	; 0x02
    4abc:	f3 81       	ldd	r31, Z+3	; 0x03
    4abe:	e0 2d       	mov	r30, r0
    4ac0:	19 95       	eicall
		}
	}
	
	//Update instrumentation fields
	switch (status)
    4ac2:	0d 3f       	cpi	r16, 0xFD	; 253
    4ac4:	bf ef       	ldi	r27, 0xFF	; 255
    4ac6:	1b 07       	cpc	r17, r27
    4ac8:	a1 f1       	breq	.+104    	; 0x4b32 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x36c>
    4aca:	2c f4       	brge	.+10     	; 0x4ad6 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x310>
    4acc:	0c 3f       	cpi	r16, 0xFC	; 252
    4ace:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad0:	09 f0       	breq	.+2      	; 0x4ad4 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x30e>
    4ad2:	54 c0       	rjmp	.+168    	; 0x4b7c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3b6>
    4ad4:	41 c0       	rjmp	.+130    	; 0x4b58 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x392>
    4ad6:	0e 3f       	cpi	r16, 0xFE	; 254
    4ad8:	8f ef       	ldi	r24, 0xFF	; 255
    4ada:	18 07       	cpc	r17, r24
    4adc:	b9 f0       	breq	.+46     	; 0x4b0c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x346>
    4ade:	0f 3f       	cpi	r16, 0xFF	; 255
    4ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae2:	09 f0       	breq	.+2      	; 0x4ae6 <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x320>
    4ae4:	4b c0       	rjmp	.+150    	; 0x4b7c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3b6>
	{
		case 0:
			break;
		case -1:
			model->Timeouts(model->Timeouts() + 1);
    4ae6:	d7 01       	movw	r26, r14
    4ae8:	19 96       	adiw	r26, 0x09	; 9
    4aea:	ed 91       	ld	r30, X+
    4aec:	fc 91       	ld	r31, X
    4aee:	1a 97       	sbiw	r26, 0x0a	; 10
			float LongitudeDegrees() const {return longitudeDegrees;}
			void LongitudeDegrees(float val) { longitudeDegrees = val;}						
						
						
			long Timeouts() const {return timeouts; }
			void Timeouts(long val) { timeouts = val; }
    4af0:	eb 54       	subi	r30, 0x4B	; 75
    4af2:	ff 4f       	sbci	r31, 0xFF	; 255
    4af4:	80 81       	ld	r24, Z
    4af6:	91 81       	ldd	r25, Z+1	; 0x01
    4af8:	a2 81       	ldd	r26, Z+2	; 0x02
    4afa:	b3 81       	ldd	r27, Z+3	; 0x03
    4afc:	01 96       	adiw	r24, 0x01	; 1
    4afe:	a1 1d       	adc	r26, r1
    4b00:	b1 1d       	adc	r27, r1
    4b02:	80 83       	st	Z, r24
    4b04:	91 83       	std	Z+1, r25	; 0x01
    4b06:	a2 83       	std	Z+2, r26	; 0x02
    4b08:	b3 83       	std	Z+3, r27	; 0x03
    4b0a:	38 c0       	rjmp	.+112    	; 0x4b7c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3b6>
			break;
		case -2:
			model->SerialCommunicationBufferOverruns(model->SerialCommunicationBufferOverruns() + 1);
    4b0c:	d7 01       	movw	r26, r14
    4b0e:	19 96       	adiw	r26, 0x09	; 9
    4b10:	ed 91       	ld	r30, X+
    4b12:	fc 91       	ld	r31, X
    4b14:	1a 97       	sbiw	r26, 0x0a	; 10
			
			long BlownFrames() const {return numOfFramesBlown;}
			void BlownFrames( long val ) { numOfFramesBlown = val;}
				
			long SerialCommunicationBufferOverruns() const {return serialCommunicationBufferOverruns;}
			void SerialCommunicationBufferOverruns( long val ) { serialCommunicationBufferOverruns = val;}				
    4b16:	eb 53       	subi	r30, 0x3B	; 59
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	80 81       	ld	r24, Z
    4b1c:	91 81       	ldd	r25, Z+1	; 0x01
    4b1e:	a2 81       	ldd	r26, Z+2	; 0x02
    4b20:	b3 81       	ldd	r27, Z+3	; 0x03
    4b22:	01 96       	adiw	r24, 0x01	; 1
    4b24:	a1 1d       	adc	r26, r1
    4b26:	b1 1d       	adc	r27, r1
    4b28:	80 83       	st	Z, r24
    4b2a:	91 83       	std	Z+1, r25	; 0x01
    4b2c:	a2 83       	std	Z+2, r26	; 0x02
    4b2e:	b3 83       	std	Z+3, r27	; 0x03
    4b30:	25 c0       	rjmp	.+74     	; 0x4b7c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3b6>
			break;
		case -3:
			model->UnrecognizedMsgTypes(model->UnrecognizedMsgTypes() + 1);
    4b32:	d7 01       	movw	r26, r14
    4b34:	19 96       	adiw	r26, 0x09	; 9
    4b36:	ed 91       	ld	r30, X+
    4b38:	fc 91       	ld	r31, X
    4b3a:	1a 97       	sbiw	r26, 0x0a	; 10
						
			long Timeouts() const {return timeouts; }
			void Timeouts(long val) { timeouts = val; }
			
			long UnrecognizedMsgTypes() const {return unrecognizedMsgTypes; }
			void UnrecognizedMsgTypes(long val) { unrecognizedMsgTypes = val; }
    4b3c:	e7 54       	subi	r30, 0x47	; 71
    4b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b40:	80 81       	ld	r24, Z
    4b42:	91 81       	ldd	r25, Z+1	; 0x01
    4b44:	a2 81       	ldd	r26, Z+2	; 0x02
    4b46:	b3 81       	ldd	r27, Z+3	; 0x03
    4b48:	01 96       	adiw	r24, 0x01	; 1
    4b4a:	a1 1d       	adc	r26, r1
    4b4c:	b1 1d       	adc	r27, r1
    4b4e:	80 83       	st	Z, r24
    4b50:	91 83       	std	Z+1, r25	; 0x01
    4b52:	a2 83       	std	Z+2, r26	; 0x02
    4b54:	b3 83       	std	Z+3, r27	; 0x03
    4b56:	12 c0       	rjmp	.+36     	; 0x4b7c <_ZN10helicopter5tasks16SimTelemetryTask11runTaskImplEv+0x3b6>
			break;
		case -4:
			model->ChecksumErrors(model->ChecksumErrors() + 1);
    4b58:	d7 01       	movw	r26, r14
    4b5a:	19 96       	adiw	r26, 0x09	; 9
    4b5c:	ed 91       	ld	r30, X+
    4b5e:	fc 91       	ld	r31, X
    4b60:	1a 97       	sbiw	r26, 0x0a	; 10
			
			long ChecksumErrors() const {return checksumErrors; }
			void ChecksumErrors(long val) { checksumErrors = val; }
    4b62:	e3 54       	subi	r30, 0x43	; 67
    4b64:	ff 4f       	sbci	r31, 0xFF	; 255
    4b66:	80 81       	ld	r24, Z
    4b68:	91 81       	ldd	r25, Z+1	; 0x01
    4b6a:	a2 81       	ldd	r26, Z+2	; 0x02
    4b6c:	b3 81       	ldd	r27, Z+3	; 0x03
    4b6e:	01 96       	adiw	r24, 0x01	; 1
    4b70:	a1 1d       	adc	r26, r1
    4b72:	b1 1d       	adc	r27, r1
    4b74:	80 83       	st	Z, r24
    4b76:	91 83       	std	Z+1, r25	; 0x01
    4b78:	a2 83       	std	Z+2, r26	; 0x02
    4b7a:	b3 83       	std	Z+3, r27	; 0x03
		default:
			break;
		
	}
}
    4b7c:	27 96       	adiw	r28, 0x07	; 7
    4b7e:	0f b6       	in	r0, 0x3f	; 63
    4b80:	f8 94       	cli
    4b82:	de bf       	out	0x3e, r29	; 62
    4b84:	0f be       	out	0x3f, r0	; 63
    4b86:	cd bf       	out	0x3d, r28	; 61
    4b88:	df 91       	pop	r29
    4b8a:	cf 91       	pop	r28
    4b8c:	1f 91       	pop	r17
    4b8e:	0f 91       	pop	r16
    4b90:	ff 90       	pop	r15
    4b92:	ef 90       	pop	r14
    4b94:	df 90       	pop	r13
    4b96:	cf 90       	pop	r12
    4b98:	08 95       	ret

00004b9a <_ZN10helicopter5tasks16SimTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEPNS_10controller13PIDControllerEii>:
#include "SyncMessage.h"

using namespace helicopter::tasks;
using namespace helicopter::messages;

SimTelemetryTask::SimTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, PIDController *pidController, int delay, int period) :
    4b9a:	8f 92       	push	r8
    4b9c:	9f 92       	push	r9
    4b9e:	af 92       	push	r10
    4ba0:	bf 92       	push	r11
    4ba2:	cf 92       	push	r12
    4ba4:	df 92       	push	r13
    4ba6:	ef 92       	push	r14
    4ba8:	ff 92       	push	r15
    4baa:	0f 93       	push	r16
    4bac:	1f 93       	push	r17
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
    4bb2:	ec 01       	movw	r28, r24
    4bb4:	4b 01       	movw	r8, r22
    4bb6:	5a 01       	movw	r10, r20
    4bb8:	69 01       	movw	r12, r18
    4bba:	b8 01       	movw	r22, r16
    4bbc:	a7 01       	movw	r20, r14
	Task(delay, period),
	radioInterface(radioInterface),
	model(model),
	pidController(pidController)
    4bbe:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN10helicopter5tasks4TaskC1Eii>
    4bc2:	8c e7       	ldi	r24, 0x7C	; 124
    4bc4:	92 e0       	ldi	r25, 0x02	; 2
    4bc6:	99 83       	std	Y+1, r25	; 0x01
    4bc8:	88 83       	st	Y, r24
    4bca:	98 86       	std	Y+8, r9	; 0x08
    4bcc:	8f 82       	std	Y+7, r8	; 0x07
    4bce:	ba 86       	std	Y+10, r11	; 0x0a
    4bd0:	a9 86       	std	Y+9, r10	; 0x09
    4bd2:	dc 86       	std	Y+12, r13	; 0x0c
    4bd4:	cb 86       	std	Y+11, r12	; 0x0b
{
	
}
    4bd6:	df 91       	pop	r29
    4bd8:	cf 91       	pop	r28
    4bda:	1f 91       	pop	r17
    4bdc:	0f 91       	pop	r16
    4bde:	ff 90       	pop	r15
    4be0:	ef 90       	pop	r14
    4be2:	df 90       	pop	r13
    4be4:	cf 90       	pop	r12
    4be6:	bf 90       	pop	r11
    4be8:	af 90       	pop	r10
    4bea:	9f 90       	pop	r9
    4bec:	8f 90       	pop	r8
    4bee:	08 95       	ret

00004bf0 <_ZN10helicopter5tasks4Task11runTaskImplEv>:
				
			protected:
				/**
				* Implemented by subclasses for the actual logic to execute
				*/
				virtual void runTaskImpl(){;}
    4bf0:	08 95       	ret

00004bf2 <_ZN10helicopter5tasks4TaskD1Ev>:
				 * @param period The number of scheduler 'ticks' to be executed before
				 * this task is ready to run.
				 */
				Task (int delay, int period);
				
				virtual ~Task(){}
    4bf2:	2a e8       	ldi	r18, 0x8A	; 138
    4bf4:	32 e0       	ldi	r19, 0x02	; 2
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	31 83       	std	Z+1, r19	; 0x01
    4bfa:	20 83       	st	Z, r18
    4bfc:	08 95       	ret

00004bfe <_ZN10helicopter5tasks4Task7runTaskEv>:
}

void Task::runTask()
{
	//Disable interrupts 
	cli();
    4bfe:	f8 94       	cli
	
	//run task
	this->runTaskImpl();
    4c00:	dc 01       	movw	r26, r24
    4c02:	ed 91       	ld	r30, X+
    4c04:	fc 91       	ld	r31, X
    4c06:	01 90       	ld	r0, Z+
    4c08:	f0 81       	ld	r31, Z
    4c0a:	e0 2d       	mov	r30, r0
    4c0c:	19 95       	eicall
	
	//Re-enable interrupts
	sei();
    4c0e:	78 94       	sei
    4c10:	08 95       	ret

00004c12 <_ZN10helicopter5tasks4TaskD0Ev>:
    4c12:	2a e8       	ldi	r18, 0x8A	; 138
    4c14:	32 e0       	ldi	r19, 0x02	; 2
    4c16:	fc 01       	movw	r30, r24
    4c18:	31 83       	std	Z+1, r19	; 0x01
    4c1a:	20 83       	st	Z, r18
    4c1c:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    4c20:	08 95       	ret

00004c22 <_ZN10helicopter5tasks4TaskC1Eii>:
#include <avr/interrupt.h>
#include "Task.h"

using namespace helicopter::tasks;

Task::Task(int delay, int period)
    4c22:	fc 01       	movw	r30, r24
    4c24:	8a e8       	ldi	r24, 0x8A	; 138
    4c26:	92 e0       	ldi	r25, 0x02	; 2
    4c28:	91 83       	std	Z+1, r25	; 0x01
    4c2a:	80 83       	st	Z, r24
{
	this->delay = delay;
    4c2c:	73 83       	std	Z+3, r23	; 0x03
    4c2e:	62 83       	std	Z+2, r22	; 0x02
	this->period = period;
    4c30:	55 83       	std	Z+5, r21	; 0x05
    4c32:	44 83       	std	Z+4, r20	; 0x04
	this->isReadyToRun = false;
    4c34:	16 82       	std	Z+6, r1	; 0x06
    4c36:	08 95       	ret

00004c38 <_ZN10helicopter5tasks21TransmitTelemetryTaskD1Ev>:
    4c38:	2a e8       	ldi	r18, 0x8A	; 138
    4c3a:	32 e0       	ldi	r19, 0x02	; 2
    4c3c:	fc 01       	movw	r30, r24
    4c3e:	31 83       	std	Z+1, r19	; 0x01
    4c40:	20 83       	st	Z, r18
    4c42:	08 95       	ret

00004c44 <_ZN10helicopter5tasks21TransmitTelemetryTaskD0Ev>:
    4c44:	2a e8       	ldi	r18, 0x8A	; 138
    4c46:	32 e0       	ldi	r19, 0x02	; 2
    4c48:	fc 01       	movw	r30, r24
    4c4a:	31 83       	std	Z+1, r19	; 0x01
    4c4c:	20 83       	st	Z, r18
	namespace tasks
	{
		/**
		 * This class transmits flight computer telemetry information to the ground control station.
		 */
		class TransmitTelemetryTask : public Task
    4c4e:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <_ZdlPv>
    4c52:	08 95       	ret

00004c54 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv>:
	
}


void TransmitTelemetryTask::runTaskImpl()
{
    4c54:	0f 93       	push	r16
    4c56:	1f 93       	push	r17
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	8c 01       	movw	r16, r24
	//SystemTelemetryMessage *message = model->CreateTelemetryMessage();
	SystemTelemetryMessage *message = SystemTelemetryMessage::buildMessageFromModel(model);
    4c5e:	fc 01       	movw	r30, r24
    4c60:	81 85       	ldd	r24, Z+9	; 0x09
    4c62:	92 85       	ldd	r25, Z+10	; 0x0a
    4c64:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <_ZN10helicopter8messages22SystemTelemetryMessage21buildMessageFromModelEPNS_5model11SystemModelE>
    4c68:	ec 01       	movw	r28, r24
	
	//TODO add some error handling in here
	radioInterface->transmit(message);
    4c6a:	bc 01       	movw	r22, r24
    4c6c:	f8 01       	movw	r30, r16
    4c6e:	87 81       	ldd	r24, Z+7	; 0x07
    4c70:	90 85       	ldd	r25, Z+8	; 0x08
    4c72:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10helicopter10interfaces29GroundControlStationInterface8transmitEPNS_8messages7MessageE>
	
	delete message;
    4c76:	20 97       	sbiw	r28, 0x00	; 0
    4c78:	39 f0       	breq	.+14     	; 0x4c88 <_ZN10helicopter5tasks21TransmitTelemetryTask11runTaskImplEv+0x34>
    4c7a:	e8 81       	ld	r30, Y
    4c7c:	f9 81       	ldd	r31, Y+1	; 0x01
    4c7e:	02 80       	ldd	r0, Z+2	; 0x02
    4c80:	f3 81       	ldd	r31, Z+3	; 0x03
    4c82:	e0 2d       	mov	r30, r0
    4c84:	ce 01       	movw	r24, r28
    4c86:	19 95       	eicall
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	1f 91       	pop	r17
    4c8e:	0f 91       	pop	r16
    4c90:	08 95       	ret

00004c92 <_ZN10helicopter5tasks21TransmitTelemetryTaskC1EPNS_10interfaces29GroundControlStationInterfaceEPNS_5model11SystemModelEii>:
#include "TransmitTelemetryTask.h"
#include "SystemTelemetryMessage.h"

using namespace helicopter::tasks;

TransmitTelemetryTask::TransmitTelemetryTask(GroundControlStationInterface *radioInterface, SystemModel *model, int delay, int period) :
    4c92:	cf 92       	push	r12
    4c94:	df 92       	push	r13
    4c96:	ef 92       	push	r14
    4c98:	ff 92       	push	r15
    4c9a:	0f 93       	push	r16
    4c9c:	1f 93       	push	r17
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	ec 01       	movw	r28, r24
    4ca4:	6b 01       	movw	r12, r22
    4ca6:	7a 01       	movw	r14, r20
    4ca8:	a8 01       	movw	r20, r16
	Task(delay, period),
	radioInterface(radioInterface),
	model(model)
    4caa:	b9 01       	movw	r22, r18
    4cac:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN10helicopter5tasks4TaskC1Eii>
    4cb0:	88 e9       	ldi	r24, 0x98	; 152
    4cb2:	92 e0       	ldi	r25, 0x02	; 2
    4cb4:	99 83       	std	Y+1, r25	; 0x01
    4cb6:	88 83       	st	Y, r24
    4cb8:	d8 86       	std	Y+8, r13	; 0x08
    4cba:	cf 82       	std	Y+7, r12	; 0x07
    4cbc:	fa 86       	std	Y+10, r15	; 0x0a
    4cbe:	e9 86       	std	Y+9, r14	; 0x09
{
	
}
    4cc0:	df 91       	pop	r29
    4cc2:	cf 91       	pop	r28
    4cc4:	1f 91       	pop	r17
    4cc6:	0f 91       	pop	r16
    4cc8:	ff 90       	pop	r15
    4cca:	ef 90       	pop	r14
    4ccc:	df 90       	pop	r13
    4cce:	cf 90       	pop	r12
    4cd0:	08 95       	ret

00004cd2 <_Znwj>:
 */ 
#include <CommonHeader.h>

void * operator new(size_t size)
{
	return malloc(size);
    4cd2:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <malloc>
}
    4cd6:	08 95       	ret

00004cd8 <_ZdlPv>:

void operator delete(void * ptr)
{
	if (ptr != NULL)
    4cd8:	00 97       	sbiw	r24, 0x00	; 0
    4cda:	11 f0       	breq	.+4      	; 0x4ce0 <_ZdlPv+0x8>
	{
		free(ptr);
    4cdc:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <free>
    4ce0:	08 95       	ret

00004ce2 <_Znaj>:
	}
}

void * operator new[](size_t size)
{
	return malloc(size);
    4ce2:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <malloc>
}
    4ce6:	08 95       	ret

00004ce8 <_ZdaPv>:

void operator delete[](void * ptr)
{
	if(ptr != NULL)
    4ce8:	00 97       	sbiw	r24, 0x00	; 0
    4cea:	11 f0       	breq	.+4      	; 0x4cf0 <_ZdaPv+0x8>
	{
		free(ptr);
    4cec:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <free>
    4cf0:	08 95       	ret

00004cf2 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>:

using namespace helicopter::util;

float CoordinateUtil::DegreesToRad(float valueDegrees)
{
	return valueDegrees * (M_PI / 180.0);
    4cf2:	25 e3       	ldi	r18, 0x35	; 53
    4cf4:	3a ef       	ldi	r19, 0xFA	; 250
    4cf6:	4e e8       	ldi	r20, 0x8E	; 142
    4cf8:	5c e3       	ldi	r21, 0x3C	; 60
    4cfa:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
}
    4cfe:	08 95       	ret

00004d00 <_ZN10helicopter4util14CoordinateUtil37CalculateECEFToLocalNEDRotationMatrixEffPA3_f>:

void CoordinateUtil::CalculateECEFToLocalNEDRotationMatrix(float latitudeDegrees, float longitudeDegrees, float  ecefToLocalNEDRotationMatrix[][3])
{
    4d00:	4f 92       	push	r4
    4d02:	5f 92       	push	r5
    4d04:	6f 92       	push	r6
    4d06:	7f 92       	push	r7
    4d08:	8f 92       	push	r8
    4d0a:	9f 92       	push	r9
    4d0c:	af 92       	push	r10
    4d0e:	bf 92       	push	r11
    4d10:	cf 92       	push	r12
    4d12:	df 92       	push	r13
    4d14:	ef 92       	push	r14
    4d16:	ff 92       	push	r15
    4d18:	0f 93       	push	r16
    4d1a:	1f 93       	push	r17
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	00 d0       	rcall	.+0      	; 0x4d22 <_ZN10helicopter4util14CoordinateUtil37CalculateECEFToLocalNEDRotationMatrixEffPA3_f+0x22>
    4d22:	1f 92       	push	r1
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
    4d28:	69 01       	movw	r12, r18
    4d2a:	7a 01       	movw	r14, r20
	float radLat = DegreesToRad(latitudeDegrees);
    4d2c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    4d30:	2b 01       	movw	r4, r22
    4d32:	3c 01       	movw	r6, r24
	float radLong = DegreesToRad(longitudeDegrees);
    4d34:	c7 01       	movw	r24, r14
    4d36:	b6 01       	movw	r22, r12
    4d38:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    4d3c:	6b 01       	movw	r12, r22
    4d3e:	7c 01       	movw	r14, r24

	//Create a rotation matrix for rotating earth-centered-earth-fixed coordinates
	//into Local North-East-Down coordinates.
	ecefToLocalNEDRotationMatrix[0][0] = -1 * sin(radLat) * cos(radLong);
    4d40:	c3 01       	movw	r24, r6
    4d42:	b2 01       	movw	r22, r4
    4d44:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    4d48:	9b 01       	movw	r18, r22
    4d4a:	ac 01       	movw	r20, r24
    4d4c:	50 58       	subi	r21, 0x80	; 128
    4d4e:	29 83       	std	Y+1, r18	; 0x01
    4d50:	3a 83       	std	Y+2, r19	; 0x02
    4d52:	4b 83       	std	Y+3, r20	; 0x03
    4d54:	5c 83       	std	Y+4, r21	; 0x04
    4d56:	c7 01       	movw	r24, r14
    4d58:	b6 01       	movw	r22, r12
    4d5a:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <cos>
    4d5e:	4b 01       	movw	r8, r22
    4d60:	5c 01       	movw	r10, r24
    4d62:	9b 01       	movw	r18, r22
    4d64:	ac 01       	movw	r20, r24
    4d66:	69 81       	ldd	r22, Y+1	; 0x01
    4d68:	7a 81       	ldd	r23, Y+2	; 0x02
    4d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d6e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4d72:	d8 01       	movw	r26, r16
    4d74:	6d 93       	st	X+, r22
    4d76:	7d 93       	st	X+, r23
    4d78:	8d 93       	st	X+, r24
    4d7a:	9c 93       	st	X, r25
    4d7c:	13 97       	sbiw	r26, 0x03	; 3
	ecefToLocalNEDRotationMatrix[0][1] = -1 * sin(radLat) * sin(radLong);
    4d7e:	c7 01       	movw	r24, r14
    4d80:	b6 01       	movw	r22, r12
    4d82:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    4d86:	6b 01       	movw	r12, r22
    4d88:	7c 01       	movw	r14, r24
    4d8a:	9b 01       	movw	r18, r22
    4d8c:	ac 01       	movw	r20, r24
    4d8e:	69 81       	ldd	r22, Y+1	; 0x01
    4d90:	7a 81       	ldd	r23, Y+2	; 0x02
    4d92:	8b 81       	ldd	r24, Y+3	; 0x03
    4d94:	9c 81       	ldd	r25, Y+4	; 0x04
    4d96:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4d9a:	f8 01       	movw	r30, r16
    4d9c:	64 83       	std	Z+4, r22	; 0x04
    4d9e:	75 83       	std	Z+5, r23	; 0x05
    4da0:	86 83       	std	Z+6, r24	; 0x06
    4da2:	97 83       	std	Z+7, r25	; 0x07
	ecefToLocalNEDRotationMatrix[0][2] = cos(radLat);
    4da4:	c3 01       	movw	r24, r6
    4da6:	b2 01       	movw	r22, r4
    4da8:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <cos>
    4dac:	d8 01       	movw	r26, r16
    4dae:	18 96       	adiw	r26, 0x08	; 8
    4db0:	6d 93       	st	X+, r22
    4db2:	7d 93       	st	X+, r23
    4db4:	8d 93       	st	X+, r24
    4db6:	9c 93       	st	X, r25
    4db8:	1b 97       	sbiw	r26, 0x0b	; 11
	ecefToLocalNEDRotationMatrix[1][0] = -1 * sin (radLong);
    4dba:	26 01       	movw	r4, r12
    4dbc:	37 01       	movw	r6, r14
    4dbe:	77 fa       	bst	r7, 7
    4dc0:	70 94       	com	r7
    4dc2:	77 f8       	bld	r7, 7
    4dc4:	70 94       	com	r7
    4dc6:	f8 01       	movw	r30, r16
    4dc8:	44 86       	std	Z+12, r4	; 0x0c
    4dca:	55 86       	std	Z+13, r5	; 0x0d
    4dcc:	66 86       	std	Z+14, r6	; 0x0e
    4dce:	77 86       	std	Z+15, r7	; 0x0f
	ecefToLocalNEDRotationMatrix[1][1] = cos(radLong);
    4dd0:	50 96       	adiw	r26, 0x10	; 16
    4dd2:	8d 92       	st	X+, r8
    4dd4:	9d 92       	st	X+, r9
    4dd6:	ad 92       	st	X+, r10
    4dd8:	bc 92       	st	X, r11
    4dda:	53 97       	sbiw	r26, 0x13	; 19
	ecefToLocalNEDRotationMatrix[1][2] = 0;
    4ddc:	14 8a       	std	Z+20, r1	; 0x14
    4dde:	15 8a       	std	Z+21, r1	; 0x15
    4de0:	16 8a       	std	Z+22, r1	; 0x16
    4de2:	17 8a       	std	Z+23, r1	; 0x17
	ecefToLocalNEDRotationMatrix[2][0] = -1 * cos(radLat) * cos(radLong);
    4de4:	2b 01       	movw	r4, r22
    4de6:	3c 01       	movw	r6, r24
    4de8:	77 fa       	bst	r7, 7
    4dea:	70 94       	com	r7
    4dec:	77 f8       	bld	r7, 7
    4dee:	70 94       	com	r7
    4df0:	a3 01       	movw	r20, r6
    4df2:	92 01       	movw	r18, r4
    4df4:	c5 01       	movw	r24, r10
    4df6:	b4 01       	movw	r22, r8
    4df8:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4dfc:	d8 01       	movw	r26, r16
    4dfe:	58 96       	adiw	r26, 0x18	; 24
    4e00:	6d 93       	st	X+, r22
    4e02:	7d 93       	st	X+, r23
    4e04:	8d 93       	st	X+, r24
    4e06:	9c 93       	st	X, r25
    4e08:	5b 97       	sbiw	r26, 0x1b	; 27
	ecefToLocalNEDRotationMatrix[2][1] = -1 * cos(radLat) * sin(radLong);
    4e0a:	a3 01       	movw	r20, r6
    4e0c:	92 01       	movw	r18, r4
    4e0e:	c7 01       	movw	r24, r14
    4e10:	b6 01       	movw	r22, r12
    4e12:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4e16:	f8 01       	movw	r30, r16
    4e18:	64 8f       	std	Z+28, r22	; 0x1c
    4e1a:	75 8f       	std	Z+29, r23	; 0x1d
    4e1c:	86 8f       	std	Z+30, r24	; 0x1e
    4e1e:	97 8f       	std	Z+31, r25	; 0x1f
	ecefToLocalNEDRotationMatrix[2][2] = -1 * sin(radLat);
    4e20:	29 81       	ldd	r18, Y+1	; 0x01
    4e22:	3a 81       	ldd	r19, Y+2	; 0x02
    4e24:	4b 81       	ldd	r20, Y+3	; 0x03
    4e26:	5c 81       	ldd	r21, Y+4	; 0x04
    4e28:	20 a3       	std	Z+32, r18	; 0x20
    4e2a:	31 a3       	std	Z+33, r19	; 0x21
    4e2c:	42 a3       	std	Z+34, r20	; 0x22
    4e2e:	53 a3       	std	Z+35, r21	; 0x23
}
    4e30:	0f 90       	pop	r0
    4e32:	0f 90       	pop	r0
    4e34:	0f 90       	pop	r0
    4e36:	0f 90       	pop	r0
    4e38:	df 91       	pop	r29
    4e3a:	cf 91       	pop	r28
    4e3c:	1f 91       	pop	r17
    4e3e:	0f 91       	pop	r16
    4e40:	ff 90       	pop	r15
    4e42:	ef 90       	pop	r14
    4e44:	df 90       	pop	r13
    4e46:	cf 90       	pop	r12
    4e48:	bf 90       	pop	r11
    4e4a:	af 90       	pop	r10
    4e4c:	9f 90       	pop	r9
    4e4e:	8f 90       	pop	r8
    4e50:	7f 90       	pop	r7
    4e52:	6f 90       	pop	r6
    4e54:	5f 90       	pop	r5
    4e56:	4f 90       	pop	r4
    4e58:	08 95       	ret

00004e5a <_ZN10helicopter4util14CoordinateUtil11calculateNeEff>:

float CoordinateUtil::calculateNe(float E, float latitudeRads)
{
    4e5a:	8f 92       	push	r8
    4e5c:	9f 92       	push	r9
    4e5e:	af 92       	push	r10
    4e60:	bf 92       	push	r11
    4e62:	cf 92       	push	r12
    4e64:	df 92       	push	r13
    4e66:	ef 92       	push	r14
    4e68:	ff 92       	push	r15
    4e6a:	4b 01       	movw	r8, r22
    4e6c:	5c 01       	movw	r10, r24
	return Rea / sqrt(1 - pow(E, 2) * pow(sin(latitudeRads), 2));
    4e6e:	ca 01       	movw	r24, r20
    4e70:	b9 01       	movw	r22, r18
    4e72:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    4e76:	6b 01       	movw	r12, r22
    4e78:	7c 01       	movw	r14, r24
    4e7a:	a5 01       	movw	r20, r10
    4e7c:	94 01       	movw	r18, r8
    4e7e:	c5 01       	movw	r24, r10
    4e80:	b4 01       	movw	r22, r8
    4e82:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4e86:	4b 01       	movw	r8, r22
    4e88:	5c 01       	movw	r10, r24
    4e8a:	a7 01       	movw	r20, r14
    4e8c:	96 01       	movw	r18, r12
    4e8e:	c7 01       	movw	r24, r14
    4e90:	b6 01       	movw	r22, r12
    4e92:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4e96:	9b 01       	movw	r18, r22
    4e98:	ac 01       	movw	r20, r24
    4e9a:	c5 01       	movw	r24, r10
    4e9c:	b4 01       	movw	r22, r8
    4e9e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4ea2:	9b 01       	movw	r18, r22
    4ea4:	ac 01       	movw	r20, r24
    4ea6:	60 e0       	ldi	r22, 0x00	; 0
    4ea8:	70 e0       	ldi	r23, 0x00	; 0
    4eaa:	80 e8       	ldi	r24, 0x80	; 128
    4eac:	9f e3       	ldi	r25, 0x3F	; 63
    4eae:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
    4eb2:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <sqrt>
    4eb6:	9b 01       	movw	r18, r22
    4eb8:	ac 01       	movw	r20, r24
    4eba:	62 e3       	ldi	r22, 0x32	; 50
    4ebc:	75 ea       	ldi	r23, 0xA5	; 165
    4ebe:	82 ec       	ldi	r24, 0xC2	; 194
    4ec0:	9a e4       	ldi	r25, 0x4A	; 74
    4ec2:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <__divsf3>
}
    4ec6:	ff 90       	pop	r15
    4ec8:	ef 90       	pop	r14
    4eca:	df 90       	pop	r13
    4ecc:	cf 90       	pop	r12
    4ece:	bf 90       	pop	r11
    4ed0:	af 90       	pop	r10
    4ed2:	9f 90       	pop	r9
    4ed4:	8f 90       	pop	r8
    4ed6:	08 95       	ret

00004ed8 <_ZN10helicopter4util14CoordinateUtil25ConvertFromGeodeticToECEFEfffRfS2_S2_>:
/**
 * A description of the variables used to convert lat/long to ecef can be found on page 25 of 
 * Unmanned Rotor Craft Systems
 */
void CoordinateUtil::ConvertFromGeodeticToECEF(float latitudeDegrees, float longitudeDegrees, float altitudeFeetAgl, float &ecefX, float &ecefY, float &ecefZ)
{
    4ed8:	2f 92       	push	r2
    4eda:	3f 92       	push	r3
    4edc:	4f 92       	push	r4
    4ede:	5f 92       	push	r5
    4ee0:	6f 92       	push	r6
    4ee2:	7f 92       	push	r7
    4ee4:	8f 92       	push	r8
    4ee6:	9f 92       	push	r9
    4ee8:	af 92       	push	r10
    4eea:	bf 92       	push	r11
    4eec:	cf 92       	push	r12
    4eee:	df 92       	push	r13
    4ef0:	ef 92       	push	r14
    4ef2:	ff 92       	push	r15
    4ef4:	0f 93       	push	r16
    4ef6:	1f 93       	push	r17
    4ef8:	cf 93       	push	r28
    4efa:	df 93       	push	r29
    4efc:	cd b7       	in	r28, 0x3d	; 61
    4efe:	de b7       	in	r29, 0x3e	; 62
    4f00:	2a 97       	sbiw	r28, 0x0a	; 10
    4f02:	0f b6       	in	r0, 0x3f	; 63
    4f04:	f8 94       	cli
    4f06:	de bf       	out	0x3e, r29	; 62
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	cd bf       	out	0x3d, r28	; 61
    4f0c:	29 01       	movw	r4, r18
    4f0e:	3a 01       	movw	r6, r20
    4f10:	ed 82       	std	Y+5, r14	; 0x05
    4f12:	fe 82       	std	Y+6, r15	; 0x06
    4f14:	0f 83       	std	Y+7, r16	; 0x07
    4f16:	18 87       	std	Y+8, r17	; 0x08
    4f18:	86 01       	movw	r16, r12
    4f1a:	15 01       	movw	r2, r10
    4f1c:	9a 86       	std	Y+10, r9	; 0x0a
    4f1e:	89 86       	std	Y+9, r8	; 0x09
	float radLat = DegreesToRad(latitudeDegrees);
    4f20:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    4f24:	6b 01       	movw	r12, r22
    4f26:	7c 01       	movw	r14, r24
	float radLong = DegreesToRad(longitudeDegrees);
    4f28:	c3 01       	movw	r24, r6
    4f2a:	b2 01       	movw	r22, r4
    4f2c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_ZN10helicopter4util14CoordinateUtil12DegreesToRadEf>
    4f30:	2b 01       	movw	r4, r22
    4f32:	3c 01       	movw	r6, r24
	

	float Ne = calculateNe(E, radLat);
    4f34:	a7 01       	movw	r20, r14
    4f36:	96 01       	movw	r18, r12
    4f38:	62 ed       	ldi	r22, 0xD2	; 210
    4f3a:	70 e9       	ldi	r23, 0x90	; 144
    4f3c:	87 ea       	ldi	r24, 0xA7	; 167
    4f3e:	9d e3       	ldi	r25, 0x3D	; 61
    4f40:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <_ZN10helicopter4util14CoordinateUtil11calculateNeEff>
    4f44:	69 83       	std	Y+1, r22	; 0x01
    4f46:	7a 83       	std	Y+2, r23	; 0x02
    4f48:	8b 83       	std	Y+3, r24	; 0x03
    4f4a:	9c 83       	std	Y+4, r25	; 0x04
	
	ecefX = (Ne + altitudeFeetAgl) * cos(radLat) * cos(radLong);
    4f4c:	c7 01       	movw	r24, r14
    4f4e:	b6 01       	movw	r22, r12
    4f50:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <cos>
    4f54:	4b 01       	movw	r8, r22
    4f56:	5c 01       	movw	r10, r24
    4f58:	2d 81       	ldd	r18, Y+5	; 0x05
    4f5a:	3e 81       	ldd	r19, Y+6	; 0x06
    4f5c:	4f 81       	ldd	r20, Y+7	; 0x07
    4f5e:	58 85       	ldd	r21, Y+8	; 0x08
    4f60:	69 81       	ldd	r22, Y+1	; 0x01
    4f62:	7a 81       	ldd	r23, Y+2	; 0x02
    4f64:	8b 81       	ldd	r24, Y+3	; 0x03
    4f66:	9c 81       	ldd	r25, Y+4	; 0x04
    4f68:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
    4f6c:	a5 01       	movw	r20, r10
    4f6e:	94 01       	movw	r18, r8
    4f70:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4f74:	b6 2e       	mov	r11, r22
    4f76:	a7 2e       	mov	r10, r23
    4f78:	98 2e       	mov	r9, r24
    4f7a:	89 2e       	mov	r8, r25
    4f7c:	c3 01       	movw	r24, r6
    4f7e:	b2 01       	movw	r22, r4
    4f80:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <cos>
    4f84:	9b 01       	movw	r18, r22
    4f86:	ac 01       	movw	r20, r24
    4f88:	6b 2d       	mov	r22, r11
    4f8a:	7a 2d       	mov	r23, r10
    4f8c:	89 2d       	mov	r24, r9
    4f8e:	98 2d       	mov	r25, r8
    4f90:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4f94:	f8 01       	movw	r30, r16
    4f96:	60 83       	st	Z, r22
    4f98:	71 83       	std	Z+1, r23	; 0x01
    4f9a:	82 83       	std	Z+2, r24	; 0x02
    4f9c:	93 83       	std	Z+3, r25	; 0x03
	ecefY = (Ne + altitudeFeetAgl) * cos(radLat) * sin(radLong);
    4f9e:	c3 01       	movw	r24, r6
    4fa0:	b2 01       	movw	r22, r4
    4fa2:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    4fa6:	9b 01       	movw	r18, r22
    4fa8:	ac 01       	movw	r20, r24
    4faa:	6b 2d       	mov	r22, r11
    4fac:	7a 2d       	mov	r23, r10
    4fae:	89 2d       	mov	r24, r9
    4fb0:	98 2d       	mov	r25, r8
    4fb2:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4fb6:	f1 01       	movw	r30, r2
    4fb8:	60 83       	st	Z, r22
    4fba:	71 83       	std	Z+1, r23	; 0x01
    4fbc:	82 83       	std	Z+2, r24	; 0x02
    4fbe:	93 83       	std	Z+3, r25	; 0x03
	ecefZ = ((Ne * (1 - pow(E, 2))) + altitudeFeetAgl) * sin(radLat);
    4fc0:	c7 01       	movw	r24, r14
    4fc2:	b6 01       	movw	r22, r12
    4fc4:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    4fc8:	6b 01       	movw	r12, r22
    4fca:	7c 01       	movw	r14, r24
    4fcc:	27 e4       	ldi	r18, 0x47	; 71
    4fce:	39 e4       	ldi	r19, 0x49	; 73
    4fd0:	4e e7       	ldi	r20, 0x7E	; 126
    4fd2:	5f e3       	ldi	r21, 0x3F	; 63
    4fd4:	69 81       	ldd	r22, Y+1	; 0x01
    4fd6:	7a 81       	ldd	r23, Y+2	; 0x02
    4fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fda:	9c 81       	ldd	r25, Y+4	; 0x04
    4fdc:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4fe0:	2d 81       	ldd	r18, Y+5	; 0x05
    4fe2:	3e 81       	ldd	r19, Y+6	; 0x06
    4fe4:	4f 81       	ldd	r20, Y+7	; 0x07
    4fe6:	58 85       	ldd	r21, Y+8	; 0x08
    4fe8:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
    4fec:	a7 01       	movw	r20, r14
    4fee:	96 01       	movw	r18, r12
    4ff0:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    4ff4:	e9 85       	ldd	r30, Y+9	; 0x09
    4ff6:	fa 85       	ldd	r31, Y+10	; 0x0a
    4ff8:	60 83       	st	Z, r22
    4ffa:	71 83       	std	Z+1, r23	; 0x01
    4ffc:	82 83       	std	Z+2, r24	; 0x02
    4ffe:	93 83       	std	Z+3, r25	; 0x03
}
    5000:	2a 96       	adiw	r28, 0x0a	; 10
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	de bf       	out	0x3e, r29	; 62
    5008:	0f be       	out	0x3f, r0	; 63
    500a:	cd bf       	out	0x3d, r28	; 61
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	1f 91       	pop	r17
    5012:	0f 91       	pop	r16
    5014:	ff 90       	pop	r15
    5016:	ef 90       	pop	r14
    5018:	df 90       	pop	r13
    501a:	cf 90       	pop	r12
    501c:	bf 90       	pop	r11
    501e:	af 90       	pop	r10
    5020:	9f 90       	pop	r9
    5022:	8f 90       	pop	r8
    5024:	7f 90       	pop	r7
    5026:	6f 90       	pop	r6
    5028:	5f 90       	pop	r5
    502a:	4f 90       	pop	r4
    502c:	3f 90       	pop	r3
    502e:	2f 90       	pop	r2
    5030:	08 95       	ret

00005032 <_ZN10helicopter4util14CoordinateUtil25ConvertFromECEFToLocalNEDEffffffPA3_fRfS4_S4_>:

void CoordinateUtil::ConvertFromECEFToLocalNED(float ecefReferenceX, float ecefReferenceY, float ecefReferenceZ,
	float ecefX, float ecefY, float ecefZ, float ecefToLocalNEDRotationMatrix[][3],
	float &localNEDX, float &localNEDY, float &localNEDZ)
{
    5032:	4f 92       	push	r4
    5034:	5f 92       	push	r5
    5036:	6f 92       	push	r6
    5038:	7f 92       	push	r7
    503a:	af 92       	push	r10
    503c:	bf 92       	push	r11
    503e:	cf 92       	push	r12
    5040:	df 92       	push	r13
    5042:	ef 92       	push	r14
    5044:	ff 92       	push	r15
    5046:	0f 93       	push	r16
    5048:	1f 93       	push	r17
    504a:	cf 93       	push	r28
    504c:	df 93       	push	r29
    504e:	cd b7       	in	r28, 0x3d	; 61
    5050:	de b7       	in	r29, 0x3e	; 62
    5052:	6c 97       	sbiw	r28, 0x1c	; 28
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	de bf       	out	0x3e, r29	; 62
    505a:	0f be       	out	0x3f, r0	; 63
    505c:	cd bf       	out	0x3d, r28	; 61
    505e:	29 01       	movw	r4, r18
    5060:	3a 01       	movw	r6, r20
    5062:	e9 8e       	std	Y+25, r14	; 0x19
    5064:	fa 8e       	std	Y+26, r15	; 0x1a
    5066:	0b 8f       	std	Y+27, r16	; 0x1b
    5068:	1c 8f       	std	Y+28, r17	; 0x1c
	//Get the current helicopters position relative to it's starting point in ecef.
	float differenceXECEF = ecefX - ecefReferenceX;
	float differenceYECEF = ecefY - ecefReferenceY;
	float differenceZECEF = ecefZ - ecefReferenceZ;
	
	float rotatedMatrix[3] = {};
    506a:	8e 01       	movw	r16, r28
    506c:	03 5f       	subi	r16, 0xF3	; 243
    506e:	1f 4f       	sbci	r17, 0xFF	; 255
    5070:	2c e0       	ldi	r18, 0x0C	; 12
    5072:	f8 01       	movw	r30, r16
    5074:	11 92       	st	Z+, r1
    5076:	2a 95       	dec	r18
    5078:	e9 f7       	brne	.-6      	; 0x5074 <_ZN10helicopter4util14CoordinateUtil25ConvertFromECEFToLocalNEDEffffffPA3_fRfS4_S4_+0x42>
void CoordinateUtil::ConvertFromECEFToLocalNED(float ecefReferenceX, float ecefReferenceY, float ecefReferenceZ,
	float ecefX, float ecefY, float ecefZ, float ecefToLocalNEDRotationMatrix[][3],
	float &localNEDX, float &localNEDY, float &localNEDZ)
{
	//Get the current helicopters position relative to it's starting point in ecef.
	float differenceXECEF = ecefX - ecefReferenceX;
    507a:	9b 01       	movw	r18, r22
    507c:	ac 01       	movw	r20, r24
    507e:	c6 01       	movw	r24, r12
    5080:	b5 01       	movw	r22, r10
    5082:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
	float differenceYECEF = ecefY - ecefReferenceY;
	float differenceZECEF = ecefZ - ecefReferenceZ;
	
	float rotatedMatrix[3] = {};
	float positionMatrix[3] = {differenceXECEF, differenceYECEF, differenceZECEF};
    5086:	69 83       	std	Y+1, r22	; 0x01
    5088:	7a 83       	std	Y+2, r23	; 0x02
    508a:	8b 83       	std	Y+3, r24	; 0x03
    508c:	9c 83       	std	Y+4, r25	; 0x04
	float ecefX, float ecefY, float ecefZ, float ecefToLocalNEDRotationMatrix[][3],
	float &localNEDX, float &localNEDY, float &localNEDZ)
{
	//Get the current helicopters position relative to it's starting point in ecef.
	float differenceXECEF = ecefX - ecefReferenceX;
	float differenceYECEF = ecefY - ecefReferenceY;
    508e:	a3 01       	movw	r20, r6
    5090:	92 01       	movw	r18, r4
    5092:	6e a5       	ldd	r22, Y+46	; 0x2e
    5094:	7f a5       	ldd	r23, Y+47	; 0x2f
    5096:	88 a9       	ldd	r24, Y+48	; 0x30
    5098:	99 a9       	ldd	r25, Y+49	; 0x31
    509a:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
	float differenceZECEF = ecefZ - ecefReferenceZ;
	
	float rotatedMatrix[3] = {};
	float positionMatrix[3] = {differenceXECEF, differenceYECEF, differenceZECEF};
    509e:	6d 83       	std	Y+5, r22	; 0x05
    50a0:	7e 83       	std	Y+6, r23	; 0x06
    50a2:	8f 83       	std	Y+7, r24	; 0x07
    50a4:	98 87       	std	Y+8, r25	; 0x08
	float &localNEDX, float &localNEDY, float &localNEDZ)
{
	//Get the current helicopters position relative to it's starting point in ecef.
	float differenceXECEF = ecefX - ecefReferenceX;
	float differenceYECEF = ecefY - ecefReferenceY;
	float differenceZECEF = ecefZ - ecefReferenceZ;
    50a6:	29 8d       	ldd	r18, Y+25	; 0x19
    50a8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    50aa:	4b 8d       	ldd	r20, Y+27	; 0x1b
    50ac:	5c 8d       	ldd	r21, Y+28	; 0x1c
    50ae:	6a a9       	ldd	r22, Y+50	; 0x32
    50b0:	7b a9       	ldd	r23, Y+51	; 0x33
    50b2:	8c a9       	ldd	r24, Y+52	; 0x34
    50b4:	9d a9       	ldd	r25, Y+53	; 0x35
    50b6:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
	
	float rotatedMatrix[3] = {};
	float positionMatrix[3] = {differenceXECEF, differenceYECEF, differenceZECEF};
    50ba:	69 87       	std	Y+9, r22	; 0x09
    50bc:	7a 87       	std	Y+10, r23	; 0x0a
    50be:	8b 87       	std	Y+11, r24	; 0x0b
    50c0:	9c 87       	std	Y+12, r25	; 0x0c
		
	//Rotate the current ecef position from earth centered earth fixed (ECEF) into North-East-Down(NED).
	//Iterate through the rows of the rotation matrix
	MatrixUtil::RotateMatrix(ecefToLocalNEDRotationMatrix,positionMatrix,rotatedMatrix);
    50c2:	a8 01       	movw	r20, r16
    50c4:	be 01       	movw	r22, r28
    50c6:	6f 5f       	subi	r22, 0xFF	; 255
    50c8:	7f 4f       	sbci	r23, 0xFF	; 255
    50ca:	8e a9       	ldd	r24, Y+54	; 0x36
    50cc:	9f a9       	ldd	r25, Y+55	; 0x37
    50ce:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_>
	
	localNEDX = rotatedMatrix[0];
    50d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d6:	af 85       	ldd	r26, Y+15	; 0x0f
    50d8:	b8 89       	ldd	r27, Y+16	; 0x10
    50da:	e8 ad       	ldd	r30, Y+56	; 0x38
    50dc:	f9 ad       	ldd	r31, Y+57	; 0x39
    50de:	80 83       	st	Z, r24
    50e0:	91 83       	std	Z+1, r25	; 0x01
    50e2:	a2 83       	std	Z+2, r26	; 0x02
    50e4:	b3 83       	std	Z+3, r27	; 0x03
	localNEDY = rotatedMatrix[1];
    50e6:	89 89       	ldd	r24, Y+17	; 0x11
    50e8:	9a 89       	ldd	r25, Y+18	; 0x12
    50ea:	ab 89       	ldd	r26, Y+19	; 0x13
    50ec:	bc 89       	ldd	r27, Y+20	; 0x14
    50ee:	ea ad       	ldd	r30, Y+58	; 0x3a
    50f0:	fb ad       	ldd	r31, Y+59	; 0x3b
    50f2:	80 83       	st	Z, r24
    50f4:	91 83       	std	Z+1, r25	; 0x01
    50f6:	a2 83       	std	Z+2, r26	; 0x02
    50f8:	b3 83       	std	Z+3, r27	; 0x03
	localNEDZ = rotatedMatrix[2];
    50fa:	8d 89       	ldd	r24, Y+21	; 0x15
    50fc:	9e 89       	ldd	r25, Y+22	; 0x16
    50fe:	af 89       	ldd	r26, Y+23	; 0x17
    5100:	b8 8d       	ldd	r27, Y+24	; 0x18
    5102:	ec ad       	ldd	r30, Y+60	; 0x3c
    5104:	fd ad       	ldd	r31, Y+61	; 0x3d
    5106:	80 83       	st	Z, r24
    5108:	91 83       	std	Z+1, r25	; 0x01
    510a:	a2 83       	std	Z+2, r26	; 0x02
    510c:	b3 83       	std	Z+3, r27	; 0x03
}
    510e:	6c 96       	adiw	r28, 0x1c	; 28
    5110:	0f b6       	in	r0, 0x3f	; 63
    5112:	f8 94       	cli
    5114:	de bf       	out	0x3e, r29	; 62
    5116:	0f be       	out	0x3f, r0	; 63
    5118:	cd bf       	out	0x3d, r28	; 61
    511a:	df 91       	pop	r29
    511c:	cf 91       	pop	r28
    511e:	1f 91       	pop	r17
    5120:	0f 91       	pop	r16
    5122:	ff 90       	pop	r15
    5124:	ef 90       	pop	r14
    5126:	df 90       	pop	r13
    5128:	cf 90       	pop	r12
    512a:	bf 90       	pop	r11
    512c:	af 90       	pop	r10
    512e:	7f 90       	pop	r7
    5130:	6f 90       	pop	r6
    5132:	5f 90       	pop	r5
    5134:	4f 90       	pop	r4
    5136:	08 95       	ret

00005138 <_ZN10helicopter4util14CoordinateUtil29ConvertFromGeodedicToLocalNEDEffffffPA3_fRfS4_S4_>:

void CoordinateUtil::ConvertFromGeodedicToLocalNED(
	float geodedicLatitude, float geodedicLongitude, float altitudeFeetAgl,
	float ecefReferenceX, float ecefReferenceY, float ecefReferenceZ, float ecefToLocalNEDRotationMatrix[][3],
	float &localNEDX,float &localNEDY,float &localNEDZ)
{
    5138:	2f 92       	push	r2
    513a:	3f 92       	push	r3
    513c:	4f 92       	push	r4
    513e:	5f 92       	push	r5
    5140:	6f 92       	push	r6
    5142:	7f 92       	push	r7
    5144:	8f 92       	push	r8
    5146:	9f 92       	push	r9
    5148:	af 92       	push	r10
    514a:	bf 92       	push	r11
    514c:	cf 92       	push	r12
    514e:	df 92       	push	r13
    5150:	ef 92       	push	r14
    5152:	ff 92       	push	r15
    5154:	0f 93       	push	r16
    5156:	1f 93       	push	r17
    5158:	cf 93       	push	r28
    515a:	df 93       	push	r29
    515c:	cd b7       	in	r28, 0x3d	; 61
    515e:	de b7       	in	r29, 0x3e	; 62
    5160:	62 97       	sbiw	r28, 0x12	; 18
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	25 01       	movw	r4, r10
    516e:	36 01       	movw	r6, r12
    5170:	e8 a9       	ldd	r30, Y+48	; 0x30
    5172:	ed 87       	std	Y+13, r30	; 0x0d
    5174:	e9 a9       	ldd	r30, Y+49	; 0x31
    5176:	ee 87       	std	Y+14, r30	; 0x0e
    5178:	ea a9       	ldd	r30, Y+50	; 0x32
    517a:	ef 87       	std	Y+15, r30	; 0x0f
    517c:	eb a9       	ldd	r30, Y+51	; 0x33
    517e:	e8 8b       	std	Y+16, r30	; 0x10
    5180:	ec a9       	ldd	r30, Y+52	; 0x34
    5182:	e9 8b       	std	Y+17, r30	; 0x11
    5184:	ed a9       	ldd	r30, Y+53	; 0x35
    5186:	ea 8b       	std	Y+18, r30	; 0x12
    5188:	3e a8       	ldd	r3, Y+54	; 0x36
    518a:	2f a8       	ldd	r2, Y+55	; 0x37
	float ecefX = 0;
    518c:	19 86       	std	Y+9, r1	; 0x09
    518e:	1a 86       	std	Y+10, r1	; 0x0a
    5190:	1b 86       	std	Y+11, r1	; 0x0b
    5192:	1c 86       	std	Y+12, r1	; 0x0c
	float ecefY = 0;
    5194:	1d 82       	std	Y+5, r1	; 0x05
    5196:	1e 82       	std	Y+6, r1	; 0x06
    5198:	1f 82       	std	Y+7, r1	; 0x07
    519a:	18 86       	std	Y+8, r1	; 0x08
	float ecefZ = 0;
    519c:	19 82       	std	Y+1, r1	; 0x01
    519e:	1a 82       	std	Y+2, r1	; 0x02
    51a0:	1b 82       	std	Y+3, r1	; 0x03
    51a2:	1c 82       	std	Y+4, r1	; 0x04
	
	ConvertFromGeodeticToECEF(geodedicLatitude, geodedicLongitude, altitudeFeetAgl, ecefX, ecefY, ecefZ);
    51a4:	88 24       	eor	r8, r8
    51a6:	83 94       	inc	r8
    51a8:	91 2c       	mov	r9, r1
    51aa:	8c 0e       	add	r8, r28
    51ac:	9d 1e       	adc	r9, r29
    51ae:	0f 2e       	mov	r0, r31
    51b0:	f5 e0       	ldi	r31, 0x05	; 5
    51b2:	af 2e       	mov	r10, r31
    51b4:	b1 2c       	mov	r11, r1
    51b6:	f0 2d       	mov	r31, r0
    51b8:	ac 0e       	add	r10, r28
    51ba:	bd 1e       	adc	r11, r29
    51bc:	0f 2e       	mov	r0, r31
    51be:	f9 e0       	ldi	r31, 0x09	; 9
    51c0:	cf 2e       	mov	r12, r31
    51c2:	d1 2c       	mov	r13, r1
    51c4:	f0 2d       	mov	r31, r0
    51c6:	cc 0e       	add	r12, r28
    51c8:	dd 1e       	adc	r13, r29
    51ca:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <_ZN10helicopter4util14CoordinateUtil25ConvertFromGeodeticToECEFEfffRfS2_S2_>
	
	ConvertFromECEFToLocalNED(ecefReferenceX, ecefReferenceY, ecefReferenceZ,
		ecefX, ecefY, ecefZ, ecefToLocalNEDRotationMatrix,
		localNEDX, localNEDY, localNEDZ);
    51ce:	a9 84       	ldd	r10, Y+9	; 0x09
    51d0:	ba 84       	ldd	r11, Y+10	; 0x0a
    51d2:	cb 84       	ldd	r12, Y+11	; 0x0b
    51d4:	dc 84       	ldd	r13, Y+12	; 0x0c
    51d6:	2f 92       	push	r2
    51d8:	3f 92       	push	r3
    51da:	8a 89       	ldd	r24, Y+18	; 0x12
    51dc:	8f 93       	push	r24
    51de:	99 89       	ldd	r25, Y+17	; 0x11
    51e0:	9f 93       	push	r25
    51e2:	e8 89       	ldd	r30, Y+16	; 0x10
    51e4:	ef 93       	push	r30
    51e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    51e8:	8f 93       	push	r24
    51ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ec:	9f 93       	push	r25
    51ee:	ed 85       	ldd	r30, Y+13	; 0x0d
    51f0:	ef 93       	push	r30
    51f2:	8c 81       	ldd	r24, Y+4	; 0x04
    51f4:	8f 93       	push	r24
    51f6:	8b 81       	ldd	r24, Y+3	; 0x03
    51f8:	8f 93       	push	r24
    51fa:	8a 81       	ldd	r24, Y+2	; 0x02
    51fc:	8f 93       	push	r24
    51fe:	89 81       	ldd	r24, Y+1	; 0x01
    5200:	8f 93       	push	r24
    5202:	88 85       	ldd	r24, Y+8	; 0x08
    5204:	8f 93       	push	r24
    5206:	8f 81       	ldd	r24, Y+7	; 0x07
    5208:	8f 93       	push	r24
    520a:	8e 81       	ldd	r24, Y+6	; 0x06
    520c:	8f 93       	push	r24
    520e:	8d 81       	ldd	r24, Y+5	; 0x05
    5210:	8f 93       	push	r24
    5212:	ec a4       	ldd	r14, Y+44	; 0x2c
    5214:	fd a4       	ldd	r15, Y+45	; 0x2d
    5216:	0e a5       	ldd	r16, Y+46	; 0x2e
    5218:	1f a5       	ldd	r17, Y+47	; 0x2f
    521a:	28 a5       	ldd	r18, Y+40	; 0x28
    521c:	39 a5       	ldd	r19, Y+41	; 0x29
    521e:	4a a5       	ldd	r20, Y+42	; 0x2a
    5220:	5b a5       	ldd	r21, Y+43	; 0x2b
    5222:	c3 01       	movw	r24, r6
    5224:	b2 01       	movw	r22, r4
    5226:	0e 94 19 28 	call	0x5032	; 0x5032 <_ZN10helicopter4util14CoordinateUtil25ConvertFromECEFToLocalNEDEffffffPA3_fRfS4_S4_>
    522a:	0f b6       	in	r0, 0x3f	; 63
    522c:	f8 94       	cli
    522e:	de bf       	out	0x3e, r29	; 62
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	cd bf       	out	0x3d, r28	; 61
    5234:	62 96       	adiw	r28, 0x12	; 18
    5236:	0f b6       	in	r0, 0x3f	; 63
    5238:	f8 94       	cli
    523a:	de bf       	out	0x3e, r29	; 62
    523c:	0f be       	out	0x3f, r0	; 63
    523e:	cd bf       	out	0x3d, r28	; 61
    5240:	df 91       	pop	r29
    5242:	cf 91       	pop	r28
    5244:	1f 91       	pop	r17
    5246:	0f 91       	pop	r16
    5248:	ff 90       	pop	r15
    524a:	ef 90       	pop	r14
    524c:	df 90       	pop	r13
    524e:	cf 90       	pop	r12
    5250:	bf 90       	pop	r11
    5252:	af 90       	pop	r10
    5254:	9f 90       	pop	r9
    5256:	8f 90       	pop	r8
    5258:	7f 90       	pop	r7
    525a:	6f 90       	pop	r6
    525c:	5f 90       	pop	r5
    525e:	4f 90       	pop	r4
    5260:	3f 90       	pop	r3
    5262:	2f 90       	pop	r2
    5264:	08 95       	ret

00005266 <_ZN10helicopter4util10MatrixUtil20CreateRotationMatrixEfffPA3_f>:
#include "MatrixUtil.h"

using namespace helicopter::util;

void MatrixUtil::CreateRotationMatrix( float phiRotationAboutXRads, float thetaRotationAboutYRads, float saiRotationAboutZRads, float rotationMatrix[][3] )
{
    5266:	2f 92       	push	r2
    5268:	3f 92       	push	r3
    526a:	4f 92       	push	r4
    526c:	5f 92       	push	r5
    526e:	6f 92       	push	r6
    5270:	7f 92       	push	r7
    5272:	8f 92       	push	r8
    5274:	9f 92       	push	r9
    5276:	af 92       	push	r10
    5278:	bf 92       	push	r11
    527a:	cf 92       	push	r12
    527c:	df 92       	push	r13
    527e:	ef 92       	push	r14
    5280:	ff 92       	push	r15
    5282:	0f 93       	push	r16
    5284:	1f 93       	push	r17
    5286:	cf 93       	push	r28
    5288:	df 93       	push	r29
    528a:	cd b7       	in	r28, 0x3d	; 61
    528c:	de b7       	in	r29, 0x3e	; 62
    528e:	69 97       	sbiw	r28, 0x19	; 25
    5290:	0f b6       	in	r0, 0x3f	; 63
    5292:	f8 94       	cli
    5294:	de bf       	out	0x3e, r29	; 62
    5296:	0f be       	out	0x3f, r0	; 63
    5298:	cd bf       	out	0x3d, r28	; 61
    529a:	4b 01       	movw	r8, r22
    529c:	5c 01       	movw	r10, r24
    529e:	29 01       	movw	r4, r18
    52a0:	3a 01       	movw	r6, r20
    52a2:	e9 82       	std	Y+1, r14	; 0x01
    52a4:	fa 82       	std	Y+2, r15	; 0x02
    52a6:	0b 83       	std	Y+3, r16	; 0x03
    52a8:	1c 83       	std	Y+4, r17	; 0x04
    52aa:	d9 8e       	std	Y+25, r13	; 0x19
    52ac:	c8 8e       	std	Y+24, r12	; 0x18
	rotationMatrix[0][0] = cos(thetaRotationAboutYRads)*cos(saiRotationAboutZRads);
    52ae:	ca 01       	movw	r24, r20
    52b0:	b9 01       	movw	r22, r18
    52b2:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <cos>
    52b6:	6d 83       	std	Y+5, r22	; 0x05
    52b8:	7e 83       	std	Y+6, r23	; 0x06
    52ba:	8f 83       	std	Y+7, r24	; 0x07
    52bc:	98 87       	std	Y+8, r25	; 0x08
    52be:	c8 01       	movw	r24, r16
    52c0:	b7 01       	movw	r22, r14
    52c2:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <cos>
    52c6:	6b 01       	movw	r12, r22
    52c8:	7c 01       	movw	r14, r24
    52ca:	9b 01       	movw	r18, r22
    52cc:	ac 01       	movw	r20, r24
    52ce:	6d 81       	ldd	r22, Y+5	; 0x05
    52d0:	7e 81       	ldd	r23, Y+6	; 0x06
    52d2:	8f 81       	ldd	r24, Y+7	; 0x07
    52d4:	98 85       	ldd	r25, Y+8	; 0x08
    52d6:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    52da:	e8 8d       	ldd	r30, Y+24	; 0x18
    52dc:	f9 8d       	ldd	r31, Y+25	; 0x19
    52de:	60 83       	st	Z, r22
    52e0:	71 83       	std	Z+1, r23	; 0x01
    52e2:	82 83       	std	Z+2, r24	; 0x02
    52e4:	93 83       	std	Z+3, r25	; 0x03
	rotationMatrix[0][1] = sin(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*cos(saiRotationAboutZRads) - cos(phiRotationAboutXRads)*sin(saiRotationAboutZRads);
    52e6:	c5 01       	movw	r24, r10
    52e8:	b4 01       	movw	r22, r8
    52ea:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    52ee:	69 87       	std	Y+9, r22	; 0x09
    52f0:	7a 87       	std	Y+10, r23	; 0x0a
    52f2:	8b 87       	std	Y+11, r24	; 0x0b
    52f4:	9c 87       	std	Y+12, r25	; 0x0c
    52f6:	c3 01       	movw	r24, r6
    52f8:	b2 01       	movw	r22, r4
    52fa:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    52fe:	69 8b       	std	Y+17, r22	; 0x11
    5300:	7a 8b       	std	Y+18, r23	; 0x12
    5302:	8b 8b       	std	Y+19, r24	; 0x13
    5304:	9c 8b       	std	Y+20, r25	; 0x14
    5306:	9b 01       	movw	r18, r22
    5308:	ac 01       	movw	r20, r24
    530a:	69 85       	ldd	r22, Y+9	; 0x09
    530c:	7a 85       	ldd	r23, Y+10	; 0x0a
    530e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5310:	9c 85       	ldd	r25, Y+12	; 0x0c
    5312:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    5316:	36 2e       	mov	r3, r22
    5318:	27 2e       	mov	r2, r23
    531a:	8d 8b       	std	Y+21, r24	; 0x15
    531c:	9e 8b       	std	Y+22, r25	; 0x16
    531e:	c5 01       	movw	r24, r10
    5320:	b4 01       	movw	r22, r8
    5322:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <cos>
    5326:	6d 87       	std	Y+13, r22	; 0x0d
    5328:	7e 87       	std	Y+14, r23	; 0x0e
    532a:	8f 87       	std	Y+15, r24	; 0x0f
    532c:	98 8b       	std	Y+16, r25	; 0x10
    532e:	69 81       	ldd	r22, Y+1	; 0x01
    5330:	7a 81       	ldd	r23, Y+2	; 0x02
    5332:	8b 81       	ldd	r24, Y+3	; 0x03
    5334:	9c 81       	ldd	r25, Y+4	; 0x04
    5336:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <sin>
    533a:	4b 01       	movw	r8, r22
    533c:	5c 01       	movw	r10, r24
    533e:	9d 89       	ldd	r25, Y+21	; 0x15
    5340:	8e 89       	ldd	r24, Y+22	; 0x16
    5342:	23 2d       	mov	r18, r3
    5344:	32 2d       	mov	r19, r2
    5346:	49 2f       	mov	r20, r25
    5348:	58 2f       	mov	r21, r24
    534a:	c7 01       	movw	r24, r14
    534c:	b6 01       	movw	r22, r12
    534e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    5352:	2b 01       	movw	r4, r22
    5354:	3c 01       	movw	r6, r24
    5356:	a5 01       	movw	r20, r10
    5358:	94 01       	movw	r18, r8
    535a:	6d 85       	ldd	r22, Y+13	; 0x0d
    535c:	7e 85       	ldd	r23, Y+14	; 0x0e
    535e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5360:	98 89       	ldd	r25, Y+16	; 0x10
    5362:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    5366:	9b 01       	movw	r18, r22
    5368:	ac 01       	movw	r20, r24
    536a:	c3 01       	movw	r24, r6
    536c:	b2 01       	movw	r22, r4
    536e:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
    5372:	e8 8d       	ldd	r30, Y+24	; 0x18
    5374:	f9 8d       	ldd	r31, Y+25	; 0x19
    5376:	64 83       	std	Z+4, r22	; 0x04
    5378:	75 83       	std	Z+5, r23	; 0x05
    537a:	86 83       	std	Z+6, r24	; 0x06
    537c:	97 83       	std	Z+7, r25	; 0x07
	rotationMatrix[0][2] = cos(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*cos(saiRotationAboutZRads) + sin(phiRotationAboutXRads)*sin(saiRotationAboutZRads);
    537e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5380:	3e 85       	ldd	r19, Y+14	; 0x0e
    5382:	4f 85       	ldd	r20, Y+15	; 0x0f
    5384:	58 89       	ldd	r21, Y+16	; 0x10
    5386:	69 89       	ldd	r22, Y+17	; 0x11
    5388:	7a 89       	ldd	r23, Y+18	; 0x12
    538a:	8b 89       	ldd	r24, Y+19	; 0x13
    538c:	9c 89       	ldd	r25, Y+20	; 0x14
    538e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    5392:	06 2f       	mov	r16, r22
    5394:	17 2f       	mov	r17, r23
    5396:	89 83       	std	Y+1, r24	; 0x01
    5398:	9f 8b       	std	Y+23, r25	; 0x17
    539a:	76 2f       	mov	r23, r22
    539c:	98 2f       	mov	r25, r24
    539e:	8f 89       	ldd	r24, Y+23	; 0x17
    53a0:	27 2f       	mov	r18, r23
    53a2:	31 2f       	mov	r19, r17
    53a4:	49 2f       	mov	r20, r25
    53a6:	58 2f       	mov	r21, r24
    53a8:	c7 01       	movw	r24, r14
    53aa:	b6 01       	movw	r22, r12
    53ac:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    53b0:	2b 01       	movw	r4, r22
    53b2:	3c 01       	movw	r6, r24
    53b4:	a5 01       	movw	r20, r10
    53b6:	94 01       	movw	r18, r8
    53b8:	69 85       	ldd	r22, Y+9	; 0x09
    53ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    53bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    53be:	9c 85       	ldd	r25, Y+12	; 0x0c
    53c0:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    53c4:	9b 01       	movw	r18, r22
    53c6:	ac 01       	movw	r20, r24
    53c8:	c3 01       	movw	r24, r6
    53ca:	b2 01       	movw	r22, r4
    53cc:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
    53d0:	e8 8d       	ldd	r30, Y+24	; 0x18
    53d2:	f9 8d       	ldd	r31, Y+25	; 0x19
    53d4:	60 87       	std	Z+8, r22	; 0x08
    53d6:	71 87       	std	Z+9, r23	; 0x09
    53d8:	82 87       	std	Z+10, r24	; 0x0a
    53da:	93 87       	std	Z+11, r25	; 0x0b
	rotationMatrix[1][0] = cos(thetaRotationAboutYRads)*sin(saiRotationAboutZRads);
    53dc:	a5 01       	movw	r20, r10
    53de:	94 01       	movw	r18, r8
    53e0:	6d 81       	ldd	r22, Y+5	; 0x05
    53e2:	7e 81       	ldd	r23, Y+6	; 0x06
    53e4:	8f 81       	ldd	r24, Y+7	; 0x07
    53e6:	98 85       	ldd	r25, Y+8	; 0x08
    53e8:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    53ec:	e8 8d       	ldd	r30, Y+24	; 0x18
    53ee:	f9 8d       	ldd	r31, Y+25	; 0x19
    53f0:	64 87       	std	Z+12, r22	; 0x0c
    53f2:	75 87       	std	Z+13, r23	; 0x0d
    53f4:	86 87       	std	Z+14, r24	; 0x0e
    53f6:	97 87       	std	Z+15, r25	; 0x0f
	rotationMatrix[1][1] = sin(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*sin(saiRotationAboutZRads) + cos(phiRotationAboutXRads)*cos(saiRotationAboutZRads);
    53f8:	a5 01       	movw	r20, r10
    53fa:	94 01       	movw	r18, r8
    53fc:	7d 88       	ldd	r7, Y+21	; 0x15
    53fe:	6e 88       	ldd	r6, Y+22	; 0x16
    5400:	63 2d       	mov	r22, r3
    5402:	72 2d       	mov	r23, r2
    5404:	87 2d       	mov	r24, r7
    5406:	96 2d       	mov	r25, r6
    5408:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    540c:	2b 01       	movw	r4, r22
    540e:	3c 01       	movw	r6, r24
    5410:	2d 85       	ldd	r18, Y+13	; 0x0d
    5412:	3e 85       	ldd	r19, Y+14	; 0x0e
    5414:	4f 85       	ldd	r20, Y+15	; 0x0f
    5416:	58 89       	ldd	r21, Y+16	; 0x10
    5418:	c7 01       	movw	r24, r14
    541a:	b6 01       	movw	r22, r12
    541c:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    5420:	9b 01       	movw	r18, r22
    5422:	ac 01       	movw	r20, r24
    5424:	c3 01       	movw	r24, r6
    5426:	b2 01       	movw	r22, r4
    5428:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
    542c:	e8 8d       	ldd	r30, Y+24	; 0x18
    542e:	f9 8d       	ldd	r31, Y+25	; 0x19
    5430:	60 8b       	std	Z+16, r22	; 0x10
    5432:	71 8b       	std	Z+17, r23	; 0x11
    5434:	82 8b       	std	Z+18, r24	; 0x12
    5436:	93 8b       	std	Z+19, r25	; 0x13
	rotationMatrix[1][2] = cos(phiRotationAboutXRads)*sin(thetaRotationAboutYRads)*sin(saiRotationAboutZRads) - sin(phiRotationAboutXRads)*cos(saiRotationAboutZRads);
    5438:	99 81       	ldd	r25, Y+1	; 0x01
    543a:	8f 89       	ldd	r24, Y+23	; 0x17
    543c:	20 2f       	mov	r18, r16
    543e:	31 2f       	mov	r19, r17
    5440:	49 2f       	mov	r20, r25
    5442:	58 2f       	mov	r21, r24
    5444:	c5 01       	movw	r24, r10
    5446:	b4 01       	movw	r22, r8
    5448:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    544c:	4b 01       	movw	r8, r22
    544e:	5c 01       	movw	r10, r24
    5450:	29 85       	ldd	r18, Y+9	; 0x09
    5452:	3a 85       	ldd	r19, Y+10	; 0x0a
    5454:	4b 85       	ldd	r20, Y+11	; 0x0b
    5456:	5c 85       	ldd	r21, Y+12	; 0x0c
    5458:	c7 01       	movw	r24, r14
    545a:	b6 01       	movw	r22, r12
    545c:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    5460:	9b 01       	movw	r18, r22
    5462:	ac 01       	movw	r20, r24
    5464:	c5 01       	movw	r24, r10
    5466:	b4 01       	movw	r22, r8
    5468:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__subsf3>
    546c:	e8 8d       	ldd	r30, Y+24	; 0x18
    546e:	f9 8d       	ldd	r31, Y+25	; 0x19
    5470:	64 8b       	std	Z+20, r22	; 0x14
    5472:	75 8b       	std	Z+21, r23	; 0x15
    5474:	86 8b       	std	Z+22, r24	; 0x16
    5476:	97 8b       	std	Z+23, r25	; 0x17
	rotationMatrix[2][0] = -sin(thetaRotationAboutYRads);
    5478:	89 89       	ldd	r24, Y+17	; 0x11
    547a:	9a 89       	ldd	r25, Y+18	; 0x12
    547c:	ab 89       	ldd	r26, Y+19	; 0x13
    547e:	bc 89       	ldd	r27, Y+20	; 0x14
    5480:	b0 58       	subi	r27, 0x80	; 128
    5482:	80 8f       	std	Z+24, r24	; 0x18
    5484:	91 8f       	std	Z+25, r25	; 0x19
    5486:	a2 8f       	std	Z+26, r26	; 0x1a
    5488:	b3 8f       	std	Z+27, r27	; 0x1b
	rotationMatrix[2][1] = sin(phiRotationAboutXRads)*cos(thetaRotationAboutYRads);
    548a:	29 85       	ldd	r18, Y+9	; 0x09
    548c:	3a 85       	ldd	r19, Y+10	; 0x0a
    548e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5490:	5c 85       	ldd	r21, Y+12	; 0x0c
    5492:	6d 81       	ldd	r22, Y+5	; 0x05
    5494:	7e 81       	ldd	r23, Y+6	; 0x06
    5496:	8f 81       	ldd	r24, Y+7	; 0x07
    5498:	98 85       	ldd	r25, Y+8	; 0x08
    549a:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    549e:	e8 8d       	ldd	r30, Y+24	; 0x18
    54a0:	f9 8d       	ldd	r31, Y+25	; 0x19
    54a2:	64 8f       	std	Z+28, r22	; 0x1c
    54a4:	75 8f       	std	Z+29, r23	; 0x1d
    54a6:	86 8f       	std	Z+30, r24	; 0x1e
    54a8:	97 8f       	std	Z+31, r25	; 0x1f
	rotationMatrix[2][2] = cos(phiRotationAboutXRads)*cos(thetaRotationAboutYRads);
    54aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    54ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    54ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    54b0:	58 89       	ldd	r21, Y+16	; 0x10
    54b2:	6d 81       	ldd	r22, Y+5	; 0x05
    54b4:	7e 81       	ldd	r23, Y+6	; 0x06
    54b6:	8f 81       	ldd	r24, Y+7	; 0x07
    54b8:	98 85       	ldd	r25, Y+8	; 0x08
    54ba:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    54be:	e8 8d       	ldd	r30, Y+24	; 0x18
    54c0:	f9 8d       	ldd	r31, Y+25	; 0x19
    54c2:	60 a3       	std	Z+32, r22	; 0x20
    54c4:	71 a3       	std	Z+33, r23	; 0x21
    54c6:	82 a3       	std	Z+34, r24	; 0x22
    54c8:	93 a3       	std	Z+35, r25	; 0x23
}
    54ca:	69 96       	adiw	r28, 0x19	; 25
    54cc:	0f b6       	in	r0, 0x3f	; 63
    54ce:	f8 94       	cli
    54d0:	de bf       	out	0x3e, r29	; 62
    54d2:	0f be       	out	0x3f, r0	; 63
    54d4:	cd bf       	out	0x3d, r28	; 61
    54d6:	df 91       	pop	r29
    54d8:	cf 91       	pop	r28
    54da:	1f 91       	pop	r17
    54dc:	0f 91       	pop	r16
    54de:	ff 90       	pop	r15
    54e0:	ef 90       	pop	r14
    54e2:	df 90       	pop	r13
    54e4:	cf 90       	pop	r12
    54e6:	bf 90       	pop	r11
    54e8:	af 90       	pop	r10
    54ea:	9f 90       	pop	r9
    54ec:	8f 90       	pop	r8
    54ee:	7f 90       	pop	r7
    54f0:	6f 90       	pop	r6
    54f2:	5f 90       	pop	r5
    54f4:	4f 90       	pop	r4
    54f6:	3f 90       	pop	r3
    54f8:	2f 90       	pop	r2
    54fa:	08 95       	ret

000054fc <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_>:
		}
	}
}

void MatrixUtil::RotateMatrix( float rotationMatrix[][3], float valuesToRotate[3], float rotatedValues[3] )
{
    54fc:	4f 92       	push	r4
    54fe:	5f 92       	push	r5
    5500:	6f 92       	push	r6
    5502:	7f 92       	push	r7
    5504:	8f 92       	push	r8
    5506:	9f 92       	push	r9
    5508:	af 92       	push	r10
    550a:	bf 92       	push	r11
    550c:	cf 92       	push	r12
    550e:	df 92       	push	r13
    5510:	ef 92       	push	r14
    5512:	ff 92       	push	r15
    5514:	0f 93       	push	r16
    5516:	1f 93       	push	r17
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
    551c:	4c 01       	movw	r8, r24
    551e:	46 2e       	mov	r4, r22
    5520:	57 2e       	mov	r5, r23
	//clear out the rotated values list;
	memset(rotatedValues,0,sizeof(float) * 3);
    5522:	e4 2f       	mov	r30, r20
    5524:	f5 2f       	mov	r31, r21
    5526:	8c e0       	ldi	r24, 0x0C	; 12
    5528:	df 01       	movw	r26, r30
    552a:	1d 92       	st	X+, r1
    552c:	8a 95       	dec	r24
    552e:	e9 f7       	brne	.-6      	; 0x552a <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x2e>
    5530:	e4 2e       	mov	r14, r20
    5532:	f5 2e       	mov	r15, r21
    5534:	a1 2c       	mov	r10, r1
    5536:	b1 2c       	mov	r11, r1
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
		}
	}
}

void MatrixUtil::RotateMatrix( float rotationMatrix[][3], float valuesToRotate[3], float rotatedValues[3] )
    5538:	0f 2e       	mov	r0, r31
    553a:	f3 e0       	ldi	r31, 0x03	; 3
    553c:	6f 2e       	mov	r6, r31
    553e:	71 2c       	mov	r7, r1
    5540:	f0 2d       	mov	r31, r0
    5542:	29 c0       	rjmp	.+82     	; 0x5596 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x9a>
	{
		//iterate through the columns of the rotation matrix
		for (int column = 0; column < 3; column++)
		{
			//technically the rotatedMatrix[row] is writing to a 'column' in the matrix, and valuesToRotate is actually the 'row'.
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
    5544:	f6 01       	movw	r30, r12
    5546:	61 91       	ld	r22, Z+
    5548:	71 91       	ld	r23, Z+
    554a:	81 91       	ld	r24, Z+
    554c:	91 91       	ld	r25, Z+
    554e:	6f 01       	movw	r12, r30
    5550:	d8 01       	movw	r26, r16
    5552:	2d 91       	ld	r18, X+
    5554:	3d 91       	ld	r19, X+
    5556:	4d 91       	ld	r20, X+
    5558:	5d 91       	ld	r21, X+
    555a:	8d 01       	movw	r16, r26
    555c:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__mulsf3>
    5560:	9b 01       	movw	r18, r22
    5562:	ac 01       	movw	r20, r24
    5564:	f7 01       	movw	r30, r14
    5566:	60 81       	ld	r22, Z
    5568:	71 81       	ldd	r23, Z+1	; 0x01
    556a:	82 81       	ldd	r24, Z+2	; 0x02
    556c:	93 81       	ldd	r25, Z+3	; 0x03
    556e:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <__addsf3>
    5572:	d7 01       	movw	r26, r14
    5574:	6d 93       	st	X+, r22
    5576:	7d 93       	st	X+, r23
    5578:	8d 93       	st	X+, r24
    557a:	9c 93       	st	X, r25
    557c:	13 97       	sbiw	r26, 0x03	; 3
    557e:	21 97       	sbiw	r28, 0x01	; 1
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
	{
		//iterate through the columns of the rotation matrix
		for (int column = 0; column < 3; column++)
    5580:	09 f7       	brne	.-62     	; 0x5544 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x48>
    5582:	bc e0       	ldi	r27, 0x0C	; 12
    5584:	ab 0e       	add	r10, r27
    5586:	b1 1c       	adc	r11, r1
    5588:	e4 e0       	ldi	r30, 0x04	; 4
    558a:	ee 0e       	add	r14, r30
    558c:	f1 1c       	adc	r15, r1
{
	//clear out the rotated values list;
	memset(rotatedValues,0,sizeof(float) * 3);
	
	//iterate through the rows of the rotation matrix.
	for (int row = 0; row < 3; row++)
    558e:	f4 e2       	ldi	r31, 0x24	; 36
    5590:	af 16       	cp	r10, r31
    5592:	b1 04       	cpc	r11, r1
    5594:	39 f0       	breq	.+14     	; 0x55a4 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0xa8>
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
		}
	}
}

void MatrixUtil::RotateMatrix( float rotationMatrix[][3], float valuesToRotate[3], float rotatedValues[3] )
    5596:	64 01       	movw	r12, r8
    5598:	ca 0c       	add	r12, r10
    559a:	db 1c       	adc	r13, r11
    559c:	04 2d       	mov	r16, r4
    559e:	15 2d       	mov	r17, r5
    55a0:	e3 01       	movw	r28, r6
    55a2:	d0 cf       	rjmp	.-96     	; 0x5544 <_ZN10helicopter4util10MatrixUtil12RotateMatrixEPA3_fPfS4_+0x48>
		{
			//technically the rotatedMatrix[row] is writing to a 'column' in the matrix, and valuesToRotate is actually the 'row'.
			rotatedValues[row] += rotationMatrix[row] [column] * valuesToRotate[column];
		}
	}
}
    55a4:	df 91       	pop	r29
    55a6:	cf 91       	pop	r28
    55a8:	1f 91       	pop	r17
    55aa:	0f 91       	pop	r16
    55ac:	ff 90       	pop	r15
    55ae:	ef 90       	pop	r14
    55b0:	df 90       	pop	r13
    55b2:	cf 90       	pop	r12
    55b4:	bf 90       	pop	r11
    55b6:	af 90       	pop	r10
    55b8:	9f 90       	pop	r9
    55ba:	8f 90       	pop	r8
    55bc:	7f 90       	pop	r7
    55be:	6f 90       	pop	r6
    55c0:	5f 90       	pop	r5
    55c2:	4f 90       	pop	r4
    55c4:	08 95       	ret

000055c6 <_ZN10helicopter4util5Timer11hasTimedoutEv>:

bool Timer::hasTimedout()
{
	//Check the Timer Interrupt Flags Register (TIFR) to determine if the flag was set indicating
	//that the timer has timed out.
	return (TIFR3 & (1<<OCF3A)) != 0;
    55c6:	88 b3       	in	r24, 0x18	; 24
}
    55c8:	86 95       	lsr	r24
    55ca:	81 70       	andi	r24, 0x01	; 1
    55cc:	08 95       	ret

000055ce <_ZN10helicopter4util5Timer9stopTimerEv>:

void Timer::stopTimer()
{
	//stop the timer
	TCCR3B = 0;
    55ce:	10 92 91 00 	sts	0x0091, r1
	
	//Then clear the timer counter (sets the count back to 0 so when the timer starts again, it starts from 0). 
	//Clear after stopping in order to avoid missing a compare match.
	TCNT3 = 0;
    55d2:	10 92 95 00 	sts	0x0095, r1
    55d6:	10 92 94 00 	sts	0x0094, r1
	
	//clear the timeout flag.
	TIFR3 |= (1<<OCF3A);
    55da:	c1 9a       	sbi	0x18, 1	; 24
    55dc:	08 95       	ret

000055de <_ZN10helicopter4util5Timer10startTimerEv>:
#include "Timer.h"

using namespace helicopter::util;

void Timer::startTimer()
{
    55de:	cf 92       	push	r12
    55e0:	df 92       	push	r13
    55e2:	ef 92       	push	r14
    55e4:	ff 92       	push	r15
    55e6:	0f 93       	push	r16
    55e8:	1f 93       	push	r17
    55ea:	cf 93       	push	r28
    55ec:	df 93       	push	r29
    55ee:	ec 01       	movw	r28, r24
	//stop timer in case it was already started.
	stopTimer();
    55f0:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <_ZN10helicopter4util5Timer9stopTimerEv>
	
	int frequency = 0;
	
	if (timeoutMilliseconds > 1000) 
    55f4:	6e 81       	ldd	r22, Y+6	; 0x06
    55f6:	7f 81       	ldd	r23, Y+7	; 0x07
    55f8:	69 3e       	cpi	r22, 0xE9	; 233
    55fa:	23 e0       	ldi	r18, 0x03	; 3
    55fc:	72 07       	cpc	r23, r18
    55fe:	34 f4       	brge	.+12     	; 0x560c <_ZN10helicopter4util5Timer10startTimerEv+0x2e>
	{
		frequency = 1;
	}else
	{
		frequency = 1000 / timeoutMilliseconds;
    5600:	88 ee       	ldi	r24, 0xE8	; 232
    5602:	93 e0       	ldi	r25, 0x03	; 3
    5604:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__divmodhi4>
    5608:	8b 01       	movw	r16, r22
    560a:	02 c0       	rjmp	.+4      	; 0x5610 <_ZN10helicopter4util5Timer10startTimerEv+0x32>
	
	int frequency = 0;
	
	if (timeoutMilliseconds > 1000) 
	{
		frequency = 1;
    560c:	01 e0       	ldi	r16, 0x01	; 1
    560e:	10 e0       	ldi	r17, 0x00	; 0
	}

	//setup timer.
	//set the output compare register so that when the Timer Counter (TCNT) matches this output register
	//it indicates that the timer has timed out.
	OCR3A = ((cpuSpeed /  timerPrescaler) / frequency); 
    5610:	2c 81       	ldd	r18, Y+4	; 0x04
    5612:	3d 81       	ldd	r19, Y+5	; 0x05
    5614:	44 27       	eor	r20, r20
    5616:	37 fd       	sbrc	r19, 7
    5618:	40 95       	com	r20
    561a:	54 2f       	mov	r21, r20
    561c:	68 81       	ld	r22, Y
    561e:	79 81       	ldd	r23, Y+1	; 0x01
    5620:	8a 81       	ldd	r24, Y+2	; 0x02
    5622:	9b 81       	ldd	r25, Y+3	; 0x03
    5624:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodsi4>
    5628:	69 01       	movw	r12, r18
    562a:	7a 01       	movw	r14, r20
    562c:	98 01       	movw	r18, r16
    562e:	44 27       	eor	r20, r20
    5630:	37 fd       	sbrc	r19, 7
    5632:	40 95       	com	r20
    5634:	54 2f       	mov	r21, r20
    5636:	c7 01       	movw	r24, r14
    5638:	b6 01       	movw	r22, r12
    563a:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodsi4>
    563e:	30 93 99 00 	sts	0x0099, r19
    5642:	20 93 98 00 	sts	0x0098, r18
		
	TCCR3B |= (1 << WGM32); //Configure timer 1 for Clear on Timer Compare (CTC) mode so that if there is a match, the TCNT goes back to 0.
    5646:	e1 e9       	ldi	r30, 0x91	; 145
    5648:	f0 e0       	ldi	r31, 0x00	; 0
    564a:	80 81       	ld	r24, Z
    564c:	88 60       	ori	r24, 0x08	; 8
    564e:	80 83       	st	Z, r24
		
	//Set the Timer Counter Control Register (TCCR) with the appropriate prescaller
	//which causes the timer counter to start (i.e. the timer starts).
	switch(timerPrescaler)
    5650:	8c 81       	ldd	r24, Y+4	; 0x04
    5652:	9d 81       	ldd	r25, Y+5	; 0x05
    5654:	80 34       	cpi	r24, 0x40	; 64
    5656:	91 05       	cpc	r25, r1
    5658:	d9 f0       	breq	.+54     	; 0x5690 <_ZN10helicopter4util5Timer10startTimerEv+0xb2>
    565a:	34 f4       	brge	.+12     	; 0x5668 <_ZN10helicopter4util5Timer10startTimerEv+0x8a>
    565c:	81 30       	cpi	r24, 0x01	; 1
    565e:	91 05       	cpc	r25, r1
    5660:	59 f0       	breq	.+22     	; 0x5678 <_ZN10helicopter4util5Timer10startTimerEv+0x9a>
    5662:	08 97       	sbiw	r24, 0x08	; 8
    5664:	39 f5       	brne	.+78     	; 0x56b4 <_ZN10helicopter4util5Timer10startTimerEv+0xd6>
    5666:	0e c0       	rjmp	.+28     	; 0x5684 <_ZN10helicopter4util5Timer10startTimerEv+0xa6>
    5668:	81 15       	cp	r24, r1
    566a:	21 e0       	ldi	r18, 0x01	; 1
    566c:	92 07       	cpc	r25, r18
    566e:	b1 f0       	breq	.+44     	; 0x569c <_ZN10helicopter4util5Timer10startTimerEv+0xbe>
    5670:	81 15       	cp	r24, r1
    5672:	94 40       	sbci	r25, 0x04	; 4
    5674:	f9 f4       	brne	.+62     	; 0x56b4 <_ZN10helicopter4util5Timer10startTimerEv+0xd6>
    5676:	18 c0       	rjmp	.+48     	; 0x56a8 <_ZN10helicopter4util5Timer10startTimerEv+0xca>
	{
		case NO_PRESCALER:
		TCCR3B |= NoPrescaling;
    5678:	e1 e9       	ldi	r30, 0x91	; 145
    567a:	f0 e0       	ldi	r31, 0x00	; 0
    567c:	80 81       	ld	r24, Z
    567e:	81 60       	ori	r24, 0x01	; 1
    5680:	80 83       	st	Z, r24
		break;
    5682:	1d c0       	rjmp	.+58     	; 0x56be <_ZN10helicopter4util5Timer10startTimerEv+0xe0>
		case PRESCALE_BY_EIGHT:
		TCCR3B |= PrescaleByEight;
    5684:	e1 e9       	ldi	r30, 0x91	; 145
    5686:	f0 e0       	ldi	r31, 0x00	; 0
    5688:	80 81       	ld	r24, Z
    568a:	82 60       	ori	r24, 0x02	; 2
    568c:	80 83       	st	Z, r24
		break;
    568e:	17 c0       	rjmp	.+46     	; 0x56be <_ZN10helicopter4util5Timer10startTimerEv+0xe0>
		case PRESCALE_BY_SIXTYFOUR:
		TCCR3B |= PrescaleBySixtyFour;
    5690:	e1 e9       	ldi	r30, 0x91	; 145
    5692:	f0 e0       	ldi	r31, 0x00	; 0
    5694:	80 81       	ld	r24, Z
    5696:	83 60       	ori	r24, 0x03	; 3
    5698:	80 83       	st	Z, r24
		break;
    569a:	11 c0       	rjmp	.+34     	; 0x56be <_ZN10helicopter4util5Timer10startTimerEv+0xe0>
		case PRESCALE_BY_TWOFIFTYSIX:
		TCCR3B |= PrescaleByTwofiftysix;
    569c:	e1 e9       	ldi	r30, 0x91	; 145
    569e:	f0 e0       	ldi	r31, 0x00	; 0
    56a0:	80 81       	ld	r24, Z
    56a2:	84 60       	ori	r24, 0x04	; 4
    56a4:	80 83       	st	Z, r24
		break;
    56a6:	0b c0       	rjmp	.+22     	; 0x56be <_ZN10helicopter4util5Timer10startTimerEv+0xe0>
		case PRESCALE_BY_TENTWENTYFOUR:
		TCCR3B |= PrescaleByTentwentyfour;
    56a8:	e1 e9       	ldi	r30, 0x91	; 145
    56aa:	f0 e0       	ldi	r31, 0x00	; 0
    56ac:	80 81       	ld	r24, Z
    56ae:	85 60       	ori	r24, 0x05	; 5
    56b0:	80 83       	st	Z, r24
		break;
    56b2:	05 c0       	rjmp	.+10     	; 0x56be <_ZN10helicopter4util5Timer10startTimerEv+0xe0>
		default:
		TCCR3B |= NoPrescaling;
    56b4:	e1 e9       	ldi	r30, 0x91	; 145
    56b6:	f0 e0       	ldi	r31, 0x00	; 0
    56b8:	80 81       	ld	r24, Z
    56ba:	81 60       	ori	r24, 0x01	; 1
    56bc:	80 83       	st	Z, r24
	}
}
    56be:	df 91       	pop	r29
    56c0:	cf 91       	pop	r28
    56c2:	1f 91       	pop	r17
    56c4:	0f 91       	pop	r16
    56c6:	ff 90       	pop	r15
    56c8:	ef 90       	pop	r14
    56ca:	df 90       	pop	r13
    56cc:	cf 90       	pop	r12
    56ce:	08 95       	ret

000056d0 <__subsf3>:
    56d0:	50 58       	subi	r21, 0x80	; 128

000056d2 <__addsf3>:
    56d2:	bb 27       	eor	r27, r27
    56d4:	aa 27       	eor	r26, r26
    56d6:	0e d0       	rcall	.+28     	; 0x56f4 <__addsf3x>
    56d8:	dc c1       	rjmp	.+952    	; 0x5a92 <__fp_round>
    56da:	a5 d1       	rcall	.+842    	; 0x5a26 <__fp_pscA>
    56dc:	30 f0       	brcs	.+12     	; 0x56ea <__addsf3+0x18>
    56de:	aa d1       	rcall	.+852    	; 0x5a34 <__fp_pscB>
    56e0:	20 f0       	brcs	.+8      	; 0x56ea <__addsf3+0x18>
    56e2:	31 f4       	brne	.+12     	; 0x56f0 <__addsf3+0x1e>
    56e4:	9f 3f       	cpi	r25, 0xFF	; 255
    56e6:	11 f4       	brne	.+4      	; 0x56ec <__addsf3+0x1a>
    56e8:	1e f4       	brtc	.+6      	; 0x56f0 <__addsf3+0x1e>
    56ea:	9a c1       	rjmp	.+820    	; 0x5a20 <__fp_nan>
    56ec:	0e f4       	brtc	.+2      	; 0x56f0 <__addsf3+0x1e>
    56ee:	e0 95       	com	r30
    56f0:	e7 fb       	bst	r30, 7
    56f2:	67 c1       	rjmp	.+718    	; 0x59c2 <__fp_inf>

000056f4 <__addsf3x>:
    56f4:	e9 2f       	mov	r30, r25
    56f6:	ef d1       	rcall	.+990    	; 0x5ad6 <__fp_split3>
    56f8:	80 f3       	brcs	.-32     	; 0x56da <__addsf3+0x8>
    56fa:	ba 17       	cp	r27, r26
    56fc:	62 07       	cpc	r22, r18
    56fe:	73 07       	cpc	r23, r19
    5700:	84 07       	cpc	r24, r20
    5702:	95 07       	cpc	r25, r21
    5704:	18 f0       	brcs	.+6      	; 0x570c <__addsf3x+0x18>
    5706:	71 f4       	brne	.+28     	; 0x5724 <__addsf3x+0x30>
    5708:	9e f5       	brtc	.+102    	; 0x5770 <__addsf3x+0x7c>
    570a:	1e c2       	rjmp	.+1084   	; 0x5b48 <__fp_zero>
    570c:	0e f4       	brtc	.+2      	; 0x5710 <__addsf3x+0x1c>
    570e:	e0 95       	com	r30
    5710:	0b 2e       	mov	r0, r27
    5712:	ba 2f       	mov	r27, r26
    5714:	a0 2d       	mov	r26, r0
    5716:	0b 01       	movw	r0, r22
    5718:	b9 01       	movw	r22, r18
    571a:	90 01       	movw	r18, r0
    571c:	0c 01       	movw	r0, r24
    571e:	ca 01       	movw	r24, r20
    5720:	a0 01       	movw	r20, r0
    5722:	11 24       	eor	r1, r1
    5724:	ff 27       	eor	r31, r31
    5726:	59 1b       	sub	r21, r25
    5728:	99 f0       	breq	.+38     	; 0x5750 <__addsf3x+0x5c>
    572a:	59 3f       	cpi	r21, 0xF9	; 249
    572c:	50 f4       	brcc	.+20     	; 0x5742 <__addsf3x+0x4e>
    572e:	50 3e       	cpi	r21, 0xE0	; 224
    5730:	68 f1       	brcs	.+90     	; 0x578c <__addsf3x+0x98>
    5732:	1a 16       	cp	r1, r26
    5734:	f0 40       	sbci	r31, 0x00	; 0
    5736:	a2 2f       	mov	r26, r18
    5738:	23 2f       	mov	r18, r19
    573a:	34 2f       	mov	r19, r20
    573c:	44 27       	eor	r20, r20
    573e:	58 5f       	subi	r21, 0xF8	; 248
    5740:	f3 cf       	rjmp	.-26     	; 0x5728 <__addsf3x+0x34>
    5742:	46 95       	lsr	r20
    5744:	37 95       	ror	r19
    5746:	27 95       	ror	r18
    5748:	a7 95       	ror	r26
    574a:	f0 40       	sbci	r31, 0x00	; 0
    574c:	53 95       	inc	r21
    574e:	c9 f7       	brne	.-14     	; 0x5742 <__addsf3x+0x4e>
    5750:	7e f4       	brtc	.+30     	; 0x5770 <__addsf3x+0x7c>
    5752:	1f 16       	cp	r1, r31
    5754:	ba 0b       	sbc	r27, r26
    5756:	62 0b       	sbc	r22, r18
    5758:	73 0b       	sbc	r23, r19
    575a:	84 0b       	sbc	r24, r20
    575c:	ba f0       	brmi	.+46     	; 0x578c <__addsf3x+0x98>
    575e:	91 50       	subi	r25, 0x01	; 1
    5760:	a1 f0       	breq	.+40     	; 0x578a <__addsf3x+0x96>
    5762:	ff 0f       	add	r31, r31
    5764:	bb 1f       	adc	r27, r27
    5766:	66 1f       	adc	r22, r22
    5768:	77 1f       	adc	r23, r23
    576a:	88 1f       	adc	r24, r24
    576c:	c2 f7       	brpl	.-16     	; 0x575e <__addsf3x+0x6a>
    576e:	0e c0       	rjmp	.+28     	; 0x578c <__addsf3x+0x98>
    5770:	ba 0f       	add	r27, r26
    5772:	62 1f       	adc	r22, r18
    5774:	73 1f       	adc	r23, r19
    5776:	84 1f       	adc	r24, r20
    5778:	48 f4       	brcc	.+18     	; 0x578c <__addsf3x+0x98>
    577a:	87 95       	ror	r24
    577c:	77 95       	ror	r23
    577e:	67 95       	ror	r22
    5780:	b7 95       	ror	r27
    5782:	f7 95       	ror	r31
    5784:	9e 3f       	cpi	r25, 0xFE	; 254
    5786:	08 f0       	brcs	.+2      	; 0x578a <__addsf3x+0x96>
    5788:	b3 cf       	rjmp	.-154    	; 0x56f0 <__addsf3+0x1e>
    578a:	93 95       	inc	r25
    578c:	88 0f       	add	r24, r24
    578e:	08 f0       	brcs	.+2      	; 0x5792 <__addsf3x+0x9e>
    5790:	99 27       	eor	r25, r25
    5792:	ee 0f       	add	r30, r30
    5794:	97 95       	ror	r25
    5796:	87 95       	ror	r24
    5798:	08 95       	ret

0000579a <__cmpsf2>:
    579a:	ef d0       	rcall	.+478    	; 0x597a <__fp_cmp>
    579c:	08 f4       	brcc	.+2      	; 0x57a0 <__cmpsf2+0x6>
    579e:	81 e0       	ldi	r24, 0x01	; 1
    57a0:	08 95       	ret

000057a2 <cos>:
    57a2:	50 d1       	rcall	.+672    	; 0x5a44 <__fp_rempio2>
    57a4:	e3 95       	inc	r30
    57a6:	86 c1       	rjmp	.+780    	; 0x5ab4 <__fp_sinus>

000057a8 <__divsf3>:
    57a8:	0c d0       	rcall	.+24     	; 0x57c2 <__divsf3x>
    57aa:	73 c1       	rjmp	.+742    	; 0x5a92 <__fp_round>
    57ac:	43 d1       	rcall	.+646    	; 0x5a34 <__fp_pscB>
    57ae:	40 f0       	brcs	.+16     	; 0x57c0 <__divsf3+0x18>
    57b0:	3a d1       	rcall	.+628    	; 0x5a26 <__fp_pscA>
    57b2:	30 f0       	brcs	.+12     	; 0x57c0 <__divsf3+0x18>
    57b4:	21 f4       	brne	.+8      	; 0x57be <__divsf3+0x16>
    57b6:	5f 3f       	cpi	r21, 0xFF	; 255
    57b8:	19 f0       	breq	.+6      	; 0x57c0 <__divsf3+0x18>
    57ba:	03 c1       	rjmp	.+518    	; 0x59c2 <__fp_inf>
    57bc:	51 11       	cpse	r21, r1
    57be:	c5 c1       	rjmp	.+906    	; 0x5b4a <__fp_szero>
    57c0:	2f c1       	rjmp	.+606    	; 0x5a20 <__fp_nan>

000057c2 <__divsf3x>:
    57c2:	89 d1       	rcall	.+786    	; 0x5ad6 <__fp_split3>
    57c4:	98 f3       	brcs	.-26     	; 0x57ac <__divsf3+0x4>

000057c6 <__divsf3_pse>:
    57c6:	99 23       	and	r25, r25
    57c8:	c9 f3       	breq	.-14     	; 0x57bc <__divsf3+0x14>
    57ca:	55 23       	and	r21, r21
    57cc:	b1 f3       	breq	.-20     	; 0x57ba <__divsf3+0x12>
    57ce:	95 1b       	sub	r25, r21
    57d0:	55 0b       	sbc	r21, r21
    57d2:	bb 27       	eor	r27, r27
    57d4:	aa 27       	eor	r26, r26
    57d6:	62 17       	cp	r22, r18
    57d8:	73 07       	cpc	r23, r19
    57da:	84 07       	cpc	r24, r20
    57dc:	38 f0       	brcs	.+14     	; 0x57ec <__divsf3_pse+0x26>
    57de:	9f 5f       	subi	r25, 0xFF	; 255
    57e0:	5f 4f       	sbci	r21, 0xFF	; 255
    57e2:	22 0f       	add	r18, r18
    57e4:	33 1f       	adc	r19, r19
    57e6:	44 1f       	adc	r20, r20
    57e8:	aa 1f       	adc	r26, r26
    57ea:	a9 f3       	breq	.-22     	; 0x57d6 <__divsf3_pse+0x10>
    57ec:	33 d0       	rcall	.+102    	; 0x5854 <__divsf3_pse+0x8e>
    57ee:	0e 2e       	mov	r0, r30
    57f0:	3a f0       	brmi	.+14     	; 0x5800 <__divsf3_pse+0x3a>
    57f2:	e0 e8       	ldi	r30, 0x80	; 128
    57f4:	30 d0       	rcall	.+96     	; 0x5856 <__divsf3_pse+0x90>
    57f6:	91 50       	subi	r25, 0x01	; 1
    57f8:	50 40       	sbci	r21, 0x00	; 0
    57fa:	e6 95       	lsr	r30
    57fc:	00 1c       	adc	r0, r0
    57fe:	ca f7       	brpl	.-14     	; 0x57f2 <__divsf3_pse+0x2c>
    5800:	29 d0       	rcall	.+82     	; 0x5854 <__divsf3_pse+0x8e>
    5802:	fe 2f       	mov	r31, r30
    5804:	27 d0       	rcall	.+78     	; 0x5854 <__divsf3_pse+0x8e>
    5806:	66 0f       	add	r22, r22
    5808:	77 1f       	adc	r23, r23
    580a:	88 1f       	adc	r24, r24
    580c:	bb 1f       	adc	r27, r27
    580e:	26 17       	cp	r18, r22
    5810:	37 07       	cpc	r19, r23
    5812:	48 07       	cpc	r20, r24
    5814:	ab 07       	cpc	r26, r27
    5816:	b0 e8       	ldi	r27, 0x80	; 128
    5818:	09 f0       	breq	.+2      	; 0x581c <__divsf3_pse+0x56>
    581a:	bb 0b       	sbc	r27, r27
    581c:	80 2d       	mov	r24, r0
    581e:	bf 01       	movw	r22, r30
    5820:	ff 27       	eor	r31, r31
    5822:	93 58       	subi	r25, 0x83	; 131
    5824:	5f 4f       	sbci	r21, 0xFF	; 255
    5826:	2a f0       	brmi	.+10     	; 0x5832 <__divsf3_pse+0x6c>
    5828:	9e 3f       	cpi	r25, 0xFE	; 254
    582a:	51 05       	cpc	r21, r1
    582c:	68 f0       	brcs	.+26     	; 0x5848 <__divsf3_pse+0x82>
    582e:	c9 c0       	rjmp	.+402    	; 0x59c2 <__fp_inf>
    5830:	8c c1       	rjmp	.+792    	; 0x5b4a <__fp_szero>
    5832:	5f 3f       	cpi	r21, 0xFF	; 255
    5834:	ec f3       	brlt	.-6      	; 0x5830 <__divsf3_pse+0x6a>
    5836:	98 3e       	cpi	r25, 0xE8	; 232
    5838:	dc f3       	brlt	.-10     	; 0x5830 <__divsf3_pse+0x6a>
    583a:	86 95       	lsr	r24
    583c:	77 95       	ror	r23
    583e:	67 95       	ror	r22
    5840:	b7 95       	ror	r27
    5842:	f7 95       	ror	r31
    5844:	9f 5f       	subi	r25, 0xFF	; 255
    5846:	c9 f7       	brne	.-14     	; 0x583a <__divsf3_pse+0x74>
    5848:	88 0f       	add	r24, r24
    584a:	91 1d       	adc	r25, r1
    584c:	96 95       	lsr	r25
    584e:	87 95       	ror	r24
    5850:	97 f9       	bld	r25, 7
    5852:	08 95       	ret
    5854:	e1 e0       	ldi	r30, 0x01	; 1
    5856:	66 0f       	add	r22, r22
    5858:	77 1f       	adc	r23, r23
    585a:	88 1f       	adc	r24, r24
    585c:	bb 1f       	adc	r27, r27
    585e:	62 17       	cp	r22, r18
    5860:	73 07       	cpc	r23, r19
    5862:	84 07       	cpc	r24, r20
    5864:	ba 07       	cpc	r27, r26
    5866:	20 f0       	brcs	.+8      	; 0x5870 <__divsf3_pse+0xaa>
    5868:	62 1b       	sub	r22, r18
    586a:	73 0b       	sbc	r23, r19
    586c:	84 0b       	sbc	r24, r20
    586e:	ba 0b       	sbc	r27, r26
    5870:	ee 1f       	adc	r30, r30
    5872:	88 f7       	brcc	.-30     	; 0x5856 <__divsf3_pse+0x90>
    5874:	e0 95       	com	r30
    5876:	08 95       	ret

00005878 <__fixsfsi>:
    5878:	04 d0       	rcall	.+8      	; 0x5882 <__fixunssfsi>
    587a:	68 94       	set
    587c:	b1 11       	cpse	r27, r1
    587e:	65 c1       	rjmp	.+714    	; 0x5b4a <__fp_szero>
    5880:	08 95       	ret

00005882 <__fixunssfsi>:
    5882:	31 d1       	rcall	.+610    	; 0x5ae6 <__fp_splitA>
    5884:	88 f0       	brcs	.+34     	; 0x58a8 <__fixunssfsi+0x26>
    5886:	9f 57       	subi	r25, 0x7F	; 127
    5888:	90 f0       	brcs	.+36     	; 0x58ae <__fixunssfsi+0x2c>
    588a:	b9 2f       	mov	r27, r25
    588c:	99 27       	eor	r25, r25
    588e:	b7 51       	subi	r27, 0x17	; 23
    5890:	a0 f0       	brcs	.+40     	; 0x58ba <__fixunssfsi+0x38>
    5892:	d1 f0       	breq	.+52     	; 0x58c8 <__fixunssfsi+0x46>
    5894:	66 0f       	add	r22, r22
    5896:	77 1f       	adc	r23, r23
    5898:	88 1f       	adc	r24, r24
    589a:	99 1f       	adc	r25, r25
    589c:	1a f0       	brmi	.+6      	; 0x58a4 <__fixunssfsi+0x22>
    589e:	ba 95       	dec	r27
    58a0:	c9 f7       	brne	.-14     	; 0x5894 <__fixunssfsi+0x12>
    58a2:	12 c0       	rjmp	.+36     	; 0x58c8 <__fixunssfsi+0x46>
    58a4:	b1 30       	cpi	r27, 0x01	; 1
    58a6:	81 f0       	breq	.+32     	; 0x58c8 <__fixunssfsi+0x46>
    58a8:	4f d1       	rcall	.+670    	; 0x5b48 <__fp_zero>
    58aa:	b1 e0       	ldi	r27, 0x01	; 1
    58ac:	08 95       	ret
    58ae:	4c c1       	rjmp	.+664    	; 0x5b48 <__fp_zero>
    58b0:	67 2f       	mov	r22, r23
    58b2:	78 2f       	mov	r23, r24
    58b4:	88 27       	eor	r24, r24
    58b6:	b8 5f       	subi	r27, 0xF8	; 248
    58b8:	39 f0       	breq	.+14     	; 0x58c8 <__fixunssfsi+0x46>
    58ba:	b9 3f       	cpi	r27, 0xF9	; 249
    58bc:	cc f3       	brlt	.-14     	; 0x58b0 <__fixunssfsi+0x2e>
    58be:	86 95       	lsr	r24
    58c0:	77 95       	ror	r23
    58c2:	67 95       	ror	r22
    58c4:	b3 95       	inc	r27
    58c6:	d9 f7       	brne	.-10     	; 0x58be <__fixunssfsi+0x3c>
    58c8:	3e f4       	brtc	.+14     	; 0x58d8 <__fixunssfsi+0x56>
    58ca:	90 95       	com	r25
    58cc:	80 95       	com	r24
    58ce:	70 95       	com	r23
    58d0:	61 95       	neg	r22
    58d2:	7f 4f       	sbci	r23, 0xFF	; 255
    58d4:	8f 4f       	sbci	r24, 0xFF	; 255
    58d6:	9f 4f       	sbci	r25, 0xFF	; 255
    58d8:	08 95       	ret

000058da <__floatunsisf>:
    58da:	e8 94       	clt
    58dc:	09 c0       	rjmp	.+18     	; 0x58f0 <__floatsisf+0x12>

000058de <__floatsisf>:
    58de:	97 fb       	bst	r25, 7
    58e0:	3e f4       	brtc	.+14     	; 0x58f0 <__floatsisf+0x12>
    58e2:	90 95       	com	r25
    58e4:	80 95       	com	r24
    58e6:	70 95       	com	r23
    58e8:	61 95       	neg	r22
    58ea:	7f 4f       	sbci	r23, 0xFF	; 255
    58ec:	8f 4f       	sbci	r24, 0xFF	; 255
    58ee:	9f 4f       	sbci	r25, 0xFF	; 255
    58f0:	99 23       	and	r25, r25
    58f2:	a9 f0       	breq	.+42     	; 0x591e <__floatsisf+0x40>
    58f4:	f9 2f       	mov	r31, r25
    58f6:	96 e9       	ldi	r25, 0x96	; 150
    58f8:	bb 27       	eor	r27, r27
    58fa:	93 95       	inc	r25
    58fc:	f6 95       	lsr	r31
    58fe:	87 95       	ror	r24
    5900:	77 95       	ror	r23
    5902:	67 95       	ror	r22
    5904:	b7 95       	ror	r27
    5906:	f1 11       	cpse	r31, r1
    5908:	f8 cf       	rjmp	.-16     	; 0x58fa <__floatsisf+0x1c>
    590a:	fa f4       	brpl	.+62     	; 0x594a <__floatsisf+0x6c>
    590c:	bb 0f       	add	r27, r27
    590e:	11 f4       	brne	.+4      	; 0x5914 <__floatsisf+0x36>
    5910:	60 ff       	sbrs	r22, 0
    5912:	1b c0       	rjmp	.+54     	; 0x594a <__floatsisf+0x6c>
    5914:	6f 5f       	subi	r22, 0xFF	; 255
    5916:	7f 4f       	sbci	r23, 0xFF	; 255
    5918:	8f 4f       	sbci	r24, 0xFF	; 255
    591a:	9f 4f       	sbci	r25, 0xFF	; 255
    591c:	16 c0       	rjmp	.+44     	; 0x594a <__floatsisf+0x6c>
    591e:	88 23       	and	r24, r24
    5920:	11 f0       	breq	.+4      	; 0x5926 <__floatsisf+0x48>
    5922:	96 e9       	ldi	r25, 0x96	; 150
    5924:	11 c0       	rjmp	.+34     	; 0x5948 <__floatsisf+0x6a>
    5926:	77 23       	and	r23, r23
    5928:	21 f0       	breq	.+8      	; 0x5932 <__floatsisf+0x54>
    592a:	9e e8       	ldi	r25, 0x8E	; 142
    592c:	87 2f       	mov	r24, r23
    592e:	76 2f       	mov	r23, r22
    5930:	05 c0       	rjmp	.+10     	; 0x593c <__floatsisf+0x5e>
    5932:	66 23       	and	r22, r22
    5934:	71 f0       	breq	.+28     	; 0x5952 <__floatsisf+0x74>
    5936:	96 e8       	ldi	r25, 0x86	; 134
    5938:	86 2f       	mov	r24, r22
    593a:	70 e0       	ldi	r23, 0x00	; 0
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	2a f0       	brmi	.+10     	; 0x594a <__floatsisf+0x6c>
    5940:	9a 95       	dec	r25
    5942:	66 0f       	add	r22, r22
    5944:	77 1f       	adc	r23, r23
    5946:	88 1f       	adc	r24, r24
    5948:	da f7       	brpl	.-10     	; 0x5940 <__floatsisf+0x62>
    594a:	88 0f       	add	r24, r24
    594c:	96 95       	lsr	r25
    594e:	87 95       	ror	r24
    5950:	97 f9       	bld	r25, 7
    5952:	08 95       	ret

00005954 <floor>:
    5954:	e2 d0       	rcall	.+452    	; 0x5b1a <__fp_trunc>
    5956:	80 f0       	brcs	.+32     	; 0x5978 <floor+0x24>
    5958:	9f 37       	cpi	r25, 0x7F	; 127
    595a:	40 f4       	brcc	.+16     	; 0x596c <floor+0x18>
    595c:	91 11       	cpse	r25, r1
    595e:	0e f0       	brts	.+2      	; 0x5962 <floor+0xe>
    5960:	f4 c0       	rjmp	.+488    	; 0x5b4a <__fp_szero>
    5962:	60 e0       	ldi	r22, 0x00	; 0
    5964:	70 e0       	ldi	r23, 0x00	; 0
    5966:	80 e8       	ldi	r24, 0x80	; 128
    5968:	9f eb       	ldi	r25, 0xBF	; 191
    596a:	08 95       	ret
    596c:	26 f4       	brtc	.+8      	; 0x5976 <floor+0x22>
    596e:	1b 16       	cp	r1, r27
    5970:	61 1d       	adc	r22, r1
    5972:	71 1d       	adc	r23, r1
    5974:	81 1d       	adc	r24, r1
    5976:	2b c0       	rjmp	.+86     	; 0x59ce <__fp_mintl>
    5978:	45 c0       	rjmp	.+138    	; 0x5a04 <__fp_mpack>

0000597a <__fp_cmp>:
    597a:	99 0f       	add	r25, r25
    597c:	00 08       	sbc	r0, r0
    597e:	55 0f       	add	r21, r21
    5980:	aa 0b       	sbc	r26, r26
    5982:	e0 e8       	ldi	r30, 0x80	; 128
    5984:	fe ef       	ldi	r31, 0xFE	; 254
    5986:	16 16       	cp	r1, r22
    5988:	17 06       	cpc	r1, r23
    598a:	e8 07       	cpc	r30, r24
    598c:	f9 07       	cpc	r31, r25
    598e:	c0 f0       	brcs	.+48     	; 0x59c0 <__fp_cmp+0x46>
    5990:	12 16       	cp	r1, r18
    5992:	13 06       	cpc	r1, r19
    5994:	e4 07       	cpc	r30, r20
    5996:	f5 07       	cpc	r31, r21
    5998:	98 f0       	brcs	.+38     	; 0x59c0 <__fp_cmp+0x46>
    599a:	62 1b       	sub	r22, r18
    599c:	73 0b       	sbc	r23, r19
    599e:	84 0b       	sbc	r24, r20
    59a0:	95 0b       	sbc	r25, r21
    59a2:	39 f4       	brne	.+14     	; 0x59b2 <__fp_cmp+0x38>
    59a4:	0a 26       	eor	r0, r26
    59a6:	61 f0       	breq	.+24     	; 0x59c0 <__fp_cmp+0x46>
    59a8:	23 2b       	or	r18, r19
    59aa:	24 2b       	or	r18, r20
    59ac:	25 2b       	or	r18, r21
    59ae:	21 f4       	brne	.+8      	; 0x59b8 <__fp_cmp+0x3e>
    59b0:	08 95       	ret
    59b2:	0a 26       	eor	r0, r26
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <__fp_cmp+0x3e>
    59b6:	a1 40       	sbci	r26, 0x01	; 1
    59b8:	a6 95       	lsr	r26
    59ba:	8f ef       	ldi	r24, 0xFF	; 255
    59bc:	81 1d       	adc	r24, r1
    59be:	81 1d       	adc	r24, r1
    59c0:	08 95       	ret

000059c2 <__fp_inf>:
    59c2:	97 f9       	bld	r25, 7
    59c4:	9f 67       	ori	r25, 0x7F	; 127
    59c6:	80 e8       	ldi	r24, 0x80	; 128
    59c8:	70 e0       	ldi	r23, 0x00	; 0
    59ca:	60 e0       	ldi	r22, 0x00	; 0
    59cc:	08 95       	ret

000059ce <__fp_mintl>:
    59ce:	88 23       	and	r24, r24
    59d0:	71 f4       	brne	.+28     	; 0x59ee <__fp_mintl+0x20>
    59d2:	77 23       	and	r23, r23
    59d4:	21 f0       	breq	.+8      	; 0x59de <__fp_mintl+0x10>
    59d6:	98 50       	subi	r25, 0x08	; 8
    59d8:	87 2b       	or	r24, r23
    59da:	76 2f       	mov	r23, r22
    59dc:	07 c0       	rjmp	.+14     	; 0x59ec <__fp_mintl+0x1e>
    59de:	66 23       	and	r22, r22
    59e0:	11 f4       	brne	.+4      	; 0x59e6 <__fp_mintl+0x18>
    59e2:	99 27       	eor	r25, r25
    59e4:	0d c0       	rjmp	.+26     	; 0x5a00 <__fp_mintl+0x32>
    59e6:	90 51       	subi	r25, 0x10	; 16
    59e8:	86 2b       	or	r24, r22
    59ea:	70 e0       	ldi	r23, 0x00	; 0
    59ec:	60 e0       	ldi	r22, 0x00	; 0
    59ee:	2a f0       	brmi	.+10     	; 0x59fa <__fp_mintl+0x2c>
    59f0:	9a 95       	dec	r25
    59f2:	66 0f       	add	r22, r22
    59f4:	77 1f       	adc	r23, r23
    59f6:	88 1f       	adc	r24, r24
    59f8:	da f7       	brpl	.-10     	; 0x59f0 <__fp_mintl+0x22>
    59fa:	88 0f       	add	r24, r24
    59fc:	96 95       	lsr	r25
    59fe:	87 95       	ror	r24
    5a00:	97 f9       	bld	r25, 7
    5a02:	08 95       	ret

00005a04 <__fp_mpack>:
    5a04:	9f 3f       	cpi	r25, 0xFF	; 255
    5a06:	31 f0       	breq	.+12     	; 0x5a14 <__fp_mpack_finite+0xc>

00005a08 <__fp_mpack_finite>:
    5a08:	91 50       	subi	r25, 0x01	; 1
    5a0a:	20 f4       	brcc	.+8      	; 0x5a14 <__fp_mpack_finite+0xc>
    5a0c:	87 95       	ror	r24
    5a0e:	77 95       	ror	r23
    5a10:	67 95       	ror	r22
    5a12:	b7 95       	ror	r27
    5a14:	88 0f       	add	r24, r24
    5a16:	91 1d       	adc	r25, r1
    5a18:	96 95       	lsr	r25
    5a1a:	87 95       	ror	r24
    5a1c:	97 f9       	bld	r25, 7
    5a1e:	08 95       	ret

00005a20 <__fp_nan>:
    5a20:	9f ef       	ldi	r25, 0xFF	; 255
    5a22:	80 ec       	ldi	r24, 0xC0	; 192
    5a24:	08 95       	ret

00005a26 <__fp_pscA>:
    5a26:	00 24       	eor	r0, r0
    5a28:	0a 94       	dec	r0
    5a2a:	16 16       	cp	r1, r22
    5a2c:	17 06       	cpc	r1, r23
    5a2e:	18 06       	cpc	r1, r24
    5a30:	09 06       	cpc	r0, r25
    5a32:	08 95       	ret

00005a34 <__fp_pscB>:
    5a34:	00 24       	eor	r0, r0
    5a36:	0a 94       	dec	r0
    5a38:	12 16       	cp	r1, r18
    5a3a:	13 06       	cpc	r1, r19
    5a3c:	14 06       	cpc	r1, r20
    5a3e:	05 06       	cpc	r0, r21
    5a40:	08 95       	ret
    5a42:	ee cf       	rjmp	.-36     	; 0x5a20 <__fp_nan>

00005a44 <__fp_rempio2>:
    5a44:	50 d0       	rcall	.+160    	; 0x5ae6 <__fp_splitA>
    5a46:	e8 f3       	brcs	.-6      	; 0x5a42 <__fp_pscB+0xe>
    5a48:	e8 94       	clt
    5a4a:	e0 e0       	ldi	r30, 0x00	; 0
    5a4c:	bb 27       	eor	r27, r27
    5a4e:	9f 57       	subi	r25, 0x7F	; 127
    5a50:	f0 f0       	brcs	.+60     	; 0x5a8e <__fp_rempio2+0x4a>
    5a52:	2a ed       	ldi	r18, 0xDA	; 218
    5a54:	3f e0       	ldi	r19, 0x0F	; 15
    5a56:	49 ec       	ldi	r20, 0xC9	; 201
    5a58:	06 c0       	rjmp	.+12     	; 0x5a66 <__fp_rempio2+0x22>
    5a5a:	ee 0f       	add	r30, r30
    5a5c:	bb 0f       	add	r27, r27
    5a5e:	66 1f       	adc	r22, r22
    5a60:	77 1f       	adc	r23, r23
    5a62:	88 1f       	adc	r24, r24
    5a64:	28 f0       	brcs	.+10     	; 0x5a70 <__fp_rempio2+0x2c>
    5a66:	b2 3a       	cpi	r27, 0xA2	; 162
    5a68:	62 07       	cpc	r22, r18
    5a6a:	73 07       	cpc	r23, r19
    5a6c:	84 07       	cpc	r24, r20
    5a6e:	28 f0       	brcs	.+10     	; 0x5a7a <__fp_rempio2+0x36>
    5a70:	b2 5a       	subi	r27, 0xA2	; 162
    5a72:	62 0b       	sbc	r22, r18
    5a74:	73 0b       	sbc	r23, r19
    5a76:	84 0b       	sbc	r24, r20
    5a78:	e3 95       	inc	r30
    5a7a:	9a 95       	dec	r25
    5a7c:	72 f7       	brpl	.-36     	; 0x5a5a <__fp_rempio2+0x16>
    5a7e:	80 38       	cpi	r24, 0x80	; 128
    5a80:	30 f4       	brcc	.+12     	; 0x5a8e <__fp_rempio2+0x4a>
    5a82:	9a 95       	dec	r25
    5a84:	bb 0f       	add	r27, r27
    5a86:	66 1f       	adc	r22, r22
    5a88:	77 1f       	adc	r23, r23
    5a8a:	88 1f       	adc	r24, r24
    5a8c:	d2 f7       	brpl	.-12     	; 0x5a82 <__fp_rempio2+0x3e>
    5a8e:	90 48       	sbci	r25, 0x80	; 128
    5a90:	bb cf       	rjmp	.-138    	; 0x5a08 <__fp_mpack_finite>

00005a92 <__fp_round>:
    5a92:	09 2e       	mov	r0, r25
    5a94:	03 94       	inc	r0
    5a96:	00 0c       	add	r0, r0
    5a98:	11 f4       	brne	.+4      	; 0x5a9e <__fp_round+0xc>
    5a9a:	88 23       	and	r24, r24
    5a9c:	52 f0       	brmi	.+20     	; 0x5ab2 <__fp_round+0x20>
    5a9e:	bb 0f       	add	r27, r27
    5aa0:	40 f4       	brcc	.+16     	; 0x5ab2 <__fp_round+0x20>
    5aa2:	bf 2b       	or	r27, r31
    5aa4:	11 f4       	brne	.+4      	; 0x5aaa <__fp_round+0x18>
    5aa6:	60 ff       	sbrs	r22, 0
    5aa8:	04 c0       	rjmp	.+8      	; 0x5ab2 <__fp_round+0x20>
    5aaa:	6f 5f       	subi	r22, 0xFF	; 255
    5aac:	7f 4f       	sbci	r23, 0xFF	; 255
    5aae:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab2:	08 95       	ret

00005ab4 <__fp_sinus>:
    5ab4:	ef 93       	push	r30
    5ab6:	e0 ff       	sbrs	r30, 0
    5ab8:	06 c0       	rjmp	.+12     	; 0x5ac6 <__fp_sinus+0x12>
    5aba:	a2 ea       	ldi	r26, 0xA2	; 162
    5abc:	2a ed       	ldi	r18, 0xDA	; 218
    5abe:	3f e0       	ldi	r19, 0x0F	; 15
    5ac0:	49 ec       	ldi	r20, 0xC9	; 201
    5ac2:	5f eb       	ldi	r21, 0xBF	; 191
    5ac4:	17 de       	rcall	.-978    	; 0x56f4 <__addsf3x>
    5ac6:	e5 df       	rcall	.-54     	; 0x5a92 <__fp_round>
    5ac8:	0f 90       	pop	r0
    5aca:	03 94       	inc	r0
    5acc:	01 fc       	sbrc	r0, 1
    5ace:	90 58       	subi	r25, 0x80	; 128
    5ad0:	e4 ee       	ldi	r30, 0xE4	; 228
    5ad2:	f0 e0       	ldi	r31, 0x00	; 0
    5ad4:	f6 c0       	rjmp	.+492    	; 0x5cc2 <__fp_powsodd>

00005ad6 <__fp_split3>:
    5ad6:	57 fd       	sbrc	r21, 7
    5ad8:	90 58       	subi	r25, 0x80	; 128
    5ada:	44 0f       	add	r20, r20
    5adc:	55 1f       	adc	r21, r21
    5ade:	59 f0       	breq	.+22     	; 0x5af6 <__fp_splitA+0x10>
    5ae0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ae2:	71 f0       	breq	.+28     	; 0x5b00 <__fp_splitA+0x1a>
    5ae4:	47 95       	ror	r20

00005ae6 <__fp_splitA>:
    5ae6:	88 0f       	add	r24, r24
    5ae8:	97 fb       	bst	r25, 7
    5aea:	99 1f       	adc	r25, r25
    5aec:	61 f0       	breq	.+24     	; 0x5b06 <__fp_splitA+0x20>
    5aee:	9f 3f       	cpi	r25, 0xFF	; 255
    5af0:	79 f0       	breq	.+30     	; 0x5b10 <__fp_splitA+0x2a>
    5af2:	87 95       	ror	r24
    5af4:	08 95       	ret
    5af6:	12 16       	cp	r1, r18
    5af8:	13 06       	cpc	r1, r19
    5afa:	14 06       	cpc	r1, r20
    5afc:	55 1f       	adc	r21, r21
    5afe:	f2 cf       	rjmp	.-28     	; 0x5ae4 <__fp_split3+0xe>
    5b00:	46 95       	lsr	r20
    5b02:	f1 df       	rcall	.-30     	; 0x5ae6 <__fp_splitA>
    5b04:	08 c0       	rjmp	.+16     	; 0x5b16 <__fp_splitA+0x30>
    5b06:	16 16       	cp	r1, r22
    5b08:	17 06       	cpc	r1, r23
    5b0a:	18 06       	cpc	r1, r24
    5b0c:	99 1f       	adc	r25, r25
    5b0e:	f1 cf       	rjmp	.-30     	; 0x5af2 <__fp_splitA+0xc>
    5b10:	86 95       	lsr	r24
    5b12:	71 05       	cpc	r23, r1
    5b14:	61 05       	cpc	r22, r1
    5b16:	08 94       	sec
    5b18:	08 95       	ret

00005b1a <__fp_trunc>:
    5b1a:	e5 df       	rcall	.-54     	; 0x5ae6 <__fp_splitA>
    5b1c:	a0 f0       	brcs	.+40     	; 0x5b46 <__fp_trunc+0x2c>
    5b1e:	be e7       	ldi	r27, 0x7E	; 126
    5b20:	b9 17       	cp	r27, r25
    5b22:	88 f4       	brcc	.+34     	; 0x5b46 <__fp_trunc+0x2c>
    5b24:	bb 27       	eor	r27, r27
    5b26:	9f 38       	cpi	r25, 0x8F	; 143
    5b28:	60 f4       	brcc	.+24     	; 0x5b42 <__fp_trunc+0x28>
    5b2a:	16 16       	cp	r1, r22
    5b2c:	b1 1d       	adc	r27, r1
    5b2e:	67 2f       	mov	r22, r23
    5b30:	78 2f       	mov	r23, r24
    5b32:	88 27       	eor	r24, r24
    5b34:	98 5f       	subi	r25, 0xF8	; 248
    5b36:	f7 cf       	rjmp	.-18     	; 0x5b26 <__fp_trunc+0xc>
    5b38:	86 95       	lsr	r24
    5b3a:	77 95       	ror	r23
    5b3c:	67 95       	ror	r22
    5b3e:	b1 1d       	adc	r27, r1
    5b40:	93 95       	inc	r25
    5b42:	96 39       	cpi	r25, 0x96	; 150
    5b44:	c8 f3       	brcs	.-14     	; 0x5b38 <__fp_trunc+0x1e>
    5b46:	08 95       	ret

00005b48 <__fp_zero>:
    5b48:	e8 94       	clt

00005b4a <__fp_szero>:
    5b4a:	bb 27       	eor	r27, r27
    5b4c:	66 27       	eor	r22, r22
    5b4e:	77 27       	eor	r23, r23
    5b50:	cb 01       	movw	r24, r22
    5b52:	97 f9       	bld	r25, 7
    5b54:	08 95       	ret

00005b56 <__gesf2>:
    5b56:	11 df       	rcall	.-478    	; 0x597a <__fp_cmp>
    5b58:	08 f4       	brcc	.+2      	; 0x5b5c <__gesf2+0x6>
    5b5a:	8f ef       	ldi	r24, 0xFF	; 255
    5b5c:	08 95       	ret

00005b5e <__mulsf3>:
    5b5e:	0b d0       	rcall	.+22     	; 0x5b76 <__mulsf3x>
    5b60:	98 cf       	rjmp	.-208    	; 0x5a92 <__fp_round>
    5b62:	61 df       	rcall	.-318    	; 0x5a26 <__fp_pscA>
    5b64:	28 f0       	brcs	.+10     	; 0x5b70 <__mulsf3+0x12>
    5b66:	66 df       	rcall	.-308    	; 0x5a34 <__fp_pscB>
    5b68:	18 f0       	brcs	.+6      	; 0x5b70 <__mulsf3+0x12>
    5b6a:	95 23       	and	r25, r21
    5b6c:	09 f0       	breq	.+2      	; 0x5b70 <__mulsf3+0x12>
    5b6e:	29 cf       	rjmp	.-430    	; 0x59c2 <__fp_inf>
    5b70:	57 cf       	rjmp	.-338    	; 0x5a20 <__fp_nan>
    5b72:	11 24       	eor	r1, r1
    5b74:	ea cf       	rjmp	.-44     	; 0x5b4a <__fp_szero>

00005b76 <__mulsf3x>:
    5b76:	af df       	rcall	.-162    	; 0x5ad6 <__fp_split3>
    5b78:	a0 f3       	brcs	.-24     	; 0x5b62 <__mulsf3+0x4>

00005b7a <__mulsf3_pse>:
    5b7a:	95 9f       	mul	r25, r21
    5b7c:	d1 f3       	breq	.-12     	; 0x5b72 <__mulsf3+0x14>
    5b7e:	95 0f       	add	r25, r21
    5b80:	50 e0       	ldi	r21, 0x00	; 0
    5b82:	55 1f       	adc	r21, r21
    5b84:	62 9f       	mul	r22, r18
    5b86:	f0 01       	movw	r30, r0
    5b88:	72 9f       	mul	r23, r18
    5b8a:	bb 27       	eor	r27, r27
    5b8c:	f0 0d       	add	r31, r0
    5b8e:	b1 1d       	adc	r27, r1
    5b90:	63 9f       	mul	r22, r19
    5b92:	aa 27       	eor	r26, r26
    5b94:	f0 0d       	add	r31, r0
    5b96:	b1 1d       	adc	r27, r1
    5b98:	aa 1f       	adc	r26, r26
    5b9a:	64 9f       	mul	r22, r20
    5b9c:	66 27       	eor	r22, r22
    5b9e:	b0 0d       	add	r27, r0
    5ba0:	a1 1d       	adc	r26, r1
    5ba2:	66 1f       	adc	r22, r22
    5ba4:	82 9f       	mul	r24, r18
    5ba6:	22 27       	eor	r18, r18
    5ba8:	b0 0d       	add	r27, r0
    5baa:	a1 1d       	adc	r26, r1
    5bac:	62 1f       	adc	r22, r18
    5bae:	73 9f       	mul	r23, r19
    5bb0:	b0 0d       	add	r27, r0
    5bb2:	a1 1d       	adc	r26, r1
    5bb4:	62 1f       	adc	r22, r18
    5bb6:	83 9f       	mul	r24, r19
    5bb8:	a0 0d       	add	r26, r0
    5bba:	61 1d       	adc	r22, r1
    5bbc:	22 1f       	adc	r18, r18
    5bbe:	74 9f       	mul	r23, r20
    5bc0:	33 27       	eor	r19, r19
    5bc2:	a0 0d       	add	r26, r0
    5bc4:	61 1d       	adc	r22, r1
    5bc6:	23 1f       	adc	r18, r19
    5bc8:	84 9f       	mul	r24, r20
    5bca:	60 0d       	add	r22, r0
    5bcc:	21 1d       	adc	r18, r1
    5bce:	82 2f       	mov	r24, r18
    5bd0:	76 2f       	mov	r23, r22
    5bd2:	6a 2f       	mov	r22, r26
    5bd4:	11 24       	eor	r1, r1
    5bd6:	9f 57       	subi	r25, 0x7F	; 127
    5bd8:	50 40       	sbci	r21, 0x00	; 0
    5bda:	8a f0       	brmi	.+34     	; 0x5bfe <__mulsf3_pse+0x84>
    5bdc:	e1 f0       	breq	.+56     	; 0x5c16 <__mulsf3_pse+0x9c>
    5bde:	88 23       	and	r24, r24
    5be0:	4a f0       	brmi	.+18     	; 0x5bf4 <__mulsf3_pse+0x7a>
    5be2:	ee 0f       	add	r30, r30
    5be4:	ff 1f       	adc	r31, r31
    5be6:	bb 1f       	adc	r27, r27
    5be8:	66 1f       	adc	r22, r22
    5bea:	77 1f       	adc	r23, r23
    5bec:	88 1f       	adc	r24, r24
    5bee:	91 50       	subi	r25, 0x01	; 1
    5bf0:	50 40       	sbci	r21, 0x00	; 0
    5bf2:	a9 f7       	brne	.-22     	; 0x5bde <__mulsf3_pse+0x64>
    5bf4:	9e 3f       	cpi	r25, 0xFE	; 254
    5bf6:	51 05       	cpc	r21, r1
    5bf8:	70 f0       	brcs	.+28     	; 0x5c16 <__mulsf3_pse+0x9c>
    5bfa:	e3 ce       	rjmp	.-570    	; 0x59c2 <__fp_inf>
    5bfc:	a6 cf       	rjmp	.-180    	; 0x5b4a <__fp_szero>
    5bfe:	5f 3f       	cpi	r21, 0xFF	; 255
    5c00:	ec f3       	brlt	.-6      	; 0x5bfc <__mulsf3_pse+0x82>
    5c02:	98 3e       	cpi	r25, 0xE8	; 232
    5c04:	dc f3       	brlt	.-10     	; 0x5bfc <__mulsf3_pse+0x82>
    5c06:	86 95       	lsr	r24
    5c08:	77 95       	ror	r23
    5c0a:	67 95       	ror	r22
    5c0c:	b7 95       	ror	r27
    5c0e:	f7 95       	ror	r31
    5c10:	e7 95       	ror	r30
    5c12:	9f 5f       	subi	r25, 0xFF	; 255
    5c14:	c1 f7       	brne	.-16     	; 0x5c06 <__mulsf3_pse+0x8c>
    5c16:	fe 2b       	or	r31, r30
    5c18:	88 0f       	add	r24, r24
    5c1a:	91 1d       	adc	r25, r1
    5c1c:	96 95       	lsr	r25
    5c1e:	87 95       	ror	r24
    5c20:	97 f9       	bld	r25, 7
    5c22:	08 95       	ret

00005c24 <sin>:
    5c24:	9f 93       	push	r25
    5c26:	0e df       	rcall	.-484    	; 0x5a44 <__fp_rempio2>
    5c28:	0f 90       	pop	r0
    5c2a:	07 fc       	sbrc	r0, 7
    5c2c:	ee 5f       	subi	r30, 0xFE	; 254
    5c2e:	42 cf       	rjmp	.-380    	; 0x5ab4 <__fp_sinus>
    5c30:	11 f4       	brne	.+4      	; 0x5c36 <sin+0x12>
    5c32:	0e f4       	brtc	.+2      	; 0x5c36 <sin+0x12>
    5c34:	f5 ce       	rjmp	.-534    	; 0x5a20 <__fp_nan>
    5c36:	e6 ce       	rjmp	.-564    	; 0x5a04 <__fp_mpack>

00005c38 <sqrt>:
    5c38:	56 df       	rcall	.-340    	; 0x5ae6 <__fp_splitA>
    5c3a:	d0 f3       	brcs	.-12     	; 0x5c30 <sin+0xc>
    5c3c:	99 23       	and	r25, r25
    5c3e:	d9 f3       	breq	.-10     	; 0x5c36 <sin+0x12>
    5c40:	ce f3       	brts	.-14     	; 0x5c34 <sin+0x10>
    5c42:	9f 57       	subi	r25, 0x7F	; 127
    5c44:	55 0b       	sbc	r21, r21
    5c46:	87 ff       	sbrs	r24, 7
    5c48:	35 d0       	rcall	.+106    	; 0x5cb4 <__fp_norm2>
    5c4a:	00 24       	eor	r0, r0
    5c4c:	a0 e6       	ldi	r26, 0x60	; 96
    5c4e:	40 ea       	ldi	r20, 0xA0	; 160
    5c50:	90 01       	movw	r18, r0
    5c52:	80 58       	subi	r24, 0x80	; 128
    5c54:	56 95       	lsr	r21
    5c56:	97 95       	ror	r25
    5c58:	28 f4       	brcc	.+10     	; 0x5c64 <sqrt+0x2c>
    5c5a:	80 5c       	subi	r24, 0xC0	; 192
    5c5c:	66 0f       	add	r22, r22
    5c5e:	77 1f       	adc	r23, r23
    5c60:	88 1f       	adc	r24, r24
    5c62:	20 f0       	brcs	.+8      	; 0x5c6c <sqrt+0x34>
    5c64:	26 17       	cp	r18, r22
    5c66:	37 07       	cpc	r19, r23
    5c68:	48 07       	cpc	r20, r24
    5c6a:	30 f4       	brcc	.+12     	; 0x5c78 <sqrt+0x40>
    5c6c:	62 1b       	sub	r22, r18
    5c6e:	73 0b       	sbc	r23, r19
    5c70:	84 0b       	sbc	r24, r20
    5c72:	20 29       	or	r18, r0
    5c74:	31 29       	or	r19, r1
    5c76:	4a 2b       	or	r20, r26
    5c78:	a6 95       	lsr	r26
    5c7a:	17 94       	ror	r1
    5c7c:	07 94       	ror	r0
    5c7e:	20 25       	eor	r18, r0
    5c80:	31 25       	eor	r19, r1
    5c82:	4a 27       	eor	r20, r26
    5c84:	58 f7       	brcc	.-42     	; 0x5c5c <sqrt+0x24>
    5c86:	66 0f       	add	r22, r22
    5c88:	77 1f       	adc	r23, r23
    5c8a:	88 1f       	adc	r24, r24
    5c8c:	20 f0       	brcs	.+8      	; 0x5c96 <sqrt+0x5e>
    5c8e:	26 17       	cp	r18, r22
    5c90:	37 07       	cpc	r19, r23
    5c92:	48 07       	cpc	r20, r24
    5c94:	30 f4       	brcc	.+12     	; 0x5ca2 <sqrt+0x6a>
    5c96:	62 0b       	sbc	r22, r18
    5c98:	73 0b       	sbc	r23, r19
    5c9a:	84 0b       	sbc	r24, r20
    5c9c:	20 0d       	add	r18, r0
    5c9e:	31 1d       	adc	r19, r1
    5ca0:	41 1d       	adc	r20, r1
    5ca2:	a0 95       	com	r26
    5ca4:	81 f7       	brne	.-32     	; 0x5c86 <sqrt+0x4e>
    5ca6:	b9 01       	movw	r22, r18
    5ca8:	84 2f       	mov	r24, r20
    5caa:	91 58       	subi	r25, 0x81	; 129
    5cac:	88 0f       	add	r24, r24
    5cae:	96 95       	lsr	r25
    5cb0:	87 95       	ror	r24
    5cb2:	08 95       	ret

00005cb4 <__fp_norm2>:
    5cb4:	91 50       	subi	r25, 0x01	; 1
    5cb6:	50 40       	sbci	r21, 0x00	; 0
    5cb8:	66 0f       	add	r22, r22
    5cba:	77 1f       	adc	r23, r23
    5cbc:	88 1f       	adc	r24, r24
    5cbe:	d2 f7       	brpl	.-12     	; 0x5cb4 <__fp_norm2>
    5cc0:	08 95       	ret

00005cc2 <__fp_powsodd>:
    5cc2:	9f 93       	push	r25
    5cc4:	8f 93       	push	r24
    5cc6:	7f 93       	push	r23
    5cc8:	6f 93       	push	r22
    5cca:	ff 93       	push	r31
    5ccc:	ef 93       	push	r30
    5cce:	9b 01       	movw	r18, r22
    5cd0:	ac 01       	movw	r20, r24
    5cd2:	45 df       	rcall	.-374    	; 0x5b5e <__mulsf3>
    5cd4:	ef 91       	pop	r30
    5cd6:	ff 91       	pop	r31
    5cd8:	05 d0       	rcall	.+10     	; 0x5ce4 <__fp_powser>
    5cda:	2f 91       	pop	r18
    5cdc:	3f 91       	pop	r19
    5cde:	4f 91       	pop	r20
    5ce0:	5f 91       	pop	r21
    5ce2:	3d cf       	rjmp	.-390    	; 0x5b5e <__mulsf3>

00005ce4 <__fp_powser>:
    5ce4:	df 93       	push	r29
    5ce6:	cf 93       	push	r28
    5ce8:	1f 93       	push	r17
    5cea:	0f 93       	push	r16
    5cec:	ff 92       	push	r15
    5cee:	ef 92       	push	r14
    5cf0:	df 92       	push	r13
    5cf2:	7b 01       	movw	r14, r22
    5cf4:	8c 01       	movw	r16, r24
    5cf6:	68 94       	set
    5cf8:	05 c0       	rjmp	.+10     	; 0x5d04 <__fp_powser+0x20>
    5cfa:	da 2e       	mov	r13, r26
    5cfc:	ef 01       	movw	r28, r30
    5cfe:	3b df       	rcall	.-394    	; 0x5b76 <__mulsf3x>
    5d00:	fe 01       	movw	r30, r28
    5d02:	e8 94       	clt
    5d04:	a5 91       	lpm	r26, Z+
    5d06:	25 91       	lpm	r18, Z+
    5d08:	35 91       	lpm	r19, Z+
    5d0a:	45 91       	lpm	r20, Z+
    5d0c:	55 91       	lpm	r21, Z+
    5d0e:	ae f3       	brts	.-22     	; 0x5cfa <__fp_powser+0x16>
    5d10:	ef 01       	movw	r28, r30
    5d12:	f0 dc       	rcall	.-1568   	; 0x56f4 <__addsf3x>
    5d14:	fe 01       	movw	r30, r28
    5d16:	97 01       	movw	r18, r14
    5d18:	a8 01       	movw	r20, r16
    5d1a:	da 94       	dec	r13
    5d1c:	79 f7       	brne	.-34     	; 0x5cfc <__fp_powser+0x18>
    5d1e:	df 90       	pop	r13
    5d20:	ef 90       	pop	r14
    5d22:	ff 90       	pop	r15
    5d24:	0f 91       	pop	r16
    5d26:	1f 91       	pop	r17
    5d28:	cf 91       	pop	r28
    5d2a:	df 91       	pop	r29
    5d2c:	08 95       	ret

00005d2e <__divmodhi4>:
    5d2e:	97 fb       	bst	r25, 7
    5d30:	07 2e       	mov	r0, r23
    5d32:	16 f4       	brtc	.+4      	; 0x5d38 <__divmodhi4+0xa>
    5d34:	00 94       	com	r0
    5d36:	07 d0       	rcall	.+14     	; 0x5d46 <__divmodhi4_neg1>
    5d38:	77 fd       	sbrc	r23, 7
    5d3a:	09 d0       	rcall	.+18     	; 0x5d4e <__divmodhi4_neg2>
    5d3c:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <__udivmodhi4>
    5d40:	07 fc       	sbrc	r0, 7
    5d42:	05 d0       	rcall	.+10     	; 0x5d4e <__divmodhi4_neg2>
    5d44:	3e f4       	brtc	.+14     	; 0x5d54 <__divmodhi4_exit>

00005d46 <__divmodhi4_neg1>:
    5d46:	90 95       	com	r25
    5d48:	81 95       	neg	r24
    5d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d4c:	08 95       	ret

00005d4e <__divmodhi4_neg2>:
    5d4e:	70 95       	com	r23
    5d50:	61 95       	neg	r22
    5d52:	7f 4f       	sbci	r23, 0xFF	; 255

00005d54 <__divmodhi4_exit>:
    5d54:	08 95       	ret

00005d56 <__udivmodsi4>:
    5d56:	a1 e2       	ldi	r26, 0x21	; 33
    5d58:	1a 2e       	mov	r1, r26
    5d5a:	aa 1b       	sub	r26, r26
    5d5c:	bb 1b       	sub	r27, r27
    5d5e:	fd 01       	movw	r30, r26
    5d60:	0d c0       	rjmp	.+26     	; 0x5d7c <__udivmodsi4_ep>

00005d62 <__udivmodsi4_loop>:
    5d62:	aa 1f       	adc	r26, r26
    5d64:	bb 1f       	adc	r27, r27
    5d66:	ee 1f       	adc	r30, r30
    5d68:	ff 1f       	adc	r31, r31
    5d6a:	a2 17       	cp	r26, r18
    5d6c:	b3 07       	cpc	r27, r19
    5d6e:	e4 07       	cpc	r30, r20
    5d70:	f5 07       	cpc	r31, r21
    5d72:	20 f0       	brcs	.+8      	; 0x5d7c <__udivmodsi4_ep>
    5d74:	a2 1b       	sub	r26, r18
    5d76:	b3 0b       	sbc	r27, r19
    5d78:	e4 0b       	sbc	r30, r20
    5d7a:	f5 0b       	sbc	r31, r21

00005d7c <__udivmodsi4_ep>:
    5d7c:	66 1f       	adc	r22, r22
    5d7e:	77 1f       	adc	r23, r23
    5d80:	88 1f       	adc	r24, r24
    5d82:	99 1f       	adc	r25, r25
    5d84:	1a 94       	dec	r1
    5d86:	69 f7       	brne	.-38     	; 0x5d62 <__udivmodsi4_loop>
    5d88:	60 95       	com	r22
    5d8a:	70 95       	com	r23
    5d8c:	80 95       	com	r24
    5d8e:	90 95       	com	r25
    5d90:	9b 01       	movw	r18, r22
    5d92:	ac 01       	movw	r20, r24
    5d94:	bd 01       	movw	r22, r26
    5d96:	cf 01       	movw	r24, r30
    5d98:	08 95       	ret

00005d9a <__udivmodhi4>:
    5d9a:	aa 1b       	sub	r26, r26
    5d9c:	bb 1b       	sub	r27, r27
    5d9e:	51 e1       	ldi	r21, 0x11	; 17
    5da0:	07 c0       	rjmp	.+14     	; 0x5db0 <__udivmodhi4_ep>

00005da2 <__udivmodhi4_loop>:
    5da2:	aa 1f       	adc	r26, r26
    5da4:	bb 1f       	adc	r27, r27
    5da6:	a6 17       	cp	r26, r22
    5da8:	b7 07       	cpc	r27, r23
    5daa:	10 f0       	brcs	.+4      	; 0x5db0 <__udivmodhi4_ep>
    5dac:	a6 1b       	sub	r26, r22
    5dae:	b7 0b       	sbc	r27, r23

00005db0 <__udivmodhi4_ep>:
    5db0:	88 1f       	adc	r24, r24
    5db2:	99 1f       	adc	r25, r25
    5db4:	5a 95       	dec	r21
    5db6:	a9 f7       	brne	.-22     	; 0x5da2 <__udivmodhi4_loop>
    5db8:	80 95       	com	r24
    5dba:	90 95       	com	r25
    5dbc:	bc 01       	movw	r22, r24
    5dbe:	cd 01       	movw	r24, r26
    5dc0:	08 95       	ret

00005dc2 <malloc>:
    5dc2:	0f 93       	push	r16
    5dc4:	1f 93       	push	r17
    5dc6:	cf 93       	push	r28
    5dc8:	df 93       	push	r29
    5dca:	82 30       	cpi	r24, 0x02	; 2
    5dcc:	91 05       	cpc	r25, r1
    5dce:	10 f4       	brcc	.+4      	; 0x5dd4 <malloc+0x12>
    5dd0:	82 e0       	ldi	r24, 0x02	; 2
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	e0 91 a8 02 	lds	r30, 0x02A8
    5dd8:	f0 91 a9 02 	lds	r31, 0x02A9
    5ddc:	20 e0       	ldi	r18, 0x00	; 0
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	c0 e0       	ldi	r28, 0x00	; 0
    5de2:	d0 e0       	ldi	r29, 0x00	; 0
    5de4:	23 c0       	rjmp	.+70     	; 0x5e2c <malloc+0x6a>
    5de6:	40 81       	ld	r20, Z
    5de8:	51 81       	ldd	r21, Z+1	; 0x01
    5dea:	48 17       	cp	r20, r24
    5dec:	59 07       	cpc	r21, r25
    5dee:	a8 f0       	brcs	.+42     	; 0x5e1a <malloc+0x58>
    5df0:	48 17       	cp	r20, r24
    5df2:	59 07       	cpc	r21, r25
    5df4:	61 f4       	brne	.+24     	; 0x5e0e <malloc+0x4c>
    5df6:	82 81       	ldd	r24, Z+2	; 0x02
    5df8:	93 81       	ldd	r25, Z+3	; 0x03
    5dfa:	20 97       	sbiw	r28, 0x00	; 0
    5dfc:	19 f0       	breq	.+6      	; 0x5e04 <malloc+0x42>
    5dfe:	9b 83       	std	Y+3, r25	; 0x03
    5e00:	8a 83       	std	Y+2, r24	; 0x02
    5e02:	2e c0       	rjmp	.+92     	; 0x5e60 <malloc+0x9e>
    5e04:	90 93 a9 02 	sts	0x02A9, r25
    5e08:	80 93 a8 02 	sts	0x02A8, r24
    5e0c:	29 c0       	rjmp	.+82     	; 0x5e60 <malloc+0x9e>
    5e0e:	21 15       	cp	r18, r1
    5e10:	31 05       	cpc	r19, r1
    5e12:	29 f0       	breq	.+10     	; 0x5e1e <malloc+0x5c>
    5e14:	42 17       	cp	r20, r18
    5e16:	53 07       	cpc	r21, r19
    5e18:	10 f0       	brcs	.+4      	; 0x5e1e <malloc+0x5c>
    5e1a:	a9 01       	movw	r20, r18
    5e1c:	02 c0       	rjmp	.+4      	; 0x5e22 <malloc+0x60>
    5e1e:	be 01       	movw	r22, r28
    5e20:	df 01       	movw	r26, r30
    5e22:	02 81       	ldd	r16, Z+2	; 0x02
    5e24:	13 81       	ldd	r17, Z+3	; 0x03
    5e26:	ef 01       	movw	r28, r30
    5e28:	9a 01       	movw	r18, r20
    5e2a:	f8 01       	movw	r30, r16
    5e2c:	30 97       	sbiw	r30, 0x00	; 0
    5e2e:	d9 f6       	brne	.-74     	; 0x5de6 <malloc+0x24>
    5e30:	21 15       	cp	r18, r1
    5e32:	31 05       	cpc	r19, r1
    5e34:	09 f1       	breq	.+66     	; 0x5e78 <malloc+0xb6>
    5e36:	28 1b       	sub	r18, r24
    5e38:	39 0b       	sbc	r19, r25
    5e3a:	24 30       	cpi	r18, 0x04	; 4
    5e3c:	31 05       	cpc	r19, r1
    5e3e:	90 f4       	brcc	.+36     	; 0x5e64 <malloc+0xa2>
    5e40:	12 96       	adiw	r26, 0x02	; 2
    5e42:	8d 91       	ld	r24, X+
    5e44:	9c 91       	ld	r25, X
    5e46:	13 97       	sbiw	r26, 0x03	; 3
    5e48:	61 15       	cp	r22, r1
    5e4a:	71 05       	cpc	r23, r1
    5e4c:	21 f0       	breq	.+8      	; 0x5e56 <malloc+0x94>
    5e4e:	fb 01       	movw	r30, r22
    5e50:	93 83       	std	Z+3, r25	; 0x03
    5e52:	82 83       	std	Z+2, r24	; 0x02
    5e54:	04 c0       	rjmp	.+8      	; 0x5e5e <malloc+0x9c>
    5e56:	90 93 a9 02 	sts	0x02A9, r25
    5e5a:	80 93 a8 02 	sts	0x02A8, r24
    5e5e:	fd 01       	movw	r30, r26
    5e60:	32 96       	adiw	r30, 0x02	; 2
    5e62:	44 c0       	rjmp	.+136    	; 0x5eec <malloc+0x12a>
    5e64:	fd 01       	movw	r30, r26
    5e66:	e2 0f       	add	r30, r18
    5e68:	f3 1f       	adc	r31, r19
    5e6a:	81 93       	st	Z+, r24
    5e6c:	91 93       	st	Z+, r25
    5e6e:	22 50       	subi	r18, 0x02	; 2
    5e70:	31 09       	sbc	r19, r1
    5e72:	2d 93       	st	X+, r18
    5e74:	3c 93       	st	X, r19
    5e76:	3a c0       	rjmp	.+116    	; 0x5eec <malloc+0x12a>
    5e78:	20 91 a6 02 	lds	r18, 0x02A6
    5e7c:	30 91 a7 02 	lds	r19, 0x02A7
    5e80:	23 2b       	or	r18, r19
    5e82:	41 f4       	brne	.+16     	; 0x5e94 <malloc+0xd2>
    5e84:	20 91 02 02 	lds	r18, 0x0202
    5e88:	30 91 03 02 	lds	r19, 0x0203
    5e8c:	30 93 a7 02 	sts	0x02A7, r19
    5e90:	20 93 a6 02 	sts	0x02A6, r18
    5e94:	20 91 00 02 	lds	r18, 0x0200
    5e98:	30 91 01 02 	lds	r19, 0x0201
    5e9c:	21 15       	cp	r18, r1
    5e9e:	31 05       	cpc	r19, r1
    5ea0:	41 f4       	brne	.+16     	; 0x5eb2 <malloc+0xf0>
    5ea2:	2d b7       	in	r18, 0x3d	; 61
    5ea4:	3e b7       	in	r19, 0x3e	; 62
    5ea6:	40 91 04 02 	lds	r20, 0x0204
    5eaa:	50 91 05 02 	lds	r21, 0x0205
    5eae:	24 1b       	sub	r18, r20
    5eb0:	35 0b       	sbc	r19, r21
    5eb2:	e0 91 a6 02 	lds	r30, 0x02A6
    5eb6:	f0 91 a7 02 	lds	r31, 0x02A7
    5eba:	e2 17       	cp	r30, r18
    5ebc:	f3 07       	cpc	r31, r19
    5ebe:	a0 f4       	brcc	.+40     	; 0x5ee8 <malloc+0x126>
    5ec0:	2e 1b       	sub	r18, r30
    5ec2:	3f 0b       	sbc	r19, r31
    5ec4:	28 17       	cp	r18, r24
    5ec6:	39 07       	cpc	r19, r25
    5ec8:	78 f0       	brcs	.+30     	; 0x5ee8 <malloc+0x126>
    5eca:	ac 01       	movw	r20, r24
    5ecc:	4e 5f       	subi	r20, 0xFE	; 254
    5ece:	5f 4f       	sbci	r21, 0xFF	; 255
    5ed0:	24 17       	cp	r18, r20
    5ed2:	35 07       	cpc	r19, r21
    5ed4:	48 f0       	brcs	.+18     	; 0x5ee8 <malloc+0x126>
    5ed6:	4e 0f       	add	r20, r30
    5ed8:	5f 1f       	adc	r21, r31
    5eda:	50 93 a7 02 	sts	0x02A7, r21
    5ede:	40 93 a6 02 	sts	0x02A6, r20
    5ee2:	81 93       	st	Z+, r24
    5ee4:	91 93       	st	Z+, r25
    5ee6:	02 c0       	rjmp	.+4      	; 0x5eec <malloc+0x12a>
    5ee8:	e0 e0       	ldi	r30, 0x00	; 0
    5eea:	f0 e0       	ldi	r31, 0x00	; 0
    5eec:	cf 01       	movw	r24, r30
    5eee:	df 91       	pop	r29
    5ef0:	cf 91       	pop	r28
    5ef2:	1f 91       	pop	r17
    5ef4:	0f 91       	pop	r16
    5ef6:	08 95       	ret

00005ef8 <free>:
    5ef8:	ef 92       	push	r14
    5efa:	ff 92       	push	r15
    5efc:	0f 93       	push	r16
    5efe:	1f 93       	push	r17
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
    5f04:	00 97       	sbiw	r24, 0x00	; 0
    5f06:	09 f4       	brne	.+2      	; 0x5f0a <free+0x12>
    5f08:	8f c0       	rjmp	.+286    	; 0x6028 <free+0x130>
    5f0a:	dc 01       	movw	r26, r24
    5f0c:	12 97       	sbiw	r26, 0x02	; 2
    5f0e:	13 96       	adiw	r26, 0x03	; 3
    5f10:	1c 92       	st	X, r1
    5f12:	1e 92       	st	-X, r1
    5f14:	12 97       	sbiw	r26, 0x02	; 2
    5f16:	e0 90 a8 02 	lds	r14, 0x02A8
    5f1a:	f0 90 a9 02 	lds	r15, 0x02A9
    5f1e:	e1 14       	cp	r14, r1
    5f20:	f1 04       	cpc	r15, r1
    5f22:	89 f4       	brne	.+34     	; 0x5f46 <free+0x4e>
    5f24:	2d 91       	ld	r18, X+
    5f26:	3c 91       	ld	r19, X
    5f28:	11 97       	sbiw	r26, 0x01	; 1
    5f2a:	28 0f       	add	r18, r24
    5f2c:	39 1f       	adc	r19, r25
    5f2e:	80 91 a6 02 	lds	r24, 0x02A6
    5f32:	90 91 a7 02 	lds	r25, 0x02A7
    5f36:	82 17       	cp	r24, r18
    5f38:	93 07       	cpc	r25, r19
    5f3a:	89 f5       	brne	.+98     	; 0x5f9e <free+0xa6>
    5f3c:	b0 93 a7 02 	sts	0x02A7, r27
    5f40:	a0 93 a6 02 	sts	0x02A6, r26
    5f44:	71 c0       	rjmp	.+226    	; 0x6028 <free+0x130>
    5f46:	e7 01       	movw	r28, r14
    5f48:	20 e0       	ldi	r18, 0x00	; 0
    5f4a:	30 e0       	ldi	r19, 0x00	; 0
    5f4c:	01 c0       	rjmp	.+2      	; 0x5f50 <free+0x58>
    5f4e:	ea 01       	movw	r28, r20
    5f50:	ca 17       	cp	r28, r26
    5f52:	db 07       	cpc	r29, r27
    5f54:	38 f4       	brcc	.+14     	; 0x5f64 <free+0x6c>
    5f56:	4a 81       	ldd	r20, Y+2	; 0x02
    5f58:	5b 81       	ldd	r21, Y+3	; 0x03
    5f5a:	9e 01       	movw	r18, r28
    5f5c:	41 15       	cp	r20, r1
    5f5e:	51 05       	cpc	r21, r1
    5f60:	b1 f7       	brne	.-20     	; 0x5f4e <free+0x56>
    5f62:	22 c0       	rjmp	.+68     	; 0x5fa8 <free+0xb0>
    5f64:	bc 01       	movw	r22, r24
    5f66:	62 50       	subi	r22, 0x02	; 2
    5f68:	71 09       	sbc	r23, r1
    5f6a:	fb 01       	movw	r30, r22
    5f6c:	d3 83       	std	Z+3, r29	; 0x03
    5f6e:	c2 83       	std	Z+2, r28	; 0x02
    5f70:	00 81       	ld	r16, Z
    5f72:	11 81       	ldd	r17, Z+1	; 0x01
    5f74:	ac 01       	movw	r20, r24
    5f76:	40 0f       	add	r20, r16
    5f78:	51 1f       	adc	r21, r17
    5f7a:	4c 17       	cp	r20, r28
    5f7c:	5d 07       	cpc	r21, r29
    5f7e:	61 f4       	brne	.+24     	; 0x5f98 <free+0xa0>
    5f80:	48 81       	ld	r20, Y
    5f82:	59 81       	ldd	r21, Y+1	; 0x01
    5f84:	40 0f       	add	r20, r16
    5f86:	51 1f       	adc	r21, r17
    5f88:	4e 5f       	subi	r20, 0xFE	; 254
    5f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f8c:	51 83       	std	Z+1, r21	; 0x01
    5f8e:	40 83       	st	Z, r20
    5f90:	4a 81       	ldd	r20, Y+2	; 0x02
    5f92:	5b 81       	ldd	r21, Y+3	; 0x03
    5f94:	53 83       	std	Z+3, r21	; 0x03
    5f96:	42 83       	std	Z+2, r20	; 0x02
    5f98:	21 15       	cp	r18, r1
    5f9a:	31 05       	cpc	r19, r1
    5f9c:	29 f4       	brne	.+10     	; 0x5fa8 <free+0xb0>
    5f9e:	b0 93 a9 02 	sts	0x02A9, r27
    5fa2:	a0 93 a8 02 	sts	0x02A8, r26
    5fa6:	40 c0       	rjmp	.+128    	; 0x6028 <free+0x130>
    5fa8:	f9 01       	movw	r30, r18
    5faa:	b3 83       	std	Z+3, r27	; 0x03
    5fac:	a2 83       	std	Z+2, r26	; 0x02
    5fae:	e9 01       	movw	r28, r18
    5fb0:	69 91       	ld	r22, Y+
    5fb2:	79 91       	ld	r23, Y+
    5fb4:	c6 0f       	add	r28, r22
    5fb6:	d7 1f       	adc	r29, r23
    5fb8:	ac 17       	cp	r26, r28
    5fba:	bd 07       	cpc	r27, r29
    5fbc:	79 f4       	brne	.+30     	; 0x5fdc <free+0xe4>
    5fbe:	dc 01       	movw	r26, r24
    5fc0:	5e 91       	ld	r21, -X
    5fc2:	4e 91       	ld	r20, -X
    5fc4:	46 0f       	add	r20, r22
    5fc6:	57 1f       	adc	r21, r23
    5fc8:	4e 5f       	subi	r20, 0xFE	; 254
    5fca:	5f 4f       	sbci	r21, 0xFF	; 255
    5fcc:	51 83       	std	Z+1, r21	; 0x01
    5fce:	40 83       	st	Z, r20
    5fd0:	12 96       	adiw	r26, 0x02	; 2
    5fd2:	8d 91       	ld	r24, X+
    5fd4:	9c 91       	ld	r25, X
    5fd6:	13 97       	sbiw	r26, 0x03	; 3
    5fd8:	93 83       	std	Z+3, r25	; 0x03
    5fda:	82 83       	std	Z+2, r24	; 0x02
    5fdc:	a0 e0       	ldi	r26, 0x00	; 0
    5fde:	b0 e0       	ldi	r27, 0x00	; 0
    5fe0:	02 c0       	rjmp	.+4      	; 0x5fe6 <free+0xee>
    5fe2:	d7 01       	movw	r26, r14
    5fe4:	7c 01       	movw	r14, r24
    5fe6:	f7 01       	movw	r30, r14
    5fe8:	82 81       	ldd	r24, Z+2	; 0x02
    5fea:	93 81       	ldd	r25, Z+3	; 0x03
    5fec:	00 97       	sbiw	r24, 0x00	; 0
    5fee:	c9 f7       	brne	.-14     	; 0x5fe2 <free+0xea>
    5ff0:	c7 01       	movw	r24, r14
    5ff2:	02 96       	adiw	r24, 0x02	; 2
    5ff4:	20 81       	ld	r18, Z
    5ff6:	31 81       	ldd	r19, Z+1	; 0x01
    5ff8:	82 0f       	add	r24, r18
    5ffa:	93 1f       	adc	r25, r19
    5ffc:	20 91 a6 02 	lds	r18, 0x02A6
    6000:	30 91 a7 02 	lds	r19, 0x02A7
    6004:	28 17       	cp	r18, r24
    6006:	39 07       	cpc	r19, r25
    6008:	79 f4       	brne	.+30     	; 0x6028 <free+0x130>
    600a:	10 97       	sbiw	r26, 0x00	; 0
    600c:	29 f4       	brne	.+10     	; 0x6018 <free+0x120>
    600e:	10 92 a9 02 	sts	0x02A9, r1
    6012:	10 92 a8 02 	sts	0x02A8, r1
    6016:	04 c0       	rjmp	.+8      	; 0x6020 <free+0x128>
    6018:	13 96       	adiw	r26, 0x03	; 3
    601a:	1c 92       	st	X, r1
    601c:	1e 92       	st	-X, r1
    601e:	12 97       	sbiw	r26, 0x02	; 2
    6020:	f0 92 a7 02 	sts	0x02A7, r15
    6024:	e0 92 a6 02 	sts	0x02A6, r14
    6028:	df 91       	pop	r29
    602a:	cf 91       	pop	r28
    602c:	1f 91       	pop	r17
    602e:	0f 91       	pop	r16
    6030:	ff 90       	pop	r15
    6032:	ef 90       	pop	r14
    6034:	08 95       	ret

00006036 <memcpy>:
    6036:	fb 01       	movw	r30, r22
    6038:	dc 01       	movw	r26, r24
    603a:	02 c0       	rjmp	.+4      	; 0x6040 <memcpy+0xa>
    603c:	01 90       	ld	r0, Z+
    603e:	0d 92       	st	X+, r0
    6040:	41 50       	subi	r20, 0x01	; 1
    6042:	50 40       	sbci	r21, 0x00	; 0
    6044:	d8 f7       	brcc	.-10     	; 0x603c <memcpy+0x6>
    6046:	08 95       	ret

00006048 <_exit>:
    6048:	f8 94       	cli

0000604a <__stop_program>:
    604a:	ff cf       	rjmp	.-2      	; 0x604a <__stop_program>
